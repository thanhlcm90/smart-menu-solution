
SMO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000148  00800100  00003080  00003114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003080  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  00800248  00800248  0000325c  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  0000325c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  00003ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000248  00000000  00000000  00004098  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000367a  00000000  00000000  000042e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f6a  00000000  00000000  0000795a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001843  00000000  00000000  000088c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a5c  00000000  00000000  0000a108  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000164b  00000000  00000000  0000ab64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024f4  00000000  00000000  0000c1af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  0000e6a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6f 00 	jmp	0xde	; 0xde <__ctors_end>
       4:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
       8:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
       c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      10:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      14:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      18:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      1c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      20:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      24:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      28:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      2c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      30:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      34:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      38:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      3c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      40:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__vector_16>
      44:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      48:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      4c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      50:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      54:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      58:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      5c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      60:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      64:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      68:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      6c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      70:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      74:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      78:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      7c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      80:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      84:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      88:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
      8c:	05 08       	sbc	r0, r5
      8e:	57 11       	cpse	r21, r7
      90:	46 08       	sbc	r4, r6
      92:	53 08       	sbc	r5, r3
      94:	6b 08       	sbc	r6, r11
      96:	9d 08       	sbc	r9, r13
      98:	cc 08       	sbc	r12, r12
      9a:	57 11       	cpse	r21, r7
      9c:	d5 08       	sbc	r13, r5
      9e:	6c 09       	sbc	r22, r12
      a0:	02 0a       	sbc	r0, r18
      a2:	76 0b       	sbc	r23, r22
      a4:	4e 0c       	add	r4, r14
      a6:	e4 0c       	add	r14, r4
      a8:	52 0e       	add	r5, r18
      aa:	2a 0f       	add	r18, r26
      ac:	c0 0f       	add	r28, r16
      ae:	8f 10       	cpse	r8, r15
      b0:	1d 11       	cpse	r17, r13
      b2:	43 11       	cpse	r20, r3
      b4:	a1 11       	cpse	r26, r1
      b6:	a8 11       	cpse	r26, r8
      b8:	af 11       	cpse	r26, r15
      ba:	b7 11       	cpse	r27, r7
      bc:	be 11       	cpse	r27, r14
      be:	c5 11       	cpse	r28, r5
      c0:	ce 11       	cpse	r28, r14
      c2:	d7 11       	cpse	r29, r7
      c4:	e0 11       	cpse	r30, r0
      c6:	ea 11       	cpse	r30, r10
      c8:	f3 11       	cpse	r31, r3
      ca:	fc 11       	cpse	r31, r12
      cc:	05 12       	cpse	r0, r21
      ce:	0e 12       	cpse	r0, r30
      d0:	16 12       	cpse	r1, r22
      d2:	1e 12       	cpse	r1, r30
      d4:	26 12       	cpse	r2, r22
      d6:	2e 12       	cpse	r2, r30
      d8:	36 12       	cpse	r3, r22
      da:	3e 12       	cpse	r3, r30
      dc:	46 12       	cpse	r4, r22

000000de <__ctors_end>:
      de:	11 24       	eor	r1, r1
      e0:	1f be       	out	0x3f, r1	; 63
      e2:	cf ef       	ldi	r28, 0xFF	; 255
      e4:	d0 e1       	ldi	r29, 0x10	; 16
      e6:	de bf       	out	0x3e, r29	; 62
      e8:	cd bf       	out	0x3d, r28	; 61

000000ea <__do_copy_data>:
      ea:	12 e0       	ldi	r17, 0x02	; 2
      ec:	a0 e0       	ldi	r26, 0x00	; 0
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	e0 e8       	ldi	r30, 0x80	; 128
      f2:	f0 e3       	ldi	r31, 0x30	; 48
      f4:	00 e0       	ldi	r16, 0x00	; 0
      f6:	0b bf       	out	0x3b, r16	; 59
      f8:	02 c0       	rjmp	.+4      	; 0xfe <__do_copy_data+0x14>
      fa:	07 90       	elpm	r0, Z+
      fc:	0d 92       	st	X+, r0
      fe:	a8 34       	cpi	r26, 0x48	; 72
     100:	b1 07       	cpc	r27, r17
     102:	d9 f7       	brne	.-10     	; 0xfa <__do_copy_data+0x10>

00000104 <__do_clear_bss>:
     104:	12 e0       	ldi	r17, 0x02	; 2
     106:	a8 e4       	ldi	r26, 0x48	; 72
     108:	b2 e0       	ldi	r27, 0x02	; 2
     10a:	01 c0       	rjmp	.+2      	; 0x10e <.do_clear_bss_start>

0000010c <.do_clear_bss_loop>:
     10c:	1d 92       	st	X+, r1

0000010e <.do_clear_bss_start>:
     10e:	a6 3b       	cpi	r26, 0xB6	; 182
     110:	b1 07       	cpc	r27, r17
     112:	e1 f7       	brne	.-8      	; 0x10c <.do_clear_bss_loop>
     114:	0e 94 c9 02 	call	0x592	; 0x592 <main>
     118:	0c 94 3e 18 	jmp	0x307c	; 0x307c <_exit>

0000011c <__bad_interrupt>:
     11c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000120 <KEYPAD_Check>:
uint8_t ascii_code[4][4]={16,15,14,13,
						  12,9,6,3,
						  10,8,5,2,
						  11,7,4,1};

uint8_t KEYPAD_Check() {
     120:	af 92       	push	r10
     122:	bf 92       	push	r11
     124:	cf 92       	push	r12
     126:	df 92       	push	r13
     128:	ef 92       	push	r14
     12a:	ff 92       	push	r15
     12c:	0f 93       	push	r16
     12e:	1f 93       	push	r17
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	20 e0       	ldi	r18, 0x00	; 0
     136:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     138:	41 e0       	ldi	r20, 0x01	; 1
     13a:	50 e0       	ldi	r21, 0x00	; 0
     13c:	e2 e6       	ldi	r30, 0x62	; 98
     13e:	f0 e0       	ldi	r31, 0x00	; 0
		_delay_us(10);
		keyin=KEYPAD_PIN & 0x0F;
		if (keyin!=0x0F)
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
     140:	a0 e1       	ldi	r26, 0x10	; 16
     142:	b1 e0       	ldi	r27, 0x01	; 1
     144:	0f 2e       	mov	r0, r31
     146:	f1 e1       	ldi	r31, 0x11	; 17
     148:	af 2e       	mov	r10, r31
     14a:	f1 e0       	ldi	r31, 0x01	; 1
     14c:	bf 2e       	mov	r11, r31
     14e:	f0 2d       	mov	r31, r0
     150:	02 e1       	ldi	r16, 0x12	; 18
     152:	11 e0       	ldi	r17, 0x01	; 1
     154:	0f 2e       	mov	r0, r31
     156:	f3 e1       	ldi	r31, 0x13	; 19
     158:	ef 2e       	mov	r14, r31
     15a:	f1 e0       	ldi	r31, 0x01	; 1
     15c:	ff 2e       	mov	r15, r31
     15e:	f0 2d       	mov	r31, r0
						  11,7,4,1};

uint8_t KEYPAD_Check() {
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     160:	b9 01       	movw	r22, r18
uint8_t ascii_code[4][4]={16,15,14,13,
						  12,9,6,3,
						  10,8,5,2,
						  11,7,4,1};

uint8_t KEYPAD_Check() {
     162:	c9 01       	movw	r24, r18
     164:	04 96       	adiw	r24, 0x04	; 4
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     166:	6a 01       	movw	r12, r20
     168:	02 c0       	rjmp	.+4      	; 0x16e <KEYPAD_Check+0x4e>
     16a:	cc 0c       	add	r12, r12
     16c:	dd 1c       	adc	r13, r13
     16e:	8a 95       	dec	r24
     170:	e2 f7       	brpl	.-8      	; 0x16a <KEYPAD_Check+0x4a>
     172:	c6 01       	movw	r24, r12
     174:	80 95       	com	r24
     176:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     178:	83 e0       	ldi	r24, 0x03	; 3
     17a:	8a 95       	dec	r24
     17c:	f1 f7       	brne	.-4      	; 0x17a <KEYPAD_Check+0x5a>
     17e:	00 00       	nop
		_delay_us(10);
		keyin=KEYPAD_PIN & 0x0F;
     180:	80 b1       	in	r24, 0x00	; 0
     182:	8f 70       	andi	r24, 0x0F	; 15
		if (keyin!=0x0F)
     184:	8f 30       	cpi	r24, 0x0F	; 15
     186:	29 f1       	breq	.+74     	; 0x1d2 <KEYPAD_Check+0xb2>
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
     188:	9c 91       	ld	r25, X
     18a:	98 17       	cp	r25, r24
     18c:	a9 f0       	breq	.+42     	; 0x1b8 <KEYPAD_Check+0x98>
     18e:	e5 01       	movw	r28, r10
     190:	98 81       	ld	r25, Y
     192:	98 17       	cp	r25, r24
     194:	59 f0       	breq	.+22     	; 0x1ac <KEYPAD_Check+0x8c>
     196:	e8 01       	movw	r28, r16
     198:	98 81       	ld	r25, Y
     19a:	98 17       	cp	r25, r24
     19c:	51 f0       	breq	.+20     	; 0x1b2 <KEYPAD_Check+0x92>
     19e:	e7 01       	movw	r28, r14
     1a0:	98 81       	ld	r25, Y
     1a2:	98 17       	cp	r25, r24
     1a4:	b1 f4       	brne	.+44     	; 0x1d2 <KEYPAD_Check+0xb2>
     1a6:	e3 e0       	ldi	r30, 0x03	; 3
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	08 c0       	rjmp	.+16     	; 0x1bc <KEYPAD_Check+0x9c>
     1ac:	e1 e0       	ldi	r30, 0x01	; 1
     1ae:	f0 e0       	ldi	r31, 0x00	; 0
     1b0:	05 c0       	rjmp	.+10     	; 0x1bc <KEYPAD_Check+0x9c>
     1b2:	e2 e0       	ldi	r30, 0x02	; 2
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	02 c0       	rjmp	.+4      	; 0x1bc <KEYPAD_Check+0x9c>
     1b8:	e0 e0       	ldi	r30, 0x00	; 0
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	ee 0f       	add	r30, r30
     1be:	ff 1f       	adc	r31, r31
     1c0:	ee 0f       	add	r30, r30
     1c2:	ff 1f       	adc	r31, r31
     1c4:	6e 0f       	add	r22, r30
     1c6:	7f 1f       	adc	r23, r31
     1c8:	fb 01       	movw	r30, r22
     1ca:	e0 50       	subi	r30, 0x00	; 0
     1cc:	ff 4f       	sbci	r31, 0xFF	; 255
     1ce:	80 81       	ld	r24, Z
     1d0:	06 c0       	rjmp	.+12     	; 0x1de <KEYPAD_Check+0xbe>
     1d2:	2f 5f       	subi	r18, 0xFF	; 255
     1d4:	3f 4f       	sbci	r19, 0xFF	; 255
						  10,8,5,2,
						  11,7,4,1};

uint8_t KEYPAD_Check() {
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
     1d6:	24 30       	cpi	r18, 0x04	; 4
     1d8:	31 05       	cpc	r19, r1
     1da:	11 f6       	brne	.-124    	; 0x160 <KEYPAD_Check+0x40>
		keyin=KEYPAD_PIN & 0x0F;
		if (keyin!=0x0F)
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
	}
	return 0;
     1dc:	80 e0       	ldi	r24, 0x00	; 0
}
     1de:	df 91       	pop	r29
     1e0:	cf 91       	pop	r28
     1e2:	1f 91       	pop	r17
     1e4:	0f 91       	pop	r16
     1e6:	ff 90       	pop	r15
     1e8:	ef 90       	pop	r14
     1ea:	df 90       	pop	r13
     1ec:	cf 90       	pop	r12
     1ee:	bf 90       	pop	r11
     1f0:	af 90       	pop	r10
     1f2:	08 95       	ret

000001f4 <KEYPAD_Init>:

void KEYPAD_Init()
{
	//Khai bao huong cho cac chan ket noi keypad
	KEYPAD_DDR=0xF0;
     1f4:	80 ef       	ldi	r24, 0xF0	; 240
     1f6:	80 93 61 00 	sts	0x0061, r24
	KEYPAD_PORT=0x0F;
     1fa:	8f e0       	ldi	r24, 0x0F	; 15
     1fc:	80 93 62 00 	sts	0x0062, r24
     200:	08 95       	ret

00000202 <LCDBusyLoop>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     202:	8f ec       	ldi	r24, 0xCF	; 207
     204:	97 e0       	ldi	r25, 0x07	; 7
     206:	01 97       	sbiw	r24, 0x01	; 1
     208:	f1 f7       	brne	.-4      	; 0x206 <LCDBusyLoop+0x4>
     20a:	00 c0       	rjmp	.+0      	; 0x20c <LCDBusyLoop+0xa>
     20c:	00 00       	nop
}

void LCDBusyLoop()
{
	_delay_ms(8);
}
     20e:	08 95       	ret

00000210 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
     210:	28 2f       	mov	r18, r24
     212:	22 95       	swap	r18
     214:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
     216:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
     218:	66 23       	and	r22, r22
     21a:	11 f4       	brne	.+4      	; 0x220 <LCDByte+0x10>
CLEAR_RS();
     21c:	d8 98       	cbi	0x1b, 0	; 27
     21e:	01 c0       	rjmp	.+2      	; 0x222 <LCDByte+0x12>
else
SET_RS();
     220:	d8 9a       	sbi	0x1b, 0	; 27

//_delay_ms(0.500);		//tAS

SET_E();
     222:	d9 9a       	sbi	0x1b, 1	; 27

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
     224:	9b b3       	in	r25, 0x1b	; 27
     226:	22 0f       	add	r18, r18
     228:	22 0f       	add	r18, r18
     22a:	93 7c       	andi	r25, 0xC3	; 195
     22c:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
     22e:	9b bb       	out	0x1b, r25	; 27

//_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
     230:	d9 98       	cbi	0x1b, 1	; 27

//_delay_us(1);

//Send the lower nibble
SET_E();
     232:	d9 9a       	sbi	0x1b, 1	; 27

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
     234:	9b b3       	in	r25, 0x1b	; 27
     236:	88 0f       	add	r24, r24
     238:	88 0f       	add	r24, r24
     23a:	93 7c       	andi	r25, 0xC3	; 195
     23c:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     23e:	8b bb       	out	0x1b, r24	; 27

//_delay_us(1);			//tEH

//SEND

CLEAR_E();
     240:	d9 98       	cbi	0x1b, 1	; 27

//_delay_us(1);			//tEL

LCDBusyLoop();
     242:	0e 94 01 01 	call	0x202	; 0x202 <LCDBusyLoop>
}
     246:	08 95       	ret

00000248 <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
     248:	0f 93       	push	r16
     24a:	1f 93       	push	r17
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
     250:	8c 01       	movw	r16, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     252:	fc 01       	movw	r30, r24
     254:	80 81       	ld	r24, Z
     256:	88 23       	and	r24, r24
     258:	09 f1       	breq	.+66     	; 0x29c <LCDWriteString+0x54>
 {
 	//Custom Char Support
	if(*msg=='%')
     25a:	85 32       	cpi	r24, 0x25	; 37
     25c:	a9 f4       	brne	.+42     	; 0x288 <LCDWriteString+0x40>
	{
		msg++;
     25e:	e8 01       	movw	r28, r16
     260:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
     262:	f8 01       	movw	r30, r16
     264:	81 81       	ldd	r24, Z+1	; 0x01
     266:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
     268:	88 30       	cpi	r24, 0x08	; 8
     26a:	20 f4       	brcc	.+8      	; 0x274 <LCDWriteString+0x2c>
		{
			LCDData(cc);
     26c:	61 e0       	ldi	r22, 0x01	; 1
     26e:	0e 94 08 01 	call	0x210	; 0x210 <LCDByte>
     272:	0e c0       	rjmp	.+28     	; 0x290 <LCDWriteString+0x48>
		}
		else
		{
			LCDData('%');
     274:	85 e2       	ldi	r24, 0x25	; 37
     276:	61 e0       	ldi	r22, 0x01	; 1
     278:	0e 94 08 01 	call	0x210	; 0x210 <LCDByte>
			LCDData(*msg);
     27c:	f8 01       	movw	r30, r16
     27e:	81 81       	ldd	r24, Z+1	; 0x01
     280:	61 e0       	ldi	r22, 0x01	; 1
     282:	0e 94 08 01 	call	0x210	; 0x210 <LCDByte>
     286:	04 c0       	rjmp	.+8      	; 0x290 <LCDWriteString+0x48>
		}
	}
	else
	{
		LCDData(*msg);
     288:	61 e0       	ldi	r22, 0x01	; 1
     28a:	0e 94 08 01 	call	0x210	; 0x210 <LCDByte>
     28e:	e8 01       	movw	r28, r16
	}
	msg++;
     290:	8e 01       	movw	r16, r28
     292:	0f 5f       	subi	r16, 0xFF	; 255
     294:	1f 4f       	sbci	r17, 0xFF	; 255
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	88 23       	and	r24, r24
     29a:	f9 f6       	brne	.-66     	; 0x25a <LCDWriteString+0x12>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	1f 91       	pop	r17
     2a2:	0f 91       	pop	r16
     2a4:	08 95       	ret

000002a6 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     2a6:	ef 92       	push	r14
     2a8:	ff 92       	push	r15
     2aa:	0f 93       	push	r16
     2ac:	1f 93       	push	r17
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	00 d0       	rcall	.+0      	; 0x2b4 <LCDWriteInt+0xe>
     2b4:	00 d0       	rcall	.+0      	; 0x2b6 <LCDWriteInt+0x10>
     2b6:	0f 92       	push	r0
     2b8:	cd b7       	in	r28, 0x3d	; 61
     2ba:	de b7       	in	r29, 0x3e	; 62
     2bc:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     2be:	fe 01       	movw	r30, r28
     2c0:	31 96       	adiw	r30, 0x01	; 1
     2c2:	25 e0       	ldi	r18, 0x05	; 5
     2c4:	df 01       	movw	r26, r30
     2c6:	1d 92       	st	X+, r1
     2c8:	2a 95       	dec	r18
     2ca:	e9 f7       	brne	.-6      	; 0x2c6 <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
     2cc:	00 97       	sbiw	r24, 0x00	; 0
     2ce:	61 f0       	breq	.+24     	; 0x2e8 <LCDWriteInt+0x42>
     2d0:	fe 01       	movw	r30, r28
     2d2:	36 96       	adiw	r30, 0x06	; 6
	{
	str[i]=val%10;
     2d4:	2a e0       	ldi	r18, 0x0A	; 10
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	b9 01       	movw	r22, r18
     2da:	0e 94 12 14 	call	0x2824	; 0x2824 <__divmodhi4>
     2de:	82 93       	st	-Z, r24
	val=val/10;
     2e0:	86 2f       	mov	r24, r22
     2e2:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     2e4:	00 97       	sbiw	r24, 0x00	; 0
     2e6:	c1 f7       	brne	.-16     	; 0x2d8 <LCDWriteInt+0x32>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     2e8:	bf ef       	ldi	r27, 0xFF	; 255
     2ea:	eb 16       	cp	r14, r27
     2ec:	bf ef       	ldi	r27, 0xFF	; 255
     2ee:	fb 06       	cpc	r15, r27
     2f0:	69 f4       	brne	.+26     	; 0x30c <LCDWriteInt+0x66>
		while(str[j]==0) j++;
     2f2:	29 81       	ldd	r18, Y+1	; 0x01
     2f4:	22 23       	and	r18, r18
     2f6:	79 f4       	brne	.+30     	; 0x316 <LCDWriteInt+0x70>
     2f8:	fe 01       	movw	r30, r28
     2fa:	32 96       	adiw	r30, 0x02	; 2
     2fc:	00 e0       	ldi	r16, 0x00	; 0
     2fe:	10 e0       	ldi	r17, 0x00	; 0
     300:	0f 5f       	subi	r16, 0xFF	; 255
     302:	1f 4f       	sbci	r17, 0xFF	; 255
     304:	21 91       	ld	r18, Z+
     306:	22 23       	and	r18, r18
     308:	d9 f3       	breq	.-10     	; 0x300 <LCDWriteInt+0x5a>
     30a:	07 c0       	rjmp	.+14     	; 0x31a <LCDWriteInt+0x74>
	else
		j=5-field_length;
     30c:	05 e0       	ldi	r16, 0x05	; 5
     30e:	10 e0       	ldi	r17, 0x00	; 0
     310:	0e 19       	sub	r16, r14
     312:	1f 09       	sbc	r17, r15
     314:	02 c0       	rjmp	.+4      	; 0x31a <LCDWriteInt+0x74>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
     316:	00 e0       	ldi	r16, 0x00	; 0
     318:	10 e0       	ldi	r17, 0x00	; 0
	else
		j=5-field_length;

	if(val<0) LCDData('-');
     31a:	99 23       	and	r25, r25
     31c:	24 f4       	brge	.+8      	; 0x326 <LCDWriteInt+0x80>
     31e:	8d e2       	ldi	r24, 0x2D	; 45
     320:	61 e0       	ldi	r22, 0x01	; 1
     322:	0e 94 08 01 	call	0x210	; 0x210 <LCDByte>
	for(i=j;i<5;i++)
     326:	05 30       	cpi	r16, 0x05	; 5
     328:	11 05       	cpc	r17, r1
     32a:	bc f4       	brge	.+46     	; 0x35a <LCDWriteInt+0xb4>
	}
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
     32c:	e1 e0       	ldi	r30, 0x01	; 1
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	ec 0f       	add	r30, r28
     332:	fd 1f       	adc	r31, r29
     334:	0e 0f       	add	r16, r30
     336:	1f 1f       	adc	r17, r31
     338:	0f 2e       	mov	r0, r31
     33a:	f6 e0       	ldi	r31, 0x06	; 6
     33c:	ef 2e       	mov	r14, r31
     33e:	ff 24       	eor	r15, r15
     340:	f0 2d       	mov	r31, r0
     342:	ec 0e       	add	r14, r28
     344:	fd 1e       	adc	r15, r29
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     346:	d8 01       	movw	r26, r16
     348:	8d 91       	ld	r24, X+
     34a:	8d 01       	movw	r16, r26
     34c:	80 5d       	subi	r24, 0xD0	; 208
     34e:	61 e0       	ldi	r22, 0x01	; 1
     350:	0e 94 08 01 	call	0x210	; 0x210 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     354:	0e 15       	cp	r16, r14
     356:	1f 05       	cpc	r17, r15
     358:	b1 f7       	brne	.-20     	; 0x346 <LCDWriteInt+0xa0>
	{
	LCDData(48+str[i]);
	}
}
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	1f 91       	pop	r17
     36a:	0f 91       	pop	r16
     36c:	ff 90       	pop	r15
     36e:	ef 90       	pop	r14
     370:	08 95       	ret

00000372 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
     372:	84 31       	cpi	r24, 0x14	; 20
     374:	78 f4       	brcc	.+30     	; 0x394 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
     376:	62 30       	cpi	r22, 0x02	; 2
     378:	31 f0       	breq	.+12     	; 0x386 <LCDGotoXY+0x14>
     37a:	63 30       	cpi	r22, 0x03	; 3
     37c:	31 f0       	breq	.+12     	; 0x38a <LCDGotoXY+0x18>
     37e:	61 30       	cpi	r22, 0x01	; 1
     380:	29 f4       	brne	.+10     	; 0x38c <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
     382:	80 64       	ori	r24, 0x40	; 64
			break;
     384:	03 c0       	rjmp	.+6      	; 0x38c <LCDGotoXY+0x1a>
		case 2:
			x+=0x14;
     386:	8c 5e       	subi	r24, 0xEC	; 236
			break;
     388:	01 c0       	rjmp	.+2      	; 0x38c <LCDGotoXY+0x1a>
		case 3:
			x+=0x54;
     38a:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
     38c:	80 68       	ori	r24, 0x80	; 128
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	0e 94 08 01 	call	0x210	; 0x210 <LCDByte>
     394:	08 95       	ret

00000396 <LCDInit>:
{
	_delay_ms(8);
}

void LCDInit(uint8_t style)
{
     396:	0f 93       	push	r16
     398:	1f 93       	push	r17
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	c8 2f       	mov	r28, r24
     3a0:	8b e4       	ldi	r24, 0x4B	; 75
     3a2:	9d e1       	ldi	r25, 0x1D	; 29
     3a4:	01 97       	sbiw	r24, 0x01	; 1
     3a6:	f1 f7       	brne	.-4      	; 0x3a4 <LCDInit+0xe>
     3a8:	00 c0       	rjmp	.+0      	; 0x3aa <LCDInit+0x14>
     3aa:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
     3ac:	8a b3       	in	r24, 0x1a	; 26
     3ae:	8c 63       	ori	r24, 0x3C	; 60
     3b0:	8a bb       	out	0x1a, r24	; 26
	LCD_E_DDR|=(1<<LCD_E_POS);
     3b2:	d1 9a       	sbi	0x1a, 1	; 26
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     3b4:	d0 9a       	sbi	0x1a, 0	; 26

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
     3b6:	8b b3       	in	r24, 0x1b	; 27
     3b8:	83 7c       	andi	r24, 0xC3	; 195
     3ba:	8b bb       	out	0x1b, r24	; 27
	CLEAR_E();
     3bc:	d9 98       	cbi	0x1b, 1	; 27
	CLEAR_RS();
     3be:	d8 98       	cbi	0x1b, 0	; 27

	//Set 4-bit mode
	//_delay_us(0.3);	//tAS

	SET_E();
     3c0:	d9 9a       	sbi	0x1b, 1	; 27
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     3c2:	db 9a       	sbi	0x1b, 3	; 27
	//_delay_us(1);
	CLEAR_E();
     3c4:	d9 98       	cbi	0x1b, 1	; 27
	//_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     3c6:	0e 94 01 01 	call	0x202	; 0x202 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     3ca:	8c 2f       	mov	r24, r28
     3cc:	8c 60       	ori	r24, 0x0C	; 12
     3ce:	60 e0       	ldi	r22, 0x00	; 0
     3d0:	0e 94 08 01 	call	0x210	; 0x210 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     3d4:	88 e2       	ldi	r24, 0x28	; 40
     3d6:	60 e0       	ldi	r22, 0x00	; 0
     3d8:	0e 94 08 01 	call	0x210	; 0x210 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
     3dc:	80 e4       	ldi	r24, 0x40	; 64
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	0e 94 08 01 	call	0x210	; 0x210 <LCDByte>
     3e4:	c4 e1       	ldi	r28, 0x14	; 20
     3e6:	d1 e0       	ldi	r29, 0x01	; 1
void LCDBusyLoop()
{
	_delay_ms(8);
}

void LCDInit(uint8_t style)
     3e8:	04 e5       	ldi	r16, 0x54	; 84
     3ea:	11 e0       	ldi	r17, 0x01	; 1
	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
     3ec:	89 91       	ld	r24, Y+
     3ee:	61 e0       	ldi	r22, 0x01	; 1
     3f0:	0e 94 08 01 	call	0x210	; 0x210 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
     3f4:	c0 17       	cp	r28, r16
     3f6:	d1 07       	cpc	r29, r17
     3f8:	c9 f7       	brne	.-14     	; 0x3ec <LCDInit+0x56>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	0e 94 b9 01 	call	0x372	; 0x372 <LCDGotoXY>

}
     402:	df 91       	pop	r29
     404:	cf 91       	pop	r28
     406:	1f 91       	pop	r17
     408:	0f 91       	pop	r16
     40a:	08 95       	ret

0000040c <sMOIfaceKEYPAD_checkpress>:
struct SMO* l;
char bufferin[NRF24L01_PAYLOAD];
char bufferout[NRF24L01_PAYLOAD];

sc_integer sMOIfaceKEYPAD_checkpress() {
	return KEYPAD_Check();
     40c:	0e 94 90 00 	call	0x120	; 0x120 <KEYPAD_Check>
}
     410:	68 2f       	mov	r22, r24
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	08 95       	ret

0000041a <sMOIfaceKEYPAD_init>:
void sMOIfaceKEYPAD_init() {
	KEYPAD_Init();
     41a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <KEYPAD_Init>
}
     41e:	08 95       	ret

00000420 <sMOIfaceLCD_writeString>:
void sMOIfaceLCD_writeString(const sc_string chr) {
	LCDWriteString(chr);
     420:	0e 94 24 01 	call	0x248	; 0x248 <LCDWriteString>
}
     424:	08 95       	ret

00000426 <sMOIfaceLCD_writeStringXY>:
void sMOIfaceLCD_writeStringXY(const sc_string chr, const sc_integer x, const sc_integer y) {
     426:	0f 93       	push	r16
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	ec 01       	movw	r28, r24
     42e:	84 2f       	mov	r24, r20
     430:	60 2f       	mov	r22, r16
	LCDWriteStringXY(x,y,chr);
     432:	0e 94 b9 01 	call	0x372	; 0x372 <LCDGotoXY>
     436:	ce 01       	movw	r24, r28
     438:	0e 94 24 01 	call	0x248	; 0x248 <LCDWriteString>
}
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	0f 91       	pop	r16
     442:	08 95       	ret

00000444 <sMOIfaceLCD_writeNumberXY>:
void sMOIfaceLCD_writeNumberXY(const sc_integer num, const sc_integer x, const sc_integer y, const sc_integer l) {
     444:	4f 92       	push	r4
     446:	5f 92       	push	r5
     448:	6f 92       	push	r6
     44a:	7f 92       	push	r7
     44c:	af 92       	push	r10
     44e:	bf 92       	push	r11
     450:	cf 92       	push	r12
     452:	df 92       	push	r13
     454:	ef 92       	push	r14
     456:	ff 92       	push	r15
     458:	2b 01       	movw	r4, r22
     45a:	3c 01       	movw	r6, r24
     45c:	82 2f       	mov	r24, r18
     45e:	6e 2d       	mov	r22, r14
     460:	76 01       	movw	r14, r12
     462:	65 01       	movw	r12, r10
	LCDWriteIntXY(x,y,num,l);
     464:	0e 94 b9 01 	call	0x372	; 0x372 <LCDGotoXY>
     468:	c2 01       	movw	r24, r4
     46a:	b6 01       	movw	r22, r12
     46c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCDWriteInt>
}
     470:	ff 90       	pop	r15
     472:	ef 90       	pop	r14
     474:	df 90       	pop	r13
     476:	cf 90       	pop	r12
     478:	bf 90       	pop	r11
     47a:	af 90       	pop	r10
     47c:	7f 90       	pop	r7
     47e:	6f 90       	pop	r6
     480:	5f 90       	pop	r5
     482:	4f 90       	pop	r4
     484:	08 95       	ret

00000486 <sMOIfaceLCD_clear>:
void sMOIfaceLCD_clear() {
	LCDClear();
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	60 e0       	ldi	r22, 0x00	; 0
     48a:	0e 94 08 01 	call	0x210	; 0x210 <LCDByte>
     48e:	82 e0       	ldi	r24, 0x02	; 2
     490:	60 e0       	ldi	r22, 0x00	; 0
     492:	0e 94 08 01 	call	0x210	; 0x210 <LCDByte>
}
     496:	08 95       	ret

00000498 <sMOIfaceLCD_init>:
void sMOIfaceLCD_init() {
	LCDInit(0);
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	0e 94 cb 01 	call	0x396	; 0x396 <LCDInit>
}
     49e:	08 95       	ret

000004a0 <sMOIfaceRF_getData>:

sc_string sMOIfaceRF_getData() {
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	0f 92       	push	r0
     4aa:	cd b7       	in	r28, 0x3d	; 61
     4ac:	de b7       	in	r29, 0x3e	; 62
	uint8_t pipe = 0;
     4ae:	19 82       	std	Y+1, r1	; 0x01
	if (nrf24l01_readready(&pipe)) {
     4b0:	ce 01       	movw	r24, r28
     4b2:	01 96       	adiw	r24, 0x01	; 1
     4b4:	0e 94 89 05 	call	0xb12	; 0xb12 <nrf24l01_readready>
     4b8:	88 23       	and	r24, r24
     4ba:	81 f0       	breq	.+32     	; 0x4dc <sMOIfaceRF_getData+0x3c>
     4bc:	ea e4       	ldi	r30, 0x4A	; 74
     4be:	f2 e0       	ldi	r31, 0x02	; 2
}
void sMOIfaceLCD_init() {
	LCDInit(0);
}

sc_string sMOIfaceRF_getData() {
     4c0:	cf 01       	movw	r24, r30
     4c2:	40 96       	adiw	r24, 0x10	; 16
	uint8_t pipe = 0;
	if (nrf24l01_readready(&pipe)) {
		//clear buffer
		for(uint8_t i=0; i<sizeof(bufferin); i++) bufferin[i] = 0;
     4c4:	11 92       	st	Z+, r1
     4c6:	e8 17       	cp	r30, r24
     4c8:	f9 07       	cpc	r31, r25
     4ca:	e1 f7       	brne	.-8      	; 0x4c4 <sMOIfaceRF_getData+0x24>
		
		//read buffer
		nrf24l01_read(pipe,bufferin);
     4cc:	0a e4       	ldi	r16, 0x4A	; 74
     4ce:	12 e0       	ldi	r17, 0x02	; 2
     4d0:	89 81       	ldd	r24, Y+1	; 0x01
     4d2:	b8 01       	movw	r22, r16
     4d4:	0e 94 9b 05 	call	0xb36	; 0xb36 <nrf24l01_read>
		return bufferin;
     4d8:	c8 01       	movw	r24, r16
     4da:	02 c0       	rjmp	.+4      	; 0x4e0 <sMOIfaceRF_getData+0x40>
	} else {
		return "";
     4dc:	84 e5       	ldi	r24, 0x54	; 84
     4de:	91 e0       	ldi	r25, 0x01	; 1
	}
}
     4e0:	0f 90       	pop	r0
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	0f 91       	pop	r16
     4ea:	08 95       	ret

000004ec <sMOIfaceRF_sendMsg>:

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
	uint8_t writeret = nrf24l01_write(msg);
     4ec:	0e 94 c1 05 	call	0xb82	; 0xb82 <nrf24l01_write>
	} else {
		return "";
	}
}

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
     4f0:	91 e0       	ldi	r25, 0x01	; 1
     4f2:	81 30       	cpi	r24, 0x01	; 1
     4f4:	09 f0       	breq	.+2      	; 0x4f8 <sMOIfaceRF_sendMsg+0xc>
     4f6:	90 e0       	ldi	r25, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     4f8:	89 2f       	mov	r24, r25
     4fa:	08 95       	ret

000004fc <sMOIfaceRF_sendData>:

sc_boolean sMOIfaceRF_sendData(const sc_integer cmd, const sc_integer id, const sc_integer dish_id, const sc_integer amount) {
     4fc:	af 92       	push	r10
     4fe:	ef 92       	push	r14
     500:	82 2f       	mov	r24, r18
     502:	ec e5       	ldi	r30, 0x5C	; 92
     504:	f2 e0       	ldi	r31, 0x02	; 2
     506:	af 01       	movw	r20, r30
     508:	40 5f       	subi	r20, 0xF0	; 240
     50a:	5f 4f       	sbci	r21, 0xFF	; 255
	
	unsigned char num;
	unsigned char mod;
	//clear buffer
	for(uint8_t i=0; i<sizeof(bufferout); i++) bufferout[i] = 0;
     50c:	11 92       	st	Z+, r1
     50e:	e4 17       	cp	r30, r20
     510:	f5 07       	cpc	r31, r21
     512:	e1 f7       	brne	.-8      	; 0x50c <sMOIfaceRF_sendData+0x10>
	
	//Lenh cho data: 1-goi mon, 2-huy mon, 3-thanh toan, 4-goi boi ban
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
     514:	60 5d       	subi	r22, 0xD0	; 208
     516:	60 93 5c 02 	sts	0x025C, r22
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     51a:	3a e0       	ldi	r19, 0x0A	; 10
     51c:	63 2f       	mov	r22, r19
     51e:	0e 94 06 14 	call	0x280c	; 0x280c <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     522:	90 5d       	subi	r25, 0xD0	; 208
     524:	90 93 5e 02 	sts	0x025E, r25
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     528:	0e 94 06 14 	call	0x280c	; 0x280c <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     52c:	90 5d       	subi	r25, 0xD0	; 208
     52e:	90 93 5d 02 	sts	0x025D, r25
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
		num/=10;
     532:	8e 2d       	mov	r24, r14
     534:	0e 94 06 14 	call	0x280c	; 0x280c <__udivmodqi4>
		bufferout[3+i]=mod+'0';
     538:	90 5d       	subi	r25, 0xD0	; 208
     53a:	90 93 61 02 	sts	0x0261, r25
	}
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
     53e:	0e 94 06 14 	call	0x280c	; 0x280c <__udivmodqi4>
		num/=10;
		bufferout[3+i]=mod+'0';
     542:	90 5d       	subi	r25, 0xD0	; 208
     544:	90 93 60 02 	sts	0x0260, r25
	}
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
     548:	0e 94 06 14 	call	0x280c	; 0x280c <__udivmodqi4>
		num/=10;
		bufferout[3+i]=mod+'0';
     54c:	90 5d       	subi	r25, 0xD0	; 208
     54e:	90 93 5f 02 	sts	0x025F, r25
	}
	
	//Chuyen doi so luong mon an
	num=amount;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     552:	8a 2d       	mov	r24, r10
     554:	0e 94 06 14 	call	0x280c	; 0x280c <__udivmodqi4>
		num/=10;
		bufferout[6+i]=mod+'0';
     558:	90 5d       	subi	r25, 0xD0	; 208
     55a:	90 93 63 02 	sts	0x0263, r25
	}
	
	//Chuyen doi so luong mon an
	num=amount;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     55e:	0e 94 06 14 	call	0x280c	; 0x280c <__udivmodqi4>
		num/=10;
		bufferout[6+i]=mod+'0';
     562:	90 5d       	subi	r25, 0xD0	; 208
     564:	90 93 62 02 	sts	0x0262, r25
	}
	
	uint8_t writeret = nrf24l01_write(bufferout);
     568:	8c e5       	ldi	r24, 0x5C	; 92
     56a:	92 e0       	ldi	r25, 0x02	; 2
     56c:	0e 94 c1 05 	call	0xb82	; 0xb82 <nrf24l01_write>
	} else {
		return false;
	}
}

sc_boolean sMOIfaceRF_sendData(const sc_integer cmd, const sc_integer id, const sc_integer dish_id, const sc_integer amount) {
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	81 30       	cpi	r24, 0x01	; 1
     574:	09 f0       	breq	.+2      	; 0x578 <sMOIfaceRF_sendData+0x7c>
     576:	90 e0       	ldi	r25, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     578:	89 2f       	mov	r24, r25
     57a:	ef 90       	pop	r14
     57c:	af 90       	pop	r10
     57e:	08 95       	ret

00000580 <sMO_setTimer>:

void sMO_setTimer(const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
	TimerSet(evid,time_ms);
     580:	0e 94 12 13 	call	0x2624	; 0x2624 <TimerSet>
}
     584:	08 95       	ret

00000586 <sMO_unsetTimer>:
void sMO_unsetTimer(const sc_eventid evid) {
	TimerUnSet(evid);
     586:	0e 94 5e 13 	call	0x26bc	; 0x26bc <TimerUnSet>
}
     58a:	08 95       	ret

0000058c <sMOIfaceRF_init>:

void sMOIfaceRF_init() {
	nrf24l01_init();
     58c:	0e 94 17 06 	call	0xc2e	; 0xc2e <nrf24l01_init>
}
     590:	08 95       	ret

00000592 <main>:

int main(void)
{
	uint8_t i;
	DDRC=0x0F;
     592:	8f e0       	ldi	r24, 0x0F	; 15
     594:	84 bb       	out	0x14, r24	; 20
	PORTC=0x0F;
     596:	85 bb       	out	0x15, r24	; 21
	l=malloc(sizeof(SMO*)) ;
     598:	82 e0       	ldi	r24, 0x02	; 2
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 39 14 	call	0x2872	; 0x2872 <malloc>
     5a0:	80 93 5a 02 	sts	0x025A, r24
     5a4:	90 93 5b 02 	sts	0x025B, r25
	TimerInit();
     5a8:	0e 94 06 13 	call	0x260c	; 0x260c <TimerInit>
	sMO_init(l);
     5ac:	80 91 5a 02 	lds	r24, 0x025A
     5b0:	90 91 5b 02 	lds	r25, 0x025B
     5b4:	0e 94 d6 06 	call	0xdac	; 0xdac <sMO_init>
	sMO_enter(l);
     5b8:	80 91 5a 02 	lds	r24, 0x025A
     5bc:	90 91 5b 02 	lds	r25, 0x025B
     5c0:	0e 94 de 06 	call	0xdbc	; 0xdbc <sMO_enter>
	
	while(1)
	{
		sMO_runCycle(l);
     5c4:	80 91 5a 02 	lds	r24, 0x025A
     5c8:	90 91 5b 02 	lds	r25, 0x025B
     5cc:	0e 94 be 07 	call	0xf7c	; 0xf7c <sMO_runCycle>
     5d0:	f9 cf       	rjmp	.-14     	; 0x5c4 <main+0x32>

000005d2 <__vector_16>:
	}
}

ISR (TIMER0_OVF_vect) {
     5d2:	1f 92       	push	r1
     5d4:	0f 92       	push	r0
     5d6:	0f b6       	in	r0, 0x3f	; 63
     5d8:	0f 92       	push	r0
     5da:	0b b6       	in	r0, 0x3b	; 59
     5dc:	0f 92       	push	r0
     5de:	11 24       	eor	r1, r1
     5e0:	2f 93       	push	r18
     5e2:	3f 93       	push	r19
     5e4:	4f 93       	push	r20
     5e6:	5f 93       	push	r21
     5e8:	6f 93       	push	r22
     5ea:	7f 93       	push	r23
     5ec:	8f 93       	push	r24
     5ee:	9f 93       	push	r25
     5f0:	af 93       	push	r26
     5f2:	bf 93       	push	r27
     5f4:	ef 93       	push	r30
     5f6:	ff 93       	push	r31
	TCNT0=131;
     5f8:	83 e8       	ldi	r24, 0x83	; 131
     5fa:	82 bf       	out	0x32, r24	; 50
	TimerCheck(l);
     5fc:	80 91 5a 02 	lds	r24, 0x025A
     600:	90 91 5b 02 	lds	r25, 0x025B
     604:	0e 94 93 13 	call	0x2726	; 0x2726 <TimerCheck>
     608:	ff 91       	pop	r31
     60a:	ef 91       	pop	r30
     60c:	bf 91       	pop	r27
     60e:	af 91       	pop	r26
     610:	9f 91       	pop	r25
     612:	8f 91       	pop	r24
     614:	7f 91       	pop	r23
     616:	6f 91       	pop	r22
     618:	5f 91       	pop	r21
     61a:	4f 91       	pop	r20
     61c:	3f 91       	pop	r19
     61e:	2f 91       	pop	r18
     620:	0f 90       	pop	r0
     622:	0b be       	out	0x3b, r0	; 59
     624:	0f 90       	pop	r0
     626:	0f be       	out	0x3f, r0	; 63
     628:	0f 90       	pop	r0
     62a:	1f 90       	pop	r1
     62c:	18 95       	reti

0000062e <nrf24l01_readregister>:

/*
 * read one register
 */
uint8_t nrf24l01_readregister(uint8_t reg) {
	nrf24l01_CSNlo; //low CSN
     62e:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     630:	8f 71       	andi	r24, 0x1F	; 31
     632:	0e 94 01 13 	call	0x2602	; 0x2602 <spi_writereadbyte>
    uint8_t result = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
     636:	8f ef       	ldi	r24, 0xFF	; 255
     638:	0e 94 01 13 	call	0x2602	; 0x2602 <spi_writereadbyte>
    nrf24l01_CSNhi; //high CSN
     63c:	ae 9a       	sbi	0x15, 6	; 21
    return result;
}
     63e:	08 95       	ret

00000640 <nrf24l01_readregisters>:

/*
 * read many registers
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
     640:	ff 92       	push	r15
     642:	0f 93       	push	r16
     644:	1f 93       	push	r17
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	06 2f       	mov	r16, r22
     64c:	f7 2e       	mov	r15, r23
     64e:	14 2f       	mov	r17, r20
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
     650:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     652:	8f 71       	andi	r24, 0x1F	; 31
     654:	0e 94 01 13 	call	0x2602	; 0x2602 <spi_writereadbyte>
	for(i=0; i<len; i++)
     658:	11 23       	and	r17, r17
     65a:	51 f0       	breq	.+20     	; 0x670 <nrf24l01_readregisters+0x30>
     65c:	c0 2f       	mov	r28, r16
     65e:	df 2d       	mov	r29, r15
     660:	00 e0       	ldi	r16, 0x00	; 0
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
     662:	8f ef       	ldi	r24, 0xFF	; 255
     664:	0e 94 01 13 	call	0x2602	; 0x2602 <spi_writereadbyte>
     668:	89 93       	st	Y+, r24
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     66a:	0f 5f       	subi	r16, 0xFF	; 255
     66c:	01 17       	cp	r16, r17
     66e:	c9 f7       	brne	.-14     	; 0x662 <nrf24l01_readregisters+0x22>
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
	nrf24l01_CSNhi; //high CSN
     670:	ae 9a       	sbi	0x15, 6	; 21
}
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	ff 90       	pop	r15
     67c:	08 95       	ret

0000067e <nrf24l01_writeregister>:

/*
 * write one register
 */
void nrf24l01_writeregister(uint8_t reg, uint8_t value) {
     67e:	cf 93       	push	r28
     680:	c6 2f       	mov	r28, r22
	nrf24l01_CSNlo; //low CSN
     682:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     684:	8f 71       	andi	r24, 0x1F	; 31
     686:	80 62       	ori	r24, 0x20	; 32
     688:	0e 94 01 13 	call	0x2602	; 0x2602 <spi_writereadbyte>
	spi_writereadbyte(value); //write register
     68c:	8c 2f       	mov	r24, r28
     68e:	0e 94 01 13 	call	0x2602	; 0x2602 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     692:	ae 9a       	sbi	0x15, 6	; 21
}
     694:	cf 91       	pop	r28
     696:	08 95       	ret

00000698 <nrf24l01_writeregisters>:

/*
 * write many registers
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
     698:	ff 92       	push	r15
     69a:	0f 93       	push	r16
     69c:	1f 93       	push	r17
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	06 2f       	mov	r16, r22
     6a4:	f7 2e       	mov	r15, r23
     6a6:	14 2f       	mov	r17, r20
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
     6a8:	ae 98       	cbi	0x15, 6	; 21
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     6aa:	8f 71       	andi	r24, 0x1F	; 31
     6ac:	80 62       	ori	r24, 0x20	; 32
     6ae:	0e 94 01 13 	call	0x2602	; 0x2602 <spi_writereadbyte>
	for(i=0; i<len; i++)
     6b2:	11 23       	and	r17, r17
     6b4:	49 f0       	breq	.+18     	; 0x6c8 <nrf24l01_writeregisters+0x30>
     6b6:	c0 2f       	mov	r28, r16
     6b8:	df 2d       	mov	r29, r15
     6ba:	00 e0       	ldi	r16, 0x00	; 0
		 spi_writereadbyte(value[i]); //write register
     6bc:	89 91       	ld	r24, Y+
     6be:	0e 94 01 13 	call	0x2602	; 0x2602 <spi_writereadbyte>
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     6c2:	0f 5f       	subi	r16, 0xFF	; 255
     6c4:	01 17       	cp	r16, r17
     6c6:	d1 f7       	brne	.-12     	; 0x6bc <nrf24l01_writeregisters+0x24>
		 spi_writereadbyte(value[i]); //write register
	nrf24l01_CSNhi; //high CSN
     6c8:	ae 9a       	sbi	0x15, 6	; 21
}
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	ff 90       	pop	r15
     6d4:	08 95       	ret

000006d6 <nrf24l01_revaddress>:

/*
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	04 96       	adiw	r24, 0x04	; 4
     6dc:	db 01       	movw	r26, r22
     6de:	a2 0f       	add	r26, r18
     6e0:	b3 1f       	adc	r27, r19
     6e2:	fc 01       	movw	r30, r24
     6e4:	e2 1b       	sub	r30, r18
     6e6:	f3 0b       	sbc	r31, r19
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
     6e8:	40 81       	ld	r20, Z
     6ea:	4c 93       	st	X, r20
     6ec:	2f 5f       	subi	r18, 0xFF	; 255
     6ee:	3f 4f       	sbci	r19, 0xFF	; 255
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
     6f0:	25 30       	cpi	r18, 0x05	; 5
     6f2:	31 05       	cpc	r19, r1
     6f4:	99 f7       	brne	.-26     	; 0x6dc <nrf24l01_revaddress+0x6>
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
}
     6f6:	08 95       	ret

000006f8 <nrf24l01_setrxaddr>:

/*
 * set rx address
 */
void nrf24l01_setrxaddr(uint8_t pipe, uint8_t *addr) {
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	00 d0       	rcall	.+0      	; 0x6fe <nrf24l01_setrxaddr+0x6>
     6fe:	00 d0       	rcall	.+0      	; 0x700 <nrf24l01_setrxaddr+0x8>
     700:	0f 92       	push	r0
     702:	cd b7       	in	r28, 0x3d	; 61
     704:	de b7       	in	r29, 0x3e	; 62
	if(pipe == 0) {
     706:	88 23       	and	r24, r24
     708:	b1 f4       	brne	.+44     	; 0x736 <nrf24l01_setrxaddr+0x3e>
		memcpy(&nrf24l01_addr0, addr, NRF24L01_ADDRSIZE); //cache address
     70a:	af ec       	ldi	r26, 0xCF	; 207
     70c:	b1 e0       	ldi	r27, 0x01	; 1
     70e:	fb 01       	movw	r30, r22
     710:	85 e0       	ldi	r24, 0x05	; 5
     712:	01 90       	ld	r0, Z+
     714:	0d 92       	st	X+, r0
     716:	81 50       	subi	r24, 0x01	; 1
     718:	e1 f7       	brne	.-8      	; 0x712 <nrf24l01_setrxaddr+0x1a>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     71a:	cb 01       	movw	r24, r22
     71c:	be 01       	movw	r22, r28
     71e:	6f 5f       	subi	r22, 0xFF	; 255
     720:	7f 4f       	sbci	r23, 0xFF	; 255
     722:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE);
     726:	8a e0       	ldi	r24, 0x0A	; 10
     728:	be 01       	movw	r22, r28
     72a:	6f 5f       	subi	r22, 0xFF	; 255
     72c:	7f 4f       	sbci	r23, 0xFF	; 255
     72e:	45 e0       	ldi	r20, 0x05	; 5
     730:	0e 94 4c 03 	call	0x698	; 0x698 <nrf24l01_writeregisters>
     734:	56 c0       	rjmp	.+172    	; 0x7e2 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 1) {
     736:	81 30       	cpi	r24, 0x01	; 1
     738:	b1 f4       	brne	.+44     	; 0x766 <nrf24l01_setrxaddr+0x6e>
		memcpy(&nrf24l01_addr1, addr, NRF24L01_ADDRSIZE); //cache address
     73a:	a4 ed       	ldi	r26, 0xD4	; 212
     73c:	b1 e0       	ldi	r27, 0x01	; 1
     73e:	fb 01       	movw	r30, r22
     740:	85 e0       	ldi	r24, 0x05	; 5
     742:	01 90       	ld	r0, Z+
     744:	0d 92       	st	X+, r0
     746:	81 50       	subi	r24, 0x01	; 1
     748:	e1 f7       	brne	.-8      	; 0x742 <nrf24l01_setrxaddr+0x4a>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     74a:	cb 01       	movw	r24, r22
     74c:	be 01       	movw	r22, r28
     74e:	6f 5f       	subi	r22, 0xFF	; 255
     750:	7f 4f       	sbci	r23, 0xFF	; 255
     752:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P1, addrrev, NRF24L01_ADDRSIZE);
     756:	8b e0       	ldi	r24, 0x0B	; 11
     758:	be 01       	movw	r22, r28
     75a:	6f 5f       	subi	r22, 0xFF	; 255
     75c:	7f 4f       	sbci	r23, 0xFF	; 255
     75e:	45 e0       	ldi	r20, 0x05	; 5
     760:	0e 94 4c 03 	call	0x698	; 0x698 <nrf24l01_writeregisters>
     764:	3e c0       	rjmp	.+124    	; 0x7e2 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 2) {
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	71 f4       	brne	.+28     	; 0x786 <nrf24l01_setrxaddr+0x8e>
		memcpy(&nrf24l01_addr2, addr, NRF24L01_ADDRSIZE); //cache address
     76a:	a9 ed       	ldi	r26, 0xD9	; 217
     76c:	b1 e0       	ldi	r27, 0x01	; 1
     76e:	fb 01       	movw	r30, r22
     770:	85 e0       	ldi	r24, 0x05	; 5
     772:	01 90       	ld	r0, Z+
     774:	0d 92       	st	X+, r0
     776:	81 50       	subi	r24, 0x01	; 1
     778:	e1 f7       	brne	.-8      	; 0x772 <nrf24l01_setrxaddr+0x7a>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P2, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     77a:	8c e0       	ldi	r24, 0x0C	; 12
     77c:	fb 01       	movw	r30, r22
     77e:	64 81       	ldd	r22, Z+4	; 0x04
     780:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
     784:	2e c0       	rjmp	.+92     	; 0x7e2 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 3) {
     786:	83 30       	cpi	r24, 0x03	; 3
     788:	71 f4       	brne	.+28     	; 0x7a6 <nrf24l01_setrxaddr+0xae>
		memcpy(&nrf24l01_addr3, addr, NRF24L01_ADDRSIZE); //cache address
     78a:	ae ed       	ldi	r26, 0xDE	; 222
     78c:	b1 e0       	ldi	r27, 0x01	; 1
     78e:	fb 01       	movw	r30, r22
     790:	85 e0       	ldi	r24, 0x05	; 5
     792:	01 90       	ld	r0, Z+
     794:	0d 92       	st	X+, r0
     796:	81 50       	subi	r24, 0x01	; 1
     798:	e1 f7       	brne	.-8      	; 0x792 <nrf24l01_setrxaddr+0x9a>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P3, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     79a:	8d e0       	ldi	r24, 0x0D	; 13
     79c:	fb 01       	movw	r30, r22
     79e:	64 81       	ldd	r22, Z+4	; 0x04
     7a0:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
     7a4:	1e c0       	rjmp	.+60     	; 0x7e2 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 4) {
     7a6:	84 30       	cpi	r24, 0x04	; 4
     7a8:	71 f4       	brne	.+28     	; 0x7c6 <nrf24l01_setrxaddr+0xce>
		memcpy(&nrf24l01_addr4, addr, NRF24L01_ADDRSIZE); //cache address
     7aa:	a3 ee       	ldi	r26, 0xE3	; 227
     7ac:	b1 e0       	ldi	r27, 0x01	; 1
     7ae:	fb 01       	movw	r30, r22
     7b0:	85 e0       	ldi	r24, 0x05	; 5
     7b2:	01 90       	ld	r0, Z+
     7b4:	0d 92       	st	X+, r0
     7b6:	81 50       	subi	r24, 0x01	; 1
     7b8:	e1 f7       	brne	.-8      	; 0x7b2 <nrf24l01_setrxaddr+0xba>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P4, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     7ba:	8e e0       	ldi	r24, 0x0E	; 14
     7bc:	fb 01       	movw	r30, r22
     7be:	64 81       	ldd	r22, Z+4	; 0x04
     7c0:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
     7c4:	0e c0       	rjmp	.+28     	; 0x7e2 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 5) {
     7c6:	85 30       	cpi	r24, 0x05	; 5
     7c8:	61 f4       	brne	.+24     	; 0x7e2 <nrf24l01_setrxaddr+0xea>
		memcpy(&nrf24l01_addr5, addr, NRF24L01_ADDRSIZE); //cache address
     7ca:	a8 ee       	ldi	r26, 0xE8	; 232
     7cc:	b1 e0       	ldi	r27, 0x01	; 1
     7ce:	fb 01       	movw	r30, r22
     7d0:	01 90       	ld	r0, Z+
     7d2:	0d 92       	st	X+, r0
     7d4:	81 50       	subi	r24, 0x01	; 1
     7d6:	e1 f7       	brne	.-8      	; 0x7d0 <nrf24l01_setrxaddr+0xd8>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P5, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     7d8:	8f e0       	ldi	r24, 0x0F	; 15
     7da:	fb 01       	movw	r30, r22
     7dc:	64 81       	ldd	r22, Z+4	; 0x04
     7de:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
	}
}
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	0f 90       	pop	r0
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	08 95       	ret

000007f2 <nrf24l01_settxaddr>:

/*
 * set tx address
 */
void nrf24l01_settxaddr(uint8_t *addr) {
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	00 d0       	rcall	.+0      	; 0x7f8 <nrf24l01_settxaddr+0x6>
     7f8:	00 d0       	rcall	.+0      	; 0x7fa <nrf24l01_settxaddr+0x8>
     7fa:	0f 92       	push	r0
     7fc:	cd b7       	in	r28, 0x3d	; 61
     7fe:	de b7       	in	r29, 0x3e	; 62
	memcpy(&nrf24l01_addrtx, addr, NRF24L01_ADDRSIZE); //cache address
     800:	ad ee       	ldi	r26, 0xED	; 237
     802:	b1 e0       	ldi	r27, 0x01	; 1
     804:	e8 2f       	mov	r30, r24
     806:	f9 2f       	mov	r31, r25
     808:	25 e0       	ldi	r18, 0x05	; 5
     80a:	01 90       	ld	r0, Z+
     80c:	0d 92       	st	X+, r0
     80e:	21 50       	subi	r18, 0x01	; 1
     810:	e1 f7       	brne	.-8      	; 0x80a <nrf24l01_settxaddr+0x18>
	uint8_t addrrev[NRF24L01_ADDRSIZE];
	nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     812:	be 01       	movw	r22, r28
     814:	6f 5f       	subi	r22, 0xFF	; 255
     816:	7f 4f       	sbci	r23, 0xFF	; 255
     818:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <nrf24l01_revaddress>
	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE); //set rx address for ack on pipe 0
     81c:	8a e0       	ldi	r24, 0x0A	; 10
     81e:	be 01       	movw	r22, r28
     820:	6f 5f       	subi	r22, 0xFF	; 255
     822:	7f 4f       	sbci	r23, 0xFF	; 255
     824:	45 e0       	ldi	r20, 0x05	; 5
     826:	0e 94 4c 03 	call	0x698	; 0x698 <nrf24l01_writeregisters>
	nrf24l01_writeregisters(NRF24L01_REG_TX_ADDR, addrrev, NRF24L01_ADDRSIZE); //set tx address
     82a:	80 e1       	ldi	r24, 0x10	; 16
     82c:	be 01       	movw	r22, r28
     82e:	6f 5f       	subi	r22, 0xFF	; 255
     830:	7f 4f       	sbci	r23, 0xFF	; 255
     832:	45 e0       	ldi	r20, 0x05	; 5
     834:	0e 94 4c 03 	call	0x698	; 0x698 <nrf24l01_writeregisters>
}
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	0f 90       	pop	r0
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	08 95       	ret

00000848 <nrf24l01_flushRXfifo>:

/*
 * flush RX fifo
 */
void nrf24l01_flushRXfifo() {
	nrf24l01_CSNlo; //low CSN
     848:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_FLUSH_RX);
     84a:	82 ee       	ldi	r24, 0xE2	; 226
     84c:	0e 94 01 13 	call	0x2602	; 0x2602 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     850:	ae 9a       	sbi	0x15, 6	; 21
}
     852:	08 95       	ret

00000854 <nrf24l01_flushTXfifo>:

/*
 * flush TX fifo
 */
void nrf24l01_flushTXfifo() {
	nrf24l01_CSNlo; //low CSN
     854:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_FLUSH_TX);
     856:	81 ee       	ldi	r24, 0xE1	; 225
     858:	0e 94 01 13 	call	0x2602	; 0x2602 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     85c:	ae 9a       	sbi	0x15, 6	; 21
}
     85e:	08 95       	ret

00000860 <nrf24l01_setRX>:

/*
 * set chip as RX
 */
void nrf24l01_setRX() {
	nrf24l01_setrxaddr(0, nrf24l01_addr0); //restore pipe 0 address
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	6f ec       	ldi	r22, 0xCF	; 207
     864:	71 e0       	ldi	r23, 0x01	; 1
     866:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nrf24l01_setrxaddr>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PRIM_RX)); //prx mode
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	0e 94 17 03 	call	0x62e	; 0x62e <nrf24l01_readregister>
     870:	68 2f       	mov	r22, r24
     872:	61 60       	ori	r22, 0x01	; 1
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	0e 94 17 03 	call	0x62e	; 0x62e <nrf24l01_readregister>
     880:	68 2f       	mov	r22, r24
     882:	62 60       	ori	r22, 0x02	; 2
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     88a:	87 e0       	ldi	r24, 0x07	; 7
     88c:	60 e7       	ldi	r22, 0x70	; 112
     88e:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
	nrf24l01_flushRXfifo(); //flush rx fifo
     892:	0e 94 24 04 	call	0x848	; 0x848 <nrf24l01_flushRXfifo>
	nrf24l01_flushTXfifo(); //flush tx fifo
     896:	0e 94 2a 04 	call	0x854	; 0x854 <nrf24l01_flushTXfifo>
	nrf24l01_CEhi; //start listening
     89a:	af 9a       	sbi	0x15, 7	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     89c:	82 e3       	ldi	r24, 0x32	; 50
     89e:	8a 95       	dec	r24
     8a0:	f1 f7       	brne	.-4      	; 0x89e <nrf24l01_setRX+0x3e>
	_delay_us(150); //wait for the radio to power up
}
     8a2:	08 95       	ret

000008a4 <nrf24l01_setTX>:

/*
 * set chip as TX
 */
void nrf24l01_setTX() {
	nrf24l01_CElo; //stop listening
     8a4:	af 98       	cbi	0x15, 7	; 21
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PRIM_RX)); //ptx mode
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	0e 94 17 03 	call	0x62e	; 0x62e <nrf24l01_readregister>
     8ac:	68 2f       	mov	r22, r24
     8ae:	6e 7f       	andi	r22, 0xFE	; 254
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	0e 94 17 03 	call	0x62e	; 0x62e <nrf24l01_readregister>
     8bc:	68 2f       	mov	r22, r24
     8be:	62 60       	ori	r22, 0x02	; 2
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     8c6:	87 e0       	ldi	r24, 0x07	; 7
     8c8:	60 e7       	ldi	r22, 0x70	; 112
     8ca:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
	nrf24l01_flushTXfifo(); //flush tx fifo
     8ce:	0e 94 2a 04 	call	0x854	; 0x854 <nrf24l01_flushTXfifo>
     8d2:	82 e3       	ldi	r24, 0x32	; 50
     8d4:	8a 95       	dec	r24
     8d6:	f1 f7       	brne	.-4      	; 0x8d4 <nrf24l01_setTX+0x30>
	_delay_us(150); //wait for the radio to power up
}
     8d8:	08 95       	ret

000008da <nrf24l01_getstatus>:
/*
 * get status register
 */
uint8_t nrf24l01_getstatus() {
	uint8_t status = 0;
	nrf24l01_CSNlo; //low CSN
     8da:	ae 98       	cbi	0x15, 6	; 21
	status = spi_writereadbyte(NRF24L01_CMD_NOP); //get status, send NOP request
     8dc:	8f ef       	ldi	r24, 0xFF	; 255
     8de:	0e 94 01 13 	call	0x2602	; 0x2602 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     8e2:	ae 9a       	sbi	0x15, 6	; 21
	return status;
}
     8e4:	08 95       	ret

000008e6 <nrf24l01_printinfo>:

#if NRF24L01_PRINTENABLE == 1
/*
 * print info
 */
void nrf24l01_printinfo(void(*prints)(const char *), void(*printc)(unsigned char data)) {
     8e6:	ef 92       	push	r14
     8e8:	ff 92       	push	r15
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	cd b7       	in	r28, 0x3d	; 61
     8f4:	de b7       	in	r29, 0x3e	; 62
     8f6:	c4 56       	subi	r28, 0x64	; 100
     8f8:	d0 40       	sbci	r29, 0x00	; 0
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	f8 94       	cli
     8fe:	de bf       	out	0x3e, r29	; 62
     900:	0f be       	out	0x3f, r0	; 63
     902:	cd bf       	out	0x3d, r28	; 61
     904:	7c 01       	movw	r14, r24
	char buff[100];
	prints("info\r\n");
     906:	85 e5       	ldi	r24, 0x55	; 85
     908:	91 e0       	ldi	r25, 0x01	; 1
     90a:	f7 01       	movw	r30, r14
     90c:	09 95       	icall
	sprintf(buff,"STATUS: %02X\r\n", nrf24l01_getstatus()); prints(buff);
     90e:	0e 94 6d 04 	call	0x8da	; 0x8da <nrf24l01_getstatus>
     912:	00 d0       	rcall	.+0      	; 0x914 <nrf24l01_printinfo+0x2e>
     914:	00 d0       	rcall	.+0      	; 0x916 <nrf24l01_printinfo+0x30>
     916:	00 d0       	rcall	.+0      	; 0x918 <nrf24l01_printinfo+0x32>
     918:	ed b7       	in	r30, 0x3d	; 61
     91a:	fe b7       	in	r31, 0x3e	; 62
     91c:	31 96       	adiw	r30, 0x01	; 1
     91e:	8e 01       	movw	r16, r28
     920:	0f 5f       	subi	r16, 0xFF	; 255
     922:	1f 4f       	sbci	r17, 0xFF	; 255
     924:	ad b7       	in	r26, 0x3d	; 61
     926:	be b7       	in	r27, 0x3e	; 62
     928:	12 96       	adiw	r26, 0x02	; 2
     92a:	1c 93       	st	X, r17
     92c:	0e 93       	st	-X, r16
     92e:	11 97       	sbiw	r26, 0x01	; 1
     930:	2c e5       	ldi	r18, 0x5C	; 92
     932:	31 e0       	ldi	r19, 0x01	; 1
     934:	33 83       	std	Z+3, r19	; 0x03
     936:	22 83       	std	Z+2, r18	; 0x02
     938:	84 83       	std	Z+4, r24	; 0x04
     93a:	15 82       	std	Z+5, r1	; 0x05
     93c:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <sprintf>
     940:	8d b7       	in	r24, 0x3d	; 61
     942:	9e b7       	in	r25, 0x3e	; 62
     944:	06 96       	adiw	r24, 0x06	; 6
     946:	0f b6       	in	r0, 0x3f	; 63
     948:	f8 94       	cli
     94a:	9e bf       	out	0x3e, r25	; 62
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	8d bf       	out	0x3d, r24	; 61
     950:	c8 01       	movw	r24, r16
     952:	f7 01       	movw	r30, r14
     954:	09 95       	icall
	sprintf(buff,"CONFIG: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_CONFIG)); prints(buff);
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	0e 94 17 03 	call	0x62e	; 0x62e <nrf24l01_readregister>
     95c:	00 d0       	rcall	.+0      	; 0x95e <nrf24l01_printinfo+0x78>
     95e:	00 d0       	rcall	.+0      	; 0x960 <nrf24l01_printinfo+0x7a>
     960:	00 d0       	rcall	.+0      	; 0x962 <nrf24l01_printinfo+0x7c>
     962:	ed b7       	in	r30, 0x3d	; 61
     964:	fe b7       	in	r31, 0x3e	; 62
     966:	31 96       	adiw	r30, 0x01	; 1
     968:	ad b7       	in	r26, 0x3d	; 61
     96a:	be b7       	in	r27, 0x3e	; 62
     96c:	12 96       	adiw	r26, 0x02	; 2
     96e:	1c 93       	st	X, r17
     970:	0e 93       	st	-X, r16
     972:	11 97       	sbiw	r26, 0x01	; 1
     974:	2b e6       	ldi	r18, 0x6B	; 107
     976:	31 e0       	ldi	r19, 0x01	; 1
     978:	33 83       	std	Z+3, r19	; 0x03
     97a:	22 83       	std	Z+2, r18	; 0x02
     97c:	84 83       	std	Z+4, r24	; 0x04
     97e:	15 82       	std	Z+5, r1	; 0x05
     980:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <sprintf>
     984:	8d b7       	in	r24, 0x3d	; 61
     986:	9e b7       	in	r25, 0x3e	; 62
     988:	06 96       	adiw	r24, 0x06	; 6
     98a:	0f b6       	in	r0, 0x3f	; 63
     98c:	f8 94       	cli
     98e:	9e bf       	out	0x3e, r25	; 62
     990:	0f be       	out	0x3f, r0	; 63
     992:	8d bf       	out	0x3d, r24	; 61
     994:	c8 01       	movw	r24, r16
     996:	f7 01       	movw	r30, r14
     998:	09 95       	icall
	sprintf(buff,"RF_CH: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_CH)); prints(buff);
     99a:	85 e0       	ldi	r24, 0x05	; 5
     99c:	0e 94 17 03 	call	0x62e	; 0x62e <nrf24l01_readregister>
     9a0:	00 d0       	rcall	.+0      	; 0x9a2 <nrf24l01_printinfo+0xbc>
     9a2:	00 d0       	rcall	.+0      	; 0x9a4 <nrf24l01_printinfo+0xbe>
     9a4:	00 d0       	rcall	.+0      	; 0x9a6 <nrf24l01_printinfo+0xc0>
     9a6:	ed b7       	in	r30, 0x3d	; 61
     9a8:	fe b7       	in	r31, 0x3e	; 62
     9aa:	31 96       	adiw	r30, 0x01	; 1
     9ac:	ad b7       	in	r26, 0x3d	; 61
     9ae:	be b7       	in	r27, 0x3e	; 62
     9b0:	12 96       	adiw	r26, 0x02	; 2
     9b2:	1c 93       	st	X, r17
     9b4:	0e 93       	st	-X, r16
     9b6:	11 97       	sbiw	r26, 0x01	; 1
     9b8:	2a e7       	ldi	r18, 0x7A	; 122
     9ba:	31 e0       	ldi	r19, 0x01	; 1
     9bc:	33 83       	std	Z+3, r19	; 0x03
     9be:	22 83       	std	Z+2, r18	; 0x02
     9c0:	84 83       	std	Z+4, r24	; 0x04
     9c2:	15 82       	std	Z+5, r1	; 0x05
     9c4:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <sprintf>
     9c8:	8d b7       	in	r24, 0x3d	; 61
     9ca:	9e b7       	in	r25, 0x3e	; 62
     9cc:	06 96       	adiw	r24, 0x06	; 6
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	f8 94       	cli
     9d2:	9e bf       	out	0x3e, r25	; 62
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	8d bf       	out	0x3d, r24	; 61
     9d8:	c8 01       	movw	r24, r16
     9da:	f7 01       	movw	r30, r14
     9dc:	09 95       	icall
	sprintf(buff,"RF_SETUP: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_SETUP)); prints(buff);
     9de:	86 e0       	ldi	r24, 0x06	; 6
     9e0:	0e 94 17 03 	call	0x62e	; 0x62e <nrf24l01_readregister>
     9e4:	00 d0       	rcall	.+0      	; 0x9e6 <nrf24l01_printinfo+0x100>
     9e6:	00 d0       	rcall	.+0      	; 0x9e8 <nrf24l01_printinfo+0x102>
     9e8:	00 d0       	rcall	.+0      	; 0x9ea <nrf24l01_printinfo+0x104>
     9ea:	ed b7       	in	r30, 0x3d	; 61
     9ec:	fe b7       	in	r31, 0x3e	; 62
     9ee:	31 96       	adiw	r30, 0x01	; 1
     9f0:	ad b7       	in	r26, 0x3d	; 61
     9f2:	be b7       	in	r27, 0x3e	; 62
     9f4:	12 96       	adiw	r26, 0x02	; 2
     9f6:	1c 93       	st	X, r17
     9f8:	0e 93       	st	-X, r16
     9fa:	11 97       	sbiw	r26, 0x01	; 1
     9fc:	28 e8       	ldi	r18, 0x88	; 136
     9fe:	31 e0       	ldi	r19, 0x01	; 1
     a00:	33 83       	std	Z+3, r19	; 0x03
     a02:	22 83       	std	Z+2, r18	; 0x02
     a04:	84 83       	std	Z+4, r24	; 0x04
     a06:	15 82       	std	Z+5, r1	; 0x05
     a08:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <sprintf>
     a0c:	8d b7       	in	r24, 0x3d	; 61
     a0e:	9e b7       	in	r25, 0x3e	; 62
     a10:	06 96       	adiw	r24, 0x06	; 6
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	f8 94       	cli
     a16:	9e bf       	out	0x3e, r25	; 62
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	8d bf       	out	0x3d, r24	; 61
     a1c:	c8 01       	movw	r24, r16
     a1e:	f7 01       	movw	r30, r14
     a20:	09 95       	icall
	sprintf(buff,"EN_AA: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_AA)); prints(buff);
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	0e 94 17 03 	call	0x62e	; 0x62e <nrf24l01_readregister>
     a28:	00 d0       	rcall	.+0      	; 0xa2a <nrf24l01_printinfo+0x144>
     a2a:	00 d0       	rcall	.+0      	; 0xa2c <nrf24l01_printinfo+0x146>
     a2c:	00 d0       	rcall	.+0      	; 0xa2e <nrf24l01_printinfo+0x148>
     a2e:	ed b7       	in	r30, 0x3d	; 61
     a30:	fe b7       	in	r31, 0x3e	; 62
     a32:	31 96       	adiw	r30, 0x01	; 1
     a34:	ad b7       	in	r26, 0x3d	; 61
     a36:	be b7       	in	r27, 0x3e	; 62
     a38:	12 96       	adiw	r26, 0x02	; 2
     a3a:	1c 93       	st	X, r17
     a3c:	0e 93       	st	-X, r16
     a3e:	11 97       	sbiw	r26, 0x01	; 1
     a40:	29 e9       	ldi	r18, 0x99	; 153
     a42:	31 e0       	ldi	r19, 0x01	; 1
     a44:	33 83       	std	Z+3, r19	; 0x03
     a46:	22 83       	std	Z+2, r18	; 0x02
     a48:	84 83       	std	Z+4, r24	; 0x04
     a4a:	15 82       	std	Z+5, r1	; 0x05
     a4c:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <sprintf>
     a50:	8d b7       	in	r24, 0x3d	; 61
     a52:	9e b7       	in	r25, 0x3e	; 62
     a54:	06 96       	adiw	r24, 0x06	; 6
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	f8 94       	cli
     a5a:	9e bf       	out	0x3e, r25	; 62
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	8d bf       	out	0x3d, r24	; 61
     a60:	c8 01       	movw	r24, r16
     a62:	f7 01       	movw	r30, r14
     a64:	09 95       	icall
	sprintf(buff,"EN_RXADDR: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_RXADDR)); prints(buff);
     a66:	82 e0       	ldi	r24, 0x02	; 2
     a68:	0e 94 17 03 	call	0x62e	; 0x62e <nrf24l01_readregister>
     a6c:	00 d0       	rcall	.+0      	; 0xa6e <nrf24l01_printinfo+0x188>
     a6e:	00 d0       	rcall	.+0      	; 0xa70 <nrf24l01_printinfo+0x18a>
     a70:	00 d0       	rcall	.+0      	; 0xa72 <nrf24l01_printinfo+0x18c>
     a72:	ed b7       	in	r30, 0x3d	; 61
     a74:	fe b7       	in	r31, 0x3e	; 62
     a76:	31 96       	adiw	r30, 0x01	; 1
     a78:	ad b7       	in	r26, 0x3d	; 61
     a7a:	be b7       	in	r27, 0x3e	; 62
     a7c:	12 96       	adiw	r26, 0x02	; 2
     a7e:	1c 93       	st	X, r17
     a80:	0e 93       	st	-X, r16
     a82:	11 97       	sbiw	r26, 0x01	; 1
     a84:	27 ea       	ldi	r18, 0xA7	; 167
     a86:	31 e0       	ldi	r19, 0x01	; 1
     a88:	33 83       	std	Z+3, r19	; 0x03
     a8a:	22 83       	std	Z+2, r18	; 0x02
     a8c:	84 83       	std	Z+4, r24	; 0x04
     a8e:	15 82       	std	Z+5, r1	; 0x05
     a90:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <sprintf>
     a94:	8d b7       	in	r24, 0x3d	; 61
     a96:	9e b7       	in	r25, 0x3e	; 62
     a98:	06 96       	adiw	r24, 0x06	; 6
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	9e bf       	out	0x3e, r25	; 62
     aa0:	0f be       	out	0x3f, r0	; 63
     aa2:	8d bf       	out	0x3d, r24	; 61
     aa4:	c8 01       	movw	r24, r16
     aa6:	f7 01       	movw	r30, r14
     aa8:	09 95       	icall
	sprintf(buff,"OBSERVE_TX: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_OBSERVE_TX)); prints(buff);
     aaa:	88 e0       	ldi	r24, 0x08	; 8
     aac:	0e 94 17 03 	call	0x62e	; 0x62e <nrf24l01_readregister>
     ab0:	00 d0       	rcall	.+0      	; 0xab2 <nrf24l01_printinfo+0x1cc>
     ab2:	00 d0       	rcall	.+0      	; 0xab4 <nrf24l01_printinfo+0x1ce>
     ab4:	00 d0       	rcall	.+0      	; 0xab6 <nrf24l01_printinfo+0x1d0>
     ab6:	ed b7       	in	r30, 0x3d	; 61
     ab8:	fe b7       	in	r31, 0x3e	; 62
     aba:	31 96       	adiw	r30, 0x01	; 1
     abc:	ad b7       	in	r26, 0x3d	; 61
     abe:	be b7       	in	r27, 0x3e	; 62
     ac0:	12 96       	adiw	r26, 0x02	; 2
     ac2:	1c 93       	st	X, r17
     ac4:	0e 93       	st	-X, r16
     ac6:	11 97       	sbiw	r26, 0x01	; 1
     ac8:	29 eb       	ldi	r18, 0xB9	; 185
     aca:	31 e0       	ldi	r19, 0x01	; 1
     acc:	33 83       	std	Z+3, r19	; 0x03
     ace:	22 83       	std	Z+2, r18	; 0x02
     ad0:	84 83       	std	Z+4, r24	; 0x04
     ad2:	15 82       	std	Z+5, r1	; 0x05
     ad4:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <sprintf>
     ad8:	8d b7       	in	r24, 0x3d	; 61
     ada:	9e b7       	in	r25, 0x3e	; 62
     adc:	06 96       	adiw	r24, 0x06	; 6
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	f8 94       	cli
     ae2:	9e bf       	out	0x3e, r25	; 62
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	8d bf       	out	0x3d, r24	; 61
     ae8:	c8 01       	movw	r24, r16
     aea:	f7 01       	movw	r30, r14
     aec:	09 95       	icall
	prints("\r\n");
     aee:	8c ec       	ldi	r24, 0xCC	; 204
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	f7 01       	movw	r30, r14
     af4:	09 95       	icall
}
     af6:	cc 59       	subi	r28, 0x9C	; 156
     af8:	df 4f       	sbci	r29, 0xFF	; 255
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	f8 94       	cli
     afe:	de bf       	out	0x3e, r29	; 62
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	cd bf       	out	0x3d, r28	; 61
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	ff 90       	pop	r15
     b0e:	ef 90       	pop	r14
     b10:	08 95       	ret

00000b12 <nrf24l01_readready>:
}

/*
 * check if there is data ready
 */
uint8_t nrf24l01_readready(uint8_t* pipe) {
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	ec 01       	movw	r28, r24
    uint8_t status = nrf24l01_getstatus();
     b18:	0e 94 6d 04 	call	0x8da	; 0x8da <nrf24l01_getstatus>
    uint8_t ret = status & (1<<NRF24L01_REG_RX_DR);
    if(ret) {
     b1c:	98 2f       	mov	r25, r24
     b1e:	90 74       	andi	r25, 0x40	; 64
     b20:	86 ff       	sbrs	r24, 6
     b22:	05 c0       	rjmp	.+10     	; 0xb2e <nrf24l01_readready+0x1c>
		//get the pipe number
		if(pipe)
     b24:	20 97       	sbiw	r28, 0x00	; 0
     b26:	19 f0       	breq	.+6      	; 0xb2e <nrf24l01_readready+0x1c>
			*pipe = (status >> NRF24L01_REG_RX_P_NO) & 0b111;
     b28:	86 95       	lsr	r24
     b2a:	87 70       	andi	r24, 0x07	; 7
     b2c:	88 83       	st	Y, r24
    }
    return ret;
}
     b2e:	89 2f       	mov	r24, r25
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	08 95       	ret

00000b36 <nrf24l01_read>:

/*
 * get data
 */
void nrf24l01_read(uint8_t pipe,uint8_t *data) {
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	06 2f       	mov	r16, r22
     b40:	17 2f       	mov	r17, r23
	uint8_t i = 0;
	//read rx register
	nrf24l01_CSNlo; //low CSN
     b42:	ae 98       	cbi	0x15, 6	; 21
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
     b44:	81 e6       	ldi	r24, 0x61	; 97
     b46:	0e 94 01 13 	call	0x2602	; 0x2602 <spi_writereadbyte>
     b4a:	c0 2f       	mov	r28, r16
     b4c:	d1 2f       	mov	r29, r17
	//Thay doi lai command, lay PAYLOAD va write ACK
	//spi_writereadbyte(NRF24L01_CMD_W_ACK_PAYLOAD | pipe);
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     b4e:	10 e0       	ldi	r17, 0x00	; 0
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
     b50:	8f ef       	ldi	r24, 0xFF	; 255
     b52:	0e 94 01 13 	call	0x2602	; 0x2602 <spi_writereadbyte>
     b56:	89 93       	st	Y+, r24
	//read rx register
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
	//Thay doi lai command, lay PAYLOAD va write ACK
	//spi_writereadbyte(NRF24L01_CMD_W_ACK_PAYLOAD | pipe);
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     b58:	1f 5f       	subi	r17, 0xFF	; 255
     b5a:	10 31       	cpi	r17, 0x10	; 16
     b5c:	c9 f7       	brne	.-14     	; 0xb50 <nrf24l01_read+0x1a>
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
    nrf24l01_CSNhi; //high CSN
     b5e:	ae 9a       	sbi	0x15, 6	; 21
    //reset register
    nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR));
     b60:	87 e0       	ldi	r24, 0x07	; 7
     b62:	60 e4       	ldi	r22, 0x40	; 64
     b64:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
    //handle ack payload receipt
	if (nrf24l01_getstatus() & (1<<NRF24L01_REG_TX_DS))
     b68:	0e 94 6d 04 	call	0x8da	; 0x8da <nrf24l01_getstatus>
     b6c:	85 ff       	sbrs	r24, 5
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <nrf24l01_read+0x42>
		nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_TX_DS));
     b70:	87 e0       	ldi	r24, 0x07	; 7
     b72:	60 e2       	ldi	r22, 0x20	; 32
     b74:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
}
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	1f 91       	pop	r17
     b7e:	0f 91       	pop	r16
     b80:	08 95       	ret

00000b82 <nrf24l01_write>:

/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	08 2f       	mov	r16, r24
     b8c:	19 2f       	mov	r17, r25
	uint8_t i = 0;
	uint8_t ret = 0;

	//set tx mode
	nrf24l01_setTX();
     b8e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <nrf24l01_setTX>

	//write data
	nrf24l01_CSNlo; //low CSN
     b92:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
     b94:	80 ea       	ldi	r24, 0xA0	; 160
     b96:	0e 94 01 13 	call	0x2602	; 0x2602 <spi_writereadbyte>
     b9a:	c0 2f       	mov	r28, r16
     b9c:	d1 2f       	mov	r29, r17
     b9e:	10 e1       	ldi	r17, 0x10	; 16
	for (i=0; i<NRF24L01_PAYLOAD; i++)
		spi_writereadbyte(data[i]);
     ba0:	89 91       	ld	r24, Y+
     ba2:	0e 94 01 13 	call	0x2602	; 0x2602 <spi_writereadbyte>
     ba6:	11 50       	subi	r17, 0x01	; 1
	nrf24l01_setTX();

	//write data
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
	for (i=0; i<NRF24L01_PAYLOAD; i++)
     ba8:	d9 f7       	brne	.-10     	; 0xba0 <nrf24l01_write+0x1e>
		spi_writereadbyte(data[i]);
	nrf24l01_CSNhi; //high CSN
     baa:	ae 9a       	sbi	0x15, 6	; 21

	//start transmission
	nrf24l01_CEhi; //high CE
     bac:	af 9a       	sbi	0x15, 7	; 21
     bae:	85 e0       	ldi	r24, 0x05	; 5
     bb0:	8a 95       	dec	r24
     bb2:	f1 f7       	brne	.-4      	; 0xbb0 <nrf24l01_write+0x2e>
	_delay_us(15);
	nrf24l01_CElo; //low CE
     bb4:	af 98       	cbi	0x15, 7	; 21
     bb6:	83 e0       	ldi	r24, 0x03	; 3
     bb8:	8a 95       	dec	r24
     bba:	f1 f7       	brne	.-4      	; 0xbb8 <nrf24l01_write+0x36>
     bbc:	00 00       	nop

	//stop if max_retries reached or send is ok
	do {
		_delay_us(10);
	}
	while( !(nrf24l01_getstatus() & (1<<NRF24L01_REG_MAX_RT | 1<<NRF24L01_REG_TX_DS)) );
     bbe:	0e 94 6d 04 	call	0x8da	; 0x8da <nrf24l01_getstatus>
     bc2:	80 73       	andi	r24, 0x30	; 48
     bc4:	c1 f3       	breq	.-16     	; 0xbb6 <nrf24l01_write+0x34>

	if(nrf24l01_getstatus() & 1<<NRF24L01_REG_TX_DS)
     bc6:	0e 94 6d 04 	call	0x8da	; 0x8da <nrf24l01_getstatus>
     bca:	c8 2f       	mov	r28, r24
		ret = 1;

	//reset PLOS_CNT
	nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH);
     bcc:	85 e0       	ldi	r24, 0x05	; 5
     bce:	6c e4       	ldi	r22, 0x4C	; 76
     bd0:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>

	//power down
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PWR_UP));
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	0e 94 17 03 	call	0x62e	; 0x62e <nrf24l01_readregister>
     bda:	68 2f       	mov	r22, r24
     bdc:	6d 7f       	andi	r22, 0xFD	; 253
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>

	//set rx mode
	nrf24l01_setRX();
     be4:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_setRX>
/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
	uint8_t i = 0;
	uint8_t ret = 0;
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	c5 ff       	sbrs	r28, 5
     bec:	80 e0       	ldi	r24, 0x00	; 0

	//set rx mode
	nrf24l01_setRX();

	return ret;
}
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	08 95       	ret

00000bf8 <nrf24l01_setpalevel>:

/*
 * set power level
 */
void nrf24l01_setpalevel() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP);
     bf8:	86 e0       	ldi	r24, 0x06	; 6
     bfa:	0e 94 17 03 	call	0x62e	; 0x62e <nrf24l01_readregister>
  setup &= ~((1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH));

  if (NRF24L01_RF24_PA == NRF24L01_RF24_PA_MAX) {
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
     bfe:	68 2f       	mov	r22, r24
     c00:	66 60       	ori	r22, 0x06	; 6
  } else {
	  //default is max power
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     c02:	86 e0       	ldi	r24, 0x06	; 6
     c04:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
}
     c08:	08 95       	ret

00000c0a <nrf24l01_setdatarate>:

/*
 * set datarate
 */
void nrf24l01_setdatarate() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP) ;
     c0a:	86 e0       	ldi	r24, 0x06	; 6
     c0c:	0e 94 17 03 	call	0x62e	; 0x62e <nrf24l01_readregister>

  setup &= ~((1<<NRF24L01_REG_RF_DR_LOW) | (1<<NRF24L01_REG_RF_DR_HIGH));
     c10:	68 2f       	mov	r22, r24
     c12:	67 7d       	andi	r22, 0xD7	; 215
    } else {
    	//default is 1Mbps
    }
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     c14:	86 e0       	ldi	r24, 0x06	; 6
     c16:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
}
     c1a:	08 95       	ret

00000c1c <nrf24l01_setcrclength>:

/*
 * set crc length
 */
void nrf24l01_setcrclength() {
  uint8_t config = nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~((1<<NRF24L01_REG_CRCO) | (1<<NRF24L01_REG_EN_CRC));
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	0e 94 17 03 	call	0x62e	; 0x62e <nrf24l01_readregister>
	  //nothing
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_8) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_16) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
	  config |= (1<<NRF24L01_REG_CRCO);
     c22:	68 2f       	mov	r22, r24
     c24:	6c 60       	ori	r22, 0x0C	; 12
  } else {
	  //default is disabled
  }

  nrf24l01_writeregister(NRF24L01_REG_CONFIG, config);
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
}
     c2c:	08 95       	ret

00000c2e <nrf24l01_init>:
/*
 * init nrf24l01
 */
void nrf24l01_init() {
	//setup port
	NRF24L01_DDR |= (1<<NRF24L01_CSN); //output
     c2e:	a6 9a       	sbi	0x14, 6	; 20
	NRF24L01_DDR |= (1<<NRF24L01_CE); //output
     c30:	a7 9a       	sbi	0x14, 7	; 20

    spi_init(); //init spi
     c32:	0e 94 f6 12 	call	0x25ec	; 0x25ec <spi_init>

    nrf24l01_CElo; //low CE
     c36:	af 98       	cbi	0x15, 7	; 21
    nrf24l01_CSNhi; //high CSN
     c38:	ae 9a       	sbi	0x15, 6	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c3a:	81 ee       	ldi	r24, 0xE1	; 225
     c3c:	94 e0       	ldi	r25, 0x04	; 4
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	f1 f7       	brne	.-4      	; 0xc3e <nrf24l01_init+0x10>
     c42:	00 c0       	rjmp	.+0      	; 0xc44 <nrf24l01_init+0x16>
     c44:	00 00       	nop

    _delay_ms(5); //wait for the radio to init

    nrf24l01_setpalevel(); //set power level
     c46:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <nrf24l01_setpalevel>
    nrf24l01_setdatarate(); //set data rate
     c4a:	0e 94 05 06 	call	0xc0a	; 0xc0a <nrf24l01_setdatarate>
    nrf24l01_setcrclength(); //set crc length
     c4e:	0e 94 0e 06 	call	0xc1c	; 0xc1c <nrf24l01_setcrclength>
    nrf24l01_writeregister(NRF24L01_REG_SETUP_RETR, NRF24L01_RETR); // set retries
     c52:	84 e0       	ldi	r24, 0x04	; 4
     c54:	67 e4       	ldi	r22, 0x47	; 71
     c56:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_DYNPD, 0); //disable dynamic payloads
     c5a:	8c e1       	ldi	r24, 0x1C	; 28
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH); //set RF channel
     c62:	85 e0       	ldi	r24, 0x05	; 5
     c64:	6c e4       	ldi	r22, 0x4C	; 76
     c66:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>

	//payload size
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P0, NRF24L01_PAYLOAD);
     c6a:	81 e1       	ldi	r24, 0x11	; 17
     c6c:	60 e1       	ldi	r22, 0x10	; 16
     c6e:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P1, NRF24L01_PAYLOAD);
     c72:	82 e1       	ldi	r24, 0x12	; 18
     c74:	60 e1       	ldi	r22, 0x10	; 16
     c76:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P2, NRF24L01_PAYLOAD);
     c7a:	83 e1       	ldi	r24, 0x13	; 19
     c7c:	60 e1       	ldi	r22, 0x10	; 16
     c7e:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P3, NRF24L01_PAYLOAD);
     c82:	84 e1       	ldi	r24, 0x14	; 20
     c84:	60 e1       	ldi	r22, 0x10	; 16
     c86:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P4, NRF24L01_PAYLOAD);
     c8a:	85 e1       	ldi	r24, 0x15	; 21
     c8c:	60 e1       	ldi	r22, 0x10	; 16
     c8e:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P5, NRF24L01_PAYLOAD);
     c92:	86 e1       	ldi	r24, 0x16	; 22
     c94:	60 e1       	ldi	r22, 0x10	; 16
     c96:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
	#endif

	//enable pipe
	nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, 0);
     c9a:	82 e0       	ldi	r24, 0x02	; 2
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P0));
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	0e 94 17 03 	call	0x62e	; 0x62e <nrf24l01_readregister>
     ca8:	68 2f       	mov	r22, r24
     caa:	61 60       	ori	r22, 0x01	; 1
     cac:	82 e0       	ldi	r24, 0x02	; 2
     cae:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P1));
     cb2:	82 e0       	ldi	r24, 0x02	; 2
     cb4:	0e 94 17 03 	call	0x62e	; 0x62e <nrf24l01_readregister>
     cb8:	68 2f       	mov	r22, r24
     cba:	62 60       	ori	r22, 0x02	; 2
     cbc:	82 e0       	ldi	r24, 0x02	; 2
     cbe:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P2));
     cc2:	82 e0       	ldi	r24, 0x02	; 2
     cc4:	0e 94 17 03 	call	0x62e	; 0x62e <nrf24l01_readregister>
     cc8:	68 2f       	mov	r22, r24
     cca:	64 60       	ori	r22, 0x04	; 4
     ccc:	82 e0       	ldi	r24, 0x02	; 2
     cce:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P3));
     cd2:	82 e0       	ldi	r24, 0x02	; 2
     cd4:	0e 94 17 03 	call	0x62e	; 0x62e <nrf24l01_readregister>
     cd8:	68 2f       	mov	r22, r24
     cda:	68 60       	ori	r22, 0x08	; 8
     cdc:	82 e0       	ldi	r24, 0x02	; 2
     cde:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P4));
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	0e 94 17 03 	call	0x62e	; 0x62e <nrf24l01_readregister>
     ce8:	68 2f       	mov	r22, r24
     cea:	60 61       	ori	r22, 0x10	; 16
     cec:	82 e0       	ldi	r24, 0x02	; 2
     cee:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P5));
     cf2:	82 e0       	ldi	r24, 0x02	; 2
     cf4:	0e 94 17 03 	call	0x62e	; 0x62e <nrf24l01_readregister>
     cf8:	68 2f       	mov	r22, r24
     cfa:	60 62       	ori	r22, 0x20	; 32
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
	#endif

	//auto ack
	#if NRF24L01_ACK == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P0));
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	0e 94 17 03 	call	0x62e	; 0x62e <nrf24l01_readregister>
     d08:	68 2f       	mov	r22, r24
     d0a:	61 60       	ori	r22, 0x01	; 1
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P1));
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	0e 94 17 03 	call	0x62e	; 0x62e <nrf24l01_readregister>
     d18:	68 2f       	mov	r22, r24
     d1a:	62 60       	ori	r22, 0x02	; 2
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P2));
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	0e 94 17 03 	call	0x62e	; 0x62e <nrf24l01_readregister>
     d28:	68 2f       	mov	r22, r24
     d2a:	64 60       	ori	r22, 0x04	; 4
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P3));
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	0e 94 17 03 	call	0x62e	; 0x62e <nrf24l01_readregister>
     d38:	68 2f       	mov	r22, r24
     d3a:	68 60       	ori	r22, 0x08	; 8
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P4));
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	0e 94 17 03 	call	0x62e	; 0x62e <nrf24l01_readregister>
     d48:	68 2f       	mov	r22, r24
     d4a:	60 61       	ori	r22, 0x10	; 16
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P5));
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	0e 94 17 03 	call	0x62e	; 0x62e <nrf24l01_readregister>
     d58:	68 2f       	mov	r22, r24
     d5a:	60 62       	ori	r22, 0x20	; 32
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	0e 94 3f 03 	call	0x67e	; 0x67e <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P4));
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P5));
	#endif

	//rx address
	nrf24l01_setrxaddr(0, nrf24l01_addr0);
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	6f ec       	ldi	r22, 0xCF	; 207
     d66:	71 e0       	ldi	r23, 0x01	; 1
     d68:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(1, nrf24l01_addr1);
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	64 ed       	ldi	r22, 0xD4	; 212
     d70:	71 e0       	ldi	r23, 0x01	; 1
     d72:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(2, nrf24l01_addr2);
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	69 ed       	ldi	r22, 0xD9	; 217
     d7a:	71 e0       	ldi	r23, 0x01	; 1
     d7c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(3, nrf24l01_addr3);
     d80:	83 e0       	ldi	r24, 0x03	; 3
     d82:	6e ed       	ldi	r22, 0xDE	; 222
     d84:	71 e0       	ldi	r23, 0x01	; 1
     d86:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(4, nrf24l01_addr4);
     d8a:	84 e0       	ldi	r24, 0x04	; 4
     d8c:	63 ee       	ldi	r22, 0xE3	; 227
     d8e:	71 e0       	ldi	r23, 0x01	; 1
     d90:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(5, nrf24l01_addr5);
     d94:	85 e0       	ldi	r24, 0x05	; 5
     d96:	68 ee       	ldi	r22, 0xE8	; 232
     d98:	71 e0       	ldi	r23, 0x01	; 1
     d9a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <nrf24l01_setrxaddr>

	//tx address
	nrf24l01_settxaddr(nrf24l01_addrtx);
     d9e:	8d ee       	ldi	r24, 0xED	; 237
     da0:	91 e0       	ldi	r25, 0x01	; 1
     da2:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <nrf24l01_settxaddr>

	//set rx mode
	nrf24l01_setRX();
     da6:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_setRX>
}
     daa:	08 95       	ret

00000dac <sMO_init>:
static void clearInEvents(SMO* handle);
static void clearOutEvents(SMO* handle);


void sMO_init(SMO* handle)
{
     dac:	fc 01       	movw	r30, r24
	int i;

	for (i = 0; i < SMO_MAX_ORTHOGONAL_STATES; ++i)
		handle->stateConfVector[i] = SMO_last_state;
     dae:	85 e1       	ldi	r24, 0x15	; 21
     db0:	80 83       	st	Z, r24
     db2:	81 83       	std	Z+1, r24	; 0x01
     db4:	82 83       	std	Z+2, r24	; 0x02
	
	
	handle->stateConfVectorPosition = 0;
     db6:	14 82       	std	Z+4, r1	; 0x04
     db8:	13 82       	std	Z+3, r1	; 0x03

	// TODO: initialize all events ...
	// TODO: initialize all variables ... (set default values - here or inenter sequence ?!?)

}
     dba:	08 95       	ret

00000dbc <sMO_enter>:

void sMO_enter(SMO* handle)
{
     dbc:	1f 93       	push	r17
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	ec 01       	movw	r28, r24
	sMO_entryaction(handle);
	/* Default enter sequence for region main region */
	/* Default react sequence for initial entry  */
	/* Default enter sequence for state on */
	/* Entry action for state 'on'. */
	handle->iface.lightOn = bool_true;
     dc4:	11 e0       	ldi	r17, 0x01	; 1
     dc6:	1a a7       	lds	r17, 0x7a
	/* Default enter sequence for region r1 */
	/* Default react sequence for initial entry  */
	/* Default enter sequence for state Init */
	/* Entry action for state 'Init'. */
	sMO_setTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) , 3 * 1000, bool_false);
     dc8:	c5 96       	adiw	r24, 0x35	; 53
     dca:	48 eb       	ldi	r20, 0xB8	; 184
     dcc:	5b e0       	ldi	r21, 0x0B	; 11
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	0e 94 c0 02 	call	0x580	; 0x580 <sMO_setTimer>
	handle->iface.tableId = 1;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	a0 e0       	ldi	r26, 0x00	; 0
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	8f a7       	lds	r24, 0x7f
     de2:	98 ab       	sts	0x58, r25
     de4:	a9 ab       	sts	0x59, r26
     de6:	ba ab       	sts	0x5a, r27
	sMOIfaceLCD_init();
     de8:	0e 94 4c 02 	call	0x498	; 0x498 <sMOIfaceLCD_init>
	sMOIfaceKEYPAD_init();
     dec:	0e 94 0d 02 	call	0x41a	; 0x41a <sMOIfaceKEYPAD_init>
	sMOIfaceRF_init();
     df0:	0e 94 c6 02 	call	0x58c	; 0x58c <sMOIfaceRF_init>
	sMOIfaceLCD_clear();
     df4:	0e 94 43 02 	call	0x486	; 0x486 <sMOIfaceLCD_clear>
	sMOIfaceLCD_writeString("Waitting...");
     df8:	82 ef       	ldi	r24, 0xF2	; 242
     dfa:	91 e0       	ldi	r25, 0x01	; 1
     dfc:	0e 94 10 02 	call	0x420	; 0x420 <sMOIfaceLCD_writeString>
	handle->stateConfVector[0] = SMO_main_region_on_r1_Init;
     e00:	18 83       	st	Y, r17
	handle->stateConfVectorPosition = 0;
     e02:	1c 82       	std	Y+4, r1	; 0x04
     e04:	1b 82       	std	Y+3, r1	; 0x03
}
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	1f 91       	pop	r17
     e0c:	08 95       	ret

00000e0e <sMO_exit>:

void sMO_exit(SMO* handle)
{
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
     e12:	ec 01       	movw	r28, r24
	/* Default exit sequence for statechart SMO */
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of main region) at position 0... */
	switch(handle->stateConfVector[ 0 ]) {
     e14:	88 81       	ld	r24, Y
     e16:	83 30       	cpi	r24, 0x03	; 3
     e18:	69 f0       	breq	.+26     	; 0xe34 <sMO_exit+0x26>
     e1a:	84 30       	cpi	r24, 0x04	; 4
     e1c:	81 f0       	breq	.+32     	; 0xe3e <sMO_exit+0x30>
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	91 f4       	brne	.+36     	; 0xe46 <sMO_exit+0x38>
		case SMO_main_region_on_r1_Init : {
			/* Default exit sequence for state Init */
			handle->stateConfVector[0] = SMO_last_state;
     e22:	85 e1       	ldi	r24, 0x15	; 21
     e24:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
     e26:	1c 82       	std	Y+4, r1	; 0x04
     e28:	1b 82       	std	Y+3, r1	; 0x03
			/* Exit action for state 'Init'. */
			sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) );		
     e2a:	ce 01       	movw	r24, r28
     e2c:	c5 96       	adiw	r24, 0x35	; 53
     e2e:	0e 94 c3 02 	call	0x586	; 0x586 <sMO_unsetTimer>
			break;
     e32:	09 c0       	rjmp	.+18     	; 0xe46 <sMO_exit+0x38>
		}
		case SMO_main_region_on_r1_Running_RF_DataReceived : {
			/* Default exit sequence for state DataReceived */
			handle->stateConfVector[0] = SMO_last_state;
     e34:	85 e1       	ldi	r24, 0x15	; 21
     e36:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
     e38:	1c 82       	std	Y+4, r1	; 0x04
     e3a:	1b 82       	std	Y+3, r1	; 0x03
			break;
     e3c:	04 c0       	rjmp	.+8      	; 0xe46 <sMO_exit+0x38>
		}
		case SMO_main_region_on_r1_Running_RF_GetData : {
			/* Default exit sequence for state GetData */
			handle->stateConfVector[0] = SMO_last_state;
     e3e:	85 e1       	ldi	r24, 0x15	; 21
     e40:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
     e42:	1c 82       	std	Y+4, r1	; 0x04
     e44:	1b 82       	std	Y+3, r1	; 0x03
			break;
		}
		default: break;
	}
	/* Handle exit of all possible states (of main region) at position 1... */
	switch(handle->stateConfVector[ 1 ]) {
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	85 30       	cpi	r24, 0x05	; 5
     e4a:	19 f0       	breq	.+6      	; 0xe52 <sMO_exit+0x44>
     e4c:	86 30       	cpi	r24, 0x06	; 6
     e4e:	71 f4       	brne	.+28     	; 0xe6c <sMO_exit+0x5e>
     e50:	07 c0       	rjmp	.+14     	; 0xe60 <sMO_exit+0x52>
		case SMO_main_region_on_r1_Running_keypad_CheckKey : {
			/* Default exit sequence for state CheckKey */
			handle->stateConfVector[1] = SMO_last_state;
     e52:	85 e1       	ldi	r24, 0x15	; 21
     e54:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	9c 83       	std	Y+4, r25	; 0x04
     e5c:	8b 83       	std	Y+3, r24	; 0x03
			break;
     e5e:	06 c0       	rjmp	.+12     	; 0xe6c <sMO_exit+0x5e>
		}
		case SMO_main_region_on_r1_Running_keypad_CheckKeyDown : {
			/* Default exit sequence for state CheckKeyDown */
			handle->stateConfVector[1] = SMO_last_state;
     e60:	85 e1       	ldi	r24, 0x15	; 21
     e62:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	9c 83       	std	Y+4, r25	; 0x04
     e6a:	8b 83       	std	Y+3, r24	; 0x03
			break;
		}
		default: break;
	}
	/* Handle exit of all possible states (of main region) at position 2... */
	switch(handle->stateConfVector[ 2 ]) {
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	8e 30       	cpi	r24, 0x0E	; 14
     e70:	09 f4       	brne	.+2      	; 0xe74 <sMO_exit+0x66>
     e72:	51 c0       	rjmp	.+162    	; 0xf16 <sMO_exit+0x108>
     e74:	8f 30       	cpi	r24, 0x0F	; 15
     e76:	78 f4       	brcc	.+30     	; 0xe96 <sMO_exit+0x88>
     e78:	8a 30       	cpi	r24, 0x0A	; 10
     e7a:	89 f1       	breq	.+98     	; 0xede <sMO_exit+0xd0>
     e7c:	8b 30       	cpi	r24, 0x0B	; 11
     e7e:	30 f4       	brcc	.+12     	; 0xe8c <sMO_exit+0x7e>
     e80:	87 30       	cpi	r24, 0x07	; 7
     e82:	f9 f0       	breq	.+62     	; 0xec2 <sMO_exit+0xb4>
     e84:	89 30       	cpi	r24, 0x09	; 9
     e86:	09 f0       	breq	.+2      	; 0xe8a <sMO_exit+0x7c>
     e88:	76 c0       	rjmp	.+236    	; 0xf76 <sMO_exit+0x168>
     e8a:	22 c0       	rjmp	.+68     	; 0xed0 <sMO_exit+0xc2>
     e8c:	8c 30       	cpi	r24, 0x0C	; 12
     e8e:	a9 f1       	breq	.+106    	; 0xefa <sMO_exit+0xec>
     e90:	8d 30       	cpi	r24, 0x0D	; 13
     e92:	d0 f5       	brcc	.+116    	; 0xf08 <sMO_exit+0xfa>
     e94:	2b c0       	rjmp	.+86     	; 0xeec <sMO_exit+0xde>
     e96:	81 31       	cpi	r24, 0x11	; 17
     e98:	09 f4       	brne	.+2      	; 0xe9c <sMO_exit+0x8e>
     e9a:	52 c0       	rjmp	.+164    	; 0xf40 <sMO_exit+0x132>
     e9c:	82 31       	cpi	r24, 0x12	; 18
     e9e:	38 f4       	brcc	.+14     	; 0xeae <sMO_exit+0xa0>
     ea0:	8f 30       	cpi	r24, 0x0F	; 15
     ea2:	09 f4       	brne	.+2      	; 0xea6 <sMO_exit+0x98>
     ea4:	3f c0       	rjmp	.+126    	; 0xf24 <sMO_exit+0x116>
     ea6:	80 31       	cpi	r24, 0x10	; 16
     ea8:	09 f0       	breq	.+2      	; 0xeac <sMO_exit+0x9e>
     eaa:	65 c0       	rjmp	.+202    	; 0xf76 <sMO_exit+0x168>
     eac:	42 c0       	rjmp	.+132    	; 0xf32 <sMO_exit+0x124>
     eae:	83 31       	cpi	r24, 0x13	; 19
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <sMO_exit+0xa6>
     eb2:	54 c0       	rjmp	.+168    	; 0xf5c <sMO_exit+0x14e>
     eb4:	83 31       	cpi	r24, 0x13	; 19
     eb6:	08 f4       	brcc	.+2      	; 0xeba <sMO_exit+0xac>
     eb8:	4a c0       	rjmp	.+148    	; 0xf4e <sMO_exit+0x140>
     eba:	84 31       	cpi	r24, 0x14	; 20
     ebc:	09 f0       	breq	.+2      	; 0xec0 <sMO_exit+0xb2>
     ebe:	5b c0       	rjmp	.+182    	; 0xf76 <sMO_exit+0x168>
     ec0:	54 c0       	rjmp	.+168    	; 0xf6a <sMO_exit+0x15c>
		case SMO_main_region_on_r1_Running_running_main_ShowMenu : {
			/* Default exit sequence for state ShowMenu */
			handle->stateConfVector[2] = SMO_last_state;
     ec2:	85 e1       	ldi	r24, 0x15	; 21
     ec4:	8a 83       	std	Y+2, r24	; 0x02
			handle->stateConfVectorPosition = 2;
     ec6:	82 e0       	ldi	r24, 0x02	; 2
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	9c 83       	std	Y+4, r25	; 0x04
     ecc:	8b 83       	std	Y+3, r24	; 0x03
			break;
     ece:	53 c0       	rjmp	.+166    	; 0xf76 <sMO_exit+0x168>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
			/* Default exit sequence for state ShowCode */
			handle->stateConfVector[2] = SMO_last_state;
     ed0:	85 e1       	ldi	r24, 0x15	; 21
     ed2:	8a 83       	std	Y+2, r24	; 0x02
			handle->stateConfVectorPosition = 2;
     ed4:	82 e0       	ldi	r24, 0x02	; 2
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	9c 83       	std	Y+4, r25	; 0x04
     eda:	8b 83       	std	Y+3, r24	; 0x03
			break;
     edc:	4c c0       	rjmp	.+152    	; 0xf76 <sMO_exit+0x168>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
			/* Default exit sequence for state EnterCode */
			handle->stateConfVector[2] = SMO_last_state;
     ede:	85 e1       	ldi	r24, 0x15	; 21
     ee0:	8a 83       	std	Y+2, r24	; 0x02
			handle->stateConfVectorPosition = 2;
     ee2:	82 e0       	ldi	r24, 0x02	; 2
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	9c 83       	std	Y+4, r25	; 0x04
     ee8:	8b 83       	std	Y+3, r24	; 0x03
			break;
     eea:	45 c0       	rjmp	.+138    	; 0xf76 <sMO_exit+0x168>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
			/* Default exit sequence for state CheckKeyPress1 */
			handle->stateConfVector[2] = SMO_last_state;
     eec:	85 e1       	ldi	r24, 0x15	; 21
     eee:	8a 83       	std	Y+2, r24	; 0x02
			handle->stateConfVectorPosition = 2;
     ef0:	82 e0       	ldi	r24, 0x02	; 2
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	9c 83       	std	Y+4, r25	; 0x04
     ef6:	8b 83       	std	Y+3, r24	; 0x03
			break;
     ef8:	3e c0       	rjmp	.+124    	; 0xf76 <sMO_exit+0x168>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
			/* Default exit sequence for state CheckCode0 */
			handle->stateConfVector[2] = SMO_last_state;
     efa:	85 e1       	ldi	r24, 0x15	; 21
     efc:	8a 83       	std	Y+2, r24	; 0x02
			handle->stateConfVectorPosition = 2;
     efe:	82 e0       	ldi	r24, 0x02	; 2
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	9c 83       	std	Y+4, r25	; 0x04
     f04:	8b 83       	std	Y+3, r24	; 0x03
			break;
     f06:	37 c0       	rjmp	.+110    	; 0xf76 <sMO_exit+0x168>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
			/* Default exit sequence for state ShowAmount */
			handle->stateConfVector[2] = SMO_last_state;
     f08:	85 e1       	ldi	r24, 0x15	; 21
     f0a:	8a 83       	std	Y+2, r24	; 0x02
			handle->stateConfVectorPosition = 2;
     f0c:	82 e0       	ldi	r24, 0x02	; 2
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	9c 83       	std	Y+4, r25	; 0x04
     f12:	8b 83       	std	Y+3, r24	; 0x03
			break;
     f14:	30 c0       	rjmp	.+96     	; 0xf76 <sMO_exit+0x168>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
			/* Default exit sequence for state CheckKeyPress2 */
			handle->stateConfVector[2] = SMO_last_state;
     f16:	85 e1       	ldi	r24, 0x15	; 21
     f18:	8a 83       	std	Y+2, r24	; 0x02
			handle->stateConfVectorPosition = 2;
     f1a:	82 e0       	ldi	r24, 0x02	; 2
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	9c 83       	std	Y+4, r25	; 0x04
     f20:	8b 83       	std	Y+3, r24	; 0x03
			break;
     f22:	29 c0       	rjmp	.+82     	; 0xf76 <sMO_exit+0x168>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0 : {
			/* Default exit sequence for state CheckAmount0 */
			handle->stateConfVector[2] = SMO_last_state;
     f24:	85 e1       	ldi	r24, 0x15	; 21
     f26:	8a 83       	std	Y+2, r24	; 0x02
			handle->stateConfVectorPosition = 2;
     f28:	82 e0       	ldi	r24, 0x02	; 2
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	9c 83       	std	Y+4, r25	; 0x04
     f2e:	8b 83       	std	Y+3, r24	; 0x03
			break;
     f30:	22 c0       	rjmp	.+68     	; 0xf76 <sMO_exit+0x168>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
			/* Default exit sequence for state EnterAmount */
			handle->stateConfVector[2] = SMO_last_state;
     f32:	85 e1       	ldi	r24, 0x15	; 21
     f34:	8a 83       	std	Y+2, r24	; 0x02
			handle->stateConfVectorPosition = 2;
     f36:	82 e0       	ldi	r24, 0x02	; 2
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	9c 83       	std	Y+4, r25	; 0x04
     f3c:	8b 83       	std	Y+3, r24	; 0x03
			break;
     f3e:	1b c0       	rjmp	.+54     	; 0xf76 <sMO_exit+0x168>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_SendData : {
			/* Default exit sequence for state SendData */
			handle->stateConfVector[2] = SMO_last_state;
     f40:	85 e1       	ldi	r24, 0x15	; 21
     f42:	8a 83       	std	Y+2, r24	; 0x02
			handle->stateConfVectorPosition = 2;
     f44:	82 e0       	ldi	r24, 0x02	; 2
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	9c 83       	std	Y+4, r25	; 0x04
     f4a:	8b 83       	std	Y+3, r24	; 0x03
			break;
     f4c:	14 c0       	rjmp	.+40     	; 0xf76 <sMO_exit+0x168>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
			/* Default exit sequence for final state. */
			handle->stateConfVector[2] = SMO_last_state;
     f4e:	85 e1       	ldi	r24, 0x15	; 21
     f50:	8a 83       	std	Y+2, r24	; 0x02
			handle->stateConfVectorPosition = 2;
     f52:	82 e0       	ldi	r24, 0x02	; 2
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	9c 83       	std	Y+4, r25	; 0x04
     f58:	8b 83       	std	Y+3, r24	; 0x03
			break;
     f5a:	0d c0       	rjmp	.+26     	; 0xf76 <sMO_exit+0x168>
		}
		case SMO_main_region_on_r1_Running_running_main_MenuA : {
			/* Default exit sequence for state MenuA */
			handle->stateConfVector[2] = SMO_last_state;
     f5c:	85 e1       	ldi	r24, 0x15	; 21
     f5e:	8a 83       	std	Y+2, r24	; 0x02
			handle->stateConfVectorPosition = 2;
     f60:	82 e0       	ldi	r24, 0x02	; 2
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	9c 83       	std	Y+4, r25	; 0x04
     f66:	8b 83       	std	Y+3, r24	; 0x03
			break;
     f68:	06 c0       	rjmp	.+12     	; 0xf76 <sMO_exit+0x168>
		}
		case SMO_main_region_on_r1_Running_running_main_CheckKeyPress : {
			/* Default exit sequence for state CheckKeyPress */
			handle->stateConfVector[2] = SMO_last_state;
     f6a:	85 e1       	ldi	r24, 0x15	; 21
     f6c:	8a 83       	std	Y+2, r24	; 0x02
			handle->stateConfVectorPosition = 2;
     f6e:	82 e0       	ldi	r24, 0x02	; 2
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	9c 83       	std	Y+4, r25	; 0x04
     f74:	8b 83       	std	Y+3, r24	; 0x03
			break;
		}
		default: break;
	}
	sMO_exitaction(handle);
}
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	08 95       	ret

00000f7c <sMO_runCycle>:
}

static void clearOutEvents(SMO* handle) {
}

void sMO_runCycle(SMO* handle) {
     f7c:	2f 92       	push	r2
     f7e:	3f 92       	push	r3
     f80:	4f 92       	push	r4
     f82:	5f 92       	push	r5
     f84:	6f 92       	push	r6
     f86:	7f 92       	push	r7
     f88:	8f 92       	push	r8
     f8a:	9f 92       	push	r9
     f8c:	af 92       	push	r10
     f8e:	bf 92       	push	r11
     f90:	cf 92       	push	r12
     f92:	df 92       	push	r13
     f94:	ef 92       	push	r14
     f96:	ff 92       	push	r15
     f98:	0f 93       	push	r16
     f9a:	1f 93       	push	r17
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	ec 01       	movw	r28, r24
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
     fa2:	1c 82       	std	Y+4, r1	; 0x04
     fa4:	1b 82       	std	Y+3, r1	; 0x03
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e0       	ldi	r25, 0x00	; 0
static void sMO_react_main_region_on_r1_Running_running_main_CheckKeyPress(SMO* handle) {
	/* The reactions of state CheckKeyPress. */
	if (handle->ifaceKEYPAD.lastkey == 13 && handle->ifaceKEYPAD.key_pressed_raised) { 
		/* Default exit sequence for state CheckKeyPress */
		handle->stateConfVector[2] = SMO_last_state;
		handle->stateConfVectorPosition = 2;
     faa:	02 e0       	ldi	r16, 0x02	; 2
     fac:	10 e0       	ldi	r17, 0x00	; 0
		/* Default enter sequence for state MenuA */
		/* Entry action for state 'MenuA'. */
		handle->iface.menuId = 1;
     fae:	22 24       	eor	r2, r2
     fb0:	33 24       	eor	r3, r3
     fb2:	21 01       	movw	r4, r2
     fb4:	23 94       	inc	r2
			handle->stateConfVector[2] = SMO_last_state;
			handle->stateConfVectorPosition = 2;
			/* Default enter sequence for state CheckKeyPress2 */
			/* Entry action for state 'CheckKeyPress2'. */
			handle->ifaceKEYPAD.lastkey = 0;
			handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2;
     fb6:	0f 2e       	mov	r0, r31
     fb8:	fe e0       	ldi	r31, 0x0E	; 14
     fba:	8f 2e       	mov	r8, r31
     fbc:	f0 2d       	mov	r31, r0
			handle->stateConfVector[2] = SMO_last_state;
			handle->stateConfVectorPosition = 2;
			/* Default enter sequence for state CheckKeyPress1 */
			/* Entry action for state 'CheckKeyPress1'. */
			handle->ifaceKEYPAD.lastkey = 0;
			handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1;
     fbe:	0f 2e       	mov	r0, r31
     fc0:	fb e0       	ldi	r31, 0x0B	; 11
     fc2:	7f 2e       	mov	r7, r31
     fc4:	f0 2d       	mov	r31, r0
		handle->stateConfVector[2] = SMO_last_state;
		handle->stateConfVectorPosition = 2;
		/* Default enter sequence for state CheckKeyPress */
		/* Entry action for state 'CheckKeyPress'. */
		handle->ifaceKEYPAD.lastkey = 0;
		handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_CheckKeyPress;
     fc6:	0f 2e       	mov	r0, r31
     fc8:	f4 e1       	ldi	r31, 0x14	; 20
     fca:	9f 2e       	mov	r9, r31
     fcc:	f0 2d       	mov	r31, r0
	}  else {
		if (handle->ifaceKEYPAD.key != 0) { 
			/* Default enter sequence for state CheckKeyDown */
			/* Entry action for state 'CheckKeyDown'. */
			handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
			handle->ifaceKEYPAD.key_down = bool_true;
     fce:	aa 24       	eor	r10, r10
     fd0:	a3 94       	inc	r10
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_keypad_CheckKeyDown;
     fd2:	0f 2e       	mov	r0, r31
     fd4:	f6 e0       	ldi	r31, 0x06	; 6
     fd6:	6f 2e       	mov	r6, r31
     fd8:	f0 2d       	mov	r31, r0
/* The reactions of state CheckKeyDown. */
static void sMO_react_main_region_on_r1_Running_keypad_CheckKeyDown(SMO* handle) {
	/* The reactions of state CheckKeyDown. */
	if (handle->ifaceKEYPAD.key == 0) { 
		/* Default exit sequence for state CheckKeyDown */
		handle->stateConfVector[1] = SMO_last_state;
     fda:	0f 2e       	mov	r0, r31
     fdc:	f5 e1       	ldi	r31, 0x15	; 21
     fde:	bf 2e       	mov	r11, r31
     fe0:	f0 2d       	mov	r31, r0
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
			
		switch (handle->stateConfVector[handle->stateConfVectorPosition]) {
     fe2:	8c 0f       	add	r24, r28
     fe4:	9d 1f       	adc	r25, r29
     fe6:	fc 01       	movw	r30, r24
     fe8:	80 81       	ld	r24, Z
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	84 31       	cpi	r24, 0x14	; 20
     ff0:	91 05       	cpc	r25, r1
     ff2:	10 f0       	brcs	.+4      	; 0xff8 <sMO_runCycle+0x7c>
     ff4:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <__stack+0x11af>
     ff8:	8a 5b       	subi	r24, 0xBA	; 186
     ffa:	9f 4f       	sbci	r25, 0xFF	; 255
     ffc:	fc 01       	movw	r30, r24
     ffe:	ee 0f       	add	r30, r30
    1000:	ff 1f       	adc	r31, r31
    1002:	05 90       	lpm	r0, Z+
    1004:	f4 91       	lpm	r31, Z
    1006:	e0 2d       	mov	r30, r0
    1008:	09 94       	ijmp
}

/* The reactions of state Init. */
static void sMO_react_main_region_on_r1_Init(SMO* handle) {
	/* The reactions of state Init. */
	if (handle->timeEvents.Init_time_event_0_raised) { 
    100a:	8d a9       	sts	0x4d, r24
    100c:	88 23       	and	r24, r24
    100e:	11 f4       	brne	.+4      	; 0x1014 <sMO_runCycle+0x98>
    1010:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <__stack+0x11af>
		/* Default exit sequence for state Init */
		handle->stateConfVector[0] = SMO_last_state;
    1014:	85 e1       	ldi	r24, 0x15	; 21
    1016:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    1018:	1c 82       	std	Y+4, r1	; 0x04
    101a:	1b 82       	std	Y+3, r1	; 0x03
		/* Exit action for state 'Init'. */
		sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) );		
    101c:	ce 01       	movw	r24, r28
    101e:	c5 96       	adiw	r24, 0x35	; 53
    1020:	0e 94 c3 02 	call	0x586	; 0x586 <sMO_unsetTimer>
		/* Default enter sequence for state Running */
		/* Default enter sequence for region RF */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state GetData */
		/* Entry action for state 'GetData'. */
		handle->ifaceRF.data = sMOIfaceRF_getData();
    1024:	0e 94 50 02 	call	0x4a0	; 0x4a0 <sMOIfaceRF_getData>
    1028:	9d 8b       	std	Y+21, r25	; 0x15
    102a:	8c 8b       	std	Y+20, r24	; 0x14
		handle->stateConfVector[0] = SMO_main_region_on_r1_Running_RF_GetData;
    102c:	84 e0       	ldi	r24, 0x04	; 4
    102e:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    1030:	1c 82       	std	Y+4, r1	; 0x04
    1032:	1b 82       	std	Y+3, r1	; 0x03
		/* Default enter sequence for region keypad */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    1034:	0e 94 06 02 	call	0x40c	; 0x40c <sMOIfaceKEYPAD_checkpress>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	8d 83       	std	Y+5, r24	; 0x05
    103e:	9e 83       	std	Y+6, r25	; 0x06
    1040:	af 83       	std	Y+7, r26	; 0x07
    1042:	b8 87       	std	Y+8, r27	; 0x08
		handle->ifaceKEYPAD.key_down = bool_false;
    1044:	1d 86       	std	Y+13, r1	; 0x0d
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_keypad_CheckKey;
    1046:	85 e0       	ldi	r24, 0x05	; 5
    1048:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	9c 83       	std	Y+4, r25	; 0x04
    1050:	8b 83       	std	Y+3, r24	; 0x03
		/* Default enter sequence for region running main */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1052:	0e 94 43 02 	call	0x486	; 0x486 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1056:	8e ef       	ldi	r24, 0xFE	; 254
    1058:	91 e0       	ldi	r25, 0x01	; 1
    105a:	0e 94 10 02 	call	0x420	; 0x420 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    105e:	8c e0       	ldi	r24, 0x0C	; 12
    1060:	92 e0       	ldi	r25, 0x02	; 2
    1062:	40 e0       	ldi	r20, 0x00	; 0
    1064:	50 e0       	ldi	r21, 0x00	; 0
    1066:	ba 01       	movw	r22, r20
    1068:	01 e0       	ldi	r16, 0x01	; 1
    106a:	10 e0       	ldi	r17, 0x00	; 0
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	0e 94 13 02 	call	0x426	; 0x426 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1074:	1b a6       	lds	r17, 0xbb
    1076:	1c a6       	lds	r17, 0xbc
    1078:	1d a6       	lds	r17, 0xbd
    107a:	1e a6       	lds	r17, 0xbe
		handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    107c:	87 e0       	ldi	r24, 0x07	; 7
    107e:	8a 83       	std	Y+2, r24	; 0x02
		handle->stateConfVectorPosition = 2;
    1080:	82 e0       	ldi	r24, 0x02	; 2
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	9c 83       	std	Y+4, r25	; 0x04
    1086:	8b 83       	std	Y+3, r24	; 0x03
    1088:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__stack+0x1201>
/* The reactions of state DataReceived. */
static void sMO_react_main_region_on_r1_Running_RF_DataReceived(SMO* handle) {
	/* The reactions of state DataReceived. */
	if (bool_true) { 
		/* Default exit sequence for state DataReceived */
		handle->stateConfVector[0] = SMO_last_state;
    108c:	b8 82       	st	Y, r11
		handle->stateConfVectorPosition = 0;
    108e:	1c 82       	std	Y+4, r1	; 0x04
    1090:	1b 82       	std	Y+3, r1	; 0x03
		/* Default enter sequence for state GetData */
		/* Entry action for state 'GetData'. */
		handle->ifaceRF.data = sMOIfaceRF_getData();
    1092:	0e 94 50 02 	call	0x4a0	; 0x4a0 <sMOIfaceRF_getData>
    1096:	9d 8b       	std	Y+21, r25	; 0x15
    1098:	8c 8b       	std	Y+20, r24	; 0x14
		handle->stateConfVector[0] = SMO_main_region_on_r1_Running_RF_GetData;
    109a:	84 e0       	ldi	r24, 0x04	; 4
    109c:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    109e:	1c 82       	std	Y+4, r1	; 0x04
    10a0:	1b 82       	std	Y+3, r1	; 0x03
    10a2:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <__stack+0x11f3>
}

/* The reactions of state GetData. */
static void sMO_react_main_region_on_r1_Running_RF_GetData(SMO* handle) {
	/* The reactions of state GetData. */
	if ((strcmp(handle->ifaceRF.data, "") != 0)
    10a6:	ec 89       	ldd	r30, Y+20	; 0x14
    10a8:	fd 89       	ldd	r31, Y+21	; 0x15
    10aa:	80 81       	ld	r24, Z
    10ac:	88 23       	and	r24, r24
    10ae:	49 f0       	breq	.+18     	; 0x10c2 <sMO_runCycle+0x146>
	) { 
		/* Default exit sequence for state GetData */
		handle->stateConfVector[0] = SMO_last_state;
		handle->stateConfVectorPosition = 0;
    10b0:	1c 82       	std	Y+4, r1	; 0x04
    10b2:	1b 82       	std	Y+3, r1	; 0x03
		handle->ifaceRF.lastdata = handle->ifaceRF.data;
    10b4:	ff 8b       	std	Y+23, r31	; 0x17
    10b6:	ee 8b       	std	Y+22, r30	; 0x16
		/* Default enter sequence for state DataReceived */
		/* Entry action for state 'DataReceived'. */
		handle->ifaceRF.DataRecieved_raised = bool_true;
    10b8:	ad 8e       	std	Y+29, r10	; 0x1d
		handle->stateConfVector[0] = SMO_main_region_on_r1_Running_RF_DataReceived;
    10ba:	83 e0       	ldi	r24, 0x03	; 3
    10bc:	88 83       	st	Y, r24
    10be:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <__stack+0x11af>
	}  else {
		if ((strcmp(handle->ifaceRF.data, "") == 0)
		) { 
			/* Default enter sequence for state GetData */
			/* Entry action for state 'GetData'. */
			handle->ifaceRF.data = sMOIfaceRF_getData();
    10c2:	0e 94 50 02 	call	0x4a0	; 0x4a0 <sMOIfaceRF_getData>
    10c6:	9d 8b       	std	Y+21, r25	; 0x15
    10c8:	8c 8b       	std	Y+20, r24	; 0x14
			handle->stateConfVector[0] = SMO_main_region_on_r1_Running_RF_GetData;
    10ca:	84 e0       	ldi	r24, 0x04	; 4
    10cc:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    10ce:	1c 82       	std	Y+4, r1	; 0x04
    10d0:	1b 82       	std	Y+3, r1	; 0x03
    10d2:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <__stack+0x11f3>
}

/* The reactions of state CheckKey. */
static void sMO_react_main_region_on_r1_Running_keypad_CheckKey(SMO* handle) {
	/* The reactions of state CheckKey. */
	if (handle->ifaceKEYPAD.key != 0) { 
    10d6:	8d 81       	ldd	r24, Y+5	; 0x05
    10d8:	9e 81       	ldd	r25, Y+6	; 0x06
    10da:	af 81       	ldd	r26, Y+7	; 0x07
    10dc:	b8 85       	ldd	r27, Y+8	; 0x08
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	a1 05       	cpc	r26, r1
    10e2:	b1 05       	cpc	r27, r1
    10e4:	c9 f0       	breq	.+50     	; 0x1118 <__stack+0x19>
		/* Default exit sequence for state CheckKey */
		handle->stateConfVector[1] = SMO_last_state;
    10e6:	b9 82       	std	Y+1, r11	; 0x01
		handle->stateConfVectorPosition = 1;
    10e8:	21 e0       	ldi	r18, 0x01	; 1
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	3c 83       	std	Y+4, r19	; 0x04
    10ee:	2b 83       	std	Y+3, r18	; 0x03
		handle->ifaceKEYPAD.lastkey = handle->ifaceKEYPAD.key;
    10f0:	89 87       	std	Y+9, r24	; 0x09
    10f2:	9a 87       	std	Y+10, r25	; 0x0a
    10f4:	ab 87       	std	Y+11, r26	; 0x0b
    10f6:	bc 87       	std	Y+12, r27	; 0x0c
		/* Default enter sequence for state CheckKeyDown */
		/* Entry action for state 'CheckKeyDown'. */
		handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    10f8:	0e 94 06 02 	call	0x40c	; 0x40c <sMOIfaceKEYPAD_checkpress>
    10fc:	dc 01       	movw	r26, r24
    10fe:	cb 01       	movw	r24, r22
    1100:	8d 83       	std	Y+5, r24	; 0x05
    1102:	9e 83       	std	Y+6, r25	; 0x06
    1104:	af 83       	std	Y+7, r26	; 0x07
    1106:	b8 87       	std	Y+8, r27	; 0x08
		handle->ifaceKEYPAD.key_down = bool_true;
    1108:	ad 86       	std	Y+13, r10	; 0x0d
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_keypad_CheckKeyDown;
    110a:	69 82       	std	Y+1, r6	; 0x01
		handle->stateConfVectorPosition = 1;
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	9c 83       	std	Y+4, r25	; 0x04
    1112:	8b 83       	std	Y+3, r24	; 0x03
    1114:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <__stack+0x11f3>
	}  else {
		if (handle->ifaceKEYPAD.key == 0) { 
			/* Default enter sequence for state CheckKey */
			/* Entry action for state 'CheckKey'. */
			handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    1118:	0e 94 06 02 	call	0x40c	; 0x40c <sMOIfaceKEYPAD_checkpress>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	8d 83       	std	Y+5, r24	; 0x05
    1122:	9e 83       	std	Y+6, r25	; 0x06
    1124:	af 83       	std	Y+7, r26	; 0x07
    1126:	b8 87       	std	Y+8, r27	; 0x08
			handle->ifaceKEYPAD.key_down = bool_false;
    1128:	1d 86       	std	Y+13, r1	; 0x0d
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_keypad_CheckKey;
    112a:	85 e0       	ldi	r24, 0x05	; 5
    112c:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    112e:	e1 e0       	ldi	r30, 0x01	; 1
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	fc 83       	std	Y+4, r31	; 0x04
    1134:	eb 83       	std	Y+3, r30	; 0x03
    1136:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <__stack+0x11f3>
}

/* The reactions of state CheckKeyDown. */
static void sMO_react_main_region_on_r1_Running_keypad_CheckKeyDown(SMO* handle) {
	/* The reactions of state CheckKeyDown. */
	if (handle->ifaceKEYPAD.key == 0) { 
    113a:	8d 81       	ldd	r24, Y+5	; 0x05
    113c:	9e 81       	ldd	r25, Y+6	; 0x06
    113e:	af 81       	ldd	r26, Y+7	; 0x07
    1140:	b8 85       	ldd	r27, Y+8	; 0x08
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	a1 05       	cpc	r26, r1
    1146:	b1 05       	cpc	r27, r1
    1148:	b9 f4       	brne	.+46     	; 0x1178 <__stack+0x79>
		/* Default exit sequence for state CheckKeyDown */
		handle->stateConfVector[1] = SMO_last_state;
    114a:	b9 82       	std	Y+1, r11	; 0x01
		handle->stateConfVectorPosition = 1;
    114c:	21 e0       	ldi	r18, 0x01	; 1
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	3c 83       	std	Y+4, r19	; 0x04
    1152:	2b 83       	std	Y+3, r18	; 0x03
		handle->ifaceKEYPAD.key_pressed_raised = bool_true;
    1154:	ae 86       	std	Y+14, r10	; 0x0e
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    1156:	0e 94 06 02 	call	0x40c	; 0x40c <sMOIfaceKEYPAD_checkpress>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	8d 83       	std	Y+5, r24	; 0x05
    1160:	9e 83       	std	Y+6, r25	; 0x06
    1162:	af 83       	std	Y+7, r26	; 0x07
    1164:	b8 87       	std	Y+8, r27	; 0x08
		handle->ifaceKEYPAD.key_down = bool_false;
    1166:	1d 86       	std	Y+13, r1	; 0x0d
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_keypad_CheckKey;
    1168:	85 e0       	ldi	r24, 0x05	; 5
    116a:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	9c 83       	std	Y+4, r25	; 0x04
    1172:	8b 83       	std	Y+3, r24	; 0x03
    1174:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <__stack+0x11f3>
	}  else {
		if (handle->ifaceKEYPAD.key != 0) { 
			/* Default enter sequence for state CheckKeyDown */
			/* Entry action for state 'CheckKeyDown'. */
			handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    1178:	0e 94 06 02 	call	0x40c	; 0x40c <sMOIfaceKEYPAD_checkpress>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	8d 83       	std	Y+5, r24	; 0x05
    1182:	9e 83       	std	Y+6, r25	; 0x06
    1184:	af 83       	std	Y+7, r26	; 0x07
    1186:	b8 87       	std	Y+8, r27	; 0x08
			handle->ifaceKEYPAD.key_down = bool_true;
    1188:	ad 86       	std	Y+13, r10	; 0x0d
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_keypad_CheckKeyDown;
    118a:	69 82       	std	Y+1, r6	; 0x01
			handle->stateConfVectorPosition = 1;
    118c:	e1 e0       	ldi	r30, 0x01	; 1
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	fc 83       	std	Y+4, r31	; 0x04
    1192:	eb 83       	std	Y+3, r30	; 0x03
    1194:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <__stack+0x11f3>
static void sMO_react_main_region_on_r1_Running_running_main_ShowMenu(SMO* handle) {
	/* The reactions of state ShowMenu. */
	if (bool_true) { 
		/* Default exit sequence for state ShowMenu */
		handle->stateConfVector[2] = SMO_last_state;
		handle->stateConfVectorPosition = 2;
    1198:	1c 83       	std	Y+4, r17	; 0x04
    119a:	0b 83       	std	Y+3, r16	; 0x03
		/* Default enter sequence for state CheckKeyPress */
		/* Entry action for state 'CheckKeyPress'. */
		handle->ifaceKEYPAD.lastkey = 0;
    119c:	19 86       	std	Y+9, r1	; 0x09
    119e:	1a 86       	std	Y+10, r1	; 0x0a
    11a0:	1b 86       	std	Y+11, r1	; 0x0b
    11a2:	1c 86       	std	Y+12, r1	; 0x0c
		handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_CheckKeyPress;
    11a4:	9a 82       	std	Y+2, r9	; 0x02
    11a6:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <__stack+0x11af>
}

/* The reactions of state ShowCode. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode(SMO* handle) {
	/* The reactions of state ShowCode. */
	if (handle->iface.menuId == 0) { 
    11aa:	8b a5       	lds	r24, 0x6b
    11ac:	9c a5       	lds	r25, 0x6c
    11ae:	ad a5       	lds	r26, 0x6d
    11b0:	be a5       	lds	r27, 0x6e
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	a1 05       	cpc	r26, r1
    11b6:	b1 05       	cpc	r27, r1
    11b8:	09 f0       	breq	.+2      	; 0x11bc <__stack+0xbd>
    11ba:	86 c0       	rjmp	.+268    	; 0x12c8 <__stack+0x1c9>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 2... */
		switch(handle->stateConfVector[ 2 ]) {
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	8d 30       	cpi	r24, 0x0D	; 13
    11c0:	e9 f1       	breq	.+122    	; 0x123c <__stack+0x13d>
    11c2:	8e 30       	cpi	r24, 0x0E	; 14
    11c4:	70 f4       	brcc	.+28     	; 0x11e2 <__stack+0xe3>
    11c6:	8a 30       	cpi	r24, 0x0A	; 10
    11c8:	21 f1       	breq	.+72     	; 0x1212 <__stack+0x113>
    11ca:	8b 30       	cpi	r24, 0x0B	; 11
    11cc:	20 f4       	brcc	.+8      	; 0x11d6 <__stack+0xd7>
    11ce:	89 30       	cpi	r24, 0x09	; 9
    11d0:	09 f0       	breq	.+2      	; 0x11d4 <__stack+0xd5>
    11d2:	5d c0       	rjmp	.+186    	; 0x128e <__stack+0x18f>
    11d4:	17 c0       	rjmp	.+46     	; 0x1204 <__stack+0x105>
    11d6:	8b 30       	cpi	r24, 0x0B	; 11
    11d8:	19 f1       	breq	.+70     	; 0x1220 <__stack+0x121>
    11da:	8c 30       	cpi	r24, 0x0C	; 12
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <__stack+0xe1>
    11de:	57 c0       	rjmp	.+174    	; 0x128e <__stack+0x18f>
    11e0:	26 c0       	rjmp	.+76     	; 0x122e <__stack+0x12f>
    11e2:	80 31       	cpi	r24, 0x10	; 16
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <__stack+0xe9>
    11e6:	3f c0       	rjmp	.+126    	; 0x1266 <__stack+0x167>
    11e8:	81 31       	cpi	r24, 0x11	; 17
    11ea:	30 f4       	brcc	.+12     	; 0x11f8 <__stack+0xf9>
    11ec:	8e 30       	cpi	r24, 0x0E	; 14
    11ee:	69 f1       	breq	.+90     	; 0x124a <__stack+0x14b>
    11f0:	8f 30       	cpi	r24, 0x0F	; 15
    11f2:	09 f0       	breq	.+2      	; 0x11f6 <__stack+0xf7>
    11f4:	4c c0       	rjmp	.+152    	; 0x128e <__stack+0x18f>
    11f6:	30 c0       	rjmp	.+96     	; 0x1258 <__stack+0x159>
    11f8:	81 31       	cpi	r24, 0x11	; 17
    11fa:	e1 f1       	breq	.+120    	; 0x1274 <__stack+0x175>
    11fc:	82 31       	cpi	r24, 0x12	; 18
    11fe:	09 f0       	breq	.+2      	; 0x1202 <__stack+0x103>
    1200:	46 c0       	rjmp	.+140    	; 0x128e <__stack+0x18f>
    1202:	3f c0       	rjmp	.+126    	; 0x1282 <__stack+0x183>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[2] = SMO_last_state;
    1204:	85 e1       	ldi	r24, 0x15	; 21
    1206:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1208:	82 e0       	ldi	r24, 0x02	; 2
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	9c 83       	std	Y+4, r25	; 0x04
    120e:	8b 83       	std	Y+3, r24	; 0x03
    1210:	3e c0       	rjmp	.+124    	; 0x128e <__stack+0x18f>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[2] = SMO_last_state;
    1212:	85 e1       	ldi	r24, 0x15	; 21
    1214:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1216:	82 e0       	ldi	r24, 0x02	; 2
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	9c 83       	std	Y+4, r25	; 0x04
    121c:	8b 83       	std	Y+3, r24	; 0x03
    121e:	37 c0       	rjmp	.+110    	; 0x128e <__stack+0x18f>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[2] = SMO_last_state;
    1220:	85 e1       	ldi	r24, 0x15	; 21
    1222:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1224:	82 e0       	ldi	r24, 0x02	; 2
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	9c 83       	std	Y+4, r25	; 0x04
    122a:	8b 83       	std	Y+3, r24	; 0x03
    122c:	30 c0       	rjmp	.+96     	; 0x128e <__stack+0x18f>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[2] = SMO_last_state;
    122e:	85 e1       	ldi	r24, 0x15	; 21
    1230:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1232:	82 e0       	ldi	r24, 0x02	; 2
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	9c 83       	std	Y+4, r25	; 0x04
    1238:	8b 83       	std	Y+3, r24	; 0x03
    123a:	29 c0       	rjmp	.+82     	; 0x128e <__stack+0x18f>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[2] = SMO_last_state;
    123c:	85 e1       	ldi	r24, 0x15	; 21
    123e:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1240:	82 e0       	ldi	r24, 0x02	; 2
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	9c 83       	std	Y+4, r25	; 0x04
    1246:	8b 83       	std	Y+3, r24	; 0x03
    1248:	22 c0       	rjmp	.+68     	; 0x128e <__stack+0x18f>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[2] = SMO_last_state;
    124a:	85 e1       	ldi	r24, 0x15	; 21
    124c:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    124e:	82 e0       	ldi	r24, 0x02	; 2
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	9c 83       	std	Y+4, r25	; 0x04
    1254:	8b 83       	std	Y+3, r24	; 0x03
    1256:	1b c0       	rjmp	.+54     	; 0x128e <__stack+0x18f>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0 : {
				/* Default exit sequence for state CheckAmount0 */
				handle->stateConfVector[2] = SMO_last_state;
    1258:	85 e1       	ldi	r24, 0x15	; 21
    125a:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    125c:	82 e0       	ldi	r24, 0x02	; 2
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	9c 83       	std	Y+4, r25	; 0x04
    1262:	8b 83       	std	Y+3, r24	; 0x03
    1264:	14 c0       	rjmp	.+40     	; 0x128e <__stack+0x18f>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[2] = SMO_last_state;
    1266:	85 e1       	ldi	r24, 0x15	; 21
    1268:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    126a:	82 e0       	ldi	r24, 0x02	; 2
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	9c 83       	std	Y+4, r25	; 0x04
    1270:	8b 83       	std	Y+3, r24	; 0x03
    1272:	0d c0       	rjmp	.+26     	; 0x128e <__stack+0x18f>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_SendData : {
				/* Default exit sequence for state SendData */
				handle->stateConfVector[2] = SMO_last_state;
    1274:	85 e1       	ldi	r24, 0x15	; 21
    1276:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1278:	82 e0       	ldi	r24, 0x02	; 2
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	9c 83       	std	Y+4, r25	; 0x04
    127e:	8b 83       	std	Y+3, r24	; 0x03
    1280:	06 c0       	rjmp	.+12     	; 0x128e <__stack+0x18f>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[2] = SMO_last_state;
    1282:	85 e1       	ldi	r24, 0x15	; 21
    1284:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1286:	82 e0       	ldi	r24, 0x02	; 2
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	9c 83       	std	Y+4, r25	; 0x04
    128c:	8b 83       	std	Y+3, r24	; 0x03
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    128e:	0e 94 43 02 	call	0x486	; 0x486 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1292:	8e ef       	ldi	r24, 0xFE	; 254
    1294:	91 e0       	ldi	r25, 0x01	; 1
    1296:	0e 94 10 02 	call	0x420	; 0x420 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    129a:	8c e0       	ldi	r24, 0x0C	; 12
    129c:	92 e0       	ldi	r25, 0x02	; 2
    129e:	40 e0       	ldi	r20, 0x00	; 0
    12a0:	50 e0       	ldi	r21, 0x00	; 0
    12a2:	ba 01       	movw	r22, r20
    12a4:	01 e0       	ldi	r16, 0x01	; 1
    12a6:	10 e0       	ldi	r17, 0x00	; 0
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	0e 94 13 02 	call	0x426	; 0x426 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    12b0:	1b a6       	lds	r17, 0xbb
    12b2:	1c a6       	lds	r17, 0xbc
    12b4:	1d a6       	lds	r17, 0xbd
    12b6:	1e a6       	lds	r17, 0xbe
		handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    12b8:	87 e0       	ldi	r24, 0x07	; 7
    12ba:	8a 83       	std	Y+2, r24	; 0x02
		handle->stateConfVectorPosition = 2;
    12bc:	82 e0       	ldi	r24, 0x02	; 2
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	9c 83       	std	Y+4, r25	; 0x04
    12c2:	8b 83       	std	Y+3, r24	; 0x03
    12c4:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__stack+0x1201>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state ShowCode */
			handle->stateConfVector[2] = SMO_last_state;
			handle->stateConfVectorPosition = 2;
    12c8:	1c 83       	std	Y+4, r17	; 0x04
    12ca:	0b 83       	std	Y+3, r16	; 0x03
			/* Default enter sequence for state CheckKeyPress1 */
			/* Entry action for state 'CheckKeyPress1'. */
			handle->ifaceKEYPAD.lastkey = 0;
    12cc:	19 86       	std	Y+9, r1	; 0x09
    12ce:	1a 86       	std	Y+10, r1	; 0x0a
    12d0:	1b 86       	std	Y+11, r1	; 0x0b
    12d2:	1c 86       	std	Y+12, r1	; 0x0c
			handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1;
    12d4:	7a 82       	std	Y+2, r7	; 0x02
    12d6:	eb c7       	rjmp	.+4054   	; 0x22ae <__stack+0x11af>
}

/* The reactions of state EnterCode. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode(SMO* handle) {
	/* The reactions of state EnterCode. */
	if (handle->iface.menuId == 0) { 
    12d8:	8b a5       	lds	r24, 0x6b
    12da:	9c a5       	lds	r25, 0x6c
    12dc:	ad a5       	lds	r26, 0x6d
    12de:	be a5       	lds	r27, 0x6e
    12e0:	00 97       	sbiw	r24, 0x00	; 0
    12e2:	a1 05       	cpc	r26, r1
    12e4:	b1 05       	cpc	r27, r1
    12e6:	09 f0       	breq	.+2      	; 0x12ea <__stack+0x1eb>
    12e8:	85 c0       	rjmp	.+266    	; 0x13f4 <__stack+0x2f5>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 2... */
		switch(handle->stateConfVector[ 2 ]) {
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	8d 30       	cpi	r24, 0x0D	; 13
    12ee:	e9 f1       	breq	.+122    	; 0x136a <__stack+0x26b>
    12f0:	8e 30       	cpi	r24, 0x0E	; 14
    12f2:	70 f4       	brcc	.+28     	; 0x1310 <__stack+0x211>
    12f4:	8a 30       	cpi	r24, 0x0A	; 10
    12f6:	21 f1       	breq	.+72     	; 0x1340 <__stack+0x241>
    12f8:	8b 30       	cpi	r24, 0x0B	; 11
    12fa:	20 f4       	brcc	.+8      	; 0x1304 <__stack+0x205>
    12fc:	89 30       	cpi	r24, 0x09	; 9
    12fe:	09 f0       	breq	.+2      	; 0x1302 <__stack+0x203>
    1300:	5d c0       	rjmp	.+186    	; 0x13bc <__stack+0x2bd>
    1302:	17 c0       	rjmp	.+46     	; 0x1332 <__stack+0x233>
    1304:	8b 30       	cpi	r24, 0x0B	; 11
    1306:	19 f1       	breq	.+70     	; 0x134e <__stack+0x24f>
    1308:	8c 30       	cpi	r24, 0x0C	; 12
    130a:	09 f0       	breq	.+2      	; 0x130e <__stack+0x20f>
    130c:	57 c0       	rjmp	.+174    	; 0x13bc <__stack+0x2bd>
    130e:	26 c0       	rjmp	.+76     	; 0x135c <__stack+0x25d>
    1310:	80 31       	cpi	r24, 0x10	; 16
    1312:	09 f4       	brne	.+2      	; 0x1316 <__stack+0x217>
    1314:	3f c0       	rjmp	.+126    	; 0x1394 <__stack+0x295>
    1316:	81 31       	cpi	r24, 0x11	; 17
    1318:	30 f4       	brcc	.+12     	; 0x1326 <__stack+0x227>
    131a:	8e 30       	cpi	r24, 0x0E	; 14
    131c:	69 f1       	breq	.+90     	; 0x1378 <__stack+0x279>
    131e:	8f 30       	cpi	r24, 0x0F	; 15
    1320:	09 f0       	breq	.+2      	; 0x1324 <__stack+0x225>
    1322:	4c c0       	rjmp	.+152    	; 0x13bc <__stack+0x2bd>
    1324:	30 c0       	rjmp	.+96     	; 0x1386 <__stack+0x287>
    1326:	81 31       	cpi	r24, 0x11	; 17
    1328:	e1 f1       	breq	.+120    	; 0x13a2 <__stack+0x2a3>
    132a:	82 31       	cpi	r24, 0x12	; 18
    132c:	09 f0       	breq	.+2      	; 0x1330 <__stack+0x231>
    132e:	46 c0       	rjmp	.+140    	; 0x13bc <__stack+0x2bd>
    1330:	3f c0       	rjmp	.+126    	; 0x13b0 <__stack+0x2b1>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[2] = SMO_last_state;
    1332:	85 e1       	ldi	r24, 0x15	; 21
    1334:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1336:	82 e0       	ldi	r24, 0x02	; 2
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	9c 83       	std	Y+4, r25	; 0x04
    133c:	8b 83       	std	Y+3, r24	; 0x03
    133e:	3e c0       	rjmp	.+124    	; 0x13bc <__stack+0x2bd>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[2] = SMO_last_state;
    1340:	85 e1       	ldi	r24, 0x15	; 21
    1342:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1344:	82 e0       	ldi	r24, 0x02	; 2
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	9c 83       	std	Y+4, r25	; 0x04
    134a:	8b 83       	std	Y+3, r24	; 0x03
    134c:	37 c0       	rjmp	.+110    	; 0x13bc <__stack+0x2bd>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[2] = SMO_last_state;
    134e:	85 e1       	ldi	r24, 0x15	; 21
    1350:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1352:	82 e0       	ldi	r24, 0x02	; 2
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	9c 83       	std	Y+4, r25	; 0x04
    1358:	8b 83       	std	Y+3, r24	; 0x03
    135a:	30 c0       	rjmp	.+96     	; 0x13bc <__stack+0x2bd>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[2] = SMO_last_state;
    135c:	85 e1       	ldi	r24, 0x15	; 21
    135e:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1360:	82 e0       	ldi	r24, 0x02	; 2
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	9c 83       	std	Y+4, r25	; 0x04
    1366:	8b 83       	std	Y+3, r24	; 0x03
    1368:	29 c0       	rjmp	.+82     	; 0x13bc <__stack+0x2bd>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[2] = SMO_last_state;
    136a:	85 e1       	ldi	r24, 0x15	; 21
    136c:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    136e:	82 e0       	ldi	r24, 0x02	; 2
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	9c 83       	std	Y+4, r25	; 0x04
    1374:	8b 83       	std	Y+3, r24	; 0x03
    1376:	22 c0       	rjmp	.+68     	; 0x13bc <__stack+0x2bd>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[2] = SMO_last_state;
    1378:	85 e1       	ldi	r24, 0x15	; 21
    137a:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    137c:	82 e0       	ldi	r24, 0x02	; 2
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	9c 83       	std	Y+4, r25	; 0x04
    1382:	8b 83       	std	Y+3, r24	; 0x03
    1384:	1b c0       	rjmp	.+54     	; 0x13bc <__stack+0x2bd>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0 : {
				/* Default exit sequence for state CheckAmount0 */
				handle->stateConfVector[2] = SMO_last_state;
    1386:	85 e1       	ldi	r24, 0x15	; 21
    1388:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    138a:	82 e0       	ldi	r24, 0x02	; 2
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	9c 83       	std	Y+4, r25	; 0x04
    1390:	8b 83       	std	Y+3, r24	; 0x03
    1392:	14 c0       	rjmp	.+40     	; 0x13bc <__stack+0x2bd>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[2] = SMO_last_state;
    1394:	85 e1       	ldi	r24, 0x15	; 21
    1396:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1398:	82 e0       	ldi	r24, 0x02	; 2
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	9c 83       	std	Y+4, r25	; 0x04
    139e:	8b 83       	std	Y+3, r24	; 0x03
    13a0:	0d c0       	rjmp	.+26     	; 0x13bc <__stack+0x2bd>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_SendData : {
				/* Default exit sequence for state SendData */
				handle->stateConfVector[2] = SMO_last_state;
    13a2:	85 e1       	ldi	r24, 0x15	; 21
    13a4:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    13a6:	82 e0       	ldi	r24, 0x02	; 2
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	9c 83       	std	Y+4, r25	; 0x04
    13ac:	8b 83       	std	Y+3, r24	; 0x03
    13ae:	06 c0       	rjmp	.+12     	; 0x13bc <__stack+0x2bd>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[2] = SMO_last_state;
    13b0:	85 e1       	ldi	r24, 0x15	; 21
    13b2:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    13b4:	82 e0       	ldi	r24, 0x02	; 2
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	9c 83       	std	Y+4, r25	; 0x04
    13ba:	8b 83       	std	Y+3, r24	; 0x03
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    13bc:	0e 94 43 02 	call	0x486	; 0x486 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    13c0:	8e ef       	ldi	r24, 0xFE	; 254
    13c2:	91 e0       	ldi	r25, 0x01	; 1
    13c4:	0e 94 10 02 	call	0x420	; 0x420 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    13c8:	8c e0       	ldi	r24, 0x0C	; 12
    13ca:	92 e0       	ldi	r25, 0x02	; 2
    13cc:	40 e0       	ldi	r20, 0x00	; 0
    13ce:	50 e0       	ldi	r21, 0x00	; 0
    13d0:	ba 01       	movw	r22, r20
    13d2:	01 e0       	ldi	r16, 0x01	; 1
    13d4:	10 e0       	ldi	r17, 0x00	; 0
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	0e 94 13 02 	call	0x426	; 0x426 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    13de:	1b a6       	lds	r17, 0xbb
    13e0:	1c a6       	lds	r17, 0xbc
    13e2:	1d a6       	lds	r17, 0xbd
    13e4:	1e a6       	lds	r17, 0xbe
		handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    13e6:	87 e0       	ldi	r24, 0x07	; 7
    13e8:	8a 83       	std	Y+2, r24	; 0x02
		handle->stateConfVectorPosition = 2;
    13ea:	82 e0       	ldi	r24, 0x02	; 2
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	9c 83       	std	Y+4, r25	; 0x04
    13f0:	8b 83       	std	Y+3, r24	; 0x03
    13f2:	86 c7       	rjmp	.+3852   	; 0x2300 <__stack+0x1201>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state EnterCode */
			handle->stateConfVector[2] = SMO_last_state;
			handle->stateConfVectorPosition = 2;
    13f4:	1c 83       	std	Y+4, r17	; 0x04
    13f6:	0b 83       	std	Y+3, r16	; 0x03
			/* Default enter sequence for state CheckKeyPress1 */
			/* Entry action for state 'CheckKeyPress1'. */
			handle->ifaceKEYPAD.lastkey = 0;
    13f8:	19 86       	std	Y+9, r1	; 0x09
    13fa:	1a 86       	std	Y+10, r1	; 0x0a
    13fc:	1b 86       	std	Y+11, r1	; 0x0b
    13fe:	1c 86       	std	Y+12, r1	; 0x0c
			handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1;
    1400:	7a 82       	std	Y+2, r7	; 0x02
    1402:	55 c7       	rjmp	.+3754   	; 0x22ae <__stack+0x11af>
}

/* The reactions of state CheckKeyPress1. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1(SMO* handle) {
	/* The reactions of state CheckKeyPress1. */
	if (handle->iface.menuId == 0) { 
    1404:	8b a5       	lds	r24, 0x6b
    1406:	9c a5       	lds	r25, 0x6c
    1408:	ad a5       	lds	r26, 0x6d
    140a:	be a5       	lds	r27, 0x6e
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	a1 05       	cpc	r26, r1
    1410:	b1 05       	cpc	r27, r1
    1412:	09 f0       	breq	.+2      	; 0x1416 <__stack+0x317>
    1414:	85 c0       	rjmp	.+266    	; 0x1520 <__stack+0x421>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 2... */
		switch(handle->stateConfVector[ 2 ]) {
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	8d 30       	cpi	r24, 0x0D	; 13
    141a:	e9 f1       	breq	.+122    	; 0x1496 <__stack+0x397>
    141c:	8e 30       	cpi	r24, 0x0E	; 14
    141e:	70 f4       	brcc	.+28     	; 0x143c <__stack+0x33d>
    1420:	8a 30       	cpi	r24, 0x0A	; 10
    1422:	21 f1       	breq	.+72     	; 0x146c <__stack+0x36d>
    1424:	8b 30       	cpi	r24, 0x0B	; 11
    1426:	20 f4       	brcc	.+8      	; 0x1430 <__stack+0x331>
    1428:	89 30       	cpi	r24, 0x09	; 9
    142a:	09 f0       	breq	.+2      	; 0x142e <__stack+0x32f>
    142c:	5d c0       	rjmp	.+186    	; 0x14e8 <__stack+0x3e9>
    142e:	17 c0       	rjmp	.+46     	; 0x145e <__stack+0x35f>
    1430:	8b 30       	cpi	r24, 0x0B	; 11
    1432:	19 f1       	breq	.+70     	; 0x147a <__stack+0x37b>
    1434:	8c 30       	cpi	r24, 0x0C	; 12
    1436:	09 f0       	breq	.+2      	; 0x143a <__stack+0x33b>
    1438:	57 c0       	rjmp	.+174    	; 0x14e8 <__stack+0x3e9>
    143a:	26 c0       	rjmp	.+76     	; 0x1488 <__stack+0x389>
    143c:	80 31       	cpi	r24, 0x10	; 16
    143e:	09 f4       	brne	.+2      	; 0x1442 <__stack+0x343>
    1440:	3f c0       	rjmp	.+126    	; 0x14c0 <__stack+0x3c1>
    1442:	81 31       	cpi	r24, 0x11	; 17
    1444:	30 f4       	brcc	.+12     	; 0x1452 <__stack+0x353>
    1446:	8e 30       	cpi	r24, 0x0E	; 14
    1448:	69 f1       	breq	.+90     	; 0x14a4 <__stack+0x3a5>
    144a:	8f 30       	cpi	r24, 0x0F	; 15
    144c:	09 f0       	breq	.+2      	; 0x1450 <__stack+0x351>
    144e:	4c c0       	rjmp	.+152    	; 0x14e8 <__stack+0x3e9>
    1450:	30 c0       	rjmp	.+96     	; 0x14b2 <__stack+0x3b3>
    1452:	81 31       	cpi	r24, 0x11	; 17
    1454:	e1 f1       	breq	.+120    	; 0x14ce <__stack+0x3cf>
    1456:	82 31       	cpi	r24, 0x12	; 18
    1458:	09 f0       	breq	.+2      	; 0x145c <__stack+0x35d>
    145a:	46 c0       	rjmp	.+140    	; 0x14e8 <__stack+0x3e9>
    145c:	3f c0       	rjmp	.+126    	; 0x14dc <__stack+0x3dd>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[2] = SMO_last_state;
    145e:	85 e1       	ldi	r24, 0x15	; 21
    1460:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1462:	82 e0       	ldi	r24, 0x02	; 2
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	9c 83       	std	Y+4, r25	; 0x04
    1468:	8b 83       	std	Y+3, r24	; 0x03
    146a:	3e c0       	rjmp	.+124    	; 0x14e8 <__stack+0x3e9>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[2] = SMO_last_state;
    146c:	85 e1       	ldi	r24, 0x15	; 21
    146e:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1470:	82 e0       	ldi	r24, 0x02	; 2
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	9c 83       	std	Y+4, r25	; 0x04
    1476:	8b 83       	std	Y+3, r24	; 0x03
    1478:	37 c0       	rjmp	.+110    	; 0x14e8 <__stack+0x3e9>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[2] = SMO_last_state;
    147a:	85 e1       	ldi	r24, 0x15	; 21
    147c:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    147e:	82 e0       	ldi	r24, 0x02	; 2
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	9c 83       	std	Y+4, r25	; 0x04
    1484:	8b 83       	std	Y+3, r24	; 0x03
    1486:	30 c0       	rjmp	.+96     	; 0x14e8 <__stack+0x3e9>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[2] = SMO_last_state;
    1488:	85 e1       	ldi	r24, 0x15	; 21
    148a:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    148c:	82 e0       	ldi	r24, 0x02	; 2
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	9c 83       	std	Y+4, r25	; 0x04
    1492:	8b 83       	std	Y+3, r24	; 0x03
    1494:	29 c0       	rjmp	.+82     	; 0x14e8 <__stack+0x3e9>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[2] = SMO_last_state;
    1496:	85 e1       	ldi	r24, 0x15	; 21
    1498:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    149a:	82 e0       	ldi	r24, 0x02	; 2
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	9c 83       	std	Y+4, r25	; 0x04
    14a0:	8b 83       	std	Y+3, r24	; 0x03
    14a2:	22 c0       	rjmp	.+68     	; 0x14e8 <__stack+0x3e9>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[2] = SMO_last_state;
    14a4:	85 e1       	ldi	r24, 0x15	; 21
    14a6:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    14a8:	82 e0       	ldi	r24, 0x02	; 2
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	9c 83       	std	Y+4, r25	; 0x04
    14ae:	8b 83       	std	Y+3, r24	; 0x03
    14b0:	1b c0       	rjmp	.+54     	; 0x14e8 <__stack+0x3e9>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0 : {
				/* Default exit sequence for state CheckAmount0 */
				handle->stateConfVector[2] = SMO_last_state;
    14b2:	85 e1       	ldi	r24, 0x15	; 21
    14b4:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    14b6:	82 e0       	ldi	r24, 0x02	; 2
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	9c 83       	std	Y+4, r25	; 0x04
    14bc:	8b 83       	std	Y+3, r24	; 0x03
    14be:	14 c0       	rjmp	.+40     	; 0x14e8 <__stack+0x3e9>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[2] = SMO_last_state;
    14c0:	85 e1       	ldi	r24, 0x15	; 21
    14c2:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    14c4:	82 e0       	ldi	r24, 0x02	; 2
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	9c 83       	std	Y+4, r25	; 0x04
    14ca:	8b 83       	std	Y+3, r24	; 0x03
    14cc:	0d c0       	rjmp	.+26     	; 0x14e8 <__stack+0x3e9>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_SendData : {
				/* Default exit sequence for state SendData */
				handle->stateConfVector[2] = SMO_last_state;
    14ce:	85 e1       	ldi	r24, 0x15	; 21
    14d0:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    14d2:	82 e0       	ldi	r24, 0x02	; 2
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	9c 83       	std	Y+4, r25	; 0x04
    14d8:	8b 83       	std	Y+3, r24	; 0x03
    14da:	06 c0       	rjmp	.+12     	; 0x14e8 <__stack+0x3e9>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[2] = SMO_last_state;
    14dc:	85 e1       	ldi	r24, 0x15	; 21
    14de:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    14e0:	82 e0       	ldi	r24, 0x02	; 2
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	9c 83       	std	Y+4, r25	; 0x04
    14e6:	8b 83       	std	Y+3, r24	; 0x03
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    14e8:	0e 94 43 02 	call	0x486	; 0x486 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    14ec:	8e ef       	ldi	r24, 0xFE	; 254
    14ee:	91 e0       	ldi	r25, 0x01	; 1
    14f0:	0e 94 10 02 	call	0x420	; 0x420 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    14f4:	8c e0       	ldi	r24, 0x0C	; 12
    14f6:	92 e0       	ldi	r25, 0x02	; 2
    14f8:	40 e0       	ldi	r20, 0x00	; 0
    14fa:	50 e0       	ldi	r21, 0x00	; 0
    14fc:	ba 01       	movw	r22, r20
    14fe:	01 e0       	ldi	r16, 0x01	; 1
    1500:	10 e0       	ldi	r17, 0x00	; 0
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	0e 94 13 02 	call	0x426	; 0x426 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    150a:	1b a6       	lds	r17, 0xbb
    150c:	1c a6       	lds	r17, 0xbc
    150e:	1d a6       	lds	r17, 0xbd
    1510:	1e a6       	lds	r17, 0xbe
		handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1512:	87 e0       	ldi	r24, 0x07	; 7
    1514:	8a 83       	std	Y+2, r24	; 0x02
		handle->stateConfVectorPosition = 2;
    1516:	82 e0       	ldi	r24, 0x02	; 2
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	9c 83       	std	Y+4, r25	; 0x04
    151c:	8b 83       	std	Y+3, r24	; 0x03
    151e:	f0 c6       	rjmp	.+3552   	; 0x2300 <__stack+0x1201>
	}  else {
		if (handle->ifaceDISH.pos < 3 && handle->ifaceKEYPAD.lastkey <= 9 && handle->ifaceKEYPAD.lastkey >= 1 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1520:	8e a1       	lds	r24, 0x4e
    1522:	9f a1       	lds	r25, 0x4f
    1524:	a8 a5       	lds	r26, 0x68
    1526:	b9 a5       	lds	r27, 0x69
    1528:	83 30       	cpi	r24, 0x03	; 3
    152a:	91 05       	cpc	r25, r1
    152c:	a1 05       	cpc	r26, r1
    152e:	b1 05       	cpc	r27, r1
    1530:	0c f0       	brlt	.+2      	; 0x1534 <__stack+0x435>
    1532:	69 c0       	rjmp	.+210    	; 0x1606 <__stack+0x507>
    1534:	c9 84       	ldd	r12, Y+9	; 0x09
    1536:	da 84       	ldd	r13, Y+10	; 0x0a
    1538:	eb 84       	ldd	r14, Y+11	; 0x0b
    153a:	fc 84       	ldd	r15, Y+12	; 0x0c
    153c:	fa e0       	ldi	r31, 0x0A	; 10
    153e:	cf 16       	cp	r12, r31
    1540:	d1 04       	cpc	r13, r1
    1542:	e1 04       	cpc	r14, r1
    1544:	f1 04       	cpc	r15, r1
    1546:	0c f0       	brlt	.+2      	; 0x154a <__stack+0x44b>
    1548:	4c c0       	rjmp	.+152    	; 0x15e2 <__stack+0x4e3>
    154a:	1c 14       	cp	r1, r12
    154c:	1d 04       	cpc	r1, r13
    154e:	1e 04       	cpc	r1, r14
    1550:	1f 04       	cpc	r1, r15
    1552:	0c f0       	brlt	.+2      	; 0x1556 <__stack+0x457>
    1554:	46 c0       	rjmp	.+140    	; 0x15e2 <__stack+0x4e3>
    1556:	2e 85       	ldd	r18, Y+14	; 0x0e
    1558:	22 23       	and	r18, r18
    155a:	09 f4       	brne	.+2      	; 0x155e <__stack+0x45f>
    155c:	42 c0       	rjmp	.+132    	; 0x15e2 <__stack+0x4e3>
			/* Default exit sequence for state CheckKeyPress1 */
			handle->stateConfVector[2] = SMO_last_state;
    155e:	25 e1       	ldi	r18, 0x15	; 21
    1560:	2a 83       	std	Y+2, r18	; 0x02
			handle->stateConfVectorPosition = 2;
    1562:	88 24       	eor	r8, r8
    1564:	99 24       	eor	r9, r9
    1566:	68 94       	set
    1568:	81 f8       	bld	r8, 1
    156a:	9c 82       	std	Y+4, r9	; 0x04
    156c:	8b 82       	std	Y+3, r8	; 0x03
			/* Default enter sequence for state EnterCode */
			/* Entry action for state 'EnterCode'. */
			sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    156e:	9c 01       	movw	r18, r24
    1570:	ad 01       	movw	r20, r26
    1572:	22 0f       	add	r18, r18
    1574:	33 1f       	adc	r19, r19
    1576:	44 1f       	adc	r20, r20
    1578:	55 1f       	adc	r21, r21
    157a:	c7 01       	movw	r24, r14
    157c:	b6 01       	movw	r22, r12
    157e:	ee 24       	eor	r14, r14
    1580:	ff 24       	eor	r15, r15
    1582:	87 01       	movw	r16, r14
    1584:	e3 94       	inc	r14
    1586:	aa 24       	eor	r10, r10
    1588:	bb 24       	eor	r11, r11
    158a:	65 01       	movw	r12, r10
    158c:	a3 94       	inc	r10
    158e:	0e 94 22 02 	call	0x444	; 0x444 <sMOIfaceLCD_writeNumberXY>
			handle->ifaceDISH.pos += 1;
    1592:	8e a1       	lds	r24, 0x4e
    1594:	9f a1       	lds	r25, 0x4f
    1596:	a8 a5       	lds	r26, 0x68
    1598:	b9 a5       	lds	r27, 0x69
    159a:	01 96       	adiw	r24, 0x01	; 1
    159c:	a1 1d       	adc	r26, r1
    159e:	b1 1d       	adc	r27, r1
    15a0:	8e a3       	lds	r24, 0x5e
    15a2:	9f a3       	lds	r25, 0x5f
    15a4:	a8 a7       	lds	r26, 0x78
    15a6:	b9 a7       	lds	r27, 0x79
			handle->ifaceDISH.ID = handle->ifaceDISH.ID * 10 + handle->ifaceKEYPAD.lastkey;
    15a8:	6e 8d       	ldd	r22, Y+30	; 0x1e
    15aa:	7f 8d       	ldd	r23, Y+31	; 0x1f
    15ac:	88 a1       	lds	r24, 0x48
    15ae:	99 a1       	lds	r25, 0x49
    15b0:	2a e0       	ldi	r18, 0x0A	; 10
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	40 e0       	ldi	r20, 0x00	; 0
    15b6:	50 e0       	ldi	r21, 0x00	; 0
    15b8:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__mulsi3>
    15bc:	ab 01       	movw	r20, r22
    15be:	bc 01       	movw	r22, r24
    15c0:	89 85       	ldd	r24, Y+9	; 0x09
    15c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c4:	ab 85       	ldd	r26, Y+11	; 0x0b
    15c6:	bc 85       	ldd	r27, Y+12	; 0x0c
    15c8:	84 0f       	add	r24, r20
    15ca:	95 1f       	adc	r25, r21
    15cc:	a6 1f       	adc	r26, r22
    15ce:	b7 1f       	adc	r27, r23
    15d0:	8e 8f       	std	Y+30, r24	; 0x1e
    15d2:	9f 8f       	std	Y+31, r25	; 0x1f
    15d4:	a8 a3       	lds	r26, 0x58
    15d6:	b9 a3       	lds	r27, 0x59
			handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode;
    15d8:	8a e0       	ldi	r24, 0x0A	; 10
    15da:	8a 83       	std	Y+2, r24	; 0x02
			handle->stateConfVectorPosition = 2;
    15dc:	9c 82       	std	Y+4, r9	; 0x04
    15de:	8b 82       	std	Y+3, r8	; 0x03
    15e0:	8f c6       	rjmp	.+3358   	; 0x2300 <__stack+0x1201>
		}  else {
			if (handle->ifaceDISH.pos < 3 && handle->ifaceKEYPAD.lastkey == 10 && handle->ifaceKEYPAD.key_pressed_raised) { 
    15e2:	2a e0       	ldi	r18, 0x0A	; 10
    15e4:	c2 16       	cp	r12, r18
    15e6:	d1 04       	cpc	r13, r1
    15e8:	e1 04       	cpc	r14, r1
    15ea:	f1 04       	cpc	r15, r1
    15ec:	61 f4       	brne	.+24     	; 0x1606 <__stack+0x507>
    15ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    15f0:	88 23       	and	r24, r24
    15f2:	49 f0       	breq	.+18     	; 0x1606 <__stack+0x507>
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[2] = SMO_last_state;
				handle->stateConfVectorPosition = 2;
    15f4:	1c 83       	std	Y+4, r17	; 0x04
    15f6:	0b 83       	std	Y+3, r16	; 0x03
				/* Default enter sequence for state CheckCode0 */
				/* Entry action for state 'CheckCode0'. */
				handle->ifaceKEYPAD.lastkey = 0;
    15f8:	19 86       	std	Y+9, r1	; 0x09
    15fa:	1a 86       	std	Y+10, r1	; 0x0a
    15fc:	1b 86       	std	Y+11, r1	; 0x0b
    15fe:	1c 86       	std	Y+12, r1	; 0x0c
				handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0;
    1600:	3c e0       	ldi	r19, 0x0C	; 12
    1602:	3a 83       	std	Y+2, r19	; 0x02
    1604:	54 c6       	rjmp	.+3240   	; 0x22ae <__stack+0x11af>
				handle->stateConfVectorPosition = 2;
			}  else {
				if (handle->ifaceKEYPAD.lastkey == 12 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1606:	89 85       	ldd	r24, Y+9	; 0x09
    1608:	9a 85       	ldd	r25, Y+10	; 0x0a
    160a:	ab 85       	ldd	r26, Y+11	; 0x0b
    160c:	bc 85       	ldd	r27, Y+12	; 0x0c
    160e:	8c 30       	cpi	r24, 0x0C	; 12
    1610:	91 05       	cpc	r25, r1
    1612:	a1 05       	cpc	r26, r1
    1614:	b1 05       	cpc	r27, r1
    1616:	49 f5       	brne	.+82     	; 0x166a <__stack+0x56b>
    1618:	2e 85       	ldd	r18, Y+14	; 0x0e
    161a:	22 23       	and	r18, r18
    161c:	31 f1       	breq	.+76     	; 0x166a <__stack+0x56b>
					/* Default exit sequence for state CheckKeyPress1 */
					handle->stateConfVector[2] = SMO_last_state;
    161e:	85 e1       	ldi	r24, 0x15	; 21
    1620:	8a 83       	std	Y+2, r24	; 0x02
					handle->stateConfVectorPosition = 2;
    1622:	ee 24       	eor	r14, r14
    1624:	ff 24       	eor	r15, r15
    1626:	68 94       	set
    1628:	e1 f8       	bld	r14, 1
    162a:	fc 82       	std	Y+4, r15	; 0x04
    162c:	eb 82       	std	Y+3, r14	; 0x03
					/* Default enter sequence for state ShowCode */
					/* Entry action for state 'ShowCode'. */
					sMOIfaceLCD_clear();
    162e:	0e 94 43 02 	call	0x486	; 0x486 <sMOIfaceLCD_clear>
					sMOIfaceLCD_writeString("Nhap ma mon an:");
    1632:	88 e1       	ldi	r24, 0x18	; 24
    1634:	92 e0       	ldi	r25, 0x02	; 2
    1636:	0e 94 10 02 	call	0x420	; 0x420 <sMOIfaceLCD_writeString>
					sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    163a:	88 e2       	ldi	r24, 0x28	; 40
    163c:	92 e0       	ldi	r25, 0x02	; 2
    163e:	40 e0       	ldi	r20, 0x00	; 0
    1640:	50 e0       	ldi	r21, 0x00	; 0
    1642:	ba 01       	movw	r22, r20
    1644:	01 e0       	ldi	r16, 0x01	; 1
    1646:	10 e0       	ldi	r17, 0x00	; 0
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	0e 94 13 02 	call	0x426	; 0x426 <sMOIfaceLCD_writeStringXY>
					handle->ifaceDISH.pos = 0;
    1650:	1e a2       	lds	r17, 0x9e
    1652:	1f a2       	lds	r17, 0x9f
    1654:	18 a6       	lds	r17, 0xb8
    1656:	19 a6       	lds	r17, 0xb9
					handle->ifaceDISH.ID = 0;
    1658:	1e 8e       	std	Y+30, r1	; 0x1e
    165a:	1f 8e       	std	Y+31, r1	; 0x1f
    165c:	18 a2       	lds	r17, 0x98
    165e:	19 a2       	lds	r17, 0x99
					handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    1660:	89 e0       	ldi	r24, 0x09	; 9
    1662:	8a 83       	std	Y+2, r24	; 0x02
					handle->stateConfVectorPosition = 2;
    1664:	fc 82       	std	Y+4, r15	; 0x04
    1666:	eb 82       	std	Y+3, r14	; 0x03
    1668:	4b c6       	rjmp	.+3222   	; 0x2300 <__stack+0x1201>
				}  else {
					if (handle->ifaceKEYPAD.lastkey == 11 && handle->ifaceKEYPAD.key_pressed_raised) { 
    166a:	8b 30       	cpi	r24, 0x0B	; 11
    166c:	91 05       	cpc	r25, r1
    166e:	a1 05       	cpc	r26, r1
    1670:	b1 05       	cpc	r27, r1
    1672:	49 f5       	brne	.+82     	; 0x16c6 <__stack+0x5c7>
    1674:	2e 85       	ldd	r18, Y+14	; 0x0e
    1676:	22 23       	and	r18, r18
    1678:	31 f1       	breq	.+76     	; 0x16c6 <__stack+0x5c7>
						/* Default exit sequence for state CheckKeyPress1 */
						handle->stateConfVector[2] = SMO_last_state;
    167a:	85 e1       	ldi	r24, 0x15	; 21
    167c:	8a 83       	std	Y+2, r24	; 0x02
						handle->stateConfVectorPosition = 2;
    167e:	ee 24       	eor	r14, r14
    1680:	ff 24       	eor	r15, r15
    1682:	68 94       	set
    1684:	e1 f8       	bld	r14, 1
    1686:	fc 82       	std	Y+4, r15	; 0x04
    1688:	eb 82       	std	Y+3, r14	; 0x03
						/* Default enter sequence for state ShowAmount */
						/* Entry action for state 'ShowAmount'. */
						sMOIfaceLCD_clear();
    168a:	0e 94 43 02 	call	0x486	; 0x486 <sMOIfaceLCD_clear>
						sMOIfaceLCD_writeString("Nhap so luong:");
    168e:	8e e2       	ldi	r24, 0x2E	; 46
    1690:	92 e0       	ldi	r25, 0x02	; 2
    1692:	0e 94 10 02 	call	0x420	; 0x420 <sMOIfaceLCD_writeString>
						sMOIfaceLCD_writeStringXY("_ _", 0, 1);
    1696:	8d e3       	ldi	r24, 0x3D	; 61
    1698:	92 e0       	ldi	r25, 0x02	; 2
    169a:	40 e0       	ldi	r20, 0x00	; 0
    169c:	50 e0       	ldi	r21, 0x00	; 0
    169e:	ba 01       	movw	r22, r20
    16a0:	01 e0       	ldi	r16, 0x01	; 1
    16a2:	10 e0       	ldi	r17, 0x00	; 0
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	0e 94 13 02 	call	0x426	; 0x426 <sMOIfaceLCD_writeStringXY>
						handle->ifaceDISH.pos = 0;
    16ac:	1e a2       	lds	r17, 0x9e
    16ae:	1f a2       	lds	r17, 0x9f
    16b0:	18 a6       	lds	r17, 0xb8
    16b2:	19 a6       	lds	r17, 0xb9
						handle->ifaceDISH.amount = 0;
    16b4:	1a a2       	lds	r17, 0x9a
    16b6:	1b a2       	lds	r17, 0x9b
    16b8:	1c a2       	lds	r17, 0x9c
    16ba:	1d a2       	lds	r17, 0x9d
						handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount;
    16bc:	8d e0       	ldi	r24, 0x0D	; 13
    16be:	8a 83       	std	Y+2, r24	; 0x02
						handle->stateConfVectorPosition = 2;
    16c0:	fc 82       	std	Y+4, r15	; 0x04
    16c2:	eb 82       	std	Y+3, r14	; 0x03
    16c4:	1d c6       	rjmp	.+3130   	; 0x2300 <__stack+0x1201>
					}  else {
						if (handle->ifaceKEYPAD.lastkey == 16 && handle->ifaceKEYPAD.key_pressed_raised) { 
    16c6:	80 31       	cpi	r24, 0x10	; 16
    16c8:	91 05       	cpc	r25, r1
    16ca:	a1 05       	cpc	r26, r1
    16cc:	b1 05       	cpc	r27, r1
    16ce:	09 f0       	breq	.+2      	; 0x16d2 <__stack+0x5d3>
    16d0:	ee c5       	rjmp	.+3036   	; 0x22ae <__stack+0x11af>
    16d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    16d4:	88 23       	and	r24, r24
    16d6:	09 f4       	brne	.+2      	; 0x16da <__stack+0x5db>
    16d8:	ea c5       	rjmp	.+3028   	; 0x22ae <__stack+0x11af>
							/* Default exit sequence for state CheckKeyPress1 */
							handle->stateConfVector[2] = SMO_last_state;
							handle->stateConfVectorPosition = 2;
    16da:	1c 83       	std	Y+4, r17	; 0x04
    16dc:	0b 83       	std	Y+3, r16	; 0x03
							handle->iface.menuId = 0;
    16de:	1b a6       	lds	r17, 0xbb
    16e0:	1c a6       	lds	r17, 0xbc
    16e2:	1d a6       	lds	r17, 0xbd
    16e4:	1e a6       	lds	r17, 0xbe
							/* Default enter sequence for state null */
							handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_;
    16e6:	82 e1       	ldi	r24, 0x12	; 18
    16e8:	8a 83       	std	Y+2, r24	; 0x02
    16ea:	e1 c5       	rjmp	.+3010   	; 0x22ae <__stack+0x11af>
}

/* The reactions of state CheckCode0. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0(SMO* handle) {
	/* The reactions of state CheckCode0. */
	if (handle->iface.menuId == 0) { 
    16ec:	8b a5       	lds	r24, 0x6b
    16ee:	9c a5       	lds	r25, 0x6c
    16f0:	ad a5       	lds	r26, 0x6d
    16f2:	be a5       	lds	r27, 0x6e
    16f4:	00 97       	sbiw	r24, 0x00	; 0
    16f6:	a1 05       	cpc	r26, r1
    16f8:	b1 05       	cpc	r27, r1
    16fa:	09 f0       	breq	.+2      	; 0x16fe <__stack+0x5ff>
    16fc:	85 c0       	rjmp	.+266    	; 0x1808 <__stack+0x709>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 2... */
		switch(handle->stateConfVector[ 2 ]) {
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	8d 30       	cpi	r24, 0x0D	; 13
    1702:	e9 f1       	breq	.+122    	; 0x177e <__stack+0x67f>
    1704:	8e 30       	cpi	r24, 0x0E	; 14
    1706:	70 f4       	brcc	.+28     	; 0x1724 <__stack+0x625>
    1708:	8a 30       	cpi	r24, 0x0A	; 10
    170a:	21 f1       	breq	.+72     	; 0x1754 <__stack+0x655>
    170c:	8b 30       	cpi	r24, 0x0B	; 11
    170e:	20 f4       	brcc	.+8      	; 0x1718 <__stack+0x619>
    1710:	89 30       	cpi	r24, 0x09	; 9
    1712:	09 f0       	breq	.+2      	; 0x1716 <__stack+0x617>
    1714:	5d c0       	rjmp	.+186    	; 0x17d0 <__stack+0x6d1>
    1716:	17 c0       	rjmp	.+46     	; 0x1746 <__stack+0x647>
    1718:	8b 30       	cpi	r24, 0x0B	; 11
    171a:	19 f1       	breq	.+70     	; 0x1762 <__stack+0x663>
    171c:	8c 30       	cpi	r24, 0x0C	; 12
    171e:	09 f0       	breq	.+2      	; 0x1722 <__stack+0x623>
    1720:	57 c0       	rjmp	.+174    	; 0x17d0 <__stack+0x6d1>
    1722:	26 c0       	rjmp	.+76     	; 0x1770 <__stack+0x671>
    1724:	80 31       	cpi	r24, 0x10	; 16
    1726:	09 f4       	brne	.+2      	; 0x172a <__stack+0x62b>
    1728:	3f c0       	rjmp	.+126    	; 0x17a8 <__stack+0x6a9>
    172a:	81 31       	cpi	r24, 0x11	; 17
    172c:	30 f4       	brcc	.+12     	; 0x173a <__stack+0x63b>
    172e:	8e 30       	cpi	r24, 0x0E	; 14
    1730:	69 f1       	breq	.+90     	; 0x178c <__stack+0x68d>
    1732:	8f 30       	cpi	r24, 0x0F	; 15
    1734:	09 f0       	breq	.+2      	; 0x1738 <__stack+0x639>
    1736:	4c c0       	rjmp	.+152    	; 0x17d0 <__stack+0x6d1>
    1738:	30 c0       	rjmp	.+96     	; 0x179a <__stack+0x69b>
    173a:	81 31       	cpi	r24, 0x11	; 17
    173c:	e1 f1       	breq	.+120    	; 0x17b6 <__stack+0x6b7>
    173e:	82 31       	cpi	r24, 0x12	; 18
    1740:	09 f0       	breq	.+2      	; 0x1744 <__stack+0x645>
    1742:	46 c0       	rjmp	.+140    	; 0x17d0 <__stack+0x6d1>
    1744:	3f c0       	rjmp	.+126    	; 0x17c4 <__stack+0x6c5>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[2] = SMO_last_state;
    1746:	85 e1       	ldi	r24, 0x15	; 21
    1748:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    174a:	82 e0       	ldi	r24, 0x02	; 2
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	9c 83       	std	Y+4, r25	; 0x04
    1750:	8b 83       	std	Y+3, r24	; 0x03
    1752:	3e c0       	rjmp	.+124    	; 0x17d0 <__stack+0x6d1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[2] = SMO_last_state;
    1754:	85 e1       	ldi	r24, 0x15	; 21
    1756:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1758:	82 e0       	ldi	r24, 0x02	; 2
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	9c 83       	std	Y+4, r25	; 0x04
    175e:	8b 83       	std	Y+3, r24	; 0x03
    1760:	37 c0       	rjmp	.+110    	; 0x17d0 <__stack+0x6d1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[2] = SMO_last_state;
    1762:	85 e1       	ldi	r24, 0x15	; 21
    1764:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1766:	82 e0       	ldi	r24, 0x02	; 2
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	9c 83       	std	Y+4, r25	; 0x04
    176c:	8b 83       	std	Y+3, r24	; 0x03
    176e:	30 c0       	rjmp	.+96     	; 0x17d0 <__stack+0x6d1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[2] = SMO_last_state;
    1770:	85 e1       	ldi	r24, 0x15	; 21
    1772:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1774:	82 e0       	ldi	r24, 0x02	; 2
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	9c 83       	std	Y+4, r25	; 0x04
    177a:	8b 83       	std	Y+3, r24	; 0x03
    177c:	29 c0       	rjmp	.+82     	; 0x17d0 <__stack+0x6d1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[2] = SMO_last_state;
    177e:	85 e1       	ldi	r24, 0x15	; 21
    1780:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1782:	82 e0       	ldi	r24, 0x02	; 2
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	9c 83       	std	Y+4, r25	; 0x04
    1788:	8b 83       	std	Y+3, r24	; 0x03
    178a:	22 c0       	rjmp	.+68     	; 0x17d0 <__stack+0x6d1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[2] = SMO_last_state;
    178c:	85 e1       	ldi	r24, 0x15	; 21
    178e:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1790:	82 e0       	ldi	r24, 0x02	; 2
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	9c 83       	std	Y+4, r25	; 0x04
    1796:	8b 83       	std	Y+3, r24	; 0x03
    1798:	1b c0       	rjmp	.+54     	; 0x17d0 <__stack+0x6d1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0 : {
				/* Default exit sequence for state CheckAmount0 */
				handle->stateConfVector[2] = SMO_last_state;
    179a:	85 e1       	ldi	r24, 0x15	; 21
    179c:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    179e:	82 e0       	ldi	r24, 0x02	; 2
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	9c 83       	std	Y+4, r25	; 0x04
    17a4:	8b 83       	std	Y+3, r24	; 0x03
    17a6:	14 c0       	rjmp	.+40     	; 0x17d0 <__stack+0x6d1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[2] = SMO_last_state;
    17a8:	85 e1       	ldi	r24, 0x15	; 21
    17aa:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    17ac:	82 e0       	ldi	r24, 0x02	; 2
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	9c 83       	std	Y+4, r25	; 0x04
    17b2:	8b 83       	std	Y+3, r24	; 0x03
    17b4:	0d c0       	rjmp	.+26     	; 0x17d0 <__stack+0x6d1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_SendData : {
				/* Default exit sequence for state SendData */
				handle->stateConfVector[2] = SMO_last_state;
    17b6:	85 e1       	ldi	r24, 0x15	; 21
    17b8:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    17ba:	82 e0       	ldi	r24, 0x02	; 2
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	9c 83       	std	Y+4, r25	; 0x04
    17c0:	8b 83       	std	Y+3, r24	; 0x03
    17c2:	06 c0       	rjmp	.+12     	; 0x17d0 <__stack+0x6d1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[2] = SMO_last_state;
    17c4:	85 e1       	ldi	r24, 0x15	; 21
    17c6:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    17c8:	82 e0       	ldi	r24, 0x02	; 2
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	9c 83       	std	Y+4, r25	; 0x04
    17ce:	8b 83       	std	Y+3, r24	; 0x03
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    17d0:	0e 94 43 02 	call	0x486	; 0x486 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    17d4:	8e ef       	ldi	r24, 0xFE	; 254
    17d6:	91 e0       	ldi	r25, 0x01	; 1
    17d8:	0e 94 10 02 	call	0x420	; 0x420 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    17dc:	8c e0       	ldi	r24, 0x0C	; 12
    17de:	92 e0       	ldi	r25, 0x02	; 2
    17e0:	40 e0       	ldi	r20, 0x00	; 0
    17e2:	50 e0       	ldi	r21, 0x00	; 0
    17e4:	ba 01       	movw	r22, r20
    17e6:	01 e0       	ldi	r16, 0x01	; 1
    17e8:	10 e0       	ldi	r17, 0x00	; 0
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	0e 94 13 02 	call	0x426	; 0x426 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    17f2:	1b a6       	lds	r17, 0xbb
    17f4:	1c a6       	lds	r17, 0xbc
    17f6:	1d a6       	lds	r17, 0xbd
    17f8:	1e a6       	lds	r17, 0xbe
		handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    17fa:	87 e0       	ldi	r24, 0x07	; 7
    17fc:	8a 83       	std	Y+2, r24	; 0x02
		handle->stateConfVectorPosition = 2;
    17fe:	82 e0       	ldi	r24, 0x02	; 2
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	9c 83       	std	Y+4, r25	; 0x04
    1804:	8b 83       	std	Y+3, r24	; 0x03
    1806:	7c c5       	rjmp	.+2808   	; 0x2300 <__stack+0x1201>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state CheckCode0 */
			handle->stateConfVector[2] = SMO_last_state;
    1808:	85 e1       	ldi	r24, 0x15	; 21
    180a:	8a 83       	std	Y+2, r24	; 0x02
			handle->stateConfVectorPosition = 2;
    180c:	88 24       	eor	r8, r8
    180e:	99 24       	eor	r9, r9
    1810:	68 94       	set
    1812:	81 f8       	bld	r8, 1
    1814:	9c 82       	std	Y+4, r9	; 0x04
    1816:	8b 82       	std	Y+3, r8	; 0x03
			/* Default enter sequence for state EnterCode */
			/* Entry action for state 'EnterCode'. */
			sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    1818:	c9 84       	ldd	r12, Y+9	; 0x09
    181a:	da 84       	ldd	r13, Y+10	; 0x0a
    181c:	eb 84       	ldd	r14, Y+11	; 0x0b
    181e:	fc 84       	ldd	r15, Y+12	; 0x0c
    1820:	8e a1       	lds	r24, 0x4e
    1822:	9f a1       	lds	r25, 0x4f
    1824:	a8 a5       	lds	r26, 0x68
    1826:	b9 a5       	lds	r27, 0x69
    1828:	9c 01       	movw	r18, r24
    182a:	ad 01       	movw	r20, r26
    182c:	22 0f       	add	r18, r18
    182e:	33 1f       	adc	r19, r19
    1830:	44 1f       	adc	r20, r20
    1832:	55 1f       	adc	r21, r21
    1834:	c7 01       	movw	r24, r14
    1836:	b6 01       	movw	r22, r12
    1838:	ee 24       	eor	r14, r14
    183a:	ff 24       	eor	r15, r15
    183c:	87 01       	movw	r16, r14
    183e:	e3 94       	inc	r14
    1840:	aa 24       	eor	r10, r10
    1842:	bb 24       	eor	r11, r11
    1844:	65 01       	movw	r12, r10
    1846:	a3 94       	inc	r10
    1848:	0e 94 22 02 	call	0x444	; 0x444 <sMOIfaceLCD_writeNumberXY>
			handle->ifaceDISH.pos += 1;
    184c:	8e a1       	lds	r24, 0x4e
    184e:	9f a1       	lds	r25, 0x4f
    1850:	a8 a5       	lds	r26, 0x68
    1852:	b9 a5       	lds	r27, 0x69
    1854:	01 96       	adiw	r24, 0x01	; 1
    1856:	a1 1d       	adc	r26, r1
    1858:	b1 1d       	adc	r27, r1
    185a:	8e a3       	lds	r24, 0x5e
    185c:	9f a3       	lds	r25, 0x5f
    185e:	a8 a7       	lds	r26, 0x78
    1860:	b9 a7       	lds	r27, 0x79
			handle->ifaceDISH.ID = handle->ifaceDISH.ID * 10 + handle->ifaceKEYPAD.lastkey;
    1862:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1864:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1866:	88 a1       	lds	r24, 0x48
    1868:	99 a1       	lds	r25, 0x49
    186a:	2a e0       	ldi	r18, 0x0A	; 10
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e0       	ldi	r20, 0x00	; 0
    1870:	50 e0       	ldi	r21, 0x00	; 0
    1872:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__mulsi3>
    1876:	ab 01       	movw	r20, r22
    1878:	bc 01       	movw	r22, r24
    187a:	89 85       	ldd	r24, Y+9	; 0x09
    187c:	9a 85       	ldd	r25, Y+10	; 0x0a
    187e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1880:	bc 85       	ldd	r27, Y+12	; 0x0c
    1882:	84 0f       	add	r24, r20
    1884:	95 1f       	adc	r25, r21
    1886:	a6 1f       	adc	r26, r22
    1888:	b7 1f       	adc	r27, r23
    188a:	8e 8f       	std	Y+30, r24	; 0x1e
    188c:	9f 8f       	std	Y+31, r25	; 0x1f
    188e:	a8 a3       	lds	r26, 0x58
    1890:	b9 a3       	lds	r27, 0x59
			handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode;
    1892:	8a e0       	ldi	r24, 0x0A	; 10
    1894:	8a 83       	std	Y+2, r24	; 0x02
			handle->stateConfVectorPosition = 2;
    1896:	9c 82       	std	Y+4, r9	; 0x04
    1898:	8b 82       	std	Y+3, r8	; 0x03
    189a:	32 c5       	rjmp	.+2660   	; 0x2300 <__stack+0x1201>
}

/* The reactions of state ShowAmount. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount(SMO* handle) {
	/* The reactions of state ShowAmount. */
	if (handle->iface.menuId == 0) { 
    189c:	8b a5       	lds	r24, 0x6b
    189e:	9c a5       	lds	r25, 0x6c
    18a0:	ad a5       	lds	r26, 0x6d
    18a2:	be a5       	lds	r27, 0x6e
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	a1 05       	cpc	r26, r1
    18a8:	b1 05       	cpc	r27, r1
    18aa:	09 f0       	breq	.+2      	; 0x18ae <__stack+0x7af>
    18ac:	85 c0       	rjmp	.+266    	; 0x19b8 <__stack+0x8b9>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 2... */
		switch(handle->stateConfVector[ 2 ]) {
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	8d 30       	cpi	r24, 0x0D	; 13
    18b2:	e9 f1       	breq	.+122    	; 0x192e <__stack+0x82f>
    18b4:	8e 30       	cpi	r24, 0x0E	; 14
    18b6:	70 f4       	brcc	.+28     	; 0x18d4 <__stack+0x7d5>
    18b8:	8a 30       	cpi	r24, 0x0A	; 10
    18ba:	21 f1       	breq	.+72     	; 0x1904 <__stack+0x805>
    18bc:	8b 30       	cpi	r24, 0x0B	; 11
    18be:	20 f4       	brcc	.+8      	; 0x18c8 <__stack+0x7c9>
    18c0:	89 30       	cpi	r24, 0x09	; 9
    18c2:	09 f0       	breq	.+2      	; 0x18c6 <__stack+0x7c7>
    18c4:	5d c0       	rjmp	.+186    	; 0x1980 <__stack+0x881>
    18c6:	17 c0       	rjmp	.+46     	; 0x18f6 <__stack+0x7f7>
    18c8:	8b 30       	cpi	r24, 0x0B	; 11
    18ca:	19 f1       	breq	.+70     	; 0x1912 <__stack+0x813>
    18cc:	8c 30       	cpi	r24, 0x0C	; 12
    18ce:	09 f0       	breq	.+2      	; 0x18d2 <__stack+0x7d3>
    18d0:	57 c0       	rjmp	.+174    	; 0x1980 <__stack+0x881>
    18d2:	26 c0       	rjmp	.+76     	; 0x1920 <__stack+0x821>
    18d4:	80 31       	cpi	r24, 0x10	; 16
    18d6:	09 f4       	brne	.+2      	; 0x18da <__stack+0x7db>
    18d8:	3f c0       	rjmp	.+126    	; 0x1958 <__stack+0x859>
    18da:	81 31       	cpi	r24, 0x11	; 17
    18dc:	30 f4       	brcc	.+12     	; 0x18ea <__stack+0x7eb>
    18de:	8e 30       	cpi	r24, 0x0E	; 14
    18e0:	69 f1       	breq	.+90     	; 0x193c <__stack+0x83d>
    18e2:	8f 30       	cpi	r24, 0x0F	; 15
    18e4:	09 f0       	breq	.+2      	; 0x18e8 <__stack+0x7e9>
    18e6:	4c c0       	rjmp	.+152    	; 0x1980 <__stack+0x881>
    18e8:	30 c0       	rjmp	.+96     	; 0x194a <__stack+0x84b>
    18ea:	81 31       	cpi	r24, 0x11	; 17
    18ec:	e1 f1       	breq	.+120    	; 0x1966 <__stack+0x867>
    18ee:	82 31       	cpi	r24, 0x12	; 18
    18f0:	09 f0       	breq	.+2      	; 0x18f4 <__stack+0x7f5>
    18f2:	46 c0       	rjmp	.+140    	; 0x1980 <__stack+0x881>
    18f4:	3f c0       	rjmp	.+126    	; 0x1974 <__stack+0x875>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[2] = SMO_last_state;
    18f6:	85 e1       	ldi	r24, 0x15	; 21
    18f8:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    18fa:	82 e0       	ldi	r24, 0x02	; 2
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	9c 83       	std	Y+4, r25	; 0x04
    1900:	8b 83       	std	Y+3, r24	; 0x03
    1902:	3e c0       	rjmp	.+124    	; 0x1980 <__stack+0x881>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[2] = SMO_last_state;
    1904:	85 e1       	ldi	r24, 0x15	; 21
    1906:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1908:	82 e0       	ldi	r24, 0x02	; 2
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	9c 83       	std	Y+4, r25	; 0x04
    190e:	8b 83       	std	Y+3, r24	; 0x03
    1910:	37 c0       	rjmp	.+110    	; 0x1980 <__stack+0x881>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[2] = SMO_last_state;
    1912:	85 e1       	ldi	r24, 0x15	; 21
    1914:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1916:	82 e0       	ldi	r24, 0x02	; 2
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	9c 83       	std	Y+4, r25	; 0x04
    191c:	8b 83       	std	Y+3, r24	; 0x03
    191e:	30 c0       	rjmp	.+96     	; 0x1980 <__stack+0x881>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[2] = SMO_last_state;
    1920:	85 e1       	ldi	r24, 0x15	; 21
    1922:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1924:	82 e0       	ldi	r24, 0x02	; 2
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	9c 83       	std	Y+4, r25	; 0x04
    192a:	8b 83       	std	Y+3, r24	; 0x03
    192c:	29 c0       	rjmp	.+82     	; 0x1980 <__stack+0x881>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[2] = SMO_last_state;
    192e:	85 e1       	ldi	r24, 0x15	; 21
    1930:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1932:	82 e0       	ldi	r24, 0x02	; 2
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	9c 83       	std	Y+4, r25	; 0x04
    1938:	8b 83       	std	Y+3, r24	; 0x03
    193a:	22 c0       	rjmp	.+68     	; 0x1980 <__stack+0x881>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[2] = SMO_last_state;
    193c:	85 e1       	ldi	r24, 0x15	; 21
    193e:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1940:	82 e0       	ldi	r24, 0x02	; 2
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	9c 83       	std	Y+4, r25	; 0x04
    1946:	8b 83       	std	Y+3, r24	; 0x03
    1948:	1b c0       	rjmp	.+54     	; 0x1980 <__stack+0x881>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0 : {
				/* Default exit sequence for state CheckAmount0 */
				handle->stateConfVector[2] = SMO_last_state;
    194a:	85 e1       	ldi	r24, 0x15	; 21
    194c:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    194e:	82 e0       	ldi	r24, 0x02	; 2
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	9c 83       	std	Y+4, r25	; 0x04
    1954:	8b 83       	std	Y+3, r24	; 0x03
    1956:	14 c0       	rjmp	.+40     	; 0x1980 <__stack+0x881>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[2] = SMO_last_state;
    1958:	85 e1       	ldi	r24, 0x15	; 21
    195a:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    195c:	82 e0       	ldi	r24, 0x02	; 2
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	9c 83       	std	Y+4, r25	; 0x04
    1962:	8b 83       	std	Y+3, r24	; 0x03
    1964:	0d c0       	rjmp	.+26     	; 0x1980 <__stack+0x881>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_SendData : {
				/* Default exit sequence for state SendData */
				handle->stateConfVector[2] = SMO_last_state;
    1966:	85 e1       	ldi	r24, 0x15	; 21
    1968:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    196a:	82 e0       	ldi	r24, 0x02	; 2
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	9c 83       	std	Y+4, r25	; 0x04
    1970:	8b 83       	std	Y+3, r24	; 0x03
    1972:	06 c0       	rjmp	.+12     	; 0x1980 <__stack+0x881>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[2] = SMO_last_state;
    1974:	85 e1       	ldi	r24, 0x15	; 21
    1976:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1978:	82 e0       	ldi	r24, 0x02	; 2
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	9c 83       	std	Y+4, r25	; 0x04
    197e:	8b 83       	std	Y+3, r24	; 0x03
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1980:	0e 94 43 02 	call	0x486	; 0x486 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1984:	8e ef       	ldi	r24, 0xFE	; 254
    1986:	91 e0       	ldi	r25, 0x01	; 1
    1988:	0e 94 10 02 	call	0x420	; 0x420 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    198c:	8c e0       	ldi	r24, 0x0C	; 12
    198e:	92 e0       	ldi	r25, 0x02	; 2
    1990:	40 e0       	ldi	r20, 0x00	; 0
    1992:	50 e0       	ldi	r21, 0x00	; 0
    1994:	ba 01       	movw	r22, r20
    1996:	01 e0       	ldi	r16, 0x01	; 1
    1998:	10 e0       	ldi	r17, 0x00	; 0
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	0e 94 13 02 	call	0x426	; 0x426 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    19a2:	1b a6       	lds	r17, 0xbb
    19a4:	1c a6       	lds	r17, 0xbc
    19a6:	1d a6       	lds	r17, 0xbd
    19a8:	1e a6       	lds	r17, 0xbe
		handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    19aa:	87 e0       	ldi	r24, 0x07	; 7
    19ac:	8a 83       	std	Y+2, r24	; 0x02
		handle->stateConfVectorPosition = 2;
    19ae:	82 e0       	ldi	r24, 0x02	; 2
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	9c 83       	std	Y+4, r25	; 0x04
    19b4:	8b 83       	std	Y+3, r24	; 0x03
    19b6:	a4 c4       	rjmp	.+2376   	; 0x2300 <__stack+0x1201>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state ShowAmount */
			handle->stateConfVector[2] = SMO_last_state;
			handle->stateConfVectorPosition = 2;
    19b8:	1c 83       	std	Y+4, r17	; 0x04
    19ba:	0b 83       	std	Y+3, r16	; 0x03
			/* Default enter sequence for state CheckKeyPress2 */
			/* Entry action for state 'CheckKeyPress2'. */
			handle->ifaceKEYPAD.lastkey = 0;
    19bc:	19 86       	std	Y+9, r1	; 0x09
    19be:	1a 86       	std	Y+10, r1	; 0x0a
    19c0:	1b 86       	std	Y+11, r1	; 0x0b
    19c2:	1c 86       	std	Y+12, r1	; 0x0c
			handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2;
    19c4:	8a 82       	std	Y+2, r8	; 0x02
    19c6:	73 c4       	rjmp	.+2278   	; 0x22ae <__stack+0x11af>
}

/* The reactions of state CheckKeyPress2. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2(SMO* handle) {
	/* The reactions of state CheckKeyPress2. */
	if (handle->iface.menuId == 0) { 
    19c8:	8b a5       	lds	r24, 0x6b
    19ca:	9c a5       	lds	r25, 0x6c
    19cc:	ad a5       	lds	r26, 0x6d
    19ce:	be a5       	lds	r27, 0x6e
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	a1 05       	cpc	r26, r1
    19d4:	b1 05       	cpc	r27, r1
    19d6:	09 f0       	breq	.+2      	; 0x19da <__stack+0x8db>
    19d8:	85 c0       	rjmp	.+266    	; 0x1ae4 <__stack+0x9e5>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 2... */
		switch(handle->stateConfVector[ 2 ]) {
    19da:	8a 81       	ldd	r24, Y+2	; 0x02
    19dc:	8d 30       	cpi	r24, 0x0D	; 13
    19de:	e9 f1       	breq	.+122    	; 0x1a5a <__stack+0x95b>
    19e0:	8e 30       	cpi	r24, 0x0E	; 14
    19e2:	70 f4       	brcc	.+28     	; 0x1a00 <__stack+0x901>
    19e4:	8a 30       	cpi	r24, 0x0A	; 10
    19e6:	21 f1       	breq	.+72     	; 0x1a30 <__stack+0x931>
    19e8:	8b 30       	cpi	r24, 0x0B	; 11
    19ea:	20 f4       	brcc	.+8      	; 0x19f4 <__stack+0x8f5>
    19ec:	89 30       	cpi	r24, 0x09	; 9
    19ee:	09 f0       	breq	.+2      	; 0x19f2 <__stack+0x8f3>
    19f0:	5d c0       	rjmp	.+186    	; 0x1aac <__stack+0x9ad>
    19f2:	17 c0       	rjmp	.+46     	; 0x1a22 <__stack+0x923>
    19f4:	8b 30       	cpi	r24, 0x0B	; 11
    19f6:	19 f1       	breq	.+70     	; 0x1a3e <__stack+0x93f>
    19f8:	8c 30       	cpi	r24, 0x0C	; 12
    19fa:	09 f0       	breq	.+2      	; 0x19fe <__stack+0x8ff>
    19fc:	57 c0       	rjmp	.+174    	; 0x1aac <__stack+0x9ad>
    19fe:	26 c0       	rjmp	.+76     	; 0x1a4c <__stack+0x94d>
    1a00:	80 31       	cpi	r24, 0x10	; 16
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <__stack+0x907>
    1a04:	3f c0       	rjmp	.+126    	; 0x1a84 <__stack+0x985>
    1a06:	81 31       	cpi	r24, 0x11	; 17
    1a08:	30 f4       	brcc	.+12     	; 0x1a16 <__stack+0x917>
    1a0a:	8e 30       	cpi	r24, 0x0E	; 14
    1a0c:	69 f1       	breq	.+90     	; 0x1a68 <__stack+0x969>
    1a0e:	8f 30       	cpi	r24, 0x0F	; 15
    1a10:	09 f0       	breq	.+2      	; 0x1a14 <__stack+0x915>
    1a12:	4c c0       	rjmp	.+152    	; 0x1aac <__stack+0x9ad>
    1a14:	30 c0       	rjmp	.+96     	; 0x1a76 <__stack+0x977>
    1a16:	81 31       	cpi	r24, 0x11	; 17
    1a18:	e1 f1       	breq	.+120    	; 0x1a92 <__stack+0x993>
    1a1a:	82 31       	cpi	r24, 0x12	; 18
    1a1c:	09 f0       	breq	.+2      	; 0x1a20 <__stack+0x921>
    1a1e:	46 c0       	rjmp	.+140    	; 0x1aac <__stack+0x9ad>
    1a20:	3f c0       	rjmp	.+126    	; 0x1aa0 <__stack+0x9a1>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[2] = SMO_last_state;
    1a22:	85 e1       	ldi	r24, 0x15	; 21
    1a24:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1a26:	82 e0       	ldi	r24, 0x02	; 2
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	9c 83       	std	Y+4, r25	; 0x04
    1a2c:	8b 83       	std	Y+3, r24	; 0x03
    1a2e:	3e c0       	rjmp	.+124    	; 0x1aac <__stack+0x9ad>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[2] = SMO_last_state;
    1a30:	85 e1       	ldi	r24, 0x15	; 21
    1a32:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1a34:	82 e0       	ldi	r24, 0x02	; 2
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	9c 83       	std	Y+4, r25	; 0x04
    1a3a:	8b 83       	std	Y+3, r24	; 0x03
    1a3c:	37 c0       	rjmp	.+110    	; 0x1aac <__stack+0x9ad>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[2] = SMO_last_state;
    1a3e:	85 e1       	ldi	r24, 0x15	; 21
    1a40:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1a42:	82 e0       	ldi	r24, 0x02	; 2
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	9c 83       	std	Y+4, r25	; 0x04
    1a48:	8b 83       	std	Y+3, r24	; 0x03
    1a4a:	30 c0       	rjmp	.+96     	; 0x1aac <__stack+0x9ad>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[2] = SMO_last_state;
    1a4c:	85 e1       	ldi	r24, 0x15	; 21
    1a4e:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1a50:	82 e0       	ldi	r24, 0x02	; 2
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	9c 83       	std	Y+4, r25	; 0x04
    1a56:	8b 83       	std	Y+3, r24	; 0x03
    1a58:	29 c0       	rjmp	.+82     	; 0x1aac <__stack+0x9ad>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[2] = SMO_last_state;
    1a5a:	85 e1       	ldi	r24, 0x15	; 21
    1a5c:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1a5e:	82 e0       	ldi	r24, 0x02	; 2
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	9c 83       	std	Y+4, r25	; 0x04
    1a64:	8b 83       	std	Y+3, r24	; 0x03
    1a66:	22 c0       	rjmp	.+68     	; 0x1aac <__stack+0x9ad>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[2] = SMO_last_state;
    1a68:	85 e1       	ldi	r24, 0x15	; 21
    1a6a:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1a6c:	82 e0       	ldi	r24, 0x02	; 2
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	9c 83       	std	Y+4, r25	; 0x04
    1a72:	8b 83       	std	Y+3, r24	; 0x03
    1a74:	1b c0       	rjmp	.+54     	; 0x1aac <__stack+0x9ad>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0 : {
				/* Default exit sequence for state CheckAmount0 */
				handle->stateConfVector[2] = SMO_last_state;
    1a76:	85 e1       	ldi	r24, 0x15	; 21
    1a78:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1a7a:	82 e0       	ldi	r24, 0x02	; 2
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	9c 83       	std	Y+4, r25	; 0x04
    1a80:	8b 83       	std	Y+3, r24	; 0x03
    1a82:	14 c0       	rjmp	.+40     	; 0x1aac <__stack+0x9ad>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[2] = SMO_last_state;
    1a84:	85 e1       	ldi	r24, 0x15	; 21
    1a86:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1a88:	82 e0       	ldi	r24, 0x02	; 2
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	9c 83       	std	Y+4, r25	; 0x04
    1a8e:	8b 83       	std	Y+3, r24	; 0x03
    1a90:	0d c0       	rjmp	.+26     	; 0x1aac <__stack+0x9ad>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_SendData : {
				/* Default exit sequence for state SendData */
				handle->stateConfVector[2] = SMO_last_state;
    1a92:	85 e1       	ldi	r24, 0x15	; 21
    1a94:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1a96:	82 e0       	ldi	r24, 0x02	; 2
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	9c 83       	std	Y+4, r25	; 0x04
    1a9c:	8b 83       	std	Y+3, r24	; 0x03
    1a9e:	06 c0       	rjmp	.+12     	; 0x1aac <__stack+0x9ad>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[2] = SMO_last_state;
    1aa0:	85 e1       	ldi	r24, 0x15	; 21
    1aa2:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1aa4:	82 e0       	ldi	r24, 0x02	; 2
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	9c 83       	std	Y+4, r25	; 0x04
    1aaa:	8b 83       	std	Y+3, r24	; 0x03
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1aac:	0e 94 43 02 	call	0x486	; 0x486 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1ab0:	8e ef       	ldi	r24, 0xFE	; 254
    1ab2:	91 e0       	ldi	r25, 0x01	; 1
    1ab4:	0e 94 10 02 	call	0x420	; 0x420 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    1ab8:	8c e0       	ldi	r24, 0x0C	; 12
    1aba:	92 e0       	ldi	r25, 0x02	; 2
    1abc:	40 e0       	ldi	r20, 0x00	; 0
    1abe:	50 e0       	ldi	r21, 0x00	; 0
    1ac0:	ba 01       	movw	r22, r20
    1ac2:	01 e0       	ldi	r16, 0x01	; 1
    1ac4:	10 e0       	ldi	r17, 0x00	; 0
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	0e 94 13 02 	call	0x426	; 0x426 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1ace:	1b a6       	lds	r17, 0xbb
    1ad0:	1c a6       	lds	r17, 0xbc
    1ad2:	1d a6       	lds	r17, 0xbd
    1ad4:	1e a6       	lds	r17, 0xbe
		handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1ad6:	87 e0       	ldi	r24, 0x07	; 7
    1ad8:	8a 83       	std	Y+2, r24	; 0x02
		handle->stateConfVectorPosition = 2;
    1ada:	82 e0       	ldi	r24, 0x02	; 2
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	9c 83       	std	Y+4, r25	; 0x04
    1ae0:	8b 83       	std	Y+3, r24	; 0x03
    1ae2:	0e c4       	rjmp	.+2076   	; 0x2300 <__stack+0x1201>
	}  else {
		if (handle->ifaceDISH.pos < 2 && handle->ifaceKEYPAD.lastkey == 10 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1ae4:	8e a1       	lds	r24, 0x4e
    1ae6:	9f a1       	lds	r25, 0x4f
    1ae8:	a8 a5       	lds	r26, 0x68
    1aea:	b9 a5       	lds	r27, 0x69
    1aec:	82 30       	cpi	r24, 0x02	; 2
    1aee:	91 05       	cpc	r25, r1
    1af0:	a1 05       	cpc	r26, r1
    1af2:	b1 05       	cpc	r27, r1
    1af4:	0c f0       	brlt	.+2      	; 0x1af8 <__stack+0x9f9>
    1af6:	69 c0       	rjmp	.+210    	; 0x1bca <__stack+0xacb>
    1af8:	c9 84       	ldd	r12, Y+9	; 0x09
    1afa:	da 84       	ldd	r13, Y+10	; 0x0a
    1afc:	eb 84       	ldd	r14, Y+11	; 0x0b
    1afe:	fc 84       	ldd	r15, Y+12	; 0x0c
    1b00:	ea e0       	ldi	r30, 0x0A	; 10
    1b02:	ce 16       	cp	r12, r30
    1b04:	d1 04       	cpc	r13, r1
    1b06:	e1 04       	cpc	r14, r1
    1b08:	f1 04       	cpc	r15, r1
    1b0a:	61 f4       	brne	.+24     	; 0x1b24 <__stack+0xa25>
    1b0c:	2e 85       	ldd	r18, Y+14	; 0x0e
    1b0e:	22 23       	and	r18, r18
    1b10:	49 f0       	breq	.+18     	; 0x1b24 <__stack+0xa25>
			/* Default exit sequence for state CheckKeyPress2 */
			handle->stateConfVector[2] = SMO_last_state;
			handle->stateConfVectorPosition = 2;
    1b12:	1c 83       	std	Y+4, r17	; 0x04
    1b14:	0b 83       	std	Y+3, r16	; 0x03
			/* Default enter sequence for state CheckAmount0 */
			/* Entry action for state 'CheckAmount0'. */
			handle->ifaceKEYPAD.lastkey = 0;
    1b16:	19 86       	std	Y+9, r1	; 0x09
    1b18:	1a 86       	std	Y+10, r1	; 0x0a
    1b1a:	1b 86       	std	Y+11, r1	; 0x0b
    1b1c:	1c 86       	std	Y+12, r1	; 0x0c
			handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0;
    1b1e:	ff e0       	ldi	r31, 0x0F	; 15
    1b20:	fa 83       	std	Y+2, r31	; 0x02
    1b22:	c5 c3       	rjmp	.+1930   	; 0x22ae <__stack+0x11af>
			handle->stateConfVectorPosition = 2;
		}  else {
			if (handle->ifaceDISH.pos < 2 && handle->ifaceKEYPAD.lastkey <= 9 && handle->ifaceKEYPAD.lastkey >= 1 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1b24:	2a e0       	ldi	r18, 0x0A	; 10
    1b26:	c2 16       	cp	r12, r18
    1b28:	d1 04       	cpc	r13, r1
    1b2a:	e1 04       	cpc	r14, r1
    1b2c:	f1 04       	cpc	r15, r1
    1b2e:	0c f0       	brlt	.+2      	; 0x1b32 <__stack+0xa33>
    1b30:	4c c0       	rjmp	.+152    	; 0x1bca <__stack+0xacb>
    1b32:	1c 14       	cp	r1, r12
    1b34:	1d 04       	cpc	r1, r13
    1b36:	1e 04       	cpc	r1, r14
    1b38:	1f 04       	cpc	r1, r15
    1b3a:	0c f0       	brlt	.+2      	; 0x1b3e <__stack+0xa3f>
    1b3c:	46 c0       	rjmp	.+140    	; 0x1bca <__stack+0xacb>
    1b3e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1b40:	22 23       	and	r18, r18
    1b42:	09 f4       	brne	.+2      	; 0x1b46 <__stack+0xa47>
    1b44:	42 c0       	rjmp	.+132    	; 0x1bca <__stack+0xacb>
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[2] = SMO_last_state;
    1b46:	25 e1       	ldi	r18, 0x15	; 21
    1b48:	2a 83       	std	Y+2, r18	; 0x02
				handle->stateConfVectorPosition = 2;
    1b4a:	88 24       	eor	r8, r8
    1b4c:	99 24       	eor	r9, r9
    1b4e:	68 94       	set
    1b50:	81 f8       	bld	r8, 1
    1b52:	9c 82       	std	Y+4, r9	; 0x04
    1b54:	8b 82       	std	Y+3, r8	; 0x03
				/* Default enter sequence for state EnterAmount */
				/* Entry action for state 'EnterAmount'. */
				sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    1b56:	9c 01       	movw	r18, r24
    1b58:	ad 01       	movw	r20, r26
    1b5a:	22 0f       	add	r18, r18
    1b5c:	33 1f       	adc	r19, r19
    1b5e:	44 1f       	adc	r20, r20
    1b60:	55 1f       	adc	r21, r21
    1b62:	c7 01       	movw	r24, r14
    1b64:	b6 01       	movw	r22, r12
    1b66:	ee 24       	eor	r14, r14
    1b68:	ff 24       	eor	r15, r15
    1b6a:	87 01       	movw	r16, r14
    1b6c:	e3 94       	inc	r14
    1b6e:	aa 24       	eor	r10, r10
    1b70:	bb 24       	eor	r11, r11
    1b72:	65 01       	movw	r12, r10
    1b74:	a3 94       	inc	r10
    1b76:	0e 94 22 02 	call	0x444	; 0x444 <sMOIfaceLCD_writeNumberXY>
				handle->ifaceDISH.pos += 1;
    1b7a:	8e a1       	lds	r24, 0x4e
    1b7c:	9f a1       	lds	r25, 0x4f
    1b7e:	a8 a5       	lds	r26, 0x68
    1b80:	b9 a5       	lds	r27, 0x69
    1b82:	01 96       	adiw	r24, 0x01	; 1
    1b84:	a1 1d       	adc	r26, r1
    1b86:	b1 1d       	adc	r27, r1
    1b88:	8e a3       	lds	r24, 0x5e
    1b8a:	9f a3       	lds	r25, 0x5f
    1b8c:	a8 a7       	lds	r26, 0x78
    1b8e:	b9 a7       	lds	r27, 0x79
				handle->ifaceDISH.amount = handle->ifaceDISH.amount * 10 + handle->ifaceKEYPAD.lastkey;
    1b90:	6a a1       	lds	r22, 0x4a
    1b92:	7b a1       	lds	r23, 0x4b
    1b94:	8c a1       	lds	r24, 0x4c
    1b96:	9d a1       	lds	r25, 0x4d
    1b98:	2a e0       	ldi	r18, 0x0A	; 10
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e0       	ldi	r20, 0x00	; 0
    1b9e:	50 e0       	ldi	r21, 0x00	; 0
    1ba0:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__mulsi3>
    1ba4:	ab 01       	movw	r20, r22
    1ba6:	bc 01       	movw	r22, r24
    1ba8:	89 85       	ldd	r24, Y+9	; 0x09
    1baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bac:	ab 85       	ldd	r26, Y+11	; 0x0b
    1bae:	bc 85       	ldd	r27, Y+12	; 0x0c
    1bb0:	84 0f       	add	r24, r20
    1bb2:	95 1f       	adc	r25, r21
    1bb4:	a6 1f       	adc	r26, r22
    1bb6:	b7 1f       	adc	r27, r23
    1bb8:	8a a3       	lds	r24, 0x5a
    1bba:	9b a3       	lds	r25, 0x5b
    1bbc:	ac a3       	lds	r26, 0x5c
    1bbe:	bd a3       	lds	r27, 0x5d
				handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount;
    1bc0:	80 e1       	ldi	r24, 0x10	; 16
    1bc2:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1bc4:	9c 82       	std	Y+4, r9	; 0x04
    1bc6:	8b 82       	std	Y+3, r8	; 0x03
    1bc8:	9b c3       	rjmp	.+1846   	; 0x2300 <__stack+0x1201>
			}  else {
				if (handle->ifaceKEYPAD.lastkey == 12 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1bca:	89 85       	ldd	r24, Y+9	; 0x09
    1bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bce:	ab 85       	ldd	r26, Y+11	; 0x0b
    1bd0:	bc 85       	ldd	r27, Y+12	; 0x0c
    1bd2:	8c 30       	cpi	r24, 0x0C	; 12
    1bd4:	91 05       	cpc	r25, r1
    1bd6:	a1 05       	cpc	r26, r1
    1bd8:	b1 05       	cpc	r27, r1
    1bda:	49 f5       	brne	.+82     	; 0x1c2e <__stack+0xb2f>
    1bdc:	2e 85       	ldd	r18, Y+14	; 0x0e
    1bde:	22 23       	and	r18, r18
    1be0:	31 f1       	breq	.+76     	; 0x1c2e <__stack+0xb2f>
					/* Default exit sequence for state CheckKeyPress2 */
					handle->stateConfVector[2] = SMO_last_state;
    1be2:	85 e1       	ldi	r24, 0x15	; 21
    1be4:	8a 83       	std	Y+2, r24	; 0x02
					handle->stateConfVectorPosition = 2;
    1be6:	ee 24       	eor	r14, r14
    1be8:	ff 24       	eor	r15, r15
    1bea:	68 94       	set
    1bec:	e1 f8       	bld	r14, 1
    1bee:	fc 82       	std	Y+4, r15	; 0x04
    1bf0:	eb 82       	std	Y+3, r14	; 0x03
					/* Default enter sequence for state ShowAmount */
					/* Entry action for state 'ShowAmount'. */
					sMOIfaceLCD_clear();
    1bf2:	0e 94 43 02 	call	0x486	; 0x486 <sMOIfaceLCD_clear>
					sMOIfaceLCD_writeString("Nhap so luong:");
    1bf6:	8e e2       	ldi	r24, 0x2E	; 46
    1bf8:	92 e0       	ldi	r25, 0x02	; 2
    1bfa:	0e 94 10 02 	call	0x420	; 0x420 <sMOIfaceLCD_writeString>
					sMOIfaceLCD_writeStringXY("_ _", 0, 1);
    1bfe:	8d e3       	ldi	r24, 0x3D	; 61
    1c00:	92 e0       	ldi	r25, 0x02	; 2
    1c02:	40 e0       	ldi	r20, 0x00	; 0
    1c04:	50 e0       	ldi	r21, 0x00	; 0
    1c06:	ba 01       	movw	r22, r20
    1c08:	01 e0       	ldi	r16, 0x01	; 1
    1c0a:	10 e0       	ldi	r17, 0x00	; 0
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	0e 94 13 02 	call	0x426	; 0x426 <sMOIfaceLCD_writeStringXY>
					handle->ifaceDISH.pos = 0;
    1c14:	1e a2       	lds	r17, 0x9e
    1c16:	1f a2       	lds	r17, 0x9f
    1c18:	18 a6       	lds	r17, 0xb8
    1c1a:	19 a6       	lds	r17, 0xb9
					handle->ifaceDISH.amount = 0;
    1c1c:	1a a2       	lds	r17, 0x9a
    1c1e:	1b a2       	lds	r17, 0x9b
    1c20:	1c a2       	lds	r17, 0x9c
    1c22:	1d a2       	lds	r17, 0x9d
					handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount;
    1c24:	8d e0       	ldi	r24, 0x0D	; 13
    1c26:	8a 83       	std	Y+2, r24	; 0x02
					handle->stateConfVectorPosition = 2;
    1c28:	fc 82       	std	Y+4, r15	; 0x04
    1c2a:	eb 82       	std	Y+3, r14	; 0x03
    1c2c:	69 c3       	rjmp	.+1746   	; 0x2300 <__stack+0x1201>
				}  else {
					if (handle->ifaceKEYPAD.lastkey == 11 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1c2e:	8b 30       	cpi	r24, 0x0B	; 11
    1c30:	91 05       	cpc	r25, r1
    1c32:	a1 05       	cpc	r26, r1
    1c34:	b1 05       	cpc	r27, r1
    1c36:	19 f5       	brne	.+70     	; 0x1c7e <__stack+0xb7f>
    1c38:	2e 85       	ldd	r18, Y+14	; 0x0e
    1c3a:	22 23       	and	r18, r18
    1c3c:	01 f1       	breq	.+64     	; 0x1c7e <__stack+0xb7f>
						/* Default exit sequence for state CheckKeyPress2 */
						handle->stateConfVector[2] = SMO_last_state;
    1c3e:	85 e1       	ldi	r24, 0x15	; 21
    1c40:	8a 83       	std	Y+2, r24	; 0x02
						handle->stateConfVectorPosition = 2;
    1c42:	88 24       	eor	r8, r8
    1c44:	99 24       	eor	r9, r9
    1c46:	68 94       	set
    1c48:	81 f8       	bld	r8, 1
    1c4a:	9c 82       	std	Y+4, r9	; 0x04
    1c4c:	8b 82       	std	Y+3, r8	; 0x03
						/* Default enter sequence for state SendData */
						/* Entry action for state 'SendData'. */
						handle->ifaceRF.result = sMOIfaceRF_sendData(handle->iface.menuId, handle->iface.tableId, handle->ifaceDISH.ID, handle->ifaceDISH.amount);
    1c4e:	6b a5       	lds	r22, 0x6b
    1c50:	7c a5       	lds	r23, 0x6c
    1c52:	8d a5       	lds	r24, 0x6d
    1c54:	9e a5       	lds	r25, 0x6e
    1c56:	2f a5       	lds	r18, 0x6f
    1c58:	38 a9       	sts	0x48, r19
    1c5a:	49 a9       	sts	0x49, r20
    1c5c:	5a a9       	sts	0x4a, r21
    1c5e:	ee 8c       	ldd	r14, Y+30	; 0x1e
    1c60:	ff 8c       	ldd	r15, Y+31	; 0x1f
    1c62:	08 a1       	lds	r16, 0x48
    1c64:	19 a1       	lds	r17, 0x49
    1c66:	aa a0       	lds	r26, 0x8a
    1c68:	bb a0       	lds	r27, 0x8b
    1c6a:	cc a0       	lds	r28, 0x8c
    1c6c:	dd a0       	lds	r29, 0x8d
    1c6e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <sMOIfaceRF_sendData>
    1c72:	88 8f       	std	Y+24, r24	; 0x18
						handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_SendData;
    1c74:	81 e1       	ldi	r24, 0x11	; 17
    1c76:	8a 83       	std	Y+2, r24	; 0x02
						handle->stateConfVectorPosition = 2;
    1c78:	9c 82       	std	Y+4, r9	; 0x04
    1c7a:	8b 82       	std	Y+3, r8	; 0x03
    1c7c:	41 c3       	rjmp	.+1666   	; 0x2300 <__stack+0x1201>
					}  else {
						if (handle->ifaceKEYPAD.lastkey == 16 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1c7e:	80 31       	cpi	r24, 0x10	; 16
    1c80:	91 05       	cpc	r25, r1
    1c82:	a1 05       	cpc	r26, r1
    1c84:	b1 05       	cpc	r27, r1
    1c86:	09 f0       	breq	.+2      	; 0x1c8a <__stack+0xb8b>
    1c88:	12 c3       	rjmp	.+1572   	; 0x22ae <__stack+0x11af>
    1c8a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c8c:	88 23       	and	r24, r24
    1c8e:	09 f4       	brne	.+2      	; 0x1c92 <__stack+0xb93>
    1c90:	0e c3       	rjmp	.+1564   	; 0x22ae <__stack+0x11af>
							/* Default exit sequence for state CheckKeyPress2 */
							handle->stateConfVector[2] = SMO_last_state;
							handle->stateConfVectorPosition = 2;
    1c92:	1c 83       	std	Y+4, r17	; 0x04
    1c94:	0b 83       	std	Y+3, r16	; 0x03
							handle->iface.menuId = 0;
    1c96:	1b a6       	lds	r17, 0xbb
    1c98:	1c a6       	lds	r17, 0xbc
    1c9a:	1d a6       	lds	r17, 0xbd
    1c9c:	1e a6       	lds	r17, 0xbe
							/* Default enter sequence for state null */
							handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_;
    1c9e:	32 e1       	ldi	r19, 0x12	; 18
    1ca0:	3a 83       	std	Y+2, r19	; 0x02
    1ca2:	05 c3       	rjmp	.+1546   	; 0x22ae <__stack+0x11af>
}

/* The reactions of state CheckAmount0. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0(SMO* handle) {
	/* The reactions of state CheckAmount0. */
	if (handle->iface.menuId == 0) { 
    1ca4:	8b a5       	lds	r24, 0x6b
    1ca6:	9c a5       	lds	r25, 0x6c
    1ca8:	ad a5       	lds	r26, 0x6d
    1caa:	be a5       	lds	r27, 0x6e
    1cac:	00 97       	sbiw	r24, 0x00	; 0
    1cae:	a1 05       	cpc	r26, r1
    1cb0:	b1 05       	cpc	r27, r1
    1cb2:	09 f0       	breq	.+2      	; 0x1cb6 <__stack+0xbb7>
    1cb4:	85 c0       	rjmp	.+266    	; 0x1dc0 <__stack+0xcc1>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 2... */
		switch(handle->stateConfVector[ 2 ]) {
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	8d 30       	cpi	r24, 0x0D	; 13
    1cba:	e9 f1       	breq	.+122    	; 0x1d36 <__stack+0xc37>
    1cbc:	8e 30       	cpi	r24, 0x0E	; 14
    1cbe:	70 f4       	brcc	.+28     	; 0x1cdc <__stack+0xbdd>
    1cc0:	8a 30       	cpi	r24, 0x0A	; 10
    1cc2:	21 f1       	breq	.+72     	; 0x1d0c <__stack+0xc0d>
    1cc4:	8b 30       	cpi	r24, 0x0B	; 11
    1cc6:	20 f4       	brcc	.+8      	; 0x1cd0 <__stack+0xbd1>
    1cc8:	89 30       	cpi	r24, 0x09	; 9
    1cca:	09 f0       	breq	.+2      	; 0x1cce <__stack+0xbcf>
    1ccc:	5d c0       	rjmp	.+186    	; 0x1d88 <__stack+0xc89>
    1cce:	17 c0       	rjmp	.+46     	; 0x1cfe <__stack+0xbff>
    1cd0:	8b 30       	cpi	r24, 0x0B	; 11
    1cd2:	19 f1       	breq	.+70     	; 0x1d1a <__stack+0xc1b>
    1cd4:	8c 30       	cpi	r24, 0x0C	; 12
    1cd6:	09 f0       	breq	.+2      	; 0x1cda <__stack+0xbdb>
    1cd8:	57 c0       	rjmp	.+174    	; 0x1d88 <__stack+0xc89>
    1cda:	26 c0       	rjmp	.+76     	; 0x1d28 <__stack+0xc29>
    1cdc:	80 31       	cpi	r24, 0x10	; 16
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <__stack+0xbe3>
    1ce0:	3f c0       	rjmp	.+126    	; 0x1d60 <__stack+0xc61>
    1ce2:	81 31       	cpi	r24, 0x11	; 17
    1ce4:	30 f4       	brcc	.+12     	; 0x1cf2 <__stack+0xbf3>
    1ce6:	8e 30       	cpi	r24, 0x0E	; 14
    1ce8:	69 f1       	breq	.+90     	; 0x1d44 <__stack+0xc45>
    1cea:	8f 30       	cpi	r24, 0x0F	; 15
    1cec:	09 f0       	breq	.+2      	; 0x1cf0 <__stack+0xbf1>
    1cee:	4c c0       	rjmp	.+152    	; 0x1d88 <__stack+0xc89>
    1cf0:	30 c0       	rjmp	.+96     	; 0x1d52 <__stack+0xc53>
    1cf2:	81 31       	cpi	r24, 0x11	; 17
    1cf4:	e1 f1       	breq	.+120    	; 0x1d6e <__stack+0xc6f>
    1cf6:	82 31       	cpi	r24, 0x12	; 18
    1cf8:	09 f0       	breq	.+2      	; 0x1cfc <__stack+0xbfd>
    1cfa:	46 c0       	rjmp	.+140    	; 0x1d88 <__stack+0xc89>
    1cfc:	3f c0       	rjmp	.+126    	; 0x1d7c <__stack+0xc7d>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[2] = SMO_last_state;
    1cfe:	85 e1       	ldi	r24, 0x15	; 21
    1d00:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1d02:	82 e0       	ldi	r24, 0x02	; 2
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	9c 83       	std	Y+4, r25	; 0x04
    1d08:	8b 83       	std	Y+3, r24	; 0x03
    1d0a:	3e c0       	rjmp	.+124    	; 0x1d88 <__stack+0xc89>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[2] = SMO_last_state;
    1d0c:	85 e1       	ldi	r24, 0x15	; 21
    1d0e:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1d10:	82 e0       	ldi	r24, 0x02	; 2
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	9c 83       	std	Y+4, r25	; 0x04
    1d16:	8b 83       	std	Y+3, r24	; 0x03
    1d18:	37 c0       	rjmp	.+110    	; 0x1d88 <__stack+0xc89>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[2] = SMO_last_state;
    1d1a:	85 e1       	ldi	r24, 0x15	; 21
    1d1c:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1d1e:	82 e0       	ldi	r24, 0x02	; 2
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	9c 83       	std	Y+4, r25	; 0x04
    1d24:	8b 83       	std	Y+3, r24	; 0x03
    1d26:	30 c0       	rjmp	.+96     	; 0x1d88 <__stack+0xc89>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[2] = SMO_last_state;
    1d28:	85 e1       	ldi	r24, 0x15	; 21
    1d2a:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1d2c:	82 e0       	ldi	r24, 0x02	; 2
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	9c 83       	std	Y+4, r25	; 0x04
    1d32:	8b 83       	std	Y+3, r24	; 0x03
    1d34:	29 c0       	rjmp	.+82     	; 0x1d88 <__stack+0xc89>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[2] = SMO_last_state;
    1d36:	85 e1       	ldi	r24, 0x15	; 21
    1d38:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1d3a:	82 e0       	ldi	r24, 0x02	; 2
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	9c 83       	std	Y+4, r25	; 0x04
    1d40:	8b 83       	std	Y+3, r24	; 0x03
    1d42:	22 c0       	rjmp	.+68     	; 0x1d88 <__stack+0xc89>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[2] = SMO_last_state;
    1d44:	85 e1       	ldi	r24, 0x15	; 21
    1d46:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1d48:	82 e0       	ldi	r24, 0x02	; 2
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	9c 83       	std	Y+4, r25	; 0x04
    1d4e:	8b 83       	std	Y+3, r24	; 0x03
    1d50:	1b c0       	rjmp	.+54     	; 0x1d88 <__stack+0xc89>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0 : {
				/* Default exit sequence for state CheckAmount0 */
				handle->stateConfVector[2] = SMO_last_state;
    1d52:	85 e1       	ldi	r24, 0x15	; 21
    1d54:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1d56:	82 e0       	ldi	r24, 0x02	; 2
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	9c 83       	std	Y+4, r25	; 0x04
    1d5c:	8b 83       	std	Y+3, r24	; 0x03
    1d5e:	14 c0       	rjmp	.+40     	; 0x1d88 <__stack+0xc89>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[2] = SMO_last_state;
    1d60:	85 e1       	ldi	r24, 0x15	; 21
    1d62:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1d64:	82 e0       	ldi	r24, 0x02	; 2
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	9c 83       	std	Y+4, r25	; 0x04
    1d6a:	8b 83       	std	Y+3, r24	; 0x03
    1d6c:	0d c0       	rjmp	.+26     	; 0x1d88 <__stack+0xc89>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_SendData : {
				/* Default exit sequence for state SendData */
				handle->stateConfVector[2] = SMO_last_state;
    1d6e:	85 e1       	ldi	r24, 0x15	; 21
    1d70:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1d72:	82 e0       	ldi	r24, 0x02	; 2
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	9c 83       	std	Y+4, r25	; 0x04
    1d78:	8b 83       	std	Y+3, r24	; 0x03
    1d7a:	06 c0       	rjmp	.+12     	; 0x1d88 <__stack+0xc89>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[2] = SMO_last_state;
    1d7c:	85 e1       	ldi	r24, 0x15	; 21
    1d7e:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1d80:	82 e0       	ldi	r24, 0x02	; 2
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	9c 83       	std	Y+4, r25	; 0x04
    1d86:	8b 83       	std	Y+3, r24	; 0x03
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1d88:	0e 94 43 02 	call	0x486	; 0x486 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1d8c:	8e ef       	ldi	r24, 0xFE	; 254
    1d8e:	91 e0       	ldi	r25, 0x01	; 1
    1d90:	0e 94 10 02 	call	0x420	; 0x420 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    1d94:	8c e0       	ldi	r24, 0x0C	; 12
    1d96:	92 e0       	ldi	r25, 0x02	; 2
    1d98:	40 e0       	ldi	r20, 0x00	; 0
    1d9a:	50 e0       	ldi	r21, 0x00	; 0
    1d9c:	ba 01       	movw	r22, r20
    1d9e:	01 e0       	ldi	r16, 0x01	; 1
    1da0:	10 e0       	ldi	r17, 0x00	; 0
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	0e 94 13 02 	call	0x426	; 0x426 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1daa:	1b a6       	lds	r17, 0xbb
    1dac:	1c a6       	lds	r17, 0xbc
    1dae:	1d a6       	lds	r17, 0xbd
    1db0:	1e a6       	lds	r17, 0xbe
		handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1db2:	87 e0       	ldi	r24, 0x07	; 7
    1db4:	8a 83       	std	Y+2, r24	; 0x02
		handle->stateConfVectorPosition = 2;
    1db6:	82 e0       	ldi	r24, 0x02	; 2
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	9c 83       	std	Y+4, r25	; 0x04
    1dbc:	8b 83       	std	Y+3, r24	; 0x03
    1dbe:	a0 c2       	rjmp	.+1344   	; 0x2300 <__stack+0x1201>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state CheckAmount0 */
			handle->stateConfVector[2] = SMO_last_state;
    1dc0:	85 e1       	ldi	r24, 0x15	; 21
    1dc2:	8a 83       	std	Y+2, r24	; 0x02
			handle->stateConfVectorPosition = 2;
    1dc4:	88 24       	eor	r8, r8
    1dc6:	99 24       	eor	r9, r9
    1dc8:	68 94       	set
    1dca:	81 f8       	bld	r8, 1
    1dcc:	9c 82       	std	Y+4, r9	; 0x04
    1dce:	8b 82       	std	Y+3, r8	; 0x03
			/* Default enter sequence for state EnterAmount */
			/* Entry action for state 'EnterAmount'. */
			sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    1dd0:	c9 84       	ldd	r12, Y+9	; 0x09
    1dd2:	da 84       	ldd	r13, Y+10	; 0x0a
    1dd4:	eb 84       	ldd	r14, Y+11	; 0x0b
    1dd6:	fc 84       	ldd	r15, Y+12	; 0x0c
    1dd8:	8e a1       	lds	r24, 0x4e
    1dda:	9f a1       	lds	r25, 0x4f
    1ddc:	a8 a5       	lds	r26, 0x68
    1dde:	b9 a5       	lds	r27, 0x69
    1de0:	9c 01       	movw	r18, r24
    1de2:	ad 01       	movw	r20, r26
    1de4:	22 0f       	add	r18, r18
    1de6:	33 1f       	adc	r19, r19
    1de8:	44 1f       	adc	r20, r20
    1dea:	55 1f       	adc	r21, r21
    1dec:	c7 01       	movw	r24, r14
    1dee:	b6 01       	movw	r22, r12
    1df0:	ee 24       	eor	r14, r14
    1df2:	ff 24       	eor	r15, r15
    1df4:	87 01       	movw	r16, r14
    1df6:	e3 94       	inc	r14
    1df8:	aa 24       	eor	r10, r10
    1dfa:	bb 24       	eor	r11, r11
    1dfc:	65 01       	movw	r12, r10
    1dfe:	a3 94       	inc	r10
    1e00:	0e 94 22 02 	call	0x444	; 0x444 <sMOIfaceLCD_writeNumberXY>
			handle->ifaceDISH.pos += 1;
    1e04:	8e a1       	lds	r24, 0x4e
    1e06:	9f a1       	lds	r25, 0x4f
    1e08:	a8 a5       	lds	r26, 0x68
    1e0a:	b9 a5       	lds	r27, 0x69
    1e0c:	01 96       	adiw	r24, 0x01	; 1
    1e0e:	a1 1d       	adc	r26, r1
    1e10:	b1 1d       	adc	r27, r1
    1e12:	8e a3       	lds	r24, 0x5e
    1e14:	9f a3       	lds	r25, 0x5f
    1e16:	a8 a7       	lds	r26, 0x78
    1e18:	b9 a7       	lds	r27, 0x79
			handle->ifaceDISH.amount = handle->ifaceDISH.amount * 10 + handle->ifaceKEYPAD.lastkey;
    1e1a:	6a a1       	lds	r22, 0x4a
    1e1c:	7b a1       	lds	r23, 0x4b
    1e1e:	8c a1       	lds	r24, 0x4c
    1e20:	9d a1       	lds	r25, 0x4d
    1e22:	2a e0       	ldi	r18, 0x0A	; 10
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e0       	ldi	r20, 0x00	; 0
    1e28:	50 e0       	ldi	r21, 0x00	; 0
    1e2a:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__mulsi3>
    1e2e:	ab 01       	movw	r20, r22
    1e30:	bc 01       	movw	r22, r24
    1e32:	89 85       	ldd	r24, Y+9	; 0x09
    1e34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e36:	ab 85       	ldd	r26, Y+11	; 0x0b
    1e38:	bc 85       	ldd	r27, Y+12	; 0x0c
    1e3a:	84 0f       	add	r24, r20
    1e3c:	95 1f       	adc	r25, r21
    1e3e:	a6 1f       	adc	r26, r22
    1e40:	b7 1f       	adc	r27, r23
    1e42:	8a a3       	lds	r24, 0x5a
    1e44:	9b a3       	lds	r25, 0x5b
    1e46:	ac a3       	lds	r26, 0x5c
    1e48:	bd a3       	lds	r27, 0x5d
			handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount;
    1e4a:	80 e1       	ldi	r24, 0x10	; 16
    1e4c:	8a 83       	std	Y+2, r24	; 0x02
			handle->stateConfVectorPosition = 2;
    1e4e:	9c 82       	std	Y+4, r9	; 0x04
    1e50:	8b 82       	std	Y+3, r8	; 0x03
    1e52:	56 c2       	rjmp	.+1196   	; 0x2300 <__stack+0x1201>
}

/* The reactions of state EnterAmount. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount(SMO* handle) {
	/* The reactions of state EnterAmount. */
	if (handle->iface.menuId == 0) { 
    1e54:	8b a5       	lds	r24, 0x6b
    1e56:	9c a5       	lds	r25, 0x6c
    1e58:	ad a5       	lds	r26, 0x6d
    1e5a:	be a5       	lds	r27, 0x6e
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	a1 05       	cpc	r26, r1
    1e60:	b1 05       	cpc	r27, r1
    1e62:	09 f0       	breq	.+2      	; 0x1e66 <__stack+0xd67>
    1e64:	85 c0       	rjmp	.+266    	; 0x1f70 <__stack+0xe71>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 2... */
		switch(handle->stateConfVector[ 2 ]) {
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	8d 30       	cpi	r24, 0x0D	; 13
    1e6a:	e9 f1       	breq	.+122    	; 0x1ee6 <__stack+0xde7>
    1e6c:	8e 30       	cpi	r24, 0x0E	; 14
    1e6e:	70 f4       	brcc	.+28     	; 0x1e8c <__stack+0xd8d>
    1e70:	8a 30       	cpi	r24, 0x0A	; 10
    1e72:	21 f1       	breq	.+72     	; 0x1ebc <__stack+0xdbd>
    1e74:	8b 30       	cpi	r24, 0x0B	; 11
    1e76:	20 f4       	brcc	.+8      	; 0x1e80 <__stack+0xd81>
    1e78:	89 30       	cpi	r24, 0x09	; 9
    1e7a:	09 f0       	breq	.+2      	; 0x1e7e <__stack+0xd7f>
    1e7c:	5d c0       	rjmp	.+186    	; 0x1f38 <__stack+0xe39>
    1e7e:	17 c0       	rjmp	.+46     	; 0x1eae <__stack+0xdaf>
    1e80:	8b 30       	cpi	r24, 0x0B	; 11
    1e82:	19 f1       	breq	.+70     	; 0x1eca <__stack+0xdcb>
    1e84:	8c 30       	cpi	r24, 0x0C	; 12
    1e86:	09 f0       	breq	.+2      	; 0x1e8a <__stack+0xd8b>
    1e88:	57 c0       	rjmp	.+174    	; 0x1f38 <__stack+0xe39>
    1e8a:	26 c0       	rjmp	.+76     	; 0x1ed8 <__stack+0xdd9>
    1e8c:	80 31       	cpi	r24, 0x10	; 16
    1e8e:	09 f4       	brne	.+2      	; 0x1e92 <__stack+0xd93>
    1e90:	3f c0       	rjmp	.+126    	; 0x1f10 <__stack+0xe11>
    1e92:	81 31       	cpi	r24, 0x11	; 17
    1e94:	30 f4       	brcc	.+12     	; 0x1ea2 <__stack+0xda3>
    1e96:	8e 30       	cpi	r24, 0x0E	; 14
    1e98:	69 f1       	breq	.+90     	; 0x1ef4 <__stack+0xdf5>
    1e9a:	8f 30       	cpi	r24, 0x0F	; 15
    1e9c:	09 f0       	breq	.+2      	; 0x1ea0 <__stack+0xda1>
    1e9e:	4c c0       	rjmp	.+152    	; 0x1f38 <__stack+0xe39>
    1ea0:	30 c0       	rjmp	.+96     	; 0x1f02 <__stack+0xe03>
    1ea2:	81 31       	cpi	r24, 0x11	; 17
    1ea4:	e1 f1       	breq	.+120    	; 0x1f1e <__stack+0xe1f>
    1ea6:	82 31       	cpi	r24, 0x12	; 18
    1ea8:	09 f0       	breq	.+2      	; 0x1eac <__stack+0xdad>
    1eaa:	46 c0       	rjmp	.+140    	; 0x1f38 <__stack+0xe39>
    1eac:	3f c0       	rjmp	.+126    	; 0x1f2c <__stack+0xe2d>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[2] = SMO_last_state;
    1eae:	85 e1       	ldi	r24, 0x15	; 21
    1eb0:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1eb2:	82 e0       	ldi	r24, 0x02	; 2
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	9c 83       	std	Y+4, r25	; 0x04
    1eb8:	8b 83       	std	Y+3, r24	; 0x03
    1eba:	3e c0       	rjmp	.+124    	; 0x1f38 <__stack+0xe39>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[2] = SMO_last_state;
    1ebc:	85 e1       	ldi	r24, 0x15	; 21
    1ebe:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1ec0:	82 e0       	ldi	r24, 0x02	; 2
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	9c 83       	std	Y+4, r25	; 0x04
    1ec6:	8b 83       	std	Y+3, r24	; 0x03
    1ec8:	37 c0       	rjmp	.+110    	; 0x1f38 <__stack+0xe39>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[2] = SMO_last_state;
    1eca:	85 e1       	ldi	r24, 0x15	; 21
    1ecc:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1ece:	82 e0       	ldi	r24, 0x02	; 2
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	9c 83       	std	Y+4, r25	; 0x04
    1ed4:	8b 83       	std	Y+3, r24	; 0x03
    1ed6:	30 c0       	rjmp	.+96     	; 0x1f38 <__stack+0xe39>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[2] = SMO_last_state;
    1ed8:	85 e1       	ldi	r24, 0x15	; 21
    1eda:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1edc:	82 e0       	ldi	r24, 0x02	; 2
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	9c 83       	std	Y+4, r25	; 0x04
    1ee2:	8b 83       	std	Y+3, r24	; 0x03
    1ee4:	29 c0       	rjmp	.+82     	; 0x1f38 <__stack+0xe39>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[2] = SMO_last_state;
    1ee6:	85 e1       	ldi	r24, 0x15	; 21
    1ee8:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1eea:	82 e0       	ldi	r24, 0x02	; 2
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	9c 83       	std	Y+4, r25	; 0x04
    1ef0:	8b 83       	std	Y+3, r24	; 0x03
    1ef2:	22 c0       	rjmp	.+68     	; 0x1f38 <__stack+0xe39>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[2] = SMO_last_state;
    1ef4:	85 e1       	ldi	r24, 0x15	; 21
    1ef6:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1ef8:	82 e0       	ldi	r24, 0x02	; 2
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	9c 83       	std	Y+4, r25	; 0x04
    1efe:	8b 83       	std	Y+3, r24	; 0x03
    1f00:	1b c0       	rjmp	.+54     	; 0x1f38 <__stack+0xe39>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0 : {
				/* Default exit sequence for state CheckAmount0 */
				handle->stateConfVector[2] = SMO_last_state;
    1f02:	85 e1       	ldi	r24, 0x15	; 21
    1f04:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1f06:	82 e0       	ldi	r24, 0x02	; 2
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	9c 83       	std	Y+4, r25	; 0x04
    1f0c:	8b 83       	std	Y+3, r24	; 0x03
    1f0e:	14 c0       	rjmp	.+40     	; 0x1f38 <__stack+0xe39>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[2] = SMO_last_state;
    1f10:	85 e1       	ldi	r24, 0x15	; 21
    1f12:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1f14:	82 e0       	ldi	r24, 0x02	; 2
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	9c 83       	std	Y+4, r25	; 0x04
    1f1a:	8b 83       	std	Y+3, r24	; 0x03
    1f1c:	0d c0       	rjmp	.+26     	; 0x1f38 <__stack+0xe39>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_SendData : {
				/* Default exit sequence for state SendData */
				handle->stateConfVector[2] = SMO_last_state;
    1f1e:	85 e1       	ldi	r24, 0x15	; 21
    1f20:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1f22:	82 e0       	ldi	r24, 0x02	; 2
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	9c 83       	std	Y+4, r25	; 0x04
    1f28:	8b 83       	std	Y+3, r24	; 0x03
    1f2a:	06 c0       	rjmp	.+12     	; 0x1f38 <__stack+0xe39>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[2] = SMO_last_state;
    1f2c:	85 e1       	ldi	r24, 0x15	; 21
    1f2e:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1f30:	82 e0       	ldi	r24, 0x02	; 2
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	9c 83       	std	Y+4, r25	; 0x04
    1f36:	8b 83       	std	Y+3, r24	; 0x03
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1f38:	0e 94 43 02 	call	0x486	; 0x486 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1f3c:	8e ef       	ldi	r24, 0xFE	; 254
    1f3e:	91 e0       	ldi	r25, 0x01	; 1
    1f40:	0e 94 10 02 	call	0x420	; 0x420 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    1f44:	8c e0       	ldi	r24, 0x0C	; 12
    1f46:	92 e0       	ldi	r25, 0x02	; 2
    1f48:	40 e0       	ldi	r20, 0x00	; 0
    1f4a:	50 e0       	ldi	r21, 0x00	; 0
    1f4c:	ba 01       	movw	r22, r20
    1f4e:	01 e0       	ldi	r16, 0x01	; 1
    1f50:	10 e0       	ldi	r17, 0x00	; 0
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	0e 94 13 02 	call	0x426	; 0x426 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1f5a:	1b a6       	lds	r17, 0xbb
    1f5c:	1c a6       	lds	r17, 0xbc
    1f5e:	1d a6       	lds	r17, 0xbd
    1f60:	1e a6       	lds	r17, 0xbe
		handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1f62:	87 e0       	ldi	r24, 0x07	; 7
    1f64:	8a 83       	std	Y+2, r24	; 0x02
		handle->stateConfVectorPosition = 2;
    1f66:	82 e0       	ldi	r24, 0x02	; 2
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	9c 83       	std	Y+4, r25	; 0x04
    1f6c:	8b 83       	std	Y+3, r24	; 0x03
    1f6e:	c8 c1       	rjmp	.+912    	; 0x2300 <__stack+0x1201>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state EnterAmount */
			handle->stateConfVector[2] = SMO_last_state;
			handle->stateConfVectorPosition = 2;
    1f70:	1c 83       	std	Y+4, r17	; 0x04
    1f72:	0b 83       	std	Y+3, r16	; 0x03
			/* Default enter sequence for state CheckKeyPress2 */
			/* Entry action for state 'CheckKeyPress2'. */
			handle->ifaceKEYPAD.lastkey = 0;
    1f74:	19 86       	std	Y+9, r1	; 0x09
    1f76:	1a 86       	std	Y+10, r1	; 0x0a
    1f78:	1b 86       	std	Y+11, r1	; 0x0b
    1f7a:	1c 86       	std	Y+12, r1	; 0x0c
			handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2;
    1f7c:	8a 82       	std	Y+2, r8	; 0x02
    1f7e:	97 c1       	rjmp	.+814    	; 0x22ae <__stack+0x11af>
}

/* The reactions of state SendData. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_SendData(SMO* handle) {
	/* The reactions of state SendData. */
	if (handle->iface.menuId == 0) { 
    1f80:	8b a5       	lds	r24, 0x6b
    1f82:	9c a5       	lds	r25, 0x6c
    1f84:	ad a5       	lds	r26, 0x6d
    1f86:	be a5       	lds	r27, 0x6e
    1f88:	00 97       	sbiw	r24, 0x00	; 0
    1f8a:	a1 05       	cpc	r26, r1
    1f8c:	b1 05       	cpc	r27, r1
    1f8e:	09 f0       	breq	.+2      	; 0x1f92 <__stack+0xe93>
    1f90:	85 c0       	rjmp	.+266    	; 0x209c <__stack+0xf9d>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 2... */
		switch(handle->stateConfVector[ 2 ]) {
    1f92:	8a 81       	ldd	r24, Y+2	; 0x02
    1f94:	8d 30       	cpi	r24, 0x0D	; 13
    1f96:	e9 f1       	breq	.+122    	; 0x2012 <__stack+0xf13>
    1f98:	8e 30       	cpi	r24, 0x0E	; 14
    1f9a:	70 f4       	brcc	.+28     	; 0x1fb8 <__stack+0xeb9>
    1f9c:	8a 30       	cpi	r24, 0x0A	; 10
    1f9e:	21 f1       	breq	.+72     	; 0x1fe8 <__stack+0xee9>
    1fa0:	8b 30       	cpi	r24, 0x0B	; 11
    1fa2:	20 f4       	brcc	.+8      	; 0x1fac <__stack+0xead>
    1fa4:	89 30       	cpi	r24, 0x09	; 9
    1fa6:	09 f0       	breq	.+2      	; 0x1faa <__stack+0xeab>
    1fa8:	5d c0       	rjmp	.+186    	; 0x2064 <__stack+0xf65>
    1faa:	17 c0       	rjmp	.+46     	; 0x1fda <__stack+0xedb>
    1fac:	8b 30       	cpi	r24, 0x0B	; 11
    1fae:	19 f1       	breq	.+70     	; 0x1ff6 <__stack+0xef7>
    1fb0:	8c 30       	cpi	r24, 0x0C	; 12
    1fb2:	09 f0       	breq	.+2      	; 0x1fb6 <__stack+0xeb7>
    1fb4:	57 c0       	rjmp	.+174    	; 0x2064 <__stack+0xf65>
    1fb6:	26 c0       	rjmp	.+76     	; 0x2004 <__stack+0xf05>
    1fb8:	80 31       	cpi	r24, 0x10	; 16
    1fba:	09 f4       	brne	.+2      	; 0x1fbe <__stack+0xebf>
    1fbc:	3f c0       	rjmp	.+126    	; 0x203c <__stack+0xf3d>
    1fbe:	81 31       	cpi	r24, 0x11	; 17
    1fc0:	30 f4       	brcc	.+12     	; 0x1fce <__stack+0xecf>
    1fc2:	8e 30       	cpi	r24, 0x0E	; 14
    1fc4:	69 f1       	breq	.+90     	; 0x2020 <__stack+0xf21>
    1fc6:	8f 30       	cpi	r24, 0x0F	; 15
    1fc8:	09 f0       	breq	.+2      	; 0x1fcc <__stack+0xecd>
    1fca:	4c c0       	rjmp	.+152    	; 0x2064 <__stack+0xf65>
    1fcc:	30 c0       	rjmp	.+96     	; 0x202e <__stack+0xf2f>
    1fce:	81 31       	cpi	r24, 0x11	; 17
    1fd0:	e1 f1       	breq	.+120    	; 0x204a <__stack+0xf4b>
    1fd2:	82 31       	cpi	r24, 0x12	; 18
    1fd4:	09 f0       	breq	.+2      	; 0x1fd8 <__stack+0xed9>
    1fd6:	46 c0       	rjmp	.+140    	; 0x2064 <__stack+0xf65>
    1fd8:	3f c0       	rjmp	.+126    	; 0x2058 <__stack+0xf59>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[2] = SMO_last_state;
    1fda:	85 e1       	ldi	r24, 0x15	; 21
    1fdc:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1fde:	82 e0       	ldi	r24, 0x02	; 2
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	9c 83       	std	Y+4, r25	; 0x04
    1fe4:	8b 83       	std	Y+3, r24	; 0x03
    1fe6:	3e c0       	rjmp	.+124    	; 0x2064 <__stack+0xf65>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[2] = SMO_last_state;
    1fe8:	85 e1       	ldi	r24, 0x15	; 21
    1fea:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1fec:	82 e0       	ldi	r24, 0x02	; 2
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	9c 83       	std	Y+4, r25	; 0x04
    1ff2:	8b 83       	std	Y+3, r24	; 0x03
    1ff4:	37 c0       	rjmp	.+110    	; 0x2064 <__stack+0xf65>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[2] = SMO_last_state;
    1ff6:	85 e1       	ldi	r24, 0x15	; 21
    1ff8:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    1ffa:	82 e0       	ldi	r24, 0x02	; 2
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	9c 83       	std	Y+4, r25	; 0x04
    2000:	8b 83       	std	Y+3, r24	; 0x03
    2002:	30 c0       	rjmp	.+96     	; 0x2064 <__stack+0xf65>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[2] = SMO_last_state;
    2004:	85 e1       	ldi	r24, 0x15	; 21
    2006:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    2008:	82 e0       	ldi	r24, 0x02	; 2
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	9c 83       	std	Y+4, r25	; 0x04
    200e:	8b 83       	std	Y+3, r24	; 0x03
    2010:	29 c0       	rjmp	.+82     	; 0x2064 <__stack+0xf65>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[2] = SMO_last_state;
    2012:	85 e1       	ldi	r24, 0x15	; 21
    2014:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    2016:	82 e0       	ldi	r24, 0x02	; 2
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	9c 83       	std	Y+4, r25	; 0x04
    201c:	8b 83       	std	Y+3, r24	; 0x03
    201e:	22 c0       	rjmp	.+68     	; 0x2064 <__stack+0xf65>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[2] = SMO_last_state;
    2020:	85 e1       	ldi	r24, 0x15	; 21
    2022:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    2024:	82 e0       	ldi	r24, 0x02	; 2
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	9c 83       	std	Y+4, r25	; 0x04
    202a:	8b 83       	std	Y+3, r24	; 0x03
    202c:	1b c0       	rjmp	.+54     	; 0x2064 <__stack+0xf65>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0 : {
				/* Default exit sequence for state CheckAmount0 */
				handle->stateConfVector[2] = SMO_last_state;
    202e:	85 e1       	ldi	r24, 0x15	; 21
    2030:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    2032:	82 e0       	ldi	r24, 0x02	; 2
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	9c 83       	std	Y+4, r25	; 0x04
    2038:	8b 83       	std	Y+3, r24	; 0x03
    203a:	14 c0       	rjmp	.+40     	; 0x2064 <__stack+0xf65>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[2] = SMO_last_state;
    203c:	85 e1       	ldi	r24, 0x15	; 21
    203e:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    2040:	82 e0       	ldi	r24, 0x02	; 2
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	9c 83       	std	Y+4, r25	; 0x04
    2046:	8b 83       	std	Y+3, r24	; 0x03
    2048:	0d c0       	rjmp	.+26     	; 0x2064 <__stack+0xf65>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_SendData : {
				/* Default exit sequence for state SendData */
				handle->stateConfVector[2] = SMO_last_state;
    204a:	85 e1       	ldi	r24, 0x15	; 21
    204c:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    204e:	82 e0       	ldi	r24, 0x02	; 2
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	9c 83       	std	Y+4, r25	; 0x04
    2054:	8b 83       	std	Y+3, r24	; 0x03
    2056:	06 c0       	rjmp	.+12     	; 0x2064 <__stack+0xf65>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[2] = SMO_last_state;
    2058:	85 e1       	ldi	r24, 0x15	; 21
    205a:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    205c:	82 e0       	ldi	r24, 0x02	; 2
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	9c 83       	std	Y+4, r25	; 0x04
    2062:	8b 83       	std	Y+3, r24	; 0x03
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    2064:	0e 94 43 02 	call	0x486	; 0x486 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    2068:	8e ef       	ldi	r24, 0xFE	; 254
    206a:	91 e0       	ldi	r25, 0x01	; 1
    206c:	0e 94 10 02 	call	0x420	; 0x420 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    2070:	8c e0       	ldi	r24, 0x0C	; 12
    2072:	92 e0       	ldi	r25, 0x02	; 2
    2074:	40 e0       	ldi	r20, 0x00	; 0
    2076:	50 e0       	ldi	r21, 0x00	; 0
    2078:	ba 01       	movw	r22, r20
    207a:	01 e0       	ldi	r16, 0x01	; 1
    207c:	10 e0       	ldi	r17, 0x00	; 0
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	0e 94 13 02 	call	0x426	; 0x426 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    2086:	1b a6       	lds	r17, 0xbb
    2088:	1c a6       	lds	r17, 0xbc
    208a:	1d a6       	lds	r17, 0xbd
    208c:	1e a6       	lds	r17, 0xbe
		handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    208e:	87 e0       	ldi	r24, 0x07	; 7
    2090:	8a 83       	std	Y+2, r24	; 0x02
		handle->stateConfVectorPosition = 2;
    2092:	82 e0       	ldi	r24, 0x02	; 2
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	9c 83       	std	Y+4, r25	; 0x04
    2098:	8b 83       	std	Y+3, r24	; 0x03
    209a:	32 c1       	rjmp	.+612    	; 0x2300 <__stack+0x1201>
	}  else {
		if (handle->ifaceRF.result == bool_true) { 
    209c:	28 8d       	ldd	r18, Y+24	; 0x18
    209e:	22 23       	and	r18, r18
    20a0:	31 f1       	breq	.+76     	; 0x20ee <__stack+0xfef>
			/* Default exit sequence for state SendData */
			handle->stateConfVector[2] = SMO_last_state;
    20a2:	85 e1       	ldi	r24, 0x15	; 21
    20a4:	8a 83       	std	Y+2, r24	; 0x02
			handle->stateConfVectorPosition = 2;
    20a6:	ee 24       	eor	r14, r14
    20a8:	ff 24       	eor	r15, r15
    20aa:	68 94       	set
    20ac:	e1 f8       	bld	r14, 1
    20ae:	fc 82       	std	Y+4, r15	; 0x04
    20b0:	eb 82       	std	Y+3, r14	; 0x03
			/* Default enter sequence for state ShowCode */
			/* Entry action for state 'ShowCode'. */
			sMOIfaceLCD_clear();
    20b2:	0e 94 43 02 	call	0x486	; 0x486 <sMOIfaceLCD_clear>
			sMOIfaceLCD_writeString("Nhap ma mon an:");
    20b6:	88 e1       	ldi	r24, 0x18	; 24
    20b8:	92 e0       	ldi	r25, 0x02	; 2
    20ba:	0e 94 10 02 	call	0x420	; 0x420 <sMOIfaceLCD_writeString>
			sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    20be:	88 e2       	ldi	r24, 0x28	; 40
    20c0:	92 e0       	ldi	r25, 0x02	; 2
    20c2:	40 e0       	ldi	r20, 0x00	; 0
    20c4:	50 e0       	ldi	r21, 0x00	; 0
    20c6:	ba 01       	movw	r22, r20
    20c8:	01 e0       	ldi	r16, 0x01	; 1
    20ca:	10 e0       	ldi	r17, 0x00	; 0
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	0e 94 13 02 	call	0x426	; 0x426 <sMOIfaceLCD_writeStringXY>
			handle->ifaceDISH.pos = 0;
    20d4:	1e a2       	lds	r17, 0x9e
    20d6:	1f a2       	lds	r17, 0x9f
    20d8:	18 a6       	lds	r17, 0xb8
    20da:	19 a6       	lds	r17, 0xb9
			handle->ifaceDISH.ID = 0;
    20dc:	1e 8e       	std	Y+30, r1	; 0x1e
    20de:	1f 8e       	std	Y+31, r1	; 0x1f
    20e0:	18 a2       	lds	r17, 0x98
    20e2:	19 a2       	lds	r17, 0x99
			handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    20e4:	89 e0       	ldi	r24, 0x09	; 9
    20e6:	8a 83       	std	Y+2, r24	; 0x02
			handle->stateConfVectorPosition = 2;
    20e8:	fc 82       	std	Y+4, r15	; 0x04
    20ea:	eb 82       	std	Y+3, r14	; 0x03
    20ec:	09 c1       	rjmp	.+530    	; 0x2300 <__stack+0x1201>
		}  else {
			if (handle->ifaceRF.result == bool_false) { 
				/* Default enter sequence for state SendData */
				/* Entry action for state 'SendData'. */
				handle->ifaceRF.result = sMOIfaceRF_sendData(handle->iface.menuId, handle->iface.tableId, handle->ifaceDISH.ID, handle->ifaceDISH.amount);
    20ee:	2f a5       	lds	r18, 0x6f
    20f0:	38 a9       	sts	0x48, r19
    20f2:	49 a9       	sts	0x49, r20
    20f4:	5a a9       	sts	0x4a, r21
    20f6:	ee 8c       	ldd	r14, Y+30	; 0x1e
    20f8:	ff 8c       	ldd	r15, Y+31	; 0x1f
    20fa:	08 a1       	lds	r16, 0x48
    20fc:	19 a1       	lds	r17, 0x49
    20fe:	aa a0       	lds	r26, 0x8a
    2100:	bb a0       	lds	r27, 0x8b
    2102:	cc a0       	lds	r28, 0x8c
    2104:	dd a0       	lds	r29, 0x8d
    2106:	bc 01       	movw	r22, r24
    2108:	cd 01       	movw	r24, r26
    210a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <sMOIfaceRF_sendData>
    210e:	88 8f       	std	Y+24, r24	; 0x18
				handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_SendData;
    2110:	81 e1       	ldi	r24, 0x11	; 17
    2112:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    2114:	82 e0       	ldi	r24, 0x02	; 2
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	9c 83       	std	Y+4, r25	; 0x04
    211a:	8b 83       	std	Y+3, r24	; 0x03
    211c:	f1 c0       	rjmp	.+482    	; 0x2300 <__stack+0x1201>
}

/* The reactions of state null. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1__final_0(SMO* handle) {
	/* The reactions of state null. */
	if (handle->iface.menuId == 0) { 
    211e:	8b a5       	lds	r24, 0x6b
    2120:	9c a5       	lds	r25, 0x6c
    2122:	ad a5       	lds	r26, 0x6d
    2124:	be a5       	lds	r27, 0x6e
    2126:	00 97       	sbiw	r24, 0x00	; 0
    2128:	a1 05       	cpc	r26, r1
    212a:	b1 05       	cpc	r27, r1
    212c:	09 f0       	breq	.+2      	; 0x2130 <__stack+0x1031>
    212e:	bf c0       	rjmp	.+382    	; 0x22ae <__stack+0x11af>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 2... */
		switch(handle->stateConfVector[ 2 ]) {
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	8d 30       	cpi	r24, 0x0D	; 13
    2134:	e9 f1       	breq	.+122    	; 0x21b0 <__stack+0x10b1>
    2136:	8e 30       	cpi	r24, 0x0E	; 14
    2138:	70 f4       	brcc	.+28     	; 0x2156 <__stack+0x1057>
    213a:	8a 30       	cpi	r24, 0x0A	; 10
    213c:	21 f1       	breq	.+72     	; 0x2186 <__stack+0x1087>
    213e:	8b 30       	cpi	r24, 0x0B	; 11
    2140:	20 f4       	brcc	.+8      	; 0x214a <__stack+0x104b>
    2142:	89 30       	cpi	r24, 0x09	; 9
    2144:	09 f0       	breq	.+2      	; 0x2148 <__stack+0x1049>
    2146:	5d c0       	rjmp	.+186    	; 0x2202 <__stack+0x1103>
    2148:	17 c0       	rjmp	.+46     	; 0x2178 <__stack+0x1079>
    214a:	8b 30       	cpi	r24, 0x0B	; 11
    214c:	19 f1       	breq	.+70     	; 0x2194 <__stack+0x1095>
    214e:	8c 30       	cpi	r24, 0x0C	; 12
    2150:	09 f0       	breq	.+2      	; 0x2154 <__stack+0x1055>
    2152:	57 c0       	rjmp	.+174    	; 0x2202 <__stack+0x1103>
    2154:	26 c0       	rjmp	.+76     	; 0x21a2 <__stack+0x10a3>
    2156:	80 31       	cpi	r24, 0x10	; 16
    2158:	09 f4       	brne	.+2      	; 0x215c <__stack+0x105d>
    215a:	3f c0       	rjmp	.+126    	; 0x21da <__stack+0x10db>
    215c:	81 31       	cpi	r24, 0x11	; 17
    215e:	30 f4       	brcc	.+12     	; 0x216c <__stack+0x106d>
    2160:	8e 30       	cpi	r24, 0x0E	; 14
    2162:	69 f1       	breq	.+90     	; 0x21be <__stack+0x10bf>
    2164:	8f 30       	cpi	r24, 0x0F	; 15
    2166:	09 f0       	breq	.+2      	; 0x216a <__stack+0x106b>
    2168:	4c c0       	rjmp	.+152    	; 0x2202 <__stack+0x1103>
    216a:	30 c0       	rjmp	.+96     	; 0x21cc <__stack+0x10cd>
    216c:	81 31       	cpi	r24, 0x11	; 17
    216e:	e1 f1       	breq	.+120    	; 0x21e8 <__stack+0x10e9>
    2170:	82 31       	cpi	r24, 0x12	; 18
    2172:	09 f0       	breq	.+2      	; 0x2176 <__stack+0x1077>
    2174:	46 c0       	rjmp	.+140    	; 0x2202 <__stack+0x1103>
    2176:	3f c0       	rjmp	.+126    	; 0x21f6 <__stack+0x10f7>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[2] = SMO_last_state;
    2178:	85 e1       	ldi	r24, 0x15	; 21
    217a:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    217c:	82 e0       	ldi	r24, 0x02	; 2
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	9c 83       	std	Y+4, r25	; 0x04
    2182:	8b 83       	std	Y+3, r24	; 0x03
    2184:	3e c0       	rjmp	.+124    	; 0x2202 <__stack+0x1103>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[2] = SMO_last_state;
    2186:	85 e1       	ldi	r24, 0x15	; 21
    2188:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    218a:	82 e0       	ldi	r24, 0x02	; 2
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	9c 83       	std	Y+4, r25	; 0x04
    2190:	8b 83       	std	Y+3, r24	; 0x03
    2192:	37 c0       	rjmp	.+110    	; 0x2202 <__stack+0x1103>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[2] = SMO_last_state;
    2194:	85 e1       	ldi	r24, 0x15	; 21
    2196:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    2198:	82 e0       	ldi	r24, 0x02	; 2
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	9c 83       	std	Y+4, r25	; 0x04
    219e:	8b 83       	std	Y+3, r24	; 0x03
    21a0:	30 c0       	rjmp	.+96     	; 0x2202 <__stack+0x1103>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[2] = SMO_last_state;
    21a2:	85 e1       	ldi	r24, 0x15	; 21
    21a4:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    21a6:	82 e0       	ldi	r24, 0x02	; 2
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	9c 83       	std	Y+4, r25	; 0x04
    21ac:	8b 83       	std	Y+3, r24	; 0x03
    21ae:	29 c0       	rjmp	.+82     	; 0x2202 <__stack+0x1103>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[2] = SMO_last_state;
    21b0:	85 e1       	ldi	r24, 0x15	; 21
    21b2:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    21b4:	82 e0       	ldi	r24, 0x02	; 2
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	9c 83       	std	Y+4, r25	; 0x04
    21ba:	8b 83       	std	Y+3, r24	; 0x03
    21bc:	22 c0       	rjmp	.+68     	; 0x2202 <__stack+0x1103>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[2] = SMO_last_state;
    21be:	85 e1       	ldi	r24, 0x15	; 21
    21c0:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    21c2:	82 e0       	ldi	r24, 0x02	; 2
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	9c 83       	std	Y+4, r25	; 0x04
    21c8:	8b 83       	std	Y+3, r24	; 0x03
    21ca:	1b c0       	rjmp	.+54     	; 0x2202 <__stack+0x1103>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0 : {
				/* Default exit sequence for state CheckAmount0 */
				handle->stateConfVector[2] = SMO_last_state;
    21cc:	85 e1       	ldi	r24, 0x15	; 21
    21ce:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    21d0:	82 e0       	ldi	r24, 0x02	; 2
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	9c 83       	std	Y+4, r25	; 0x04
    21d6:	8b 83       	std	Y+3, r24	; 0x03
    21d8:	14 c0       	rjmp	.+40     	; 0x2202 <__stack+0x1103>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[2] = SMO_last_state;
    21da:	85 e1       	ldi	r24, 0x15	; 21
    21dc:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    21de:	82 e0       	ldi	r24, 0x02	; 2
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	9c 83       	std	Y+4, r25	; 0x04
    21e4:	8b 83       	std	Y+3, r24	; 0x03
    21e6:	0d c0       	rjmp	.+26     	; 0x2202 <__stack+0x1103>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_SendData : {
				/* Default exit sequence for state SendData */
				handle->stateConfVector[2] = SMO_last_state;
    21e8:	85 e1       	ldi	r24, 0x15	; 21
    21ea:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    21ec:	82 e0       	ldi	r24, 0x02	; 2
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	9c 83       	std	Y+4, r25	; 0x04
    21f2:	8b 83       	std	Y+3, r24	; 0x03
    21f4:	06 c0       	rjmp	.+12     	; 0x2202 <__stack+0x1103>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[2] = SMO_last_state;
    21f6:	85 e1       	ldi	r24, 0x15	; 21
    21f8:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    21fa:	82 e0       	ldi	r24, 0x02	; 2
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	9c 83       	std	Y+4, r25	; 0x04
    2200:	8b 83       	std	Y+3, r24	; 0x03
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    2202:	0e 94 43 02 	call	0x486	; 0x486 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    2206:	8e ef       	ldi	r24, 0xFE	; 254
    2208:	91 e0       	ldi	r25, 0x01	; 1
    220a:	0e 94 10 02 	call	0x420	; 0x420 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    220e:	8c e0       	ldi	r24, 0x0C	; 12
    2210:	92 e0       	ldi	r25, 0x02	; 2
    2212:	40 e0       	ldi	r20, 0x00	; 0
    2214:	50 e0       	ldi	r21, 0x00	; 0
    2216:	ba 01       	movw	r22, r20
    2218:	01 e0       	ldi	r16, 0x01	; 1
    221a:	10 e0       	ldi	r17, 0x00	; 0
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	0e 94 13 02 	call	0x426	; 0x426 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    2224:	1b a6       	lds	r17, 0xbb
    2226:	1c a6       	lds	r17, 0xbc
    2228:	1d a6       	lds	r17, 0xbd
    222a:	1e a6       	lds	r17, 0xbe
		handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    222c:	87 e0       	ldi	r24, 0x07	; 7
    222e:	8a 83       	std	Y+2, r24	; 0x02
		handle->stateConfVectorPosition = 2;
    2230:	82 e0       	ldi	r24, 0x02	; 2
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	9c 83       	std	Y+4, r25	; 0x04
    2236:	8b 83       	std	Y+3, r24	; 0x03
    2238:	63 c0       	rjmp	.+198    	; 0x2300 <__stack+0x1201>
/* The reactions of state MenuA. */
static void sMO_react_main_region_on_r1_Running_running_main_MenuA(SMO* handle) {
	/* The reactions of state MenuA. */
	if (bool_true) { 
		/* Default exit sequence for state MenuA */
		handle->stateConfVector[2] = SMO_last_state;
    223a:	85 e1       	ldi	r24, 0x15	; 21
    223c:	8a 83       	std	Y+2, r24	; 0x02
		handle->stateConfVectorPosition = 2;
    223e:	ee 24       	eor	r14, r14
    2240:	ff 24       	eor	r15, r15
    2242:	68 94       	set
    2244:	e1 f8       	bld	r14, 1
    2246:	fc 82       	std	Y+4, r15	; 0x04
    2248:	eb 82       	std	Y+3, r14	; 0x03
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    224a:	0e 94 43 02 	call	0x486	; 0x486 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Nhap ma mon an:");
    224e:	88 e1       	ldi	r24, 0x18	; 24
    2250:	92 e0       	ldi	r25, 0x02	; 2
    2252:	0e 94 10 02 	call	0x420	; 0x420 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    2256:	88 e2       	ldi	r24, 0x28	; 40
    2258:	92 e0       	ldi	r25, 0x02	; 2
    225a:	40 e0       	ldi	r20, 0x00	; 0
    225c:	50 e0       	ldi	r21, 0x00	; 0
    225e:	ba 01       	movw	r22, r20
    2260:	01 e0       	ldi	r16, 0x01	; 1
    2262:	10 e0       	ldi	r17, 0x00	; 0
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	0e 94 13 02 	call	0x426	; 0x426 <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    226c:	1e a2       	lds	r17, 0x9e
    226e:	1f a2       	lds	r17, 0x9f
    2270:	18 a6       	lds	r17, 0xb8
    2272:	19 a6       	lds	r17, 0xb9
		handle->ifaceDISH.ID = 0;
    2274:	1e 8e       	std	Y+30, r1	; 0x1e
    2276:	1f 8e       	std	Y+31, r1	; 0x1f
    2278:	18 a2       	lds	r17, 0x98
    227a:	19 a2       	lds	r17, 0x99
		handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    227c:	89 e0       	ldi	r24, 0x09	; 9
    227e:	8a 83       	std	Y+2, r24	; 0x02
		handle->stateConfVectorPosition = 2;
    2280:	fc 82       	std	Y+4, r15	; 0x04
    2282:	eb 82       	std	Y+3, r14	; 0x03
    2284:	3d c0       	rjmp	.+122    	; 0x2300 <__stack+0x1201>
}

/* The reactions of state CheckKeyPress. */
static void sMO_react_main_region_on_r1_Running_running_main_CheckKeyPress(SMO* handle) {
	/* The reactions of state CheckKeyPress. */
	if (handle->ifaceKEYPAD.lastkey == 13 && handle->ifaceKEYPAD.key_pressed_raised) { 
    2286:	89 85       	ldd	r24, Y+9	; 0x09
    2288:	9a 85       	ldd	r25, Y+10	; 0x0a
    228a:	ab 85       	ldd	r26, Y+11	; 0x0b
    228c:	bc 85       	ldd	r27, Y+12	; 0x0c
    228e:	8d 30       	cpi	r24, 0x0D	; 13
    2290:	91 05       	cpc	r25, r1
    2292:	a1 05       	cpc	r26, r1
    2294:	b1 05       	cpc	r27, r1
    2296:	59 f4       	brne	.+22     	; 0x22ae <__stack+0x11af>
    2298:	8e 85       	ldd	r24, Y+14	; 0x0e
    229a:	88 23       	and	r24, r24
    229c:	41 f0       	breq	.+16     	; 0x22ae <__stack+0x11af>
		/* Default exit sequence for state CheckKeyPress */
		handle->stateConfVector[2] = SMO_last_state;
		handle->stateConfVectorPosition = 2;
    229e:	1c 83       	std	Y+4, r17	; 0x04
    22a0:	0b 83       	std	Y+3, r16	; 0x03
		/* Default enter sequence for state MenuA */
		/* Entry action for state 'MenuA'. */
		handle->iface.menuId = 1;
    22a2:	2b a6       	lds	r18, 0xbb
    22a4:	3c a6       	lds	r19, 0xbc
    22a6:	4d a6       	lds	r20, 0xbd
    22a8:	5e a6       	lds	r21, 0xbe
		handle->stateConfVector[2] = SMO_main_region_on_r1_Running_running_main_MenuA;
    22aa:	83 e1       	ldi	r24, 0x13	; 19
    22ac:	8a 83       	std	Y+2, r24	; 0x02
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	9c 81       	ldd	r25, Y+4	; 0x04
    22b2:	01 96       	adiw	r24, 0x01	; 1
    22b4:	9c 83       	std	Y+4, r25	; 0x04
    22b6:	8b 83       	std	Y+3, r24	; 0x03

void sMO_runCycle(SMO* handle) {
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
    22b8:	83 30       	cpi	r24, 0x03	; 3
    22ba:	91 05       	cpc	r25, r1
    22bc:	10 f4       	brcc	.+4      	; 0x22c2 <__stack+0x11c3>
    22be:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <sMO_runCycle+0x66>
	}
	sMO_exitaction(handle);
}

static void clearInEvents(SMO* handle) {
	handle->ifaceKEYPAD.key_pressed_raised = bool_false;
    22c2:	1e 86       	std	Y+14, r1	; 0x0e
	handle->ifaceUART.DataRecieved_raised = bool_false;
    22c4:	1b 8a       	std	Y+19, r1	; 0x13
	handle->ifaceRF.DataRecieved_raised = bool_false;
    22c6:	1d 8e       	std	Y+29, r1	; 0x1d
	handle->iface.switchOff_raised = bool_false;
    22c8:	1b aa       	sts	0x9b, r17
	handle->iface.switchOn_raised = bool_false;
    22ca:	1c aa       	sts	0x9c, r17
			break;
		}
	}
	
	clearInEvents(handle);
}
    22cc:	df 91       	pop	r29
    22ce:	cf 91       	pop	r28
    22d0:	1f 91       	pop	r17
    22d2:	0f 91       	pop	r16
    22d4:	ff 90       	pop	r15
    22d6:	ef 90       	pop	r14
    22d8:	df 90       	pop	r13
    22da:	cf 90       	pop	r12
    22dc:	bf 90       	pop	r11
    22de:	af 90       	pop	r10
    22e0:	9f 90       	pop	r9
    22e2:	8f 90       	pop	r8
    22e4:	7f 90       	pop	r7
    22e6:	6f 90       	pop	r6
    22e8:	5f 90       	pop	r5
    22ea:	4f 90       	pop	r4
    22ec:	3f 90       	pop	r3
    22ee:	2f 90       	pop	r2
    22f0:	08 95       	ret
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
    22f2:	8b 81       	ldd	r24, Y+3	; 0x03
    22f4:	9c 81       	ldd	r25, Y+4	; 0x04
    22f6:	01 96       	adiw	r24, 0x01	; 1
    22f8:	9c 83       	std	Y+4, r25	; 0x04
    22fa:	8b 83       	std	Y+3, r24	; 0x03
    22fc:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <sMO_runCycle+0x66>
    2300:	8b 81       	ldd	r24, Y+3	; 0x03
    2302:	9c 81       	ldd	r25, Y+4	; 0x04
    2304:	01 96       	adiw	r24, 0x01	; 1
    2306:	9c 83       	std	Y+4, r25	; 0x04
    2308:	8b 83       	std	Y+3, r24	; 0x03
    230a:	db cf       	rjmp	.-74     	; 0x22c2 <__stack+0x11c3>

0000230c <sMO_raiseTimeEvent>:
	
	clearInEvents(handle);
}

void sMO_raiseTimeEvent(SMO* handle, sc_eventid evid) {
	if ( ((intptr_t)evid) >= ((intptr_t)&(handle->timeEvents))
    230c:	c5 96       	adiw	r24, 0x35	; 53
    230e:	68 17       	cp	r22, r24
    2310:	79 07       	cpc	r23, r25
    2312:	3c f0       	brlt	.+14     	; 0x2322 <sMO_raiseTimeEvent+0x16>
		&&  ((intptr_t)evid) < ((intptr_t)&(handle->timeEvents)) + sizeof(SMOTimeEvents)) {
    2314:	01 96       	adiw	r24, 0x01	; 1
    2316:	68 17       	cp	r22, r24
    2318:	79 07       	cpc	r23, r25
    231a:	18 f4       	brcc	.+6      	; 0x2322 <sMO_raiseTimeEvent+0x16>
		*(sc_boolean*)evid = bool_true;
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	fb 01       	movw	r30, r22
    2320:	80 83       	st	Z, r24
    2322:	08 95       	ret

00002324 <sMO_isActive>:
	}		
}

sc_boolean sMO_isActive(SMO* handle, SMOStates state) {
    2324:	dc 01       	movw	r26, r24
	switch (state) {
    2326:	e6 2f       	mov	r30, r22
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	e5 31       	cpi	r30, 0x15	; 21
    232c:	f1 05       	cpc	r31, r1
    232e:	08 f0       	brcs	.+2      	; 0x2332 <sMO_isActive+0xe>
    2330:	b5 c0       	rjmp	.+362    	; 0x249c <sMO_isActive+0x178>
    2332:	e6 5a       	subi	r30, 0xA6	; 166
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	ee 0f       	add	r30, r30
    2338:	ff 1f       	adc	r31, r31
    233a:	05 90       	lpm	r0, Z+
    233c:	f4 91       	lpm	r31, Z
    233e:	e0 2d       	mov	r30, r0
    2340:	09 94       	ijmp
		case SMO_main_region_on : 
			return (sc_boolean) (handle->stateConfVector[0] >= SMO_main_region_on
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	9c 91       	ld	r25, X
    2346:	95 31       	cpi	r25, 0x15	; 21
    2348:	08 f4       	brcc	.+2      	; 0x234c <sMO_isActive+0x28>
    234a:	a9 c0       	rjmp	.+338    	; 0x249e <sMO_isActive+0x17a>
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	08 95       	ret
				&& handle->stateConfVector[0] <= SMO_main_region_on_r1_Running_running_main_CheckKeyPress);
		case SMO_main_region_on_r1_Init : 
			return (sc_boolean) (handle->stateConfVector[0] == SMO_main_region_on_r1_Init
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	9c 91       	ld	r25, X
    2354:	91 30       	cpi	r25, 0x01	; 1
    2356:	09 f4       	brne	.+2      	; 0x235a <sMO_isActive+0x36>
    2358:	a2 c0       	rjmp	.+324    	; 0x249e <sMO_isActive+0x17a>
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running : 
			return (sc_boolean) (handle->stateConfVector[0] >= SMO_main_region_on_r1_Running
    235e:	9c 91       	ld	r25, X
    2360:	92 50       	subi	r25, 0x02	; 2
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	93 31       	cpi	r25, 0x13	; 19
    2366:	08 f4       	brcc	.+2      	; 0x236a <sMO_isActive+0x46>
    2368:	9a c0       	rjmp	.+308    	; 0x249e <sMO_isActive+0x17a>
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	08 95       	ret
				&& handle->stateConfVector[0] <= SMO_main_region_on_r1_Running_running_main_CheckKeyPress);
		case SMO_main_region_on_r1_Running_RF_DataReceived : 
			return (sc_boolean) (handle->stateConfVector[0] == SMO_main_region_on_r1_Running_RF_DataReceived
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	9c 91       	ld	r25, X
    2372:	93 30       	cpi	r25, 0x03	; 3
    2374:	09 f4       	brne	.+2      	; 0x2378 <sMO_isActive+0x54>
    2376:	93 c0       	rjmp	.+294    	; 0x249e <sMO_isActive+0x17a>
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_RF_GetData : 
			return (sc_boolean) (handle->stateConfVector[0] == SMO_main_region_on_r1_Running_RF_GetData
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	9c 91       	ld	r25, X
    2380:	94 30       	cpi	r25, 0x04	; 4
    2382:	09 f4       	brne	.+2      	; 0x2386 <sMO_isActive+0x62>
    2384:	8c c0       	rjmp	.+280    	; 0x249e <sMO_isActive+0x17a>
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_keypad_CheckKey : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_keypad_CheckKey
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	11 96       	adiw	r26, 0x01	; 1
    238e:	9c 91       	ld	r25, X
    2390:	11 97       	sbiw	r26, 0x01	; 1
    2392:	95 30       	cpi	r25, 0x05	; 5
    2394:	09 f4       	brne	.+2      	; 0x2398 <sMO_isActive+0x74>
    2396:	83 c0       	rjmp	.+262    	; 0x249e <sMO_isActive+0x17a>
    2398:	80 e0       	ldi	r24, 0x00	; 0
    239a:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_keypad_CheckKeyDown : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_keypad_CheckKeyDown
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	11 96       	adiw	r26, 0x01	; 1
    23a0:	9c 91       	ld	r25, X
    23a2:	11 97       	sbiw	r26, 0x01	; 1
    23a4:	96 30       	cpi	r25, 0x06	; 6
    23a6:	09 f4       	brne	.+2      	; 0x23aa <sMO_isActive+0x86>
    23a8:	7a c0       	rjmp	.+244    	; 0x249e <sMO_isActive+0x17a>
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_ShowMenu : 
			return (sc_boolean) (handle->stateConfVector[2] == SMO_main_region_on_r1_Running_running_main_ShowMenu
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	12 96       	adiw	r26, 0x02	; 2
    23b2:	9c 91       	ld	r25, X
    23b4:	12 97       	sbiw	r26, 0x02	; 2
    23b6:	97 30       	cpi	r25, 0x07	; 7
    23b8:	09 f4       	brne	.+2      	; 0x23bc <sMO_isActive+0x98>
    23ba:	71 c0       	rjmp	.+226    	; 0x249e <sMO_isActive+0x17a>
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData : 
			return (sc_boolean) (handle->stateConfVector[2] >= SMO_main_region_on_r1_Running_running_main_EnterData
    23c0:	12 96       	adiw	r26, 0x02	; 2
    23c2:	9c 91       	ld	r25, X
    23c4:	12 97       	sbiw	r26, 0x02	; 2
    23c6:	98 50       	subi	r25, 0x08	; 8
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	9b 30       	cpi	r25, 0x0B	; 11
    23cc:	08 f4       	brcc	.+2      	; 0x23d0 <sMO_isActive+0xac>
    23ce:	67 c0       	rjmp	.+206    	; 0x249e <sMO_isActive+0x17a>
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	08 95       	ret
				&& handle->stateConfVector[2] <= SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : 
			return (sc_boolean) (handle->stateConfVector[2] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	12 96       	adiw	r26, 0x02	; 2
    23d8:	9c 91       	ld	r25, X
    23da:	12 97       	sbiw	r26, 0x02	; 2
    23dc:	99 30       	cpi	r25, 0x09	; 9
    23de:	09 f4       	brne	.+2      	; 0x23e2 <sMO_isActive+0xbe>
    23e0:	5e c0       	rjmp	.+188    	; 0x249e <sMO_isActive+0x17a>
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : 
			return (sc_boolean) (handle->stateConfVector[2] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	12 96       	adiw	r26, 0x02	; 2
    23ea:	9c 91       	ld	r25, X
    23ec:	12 97       	sbiw	r26, 0x02	; 2
    23ee:	9a 30       	cpi	r25, 0x0A	; 10
    23f0:	09 f4       	brne	.+2      	; 0x23f4 <sMO_isActive+0xd0>
    23f2:	55 c0       	rjmp	.+170    	; 0x249e <sMO_isActive+0x17a>
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : 
			return (sc_boolean) (handle->stateConfVector[2] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	12 96       	adiw	r26, 0x02	; 2
    23fc:	9c 91       	ld	r25, X
    23fe:	12 97       	sbiw	r26, 0x02	; 2
    2400:	9b 30       	cpi	r25, 0x0B	; 11
    2402:	09 f4       	brne	.+2      	; 0x2406 <sMO_isActive+0xe2>
    2404:	4c c0       	rjmp	.+152    	; 0x249e <sMO_isActive+0x17a>
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : 
			return (sc_boolean) (handle->stateConfVector[2] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	12 96       	adiw	r26, 0x02	; 2
    240e:	9c 91       	ld	r25, X
    2410:	12 97       	sbiw	r26, 0x02	; 2
    2412:	9c 30       	cpi	r25, 0x0C	; 12
    2414:	09 f4       	brne	.+2      	; 0x2418 <sMO_isActive+0xf4>
    2416:	43 c0       	rjmp	.+134    	; 0x249e <sMO_isActive+0x17a>
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : 
			return (sc_boolean) (handle->stateConfVector[2] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	12 96       	adiw	r26, 0x02	; 2
    2420:	9c 91       	ld	r25, X
    2422:	12 97       	sbiw	r26, 0x02	; 2
    2424:	9d 30       	cpi	r25, 0x0D	; 13
    2426:	d9 f1       	breq	.+118    	; 0x249e <sMO_isActive+0x17a>
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : 
			return (sc_boolean) (handle->stateConfVector[2] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	12 96       	adiw	r26, 0x02	; 2
    2430:	9c 91       	ld	r25, X
    2432:	12 97       	sbiw	r26, 0x02	; 2
    2434:	9e 30       	cpi	r25, 0x0E	; 14
    2436:	99 f1       	breq	.+102    	; 0x249e <sMO_isActive+0x17a>
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0 : 
			return (sc_boolean) (handle->stateConfVector[2] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	12 96       	adiw	r26, 0x02	; 2
    2440:	9c 91       	ld	r25, X
    2442:	12 97       	sbiw	r26, 0x02	; 2
    2444:	9f 30       	cpi	r25, 0x0F	; 15
    2446:	59 f1       	breq	.+86     	; 0x249e <sMO_isActive+0x17a>
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : 
			return (sc_boolean) (handle->stateConfVector[2] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	12 96       	adiw	r26, 0x02	; 2
    2450:	9c 91       	ld	r25, X
    2452:	12 97       	sbiw	r26, 0x02	; 2
    2454:	90 31       	cpi	r25, 0x10	; 16
    2456:	19 f1       	breq	.+70     	; 0x249e <sMO_isActive+0x17a>
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_SendData : 
			return (sc_boolean) (handle->stateConfVector[2] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_SendData
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	12 96       	adiw	r26, 0x02	; 2
    2460:	9c 91       	ld	r25, X
    2462:	12 97       	sbiw	r26, 0x02	; 2
    2464:	91 31       	cpi	r25, 0x11	; 17
    2466:	d9 f0       	breq	.+54     	; 0x249e <sMO_isActive+0x17a>
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : 
			return (sc_boolean) (handle->stateConfVector[2] == SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	12 96       	adiw	r26, 0x02	; 2
    2470:	9c 91       	ld	r25, X
    2472:	12 97       	sbiw	r26, 0x02	; 2
    2474:	92 31       	cpi	r25, 0x12	; 18
    2476:	99 f0       	breq	.+38     	; 0x249e <sMO_isActive+0x17a>
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_MenuA : 
			return (sc_boolean) (handle->stateConfVector[2] == SMO_main_region_on_r1_Running_running_main_MenuA
    247c:	81 e0       	ldi	r24, 0x01	; 1
    247e:	12 96       	adiw	r26, 0x02	; 2
    2480:	9c 91       	ld	r25, X
    2482:	12 97       	sbiw	r26, 0x02	; 2
    2484:	93 31       	cpi	r25, 0x13	; 19
    2486:	59 f0       	breq	.+22     	; 0x249e <sMO_isActive+0x17a>
    2488:	80 e0       	ldi	r24, 0x00	; 0
    248a:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_CheckKeyPress : 
			return (sc_boolean) (handle->stateConfVector[2] == SMO_main_region_on_r1_Running_running_main_CheckKeyPress
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	12 96       	adiw	r26, 0x02	; 2
    2490:	9c 91       	ld	r25, X
    2492:	12 97       	sbiw	r26, 0x02	; 2
    2494:	94 31       	cpi	r25, 0x14	; 20
    2496:	19 f0       	breq	.+6      	; 0x249e <sMO_isActive+0x17a>
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	08 95       	ret
			);
		default: return bool_false;
    249c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    249e:	08 95       	ret

000024a0 <sMOIfaceKEYPAD_raise_key_pressed>:



void sMOIfaceKEYPAD_raise_key_pressed(SMO* handle) {
	handle->ifaceKEYPAD.key_pressed_raised = bool_true;
    24a0:	21 e0       	ldi	r18, 0x01	; 1
    24a2:	fc 01       	movw	r30, r24
    24a4:	26 87       	std	Z+14, r18	; 0x0e
}
    24a6:	08 95       	ret

000024a8 <sMOIfaceKEYPAD_get_key>:


sc_integer sMOIfaceKEYPAD_get_key(SMO* handle) {
    24a8:	fc 01       	movw	r30, r24
	return handle->ifaceKEYPAD.key;
    24aa:	65 81       	ldd	r22, Z+5	; 0x05
    24ac:	76 81       	ldd	r23, Z+6	; 0x06
}
    24ae:	87 81       	ldd	r24, Z+7	; 0x07
    24b0:	90 85       	ldd	r25, Z+8	; 0x08
    24b2:	08 95       	ret

000024b4 <sMOIfaceKEYPAD_set_key>:
void sMOIfaceKEYPAD_set_key(SMO* handle, sc_integer value) {
	handle->ifaceKEYPAD.key = value;
    24b4:	fc 01       	movw	r30, r24
    24b6:	45 83       	std	Z+5, r20	; 0x05
    24b8:	56 83       	std	Z+6, r21	; 0x06
    24ba:	67 83       	std	Z+7, r22	; 0x07
    24bc:	70 87       	std	Z+8, r23	; 0x08
}
    24be:	08 95       	ret

000024c0 <sMOIfaceKEYPAD_get_lastkey>:
sc_integer sMOIfaceKEYPAD_get_lastkey(SMO* handle) {
    24c0:	fc 01       	movw	r30, r24
	return handle->ifaceKEYPAD.lastkey;
    24c2:	61 85       	ldd	r22, Z+9	; 0x09
    24c4:	72 85       	ldd	r23, Z+10	; 0x0a
}
    24c6:	83 85       	ldd	r24, Z+11	; 0x0b
    24c8:	94 85       	ldd	r25, Z+12	; 0x0c
    24ca:	08 95       	ret

000024cc <sMOIfaceKEYPAD_set_lastkey>:
void sMOIfaceKEYPAD_set_lastkey(SMO* handle, sc_integer value) {
	handle->ifaceKEYPAD.lastkey = value;
    24cc:	fc 01       	movw	r30, r24
    24ce:	41 87       	std	Z+9, r20	; 0x09
    24d0:	52 87       	std	Z+10, r21	; 0x0a
    24d2:	63 87       	std	Z+11, r22	; 0x0b
    24d4:	74 87       	std	Z+12, r23	; 0x0c
}
    24d6:	08 95       	ret

000024d8 <sMOIfaceKEYPAD_get_key_down>:
sc_boolean sMOIfaceKEYPAD_get_key_down(SMO* handle) {
	return handle->ifaceKEYPAD.key_down;
}
    24d8:	fc 01       	movw	r30, r24
    24da:	85 85       	ldd	r24, Z+13	; 0x0d
    24dc:	08 95       	ret

000024de <sMOIfaceKEYPAD_set_key_down>:
void sMOIfaceKEYPAD_set_key_down(SMO* handle, sc_boolean value) {
	handle->ifaceKEYPAD.key_down = value;
    24de:	fc 01       	movw	r30, r24
    24e0:	65 87       	std	Z+13, r22	; 0x0d
}
    24e2:	08 95       	ret

000024e4 <sMOIfaceUART_raise_dataRecieved>:
void sMOIfaceUART_raise_dataRecieved(SMO* handle) {
	handle->ifaceUART.DataRecieved_raised = bool_true;
    24e4:	21 e0       	ldi	r18, 0x01	; 1
    24e6:	fc 01       	movw	r30, r24
    24e8:	23 8b       	std	Z+19, r18	; 0x13
}
    24ea:	08 95       	ret

000024ec <sMOIfaceUART_get_data>:


sc_string sMOIfaceUART_get_data(SMO* handle) {
    24ec:	fc 01       	movw	r30, r24
	return handle->ifaceUART.data;
}
    24ee:	87 85       	ldd	r24, Z+15	; 0x0f
    24f0:	90 89       	ldd	r25, Z+16	; 0x10
    24f2:	08 95       	ret

000024f4 <sMOIfaceUART_set_data>:
void sMOIfaceUART_set_data(SMO* handle, sc_string value) {
	handle->ifaceUART.data = value;
    24f4:	fc 01       	movw	r30, r24
    24f6:	70 8b       	std	Z+16, r23	; 0x10
    24f8:	67 87       	std	Z+15, r22	; 0x0f
}
    24fa:	08 95       	ret

000024fc <sMOIfaceUART_get_lastdata>:
sc_string sMOIfaceUART_get_lastdata(SMO* handle) {
    24fc:	fc 01       	movw	r30, r24
	return handle->ifaceUART.lastdata;
}
    24fe:	81 89       	ldd	r24, Z+17	; 0x11
    2500:	92 89       	ldd	r25, Z+18	; 0x12
    2502:	08 95       	ret

00002504 <sMOIfaceUART_set_lastdata>:
void sMOIfaceUART_set_lastdata(SMO* handle, sc_string value) {
	handle->ifaceUART.lastdata = value;
    2504:	fc 01       	movw	r30, r24
    2506:	72 8b       	std	Z+18, r23	; 0x12
    2508:	61 8b       	std	Z+17, r22	; 0x11
}
    250a:	08 95       	ret

0000250c <sMOIfaceRF_raise_dataRecieved>:
void sMOIfaceRF_raise_dataRecieved(SMO* handle) {
	handle->ifaceRF.DataRecieved_raised = bool_true;
    250c:	21 e0       	ldi	r18, 0x01	; 1
    250e:	fc 01       	movw	r30, r24
    2510:	25 8f       	std	Z+29, r18	; 0x1d
}
    2512:	08 95       	ret

00002514 <sMOIfaceRF_get_data>:


sc_string sMOIfaceRF_get_data(SMO* handle) {
    2514:	fc 01       	movw	r30, r24
	return handle->ifaceRF.data;
}
    2516:	84 89       	ldd	r24, Z+20	; 0x14
    2518:	95 89       	ldd	r25, Z+21	; 0x15
    251a:	08 95       	ret

0000251c <sMOIfaceRF_set_data>:
void sMOIfaceRF_set_data(SMO* handle, sc_string value) {
	handle->ifaceRF.data = value;
    251c:	fc 01       	movw	r30, r24
    251e:	75 8b       	std	Z+21, r23	; 0x15
    2520:	64 8b       	std	Z+20, r22	; 0x14
}
    2522:	08 95       	ret

00002524 <sMOIfaceRF_get_lastdata>:
sc_string sMOIfaceRF_get_lastdata(SMO* handle) {
    2524:	fc 01       	movw	r30, r24
	return handle->ifaceRF.lastdata;
}
    2526:	86 89       	ldd	r24, Z+22	; 0x16
    2528:	97 89       	ldd	r25, Z+23	; 0x17
    252a:	08 95       	ret

0000252c <sMOIfaceRF_set_lastdata>:
void sMOIfaceRF_set_lastdata(SMO* handle, sc_string value) {
	handle->ifaceRF.lastdata = value;
    252c:	fc 01       	movw	r30, r24
    252e:	77 8b       	std	Z+23, r23	; 0x17
    2530:	66 8b       	std	Z+22, r22	; 0x16
}
    2532:	08 95       	ret

00002534 <sMOIfaceRF_get_result>:
sc_boolean sMOIfaceRF_get_result(SMO* handle) {
	return handle->ifaceRF.result;
}
    2534:	fc 01       	movw	r30, r24
    2536:	80 8d       	ldd	r24, Z+24	; 0x18
    2538:	08 95       	ret

0000253a <sMOIfaceRF_set_result>:
void sMOIfaceRF_set_result(SMO* handle, sc_boolean value) {
	handle->ifaceRF.result = value;
    253a:	fc 01       	movw	r30, r24
    253c:	60 8f       	std	Z+24, r22	; 0x18
}
    253e:	08 95       	ret

00002540 <sMOIfaceRF_get_iD>:
sc_integer sMOIfaceRF_get_iD(SMO* handle) {
    2540:	fc 01       	movw	r30, r24
	return handle->ifaceRF.ID;
    2542:	61 8d       	ldd	r22, Z+25	; 0x19
    2544:	72 8d       	ldd	r23, Z+26	; 0x1a
}
    2546:	83 8d       	ldd	r24, Z+27	; 0x1b
    2548:	94 8d       	ldd	r25, Z+28	; 0x1c
    254a:	08 95       	ret

0000254c <sMOIfaceRF_set_iD>:
void sMOIfaceRF_set_iD(SMO* handle, sc_integer value) {
	handle->ifaceRF.ID = value;
    254c:	fc 01       	movw	r30, r24
    254e:	41 8f       	std	Z+25, r20	; 0x19
    2550:	52 8f       	std	Z+26, r21	; 0x1a
    2552:	63 8f       	std	Z+27, r22	; 0x1b
    2554:	74 8f       	std	Z+28, r23	; 0x1c
}
    2556:	08 95       	ret

00002558 <sMOIfaceDISH_get_iD>:


sc_integer sMOIfaceDISH_get_iD(SMO* handle) {
    2558:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.ID;
    255a:	66 8d       	ldd	r22, Z+30	; 0x1e
    255c:	77 8d       	ldd	r23, Z+31	; 0x1f
}
    255e:	80 a1       	lds	r24, 0x40
    2560:	91 a1       	lds	r25, 0x41
    2562:	08 95       	ret

00002564 <sMOIfaceDISH_set_iD>:
void sMOIfaceDISH_set_iD(SMO* handle, sc_integer value) {
	handle->ifaceDISH.ID = value;
    2564:	fc 01       	movw	r30, r24
    2566:	46 8f       	std	Z+30, r20	; 0x1e
    2568:	57 8f       	std	Z+31, r21	; 0x1f
    256a:	60 a3       	lds	r22, 0x50
    256c:	71 a3       	lds	r23, 0x51
}
    256e:	08 95       	ret

00002570 <sMOIfaceDISH_get_amount>:
sc_integer sMOIfaceDISH_get_amount(SMO* handle) {
    2570:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.amount;
    2572:	62 a1       	lds	r22, 0x42
    2574:	73 a1       	lds	r23, 0x43
}
    2576:	84 a1       	lds	r24, 0x44
    2578:	95 a1       	lds	r25, 0x45
    257a:	08 95       	ret

0000257c <sMOIfaceDISH_set_amount>:
void sMOIfaceDISH_set_amount(SMO* handle, sc_integer value) {
	handle->ifaceDISH.amount = value;
    257c:	fc 01       	movw	r30, r24
    257e:	42 a3       	lds	r20, 0x52
    2580:	53 a3       	lds	r21, 0x53
    2582:	64 a3       	lds	r22, 0x54
    2584:	75 a3       	lds	r23, 0x55
}
    2586:	08 95       	ret

00002588 <sMOIfaceDISH_get_pos>:
sc_integer sMOIfaceDISH_get_pos(SMO* handle) {
    2588:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.pos;
    258a:	66 a1       	lds	r22, 0x46
    258c:	77 a1       	lds	r23, 0x47
}
    258e:	80 a5       	lds	r24, 0x60
    2590:	91 a5       	lds	r25, 0x61
    2592:	08 95       	ret

00002594 <sMOIfaceDISH_set_pos>:
void sMOIfaceDISH_set_pos(SMO* handle, sc_integer value) {
	handle->ifaceDISH.pos = value;
    2594:	fc 01       	movw	r30, r24
    2596:	46 a3       	lds	r20, 0x56
    2598:	57 a3       	lds	r21, 0x57
    259a:	60 a7       	lds	r22, 0x70
    259c:	71 a7       	lds	r23, 0x71
}
    259e:	08 95       	ret

000025a0 <sMOIface_raise_switchOff>:
void sMOIface_raise_switchOff(SMO* handle) {
	handle->iface.switchOff_raised = bool_true;
    25a0:	21 e0       	ldi	r18, 0x01	; 1
    25a2:	fc 01       	movw	r30, r24
    25a4:	23 ab       	sts	0x53, r18
}
    25a6:	08 95       	ret

000025a8 <sMOIface_raise_switchOn>:
void sMOIface_raise_switchOn(SMO* handle) {
	handle->iface.switchOn_raised = bool_true;
    25a8:	21 e0       	ldi	r18, 0x01	; 1
    25aa:	fc 01       	movw	r30, r24
    25ac:	24 ab       	sts	0x54, r18
}
    25ae:	08 95       	ret

000025b0 <sMOIface_get_lightOn>:


sc_boolean sMOIface_get_lightOn(SMO* handle) {
	return handle->iface.lightOn;
}
    25b0:	fc 01       	movw	r30, r24
    25b2:	82 a5       	lds	r24, 0x62
    25b4:	08 95       	ret

000025b6 <sMOIface_set_lightOn>:
void sMOIface_set_lightOn(SMO* handle, sc_boolean value) {
	handle->iface.lightOn = value;
    25b6:	fc 01       	movw	r30, r24
    25b8:	62 a7       	lds	r22, 0x72
}
    25ba:	08 95       	ret

000025bc <sMOIface_get_menuId>:
sc_integer sMOIface_get_menuId(SMO* handle) {
    25bc:	fc 01       	movw	r30, r24
	return handle->iface.menuId;
    25be:	63 a5       	lds	r22, 0x63
    25c0:	74 a5       	lds	r23, 0x64
}
    25c2:	85 a5       	lds	r24, 0x65
    25c4:	96 a5       	lds	r25, 0x66
    25c6:	08 95       	ret

000025c8 <sMOIface_set_menuId>:
void sMOIface_set_menuId(SMO* handle, sc_integer value) {
	handle->iface.menuId = value;
    25c8:	fc 01       	movw	r30, r24
    25ca:	43 a7       	lds	r20, 0x73
    25cc:	54 a7       	lds	r21, 0x74
    25ce:	65 a7       	lds	r22, 0x75
    25d0:	76 a7       	lds	r23, 0x76
}
    25d2:	08 95       	ret

000025d4 <sMOIface_get_tableId>:
sc_integer sMOIface_get_tableId(SMO* handle) {
    25d4:	fc 01       	movw	r30, r24
	return handle->iface.tableId;
    25d6:	67 a5       	lds	r22, 0x67
    25d8:	70 a9       	sts	0x40, r23
}
    25da:	81 a9       	sts	0x41, r24
    25dc:	92 a9       	sts	0x42, r25
    25de:	08 95       	ret

000025e0 <sMOIface_set_tableId>:
void sMOIface_set_tableId(SMO* handle, sc_integer value) {
	handle->iface.tableId = value;
    25e0:	fc 01       	movw	r30, r24
    25e2:	47 a7       	lds	r20, 0x77
    25e4:	50 ab       	sts	0x50, r21
    25e6:	61 ab       	sts	0x51, r22
    25e8:	72 ab       	sts	0x52, r23
}
    25ea:	08 95       	ret

000025ec <spi_init>:

/*
 * spi initialize
 */
void spi_init() {
    SPI_DDR &= ~((1<<SPI_MOSI) | (1<<SPI_MISO) | (1<<SPI_SS) | (1<<SPI_SCK)); //input
    25ec:	87 b3       	in	r24, 0x17	; 23
    25ee:	80 7f       	andi	r24, 0xF0	; 240
    25f0:	87 bb       	out	0x17, r24	; 23
    SPI_DDR |= ((1<<SPI_MOSI) | (1<<SPI_SS) | (1<<SPI_SCK)); //output
    25f2:	87 b3       	in	r24, 0x17	; 23
    25f4:	87 60       	ori	r24, 0x07	; 7
    25f6:	87 bb       	out	0x17, r24	; 23

    SPCR = ((1<<SPE)|               // SPI Enable
    25f8:	81 e5       	ldi	r24, 0x51	; 81
    25fa:	8d b9       	out	0x0d, r24	; 13
            (1<<MSTR)|              // Master/Slave select
            (0<<SPR1)|(1<<SPR0)|    // SPI Clock Rate
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR = (1<<SPI2X); // Double SPI Speed Bit
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	8e b9       	out	0x0e, r24	; 14
}
    2600:	08 95       	ret

00002602 <spi_writereadbyte>:

/*
 * spi write one byte and read it back
 */
uint8_t spi_writereadbyte(uint8_t data) {
    SPDR = data;
    2602:	8f b9       	out	0x0f, r24	; 15
    while((SPSR & (1<<SPIF)) == 0);
    2604:	77 9b       	sbis	0x0e, 7	; 14
    2606:	fe cf       	rjmp	.-4      	; 0x2604 <spi_writereadbyte+0x2>
    return SPDR;
    2608:	8f b1       	in	r24, 0x0f	; 15
}
    260a:	08 95       	ret

0000260c <TimerInit>:

TimeEvent tmrEvent[10];
int tmrCount=0;

void TimerInit() {
	TCCR0 = 0b011; //CS02=0, CS01=1, CS00=0, chon Prescaler=64
    260c:	83 e0       	ldi	r24, 0x03	; 3
    260e:	83 bf       	out	0x33, r24	; 51
	//Xung chip la 8MHZ -> 1 xung mat 1us/8 = 0.125 us
	//Prescaler=64, kich 256 lan moi tang 1 lan trong bo dem Timer-> Ton 8us
	//Vay, de Timer ngat moi 1ms, ta can: 1000/8=125 lan dem.
	//Ma Timer ngat khi bo dem toi 255, ta can set gia tri ban dau cho bo dem la: 255-125+1=131
	TCNT0=131;
    2610:	83 e8       	ldi	r24, 0x83	; 131
    2612:	82 bf       	out	0x32, r24	; 50
	TIMSK=(1<<TOIE0); //Cho phep ngat khi cho tran o T/C0
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	87 bf       	out	0x37, r24	; 55
	tmrCount=0;
    2618:	10 92 49 02 	sts	0x0249, r1
    261c:	10 92 48 02 	sts	0x0248, r1
	sei();
    2620:	78 94       	sei
}
    2622:	08 95       	ret

00002624 <TimerSet>:

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
    2624:	cf 92       	push	r12
    2626:	df 92       	push	r13
    2628:	ef 92       	push	r14
    262a:	ff 92       	push	r15
    262c:	cf 93       	push	r28
    262e:	df 93       	push	r29
    2630:	ec 01       	movw	r28, r24
    2632:	6a 01       	movw	r12, r20
    2634:	7b 01       	movw	r14, r22
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
    2636:	40 91 48 02 	lds	r20, 0x0248
    263a:	50 91 49 02 	lds	r21, 0x0249
    263e:	14 16       	cp	r1, r20
    2640:	15 06       	cpc	r1, r21
    2642:	e4 f4       	brge	.+56     	; 0x267c <TimerSet+0x58>
    2644:	ec e6       	ldi	r30, 0x6C	; 108
    2646:	f2 e0       	ldi	r31, 0x02	; 2
    2648:	df 01       	movw	r26, r30
    264a:	16 96       	adiw	r26, 0x06	; 6
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
	sei();
}

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
    2650:	70 e0       	ldi	r23, 0x00	; 0
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
			check=true;
			tmrEvent[i].count=0;
			tmrEvent[i].max=max;
			tmrEvent[i].enabled=true;
    2652:	61 e0       	ldi	r22, 0x01	; 1

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
    2654:	80 81       	ld	r24, Z
    2656:	91 81       	ldd	r25, Z+1	; 0x01
    2658:	8c 17       	cp	r24, r28
    265a:	9d 07       	cpc	r25, r29
    265c:	31 f4       	brne	.+12     	; 0x266a <TimerSet+0x46>
			check=true;
			tmrEvent[i].count=0;
    265e:	13 82       	std	Z+3, r1	; 0x03
    2660:	12 82       	std	Z+2, r1	; 0x02
			tmrEvent[i].max=max;
    2662:	d5 82       	std	Z+5, r13	; 0x05
    2664:	c4 82       	std	Z+4, r12	; 0x04
			tmrEvent[i].enabled=true;
    2666:	6c 93       	st	X, r22
//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
			check=true;
    2668:	76 2f       	mov	r23, r22
}

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
    266a:	2f 5f       	subi	r18, 0xFF	; 255
    266c:	3f 4f       	sbci	r19, 0xFF	; 255
    266e:	37 96       	adiw	r30, 0x07	; 7
    2670:	17 96       	adiw	r26, 0x07	; 7
    2672:	24 17       	cp	r18, r20
    2674:	35 07       	cpc	r19, r21
    2676:	74 f3       	brlt	.-36     	; 0x2654 <TimerSet+0x30>
			tmrEvent[i].count=0;
			tmrEvent[i].max=max;
			tmrEvent[i].enabled=true;
		}
	}
	if (!check) {
    2678:	77 23       	and	r23, r23
    267a:	c9 f4       	brne	.+50     	; 0x26ae <TimerSet+0x8a>
		tmrEvent[tmrCount].EventId=evenId;
    267c:	fa 01       	movw	r30, r20
    267e:	ee 0f       	add	r30, r30
    2680:	ff 1f       	adc	r31, r31
    2682:	ee 0f       	add	r30, r30
    2684:	ff 1f       	adc	r31, r31
    2686:	ee 0f       	add	r30, r30
    2688:	ff 1f       	adc	r31, r31
    268a:	e4 1b       	sub	r30, r20
    268c:	f5 0b       	sbc	r31, r21
    268e:	e4 59       	subi	r30, 0x94	; 148
    2690:	fd 4f       	sbci	r31, 0xFD	; 253
    2692:	d1 83       	std	Z+1, r29	; 0x01
    2694:	c0 83       	st	Z, r28
		tmrEvent[tmrCount].count=0;
    2696:	13 82       	std	Z+3, r1	; 0x03
    2698:	12 82       	std	Z+2, r1	; 0x02
		tmrEvent[tmrCount].max=max;
    269a:	d5 82       	std	Z+5, r13	; 0x05
    269c:	c4 82       	std	Z+4, r12	; 0x04
		tmrEvent[tmrCount].enabled=true;
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	86 83       	std	Z+6, r24	; 0x06
		tmrCount++;
    26a2:	4f 5f       	subi	r20, 0xFF	; 255
    26a4:	5f 4f       	sbci	r21, 0xFF	; 255
    26a6:	50 93 49 02 	sts	0x0249, r21
    26aa:	40 93 48 02 	sts	0x0248, r20
	}
}
    26ae:	df 91       	pop	r29
    26b0:	cf 91       	pop	r28
    26b2:	ff 90       	pop	r15
    26b4:	ef 90       	pop	r14
    26b6:	df 90       	pop	r13
    26b8:	cf 90       	pop	r12
    26ba:	08 95       	ret

000026bc <TimerUnSet>:

void TimerUnSet(const sc_eventid evenId) {
    26bc:	dc 01       	movw	r26, r24
	for (int i=0;i<tmrCount;i++) {
    26be:	60 91 48 02 	lds	r22, 0x0248
    26c2:	70 91 49 02 	lds	r23, 0x0249
    26c6:	16 16       	cp	r1, r22
    26c8:	17 06       	cpc	r1, r23
    26ca:	64 f5       	brge	.+88     	; 0x2724 <TimerUnSet+0x68>
		if (tmrEvent[i].EventId==evenId) {
    26cc:	80 91 6c 02 	lds	r24, 0x026C
    26d0:	90 91 6d 02 	lds	r25, 0x026D
    26d4:	8a 17       	cp	r24, r26
    26d6:	9b 07       	cpc	r25, r27
    26d8:	e1 f4       	brne	.+56     	; 0x2712 <TimerUnSet+0x56>
    26da:	0a c0       	rjmp	.+20     	; 0x26f0 <TimerUnSet+0x34>
    26dc:	29 5f       	subi	r18, 0xF9	; 249
    26de:	3f 4f       	sbci	r19, 0xFF	; 255
		tmrEvent[tmrCount].enabled=true;
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
    26e0:	f9 01       	movw	r30, r18
    26e2:	37 97       	sbiw	r30, 0x07	; 7
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
    26e4:	80 81       	ld	r24, Z
    26e6:	91 81       	ldd	r25, Z+1	; 0x01
    26e8:	8a 17       	cp	r24, r26
    26ea:	9b 07       	cpc	r25, r27
    26ec:	b1 f4       	brne	.+44     	; 0x271a <TimerUnSet+0x5e>
    26ee:	02 c0       	rjmp	.+4      	; 0x26f4 <TimerUnSet+0x38>
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
	for (int i=0;i<tmrCount;i++) {
    26f0:	40 e0       	ldi	r20, 0x00	; 0
    26f2:	50 e0       	ldi	r21, 0x00	; 0
		if (tmrEvent[i].EventId==evenId) {
			tmrEvent[i].count=0;
    26f4:	fa 01       	movw	r30, r20
    26f6:	ee 0f       	add	r30, r30
    26f8:	ff 1f       	adc	r31, r31
    26fa:	ee 0f       	add	r30, r30
    26fc:	ff 1f       	adc	r31, r31
    26fe:	ee 0f       	add	r30, r30
    2700:	ff 1f       	adc	r31, r31
    2702:	e4 1b       	sub	r30, r20
    2704:	f5 0b       	sbc	r31, r21
    2706:	e4 59       	subi	r30, 0x94	; 148
    2708:	fd 4f       	sbci	r31, 0xFD	; 253
    270a:	13 82       	std	Z+3, r1	; 0x03
    270c:	12 82       	std	Z+2, r1	; 0x02
			tmrEvent[i].enabled=false;
    270e:	16 82       	std	Z+6, r1	; 0x06
			return;
    2710:	08 95       	ret
    2712:	23 e7       	ldi	r18, 0x73	; 115
    2714:	32 e0       	ldi	r19, 0x02	; 2
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
	for (int i=0;i<tmrCount;i++) {
    2716:	40 e0       	ldi	r20, 0x00	; 0
    2718:	50 e0       	ldi	r21, 0x00	; 0
    271a:	4f 5f       	subi	r20, 0xFF	; 255
    271c:	5f 4f       	sbci	r21, 0xFF	; 255
    271e:	46 17       	cp	r20, r22
    2720:	57 07       	cpc	r21, r23
    2722:	e1 f6       	brne	.-72     	; 0x26dc <TimerUnSet+0x20>
    2724:	08 95       	ret

00002726 <TimerCheck>:
			return;
		}
	}
}

void TimerCheck(SMO* handle) {
    2726:	cf 92       	push	r12
    2728:	df 92       	push	r13
    272a:	ef 92       	push	r14
    272c:	ff 92       	push	r15
    272e:	0f 93       	push	r16
    2730:	1f 93       	push	r17
    2732:	cf 93       	push	r28
    2734:	df 93       	push	r29
    2736:	6c 01       	movw	r12, r24
	for (int i=0;i<tmrCount;i++) {
    2738:	80 91 48 02 	lds	r24, 0x0248
    273c:	90 91 49 02 	lds	r25, 0x0249
    2740:	18 16       	cp	r1, r24
    2742:	19 06       	cpc	r1, r25
    2744:	94 f5       	brge	.+100    	; 0x27aa <TimerCheck+0x84>
    2746:	c2 e7       	ldi	r28, 0x72	; 114
    2748:	d2 e0       	ldi	r29, 0x02	; 2
    274a:	8e 01       	movw	r16, r28
    274c:	06 50       	subi	r16, 0x06	; 6
    274e:	10 40       	sbci	r17, 0x00	; 0
    2750:	ee 24       	eor	r14, r14
    2752:	ff 24       	eor	r15, r15
		if (tmrEvent[i].enabled) {
    2754:	88 81       	ld	r24, Y
    2756:	88 23       	and	r24, r24
    2758:	d9 f0       	breq	.+54     	; 0x2790 <TimerCheck+0x6a>
			tmrEvent[i].count++;
    275a:	d8 01       	movw	r26, r16
    275c:	12 96       	adiw	r26, 0x02	; 2
    275e:	8d 91       	ld	r24, X+
    2760:	9c 91       	ld	r25, X
    2762:	13 97       	sbiw	r26, 0x03	; 3
    2764:	01 96       	adiw	r24, 0x01	; 1
    2766:	13 96       	adiw	r26, 0x03	; 3
    2768:	9c 93       	st	X, r25
    276a:	8e 93       	st	-X, r24
    276c:	12 97       	sbiw	r26, 0x02	; 2
			if (tmrEvent[i].count==tmrEvent[i].max) {
    276e:	14 96       	adiw	r26, 0x04	; 4
    2770:	2d 91       	ld	r18, X+
    2772:	3c 91       	ld	r19, X
    2774:	15 97       	sbiw	r26, 0x05	; 5
    2776:	82 17       	cp	r24, r18
    2778:	93 07       	cpc	r25, r19
    277a:	51 f4       	brne	.+20     	; 0x2790 <TimerCheck+0x6a>
				tmrEvent[i].count=0;
    277c:	13 96       	adiw	r26, 0x03	; 3
    277e:	1c 92       	st	X, r1
    2780:	1e 92       	st	-X, r1
    2782:	12 97       	sbiw	r26, 0x02	; 2
				tmrEvent[i].enabled=false;
    2784:	18 82       	st	Y, r1
				sMO_raiseTimeEvent(handle,tmrEvent[i].EventId);
    2786:	6d 91       	ld	r22, X+
    2788:	7c 91       	ld	r23, X
    278a:	c6 01       	movw	r24, r12
    278c:	0e 94 86 11 	call	0x230c	; 0x230c <sMO_raiseTimeEvent>
		}
	}
}

void TimerCheck(SMO* handle) {
	for (int i=0;i<tmrCount;i++) {
    2790:	08 94       	sec
    2792:	e1 1c       	adc	r14, r1
    2794:	f1 1c       	adc	r15, r1
    2796:	27 96       	adiw	r28, 0x07	; 7
    2798:	09 5f       	subi	r16, 0xF9	; 249
    279a:	1f 4f       	sbci	r17, 0xFF	; 255
    279c:	80 91 48 02 	lds	r24, 0x0248
    27a0:	90 91 49 02 	lds	r25, 0x0249
    27a4:	e8 16       	cp	r14, r24
    27a6:	f9 06       	cpc	r15, r25
    27a8:	ac f2       	brlt	.-86     	; 0x2754 <TimerCheck+0x2e>
				tmrEvent[i].enabled=false;
				sMO_raiseTimeEvent(handle,tmrEvent[i].EventId);
			}
		}
	}
}
    27aa:	df 91       	pop	r29
    27ac:	cf 91       	pop	r28
    27ae:	1f 91       	pop	r17
    27b0:	0f 91       	pop	r16
    27b2:	ff 90       	pop	r15
    27b4:	ef 90       	pop	r14
    27b6:	df 90       	pop	r13
    27b8:	cf 90       	pop	r12
    27ba:	08 95       	ret

000027bc <TimerClear>:

void TimerClear() {
	free(tmrEvent);
    27bc:	8c e6       	ldi	r24, 0x6C	; 108
    27be:	92 e0       	ldi	r25, 0x02	; 2
    27c0:	0e 94 cf 14 	call	0x299e	; 0x299e <free>
	tmrCount=0;
    27c4:	10 92 49 02 	sts	0x0249, r1
    27c8:	10 92 48 02 	sts	0x0248, r1
    27cc:	08 95       	ret

000027ce <__mulsi3>:
    27ce:	62 9f       	mul	r22, r18
    27d0:	d0 01       	movw	r26, r0
    27d2:	73 9f       	mul	r23, r19
    27d4:	f0 01       	movw	r30, r0
    27d6:	82 9f       	mul	r24, r18
    27d8:	e0 0d       	add	r30, r0
    27da:	f1 1d       	adc	r31, r1
    27dc:	64 9f       	mul	r22, r20
    27de:	e0 0d       	add	r30, r0
    27e0:	f1 1d       	adc	r31, r1
    27e2:	92 9f       	mul	r25, r18
    27e4:	f0 0d       	add	r31, r0
    27e6:	83 9f       	mul	r24, r19
    27e8:	f0 0d       	add	r31, r0
    27ea:	74 9f       	mul	r23, r20
    27ec:	f0 0d       	add	r31, r0
    27ee:	65 9f       	mul	r22, r21
    27f0:	f0 0d       	add	r31, r0
    27f2:	99 27       	eor	r25, r25
    27f4:	72 9f       	mul	r23, r18
    27f6:	b0 0d       	add	r27, r0
    27f8:	e1 1d       	adc	r30, r1
    27fa:	f9 1f       	adc	r31, r25
    27fc:	63 9f       	mul	r22, r19
    27fe:	b0 0d       	add	r27, r0
    2800:	e1 1d       	adc	r30, r1
    2802:	f9 1f       	adc	r31, r25
    2804:	bd 01       	movw	r22, r26
    2806:	cf 01       	movw	r24, r30
    2808:	11 24       	eor	r1, r1
    280a:	08 95       	ret

0000280c <__udivmodqi4>:
    280c:	99 1b       	sub	r25, r25
    280e:	79 e0       	ldi	r23, 0x09	; 9
    2810:	04 c0       	rjmp	.+8      	; 0x281a <__udivmodqi4_ep>

00002812 <__udivmodqi4_loop>:
    2812:	99 1f       	adc	r25, r25
    2814:	96 17       	cp	r25, r22
    2816:	08 f0       	brcs	.+2      	; 0x281a <__udivmodqi4_ep>
    2818:	96 1b       	sub	r25, r22

0000281a <__udivmodqi4_ep>:
    281a:	88 1f       	adc	r24, r24
    281c:	7a 95       	dec	r23
    281e:	c9 f7       	brne	.-14     	; 0x2812 <__udivmodqi4_loop>
    2820:	80 95       	com	r24
    2822:	08 95       	ret

00002824 <__divmodhi4>:
    2824:	97 fb       	bst	r25, 7
    2826:	09 2e       	mov	r0, r25
    2828:	07 26       	eor	r0, r23
    282a:	0a d0       	rcall	.+20     	; 0x2840 <__divmodhi4_neg1>
    282c:	77 fd       	sbrc	r23, 7
    282e:	04 d0       	rcall	.+8      	; 0x2838 <__divmodhi4_neg2>
    2830:	0c d0       	rcall	.+24     	; 0x284a <__udivmodhi4>
    2832:	06 d0       	rcall	.+12     	; 0x2840 <__divmodhi4_neg1>
    2834:	00 20       	and	r0, r0
    2836:	1a f4       	brpl	.+6      	; 0x283e <__divmodhi4_exit>

00002838 <__divmodhi4_neg2>:
    2838:	70 95       	com	r23
    283a:	61 95       	neg	r22
    283c:	7f 4f       	sbci	r23, 0xFF	; 255

0000283e <__divmodhi4_exit>:
    283e:	08 95       	ret

00002840 <__divmodhi4_neg1>:
    2840:	f6 f7       	brtc	.-4      	; 0x283e <__divmodhi4_exit>
    2842:	90 95       	com	r25
    2844:	81 95       	neg	r24
    2846:	9f 4f       	sbci	r25, 0xFF	; 255
    2848:	08 95       	ret

0000284a <__udivmodhi4>:
    284a:	aa 1b       	sub	r26, r26
    284c:	bb 1b       	sub	r27, r27
    284e:	51 e1       	ldi	r21, 0x11	; 17
    2850:	07 c0       	rjmp	.+14     	; 0x2860 <__udivmodhi4_ep>

00002852 <__udivmodhi4_loop>:
    2852:	aa 1f       	adc	r26, r26
    2854:	bb 1f       	adc	r27, r27
    2856:	a6 17       	cp	r26, r22
    2858:	b7 07       	cpc	r27, r23
    285a:	10 f0       	brcs	.+4      	; 0x2860 <__udivmodhi4_ep>
    285c:	a6 1b       	sub	r26, r22
    285e:	b7 0b       	sbc	r27, r23

00002860 <__udivmodhi4_ep>:
    2860:	88 1f       	adc	r24, r24
    2862:	99 1f       	adc	r25, r25
    2864:	5a 95       	dec	r21
    2866:	a9 f7       	brne	.-22     	; 0x2852 <__udivmodhi4_loop>
    2868:	80 95       	com	r24
    286a:	90 95       	com	r25
    286c:	bc 01       	movw	r22, r24
    286e:	cd 01       	movw	r24, r26
    2870:	08 95       	ret

00002872 <malloc>:
    2872:	cf 93       	push	r28
    2874:	df 93       	push	r29
    2876:	ac 01       	movw	r20, r24
    2878:	82 30       	cpi	r24, 0x02	; 2
    287a:	91 05       	cpc	r25, r1
    287c:	10 f4       	brcc	.+4      	; 0x2882 <malloc+0x10>
    287e:	42 e0       	ldi	r20, 0x02	; 2
    2880:	50 e0       	ldi	r21, 0x00	; 0
    2882:	e0 91 b4 02 	lds	r30, 0x02B4
    2886:	f0 91 b5 02 	lds	r31, 0x02B5
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	a0 e0       	ldi	r26, 0x00	; 0
    2890:	b0 e0       	ldi	r27, 0x00	; 0
    2892:	24 c0       	rjmp	.+72     	; 0x28dc <malloc+0x6a>
    2894:	80 81       	ld	r24, Z
    2896:	91 81       	ldd	r25, Z+1	; 0x01
    2898:	84 17       	cp	r24, r20
    289a:	95 07       	cpc	r25, r21
    289c:	d0 f0       	brcs	.+52     	; 0x28d2 <malloc+0x60>
    289e:	84 17       	cp	r24, r20
    28a0:	95 07       	cpc	r25, r21
    28a2:	71 f4       	brne	.+28     	; 0x28c0 <malloc+0x4e>
    28a4:	82 81       	ldd	r24, Z+2	; 0x02
    28a6:	93 81       	ldd	r25, Z+3	; 0x03
    28a8:	10 97       	sbiw	r26, 0x00	; 0
    28aa:	29 f0       	breq	.+10     	; 0x28b6 <malloc+0x44>
    28ac:	13 96       	adiw	r26, 0x03	; 3
    28ae:	9c 93       	st	X, r25
    28b0:	8e 93       	st	-X, r24
    28b2:	12 97       	sbiw	r26, 0x02	; 2
    28b4:	2c c0       	rjmp	.+88     	; 0x290e <malloc+0x9c>
    28b6:	90 93 b5 02 	sts	0x02B5, r25
    28ba:	80 93 b4 02 	sts	0x02B4, r24
    28be:	27 c0       	rjmp	.+78     	; 0x290e <malloc+0x9c>
    28c0:	21 15       	cp	r18, r1
    28c2:	31 05       	cpc	r19, r1
    28c4:	19 f0       	breq	.+6      	; 0x28cc <malloc+0x5a>
    28c6:	82 17       	cp	r24, r18
    28c8:	93 07       	cpc	r25, r19
    28ca:	18 f4       	brcc	.+6      	; 0x28d2 <malloc+0x60>
    28cc:	9c 01       	movw	r18, r24
    28ce:	bd 01       	movw	r22, r26
    28d0:	ef 01       	movw	r28, r30
    28d2:	92 81       	ldd	r25, Z+2	; 0x02
    28d4:	83 81       	ldd	r24, Z+3	; 0x03
    28d6:	df 01       	movw	r26, r30
    28d8:	e9 2f       	mov	r30, r25
    28da:	f8 2f       	mov	r31, r24
    28dc:	30 97       	sbiw	r30, 0x00	; 0
    28de:	d1 f6       	brne	.-76     	; 0x2894 <malloc+0x22>
    28e0:	21 15       	cp	r18, r1
    28e2:	31 05       	cpc	r19, r1
    28e4:	f9 f0       	breq	.+62     	; 0x2924 <malloc+0xb2>
    28e6:	c9 01       	movw	r24, r18
    28e8:	84 1b       	sub	r24, r20
    28ea:	95 0b       	sbc	r25, r21
    28ec:	84 30       	cpi	r24, 0x04	; 4
    28ee:	91 05       	cpc	r25, r1
    28f0:	80 f4       	brcc	.+32     	; 0x2912 <malloc+0xa0>
    28f2:	8a 81       	ldd	r24, Y+2	; 0x02
    28f4:	9b 81       	ldd	r25, Y+3	; 0x03
    28f6:	61 15       	cp	r22, r1
    28f8:	71 05       	cpc	r23, r1
    28fa:	21 f0       	breq	.+8      	; 0x2904 <malloc+0x92>
    28fc:	fb 01       	movw	r30, r22
    28fe:	93 83       	std	Z+3, r25	; 0x03
    2900:	82 83       	std	Z+2, r24	; 0x02
    2902:	04 c0       	rjmp	.+8      	; 0x290c <malloc+0x9a>
    2904:	90 93 b5 02 	sts	0x02B5, r25
    2908:	80 93 b4 02 	sts	0x02B4, r24
    290c:	fe 01       	movw	r30, r28
    290e:	32 96       	adiw	r30, 0x02	; 2
    2910:	42 c0       	rjmp	.+132    	; 0x2996 <malloc+0x124>
    2912:	fe 01       	movw	r30, r28
    2914:	e8 0f       	add	r30, r24
    2916:	f9 1f       	adc	r31, r25
    2918:	41 93       	st	Z+, r20
    291a:	51 93       	st	Z+, r21
    291c:	02 97       	sbiw	r24, 0x02	; 2
    291e:	99 83       	std	Y+1, r25	; 0x01
    2920:	88 83       	st	Y, r24
    2922:	39 c0       	rjmp	.+114    	; 0x2996 <malloc+0x124>
    2924:	80 91 b2 02 	lds	r24, 0x02B2
    2928:	90 91 b3 02 	lds	r25, 0x02B3
    292c:	00 97       	sbiw	r24, 0x00	; 0
    292e:	41 f4       	brne	.+16     	; 0x2940 <malloc+0xce>
    2930:	80 91 43 02 	lds	r24, 0x0243
    2934:	90 91 44 02 	lds	r25, 0x0244
    2938:	90 93 b3 02 	sts	0x02B3, r25
    293c:	80 93 b2 02 	sts	0x02B2, r24
    2940:	20 91 41 02 	lds	r18, 0x0241
    2944:	30 91 42 02 	lds	r19, 0x0242
    2948:	21 15       	cp	r18, r1
    294a:	31 05       	cpc	r19, r1
    294c:	41 f4       	brne	.+16     	; 0x295e <malloc+0xec>
    294e:	2d b7       	in	r18, 0x3d	; 61
    2950:	3e b7       	in	r19, 0x3e	; 62
    2952:	80 91 45 02 	lds	r24, 0x0245
    2956:	90 91 46 02 	lds	r25, 0x0246
    295a:	28 1b       	sub	r18, r24
    295c:	39 0b       	sbc	r19, r25
    295e:	e0 91 b2 02 	lds	r30, 0x02B2
    2962:	f0 91 b3 02 	lds	r31, 0x02B3
    2966:	e2 17       	cp	r30, r18
    2968:	f3 07       	cpc	r31, r19
    296a:	98 f4       	brcc	.+38     	; 0x2992 <malloc+0x120>
    296c:	2e 1b       	sub	r18, r30
    296e:	3f 0b       	sbc	r19, r31
    2970:	24 17       	cp	r18, r20
    2972:	35 07       	cpc	r19, r21
    2974:	70 f0       	brcs	.+28     	; 0x2992 <malloc+0x120>
    2976:	ca 01       	movw	r24, r20
    2978:	02 96       	adiw	r24, 0x02	; 2
    297a:	28 17       	cp	r18, r24
    297c:	39 07       	cpc	r19, r25
    297e:	48 f0       	brcs	.+18     	; 0x2992 <malloc+0x120>
    2980:	8e 0f       	add	r24, r30
    2982:	9f 1f       	adc	r25, r31
    2984:	90 93 b3 02 	sts	0x02B3, r25
    2988:	80 93 b2 02 	sts	0x02B2, r24
    298c:	41 93       	st	Z+, r20
    298e:	51 93       	st	Z+, r21
    2990:	02 c0       	rjmp	.+4      	; 0x2996 <malloc+0x124>
    2992:	e0 e0       	ldi	r30, 0x00	; 0
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	cf 01       	movw	r24, r30
    2998:	df 91       	pop	r29
    299a:	cf 91       	pop	r28
    299c:	08 95       	ret

0000299e <free>:
    299e:	0f 93       	push	r16
    29a0:	1f 93       	push	r17
    29a2:	cf 93       	push	r28
    29a4:	df 93       	push	r29
    29a6:	9c 01       	movw	r18, r24
    29a8:	00 97       	sbiw	r24, 0x00	; 0
    29aa:	09 f4       	brne	.+2      	; 0x29ae <free+0x10>
    29ac:	8c c0       	rjmp	.+280    	; 0x2ac6 <free+0x128>
    29ae:	dc 01       	movw	r26, r24
    29b0:	12 97       	sbiw	r26, 0x02	; 2
    29b2:	13 96       	adiw	r26, 0x03	; 3
    29b4:	1c 92       	st	X, r1
    29b6:	1e 92       	st	-X, r1
    29b8:	12 97       	sbiw	r26, 0x02	; 2
    29ba:	60 91 b4 02 	lds	r22, 0x02B4
    29be:	70 91 b5 02 	lds	r23, 0x02B5
    29c2:	61 15       	cp	r22, r1
    29c4:	71 05       	cpc	r23, r1
    29c6:	89 f4       	brne	.+34     	; 0x29ea <free+0x4c>
    29c8:	8d 91       	ld	r24, X+
    29ca:	9c 91       	ld	r25, X
    29cc:	11 97       	sbiw	r26, 0x01	; 1
    29ce:	82 0f       	add	r24, r18
    29d0:	93 1f       	adc	r25, r19
    29d2:	20 91 b2 02 	lds	r18, 0x02B2
    29d6:	30 91 b3 02 	lds	r19, 0x02B3
    29da:	28 17       	cp	r18, r24
    29dc:	39 07       	cpc	r19, r25
    29de:	69 f5       	brne	.+90     	; 0x2a3a <free+0x9c>
    29e0:	b0 93 b3 02 	sts	0x02B3, r27
    29e4:	a0 93 b2 02 	sts	0x02B2, r26
    29e8:	6e c0       	rjmp	.+220    	; 0x2ac6 <free+0x128>
    29ea:	fb 01       	movw	r30, r22
    29ec:	40 e0       	ldi	r20, 0x00	; 0
    29ee:	50 e0       	ldi	r21, 0x00	; 0
    29f0:	01 c0       	rjmp	.+2      	; 0x29f4 <free+0x56>
    29f2:	fc 01       	movw	r30, r24
    29f4:	ea 17       	cp	r30, r26
    29f6:	fb 07       	cpc	r31, r27
    29f8:	30 f4       	brcc	.+12     	; 0x2a06 <free+0x68>
    29fa:	82 81       	ldd	r24, Z+2	; 0x02
    29fc:	93 81       	ldd	r25, Z+3	; 0x03
    29fe:	af 01       	movw	r20, r30
    2a00:	00 97       	sbiw	r24, 0x00	; 0
    2a02:	b9 f7       	brne	.-18     	; 0x29f2 <free+0x54>
    2a04:	1f c0       	rjmp	.+62     	; 0x2a44 <free+0xa6>
    2a06:	e9 01       	movw	r28, r18
    2a08:	22 97       	sbiw	r28, 0x02	; 2
    2a0a:	fb 83       	std	Y+3, r31	; 0x03
    2a0c:	ea 83       	std	Y+2, r30	; 0x02
    2a0e:	08 81       	ld	r16, Y
    2a10:	19 81       	ldd	r17, Y+1	; 0x01
    2a12:	c9 01       	movw	r24, r18
    2a14:	80 0f       	add	r24, r16
    2a16:	91 1f       	adc	r25, r17
    2a18:	8e 17       	cp	r24, r30
    2a1a:	9f 07       	cpc	r25, r31
    2a1c:	59 f4       	brne	.+22     	; 0x2a34 <free+0x96>
    2a1e:	80 81       	ld	r24, Z
    2a20:	91 81       	ldd	r25, Z+1	; 0x01
    2a22:	80 0f       	add	r24, r16
    2a24:	91 1f       	adc	r25, r17
    2a26:	02 96       	adiw	r24, 0x02	; 2
    2a28:	99 83       	std	Y+1, r25	; 0x01
    2a2a:	88 83       	st	Y, r24
    2a2c:	82 81       	ldd	r24, Z+2	; 0x02
    2a2e:	93 81       	ldd	r25, Z+3	; 0x03
    2a30:	9b 83       	std	Y+3, r25	; 0x03
    2a32:	8a 83       	std	Y+2, r24	; 0x02
    2a34:	41 15       	cp	r20, r1
    2a36:	51 05       	cpc	r21, r1
    2a38:	29 f4       	brne	.+10     	; 0x2a44 <free+0xa6>
    2a3a:	b0 93 b5 02 	sts	0x02B5, r27
    2a3e:	a0 93 b4 02 	sts	0x02B4, r26
    2a42:	41 c0       	rjmp	.+130    	; 0x2ac6 <free+0x128>
    2a44:	fa 01       	movw	r30, r20
    2a46:	b3 83       	std	Z+3, r27	; 0x03
    2a48:	a2 83       	std	Z+2, r26	; 0x02
    2a4a:	c1 91       	ld	r28, Z+
    2a4c:	d1 91       	ld	r29, Z+
    2a4e:	ec 0f       	add	r30, r28
    2a50:	fd 1f       	adc	r31, r29
    2a52:	ae 17       	cp	r26, r30
    2a54:	bf 07       	cpc	r27, r31
    2a56:	81 f4       	brne	.+32     	; 0x2a78 <free+0xda>
    2a58:	f9 01       	movw	r30, r18
    2a5a:	92 91       	ld	r25, -Z
    2a5c:	82 91       	ld	r24, -Z
    2a5e:	8c 0f       	add	r24, r28
    2a60:	9d 1f       	adc	r25, r29
    2a62:	02 96       	adiw	r24, 0x02	; 2
    2a64:	da 01       	movw	r26, r20
    2a66:	11 96       	adiw	r26, 0x01	; 1
    2a68:	9c 93       	st	X, r25
    2a6a:	8e 93       	st	-X, r24
    2a6c:	82 81       	ldd	r24, Z+2	; 0x02
    2a6e:	93 81       	ldd	r25, Z+3	; 0x03
    2a70:	13 96       	adiw	r26, 0x03	; 3
    2a72:	9c 93       	st	X, r25
    2a74:	8e 93       	st	-X, r24
    2a76:	12 97       	sbiw	r26, 0x02	; 2
    2a78:	e0 e0       	ldi	r30, 0x00	; 0
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	02 c0       	rjmp	.+4      	; 0x2a82 <free+0xe4>
    2a7e:	fb 01       	movw	r30, r22
    2a80:	bc 01       	movw	r22, r24
    2a82:	db 01       	movw	r26, r22
    2a84:	12 96       	adiw	r26, 0x02	; 2
    2a86:	8d 91       	ld	r24, X+
    2a88:	9c 91       	ld	r25, X
    2a8a:	13 97       	sbiw	r26, 0x03	; 3
    2a8c:	00 97       	sbiw	r24, 0x00	; 0
    2a8e:	b9 f7       	brne	.-18     	; 0x2a7e <free+0xe0>
    2a90:	cb 01       	movw	r24, r22
    2a92:	02 96       	adiw	r24, 0x02	; 2
    2a94:	2d 91       	ld	r18, X+
    2a96:	3c 91       	ld	r19, X
    2a98:	11 97       	sbiw	r26, 0x01	; 1
    2a9a:	82 0f       	add	r24, r18
    2a9c:	93 1f       	adc	r25, r19
    2a9e:	20 91 b2 02 	lds	r18, 0x02B2
    2aa2:	30 91 b3 02 	lds	r19, 0x02B3
    2aa6:	28 17       	cp	r18, r24
    2aa8:	39 07       	cpc	r19, r25
    2aaa:	69 f4       	brne	.+26     	; 0x2ac6 <free+0x128>
    2aac:	30 97       	sbiw	r30, 0x00	; 0
    2aae:	29 f4       	brne	.+10     	; 0x2aba <free+0x11c>
    2ab0:	10 92 b5 02 	sts	0x02B5, r1
    2ab4:	10 92 b4 02 	sts	0x02B4, r1
    2ab8:	02 c0       	rjmp	.+4      	; 0x2abe <free+0x120>
    2aba:	13 82       	std	Z+3, r1	; 0x03
    2abc:	12 82       	std	Z+2, r1	; 0x02
    2abe:	70 93 b3 02 	sts	0x02B3, r23
    2ac2:	60 93 b2 02 	sts	0x02B2, r22
    2ac6:	df 91       	pop	r29
    2ac8:	cf 91       	pop	r28
    2aca:	1f 91       	pop	r17
    2acc:	0f 91       	pop	r16
    2ace:	08 95       	ret

00002ad0 <sprintf>:
    2ad0:	0f 93       	push	r16
    2ad2:	1f 93       	push	r17
    2ad4:	cf 93       	push	r28
    2ad6:	df 93       	push	r29
    2ad8:	cd b7       	in	r28, 0x3d	; 61
    2ada:	de b7       	in	r29, 0x3e	; 62
    2adc:	2e 97       	sbiw	r28, 0x0e	; 14
    2ade:	0f b6       	in	r0, 0x3f	; 63
    2ae0:	f8 94       	cli
    2ae2:	de bf       	out	0x3e, r29	; 62
    2ae4:	0f be       	out	0x3f, r0	; 63
    2ae6:	cd bf       	out	0x3d, r28	; 61
    2ae8:	0d 89       	ldd	r16, Y+21	; 0x15
    2aea:	1e 89       	ldd	r17, Y+22	; 0x16
    2aec:	86 e0       	ldi	r24, 0x06	; 6
    2aee:	8c 83       	std	Y+4, r24	; 0x04
    2af0:	1a 83       	std	Y+2, r17	; 0x02
    2af2:	09 83       	std	Y+1, r16	; 0x01
    2af4:	8f ef       	ldi	r24, 0xFF	; 255
    2af6:	9f e7       	ldi	r25, 0x7F	; 127
    2af8:	9e 83       	std	Y+6, r25	; 0x06
    2afa:	8d 83       	std	Y+5, r24	; 0x05
    2afc:	ae 01       	movw	r20, r28
    2afe:	47 5e       	subi	r20, 0xE7	; 231
    2b00:	5f 4f       	sbci	r21, 0xFF	; 255
    2b02:	ce 01       	movw	r24, r28
    2b04:	01 96       	adiw	r24, 0x01	; 1
    2b06:	6f 89       	ldd	r22, Y+23	; 0x17
    2b08:	78 8d       	ldd	r23, Y+24	; 0x18
    2b0a:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <vfprintf>
    2b0e:	ef 81       	ldd	r30, Y+7	; 0x07
    2b10:	f8 85       	ldd	r31, Y+8	; 0x08
    2b12:	e0 0f       	add	r30, r16
    2b14:	f1 1f       	adc	r31, r17
    2b16:	10 82       	st	Z, r1
    2b18:	2e 96       	adiw	r28, 0x0e	; 14
    2b1a:	0f b6       	in	r0, 0x3f	; 63
    2b1c:	f8 94       	cli
    2b1e:	de bf       	out	0x3e, r29	; 62
    2b20:	0f be       	out	0x3f, r0	; 63
    2b22:	cd bf       	out	0x3d, r28	; 61
    2b24:	df 91       	pop	r29
    2b26:	cf 91       	pop	r28
    2b28:	1f 91       	pop	r17
    2b2a:	0f 91       	pop	r16
    2b2c:	08 95       	ret

00002b2e <vfprintf>:
    2b2e:	2f 92       	push	r2
    2b30:	3f 92       	push	r3
    2b32:	4f 92       	push	r4
    2b34:	5f 92       	push	r5
    2b36:	6f 92       	push	r6
    2b38:	7f 92       	push	r7
    2b3a:	8f 92       	push	r8
    2b3c:	9f 92       	push	r9
    2b3e:	af 92       	push	r10
    2b40:	bf 92       	push	r11
    2b42:	cf 92       	push	r12
    2b44:	df 92       	push	r13
    2b46:	ef 92       	push	r14
    2b48:	ff 92       	push	r15
    2b4a:	0f 93       	push	r16
    2b4c:	1f 93       	push	r17
    2b4e:	cf 93       	push	r28
    2b50:	df 93       	push	r29
    2b52:	cd b7       	in	r28, 0x3d	; 61
    2b54:	de b7       	in	r29, 0x3e	; 62
    2b56:	2d 97       	sbiw	r28, 0x0d	; 13
    2b58:	0f b6       	in	r0, 0x3f	; 63
    2b5a:	f8 94       	cli
    2b5c:	de bf       	out	0x3e, r29	; 62
    2b5e:	0f be       	out	0x3f, r0	; 63
    2b60:	cd bf       	out	0x3d, r28	; 61
    2b62:	3c 01       	movw	r6, r24
    2b64:	7d 87       	std	Y+13, r23	; 0x0d
    2b66:	6c 87       	std	Y+12, r22	; 0x0c
    2b68:	5a 01       	movw	r10, r20
    2b6a:	fc 01       	movw	r30, r24
    2b6c:	17 82       	std	Z+7, r1	; 0x07
    2b6e:	16 82       	std	Z+6, r1	; 0x06
    2b70:	83 81       	ldd	r24, Z+3	; 0x03
    2b72:	81 ff       	sbrs	r24, 1
    2b74:	c8 c1       	rjmp	.+912    	; 0x2f06 <vfprintf+0x3d8>
    2b76:	2e 01       	movw	r4, r28
    2b78:	08 94       	sec
    2b7a:	41 1c       	adc	r4, r1
    2b7c:	51 1c       	adc	r5, r1
    2b7e:	f3 01       	movw	r30, r6
    2b80:	93 81       	ldd	r25, Z+3	; 0x03
    2b82:	ec 85       	ldd	r30, Y+12	; 0x0c
    2b84:	fd 85       	ldd	r31, Y+13	; 0x0d
    2b86:	93 fd       	sbrc	r25, 3
    2b88:	85 91       	lpm	r24, Z+
    2b8a:	93 ff       	sbrs	r25, 3
    2b8c:	81 91       	ld	r24, Z+
    2b8e:	fd 87       	std	Y+13, r31	; 0x0d
    2b90:	ec 87       	std	Y+12, r30	; 0x0c
    2b92:	88 23       	and	r24, r24
    2b94:	09 f4       	brne	.+2      	; 0x2b98 <vfprintf+0x6a>
    2b96:	b3 c1       	rjmp	.+870    	; 0x2efe <vfprintf+0x3d0>
    2b98:	85 32       	cpi	r24, 0x25	; 37
    2b9a:	41 f4       	brne	.+16     	; 0x2bac <vfprintf+0x7e>
    2b9c:	93 fd       	sbrc	r25, 3
    2b9e:	85 91       	lpm	r24, Z+
    2ba0:	93 ff       	sbrs	r25, 3
    2ba2:	81 91       	ld	r24, Z+
    2ba4:	fd 87       	std	Y+13, r31	; 0x0d
    2ba6:	ec 87       	std	Y+12, r30	; 0x0c
    2ba8:	85 32       	cpi	r24, 0x25	; 37
    2baa:	29 f4       	brne	.+10     	; 0x2bb6 <vfprintf+0x88>
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	b3 01       	movw	r22, r6
    2bb0:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <fputc>
    2bb4:	e4 cf       	rjmp	.-56     	; 0x2b7e <vfprintf+0x50>
    2bb6:	ff 24       	eor	r15, r15
    2bb8:	ee 24       	eor	r14, r14
    2bba:	10 e0       	ldi	r17, 0x00	; 0
    2bbc:	10 32       	cpi	r17, 0x20	; 32
    2bbe:	b0 f4       	brcc	.+44     	; 0x2bec <vfprintf+0xbe>
    2bc0:	8b 32       	cpi	r24, 0x2B	; 43
    2bc2:	69 f0       	breq	.+26     	; 0x2bde <vfprintf+0xb0>
    2bc4:	8c 32       	cpi	r24, 0x2C	; 44
    2bc6:	28 f4       	brcc	.+10     	; 0x2bd2 <vfprintf+0xa4>
    2bc8:	80 32       	cpi	r24, 0x20	; 32
    2bca:	51 f0       	breq	.+20     	; 0x2be0 <vfprintf+0xb2>
    2bcc:	83 32       	cpi	r24, 0x23	; 35
    2bce:	71 f4       	brne	.+28     	; 0x2bec <vfprintf+0xbe>
    2bd0:	0b c0       	rjmp	.+22     	; 0x2be8 <vfprintf+0xba>
    2bd2:	8d 32       	cpi	r24, 0x2D	; 45
    2bd4:	39 f0       	breq	.+14     	; 0x2be4 <vfprintf+0xb6>
    2bd6:	80 33       	cpi	r24, 0x30	; 48
    2bd8:	49 f4       	brne	.+18     	; 0x2bec <vfprintf+0xbe>
    2bda:	11 60       	ori	r17, 0x01	; 1
    2bdc:	2c c0       	rjmp	.+88     	; 0x2c36 <vfprintf+0x108>
    2bde:	12 60       	ori	r17, 0x02	; 2
    2be0:	14 60       	ori	r17, 0x04	; 4
    2be2:	29 c0       	rjmp	.+82     	; 0x2c36 <vfprintf+0x108>
    2be4:	18 60       	ori	r17, 0x08	; 8
    2be6:	27 c0       	rjmp	.+78     	; 0x2c36 <vfprintf+0x108>
    2be8:	10 61       	ori	r17, 0x10	; 16
    2bea:	25 c0       	rjmp	.+74     	; 0x2c36 <vfprintf+0x108>
    2bec:	17 fd       	sbrc	r17, 7
    2bee:	2e c0       	rjmp	.+92     	; 0x2c4c <vfprintf+0x11e>
    2bf0:	28 2f       	mov	r18, r24
    2bf2:	20 53       	subi	r18, 0x30	; 48
    2bf4:	2a 30       	cpi	r18, 0x0A	; 10
    2bf6:	98 f4       	brcc	.+38     	; 0x2c1e <vfprintf+0xf0>
    2bf8:	16 ff       	sbrs	r17, 6
    2bfa:	08 c0       	rjmp	.+16     	; 0x2c0c <vfprintf+0xde>
    2bfc:	8f 2d       	mov	r24, r15
    2bfe:	88 0f       	add	r24, r24
    2c00:	f8 2e       	mov	r15, r24
    2c02:	ff 0c       	add	r15, r15
    2c04:	ff 0c       	add	r15, r15
    2c06:	f8 0e       	add	r15, r24
    2c08:	f2 0e       	add	r15, r18
    2c0a:	15 c0       	rjmp	.+42     	; 0x2c36 <vfprintf+0x108>
    2c0c:	8e 2d       	mov	r24, r14
    2c0e:	88 0f       	add	r24, r24
    2c10:	e8 2e       	mov	r14, r24
    2c12:	ee 0c       	add	r14, r14
    2c14:	ee 0c       	add	r14, r14
    2c16:	e8 0e       	add	r14, r24
    2c18:	e2 0e       	add	r14, r18
    2c1a:	10 62       	ori	r17, 0x20	; 32
    2c1c:	0c c0       	rjmp	.+24     	; 0x2c36 <vfprintf+0x108>
    2c1e:	8e 32       	cpi	r24, 0x2E	; 46
    2c20:	21 f4       	brne	.+8      	; 0x2c2a <vfprintf+0xfc>
    2c22:	16 fd       	sbrc	r17, 6
    2c24:	6c c1       	rjmp	.+728    	; 0x2efe <vfprintf+0x3d0>
    2c26:	10 64       	ori	r17, 0x40	; 64
    2c28:	06 c0       	rjmp	.+12     	; 0x2c36 <vfprintf+0x108>
    2c2a:	8c 36       	cpi	r24, 0x6C	; 108
    2c2c:	11 f4       	brne	.+4      	; 0x2c32 <vfprintf+0x104>
    2c2e:	10 68       	ori	r17, 0x80	; 128
    2c30:	02 c0       	rjmp	.+4      	; 0x2c36 <vfprintf+0x108>
    2c32:	88 36       	cpi	r24, 0x68	; 104
    2c34:	59 f4       	brne	.+22     	; 0x2c4c <vfprintf+0x11e>
    2c36:	ec 85       	ldd	r30, Y+12	; 0x0c
    2c38:	fd 85       	ldd	r31, Y+13	; 0x0d
    2c3a:	93 fd       	sbrc	r25, 3
    2c3c:	85 91       	lpm	r24, Z+
    2c3e:	93 ff       	sbrs	r25, 3
    2c40:	81 91       	ld	r24, Z+
    2c42:	fd 87       	std	Y+13, r31	; 0x0d
    2c44:	ec 87       	std	Y+12, r30	; 0x0c
    2c46:	88 23       	and	r24, r24
    2c48:	09 f0       	breq	.+2      	; 0x2c4c <vfprintf+0x11e>
    2c4a:	b8 cf       	rjmp	.-144    	; 0x2bbc <vfprintf+0x8e>
    2c4c:	98 2f       	mov	r25, r24
    2c4e:	95 54       	subi	r25, 0x45	; 69
    2c50:	93 30       	cpi	r25, 0x03	; 3
    2c52:	18 f0       	brcs	.+6      	; 0x2c5a <vfprintf+0x12c>
    2c54:	90 52       	subi	r25, 0x20	; 32
    2c56:	93 30       	cpi	r25, 0x03	; 3
    2c58:	38 f4       	brcc	.+14     	; 0x2c68 <vfprintf+0x13a>
    2c5a:	24 e0       	ldi	r18, 0x04	; 4
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	a2 0e       	add	r10, r18
    2c60:	b3 1e       	adc	r11, r19
    2c62:	3f e3       	ldi	r19, 0x3F	; 63
    2c64:	39 83       	std	Y+1, r19	; 0x01
    2c66:	0f c0       	rjmp	.+30     	; 0x2c86 <vfprintf+0x158>
    2c68:	83 36       	cpi	r24, 0x63	; 99
    2c6a:	31 f0       	breq	.+12     	; 0x2c78 <vfprintf+0x14a>
    2c6c:	83 37       	cpi	r24, 0x73	; 115
    2c6e:	81 f0       	breq	.+32     	; 0x2c90 <vfprintf+0x162>
    2c70:	83 35       	cpi	r24, 0x53	; 83
    2c72:	09 f0       	breq	.+2      	; 0x2c76 <vfprintf+0x148>
    2c74:	5a c0       	rjmp	.+180    	; 0x2d2a <vfprintf+0x1fc>
    2c76:	22 c0       	rjmp	.+68     	; 0x2cbc <vfprintf+0x18e>
    2c78:	f5 01       	movw	r30, r10
    2c7a:	80 81       	ld	r24, Z
    2c7c:	89 83       	std	Y+1, r24	; 0x01
    2c7e:	22 e0       	ldi	r18, 0x02	; 2
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	a2 0e       	add	r10, r18
    2c84:	b3 1e       	adc	r11, r19
    2c86:	21 e0       	ldi	r18, 0x01	; 1
    2c88:	c2 2e       	mov	r12, r18
    2c8a:	d1 2c       	mov	r13, r1
    2c8c:	42 01       	movw	r8, r4
    2c8e:	14 c0       	rjmp	.+40     	; 0x2cb8 <vfprintf+0x18a>
    2c90:	92 e0       	ldi	r25, 0x02	; 2
    2c92:	29 2e       	mov	r2, r25
    2c94:	31 2c       	mov	r3, r1
    2c96:	2a 0c       	add	r2, r10
    2c98:	3b 1c       	adc	r3, r11
    2c9a:	f5 01       	movw	r30, r10
    2c9c:	80 80       	ld	r8, Z
    2c9e:	91 80       	ldd	r9, Z+1	; 0x01
    2ca0:	16 ff       	sbrs	r17, 6
    2ca2:	03 c0       	rjmp	.+6      	; 0x2caa <vfprintf+0x17c>
    2ca4:	6f 2d       	mov	r22, r15
    2ca6:	70 e0       	ldi	r23, 0x00	; 0
    2ca8:	02 c0       	rjmp	.+4      	; 0x2cae <vfprintf+0x180>
    2caa:	6f ef       	ldi	r22, 0xFF	; 255
    2cac:	7f ef       	ldi	r23, 0xFF	; 255
    2cae:	c4 01       	movw	r24, r8
    2cb0:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <strnlen>
    2cb4:	6c 01       	movw	r12, r24
    2cb6:	51 01       	movw	r10, r2
    2cb8:	1f 77       	andi	r17, 0x7F	; 127
    2cba:	15 c0       	rjmp	.+42     	; 0x2ce6 <vfprintf+0x1b8>
    2cbc:	82 e0       	ldi	r24, 0x02	; 2
    2cbe:	28 2e       	mov	r2, r24
    2cc0:	31 2c       	mov	r3, r1
    2cc2:	2a 0c       	add	r2, r10
    2cc4:	3b 1c       	adc	r3, r11
    2cc6:	f5 01       	movw	r30, r10
    2cc8:	80 80       	ld	r8, Z
    2cca:	91 80       	ldd	r9, Z+1	; 0x01
    2ccc:	16 ff       	sbrs	r17, 6
    2cce:	03 c0       	rjmp	.+6      	; 0x2cd6 <vfprintf+0x1a8>
    2cd0:	6f 2d       	mov	r22, r15
    2cd2:	70 e0       	ldi	r23, 0x00	; 0
    2cd4:	02 c0       	rjmp	.+4      	; 0x2cda <vfprintf+0x1ac>
    2cd6:	6f ef       	ldi	r22, 0xFF	; 255
    2cd8:	7f ef       	ldi	r23, 0xFF	; 255
    2cda:	c4 01       	movw	r24, r8
    2cdc:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <strnlen_P>
    2ce0:	6c 01       	movw	r12, r24
    2ce2:	10 68       	ori	r17, 0x80	; 128
    2ce4:	51 01       	movw	r10, r2
    2ce6:	13 fd       	sbrc	r17, 3
    2ce8:	1c c0       	rjmp	.+56     	; 0x2d22 <vfprintf+0x1f4>
    2cea:	06 c0       	rjmp	.+12     	; 0x2cf8 <vfprintf+0x1ca>
    2cec:	80 e2       	ldi	r24, 0x20	; 32
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	b3 01       	movw	r22, r6
    2cf2:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <fputc>
    2cf6:	ea 94       	dec	r14
    2cf8:	8e 2d       	mov	r24, r14
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	c8 16       	cp	r12, r24
    2cfe:	d9 06       	cpc	r13, r25
    2d00:	a8 f3       	brcs	.-22     	; 0x2cec <vfprintf+0x1be>
    2d02:	0f c0       	rjmp	.+30     	; 0x2d22 <vfprintf+0x1f4>
    2d04:	f4 01       	movw	r30, r8
    2d06:	17 fd       	sbrc	r17, 7
    2d08:	85 91       	lpm	r24, Z+
    2d0a:	17 ff       	sbrs	r17, 7
    2d0c:	81 91       	ld	r24, Z+
    2d0e:	4f 01       	movw	r8, r30
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	b3 01       	movw	r22, r6
    2d14:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <fputc>
    2d18:	e1 10       	cpse	r14, r1
    2d1a:	ea 94       	dec	r14
    2d1c:	08 94       	sec
    2d1e:	c1 08       	sbc	r12, r1
    2d20:	d1 08       	sbc	r13, r1
    2d22:	c1 14       	cp	r12, r1
    2d24:	d1 04       	cpc	r13, r1
    2d26:	71 f7       	brne	.-36     	; 0x2d04 <vfprintf+0x1d6>
    2d28:	e7 c0       	rjmp	.+462    	; 0x2ef8 <vfprintf+0x3ca>
    2d2a:	84 36       	cpi	r24, 0x64	; 100
    2d2c:	11 f0       	breq	.+4      	; 0x2d32 <vfprintf+0x204>
    2d2e:	89 36       	cpi	r24, 0x69	; 105
    2d30:	51 f5       	brne	.+84     	; 0x2d86 <vfprintf+0x258>
    2d32:	f5 01       	movw	r30, r10
    2d34:	17 ff       	sbrs	r17, 7
    2d36:	07 c0       	rjmp	.+14     	; 0x2d46 <vfprintf+0x218>
    2d38:	80 81       	ld	r24, Z
    2d3a:	91 81       	ldd	r25, Z+1	; 0x01
    2d3c:	a2 81       	ldd	r26, Z+2	; 0x02
    2d3e:	b3 81       	ldd	r27, Z+3	; 0x03
    2d40:	24 e0       	ldi	r18, 0x04	; 4
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	08 c0       	rjmp	.+16     	; 0x2d56 <vfprintf+0x228>
    2d46:	80 81       	ld	r24, Z
    2d48:	91 81       	ldd	r25, Z+1	; 0x01
    2d4a:	aa 27       	eor	r26, r26
    2d4c:	97 fd       	sbrc	r25, 7
    2d4e:	a0 95       	com	r26
    2d50:	ba 2f       	mov	r27, r26
    2d52:	22 e0       	ldi	r18, 0x02	; 2
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	a2 0e       	add	r10, r18
    2d58:	b3 1e       	adc	r11, r19
    2d5a:	01 2f       	mov	r16, r17
    2d5c:	0f 76       	andi	r16, 0x6F	; 111
    2d5e:	b7 ff       	sbrs	r27, 7
    2d60:	08 c0       	rjmp	.+16     	; 0x2d72 <vfprintf+0x244>
    2d62:	b0 95       	com	r27
    2d64:	a0 95       	com	r26
    2d66:	90 95       	com	r25
    2d68:	81 95       	neg	r24
    2d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d6c:	af 4f       	sbci	r26, 0xFF	; 255
    2d6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2d70:	00 68       	ori	r16, 0x80	; 128
    2d72:	bc 01       	movw	r22, r24
    2d74:	cd 01       	movw	r24, r26
    2d76:	a2 01       	movw	r20, r4
    2d78:	2a e0       	ldi	r18, 0x0A	; 10
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__ultoa_invert>
    2d80:	d8 2e       	mov	r13, r24
    2d82:	d4 18       	sub	r13, r4
    2d84:	3f c0       	rjmp	.+126    	; 0x2e04 <vfprintf+0x2d6>
    2d86:	85 37       	cpi	r24, 0x75	; 117
    2d88:	21 f4       	brne	.+8      	; 0x2d92 <vfprintf+0x264>
    2d8a:	1f 7e       	andi	r17, 0xEF	; 239
    2d8c:	2a e0       	ldi	r18, 0x0A	; 10
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	20 c0       	rjmp	.+64     	; 0x2dd2 <vfprintf+0x2a4>
    2d92:	19 7f       	andi	r17, 0xF9	; 249
    2d94:	8f 36       	cpi	r24, 0x6F	; 111
    2d96:	a9 f0       	breq	.+42     	; 0x2dc2 <vfprintf+0x294>
    2d98:	80 37       	cpi	r24, 0x70	; 112
    2d9a:	20 f4       	brcc	.+8      	; 0x2da4 <vfprintf+0x276>
    2d9c:	88 35       	cpi	r24, 0x58	; 88
    2d9e:	09 f0       	breq	.+2      	; 0x2da2 <vfprintf+0x274>
    2da0:	ae c0       	rjmp	.+348    	; 0x2efe <vfprintf+0x3d0>
    2da2:	0b c0       	rjmp	.+22     	; 0x2dba <vfprintf+0x28c>
    2da4:	80 37       	cpi	r24, 0x70	; 112
    2da6:	21 f0       	breq	.+8      	; 0x2db0 <vfprintf+0x282>
    2da8:	88 37       	cpi	r24, 0x78	; 120
    2daa:	09 f0       	breq	.+2      	; 0x2dae <vfprintf+0x280>
    2dac:	a8 c0       	rjmp	.+336    	; 0x2efe <vfprintf+0x3d0>
    2dae:	01 c0       	rjmp	.+2      	; 0x2db2 <vfprintf+0x284>
    2db0:	10 61       	ori	r17, 0x10	; 16
    2db2:	14 ff       	sbrs	r17, 4
    2db4:	09 c0       	rjmp	.+18     	; 0x2dc8 <vfprintf+0x29a>
    2db6:	14 60       	ori	r17, 0x04	; 4
    2db8:	07 c0       	rjmp	.+14     	; 0x2dc8 <vfprintf+0x29a>
    2dba:	14 ff       	sbrs	r17, 4
    2dbc:	08 c0       	rjmp	.+16     	; 0x2dce <vfprintf+0x2a0>
    2dbe:	16 60       	ori	r17, 0x06	; 6
    2dc0:	06 c0       	rjmp	.+12     	; 0x2dce <vfprintf+0x2a0>
    2dc2:	28 e0       	ldi	r18, 0x08	; 8
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	05 c0       	rjmp	.+10     	; 0x2dd2 <vfprintf+0x2a4>
    2dc8:	20 e1       	ldi	r18, 0x10	; 16
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	02 c0       	rjmp	.+4      	; 0x2dd2 <vfprintf+0x2a4>
    2dce:	20 e1       	ldi	r18, 0x10	; 16
    2dd0:	32 e0       	ldi	r19, 0x02	; 2
    2dd2:	f5 01       	movw	r30, r10
    2dd4:	17 ff       	sbrs	r17, 7
    2dd6:	07 c0       	rjmp	.+14     	; 0x2de6 <vfprintf+0x2b8>
    2dd8:	60 81       	ld	r22, Z
    2dda:	71 81       	ldd	r23, Z+1	; 0x01
    2ddc:	82 81       	ldd	r24, Z+2	; 0x02
    2dde:	93 81       	ldd	r25, Z+3	; 0x03
    2de0:	44 e0       	ldi	r20, 0x04	; 4
    2de2:	50 e0       	ldi	r21, 0x00	; 0
    2de4:	06 c0       	rjmp	.+12     	; 0x2df2 <vfprintf+0x2c4>
    2de6:	60 81       	ld	r22, Z
    2de8:	71 81       	ldd	r23, Z+1	; 0x01
    2dea:	80 e0       	ldi	r24, 0x00	; 0
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	42 e0       	ldi	r20, 0x02	; 2
    2df0:	50 e0       	ldi	r21, 0x00	; 0
    2df2:	a4 0e       	add	r10, r20
    2df4:	b5 1e       	adc	r11, r21
    2df6:	a2 01       	movw	r20, r4
    2df8:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <__ultoa_invert>
    2dfc:	d8 2e       	mov	r13, r24
    2dfe:	d4 18       	sub	r13, r4
    2e00:	01 2f       	mov	r16, r17
    2e02:	0f 77       	andi	r16, 0x7F	; 127
    2e04:	06 ff       	sbrs	r16, 6
    2e06:	09 c0       	rjmp	.+18     	; 0x2e1a <vfprintf+0x2ec>
    2e08:	0e 7f       	andi	r16, 0xFE	; 254
    2e0a:	df 14       	cp	r13, r15
    2e0c:	30 f4       	brcc	.+12     	; 0x2e1a <vfprintf+0x2ec>
    2e0e:	04 ff       	sbrs	r16, 4
    2e10:	06 c0       	rjmp	.+12     	; 0x2e1e <vfprintf+0x2f0>
    2e12:	02 fd       	sbrc	r16, 2
    2e14:	04 c0       	rjmp	.+8      	; 0x2e1e <vfprintf+0x2f0>
    2e16:	0f 7e       	andi	r16, 0xEF	; 239
    2e18:	02 c0       	rjmp	.+4      	; 0x2e1e <vfprintf+0x2f0>
    2e1a:	1d 2d       	mov	r17, r13
    2e1c:	01 c0       	rjmp	.+2      	; 0x2e20 <vfprintf+0x2f2>
    2e1e:	1f 2d       	mov	r17, r15
    2e20:	80 2f       	mov	r24, r16
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	04 ff       	sbrs	r16, 4
    2e26:	0c c0       	rjmp	.+24     	; 0x2e40 <vfprintf+0x312>
    2e28:	fe 01       	movw	r30, r28
    2e2a:	ed 0d       	add	r30, r13
    2e2c:	f1 1d       	adc	r31, r1
    2e2e:	20 81       	ld	r18, Z
    2e30:	20 33       	cpi	r18, 0x30	; 48
    2e32:	11 f4       	brne	.+4      	; 0x2e38 <vfprintf+0x30a>
    2e34:	09 7e       	andi	r16, 0xE9	; 233
    2e36:	09 c0       	rjmp	.+18     	; 0x2e4a <vfprintf+0x31c>
    2e38:	02 ff       	sbrs	r16, 2
    2e3a:	06 c0       	rjmp	.+12     	; 0x2e48 <vfprintf+0x31a>
    2e3c:	1e 5f       	subi	r17, 0xFE	; 254
    2e3e:	05 c0       	rjmp	.+10     	; 0x2e4a <vfprintf+0x31c>
    2e40:	86 78       	andi	r24, 0x86	; 134
    2e42:	90 70       	andi	r25, 0x00	; 0
    2e44:	00 97       	sbiw	r24, 0x00	; 0
    2e46:	09 f0       	breq	.+2      	; 0x2e4a <vfprintf+0x31c>
    2e48:	1f 5f       	subi	r17, 0xFF	; 255
    2e4a:	80 2e       	mov	r8, r16
    2e4c:	99 24       	eor	r9, r9
    2e4e:	03 fd       	sbrc	r16, 3
    2e50:	12 c0       	rjmp	.+36     	; 0x2e76 <vfprintf+0x348>
    2e52:	00 ff       	sbrs	r16, 0
    2e54:	0d c0       	rjmp	.+26     	; 0x2e70 <vfprintf+0x342>
    2e56:	fd 2c       	mov	r15, r13
    2e58:	1e 15       	cp	r17, r14
    2e5a:	50 f4       	brcc	.+20     	; 0x2e70 <vfprintf+0x342>
    2e5c:	fe 0c       	add	r15, r14
    2e5e:	f1 1a       	sub	r15, r17
    2e60:	1e 2d       	mov	r17, r14
    2e62:	06 c0       	rjmp	.+12     	; 0x2e70 <vfprintf+0x342>
    2e64:	80 e2       	ldi	r24, 0x20	; 32
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	b3 01       	movw	r22, r6
    2e6a:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <fputc>
    2e6e:	1f 5f       	subi	r17, 0xFF	; 255
    2e70:	1e 15       	cp	r17, r14
    2e72:	c0 f3       	brcs	.-16     	; 0x2e64 <vfprintf+0x336>
    2e74:	04 c0       	rjmp	.+8      	; 0x2e7e <vfprintf+0x350>
    2e76:	1e 15       	cp	r17, r14
    2e78:	10 f4       	brcc	.+4      	; 0x2e7e <vfprintf+0x350>
    2e7a:	e1 1a       	sub	r14, r17
    2e7c:	01 c0       	rjmp	.+2      	; 0x2e80 <vfprintf+0x352>
    2e7e:	ee 24       	eor	r14, r14
    2e80:	84 fe       	sbrs	r8, 4
    2e82:	0f c0       	rjmp	.+30     	; 0x2ea2 <vfprintf+0x374>
    2e84:	80 e3       	ldi	r24, 0x30	; 48
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	b3 01       	movw	r22, r6
    2e8a:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <fputc>
    2e8e:	82 fe       	sbrs	r8, 2
    2e90:	1f c0       	rjmp	.+62     	; 0x2ed0 <vfprintf+0x3a2>
    2e92:	81 fe       	sbrs	r8, 1
    2e94:	03 c0       	rjmp	.+6      	; 0x2e9c <vfprintf+0x36e>
    2e96:	88 e5       	ldi	r24, 0x58	; 88
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	10 c0       	rjmp	.+32     	; 0x2ebc <vfprintf+0x38e>
    2e9c:	88 e7       	ldi	r24, 0x78	; 120
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	0d c0       	rjmp	.+26     	; 0x2ebc <vfprintf+0x38e>
    2ea2:	c4 01       	movw	r24, r8
    2ea4:	86 78       	andi	r24, 0x86	; 134
    2ea6:	90 70       	andi	r25, 0x00	; 0
    2ea8:	00 97       	sbiw	r24, 0x00	; 0
    2eaa:	91 f0       	breq	.+36     	; 0x2ed0 <vfprintf+0x3a2>
    2eac:	81 fc       	sbrc	r8, 1
    2eae:	02 c0       	rjmp	.+4      	; 0x2eb4 <vfprintf+0x386>
    2eb0:	80 e2       	ldi	r24, 0x20	; 32
    2eb2:	01 c0       	rjmp	.+2      	; 0x2eb6 <vfprintf+0x388>
    2eb4:	8b e2       	ldi	r24, 0x2B	; 43
    2eb6:	07 fd       	sbrc	r16, 7
    2eb8:	8d e2       	ldi	r24, 0x2D	; 45
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	b3 01       	movw	r22, r6
    2ebe:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <fputc>
    2ec2:	06 c0       	rjmp	.+12     	; 0x2ed0 <vfprintf+0x3a2>
    2ec4:	80 e3       	ldi	r24, 0x30	; 48
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	b3 01       	movw	r22, r6
    2eca:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <fputc>
    2ece:	fa 94       	dec	r15
    2ed0:	df 14       	cp	r13, r15
    2ed2:	c0 f3       	brcs	.-16     	; 0x2ec4 <vfprintf+0x396>
    2ed4:	da 94       	dec	r13
    2ed6:	f2 01       	movw	r30, r4
    2ed8:	ed 0d       	add	r30, r13
    2eda:	f1 1d       	adc	r31, r1
    2edc:	80 81       	ld	r24, Z
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	b3 01       	movw	r22, r6
    2ee2:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <fputc>
    2ee6:	dd 20       	and	r13, r13
    2ee8:	a9 f7       	brne	.-22     	; 0x2ed4 <vfprintf+0x3a6>
    2eea:	06 c0       	rjmp	.+12     	; 0x2ef8 <vfprintf+0x3ca>
    2eec:	80 e2       	ldi	r24, 0x20	; 32
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	b3 01       	movw	r22, r6
    2ef2:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <fputc>
    2ef6:	ea 94       	dec	r14
    2ef8:	ee 20       	and	r14, r14
    2efa:	c1 f7       	brne	.-16     	; 0x2eec <vfprintf+0x3be>
    2efc:	40 ce       	rjmp	.-896    	; 0x2b7e <vfprintf+0x50>
    2efe:	f3 01       	movw	r30, r6
    2f00:	86 81       	ldd	r24, Z+6	; 0x06
    2f02:	97 81       	ldd	r25, Z+7	; 0x07
    2f04:	02 c0       	rjmp	.+4      	; 0x2f0a <vfprintf+0x3dc>
    2f06:	8f ef       	ldi	r24, 0xFF	; 255
    2f08:	9f ef       	ldi	r25, 0xFF	; 255
    2f0a:	2d 96       	adiw	r28, 0x0d	; 13
    2f0c:	0f b6       	in	r0, 0x3f	; 63
    2f0e:	f8 94       	cli
    2f10:	de bf       	out	0x3e, r29	; 62
    2f12:	0f be       	out	0x3f, r0	; 63
    2f14:	cd bf       	out	0x3d, r28	; 61
    2f16:	df 91       	pop	r29
    2f18:	cf 91       	pop	r28
    2f1a:	1f 91       	pop	r17
    2f1c:	0f 91       	pop	r16
    2f1e:	ff 90       	pop	r15
    2f20:	ef 90       	pop	r14
    2f22:	df 90       	pop	r13
    2f24:	cf 90       	pop	r12
    2f26:	bf 90       	pop	r11
    2f28:	af 90       	pop	r10
    2f2a:	9f 90       	pop	r9
    2f2c:	8f 90       	pop	r8
    2f2e:	7f 90       	pop	r7
    2f30:	6f 90       	pop	r6
    2f32:	5f 90       	pop	r5
    2f34:	4f 90       	pop	r4
    2f36:	3f 90       	pop	r3
    2f38:	2f 90       	pop	r2
    2f3a:	08 95       	ret

00002f3c <strnlen_P>:
    2f3c:	fc 01       	movw	r30, r24
    2f3e:	05 90       	lpm	r0, Z+
    2f40:	61 50       	subi	r22, 0x01	; 1
    2f42:	70 40       	sbci	r23, 0x00	; 0
    2f44:	01 10       	cpse	r0, r1
    2f46:	d8 f7       	brcc	.-10     	; 0x2f3e <strnlen_P+0x2>
    2f48:	80 95       	com	r24
    2f4a:	90 95       	com	r25
    2f4c:	8e 0f       	add	r24, r30
    2f4e:	9f 1f       	adc	r25, r31
    2f50:	08 95       	ret

00002f52 <strnlen>:
    2f52:	fc 01       	movw	r30, r24
    2f54:	61 50       	subi	r22, 0x01	; 1
    2f56:	70 40       	sbci	r23, 0x00	; 0
    2f58:	01 90       	ld	r0, Z+
    2f5a:	01 10       	cpse	r0, r1
    2f5c:	d8 f7       	brcc	.-10     	; 0x2f54 <strnlen+0x2>
    2f5e:	80 95       	com	r24
    2f60:	90 95       	com	r25
    2f62:	8e 0f       	add	r24, r30
    2f64:	9f 1f       	adc	r25, r31
    2f66:	08 95       	ret

00002f68 <fputc>:
    2f68:	0f 93       	push	r16
    2f6a:	1f 93       	push	r17
    2f6c:	cf 93       	push	r28
    2f6e:	df 93       	push	r29
    2f70:	8c 01       	movw	r16, r24
    2f72:	eb 01       	movw	r28, r22
    2f74:	8b 81       	ldd	r24, Y+3	; 0x03
    2f76:	81 ff       	sbrs	r24, 1
    2f78:	1b c0       	rjmp	.+54     	; 0x2fb0 <fputc+0x48>
    2f7a:	82 ff       	sbrs	r24, 2
    2f7c:	0d c0       	rjmp	.+26     	; 0x2f98 <fputc+0x30>
    2f7e:	2e 81       	ldd	r18, Y+6	; 0x06
    2f80:	3f 81       	ldd	r19, Y+7	; 0x07
    2f82:	8c 81       	ldd	r24, Y+4	; 0x04
    2f84:	9d 81       	ldd	r25, Y+5	; 0x05
    2f86:	28 17       	cp	r18, r24
    2f88:	39 07       	cpc	r19, r25
    2f8a:	64 f4       	brge	.+24     	; 0x2fa4 <fputc+0x3c>
    2f8c:	e8 81       	ld	r30, Y
    2f8e:	f9 81       	ldd	r31, Y+1	; 0x01
    2f90:	01 93       	st	Z+, r16
    2f92:	f9 83       	std	Y+1, r31	; 0x01
    2f94:	e8 83       	st	Y, r30
    2f96:	06 c0       	rjmp	.+12     	; 0x2fa4 <fputc+0x3c>
    2f98:	e8 85       	ldd	r30, Y+8	; 0x08
    2f9a:	f9 85       	ldd	r31, Y+9	; 0x09
    2f9c:	80 2f       	mov	r24, r16
    2f9e:	09 95       	icall
    2fa0:	00 97       	sbiw	r24, 0x00	; 0
    2fa2:	31 f4       	brne	.+12     	; 0x2fb0 <fputc+0x48>
    2fa4:	8e 81       	ldd	r24, Y+6	; 0x06
    2fa6:	9f 81       	ldd	r25, Y+7	; 0x07
    2fa8:	01 96       	adiw	r24, 0x01	; 1
    2faa:	9f 83       	std	Y+7, r25	; 0x07
    2fac:	8e 83       	std	Y+6, r24	; 0x06
    2fae:	02 c0       	rjmp	.+4      	; 0x2fb4 <fputc+0x4c>
    2fb0:	0f ef       	ldi	r16, 0xFF	; 255
    2fb2:	1f ef       	ldi	r17, 0xFF	; 255
    2fb4:	c8 01       	movw	r24, r16
    2fb6:	df 91       	pop	r29
    2fb8:	cf 91       	pop	r28
    2fba:	1f 91       	pop	r17
    2fbc:	0f 91       	pop	r16
    2fbe:	08 95       	ret

00002fc0 <__ultoa_invert>:
    2fc0:	fa 01       	movw	r30, r20
    2fc2:	aa 27       	eor	r26, r26
    2fc4:	28 30       	cpi	r18, 0x08	; 8
    2fc6:	51 f1       	breq	.+84     	; 0x301c <__ultoa_invert+0x5c>
    2fc8:	20 31       	cpi	r18, 0x10	; 16
    2fca:	81 f1       	breq	.+96     	; 0x302c <__ultoa_invert+0x6c>
    2fcc:	e8 94       	clt
    2fce:	6f 93       	push	r22
    2fd0:	6e 7f       	andi	r22, 0xFE	; 254
    2fd2:	6e 5f       	subi	r22, 0xFE	; 254
    2fd4:	7f 4f       	sbci	r23, 0xFF	; 255
    2fd6:	8f 4f       	sbci	r24, 0xFF	; 255
    2fd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2fda:	af 4f       	sbci	r26, 0xFF	; 255
    2fdc:	b1 e0       	ldi	r27, 0x01	; 1
    2fde:	3e d0       	rcall	.+124    	; 0x305c <__ultoa_invert+0x9c>
    2fe0:	b4 e0       	ldi	r27, 0x04	; 4
    2fe2:	3c d0       	rcall	.+120    	; 0x305c <__ultoa_invert+0x9c>
    2fe4:	67 0f       	add	r22, r23
    2fe6:	78 1f       	adc	r23, r24
    2fe8:	89 1f       	adc	r24, r25
    2fea:	9a 1f       	adc	r25, r26
    2fec:	a1 1d       	adc	r26, r1
    2fee:	68 0f       	add	r22, r24
    2ff0:	79 1f       	adc	r23, r25
    2ff2:	8a 1f       	adc	r24, r26
    2ff4:	91 1d       	adc	r25, r1
    2ff6:	a1 1d       	adc	r26, r1
    2ff8:	6a 0f       	add	r22, r26
    2ffa:	71 1d       	adc	r23, r1
    2ffc:	81 1d       	adc	r24, r1
    2ffe:	91 1d       	adc	r25, r1
    3000:	a1 1d       	adc	r26, r1
    3002:	20 d0       	rcall	.+64     	; 0x3044 <__ultoa_invert+0x84>
    3004:	09 f4       	brne	.+2      	; 0x3008 <__ultoa_invert+0x48>
    3006:	68 94       	set
    3008:	3f 91       	pop	r19
    300a:	2a e0       	ldi	r18, 0x0A	; 10
    300c:	26 9f       	mul	r18, r22
    300e:	11 24       	eor	r1, r1
    3010:	30 19       	sub	r19, r0
    3012:	30 5d       	subi	r19, 0xD0	; 208
    3014:	31 93       	st	Z+, r19
    3016:	de f6       	brtc	.-74     	; 0x2fce <__ultoa_invert+0xe>
    3018:	cf 01       	movw	r24, r30
    301a:	08 95       	ret
    301c:	46 2f       	mov	r20, r22
    301e:	47 70       	andi	r20, 0x07	; 7
    3020:	40 5d       	subi	r20, 0xD0	; 208
    3022:	41 93       	st	Z+, r20
    3024:	b3 e0       	ldi	r27, 0x03	; 3
    3026:	0f d0       	rcall	.+30     	; 0x3046 <__ultoa_invert+0x86>
    3028:	c9 f7       	brne	.-14     	; 0x301c <__ultoa_invert+0x5c>
    302a:	f6 cf       	rjmp	.-20     	; 0x3018 <__ultoa_invert+0x58>
    302c:	46 2f       	mov	r20, r22
    302e:	4f 70       	andi	r20, 0x0F	; 15
    3030:	40 5d       	subi	r20, 0xD0	; 208
    3032:	4a 33       	cpi	r20, 0x3A	; 58
    3034:	18 f0       	brcs	.+6      	; 0x303c <__ultoa_invert+0x7c>
    3036:	49 5d       	subi	r20, 0xD9	; 217
    3038:	31 fd       	sbrc	r19, 1
    303a:	40 52       	subi	r20, 0x20	; 32
    303c:	41 93       	st	Z+, r20
    303e:	02 d0       	rcall	.+4      	; 0x3044 <__ultoa_invert+0x84>
    3040:	a9 f7       	brne	.-22     	; 0x302c <__ultoa_invert+0x6c>
    3042:	ea cf       	rjmp	.-44     	; 0x3018 <__ultoa_invert+0x58>
    3044:	b4 e0       	ldi	r27, 0x04	; 4
    3046:	a6 95       	lsr	r26
    3048:	97 95       	ror	r25
    304a:	87 95       	ror	r24
    304c:	77 95       	ror	r23
    304e:	67 95       	ror	r22
    3050:	ba 95       	dec	r27
    3052:	c9 f7       	brne	.-14     	; 0x3046 <__ultoa_invert+0x86>
    3054:	00 97       	sbiw	r24, 0x00	; 0
    3056:	61 05       	cpc	r22, r1
    3058:	71 05       	cpc	r23, r1
    305a:	08 95       	ret
    305c:	9b 01       	movw	r18, r22
    305e:	ac 01       	movw	r20, r24
    3060:	0a 2e       	mov	r0, r26
    3062:	06 94       	lsr	r0
    3064:	57 95       	ror	r21
    3066:	47 95       	ror	r20
    3068:	37 95       	ror	r19
    306a:	27 95       	ror	r18
    306c:	ba 95       	dec	r27
    306e:	c9 f7       	brne	.-14     	; 0x3062 <__ultoa_invert+0xa2>
    3070:	62 0f       	add	r22, r18
    3072:	73 1f       	adc	r23, r19
    3074:	84 1f       	adc	r24, r20
    3076:	95 1f       	adc	r25, r21
    3078:	a0 1d       	adc	r26, r0
    307a:	08 95       	ret

0000307c <_exit>:
    307c:	f8 94       	cli

0000307e <__stop_program>:
    307e:	ff cf       	rjmp	.-2      	; 0x307e <__stop_program>
