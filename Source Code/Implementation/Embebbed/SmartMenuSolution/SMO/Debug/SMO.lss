
SMO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000178  00800100  000038c4  00003958  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000038c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000060  00800278  00800278  00003ad0  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00003ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  00004754  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000248  00000000  00000000  00004910  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003d9a  00000000  00000000  00004b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fe6  00000000  00000000  000088f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019fd  00000000  00000000  000098d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000af4  00000000  00000000  0000b2d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001d7a  00000000  00000000  0000bdcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027ec  00000000  00000000  0000db46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00010332  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__ctors_end>
       4:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
       8:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
       c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      10:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      14:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      18:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      1c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      20:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      24:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      28:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      2c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      30:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      34:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      38:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      3c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      40:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <__vector_16>
      44:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      48:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      4c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      50:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      54:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      58:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      5c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      60:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      64:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      68:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      6c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      70:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      74:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      78:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      7c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      80:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      84:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      88:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
      8c:	23 08       	sbc	r2, r3
      8e:	ce 08       	sbc	r12, r14
      90:	2a 08       	sbc	r2, r10
      92:	31 08       	sbc	r3, r1
      94:	38 08       	sbc	r3, r8
      96:	3f 08       	sbc	r3, r15
      98:	46 08       	sbc	r4, r6
      9a:	4d 08       	sbc	r4, r13
      9c:	ce 08       	sbc	r12, r14
      9e:	54 08       	sbc	r5, r4
      a0:	5b 08       	sbc	r5, r11
      a2:	62 08       	sbc	r6, r2
      a4:	69 08       	sbc	r6, r9
      a6:	ce 08       	sbc	r12, r14
      a8:	70 08       	sbc	r7, r0
      aa:	77 08       	sbc	r7, r7
      ac:	7e 08       	sbc	r7, r14
      ae:	85 08       	sbc	r8, r5
      b0:	8c 08       	sbc	r8, r12
      b2:	93 08       	sbc	r9, r3
      b4:	ce 08       	sbc	r12, r14
      b6:	9a 08       	sbc	r9, r10
      b8:	a1 08       	sbc	r10, r1
      ba:	ac 08       	sbc	r10, r12
      bc:	b3 08       	sbc	r11, r3
      be:	ce 08       	sbc	r12, r14
      c0:	ba 08       	sbc	r11, r10
      c2:	c1 08       	sbc	r12, r1
      c4:	c8 08       	sbc	r12, r8
      c6:	15 09       	sbc	r17, r5
      c8:	e9 14       	cp	r14, r9
      ca:	4c 09       	sbc	r20, r12
      cc:	7b 09       	sbc	r23, r11
      ce:	a8 09       	sbc	r26, r8
      d0:	e9 14       	cp	r14, r9
      d2:	b2 09       	sbc	r27, r2
      d4:	2f 0a       	sbc	r2, r31
      d6:	ac 0a       	sbc	r10, r28
      d8:	09 0c       	add	r0, r9
      da:	c6 0c       	add	r12, r6
      dc:	40 0d       	add	r20, r0
      de:	e0 0e       	add	r14, r16
      e0:	9b 0f       	add	r25, r27
      e2:	15 10       	cpse	r1, r5
      e4:	87 10       	cpse	r8, r7
      e6:	ac 10       	cpse	r10, r12
      e8:	e9 14       	cp	r14, r9
      ea:	fa 10       	cpse	r15, r10
      ec:	54 11       	cpse	r21, r4
      ee:	b3 11       	cpse	r27, r3
      f0:	f2 11       	cpse	r31, r2
      f2:	17 12       	cpse	r1, r23
      f4:	38 12       	cpse	r3, r24
      f6:	e9 14       	cp	r14, r9
      f8:	59 12       	cpse	r5, r25
      fa:	b2 12       	cpse	r11, r18
      fc:	1a 13       	cpse	r17, r26
      fe:	ac 13       	cpse	r26, r28
     100:	e9 14       	cp	r14, r9
     102:	fd 13       	cpse	r31, r29
     104:	54 14       	cp	r5, r4
     106:	af 14       	cp	r10, r15
     108:	33 15       	cp	r19, r3
     10a:	3a 15       	cp	r19, r10
     10c:	41 15       	cp	r20, r1
     10e:	49 15       	cp	r20, r9
     110:	50 15       	cp	r21, r0
     112:	57 15       	cp	r21, r7
     114:	60 15       	cp	r22, r0
     116:	6a 15       	cp	r22, r10
     118:	73 15       	cp	r23, r3
     11a:	7c 15       	cp	r23, r12
     11c:	85 15       	cp	r24, r5
     11e:	8e 15       	cp	r24, r14
     120:	97 15       	cp	r25, r7
     122:	a0 15       	cp	r26, r0
     124:	a9 15       	cp	r26, r9
     126:	b2 15       	cp	r27, r2
     128:	bb 15       	cp	r27, r11
     12a:	c4 15       	cp	r28, r4
     12c:	cd 15       	cp	r28, r13
     12e:	d7 15       	cp	r29, r7
     130:	e0 15       	cp	r30, r0
     132:	e9 15       	cp	r30, r9
     134:	f2 15       	cp	r31, r2
     136:	fb 15       	cp	r31, r11
     138:	04 16       	cp	r0, r20
     13a:	0d 16       	cp	r0, r29
     13c:	17 16       	cp	r1, r23
     13e:	1f 16       	cp	r1, r31
     140:	27 16       	cp	r2, r23
     142:	2f 16       	cp	r2, r31
     144:	37 16       	cp	r3, r23
     146:	40 16       	cp	r4, r16
     148:	48 16       	cp	r4, r24
     14a:	50 16       	cp	r5, r16

0000014c <__ctors_end>:
     14c:	11 24       	eor	r1, r1
     14e:	1f be       	out	0x3f, r1	; 63
     150:	cf ef       	ldi	r28, 0xFF	; 255
     152:	d0 e1       	ldi	r29, 0x10	; 16
     154:	de bf       	out	0x3e, r29	; 62
     156:	cd bf       	out	0x3d, r28	; 61

00000158 <__do_copy_data>:
     158:	12 e0       	ldi	r17, 0x02	; 2
     15a:	a0 e0       	ldi	r26, 0x00	; 0
     15c:	b1 e0       	ldi	r27, 0x01	; 1
     15e:	e4 ec       	ldi	r30, 0xC4	; 196
     160:	f8 e3       	ldi	r31, 0x38	; 56
     162:	00 e0       	ldi	r16, 0x00	; 0
     164:	0b bf       	out	0x3b, r16	; 59
     166:	02 c0       	rjmp	.+4      	; 0x16c <__do_copy_data+0x14>
     168:	07 90       	elpm	r0, Z+
     16a:	0d 92       	st	X+, r0
     16c:	a8 37       	cpi	r26, 0x78	; 120
     16e:	b1 07       	cpc	r27, r17
     170:	d9 f7       	brne	.-10     	; 0x168 <__do_copy_data+0x10>

00000172 <__do_clear_bss>:
     172:	12 e0       	ldi	r17, 0x02	; 2
     174:	a8 e7       	ldi	r26, 0x78	; 120
     176:	b2 e0       	ldi	r27, 0x02	; 2
     178:	01 c0       	rjmp	.+2      	; 0x17c <.do_clear_bss_start>

0000017a <.do_clear_bss_loop>:
     17a:	1d 92       	st	X+, r1

0000017c <.do_clear_bss_start>:
     17c:	a8 3d       	cpi	r26, 0xD8	; 216
     17e:	b1 07       	cpc	r27, r17
     180:	e1 f7       	brne	.-8      	; 0x17a <.do_clear_bss_loop>
     182:	0e 94 ba 03 	call	0x774	; 0x774 <main>
     186:	0c 94 60 1c 	jmp	0x38c0	; 0x38c0 <_exit>

0000018a <__bad_interrupt>:
     18a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018e <KEYPAD_Check>:
//uint8_t ascii_code[4][4]={16,15,14,13,
						  //12,9,6,3,
						  //10,8,5,2,
						  //11,7,4,1};

uint8_t KEYPAD_Check() {
     18e:	af 92       	push	r10
     190:	bf 92       	push	r11
     192:	cf 92       	push	r12
     194:	df 92       	push	r13
     196:	ef 92       	push	r14
     198:	ff 92       	push	r15
     19a:	0f 93       	push	r16
     19c:	1f 93       	push	r17
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
     1a2:	20 e0       	ldi	r18, 0x00	; 0
     1a4:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     1a6:	41 e0       	ldi	r20, 0x01	; 1
     1a8:	50 e0       	ldi	r21, 0x00	; 0
     1aa:	e2 e6       	ldi	r30, 0x62	; 98
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
		_delay_us(10);
		keyin=KEYPAD_PIN & 0x0F;
		if (keyin!=0x0F)
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
     1ae:	a0 e1       	ldi	r26, 0x10	; 16
     1b0:	b1 e0       	ldi	r27, 0x01	; 1
     1b2:	0f 2e       	mov	r0, r31
     1b4:	f1 e1       	ldi	r31, 0x11	; 17
     1b6:	af 2e       	mov	r10, r31
     1b8:	f1 e0       	ldi	r31, 0x01	; 1
     1ba:	bf 2e       	mov	r11, r31
     1bc:	f0 2d       	mov	r31, r0
     1be:	02 e1       	ldi	r16, 0x12	; 18
     1c0:	11 e0       	ldi	r17, 0x01	; 1
     1c2:	0f 2e       	mov	r0, r31
     1c4:	f3 e1       	ldi	r31, 0x13	; 19
     1c6:	ef 2e       	mov	r14, r31
     1c8:	f1 e0       	ldi	r31, 0x01	; 1
     1ca:	ff 2e       	mov	r15, r31
     1cc:	f0 2d       	mov	r31, r0
						  //11,7,4,1};

uint8_t KEYPAD_Check() {
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     1ce:	b9 01       	movw	r22, r18
//uint8_t ascii_code[4][4]={16,15,14,13,
						  //12,9,6,3,
						  //10,8,5,2,
						  //11,7,4,1};

uint8_t KEYPAD_Check() {
     1d0:	c9 01       	movw	r24, r18
     1d2:	04 96       	adiw	r24, 0x04	; 4
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     1d4:	6a 01       	movw	r12, r20
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <KEYPAD_Check+0x4e>
     1d8:	cc 0c       	add	r12, r12
     1da:	dd 1c       	adc	r13, r13
     1dc:	8a 95       	dec	r24
     1de:	e2 f7       	brpl	.-8      	; 0x1d8 <KEYPAD_Check+0x4a>
     1e0:	c6 01       	movw	r24, r12
     1e2:	80 95       	com	r24
     1e4:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1e6:	83 e0       	ldi	r24, 0x03	; 3
     1e8:	8a 95       	dec	r24
     1ea:	f1 f7       	brne	.-4      	; 0x1e8 <KEYPAD_Check+0x5a>
     1ec:	00 00       	nop
		_delay_us(10);
		keyin=KEYPAD_PIN & 0x0F;
     1ee:	80 b1       	in	r24, 0x00	; 0
     1f0:	8f 70       	andi	r24, 0x0F	; 15
		if (keyin!=0x0F)
     1f2:	8f 30       	cpi	r24, 0x0F	; 15
     1f4:	29 f1       	breq	.+74     	; 0x240 <KEYPAD_Check+0xb2>
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
     1f6:	9c 91       	ld	r25, X
     1f8:	98 17       	cp	r25, r24
     1fa:	a9 f0       	breq	.+42     	; 0x226 <KEYPAD_Check+0x98>
     1fc:	e5 01       	movw	r28, r10
     1fe:	98 81       	ld	r25, Y
     200:	98 17       	cp	r25, r24
     202:	59 f0       	breq	.+22     	; 0x21a <KEYPAD_Check+0x8c>
     204:	e8 01       	movw	r28, r16
     206:	98 81       	ld	r25, Y
     208:	98 17       	cp	r25, r24
     20a:	51 f0       	breq	.+20     	; 0x220 <KEYPAD_Check+0x92>
     20c:	e7 01       	movw	r28, r14
     20e:	98 81       	ld	r25, Y
     210:	98 17       	cp	r25, r24
     212:	b1 f4       	brne	.+44     	; 0x240 <KEYPAD_Check+0xb2>
     214:	e3 e0       	ldi	r30, 0x03	; 3
     216:	f0 e0       	ldi	r31, 0x00	; 0
     218:	08 c0       	rjmp	.+16     	; 0x22a <KEYPAD_Check+0x9c>
     21a:	e1 e0       	ldi	r30, 0x01	; 1
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	05 c0       	rjmp	.+10     	; 0x22a <KEYPAD_Check+0x9c>
     220:	e2 e0       	ldi	r30, 0x02	; 2
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	02 c0       	rjmp	.+4      	; 0x22a <KEYPAD_Check+0x9c>
     226:	e0 e0       	ldi	r30, 0x00	; 0
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	ee 0f       	add	r30, r30
     22c:	ff 1f       	adc	r31, r31
     22e:	ee 0f       	add	r30, r30
     230:	ff 1f       	adc	r31, r31
     232:	6e 0f       	add	r22, r30
     234:	7f 1f       	adc	r23, r31
     236:	fb 01       	movw	r30, r22
     238:	e0 50       	subi	r30, 0x00	; 0
     23a:	ff 4f       	sbci	r31, 0xFF	; 255
     23c:	80 81       	ld	r24, Z
     23e:	06 c0       	rjmp	.+12     	; 0x24c <KEYPAD_Check+0xbe>
     240:	2f 5f       	subi	r18, 0xFF	; 255
     242:	3f 4f       	sbci	r19, 0xFF	; 255
						  //10,8,5,2,
						  //11,7,4,1};

uint8_t KEYPAD_Check() {
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
     244:	24 30       	cpi	r18, 0x04	; 4
     246:	31 05       	cpc	r19, r1
     248:	11 f6       	brne	.-124    	; 0x1ce <KEYPAD_Check+0x40>
		keyin=KEYPAD_PIN & 0x0F;
		if (keyin!=0x0F)
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
	}
	return 0;
     24a:	80 e0       	ldi	r24, 0x00	; 0
}
     24c:	df 91       	pop	r29
     24e:	cf 91       	pop	r28
     250:	1f 91       	pop	r17
     252:	0f 91       	pop	r16
     254:	ff 90       	pop	r15
     256:	ef 90       	pop	r14
     258:	df 90       	pop	r13
     25a:	cf 90       	pop	r12
     25c:	bf 90       	pop	r11
     25e:	af 90       	pop	r10
     260:	08 95       	ret

00000262 <KEYPAD_Init>:

void KEYPAD_Init()
{
	//Khai bao huong cho cac chan ket noi keypad
	KEYPAD_DDR=0xF0;
     262:	80 ef       	ldi	r24, 0xF0	; 240
     264:	80 93 61 00 	sts	0x0061, r24
	KEYPAD_PORT=0x0F;
     268:	8f e0       	ldi	r24, 0x0F	; 15
     26a:	80 93 62 00 	sts	0x0062, r24
     26e:	08 95       	ret

00000270 <LCDBusyLoop>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     270:	8f ec       	ldi	r24, 0xCF	; 207
     272:	97 e0       	ldi	r25, 0x07	; 7
     274:	01 97       	sbiw	r24, 0x01	; 1
     276:	f1 f7       	brne	.-4      	; 0x274 <LCDBusyLoop+0x4>
     278:	00 c0       	rjmp	.+0      	; 0x27a <LCDBusyLoop+0xa>
     27a:	00 00       	nop
}

void LCDBusyLoop()
{
	_delay_ms(8);
}
     27c:	08 95       	ret

0000027e <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
     27e:	28 2f       	mov	r18, r24
     280:	22 95       	swap	r18
     282:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
     284:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
     286:	66 23       	and	r22, r22
     288:	11 f4       	brne	.+4      	; 0x28e <LCDByte+0x10>
CLEAR_RS();
     28a:	d8 98       	cbi	0x1b, 0	; 27
     28c:	01 c0       	rjmp	.+2      	; 0x290 <LCDByte+0x12>
else
SET_RS();
     28e:	d8 9a       	sbi	0x1b, 0	; 27

//_delay_ms(0.500);		//tAS

SET_E();
     290:	d9 9a       	sbi	0x1b, 1	; 27

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
     292:	9b b3       	in	r25, 0x1b	; 27
     294:	22 0f       	add	r18, r18
     296:	22 0f       	add	r18, r18
     298:	93 7c       	andi	r25, 0xC3	; 195
     29a:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
     29c:	9b bb       	out	0x1b, r25	; 27

//_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
     29e:	d9 98       	cbi	0x1b, 1	; 27

//_delay_us(1);

//Send the lower nibble
SET_E();
     2a0:	d9 9a       	sbi	0x1b, 1	; 27

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
     2a2:	9b b3       	in	r25, 0x1b	; 27
     2a4:	88 0f       	add	r24, r24
     2a6:	88 0f       	add	r24, r24
     2a8:	93 7c       	andi	r25, 0xC3	; 195
     2aa:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     2ac:	8b bb       	out	0x1b, r24	; 27

//_delay_us(1);			//tEH

//SEND

CLEAR_E();
     2ae:	d9 98       	cbi	0x1b, 1	; 27

//_delay_us(1);			//tEL

LCDBusyLoop();
     2b0:	0e 94 38 01 	call	0x270	; 0x270 <LCDBusyLoop>
}
     2b4:	08 95       	ret

000002b6 <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
     2b6:	0f 93       	push	r16
     2b8:	1f 93       	push	r17
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	8c 01       	movw	r16, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     2c0:	fc 01       	movw	r30, r24
     2c2:	80 81       	ld	r24, Z
     2c4:	88 23       	and	r24, r24
     2c6:	09 f1       	breq	.+66     	; 0x30a <LCDWriteString+0x54>
 {
 	//Custom Char Support
	if(*msg=='%')
     2c8:	85 32       	cpi	r24, 0x25	; 37
     2ca:	a9 f4       	brne	.+42     	; 0x2f6 <LCDWriteString+0x40>
	{
		msg++;
     2cc:	e8 01       	movw	r28, r16
     2ce:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
     2d0:	f8 01       	movw	r30, r16
     2d2:	81 81       	ldd	r24, Z+1	; 0x01
     2d4:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
     2d6:	88 30       	cpi	r24, 0x08	; 8
     2d8:	20 f4       	brcc	.+8      	; 0x2e2 <LCDWriteString+0x2c>
		{
			LCDData(cc);
     2da:	61 e0       	ldi	r22, 0x01	; 1
     2dc:	0e 94 3f 01 	call	0x27e	; 0x27e <LCDByte>
     2e0:	0e c0       	rjmp	.+28     	; 0x2fe <LCDWriteString+0x48>
		}
		else
		{
			LCDData('%');
     2e2:	85 e2       	ldi	r24, 0x25	; 37
     2e4:	61 e0       	ldi	r22, 0x01	; 1
     2e6:	0e 94 3f 01 	call	0x27e	; 0x27e <LCDByte>
			LCDData(*msg);
     2ea:	f8 01       	movw	r30, r16
     2ec:	81 81       	ldd	r24, Z+1	; 0x01
     2ee:	61 e0       	ldi	r22, 0x01	; 1
     2f0:	0e 94 3f 01 	call	0x27e	; 0x27e <LCDByte>
     2f4:	04 c0       	rjmp	.+8      	; 0x2fe <LCDWriteString+0x48>
		}
	}
	else
	{
		LCDData(*msg);
     2f6:	61 e0       	ldi	r22, 0x01	; 1
     2f8:	0e 94 3f 01 	call	0x27e	; 0x27e <LCDByte>
     2fc:	e8 01       	movw	r28, r16
	}
	msg++;
     2fe:	8e 01       	movw	r16, r28
     300:	0f 5f       	subi	r16, 0xFF	; 255
     302:	1f 4f       	sbci	r17, 0xFF	; 255
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     304:	89 81       	ldd	r24, Y+1	; 0x01
     306:	88 23       	and	r24, r24
     308:	f9 f6       	brne	.-66     	; 0x2c8 <LCDWriteString+0x12>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
     30a:	df 91       	pop	r29
     30c:	cf 91       	pop	r28
     30e:	1f 91       	pop	r17
     310:	0f 91       	pop	r16
     312:	08 95       	ret

00000314 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     314:	ef 92       	push	r14
     316:	ff 92       	push	r15
     318:	0f 93       	push	r16
     31a:	1f 93       	push	r17
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	00 d0       	rcall	.+0      	; 0x322 <LCDWriteInt+0xe>
     322:	00 d0       	rcall	.+0      	; 0x324 <LCDWriteInt+0x10>
     324:	0f 92       	push	r0
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     32c:	fe 01       	movw	r30, r28
     32e:	31 96       	adiw	r30, 0x01	; 1
     330:	25 e0       	ldi	r18, 0x05	; 5
     332:	df 01       	movw	r26, r30
     334:	1d 92       	st	X+, r1
     336:	2a 95       	dec	r18
     338:	e9 f7       	brne	.-6      	; 0x334 <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
     33a:	00 97       	sbiw	r24, 0x00	; 0
     33c:	61 f0       	breq	.+24     	; 0x356 <LCDWriteInt+0x42>
     33e:	fe 01       	movw	r30, r28
     340:	36 96       	adiw	r30, 0x06	; 6
	{
	str[i]=val%10;
     342:	2a e0       	ldi	r18, 0x0A	; 10
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	b9 01       	movw	r22, r18
     348:	0e 94 34 18 	call	0x3068	; 0x3068 <__divmodhi4>
     34c:	82 93       	st	-Z, r24
	val=val/10;
     34e:	86 2f       	mov	r24, r22
     350:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     352:	00 97       	sbiw	r24, 0x00	; 0
     354:	c1 f7       	brne	.-16     	; 0x346 <LCDWriteInt+0x32>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     356:	bf ef       	ldi	r27, 0xFF	; 255
     358:	eb 16       	cp	r14, r27
     35a:	bf ef       	ldi	r27, 0xFF	; 255
     35c:	fb 06       	cpc	r15, r27
     35e:	69 f4       	brne	.+26     	; 0x37a <LCDWriteInt+0x66>
		while(str[j]==0) j++;
     360:	29 81       	ldd	r18, Y+1	; 0x01
     362:	22 23       	and	r18, r18
     364:	79 f4       	brne	.+30     	; 0x384 <LCDWriteInt+0x70>
     366:	fe 01       	movw	r30, r28
     368:	32 96       	adiw	r30, 0x02	; 2
     36a:	00 e0       	ldi	r16, 0x00	; 0
     36c:	10 e0       	ldi	r17, 0x00	; 0
     36e:	0f 5f       	subi	r16, 0xFF	; 255
     370:	1f 4f       	sbci	r17, 0xFF	; 255
     372:	21 91       	ld	r18, Z+
     374:	22 23       	and	r18, r18
     376:	d9 f3       	breq	.-10     	; 0x36e <LCDWriteInt+0x5a>
     378:	07 c0       	rjmp	.+14     	; 0x388 <LCDWriteInt+0x74>
	else
		j=5-field_length;
     37a:	05 e0       	ldi	r16, 0x05	; 5
     37c:	10 e0       	ldi	r17, 0x00	; 0
     37e:	0e 19       	sub	r16, r14
     380:	1f 09       	sbc	r17, r15
     382:	02 c0       	rjmp	.+4      	; 0x388 <LCDWriteInt+0x74>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
     384:	00 e0       	ldi	r16, 0x00	; 0
     386:	10 e0       	ldi	r17, 0x00	; 0
	else
		j=5-field_length;

	if(val<0) LCDData('-');
     388:	99 23       	and	r25, r25
     38a:	24 f4       	brge	.+8      	; 0x394 <LCDWriteInt+0x80>
     38c:	8d e2       	ldi	r24, 0x2D	; 45
     38e:	61 e0       	ldi	r22, 0x01	; 1
     390:	0e 94 3f 01 	call	0x27e	; 0x27e <LCDByte>
	for(i=j;i<5;i++)
     394:	05 30       	cpi	r16, 0x05	; 5
     396:	11 05       	cpc	r17, r1
     398:	bc f4       	brge	.+46     	; 0x3c8 <LCDWriteInt+0xb4>
	}
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
     39a:	e1 e0       	ldi	r30, 0x01	; 1
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	ec 0f       	add	r30, r28
     3a0:	fd 1f       	adc	r31, r29
     3a2:	0e 0f       	add	r16, r30
     3a4:	1f 1f       	adc	r17, r31
     3a6:	0f 2e       	mov	r0, r31
     3a8:	f6 e0       	ldi	r31, 0x06	; 6
     3aa:	ef 2e       	mov	r14, r31
     3ac:	ff 24       	eor	r15, r15
     3ae:	f0 2d       	mov	r31, r0
     3b0:	ec 0e       	add	r14, r28
     3b2:	fd 1e       	adc	r15, r29
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     3b4:	d8 01       	movw	r26, r16
     3b6:	8d 91       	ld	r24, X+
     3b8:	8d 01       	movw	r16, r26
     3ba:	80 5d       	subi	r24, 0xD0	; 208
     3bc:	61 e0       	ldi	r22, 0x01	; 1
     3be:	0e 94 3f 01 	call	0x27e	; 0x27e <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     3c2:	0e 15       	cp	r16, r14
     3c4:	1f 05       	cpc	r17, r15
     3c6:	b1 f7       	brne	.-20     	; 0x3b4 <LCDWriteInt+0xa0>
	{
	LCDData(48+str[i]);
	}
}
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	0f 90       	pop	r0
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	1f 91       	pop	r17
     3d8:	0f 91       	pop	r16
     3da:	ff 90       	pop	r15
     3dc:	ef 90       	pop	r14
     3de:	08 95       	ret

000003e0 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
     3e0:	84 31       	cpi	r24, 0x14	; 20
     3e2:	78 f4       	brcc	.+30     	; 0x402 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
     3e4:	62 30       	cpi	r22, 0x02	; 2
     3e6:	31 f0       	breq	.+12     	; 0x3f4 <LCDGotoXY+0x14>
     3e8:	63 30       	cpi	r22, 0x03	; 3
     3ea:	31 f0       	breq	.+12     	; 0x3f8 <LCDGotoXY+0x18>
     3ec:	61 30       	cpi	r22, 0x01	; 1
     3ee:	29 f4       	brne	.+10     	; 0x3fa <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
     3f0:	80 64       	ori	r24, 0x40	; 64
			break;
     3f2:	03 c0       	rjmp	.+6      	; 0x3fa <LCDGotoXY+0x1a>
		case 2:
			x+=0x14;
     3f4:	8c 5e       	subi	r24, 0xEC	; 236
			break;
     3f6:	01 c0       	rjmp	.+2      	; 0x3fa <LCDGotoXY+0x1a>
		case 3:
			x+=0x54;
     3f8:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
     3fa:	80 68       	ori	r24, 0x80	; 128
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	0e 94 3f 01 	call	0x27e	; 0x27e <LCDByte>
     402:	08 95       	ret

00000404 <LCDInit>:
{
	_delay_ms(8);
}

void LCDInit(uint8_t style)
{
     404:	0f 93       	push	r16
     406:	1f 93       	push	r17
     408:	cf 93       	push	r28
     40a:	df 93       	push	r29
     40c:	c8 2f       	mov	r28, r24
     40e:	8b e4       	ldi	r24, 0x4B	; 75
     410:	9d e1       	ldi	r25, 0x1D	; 29
     412:	01 97       	sbiw	r24, 0x01	; 1
     414:	f1 f7       	brne	.-4      	; 0x412 <LCDInit+0xe>
     416:	00 c0       	rjmp	.+0      	; 0x418 <LCDInit+0x14>
     418:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
     41a:	8a b3       	in	r24, 0x1a	; 26
     41c:	8c 63       	ori	r24, 0x3C	; 60
     41e:	8a bb       	out	0x1a, r24	; 26
	LCD_E_DDR|=(1<<LCD_E_POS);
     420:	d1 9a       	sbi	0x1a, 1	; 26
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     422:	d0 9a       	sbi	0x1a, 0	; 26

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
     424:	8b b3       	in	r24, 0x1b	; 27
     426:	83 7c       	andi	r24, 0xC3	; 195
     428:	8b bb       	out	0x1b, r24	; 27
	CLEAR_E();
     42a:	d9 98       	cbi	0x1b, 1	; 27
	CLEAR_RS();
     42c:	d8 98       	cbi	0x1b, 0	; 27

	//Set 4-bit mode
	//_delay_us(0.3);	//tAS

	SET_E();
     42e:	d9 9a       	sbi	0x1b, 1	; 27
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     430:	db 9a       	sbi	0x1b, 3	; 27
	//_delay_us(1);
	CLEAR_E();
     432:	d9 98       	cbi	0x1b, 1	; 27
	//_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     434:	0e 94 38 01 	call	0x270	; 0x270 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     438:	8c 2f       	mov	r24, r28
     43a:	8c 60       	ori	r24, 0x0C	; 12
     43c:	60 e0       	ldi	r22, 0x00	; 0
     43e:	0e 94 3f 01 	call	0x27e	; 0x27e <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     442:	88 e2       	ldi	r24, 0x28	; 40
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	0e 94 3f 01 	call	0x27e	; 0x27e <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
     44a:	80 e4       	ldi	r24, 0x40	; 64
     44c:	60 e0       	ldi	r22, 0x00	; 0
     44e:	0e 94 3f 01 	call	0x27e	; 0x27e <LCDByte>
     452:	c4 e1       	ldi	r28, 0x14	; 20
     454:	d1 e0       	ldi	r29, 0x01	; 1
void LCDBusyLoop()
{
	_delay_ms(8);
}

void LCDInit(uint8_t style)
     456:	04 e5       	ldi	r16, 0x54	; 84
     458:	11 e0       	ldi	r17, 0x01	; 1
	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
     45a:	89 91       	ld	r24, Y+
     45c:	61 e0       	ldi	r22, 0x01	; 1
     45e:	0e 94 3f 01 	call	0x27e	; 0x27e <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
     462:	c0 17       	cp	r28, r16
     464:	d1 07       	cpc	r29, r17
     466:	c9 f7       	brne	.-14     	; 0x45a <LCDInit+0x56>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <LCDGotoXY>

}
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	1f 91       	pop	r17
     476:	0f 91       	pop	r16
     478:	08 95       	ret

0000047a <sMOIfaceKEYPAD_checkpress>:

static uint8_t nrf24l01_addr5[NRF24L01_ADDRSIZE] = NRF24L01_ADDRP5;
static uint8_t nrf24l01_addrtx[NRF24L01_ADDRSIZE] = NRF24L01_ADDRTX;

sc_integer sMOIfaceKEYPAD_checkpress() {
	return KEYPAD_Check();
     47a:	0e 94 c7 00 	call	0x18e	; 0x18e <KEYPAD_Check>
}
     47e:	68 2f       	mov	r22, r24
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	08 95       	ret

00000488 <sMOIfaceKEYPAD_init>:
void sMOIfaceKEYPAD_init() {
	KEYPAD_Init();
     488:	0e 94 31 01 	call	0x262	; 0x262 <KEYPAD_Init>
}
     48c:	08 95       	ret

0000048e <sMOIfaceLCD_writeString>:
void sMOIfaceLCD_writeString(const sc_string chr) {
	LCDWriteString(chr);
     48e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCDWriteString>
}
     492:	08 95       	ret

00000494 <sMOIfaceLCD_writeStringXY>:
void sMOIfaceLCD_writeStringXY(const sc_string chr, const sc_integer x, const sc_integer y) {
     494:	0f 93       	push	r16
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	ec 01       	movw	r28, r24
     49c:	84 2f       	mov	r24, r20
     49e:	60 2f       	mov	r22, r16
	LCDWriteStringXY(x,y,chr);
     4a0:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <LCDGotoXY>
     4a4:	ce 01       	movw	r24, r28
     4a6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCDWriteString>
}
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	0f 91       	pop	r16
     4b0:	08 95       	ret

000004b2 <sMOIfaceLCD_writeNumberXY>:
void sMOIfaceLCD_writeNumberXY(const sc_integer num, const sc_integer x, const sc_integer y, const sc_integer l) {
     4b2:	4f 92       	push	r4
     4b4:	5f 92       	push	r5
     4b6:	6f 92       	push	r6
     4b8:	7f 92       	push	r7
     4ba:	af 92       	push	r10
     4bc:	bf 92       	push	r11
     4be:	cf 92       	push	r12
     4c0:	df 92       	push	r13
     4c2:	ef 92       	push	r14
     4c4:	ff 92       	push	r15
     4c6:	2b 01       	movw	r4, r22
     4c8:	3c 01       	movw	r6, r24
     4ca:	82 2f       	mov	r24, r18
     4cc:	6e 2d       	mov	r22, r14
     4ce:	76 01       	movw	r14, r12
     4d0:	65 01       	movw	r12, r10
	LCDWriteIntXY(x,y,num,l);
     4d2:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <LCDGotoXY>
     4d6:	c2 01       	movw	r24, r4
     4d8:	b6 01       	movw	r22, r12
     4da:	0e 94 8a 01 	call	0x314	; 0x314 <LCDWriteInt>
}
     4de:	ff 90       	pop	r15
     4e0:	ef 90       	pop	r14
     4e2:	df 90       	pop	r13
     4e4:	cf 90       	pop	r12
     4e6:	bf 90       	pop	r11
     4e8:	af 90       	pop	r10
     4ea:	7f 90       	pop	r7
     4ec:	6f 90       	pop	r6
     4ee:	5f 90       	pop	r5
     4f0:	4f 90       	pop	r4
     4f2:	08 95       	ret

000004f4 <sMOIfaceLCD_clear>:
void sMOIfaceLCD_clear() {
	LCDClear();
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	60 e0       	ldi	r22, 0x00	; 0
     4f8:	0e 94 3f 01 	call	0x27e	; 0x27e <LCDByte>
     4fc:	82 e0       	ldi	r24, 0x02	; 2
     4fe:	60 e0       	ldi	r22, 0x00	; 0
     500:	0e 94 3f 01 	call	0x27e	; 0x27e <LCDByte>
}
     504:	08 95       	ret

00000506 <sMOIfaceLCD_init>:
void sMOIfaceLCD_init() {
	LCDInit(0);
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	0e 94 02 02 	call	0x404	; 0x404 <LCDInit>
}
     50c:	08 95       	ret

0000050e <sMOIfaceRF_getData>:

sc_string sMOIfaceRF_getData() {
     50e:	0f 93       	push	r16
     510:	1f 93       	push	r17
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
     516:	0f 92       	push	r0
     518:	cd b7       	in	r28, 0x3d	; 61
     51a:	de b7       	in	r29, 0x3e	; 62
	uint8_t pipe = 0;
     51c:	19 82       	std	Y+1, r1	; 0x01
	if (nrf24l01_readready(&pipe)) {
     51e:	ce 01       	movw	r24, r28
     520:	01 96       	adiw	r24, 0x01	; 1
     522:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <nrf24l01_readready>
     526:	88 23       	and	r24, r24
     528:	99 f0       	breq	.+38     	; 0x550 <sMOIfaceRF_getData+0x42>
		if (pipe==0) {
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	88 23       	and	r24, r24
     52e:	99 f4       	brne	.+38     	; 0x556 <sMOIfaceRF_getData+0x48>
     530:	ea e7       	ldi	r30, 0x7A	; 122
     532:	f2 e0       	ldi	r31, 0x02	; 2
}
void sMOIfaceLCD_init() {
	LCDInit(0);
}

sc_string sMOIfaceRF_getData() {
     534:	cf 01       	movw	r24, r30
     536:	09 96       	adiw	r24, 0x09	; 9
	uint8_t pipe = 0;
	if (nrf24l01_readready(&pipe)) {
		if (pipe==0) {
		//clear buffer
		for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
     538:	11 92       	st	Z+, r1
     53a:	e8 17       	cp	r30, r24
     53c:	f9 07       	cpc	r31, r25
     53e:	e1 f7       	brne	.-8      	; 0x538 <sMOIfaceRF_getData+0x2a>
		
		//read buffer
		nrf24l01_read(pipe,bufferin);
     540:	0a e7       	ldi	r16, 0x7A	; 122
     542:	12 e0       	ldi	r17, 0x02	; 2
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	b8 01       	movw	r22, r16
     548:	0e 94 8c 06 	call	0xd18	; 0xd18 <nrf24l01_read>
		return bufferin;
     54c:	c8 01       	movw	r24, r16
     54e:	05 c0       	rjmp	.+10     	; 0x55a <sMOIfaceRF_getData+0x4c>
		}
	}
	return "";
     550:	84 e5       	ldi	r24, 0x54	; 84
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	02 c0       	rjmp	.+4      	; 0x55a <sMOIfaceRF_getData+0x4c>
     556:	84 e5       	ldi	r24, 0x54	; 84
     558:	91 e0       	ldi	r25, 0x01	; 1
}
     55a:	0f 90       	pop	r0
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	1f 91       	pop	r17
     562:	0f 91       	pop	r16
     564:	08 95       	ret

00000566 <sMOIfaceRF_sendMsg>:

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	9c 01       	movw	r18, r24
     56c:	c5 e8       	ldi	r28, 0x85	; 133
     56e:	d2 e0       	ldi	r29, 0x02	; 2
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
		if (i<strlen(msg)) bufferout[i]=msg[i];
     574:	a2 2f       	mov	r26, r18
     576:	b3 2f       	mov	r27, r19
     578:	fd 01       	movw	r30, r26
     57a:	01 90       	ld	r0, Z+
     57c:	00 20       	and	r0, r0
     57e:	e9 f7       	brne	.-6      	; 0x57a <sMOIfaceRF_sendMsg+0x14>
     580:	31 97       	sbiw	r30, 0x01	; 1
     582:	ea 1b       	sub	r30, r26
     584:	fb 0b       	sbc	r31, r27
     586:	8e 17       	cp	r24, r30
     588:	9f 07       	cpc	r25, r31
     58a:	30 f4       	brcc	.+12     	; 0x598 <sMOIfaceRF_sendMsg+0x32>
		}
	}
	return "";
}

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
     58c:	f9 01       	movw	r30, r18
     58e:	e8 0f       	add	r30, r24
     590:	f9 1f       	adc	r31, r25
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
		if (i<strlen(msg)) bufferout[i]=msg[i];
     592:	40 81       	ld	r20, Z
     594:	48 83       	st	Y, r20
     596:	01 c0       	rjmp	.+2      	; 0x59a <sMOIfaceRF_sendMsg+0x34>
		else bufferout[i] = 0;
     598:	18 82       	st	Y, r1
     59a:	01 96       	adiw	r24, 0x01	; 1
     59c:	21 96       	adiw	r28, 0x01	; 1
	return "";
}

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
     59e:	89 30       	cpi	r24, 0x09	; 9
     5a0:	91 05       	cpc	r25, r1
     5a2:	41 f7       	brne	.-48     	; 0x574 <sMOIfaceRF_sendMsg+0xe>
		if (i<strlen(msg)) bufferout[i]=msg[i];
		else bufferout[i] = 0;
	}
	
	//Set Address for Data
	nrf24l01_settxaddr(nrf24l01_addrtx);
     5a4:	85 e5       	ldi	r24, 0x55	; 85
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     5ac:	85 e8       	ldi	r24, 0x85	; 133
     5ae:	92 e0       	ldi	r25, 0x02	; 2
     5b0:	0e 94 b2 06 	call	0xd64	; 0xd64 <nrf24l01_write>
     5b4:	98 2f       	mov	r25, r24
     5b6:	ef ec       	ldi	r30, 0xCF	; 207
     5b8:	f7 e0       	ldi	r31, 0x07	; 7
     5ba:	31 97       	sbiw	r30, 0x01	; 1
     5bc:	f1 f7       	brne	.-4      	; 0x5ba <sMOIfaceRF_sendMsg+0x54>
     5be:	00 c0       	rjmp	.+0      	; 0x5c0 <sMOIfaceRF_sendMsg+0x5a>
     5c0:	00 00       	nop
		}
	}
	return "";
}

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	91 30       	cpi	r25, 0x01	; 1
     5c6:	09 f0       	breq	.+2      	; 0x5ca <sMOIfaceRF_sendMsg+0x64>
     5c8:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	08 95       	ret

000005d0 <sMOIfaceRF_sendCheck>:

sc_boolean sMOIfaceRF_sendCheck() {
     5d0:	e5 e8       	ldi	r30, 0x85	; 133
     5d2:	f2 e0       	ldi	r31, 0x02	; 2
     5d4:	cf 01       	movw	r24, r30
     5d6:	09 96       	adiw	r24, 0x09	; 9
	//set all buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferout[i] = 1;
     5d8:	21 e0       	ldi	r18, 0x01	; 1
     5da:	21 93       	st	Z+, r18
     5dc:	e8 17       	cp	r30, r24
     5de:	f9 07       	cpc	r31, r25
     5e0:	e1 f7       	brne	.-8      	; 0x5da <sMOIfaceRF_sendCheck+0xa>
	//Set Address for check
	nrf24l01_settxaddr(nrf24l01_addr5);
     5e2:	8a e5       	ldi	r24, 0x5A	; 90
     5e4:	91 e0       	ldi	r25, 0x01	; 1
     5e6:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     5ea:	85 e8       	ldi	r24, 0x85	; 133
     5ec:	92 e0       	ldi	r25, 0x02	; 2
     5ee:	0e 94 b2 06 	call	0xd64	; 0xd64 <nrf24l01_write>
     5f2:	98 2f       	mov	r25, r24
     5f4:	ef ec       	ldi	r30, 0xCF	; 207
     5f6:	f7 e0       	ldi	r31, 0x07	; 7
     5f8:	31 97       	sbiw	r30, 0x01	; 1
     5fa:	f1 f7       	brne	.-4      	; 0x5f8 <sMOIfaceRF_sendCheck+0x28>
     5fc:	00 c0       	rjmp	.+0      	; 0x5fe <sMOIfaceRF_sendCheck+0x2e>
     5fe:	00 00       	nop
	} else {
		return false;
	}
}

sc_boolean sMOIfaceRF_sendCheck() {
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	91 30       	cpi	r25, 0x01	; 1
     604:	09 f0       	breq	.+2      	; 0x608 <sMOIfaceRF_sendCheck+0x38>
     606:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     608:	08 95       	ret

0000060a <sMOIfaceRF_getCheck>:

sc_boolean sMOIfaceRF_getCheck() {
     60a:	0f 93       	push	r16
     60c:	1f 93       	push	r17
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	0f 92       	push	r0
     614:	cd b7       	in	r28, 0x3d	; 61
     616:	de b7       	in	r29, 0x3e	; 62
	uint8_t pipe = 0;
     618:	19 82       	std	Y+1, r1	; 0x01
	if (nrf24l01_readready(&pipe)) {
     61a:	ce 01       	movw	r24, r28
     61c:	01 96       	adiw	r24, 0x01	; 1
     61e:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <nrf24l01_readready>
     622:	88 23       	and	r24, r24
     624:	f1 f0       	breq	.+60     	; 0x662 <sMOIfaceRF_getCheck+0x58>
		if (pipe==5) {
     626:	89 81       	ldd	r24, Y+1	; 0x01
     628:	85 30       	cpi	r24, 0x05	; 5
     62a:	e9 f4       	brne	.+58     	; 0x666 <sMOIfaceRF_getCheck+0x5c>
     62c:	ea e7       	ldi	r30, 0x7A	; 122
     62e:	f2 e0       	ldi	r31, 0x02	; 2
	} else {
		return false;
	}
}

sc_boolean sMOIfaceRF_getCheck() {
     630:	8f 01       	movw	r16, r30
     632:	07 5f       	subi	r16, 0xF7	; 247
     634:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t pipe = 0;
	if (nrf24l01_readready(&pipe)) {
		if (pipe==5) {
			//clear buffer
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
     636:	11 92       	st	Z+, r1
     638:	e0 17       	cp	r30, r16
     63a:	f1 07       	cpc	r31, r17
     63c:	e1 f7       	brne	.-8      	; 0x636 <sMOIfaceRF_getCheck+0x2c>
			
			//read buffer
			nrf24l01_read(pipe,bufferin);
     63e:	85 e0       	ldi	r24, 0x05	; 5
     640:	6a e7       	ldi	r22, 0x7A	; 122
     642:	72 e0       	ldi	r23, 0x02	; 2
     644:	0e 94 8c 06 	call	0xd18	; 0xd18 <nrf24l01_read>
			
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) if (bufferin[i]!=1) return false;
     648:	80 91 7a 02 	lds	r24, 0x027A
     64c:	81 30       	cpi	r24, 0x01	; 1
     64e:	69 f4       	brne	.+26     	; 0x66a <sMOIfaceRF_getCheck+0x60>
     650:	eb e7       	ldi	r30, 0x7B	; 123
     652:	f2 e0       	ldi	r31, 0x02	; 2
     654:	81 91       	ld	r24, Z+
     656:	81 30       	cpi	r24, 0x01	; 1
     658:	51 f4       	brne	.+20     	; 0x66e <sMOIfaceRF_getCheck+0x64>
     65a:	e0 17       	cp	r30, r16
     65c:	f1 07       	cpc	r31, r17
     65e:	d1 f7       	brne	.-12     	; 0x654 <sMOIfaceRF_getCheck+0x4a>
     660:	07 c0       	rjmp	.+14     	; 0x670 <sMOIfaceRF_getCheck+0x66>
			return true;
		}
	}
	return false;
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	05 c0       	rjmp	.+10     	; 0x670 <sMOIfaceRF_getCheck+0x66>
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	03 c0       	rjmp	.+6      	; 0x670 <sMOIfaceRF_getCheck+0x66>
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
			
			//read buffer
			nrf24l01_read(pipe,bufferin);
			
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) if (bufferin[i]!=1) return false;
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	01 c0       	rjmp	.+2      	; 0x670 <sMOIfaceRF_getCheck+0x66>
     66e:	80 e0       	ldi	r24, 0x00	; 0
			return true;
		}
	}
	return false;
}
     670:	0f 90       	pop	r0
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	08 95       	ret

0000067c <sMOIfaceRF_sendData>:

sc_boolean sMOIfaceRF_sendData(const sc_integer cmd, const sc_integer id, const sc_integer dish_id, const sc_integer amount) {
     67c:	af 92       	push	r10
     67e:	ef 92       	push	r14
     680:	82 2f       	mov	r24, r18
     682:	e5 e8       	ldi	r30, 0x85	; 133
     684:	f2 e0       	ldi	r31, 0x02	; 2
     686:	af 01       	movw	r20, r30
     688:	47 5f       	subi	r20, 0xF7	; 247
     68a:	5f 4f       	sbci	r21, 0xFF	; 255
	
	unsigned char num;
	unsigned char mod;
	//clear buffer
	for(uint8_t i=0; i<sizeof(bufferout); i++) bufferout[i] = 0;
     68c:	11 92       	st	Z+, r1
     68e:	e4 17       	cp	r30, r20
     690:	f5 07       	cpc	r31, r21
     692:	e1 f7       	brne	.-8      	; 0x68c <sMOIfaceRF_sendData+0x10>
	
	//Lenh cho data: 1-goi mon, 2-huy mon, 3-thanh toan, 4-goi boi ban
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
     694:	60 5d       	subi	r22, 0xD0	; 208
     696:	60 93 85 02 	sts	0x0285, r22
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     69a:	3a e0       	ldi	r19, 0x0A	; 10
     69c:	63 2f       	mov	r22, r19
     69e:	0e 94 28 18 	call	0x3050	; 0x3050 <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     6a2:	90 5d       	subi	r25, 0xD0	; 208
     6a4:	90 93 87 02 	sts	0x0287, r25
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     6a8:	0e 94 28 18 	call	0x3050	; 0x3050 <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     6ac:	90 5d       	subi	r25, 0xD0	; 208
     6ae:	90 93 86 02 	sts	0x0286, r25
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
		num/=10;
     6b2:	8e 2d       	mov	r24, r14
     6b4:	0e 94 28 18 	call	0x3050	; 0x3050 <__udivmodqi4>
		bufferout[3+i]=mod+'0';
     6b8:	90 5d       	subi	r25, 0xD0	; 208
     6ba:	90 93 8a 02 	sts	0x028A, r25
	}
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
     6be:	0e 94 28 18 	call	0x3050	; 0x3050 <__udivmodqi4>
		num/=10;
		bufferout[3+i]=mod+'0';
     6c2:	90 5d       	subi	r25, 0xD0	; 208
     6c4:	90 93 89 02 	sts	0x0289, r25
	}
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
     6c8:	0e 94 28 18 	call	0x3050	; 0x3050 <__udivmodqi4>
		num/=10;
		bufferout[3+i]=mod+'0';
     6cc:	90 5d       	subi	r25, 0xD0	; 208
     6ce:	90 93 88 02 	sts	0x0288, r25
	}
	
	//Chuyen doi so luong mon an
	num=amount;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     6d2:	8a 2d       	mov	r24, r10
     6d4:	0e 94 28 18 	call	0x3050	; 0x3050 <__udivmodqi4>
		num/=10;
		bufferout[6+i]=mod+'0';
     6d8:	90 5d       	subi	r25, 0xD0	; 208
     6da:	90 93 8c 02 	sts	0x028C, r25
	}
	
	//Chuyen doi so luong mon an
	num=amount;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     6de:	0e 94 28 18 	call	0x3050	; 0x3050 <__udivmodqi4>
		num/=10;
		bufferout[6+i]=mod+'0';
     6e2:	90 5d       	subi	r25, 0xD0	; 208
     6e4:	90 93 8b 02 	sts	0x028B, r25
	}
	
	//Set Address for Data
	nrf24l01_settxaddr(nrf24l01_addrtx);
     6e8:	85 e5       	ldi	r24, 0x55	; 85
     6ea:	91 e0       	ldi	r25, 0x01	; 1
     6ec:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     6f0:	85 e8       	ldi	r24, 0x85	; 133
     6f2:	92 e0       	ldi	r25, 0x02	; 2
     6f4:	0e 94 b2 06 	call	0xd64	; 0xd64 <nrf24l01_write>
     6f8:	98 2f       	mov	r25, r24
     6fa:	ef ec       	ldi	r30, 0xCF	; 207
     6fc:	f7 e0       	ldi	r31, 0x07	; 7
     6fe:	31 97       	sbiw	r30, 0x01	; 1
     700:	f1 f7       	brne	.-4      	; 0x6fe <sMOIfaceRF_sendData+0x82>
     702:	00 c0       	rjmp	.+0      	; 0x704 <sMOIfaceRF_sendData+0x88>
     704:	00 00       	nop
		}
	}
	return false;
}

sc_boolean sMOIfaceRF_sendData(const sc_integer cmd, const sc_integer id, const sc_integer dish_id, const sc_integer amount) {
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	91 30       	cpi	r25, 0x01	; 1
     70a:	09 f0       	breq	.+2      	; 0x70e <sMOIfaceRF_sendData+0x92>
     70c:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     70e:	ef 90       	pop	r14
     710:	af 90       	pop	r10
     712:	08 95       	ret

00000714 <sMOIfaceRF_sendConf>:

sc_boolean sMOIfaceRF_sendConf(const sc_integer cmd, const sc_integer id) {
     714:	82 2f       	mov	r24, r18
     716:	e5 e8       	ldi	r30, 0x85	; 133
     718:	f2 e0       	ldi	r31, 0x02	; 2
     71a:	af 01       	movw	r20, r30
     71c:	47 5f       	subi	r20, 0xF7	; 247
     71e:	5f 4f       	sbci	r21, 0xFF	; 255
	
	unsigned char num;
	unsigned char mod;
	//clear buffer
	for(uint8_t i=0; i<sizeof(bufferout); i++) bufferout[i] = 0;
     720:	11 92       	st	Z+, r1
     722:	e4 17       	cp	r30, r20
     724:	f5 07       	cpc	r31, r21
     726:	e1 f7       	brne	.-8      	; 0x720 <sMOIfaceRF_sendConf+0xc>
	
	//Lenh cho data: 1-goi mon, 2-huy mon, 3-thanh toan, 4-goi boi ban
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
     728:	60 5d       	subi	r22, 0xD0	; 208
     72a:	60 93 85 02 	sts	0x0285, r22
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     72e:	3a e0       	ldi	r19, 0x0A	; 10
     730:	63 2f       	mov	r22, r19
     732:	0e 94 28 18 	call	0x3050	; 0x3050 <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     736:	90 5d       	subi	r25, 0xD0	; 208
     738:	90 93 87 02 	sts	0x0287, r25
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     73c:	0e 94 28 18 	call	0x3050	; 0x3050 <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     740:	90 5d       	subi	r25, 0xD0	; 208
     742:	90 93 86 02 	sts	0x0286, r25
	}
	
	//Set Address for Data
	nrf24l01_settxaddr(nrf24l01_addrtx);
     746:	85 e5       	ldi	r24, 0x55	; 85
     748:	91 e0       	ldi	r25, 0x01	; 1
     74a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     74e:	85 e8       	ldi	r24, 0x85	; 133
     750:	92 e0       	ldi	r25, 0x02	; 2
     752:	0e 94 b2 06 	call	0xd64	; 0xd64 <nrf24l01_write>
	} else {
		return false;
	}
}

sc_boolean sMOIfaceRF_sendConf(const sc_integer cmd, const sc_integer id) {
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	81 30       	cpi	r24, 0x01	; 1
     75a:	09 f0       	breq	.+2      	; 0x75e <sMOIfaceRF_sendConf+0x4a>
     75c:	90 e0       	ldi	r25, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     75e:	89 2f       	mov	r24, r25
     760:	08 95       	ret

00000762 <sMO_setTimer>:

void sMO_setTimer(const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
	TimerSet(evid,time_ms);
     762:	0e 94 34 17 	call	0x2e68	; 0x2e68 <TimerSet>
}
     766:	08 95       	ret

00000768 <sMO_unsetTimer>:
void sMO_unsetTimer(const sc_eventid evid) {
	TimerUnSet(evid);
     768:	0e 94 80 17 	call	0x2f00	; 0x2f00 <TimerUnSet>
}
     76c:	08 95       	ret

0000076e <sMOIfaceRF_init>:

void sMOIfaceRF_init() {
	nrf24l01_init();
     76e:	0e 94 08 07 	call	0xe10	; 0xe10 <nrf24l01_init>
}
     772:	08 95       	ret

00000774 <main>:

int main(void)
{
	uint8_t i;
	DDRC=0x0F;
     774:	8f e0       	ldi	r24, 0x0F	; 15
     776:	84 bb       	out	0x14, r24	; 20
	PORTC=0x0F;
     778:	85 bb       	out	0x15, r24	; 21
	l=malloc(sizeof(SMO*)) ;
     77a:	82 e0       	ldi	r24, 0x02	; 2
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <malloc>
     782:	80 93 83 02 	sts	0x0283, r24
     786:	90 93 84 02 	sts	0x0284, r25
	TimerInit();
     78a:	0e 94 28 17 	call	0x2e50	; 0x2e50 <TimerInit>
	sMO_init(l);
     78e:	80 91 83 02 	lds	r24, 0x0283
     792:	90 91 84 02 	lds	r25, 0x0284
     796:	0e 94 c7 07 	call	0xf8e	; 0xf8e <sMO_init>
	sMO_enter(l);
     79a:	80 91 83 02 	lds	r24, 0x0283
     79e:	90 91 84 02 	lds	r25, 0x0284
     7a2:	0e 94 ce 07 	call	0xf9c	; 0xf9c <sMO_enter>
	
	while(1)
	{
		sMO_runCycle(l);
     7a6:	80 91 83 02 	lds	r24, 0x0283
     7aa:	90 91 84 02 	lds	r25, 0x0284
     7ae:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <sMO_runCycle>
     7b2:	f9 cf       	rjmp	.-14     	; 0x7a6 <main+0x32>

000007b4 <__vector_16>:
	}
}

ISR (TIMER0_OVF_vect) {
     7b4:	1f 92       	push	r1
     7b6:	0f 92       	push	r0
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	0f 92       	push	r0
     7bc:	0b b6       	in	r0, 0x3b	; 59
     7be:	0f 92       	push	r0
     7c0:	11 24       	eor	r1, r1
     7c2:	2f 93       	push	r18
     7c4:	3f 93       	push	r19
     7c6:	4f 93       	push	r20
     7c8:	5f 93       	push	r21
     7ca:	6f 93       	push	r22
     7cc:	7f 93       	push	r23
     7ce:	8f 93       	push	r24
     7d0:	9f 93       	push	r25
     7d2:	af 93       	push	r26
     7d4:	bf 93       	push	r27
     7d6:	ef 93       	push	r30
     7d8:	ff 93       	push	r31
	TCNT0=131;
     7da:	83 e8       	ldi	r24, 0x83	; 131
     7dc:	82 bf       	out	0x32, r24	; 50
	TimerCheck(l);
     7de:	80 91 83 02 	lds	r24, 0x0283
     7e2:	90 91 84 02 	lds	r25, 0x0284
     7e6:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <TimerCheck>
     7ea:	ff 91       	pop	r31
     7ec:	ef 91       	pop	r30
     7ee:	bf 91       	pop	r27
     7f0:	af 91       	pop	r26
     7f2:	9f 91       	pop	r25
     7f4:	8f 91       	pop	r24
     7f6:	7f 91       	pop	r23
     7f8:	6f 91       	pop	r22
     7fa:	5f 91       	pop	r21
     7fc:	4f 91       	pop	r20
     7fe:	3f 91       	pop	r19
     800:	2f 91       	pop	r18
     802:	0f 90       	pop	r0
     804:	0b be       	out	0x3b, r0	; 59
     806:	0f 90       	pop	r0
     808:	0f be       	out	0x3f, r0	; 63
     80a:	0f 90       	pop	r0
     80c:	1f 90       	pop	r1
     80e:	18 95       	reti

00000810 <nrf24l01_readregister>:

/*
 * read one register
 */
uint8_t nrf24l01_readregister(uint8_t reg) {
	nrf24l01_CSNlo; //low CSN
     810:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     812:	8f 71       	andi	r24, 0x1F	; 31
     814:	0e 94 23 17 	call	0x2e46	; 0x2e46 <spi_writereadbyte>
    uint8_t result = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
     818:	8f ef       	ldi	r24, 0xFF	; 255
     81a:	0e 94 23 17 	call	0x2e46	; 0x2e46 <spi_writereadbyte>
    nrf24l01_CSNhi; //high CSN
     81e:	ae 9a       	sbi	0x15, 6	; 21
    return result;
}
     820:	08 95       	ret

00000822 <nrf24l01_readregisters>:

/*
 * read many registers
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
     822:	ff 92       	push	r15
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	06 2f       	mov	r16, r22
     82e:	f7 2e       	mov	r15, r23
     830:	14 2f       	mov	r17, r20
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
     832:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     834:	8f 71       	andi	r24, 0x1F	; 31
     836:	0e 94 23 17 	call	0x2e46	; 0x2e46 <spi_writereadbyte>
	for(i=0; i<len; i++)
     83a:	11 23       	and	r17, r17
     83c:	51 f0       	breq	.+20     	; 0x852 <nrf24l01_readregisters+0x30>
     83e:	c0 2f       	mov	r28, r16
     840:	df 2d       	mov	r29, r15
     842:	00 e0       	ldi	r16, 0x00	; 0
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
     844:	8f ef       	ldi	r24, 0xFF	; 255
     846:	0e 94 23 17 	call	0x2e46	; 0x2e46 <spi_writereadbyte>
     84a:	89 93       	st	Y+, r24
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     84c:	0f 5f       	subi	r16, 0xFF	; 255
     84e:	01 17       	cp	r16, r17
     850:	c9 f7       	brne	.-14     	; 0x844 <nrf24l01_readregisters+0x22>
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
	nrf24l01_CSNhi; //high CSN
     852:	ae 9a       	sbi	0x15, 6	; 21
}
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	1f 91       	pop	r17
     85a:	0f 91       	pop	r16
     85c:	ff 90       	pop	r15
     85e:	08 95       	ret

00000860 <nrf24l01_writeregister>:

/*
 * write one register
 */
void nrf24l01_writeregister(uint8_t reg, uint8_t value) {
     860:	cf 93       	push	r28
     862:	c6 2f       	mov	r28, r22
	nrf24l01_CSNlo; //low CSN
     864:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     866:	8f 71       	andi	r24, 0x1F	; 31
     868:	80 62       	ori	r24, 0x20	; 32
     86a:	0e 94 23 17 	call	0x2e46	; 0x2e46 <spi_writereadbyte>
	spi_writereadbyte(value); //write register
     86e:	8c 2f       	mov	r24, r28
     870:	0e 94 23 17 	call	0x2e46	; 0x2e46 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     874:	ae 9a       	sbi	0x15, 6	; 21
}
     876:	cf 91       	pop	r28
     878:	08 95       	ret

0000087a <nrf24l01_writeregisters>:

/*
 * write many registers
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
     87a:	ff 92       	push	r15
     87c:	0f 93       	push	r16
     87e:	1f 93       	push	r17
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	06 2f       	mov	r16, r22
     886:	f7 2e       	mov	r15, r23
     888:	14 2f       	mov	r17, r20
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
     88a:	ae 98       	cbi	0x15, 6	; 21
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     88c:	8f 71       	andi	r24, 0x1F	; 31
     88e:	80 62       	ori	r24, 0x20	; 32
     890:	0e 94 23 17 	call	0x2e46	; 0x2e46 <spi_writereadbyte>
	for(i=0; i<len; i++)
     894:	11 23       	and	r17, r17
     896:	49 f0       	breq	.+18     	; 0x8aa <nrf24l01_writeregisters+0x30>
     898:	c0 2f       	mov	r28, r16
     89a:	df 2d       	mov	r29, r15
     89c:	00 e0       	ldi	r16, 0x00	; 0
		 spi_writereadbyte(value[i]); //write register
     89e:	89 91       	ld	r24, Y+
     8a0:	0e 94 23 17 	call	0x2e46	; 0x2e46 <spi_writereadbyte>
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     8a4:	0f 5f       	subi	r16, 0xFF	; 255
     8a6:	01 17       	cp	r16, r17
     8a8:	d1 f7       	brne	.-12     	; 0x89e <nrf24l01_writeregisters+0x24>
		 spi_writereadbyte(value[i]); //write register
	nrf24l01_CSNhi; //high CSN
     8aa:	ae 9a       	sbi	0x15, 6	; 21
}
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	0f 91       	pop	r16
     8b4:	ff 90       	pop	r15
     8b6:	08 95       	ret

000008b8 <nrf24l01_revaddress>:

/*
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	04 96       	adiw	r24, 0x04	; 4
     8be:	db 01       	movw	r26, r22
     8c0:	a2 0f       	add	r26, r18
     8c2:	b3 1f       	adc	r27, r19
     8c4:	fc 01       	movw	r30, r24
     8c6:	e2 1b       	sub	r30, r18
     8c8:	f3 0b       	sbc	r31, r19
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
     8ca:	40 81       	ld	r20, Z
     8cc:	4c 93       	st	X, r20
     8ce:	2f 5f       	subi	r18, 0xFF	; 255
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
     8d2:	25 30       	cpi	r18, 0x05	; 5
     8d4:	31 05       	cpc	r19, r1
     8d6:	99 f7       	brne	.-26     	; 0x8be <nrf24l01_revaddress+0x6>
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
}
     8d8:	08 95       	ret

000008da <nrf24l01_setrxaddr>:

/*
 * set rx address
 */
void nrf24l01_setrxaddr(uint8_t pipe, uint8_t *addr) {
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	00 d0       	rcall	.+0      	; 0x8e0 <nrf24l01_setrxaddr+0x6>
     8e0:	00 d0       	rcall	.+0      	; 0x8e2 <nrf24l01_setrxaddr+0x8>
     8e2:	0f 92       	push	r0
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
	if(pipe == 0) {
     8e8:	88 23       	and	r24, r24
     8ea:	b1 f4       	brne	.+44     	; 0x918 <nrf24l01_setrxaddr+0x3e>
		memcpy(&nrf24l01_addr0, addr, NRF24L01_ADDRSIZE); //cache address
     8ec:	a9 ed       	ldi	r26, 0xD9	; 217
     8ee:	b1 e0       	ldi	r27, 0x01	; 1
     8f0:	fb 01       	movw	r30, r22
     8f2:	85 e0       	ldi	r24, 0x05	; 5
     8f4:	01 90       	ld	r0, Z+
     8f6:	0d 92       	st	X+, r0
     8f8:	81 50       	subi	r24, 0x01	; 1
     8fa:	e1 f7       	brne	.-8      	; 0x8f4 <nrf24l01_setrxaddr+0x1a>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     8fc:	cb 01       	movw	r24, r22
     8fe:	be 01       	movw	r22, r28
     900:	6f 5f       	subi	r22, 0xFF	; 255
     902:	7f 4f       	sbci	r23, 0xFF	; 255
     904:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE);
     908:	8a e0       	ldi	r24, 0x0A	; 10
     90a:	be 01       	movw	r22, r28
     90c:	6f 5f       	subi	r22, 0xFF	; 255
     90e:	7f 4f       	sbci	r23, 0xFF	; 255
     910:	45 e0       	ldi	r20, 0x05	; 5
     912:	0e 94 3d 04 	call	0x87a	; 0x87a <nrf24l01_writeregisters>
     916:	56 c0       	rjmp	.+172    	; 0x9c4 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 1) {
     918:	81 30       	cpi	r24, 0x01	; 1
     91a:	b1 f4       	brne	.+44     	; 0x948 <nrf24l01_setrxaddr+0x6e>
		memcpy(&nrf24l01_addr1, addr, NRF24L01_ADDRSIZE); //cache address
     91c:	ae ed       	ldi	r26, 0xDE	; 222
     91e:	b1 e0       	ldi	r27, 0x01	; 1
     920:	fb 01       	movw	r30, r22
     922:	85 e0       	ldi	r24, 0x05	; 5
     924:	01 90       	ld	r0, Z+
     926:	0d 92       	st	X+, r0
     928:	81 50       	subi	r24, 0x01	; 1
     92a:	e1 f7       	brne	.-8      	; 0x924 <nrf24l01_setrxaddr+0x4a>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     92c:	cb 01       	movw	r24, r22
     92e:	be 01       	movw	r22, r28
     930:	6f 5f       	subi	r22, 0xFF	; 255
     932:	7f 4f       	sbci	r23, 0xFF	; 255
     934:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P1, addrrev, NRF24L01_ADDRSIZE);
     938:	8b e0       	ldi	r24, 0x0B	; 11
     93a:	be 01       	movw	r22, r28
     93c:	6f 5f       	subi	r22, 0xFF	; 255
     93e:	7f 4f       	sbci	r23, 0xFF	; 255
     940:	45 e0       	ldi	r20, 0x05	; 5
     942:	0e 94 3d 04 	call	0x87a	; 0x87a <nrf24l01_writeregisters>
     946:	3e c0       	rjmp	.+124    	; 0x9c4 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 2) {
     948:	82 30       	cpi	r24, 0x02	; 2
     94a:	71 f4       	brne	.+28     	; 0x968 <nrf24l01_setrxaddr+0x8e>
		memcpy(&nrf24l01_addr2, addr, NRF24L01_ADDRSIZE); //cache address
     94c:	a3 ee       	ldi	r26, 0xE3	; 227
     94e:	b1 e0       	ldi	r27, 0x01	; 1
     950:	fb 01       	movw	r30, r22
     952:	85 e0       	ldi	r24, 0x05	; 5
     954:	01 90       	ld	r0, Z+
     956:	0d 92       	st	X+, r0
     958:	81 50       	subi	r24, 0x01	; 1
     95a:	e1 f7       	brne	.-8      	; 0x954 <nrf24l01_setrxaddr+0x7a>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P2, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     95c:	8c e0       	ldi	r24, 0x0C	; 12
     95e:	fb 01       	movw	r30, r22
     960:	64 81       	ldd	r22, Z+4	; 0x04
     962:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
     966:	2e c0       	rjmp	.+92     	; 0x9c4 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 3) {
     968:	83 30       	cpi	r24, 0x03	; 3
     96a:	71 f4       	brne	.+28     	; 0x988 <nrf24l01_setrxaddr+0xae>
		memcpy(&nrf24l01_addr3, addr, NRF24L01_ADDRSIZE); //cache address
     96c:	a8 ee       	ldi	r26, 0xE8	; 232
     96e:	b1 e0       	ldi	r27, 0x01	; 1
     970:	fb 01       	movw	r30, r22
     972:	85 e0       	ldi	r24, 0x05	; 5
     974:	01 90       	ld	r0, Z+
     976:	0d 92       	st	X+, r0
     978:	81 50       	subi	r24, 0x01	; 1
     97a:	e1 f7       	brne	.-8      	; 0x974 <nrf24l01_setrxaddr+0x9a>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P3, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     97c:	8d e0       	ldi	r24, 0x0D	; 13
     97e:	fb 01       	movw	r30, r22
     980:	64 81       	ldd	r22, Z+4	; 0x04
     982:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
     986:	1e c0       	rjmp	.+60     	; 0x9c4 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 4) {
     988:	84 30       	cpi	r24, 0x04	; 4
     98a:	71 f4       	brne	.+28     	; 0x9a8 <nrf24l01_setrxaddr+0xce>
		memcpy(&nrf24l01_addr4, addr, NRF24L01_ADDRSIZE); //cache address
     98c:	ad ee       	ldi	r26, 0xED	; 237
     98e:	b1 e0       	ldi	r27, 0x01	; 1
     990:	fb 01       	movw	r30, r22
     992:	85 e0       	ldi	r24, 0x05	; 5
     994:	01 90       	ld	r0, Z+
     996:	0d 92       	st	X+, r0
     998:	81 50       	subi	r24, 0x01	; 1
     99a:	e1 f7       	brne	.-8      	; 0x994 <nrf24l01_setrxaddr+0xba>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P4, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     99c:	8e e0       	ldi	r24, 0x0E	; 14
     99e:	fb 01       	movw	r30, r22
     9a0:	64 81       	ldd	r22, Z+4	; 0x04
     9a2:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
     9a6:	0e c0       	rjmp	.+28     	; 0x9c4 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 5) {
     9a8:	85 30       	cpi	r24, 0x05	; 5
     9aa:	61 f4       	brne	.+24     	; 0x9c4 <nrf24l01_setrxaddr+0xea>
		memcpy(&nrf24l01_addr5, addr, NRF24L01_ADDRSIZE); //cache address
     9ac:	a2 ef       	ldi	r26, 0xF2	; 242
     9ae:	b1 e0       	ldi	r27, 0x01	; 1
     9b0:	fb 01       	movw	r30, r22
     9b2:	01 90       	ld	r0, Z+
     9b4:	0d 92       	st	X+, r0
     9b6:	81 50       	subi	r24, 0x01	; 1
     9b8:	e1 f7       	brne	.-8      	; 0x9b2 <nrf24l01_setrxaddr+0xd8>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P5, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     9ba:	8f e0       	ldi	r24, 0x0F	; 15
     9bc:	fb 01       	movw	r30, r22
     9be:	64 81       	ldd	r22, Z+4	; 0x04
     9c0:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
	}
}
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	08 95       	ret

000009d4 <nrf24l01_settxaddr>:

/*
 * set tx address
 */
void nrf24l01_settxaddr(uint8_t *addr) {
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	00 d0       	rcall	.+0      	; 0x9da <nrf24l01_settxaddr+0x6>
     9da:	00 d0       	rcall	.+0      	; 0x9dc <nrf24l01_settxaddr+0x8>
     9dc:	0f 92       	push	r0
     9de:	cd b7       	in	r28, 0x3d	; 61
     9e0:	de b7       	in	r29, 0x3e	; 62
	memcpy(&nrf24l01_addrtx, addr, NRF24L01_ADDRSIZE); //cache address
     9e2:	a7 ef       	ldi	r26, 0xF7	; 247
     9e4:	b1 e0       	ldi	r27, 0x01	; 1
     9e6:	e8 2f       	mov	r30, r24
     9e8:	f9 2f       	mov	r31, r25
     9ea:	25 e0       	ldi	r18, 0x05	; 5
     9ec:	01 90       	ld	r0, Z+
     9ee:	0d 92       	st	X+, r0
     9f0:	21 50       	subi	r18, 0x01	; 1
     9f2:	e1 f7       	brne	.-8      	; 0x9ec <nrf24l01_settxaddr+0x18>
	uint8_t addrrev[NRF24L01_ADDRSIZE];
	nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     9f4:	be 01       	movw	r22, r28
     9f6:	6f 5f       	subi	r22, 0xFF	; 255
     9f8:	7f 4f       	sbci	r23, 0xFF	; 255
     9fa:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <nrf24l01_revaddress>
	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE); //set rx address for ack on pipe 0
     9fe:	8a e0       	ldi	r24, 0x0A	; 10
     a00:	be 01       	movw	r22, r28
     a02:	6f 5f       	subi	r22, 0xFF	; 255
     a04:	7f 4f       	sbci	r23, 0xFF	; 255
     a06:	45 e0       	ldi	r20, 0x05	; 5
     a08:	0e 94 3d 04 	call	0x87a	; 0x87a <nrf24l01_writeregisters>
	nrf24l01_writeregisters(NRF24L01_REG_TX_ADDR, addrrev, NRF24L01_ADDRSIZE); //set tx address
     a0c:	80 e1       	ldi	r24, 0x10	; 16
     a0e:	be 01       	movw	r22, r28
     a10:	6f 5f       	subi	r22, 0xFF	; 255
     a12:	7f 4f       	sbci	r23, 0xFF	; 255
     a14:	45 e0       	ldi	r20, 0x05	; 5
     a16:	0e 94 3d 04 	call	0x87a	; 0x87a <nrf24l01_writeregisters>
}
     a1a:	0f 90       	pop	r0
     a1c:	0f 90       	pop	r0
     a1e:	0f 90       	pop	r0
     a20:	0f 90       	pop	r0
     a22:	0f 90       	pop	r0
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	08 95       	ret

00000a2a <nrf24l01_flushRXfifo>:

/*
 * flush RX fifo
 */
void nrf24l01_flushRXfifo() {
	nrf24l01_CSNlo; //low CSN
     a2a:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_FLUSH_RX);
     a2c:	82 ee       	ldi	r24, 0xE2	; 226
     a2e:	0e 94 23 17 	call	0x2e46	; 0x2e46 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     a32:	ae 9a       	sbi	0x15, 6	; 21
}
     a34:	08 95       	ret

00000a36 <nrf24l01_flushTXfifo>:

/*
 * flush TX fifo
 */
void nrf24l01_flushTXfifo() {
	nrf24l01_CSNlo; //low CSN
     a36:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_FLUSH_TX);
     a38:	81 ee       	ldi	r24, 0xE1	; 225
     a3a:	0e 94 23 17 	call	0x2e46	; 0x2e46 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     a3e:	ae 9a       	sbi	0x15, 6	; 21
}
     a40:	08 95       	ret

00000a42 <nrf24l01_setRX>:

/*
 * set chip as RX
 */
void nrf24l01_setRX() {
	nrf24l01_setrxaddr(0, nrf24l01_addr0); //restore pipe 0 address
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	69 ed       	ldi	r22, 0xD9	; 217
     a46:	71 e0       	ldi	r23, 0x01	; 1
     a48:	0e 94 6d 04 	call	0x8da	; 0x8da <nrf24l01_setrxaddr>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PRIM_RX)); //prx mode
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	0e 94 08 04 	call	0x810	; 0x810 <nrf24l01_readregister>
     a52:	68 2f       	mov	r22, r24
     a54:	61 60       	ori	r22, 0x01	; 1
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	0e 94 08 04 	call	0x810	; 0x810 <nrf24l01_readregister>
     a62:	68 2f       	mov	r22, r24
     a64:	62 60       	ori	r22, 0x02	; 2
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     a6c:	87 e0       	ldi	r24, 0x07	; 7
     a6e:	60 e7       	ldi	r22, 0x70	; 112
     a70:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
	nrf24l01_flushRXfifo(); //flush rx fifo
     a74:	0e 94 15 05 	call	0xa2a	; 0xa2a <nrf24l01_flushRXfifo>
	nrf24l01_flushTXfifo(); //flush tx fifo
     a78:	0e 94 1b 05 	call	0xa36	; 0xa36 <nrf24l01_flushTXfifo>
	nrf24l01_CEhi; //start listening
     a7c:	af 9a       	sbi	0x15, 7	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a7e:	82 e3       	ldi	r24, 0x32	; 50
     a80:	8a 95       	dec	r24
     a82:	f1 f7       	brne	.-4      	; 0xa80 <nrf24l01_setRX+0x3e>
	_delay_us(150); //wait for the radio to power up
}
     a84:	08 95       	ret

00000a86 <nrf24l01_setTX>:

/*
 * set chip as TX
 */
void nrf24l01_setTX() {
	nrf24l01_CElo; //stop listening
     a86:	af 98       	cbi	0x15, 7	; 21
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PRIM_RX)); //ptx mode
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	0e 94 08 04 	call	0x810	; 0x810 <nrf24l01_readregister>
     a8e:	68 2f       	mov	r22, r24
     a90:	6e 7f       	andi	r22, 0xFE	; 254
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	0e 94 08 04 	call	0x810	; 0x810 <nrf24l01_readregister>
     a9e:	68 2f       	mov	r22, r24
     aa0:	62 60       	ori	r22, 0x02	; 2
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     aa8:	87 e0       	ldi	r24, 0x07	; 7
     aaa:	60 e7       	ldi	r22, 0x70	; 112
     aac:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
	nrf24l01_flushTXfifo(); //flush tx fifo
     ab0:	0e 94 1b 05 	call	0xa36	; 0xa36 <nrf24l01_flushTXfifo>
     ab4:	82 e3       	ldi	r24, 0x32	; 50
     ab6:	8a 95       	dec	r24
     ab8:	f1 f7       	brne	.-4      	; 0xab6 <nrf24l01_setTX+0x30>
	_delay_us(150); //wait for the radio to power up
}
     aba:	08 95       	ret

00000abc <nrf24l01_getstatus>:
/*
 * get status register
 */
uint8_t nrf24l01_getstatus() {
	uint8_t status = 0;
	nrf24l01_CSNlo; //low CSN
     abc:	ae 98       	cbi	0x15, 6	; 21
	status = spi_writereadbyte(NRF24L01_CMD_NOP); //get status, send NOP request
     abe:	8f ef       	ldi	r24, 0xFF	; 255
     ac0:	0e 94 23 17 	call	0x2e46	; 0x2e46 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     ac4:	ae 9a       	sbi	0x15, 6	; 21
	return status;
}
     ac6:	08 95       	ret

00000ac8 <nrf24l01_printinfo>:

#if NRF24L01_PRINTENABLE == 1
/*
 * print info
 */
void nrf24l01_printinfo(void(*prints)(const char *), void(*printc)(unsigned char data)) {
     ac8:	ef 92       	push	r14
     aca:	ff 92       	push	r15
     acc:	0f 93       	push	r16
     ace:	1f 93       	push	r17
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	cd b7       	in	r28, 0x3d	; 61
     ad6:	de b7       	in	r29, 0x3e	; 62
     ad8:	c4 56       	subi	r28, 0x64	; 100
     ada:	d0 40       	sbci	r29, 0x00	; 0
     adc:	0f b6       	in	r0, 0x3f	; 63
     ade:	f8 94       	cli
     ae0:	de bf       	out	0x3e, r29	; 62
     ae2:	0f be       	out	0x3f, r0	; 63
     ae4:	cd bf       	out	0x3d, r28	; 61
     ae6:	7c 01       	movw	r14, r24
	char buff[100];
	prints("info\r\n");
     ae8:	8f e5       	ldi	r24, 0x5F	; 95
     aea:	91 e0       	ldi	r25, 0x01	; 1
     aec:	f7 01       	movw	r30, r14
     aee:	09 95       	icall
	sprintf(buff,"STATUS: %02X\r\n", nrf24l01_getstatus()); prints(buff);
     af0:	0e 94 5e 05 	call	0xabc	; 0xabc <nrf24l01_getstatus>
     af4:	00 d0       	rcall	.+0      	; 0xaf6 <nrf24l01_printinfo+0x2e>
     af6:	00 d0       	rcall	.+0      	; 0xaf8 <nrf24l01_printinfo+0x30>
     af8:	00 d0       	rcall	.+0      	; 0xafa <nrf24l01_printinfo+0x32>
     afa:	ed b7       	in	r30, 0x3d	; 61
     afc:	fe b7       	in	r31, 0x3e	; 62
     afe:	31 96       	adiw	r30, 0x01	; 1
     b00:	8e 01       	movw	r16, r28
     b02:	0f 5f       	subi	r16, 0xFF	; 255
     b04:	1f 4f       	sbci	r17, 0xFF	; 255
     b06:	ad b7       	in	r26, 0x3d	; 61
     b08:	be b7       	in	r27, 0x3e	; 62
     b0a:	12 96       	adiw	r26, 0x02	; 2
     b0c:	1c 93       	st	X, r17
     b0e:	0e 93       	st	-X, r16
     b10:	11 97       	sbiw	r26, 0x01	; 1
     b12:	26 e6       	ldi	r18, 0x66	; 102
     b14:	31 e0       	ldi	r19, 0x01	; 1
     b16:	33 83       	std	Z+3, r19	; 0x03
     b18:	22 83       	std	Z+2, r18	; 0x02
     b1a:	84 83       	std	Z+4, r24	; 0x04
     b1c:	15 82       	std	Z+5, r1	; 0x05
     b1e:	0e 94 8a 19 	call	0x3314	; 0x3314 <sprintf>
     b22:	8d b7       	in	r24, 0x3d	; 61
     b24:	9e b7       	in	r25, 0x3e	; 62
     b26:	06 96       	adiw	r24, 0x06	; 6
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	f8 94       	cli
     b2c:	9e bf       	out	0x3e, r25	; 62
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	8d bf       	out	0x3d, r24	; 61
     b32:	c8 01       	movw	r24, r16
     b34:	f7 01       	movw	r30, r14
     b36:	09 95       	icall
	sprintf(buff,"CONFIG: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_CONFIG)); prints(buff);
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	0e 94 08 04 	call	0x810	; 0x810 <nrf24l01_readregister>
     b3e:	00 d0       	rcall	.+0      	; 0xb40 <nrf24l01_printinfo+0x78>
     b40:	00 d0       	rcall	.+0      	; 0xb42 <nrf24l01_printinfo+0x7a>
     b42:	00 d0       	rcall	.+0      	; 0xb44 <nrf24l01_printinfo+0x7c>
     b44:	ed b7       	in	r30, 0x3d	; 61
     b46:	fe b7       	in	r31, 0x3e	; 62
     b48:	31 96       	adiw	r30, 0x01	; 1
     b4a:	ad b7       	in	r26, 0x3d	; 61
     b4c:	be b7       	in	r27, 0x3e	; 62
     b4e:	12 96       	adiw	r26, 0x02	; 2
     b50:	1c 93       	st	X, r17
     b52:	0e 93       	st	-X, r16
     b54:	11 97       	sbiw	r26, 0x01	; 1
     b56:	25 e7       	ldi	r18, 0x75	; 117
     b58:	31 e0       	ldi	r19, 0x01	; 1
     b5a:	33 83       	std	Z+3, r19	; 0x03
     b5c:	22 83       	std	Z+2, r18	; 0x02
     b5e:	84 83       	std	Z+4, r24	; 0x04
     b60:	15 82       	std	Z+5, r1	; 0x05
     b62:	0e 94 8a 19 	call	0x3314	; 0x3314 <sprintf>
     b66:	8d b7       	in	r24, 0x3d	; 61
     b68:	9e b7       	in	r25, 0x3e	; 62
     b6a:	06 96       	adiw	r24, 0x06	; 6
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	f8 94       	cli
     b70:	9e bf       	out	0x3e, r25	; 62
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	8d bf       	out	0x3d, r24	; 61
     b76:	c8 01       	movw	r24, r16
     b78:	f7 01       	movw	r30, r14
     b7a:	09 95       	icall
	sprintf(buff,"RF_CH: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_CH)); prints(buff);
     b7c:	85 e0       	ldi	r24, 0x05	; 5
     b7e:	0e 94 08 04 	call	0x810	; 0x810 <nrf24l01_readregister>
     b82:	00 d0       	rcall	.+0      	; 0xb84 <nrf24l01_printinfo+0xbc>
     b84:	00 d0       	rcall	.+0      	; 0xb86 <nrf24l01_printinfo+0xbe>
     b86:	00 d0       	rcall	.+0      	; 0xb88 <nrf24l01_printinfo+0xc0>
     b88:	ed b7       	in	r30, 0x3d	; 61
     b8a:	fe b7       	in	r31, 0x3e	; 62
     b8c:	31 96       	adiw	r30, 0x01	; 1
     b8e:	ad b7       	in	r26, 0x3d	; 61
     b90:	be b7       	in	r27, 0x3e	; 62
     b92:	12 96       	adiw	r26, 0x02	; 2
     b94:	1c 93       	st	X, r17
     b96:	0e 93       	st	-X, r16
     b98:	11 97       	sbiw	r26, 0x01	; 1
     b9a:	24 e8       	ldi	r18, 0x84	; 132
     b9c:	31 e0       	ldi	r19, 0x01	; 1
     b9e:	33 83       	std	Z+3, r19	; 0x03
     ba0:	22 83       	std	Z+2, r18	; 0x02
     ba2:	84 83       	std	Z+4, r24	; 0x04
     ba4:	15 82       	std	Z+5, r1	; 0x05
     ba6:	0e 94 8a 19 	call	0x3314	; 0x3314 <sprintf>
     baa:	8d b7       	in	r24, 0x3d	; 61
     bac:	9e b7       	in	r25, 0x3e	; 62
     bae:	06 96       	adiw	r24, 0x06	; 6
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	9e bf       	out	0x3e, r25	; 62
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	8d bf       	out	0x3d, r24	; 61
     bba:	c8 01       	movw	r24, r16
     bbc:	f7 01       	movw	r30, r14
     bbe:	09 95       	icall
	sprintf(buff,"RF_SETUP: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_SETUP)); prints(buff);
     bc0:	86 e0       	ldi	r24, 0x06	; 6
     bc2:	0e 94 08 04 	call	0x810	; 0x810 <nrf24l01_readregister>
     bc6:	00 d0       	rcall	.+0      	; 0xbc8 <nrf24l01_printinfo+0x100>
     bc8:	00 d0       	rcall	.+0      	; 0xbca <nrf24l01_printinfo+0x102>
     bca:	00 d0       	rcall	.+0      	; 0xbcc <nrf24l01_printinfo+0x104>
     bcc:	ed b7       	in	r30, 0x3d	; 61
     bce:	fe b7       	in	r31, 0x3e	; 62
     bd0:	31 96       	adiw	r30, 0x01	; 1
     bd2:	ad b7       	in	r26, 0x3d	; 61
     bd4:	be b7       	in	r27, 0x3e	; 62
     bd6:	12 96       	adiw	r26, 0x02	; 2
     bd8:	1c 93       	st	X, r17
     bda:	0e 93       	st	-X, r16
     bdc:	11 97       	sbiw	r26, 0x01	; 1
     bde:	22 e9       	ldi	r18, 0x92	; 146
     be0:	31 e0       	ldi	r19, 0x01	; 1
     be2:	33 83       	std	Z+3, r19	; 0x03
     be4:	22 83       	std	Z+2, r18	; 0x02
     be6:	84 83       	std	Z+4, r24	; 0x04
     be8:	15 82       	std	Z+5, r1	; 0x05
     bea:	0e 94 8a 19 	call	0x3314	; 0x3314 <sprintf>
     bee:	8d b7       	in	r24, 0x3d	; 61
     bf0:	9e b7       	in	r25, 0x3e	; 62
     bf2:	06 96       	adiw	r24, 0x06	; 6
     bf4:	0f b6       	in	r0, 0x3f	; 63
     bf6:	f8 94       	cli
     bf8:	9e bf       	out	0x3e, r25	; 62
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	8d bf       	out	0x3d, r24	; 61
     bfe:	c8 01       	movw	r24, r16
     c00:	f7 01       	movw	r30, r14
     c02:	09 95       	icall
	sprintf(buff,"EN_AA: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_AA)); prints(buff);
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	0e 94 08 04 	call	0x810	; 0x810 <nrf24l01_readregister>
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <nrf24l01_printinfo+0x144>
     c0c:	00 d0       	rcall	.+0      	; 0xc0e <nrf24l01_printinfo+0x146>
     c0e:	00 d0       	rcall	.+0      	; 0xc10 <nrf24l01_printinfo+0x148>
     c10:	ed b7       	in	r30, 0x3d	; 61
     c12:	fe b7       	in	r31, 0x3e	; 62
     c14:	31 96       	adiw	r30, 0x01	; 1
     c16:	ad b7       	in	r26, 0x3d	; 61
     c18:	be b7       	in	r27, 0x3e	; 62
     c1a:	12 96       	adiw	r26, 0x02	; 2
     c1c:	1c 93       	st	X, r17
     c1e:	0e 93       	st	-X, r16
     c20:	11 97       	sbiw	r26, 0x01	; 1
     c22:	23 ea       	ldi	r18, 0xA3	; 163
     c24:	31 e0       	ldi	r19, 0x01	; 1
     c26:	33 83       	std	Z+3, r19	; 0x03
     c28:	22 83       	std	Z+2, r18	; 0x02
     c2a:	84 83       	std	Z+4, r24	; 0x04
     c2c:	15 82       	std	Z+5, r1	; 0x05
     c2e:	0e 94 8a 19 	call	0x3314	; 0x3314 <sprintf>
     c32:	8d b7       	in	r24, 0x3d	; 61
     c34:	9e b7       	in	r25, 0x3e	; 62
     c36:	06 96       	adiw	r24, 0x06	; 6
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	f8 94       	cli
     c3c:	9e bf       	out	0x3e, r25	; 62
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	8d bf       	out	0x3d, r24	; 61
     c42:	c8 01       	movw	r24, r16
     c44:	f7 01       	movw	r30, r14
     c46:	09 95       	icall
	sprintf(buff,"EN_RXADDR: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_RXADDR)); prints(buff);
     c48:	82 e0       	ldi	r24, 0x02	; 2
     c4a:	0e 94 08 04 	call	0x810	; 0x810 <nrf24l01_readregister>
     c4e:	00 d0       	rcall	.+0      	; 0xc50 <nrf24l01_printinfo+0x188>
     c50:	00 d0       	rcall	.+0      	; 0xc52 <nrf24l01_printinfo+0x18a>
     c52:	00 d0       	rcall	.+0      	; 0xc54 <nrf24l01_printinfo+0x18c>
     c54:	ed b7       	in	r30, 0x3d	; 61
     c56:	fe b7       	in	r31, 0x3e	; 62
     c58:	31 96       	adiw	r30, 0x01	; 1
     c5a:	ad b7       	in	r26, 0x3d	; 61
     c5c:	be b7       	in	r27, 0x3e	; 62
     c5e:	12 96       	adiw	r26, 0x02	; 2
     c60:	1c 93       	st	X, r17
     c62:	0e 93       	st	-X, r16
     c64:	11 97       	sbiw	r26, 0x01	; 1
     c66:	21 eb       	ldi	r18, 0xB1	; 177
     c68:	31 e0       	ldi	r19, 0x01	; 1
     c6a:	33 83       	std	Z+3, r19	; 0x03
     c6c:	22 83       	std	Z+2, r18	; 0x02
     c6e:	84 83       	std	Z+4, r24	; 0x04
     c70:	15 82       	std	Z+5, r1	; 0x05
     c72:	0e 94 8a 19 	call	0x3314	; 0x3314 <sprintf>
     c76:	8d b7       	in	r24, 0x3d	; 61
     c78:	9e b7       	in	r25, 0x3e	; 62
     c7a:	06 96       	adiw	r24, 0x06	; 6
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	9e bf       	out	0x3e, r25	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	8d bf       	out	0x3d, r24	; 61
     c86:	c8 01       	movw	r24, r16
     c88:	f7 01       	movw	r30, r14
     c8a:	09 95       	icall
	sprintf(buff,"OBSERVE_TX: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_OBSERVE_TX)); prints(buff);
     c8c:	88 e0       	ldi	r24, 0x08	; 8
     c8e:	0e 94 08 04 	call	0x810	; 0x810 <nrf24l01_readregister>
     c92:	00 d0       	rcall	.+0      	; 0xc94 <nrf24l01_printinfo+0x1cc>
     c94:	00 d0       	rcall	.+0      	; 0xc96 <nrf24l01_printinfo+0x1ce>
     c96:	00 d0       	rcall	.+0      	; 0xc98 <nrf24l01_printinfo+0x1d0>
     c98:	ed b7       	in	r30, 0x3d	; 61
     c9a:	fe b7       	in	r31, 0x3e	; 62
     c9c:	31 96       	adiw	r30, 0x01	; 1
     c9e:	ad b7       	in	r26, 0x3d	; 61
     ca0:	be b7       	in	r27, 0x3e	; 62
     ca2:	12 96       	adiw	r26, 0x02	; 2
     ca4:	1c 93       	st	X, r17
     ca6:	0e 93       	st	-X, r16
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	23 ec       	ldi	r18, 0xC3	; 195
     cac:	31 e0       	ldi	r19, 0x01	; 1
     cae:	33 83       	std	Z+3, r19	; 0x03
     cb0:	22 83       	std	Z+2, r18	; 0x02
     cb2:	84 83       	std	Z+4, r24	; 0x04
     cb4:	15 82       	std	Z+5, r1	; 0x05
     cb6:	0e 94 8a 19 	call	0x3314	; 0x3314 <sprintf>
     cba:	8d b7       	in	r24, 0x3d	; 61
     cbc:	9e b7       	in	r25, 0x3e	; 62
     cbe:	06 96       	adiw	r24, 0x06	; 6
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	f8 94       	cli
     cc4:	9e bf       	out	0x3e, r25	; 62
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	8d bf       	out	0x3d, r24	; 61
     cca:	c8 01       	movw	r24, r16
     ccc:	f7 01       	movw	r30, r14
     cce:	09 95       	icall
	prints("\r\n");
     cd0:	86 ed       	ldi	r24, 0xD6	; 214
     cd2:	91 e0       	ldi	r25, 0x01	; 1
     cd4:	f7 01       	movw	r30, r14
     cd6:	09 95       	icall
}
     cd8:	cc 59       	subi	r28, 0x9C	; 156
     cda:	df 4f       	sbci	r29, 0xFF	; 255
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	1f 91       	pop	r17
     cec:	0f 91       	pop	r16
     cee:	ff 90       	pop	r15
     cf0:	ef 90       	pop	r14
     cf2:	08 95       	ret

00000cf4 <nrf24l01_readready>:
}

/*
 * check if there is data ready
 */
uint8_t nrf24l01_readready(uint8_t* pipe) {
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	ec 01       	movw	r28, r24
    uint8_t status = nrf24l01_getstatus();
     cfa:	0e 94 5e 05 	call	0xabc	; 0xabc <nrf24l01_getstatus>
    uint8_t ret = status & (1<<NRF24L01_REG_RX_DR);
    if(ret) {
     cfe:	98 2f       	mov	r25, r24
     d00:	90 74       	andi	r25, 0x40	; 64
     d02:	86 ff       	sbrs	r24, 6
     d04:	05 c0       	rjmp	.+10     	; 0xd10 <nrf24l01_readready+0x1c>
		//get the pipe number
		if(pipe)
     d06:	20 97       	sbiw	r28, 0x00	; 0
     d08:	19 f0       	breq	.+6      	; 0xd10 <nrf24l01_readready+0x1c>
			*pipe = (status >> NRF24L01_REG_RX_P_NO) & 0b111;
     d0a:	86 95       	lsr	r24
     d0c:	87 70       	andi	r24, 0x07	; 7
     d0e:	88 83       	st	Y, r24
    }
    return ret;
}
     d10:	89 2f       	mov	r24, r25
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	08 95       	ret

00000d18 <nrf24l01_read>:

/*
 * get data
 */
void nrf24l01_read(uint8_t pipe,uint8_t *data) {
     d18:	0f 93       	push	r16
     d1a:	1f 93       	push	r17
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	06 2f       	mov	r16, r22
     d22:	17 2f       	mov	r17, r23
	uint8_t i = 0;
	//read rx register
	nrf24l01_CSNlo; //low CSN
     d24:	ae 98       	cbi	0x15, 6	; 21
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
     d26:	81 e6       	ldi	r24, 0x61	; 97
     d28:	0e 94 23 17 	call	0x2e46	; 0x2e46 <spi_writereadbyte>
     d2c:	c0 2f       	mov	r28, r16
     d2e:	d1 2f       	mov	r29, r17
	//Thay doi lai command, lay PAYLOAD va write ACK
	//spi_writereadbyte(NRF24L01_CMD_W_ACK_PAYLOAD | pipe);
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     d30:	10 e0       	ldi	r17, 0x00	; 0
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
     d32:	8f ef       	ldi	r24, 0xFF	; 255
     d34:	0e 94 23 17 	call	0x2e46	; 0x2e46 <spi_writereadbyte>
     d38:	89 93       	st	Y+, r24
	//read rx register
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
	//Thay doi lai command, lay PAYLOAD va write ACK
	//spi_writereadbyte(NRF24L01_CMD_W_ACK_PAYLOAD | pipe);
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     d3a:	1f 5f       	subi	r17, 0xFF	; 255
     d3c:	19 30       	cpi	r17, 0x09	; 9
     d3e:	c9 f7       	brne	.-14     	; 0xd32 <nrf24l01_read+0x1a>
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
    nrf24l01_CSNhi; //high CSN
     d40:	ae 9a       	sbi	0x15, 6	; 21
    //reset register
    nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR));
     d42:	87 e0       	ldi	r24, 0x07	; 7
     d44:	60 e4       	ldi	r22, 0x40	; 64
     d46:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
    //handle ack payload receipt
	if (nrf24l01_getstatus() & (1<<NRF24L01_REG_TX_DS))
     d4a:	0e 94 5e 05 	call	0xabc	; 0xabc <nrf24l01_getstatus>
     d4e:	85 ff       	sbrs	r24, 5
     d50:	04 c0       	rjmp	.+8      	; 0xd5a <nrf24l01_read+0x42>
		nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_TX_DS));
     d52:	87 e0       	ldi	r24, 0x07	; 7
     d54:	60 e2       	ldi	r22, 0x20	; 32
     d56:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
}
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	1f 91       	pop	r17
     d60:	0f 91       	pop	r16
     d62:	08 95       	ret

00000d64 <nrf24l01_write>:

/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
     d64:	0f 93       	push	r16
     d66:	1f 93       	push	r17
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	08 2f       	mov	r16, r24
     d6e:	19 2f       	mov	r17, r25
	uint8_t i = 0;
	uint8_t ret = 0;

	//set tx mode
	nrf24l01_setTX();
     d70:	0e 94 43 05 	call	0xa86	; 0xa86 <nrf24l01_setTX>

	//write data
	nrf24l01_CSNlo; //low CSN
     d74:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
     d76:	80 ea       	ldi	r24, 0xA0	; 160
     d78:	0e 94 23 17 	call	0x2e46	; 0x2e46 <spi_writereadbyte>
     d7c:	c0 2f       	mov	r28, r16
     d7e:	d1 2f       	mov	r29, r17
     d80:	19 e0       	ldi	r17, 0x09	; 9
	for (i=0; i<NRF24L01_PAYLOAD; i++)
		spi_writereadbyte(data[i]);
     d82:	89 91       	ld	r24, Y+
     d84:	0e 94 23 17 	call	0x2e46	; 0x2e46 <spi_writereadbyte>
     d88:	11 50       	subi	r17, 0x01	; 1
	nrf24l01_setTX();

	//write data
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
	for (i=0; i<NRF24L01_PAYLOAD; i++)
     d8a:	d9 f7       	brne	.-10     	; 0xd82 <nrf24l01_write+0x1e>
		spi_writereadbyte(data[i]);
	nrf24l01_CSNhi; //high CSN
     d8c:	ae 9a       	sbi	0x15, 6	; 21

	//start transmission
	nrf24l01_CEhi; //high CE
     d8e:	af 9a       	sbi	0x15, 7	; 21
     d90:	85 e0       	ldi	r24, 0x05	; 5
     d92:	8a 95       	dec	r24
     d94:	f1 f7       	brne	.-4      	; 0xd92 <nrf24l01_write+0x2e>
	_delay_us(15);
	nrf24l01_CElo; //low CE
     d96:	af 98       	cbi	0x15, 7	; 21
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	8a 95       	dec	r24
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <nrf24l01_write+0x36>
     d9e:	00 00       	nop

	//stop if max_retries reached or send is ok
	do {
		_delay_us(10);
	}
	while( !(nrf24l01_getstatus() & (1<<NRF24L01_REG_MAX_RT | 1<<NRF24L01_REG_TX_DS)) );
     da0:	0e 94 5e 05 	call	0xabc	; 0xabc <nrf24l01_getstatus>
     da4:	80 73       	andi	r24, 0x30	; 48
     da6:	c1 f3       	breq	.-16     	; 0xd98 <nrf24l01_write+0x34>

	if(nrf24l01_getstatus() & 1<<NRF24L01_REG_TX_DS)
     da8:	0e 94 5e 05 	call	0xabc	; 0xabc <nrf24l01_getstatus>
     dac:	c8 2f       	mov	r28, r24
		ret = 1;

	//reset PLOS_CNT
	nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH);
     dae:	85 e0       	ldi	r24, 0x05	; 5
     db0:	6c e4       	ldi	r22, 0x4C	; 76
     db2:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>

	//power down
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PWR_UP));
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	0e 94 08 04 	call	0x810	; 0x810 <nrf24l01_readregister>
     dbc:	68 2f       	mov	r22, r24
     dbe:	6d 7f       	andi	r22, 0xFD	; 253
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>

	//set rx mode
	nrf24l01_setRX();
     dc6:	0e 94 21 05 	call	0xa42	; 0xa42 <nrf24l01_setRX>
/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
	uint8_t i = 0;
	uint8_t ret = 0;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	c5 ff       	sbrs	r28, 5
     dce:	80 e0       	ldi	r24, 0x00	; 0

	//set rx mode
	nrf24l01_setRX();

	return ret;
}
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	1f 91       	pop	r17
     dd6:	0f 91       	pop	r16
     dd8:	08 95       	ret

00000dda <nrf24l01_setpalevel>:

/*
 * set power level
 */
void nrf24l01_setpalevel() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP);
     dda:	86 e0       	ldi	r24, 0x06	; 6
     ddc:	0e 94 08 04 	call	0x810	; 0x810 <nrf24l01_readregister>
  setup &= ~((1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH));

  if (NRF24L01_RF24_PA == NRF24L01_RF24_PA_MAX) {
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
     de0:	68 2f       	mov	r22, r24
     de2:	66 60       	ori	r22, 0x06	; 6
  } else {
	  //default is max power
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     de4:	86 e0       	ldi	r24, 0x06	; 6
     de6:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
}
     dea:	08 95       	ret

00000dec <nrf24l01_setdatarate>:

/*
 * set datarate
 */
void nrf24l01_setdatarate() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP) ;
     dec:	86 e0       	ldi	r24, 0x06	; 6
     dee:	0e 94 08 04 	call	0x810	; 0x810 <nrf24l01_readregister>

  setup &= ~((1<<NRF24L01_REG_RF_DR_LOW) | (1<<NRF24L01_REG_RF_DR_HIGH));
     df2:	68 2f       	mov	r22, r24
     df4:	67 7d       	andi	r22, 0xD7	; 215
    } else {
    	//default is 1Mbps
    }
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     df6:	86 e0       	ldi	r24, 0x06	; 6
     df8:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
}
     dfc:	08 95       	ret

00000dfe <nrf24l01_setcrclength>:

/*
 * set crc length
 */
void nrf24l01_setcrclength() {
  uint8_t config = nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~((1<<NRF24L01_REG_CRCO) | (1<<NRF24L01_REG_EN_CRC));
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	0e 94 08 04 	call	0x810	; 0x810 <nrf24l01_readregister>
	  //nothing
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_8) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_16) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
	  config |= (1<<NRF24L01_REG_CRCO);
     e04:	68 2f       	mov	r22, r24
     e06:	6c 60       	ori	r22, 0x0C	; 12
  } else {
	  //default is disabled
  }

  nrf24l01_writeregister(NRF24L01_REG_CONFIG, config);
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
}
     e0e:	08 95       	ret

00000e10 <nrf24l01_init>:
/*
 * init nrf24l01
 */
void nrf24l01_init() {
	//setup port
	NRF24L01_DDR |= (1<<NRF24L01_CSN); //output
     e10:	a6 9a       	sbi	0x14, 6	; 20
	NRF24L01_DDR |= (1<<NRF24L01_CE); //output
     e12:	a7 9a       	sbi	0x14, 7	; 20

    spi_init(); //init spi
     e14:	0e 94 18 17 	call	0x2e30	; 0x2e30 <spi_init>

    nrf24l01_CElo; //low CE
     e18:	af 98       	cbi	0x15, 7	; 21
    nrf24l01_CSNhi; //high CSN
     e1a:	ae 9a       	sbi	0x15, 6	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e1c:	81 ee       	ldi	r24, 0xE1	; 225
     e1e:	94 e0       	ldi	r25, 0x04	; 4
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	f1 f7       	brne	.-4      	; 0xe20 <nrf24l01_init+0x10>
     e24:	00 c0       	rjmp	.+0      	; 0xe26 <nrf24l01_init+0x16>
     e26:	00 00       	nop

    _delay_ms(5); //wait for the radio to init

    nrf24l01_setpalevel(); //set power level
     e28:	0e 94 ed 06 	call	0xdda	; 0xdda <nrf24l01_setpalevel>
    nrf24l01_setdatarate(); //set data rate
     e2c:	0e 94 f6 06 	call	0xdec	; 0xdec <nrf24l01_setdatarate>
    nrf24l01_setcrclength(); //set crc length
     e30:	0e 94 ff 06 	call	0xdfe	; 0xdfe <nrf24l01_setcrclength>
    nrf24l01_writeregister(NRF24L01_REG_SETUP_RETR, NRF24L01_RETR); // set retries
     e34:	84 e0       	ldi	r24, 0x04	; 4
     e36:	67 e4       	ldi	r22, 0x47	; 71
     e38:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_DYNPD, 0); //disable dynamic payloads
     e3c:	8c e1       	ldi	r24, 0x1C	; 28
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH); //set RF channel
     e44:	85 e0       	ldi	r24, 0x05	; 5
     e46:	6c e4       	ldi	r22, 0x4C	; 76
     e48:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>

	//payload size
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P0, NRF24L01_PAYLOAD);
     e4c:	81 e1       	ldi	r24, 0x11	; 17
     e4e:	69 e0       	ldi	r22, 0x09	; 9
     e50:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P1, NRF24L01_PAYLOAD);
     e54:	82 e1       	ldi	r24, 0x12	; 18
     e56:	69 e0       	ldi	r22, 0x09	; 9
     e58:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P2, NRF24L01_PAYLOAD);
     e5c:	83 e1       	ldi	r24, 0x13	; 19
     e5e:	69 e0       	ldi	r22, 0x09	; 9
     e60:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P3, NRF24L01_PAYLOAD);
     e64:	84 e1       	ldi	r24, 0x14	; 20
     e66:	69 e0       	ldi	r22, 0x09	; 9
     e68:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P4, NRF24L01_PAYLOAD);
     e6c:	85 e1       	ldi	r24, 0x15	; 21
     e6e:	69 e0       	ldi	r22, 0x09	; 9
     e70:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P5, NRF24L01_PAYLOAD);
     e74:	86 e1       	ldi	r24, 0x16	; 22
     e76:	69 e0       	ldi	r22, 0x09	; 9
     e78:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
	#endif

	//enable pipe
	nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, 0);
     e7c:	82 e0       	ldi	r24, 0x02	; 2
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P0));
     e84:	82 e0       	ldi	r24, 0x02	; 2
     e86:	0e 94 08 04 	call	0x810	; 0x810 <nrf24l01_readregister>
     e8a:	68 2f       	mov	r22, r24
     e8c:	61 60       	ori	r22, 0x01	; 1
     e8e:	82 e0       	ldi	r24, 0x02	; 2
     e90:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P1));
     e94:	82 e0       	ldi	r24, 0x02	; 2
     e96:	0e 94 08 04 	call	0x810	; 0x810 <nrf24l01_readregister>
     e9a:	68 2f       	mov	r22, r24
     e9c:	62 60       	ori	r22, 0x02	; 2
     e9e:	82 e0       	ldi	r24, 0x02	; 2
     ea0:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P2));
     ea4:	82 e0       	ldi	r24, 0x02	; 2
     ea6:	0e 94 08 04 	call	0x810	; 0x810 <nrf24l01_readregister>
     eaa:	68 2f       	mov	r22, r24
     eac:	64 60       	ori	r22, 0x04	; 4
     eae:	82 e0       	ldi	r24, 0x02	; 2
     eb0:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P3));
     eb4:	82 e0       	ldi	r24, 0x02	; 2
     eb6:	0e 94 08 04 	call	0x810	; 0x810 <nrf24l01_readregister>
     eba:	68 2f       	mov	r22, r24
     ebc:	68 60       	ori	r22, 0x08	; 8
     ebe:	82 e0       	ldi	r24, 0x02	; 2
     ec0:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P4));
     ec4:	82 e0       	ldi	r24, 0x02	; 2
     ec6:	0e 94 08 04 	call	0x810	; 0x810 <nrf24l01_readregister>
     eca:	68 2f       	mov	r22, r24
     ecc:	60 61       	ori	r22, 0x10	; 16
     ece:	82 e0       	ldi	r24, 0x02	; 2
     ed0:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P5));
     ed4:	82 e0       	ldi	r24, 0x02	; 2
     ed6:	0e 94 08 04 	call	0x810	; 0x810 <nrf24l01_readregister>
     eda:	68 2f       	mov	r22, r24
     edc:	60 62       	ori	r22, 0x20	; 32
     ede:	82 e0       	ldi	r24, 0x02	; 2
     ee0:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
	#endif

	//auto ack
	#if NRF24L01_ACK == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P0));
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	0e 94 08 04 	call	0x810	; 0x810 <nrf24l01_readregister>
     eea:	68 2f       	mov	r22, r24
     eec:	61 60       	ori	r22, 0x01	; 1
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P1));
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	0e 94 08 04 	call	0x810	; 0x810 <nrf24l01_readregister>
     efa:	68 2f       	mov	r22, r24
     efc:	62 60       	ori	r22, 0x02	; 2
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P2));
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	0e 94 08 04 	call	0x810	; 0x810 <nrf24l01_readregister>
     f0a:	68 2f       	mov	r22, r24
     f0c:	64 60       	ori	r22, 0x04	; 4
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P3));
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	0e 94 08 04 	call	0x810	; 0x810 <nrf24l01_readregister>
     f1a:	68 2f       	mov	r22, r24
     f1c:	68 60       	ori	r22, 0x08	; 8
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P4));
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	0e 94 08 04 	call	0x810	; 0x810 <nrf24l01_readregister>
     f2a:	68 2f       	mov	r22, r24
     f2c:	60 61       	ori	r22, 0x10	; 16
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P5));
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	0e 94 08 04 	call	0x810	; 0x810 <nrf24l01_readregister>
     f3a:	68 2f       	mov	r22, r24
     f3c:	60 62       	ori	r22, 0x20	; 32
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P4));
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P5));
	#endif

	//rx address
	nrf24l01_setrxaddr(0, nrf24l01_addr0);
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	69 ed       	ldi	r22, 0xD9	; 217
     f48:	71 e0       	ldi	r23, 0x01	; 1
     f4a:	0e 94 6d 04 	call	0x8da	; 0x8da <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(1, nrf24l01_addr1);
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	6e ed       	ldi	r22, 0xDE	; 222
     f52:	71 e0       	ldi	r23, 0x01	; 1
     f54:	0e 94 6d 04 	call	0x8da	; 0x8da <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(2, nrf24l01_addr2);
     f58:	82 e0       	ldi	r24, 0x02	; 2
     f5a:	63 ee       	ldi	r22, 0xE3	; 227
     f5c:	71 e0       	ldi	r23, 0x01	; 1
     f5e:	0e 94 6d 04 	call	0x8da	; 0x8da <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(3, nrf24l01_addr3);
     f62:	83 e0       	ldi	r24, 0x03	; 3
     f64:	68 ee       	ldi	r22, 0xE8	; 232
     f66:	71 e0       	ldi	r23, 0x01	; 1
     f68:	0e 94 6d 04 	call	0x8da	; 0x8da <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(4, nrf24l01_addr4);
     f6c:	84 e0       	ldi	r24, 0x04	; 4
     f6e:	6d ee       	ldi	r22, 0xED	; 237
     f70:	71 e0       	ldi	r23, 0x01	; 1
     f72:	0e 94 6d 04 	call	0x8da	; 0x8da <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(5, nrf24l01_addr5);
     f76:	85 e0       	ldi	r24, 0x05	; 5
     f78:	62 ef       	ldi	r22, 0xF2	; 242
     f7a:	71 e0       	ldi	r23, 0x01	; 1
     f7c:	0e 94 6d 04 	call	0x8da	; 0x8da <nrf24l01_setrxaddr>

	//tx address
	nrf24l01_settxaddr(nrf24l01_addrtx);
     f80:	87 ef       	ldi	r24, 0xF7	; 247
     f82:	91 e0       	ldi	r25, 0x01	; 1
     f84:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <nrf24l01_settxaddr>

	//set rx mode
	nrf24l01_setRX();
     f88:	0e 94 21 05 	call	0xa42	; 0xa42 <nrf24l01_setRX>
}
     f8c:	08 95       	ret

00000f8e <sMO_init>:
static void clearInEvents(SMO* handle);
static void clearOutEvents(SMO* handle);


void sMO_init(SMO* handle)
{
     f8e:	fc 01       	movw	r30, r24
	int i;

	for (i = 0; i < SMO_MAX_ORTHOGONAL_STATES; ++i)
		handle->stateConfVector[i] = SMO_last_state;
     f90:	82 e2       	ldi	r24, 0x22	; 34
     f92:	80 83       	st	Z, r24
     f94:	81 83       	std	Z+1, r24	; 0x01
	
	
	handle->stateConfVectorPosition = 0;
     f96:	13 82       	std	Z+3, r1	; 0x03
     f98:	12 82       	std	Z+2, r1	; 0x02

	// TODO: initialize all events ...
	// TODO: initialize all variables ... (set default values - here or inenter sequence ?!?)

}
     f9a:	08 95       	ret

00000f9c <sMO_enter>:

void sMO_enter(SMO* handle)
{
     f9c:	1f 93       	push	r17
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	ec 01       	movw	r28, r24
	sMO_entryaction(handle);
	/* Default enter sequence for region main region */
	/* Default react sequence for initial entry  */
	/* Default enter sequence for state on */
	/* Entry action for state 'on'. */
	handle->iface.lightOn = bool_true;
     fa4:	11 e0       	ldi	r17, 0x01	; 1
     fa6:	19 ab       	sts	0x59, r17
	/* Default enter sequence for region r1 */
	/* Default react sequence for initial entry  */
	/* Default enter sequence for state Init */
	/* Entry action for state 'Init'. */
	sMO_setTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) , 3 * 1000, bool_false);
     fa8:	cc 96       	adiw	r24, 0x3c	; 60
     faa:	48 eb       	ldi	r20, 0xB8	; 184
     fac:	5b e0       	ldi	r21, 0x0B	; 11
     fae:	60 e0       	ldi	r22, 0x00	; 0
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	0e 94 b1 03 	call	0x762	; 0x762 <sMO_setTimer>
	handle->iface.tableId = 1;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	a0 e0       	ldi	r26, 0x00	; 0
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	8e ab       	sts	0x5e, r24
     fc2:	9f ab       	sts	0x5f, r25
     fc4:	a8 af       	sts	0x78, r26
     fc6:	b9 af       	sts	0x79, r27
	sMOIfaceLCD_init();
     fc8:	0e 94 83 02 	call	0x506	; 0x506 <sMOIfaceLCD_init>
	sMOIfaceKEYPAD_init();
     fcc:	0e 94 44 02 	call	0x488	; 0x488 <sMOIfaceKEYPAD_init>
	sMOIfaceRF_init();
     fd0:	0e 94 b7 03 	call	0x76e	; 0x76e <sMOIfaceRF_init>
	sMOIfaceLCD_clear();
     fd4:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <sMOIfaceLCD_clear>
	sMOIfaceLCD_writeString("Waitting...");
     fd8:	8c ef       	ldi	r24, 0xFC	; 252
     fda:	91 e0       	ldi	r25, 0x01	; 1
     fdc:	0e 94 47 02 	call	0x48e	; 0x48e <sMOIfaceLCD_writeString>
	handle->stateConfVector[0] = SMO_main_region_on_r1_Init;
     fe0:	18 83       	st	Y, r17
	handle->stateConfVectorPosition = 0;
     fe2:	1b 82       	std	Y+3, r1	; 0x03
     fe4:	1a 82       	std	Y+2, r1	; 0x02
}
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	1f 91       	pop	r17
     fec:	08 95       	ret

00000fee <sMO_exit>:

void sMO_exit(SMO* handle)
{
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	ec 01       	movw	r28, r24
	/* Default exit sequence for statechart SMO */
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of main region) at position 0... */
	switch(handle->stateConfVector[ 0 ]) {
     ff4:	88 81       	ld	r24, Y
     ff6:	83 30       	cpi	r24, 0x03	; 3
     ff8:	69 f0       	breq	.+26     	; 0x1014 <sMO_exit+0x26>
     ffa:	84 30       	cpi	r24, 0x04	; 4
     ffc:	81 f0       	breq	.+32     	; 0x101e <sMO_exit+0x30>
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	91 f4       	brne	.+36     	; 0x1026 <sMO_exit+0x38>
		case SMO_main_region_on_r1_Init : {
			/* Default exit sequence for state Init */
			handle->stateConfVector[0] = SMO_last_state;
    1002:	82 e2       	ldi	r24, 0x22	; 34
    1004:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    1006:	1b 82       	std	Y+3, r1	; 0x03
    1008:	1a 82       	std	Y+2, r1	; 0x02
			/* Exit action for state 'Init'. */
			sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) );		
    100a:	ce 01       	movw	r24, r28
    100c:	cc 96       	adiw	r24, 0x3c	; 60
    100e:	0e 94 b4 03 	call	0x768	; 0x768 <sMO_unsetTimer>
			break;
    1012:	09 c0       	rjmp	.+18     	; 0x1026 <sMO_exit+0x38>
		}
		case SMO_main_region_on_r1_Running_keypad_CheckKey : {
			/* Default exit sequence for state CheckKey */
			handle->stateConfVector[0] = SMO_last_state;
    1014:	82 e2       	ldi	r24, 0x22	; 34
    1016:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    1018:	1b 82       	std	Y+3, r1	; 0x03
    101a:	1a 82       	std	Y+2, r1	; 0x02
			break;
    101c:	04 c0       	rjmp	.+8      	; 0x1026 <sMO_exit+0x38>
		}
		case SMO_main_region_on_r1_Running_keypad_CheckKeyDown : {
			/* Default exit sequence for state CheckKeyDown */
			handle->stateConfVector[0] = SMO_last_state;
    101e:	82 e2       	ldi	r24, 0x22	; 34
    1020:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    1022:	1b 82       	std	Y+3, r1	; 0x03
    1024:	1a 82       	std	Y+2, r1	; 0x02
			break;
		}
		default: break;
	}
	/* Handle exit of all possible states (of main region) at position 1... */
	switch(handle->stateConfVector[ 1 ]) {
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	05 97       	sbiw	r24, 0x05	; 5
    102c:	8d 31       	cpi	r24, 0x1D	; 29
    102e:	91 05       	cpc	r25, r1
    1030:	08 f0       	brcs	.+2      	; 0x1034 <sMO_exit+0x46>
    1032:	b4 c0       	rjmp	.+360    	; 0x119c <__stack+0x9d>
    1034:	8a 5b       	subi	r24, 0xBA	; 186
    1036:	9f 4f       	sbci	r25, 0xFF	; 255
    1038:	fc 01       	movw	r30, r24
    103a:	ee 0f       	add	r30, r30
    103c:	ff 1f       	adc	r31, r31
    103e:	05 90       	lpm	r0, Z+
    1040:	f4 91       	lpm	r31, Z
    1042:	e0 2d       	mov	r30, r0
    1044:	09 94       	ijmp
		case SMO_main_region_on_r1_Running_running_main_ShowMenu : {
			/* Default exit sequence for state ShowMenu */
			handle->stateConfVector[1] = SMO_last_state;
    1046:	82 e2       	ldi	r24, 0x22	; 34
    1048:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	9b 83       	std	Y+3, r25	; 0x03
    1050:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1052:	a4 c0       	rjmp	.+328    	; 0x119c <__stack+0x9d>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
			/* Default exit sequence for state ShowCode */
			handle->stateConfVector[1] = SMO_last_state;
    1054:	82 e2       	ldi	r24, 0x22	; 34
    1056:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	9b 83       	std	Y+3, r25	; 0x03
    105e:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1060:	9d c0       	rjmp	.+314    	; 0x119c <__stack+0x9d>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
			/* Default exit sequence for state EnterCode */
			handle->stateConfVector[1] = SMO_last_state;
    1062:	82 e2       	ldi	r24, 0x22	; 34
    1064:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	9b 83       	std	Y+3, r25	; 0x03
    106c:	8a 83       	std	Y+2, r24	; 0x02
			break;
    106e:	96 c0       	rjmp	.+300    	; 0x119c <__stack+0x9d>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
			/* Default exit sequence for state CheckKeyPress1 */
			handle->stateConfVector[1] = SMO_last_state;
    1070:	82 e2       	ldi	r24, 0x22	; 34
    1072:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	9b 83       	std	Y+3, r25	; 0x03
    107a:	8a 83       	std	Y+2, r24	; 0x02
			break;
    107c:	8f c0       	rjmp	.+286    	; 0x119c <__stack+0x9d>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
			/* Default exit sequence for state CheckCode0 */
			handle->stateConfVector[1] = SMO_last_state;
    107e:	82 e2       	ldi	r24, 0x22	; 34
    1080:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	9b 83       	std	Y+3, r25	; 0x03
    1088:	8a 83       	std	Y+2, r24	; 0x02
			break;
    108a:	88 c0       	rjmp	.+272    	; 0x119c <__stack+0x9d>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
			/* Default exit sequence for state ShowAmount */
			handle->stateConfVector[1] = SMO_last_state;
    108c:	82 e2       	ldi	r24, 0x22	; 34
    108e:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	9b 83       	std	Y+3, r25	; 0x03
    1096:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1098:	81 c0       	rjmp	.+258    	; 0x119c <__stack+0x9d>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
			/* Default exit sequence for state CheckKeyPress2 */
			handle->stateConfVector[1] = SMO_last_state;
    109a:	82 e2       	ldi	r24, 0x22	; 34
    109c:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	9b 83       	std	Y+3, r25	; 0x03
    10a4:	8a 83       	std	Y+2, r24	; 0x02
			break;
    10a6:	7a c0       	rjmp	.+244    	; 0x119c <__stack+0x9d>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
			/* Default exit sequence for state EnterAmount */
			handle->stateConfVector[1] = SMO_last_state;
    10a8:	82 e2       	ldi	r24, 0x22	; 34
    10aa:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	9b 83       	std	Y+3, r25	; 0x03
    10b2:	8a 83       	std	Y+2, r24	; 0x02
			break;
    10b4:	73 c0       	rjmp	.+230    	; 0x119c <__stack+0x9d>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
			/* Default exit sequence for final state. */
			handle->stateConfVector[1] = SMO_last_state;
    10b6:	82 e2       	ldi	r24, 0x22	; 34
    10b8:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	9b 83       	std	Y+3, r25	; 0x03
    10c0:	8a 83       	std	Y+2, r24	; 0x02
			break;
    10c2:	6c c0       	rjmp	.+216    	; 0x119c <__stack+0x9d>
		}
		case SMO_main_region_on_r1_Running_running_main_MenuA : {
			/* Default exit sequence for state MenuA */
			handle->stateConfVector[1] = SMO_last_state;
    10c4:	82 e2       	ldi	r24, 0x22	; 34
    10c6:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	9b 83       	std	Y+3, r25	; 0x03
    10ce:	8a 83       	std	Y+2, r24	; 0x02
			break;
    10d0:	65 c0       	rjmp	.+202    	; 0x119c <__stack+0x9d>
		}
		case SMO_main_region_on_r1_Running_running_main_CheckKeyPress : {
			/* Default exit sequence for state CheckKeyPress */
			handle->stateConfVector[1] = SMO_last_state;
    10d2:	82 e2       	ldi	r24, 0x22	; 34
    10d4:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	9b 83       	std	Y+3, r25	; 0x03
    10dc:	8a 83       	std	Y+2, r24	; 0x02
			break;
    10de:	5e c0       	rjmp	.+188    	; 0x119c <__stack+0x9d>
		}
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
			/* Default exit sequence for state Send */
			handle->stateConfVector[1] = SMO_last_state;
    10e0:	82 e2       	ldi	r24, 0x22	; 34
    10e2:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	9b 83       	std	Y+3, r25	; 0x03
    10ea:	8a 83       	std	Y+2, r24	; 0x02
			break;
    10ec:	57 c0       	rjmp	.+174    	; 0x119c <__stack+0x9d>
		}
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
			/* Default exit sequence for state Check */
			handle->stateConfVector[1] = SMO_last_state;
    10ee:	82 e2       	ldi	r24, 0x22	; 34
    10f0:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	9b 83       	std	Y+3, r25	; 0x03
    10f8:	8a 83       	std	Y+2, r24	; 0x02
			break;
    10fa:	50 c0       	rjmp	.+160    	; 0x119c <__stack+0x9d>
		}
		case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
			/* Default exit sequence for final state. */
			handle->stateConfVector[1] = SMO_last_state;
    10fc:	82 e2       	ldi	r24, 0x22	; 34
    10fe:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	9b 83       	std	Y+3, r25	; 0x03
    1106:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1108:	49 c0       	rjmp	.+146    	; 0x119c <__stack+0x9d>
		}
		case SMO_main_region_on_r1_Running_running_main_MenuB : {
			/* Default exit sequence for state MenuB */
			handle->stateConfVector[1] = SMO_last_state;
    110a:	82 e2       	ldi	r24, 0x22	; 34
    110c:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	9b 83       	std	Y+3, r25	; 0x03
    1114:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1116:	42 c0       	rjmp	.+132    	; 0x119c <__stack+0x9d>
		}
		case SMO_main_region_on_r1_Running_running_main_MenuC : {
			/* Default exit sequence for state MenuC */
			handle->stateConfVector[1] = SMO_last_state;
    1118:	82 e2       	ldi	r24, 0x22	; 34
    111a:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	9b 83       	std	Y+3, r25	; 0x03
    1122:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1124:	3b c0       	rjmp	.+118    	; 0x119c <__stack+0x9d>
		}
		case SMO_main_region_on_r1_Running_running_main_MenuD : {
			/* Default exit sequence for state MenuD */
			handle->stateConfVector[1] = SMO_last_state;
    1126:	82 e2       	ldi	r24, 0x22	; 34
    1128:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	9b 83       	std	Y+3, r25	; 0x03
    1130:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1132:	34 c0       	rjmp	.+104    	; 0x119c <__stack+0x9d>
		}
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_RequestConfirmation : {
			/* Default exit sequence for state RequestConfirmation */
			handle->stateConfVector[1] = SMO_last_state;
    1134:	82 e2       	ldi	r24, 0x22	; 34
    1136:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	9b 83       	std	Y+3, r25	; 0x03
    113e:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1140:	2d c0       	rjmp	.+90     	; 0x119c <__stack+0x9d>
		}
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_EnterConfirmation : {
			/* Default exit sequence for state EnterConfirmation */
			handle->stateConfVector[1] = SMO_last_state;
    1142:	82 e2       	ldi	r24, 0x22	; 34
    1144:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	9b 83       	std	Y+3, r25	; 0x03
    114c:	8a 83       	std	Y+2, r24	; 0x02
			/* Exit action for state 'EnterConfirmation'. */
			sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.EnterConfirmation_time_event_0_raised) );		
    114e:	ce 01       	movw	r24, r28
    1150:	cd 96       	adiw	r24, 0x3d	; 61
    1152:	0e 94 b4 03 	call	0x768	; 0x768 <sMO_unsetTimer>
			break;
    1156:	22 c0       	rjmp	.+68     	; 0x119c <__stack+0x9d>
		}
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_CheckKeyPress : {
			/* Default exit sequence for state CheckKeyPress */
			handle->stateConfVector[1] = SMO_last_state;
    1158:	82 e2       	ldi	r24, 0x22	; 34
    115a:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	9b 83       	std	Y+3, r25	; 0x03
    1162:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1164:	1b c0       	rjmp	.+54     	; 0x119c <__stack+0x9d>
		}
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_ : {
			/* Default exit sequence for final state. */
			handle->stateConfVector[1] = SMO_last_state;
    1166:	82 e2       	ldi	r24, 0x22	; 34
    1168:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	9b 83       	std	Y+3, r25	; 0x03
    1170:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1172:	14 c0       	rjmp	.+40     	; 0x119c <__stack+0x9d>
		}
		case SMO_main_region_on_r1_Running_running_main_SendConfirm_r1_SendConfirmation : {
			/* Default exit sequence for state SendConfirmation */
			handle->stateConfVector[1] = SMO_last_state;
    1174:	82 e2       	ldi	r24, 0x22	; 34
    1176:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	9b 83       	std	Y+3, r25	; 0x03
    117e:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1180:	0d c0       	rjmp	.+26     	; 0x119c <__stack+0x9d>
		}
		case SMO_main_region_on_r1_Running_running_main_SendConfirm_r1_Check : {
			/* Default exit sequence for state Check */
			handle->stateConfVector[1] = SMO_last_state;
    1182:	82 e2       	ldi	r24, 0x22	; 34
    1184:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	9b 83       	std	Y+3, r25	; 0x03
    118c:	8a 83       	std	Y+2, r24	; 0x02
			break;
    118e:	06 c0       	rjmp	.+12     	; 0x119c <__stack+0x9d>
		}
		case SMO_main_region_on_r1_Running_running_main_SendConfirm_r1__final_ : {
			/* Default exit sequence for final state. */
			handle->stateConfVector[1] = SMO_last_state;
    1190:	82 e2       	ldi	r24, 0x22	; 34
    1192:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	9b 83       	std	Y+3, r25	; 0x03
    119a:	8a 83       	std	Y+2, r24	; 0x02
			break;
		}
		default: break;
	}
	sMO_exitaction(handle);
}
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	08 95       	ret

000011a2 <sMO_runCycle>:
}

static void clearOutEvents(SMO* handle) {
}

void sMO_runCycle(SMO* handle) {
    11a2:	2f 92       	push	r2
    11a4:	3f 92       	push	r3
    11a6:	4f 92       	push	r4
    11a8:	5f 92       	push	r5
    11aa:	6f 92       	push	r6
    11ac:	7f 92       	push	r7
    11ae:	8f 92       	push	r8
    11b0:	9f 92       	push	r9
    11b2:	af 92       	push	r10
    11b4:	bf 92       	push	r11
    11b6:	cf 92       	push	r12
    11b8:	df 92       	push	r13
    11ba:	ef 92       	push	r14
    11bc:	ff 92       	push	r15
    11be:	0f 93       	push	r16
    11c0:	1f 93       	push	r17
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	ec 01       	movw	r28, r24
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
    11c8:	1b 82       	std	Y+3, r1	; 0x03
    11ca:	1a 82       	std	Y+2, r1	; 0x02
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	90 e0       	ldi	r25, 0x00	; 0
				/* Default enter sequence for region r1 */
			}  else {
				if (handle->ifaceKEYPAD.lastkey == 2 || handle->ifaceKEYPAD.lastkey == 1 && handle->ifaceKEYPAD.key_pressed_raised) { 
					/* Default exit sequence for state CheckKeyPress */
					handle->stateConfVector[1] = SMO_last_state;
					handle->stateConfVectorPosition = 1;
    11d0:	01 e0       	ldi	r16, 0x01	; 1
    11d2:	10 e0       	ldi	r17, 0x00	; 0
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
			/* Default enter sequence for state CheckKeyPress */
			/* Entry action for state 'CheckKeyPress'. */
			handle->ifaceKEYPAD.lastkey = 0;
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendRequest_r1_CheckKeyPress;
    11d4:	0f 2e       	mov	r0, r31
    11d6:	fc e1       	ldi	r31, 0x1C	; 28
    11d8:	2f 2e       	mov	r2, r31
    11da:	f0 2d       	mov	r31, r0
					/* Default exit sequence for state CheckKeyPress */
					handle->stateConfVector[1] = SMO_last_state;
					handle->stateConfVectorPosition = 1;
					/* Default enter sequence for state MenuD */
					/* Entry action for state 'MenuD'. */
					handle->iface.menuId = 4;
    11dc:	cc 24       	eor	r12, r12
    11de:	dd 24       	eor	r13, r13
    11e0:	76 01       	movw	r14, r12
    11e2:	68 94       	set
    11e4:	c2 f8       	bld	r12, 2
			/* Default exit sequence for state CheckKeyPress */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
			/* Default enter sequence for state MenuB */
			/* Entry action for state 'MenuB'. */
			handle->iface.menuId = 2;
    11e6:	88 24       	eor	r8, r8
    11e8:	99 24       	eor	r9, r9
    11ea:	54 01       	movw	r10, r8
    11ec:	68 94       	set
    11ee:	81 f8       	bld	r8, 1
		/* Default exit sequence for state CheckKeyPress */
		handle->stateConfVector[1] = SMO_last_state;
		handle->stateConfVectorPosition = 1;
		/* Default enter sequence for state MenuA */
		/* Entry action for state 'MenuA'. */
		handle->iface.menuId = 1;
    11f0:	44 24       	eor	r4, r4
    11f2:	55 24       	eor	r5, r5
    11f4:	32 01       	movw	r6, r4
    11f6:	43 94       	inc	r4
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
			/* Default enter sequence for state CheckKeyPress2 */
			/* Entry action for state 'CheckKeyPress2'. */
			handle->ifaceKEYPAD.lastkey = 0;
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2;
    11f8:	0f 2e       	mov	r0, r31
    11fa:	fc e0       	ldi	r31, 0x0C	; 12
    11fc:	3f 2e       	mov	r3, r31
    11fe:	f0 2d       	mov	r31, r0
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
			
		switch (handle->stateConfVector[handle->stateConfVectorPosition]) {
    1200:	8c 0f       	add	r24, r28
    1202:	9d 1f       	adc	r25, r29
    1204:	dc 01       	movw	r26, r24
    1206:	ec 91       	ld	r30, X
    1208:	8e 2f       	mov	r24, r30
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	fc 01       	movw	r30, r24
    120e:	31 97       	sbiw	r30, 0x01	; 1
    1210:	e1 32       	cpi	r30, 0x21	; 33
    1212:	f1 05       	cpc	r31, r1
    1214:	10 f0       	brcs	.+4      	; 0x121a <sMO_runCycle+0x78>
    1216:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <sMO_runCycle+0x1830>
    121a:	ed 59       	subi	r30, 0x9D	; 157
    121c:	ff 4f       	sbci	r31, 0xFF	; 255
    121e:	ee 0f       	add	r30, r30
    1220:	ff 1f       	adc	r31, r31
    1222:	05 90       	lpm	r0, Z+
    1224:	f4 91       	lpm	r31, Z
    1226:	e0 2d       	mov	r30, r0
    1228:	09 94       	ijmp
}

/* The reactions of state Init. */
static void sMO_react_main_region_on_r1_Init(SMO* handle) {
	/* The reactions of state Init. */
	if (handle->timeEvents.Init_time_event_0_raised) { 
    122a:	8c ad       	sts	0x6c, r24
    122c:	88 23       	and	r24, r24
    122e:	11 f4       	brne	.+4      	; 0x1234 <sMO_runCycle+0x92>
    1230:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <sMO_runCycle+0x1830>
		/* Default exit sequence for state Init */
		handle->stateConfVector[0] = SMO_last_state;
    1234:	82 e2       	ldi	r24, 0x22	; 34
    1236:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    1238:	1b 82       	std	Y+3, r1	; 0x03
    123a:	1a 82       	std	Y+2, r1	; 0x02
		/* Exit action for state 'Init'. */
		sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) );		
    123c:	ce 01       	movw	r24, r28
    123e:	cc 96       	adiw	r24, 0x3c	; 60
    1240:	0e 94 b4 03 	call	0x768	; 0x768 <sMO_unsetTimer>
		/* Default enter sequence for state Running */
		/* Default enter sequence for region keypad */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    1244:	0e 94 3d 02 	call	0x47a	; 0x47a <sMOIfaceKEYPAD_checkpress>
    1248:	dc 01       	movw	r26, r24
    124a:	cb 01       	movw	r24, r22
    124c:	8c 83       	std	Y+4, r24	; 0x04
    124e:	9d 83       	std	Y+5, r25	; 0x05
    1250:	ae 83       	std	Y+6, r26	; 0x06
    1252:	bf 83       	std	Y+7, r27	; 0x07
		handle->ifaceKEYPAD.key_down = bool_false;
    1254:	1c 86       	std	Y+12, r1	; 0x0c
		handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKey;
    1256:	83 e0       	ldi	r24, 0x03	; 3
    1258:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    125a:	1b 82       	std	Y+3, r1	; 0x03
    125c:	1a 82       	std	Y+2, r1	; 0x02
		/* Default enter sequence for region running main */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    125e:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1262:	88 e0       	ldi	r24, 0x08	; 8
    1264:	92 e0       	ldi	r25, 0x02	; 2
    1266:	0e 94 47 02 	call	0x48e	; 0x48e <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-WT  D-PAY", 0, 1);
    126a:	86 e1       	ldi	r24, 0x16	; 22
    126c:	92 e0       	ldi	r25, 0x02	; 2
    126e:	40 e0       	ldi	r20, 0x00	; 0
    1270:	50 e0       	ldi	r21, 0x00	; 0
    1272:	ba 01       	movw	r22, r20
    1274:	01 e0       	ldi	r16, 0x01	; 1
    1276:	10 e0       	ldi	r17, 0x00	; 0
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	0e 94 4a 02 	call	0x494	; 0x494 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1280:	1a aa       	sts	0x9a, r17
    1282:	1b aa       	sts	0x9b, r17
    1284:	1c aa       	sts	0x9c, r17
    1286:	1d aa       	sts	0x9d, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1288:	85 e0       	ldi	r24, 0x05	; 5
    128a:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	9b 83       	std	Y+3, r25	; 0x03
    1292:	8a 83       	std	Y+2, r24	; 0x02
    1294:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <sMO_runCycle+0x1874>
}

/* The reactions of state CheckKey. */
static void sMO_react_main_region_on_r1_Running_keypad_CheckKey(SMO* handle) {
	/* The reactions of state CheckKey. */
	if (handle->ifaceKEYPAD.key != 0) { 
    1298:	8c 81       	ldd	r24, Y+4	; 0x04
    129a:	9d 81       	ldd	r25, Y+5	; 0x05
    129c:	ae 81       	ldd	r26, Y+6	; 0x06
    129e:	bf 81       	ldd	r27, Y+7	; 0x07
    12a0:	00 97       	sbiw	r24, 0x00	; 0
    12a2:	a1 05       	cpc	r26, r1
    12a4:	b1 05       	cpc	r27, r1
    12a6:	c1 f0       	breq	.+48     	; 0x12d8 <sMO_runCycle+0x136>
		/* Default exit sequence for state CheckKey */
		handle->stateConfVector[0] = SMO_last_state;
    12a8:	22 e2       	ldi	r18, 0x22	; 34
    12aa:	28 83       	st	Y, r18
		handle->stateConfVectorPosition = 0;
    12ac:	1b 82       	std	Y+3, r1	; 0x03
    12ae:	1a 82       	std	Y+2, r1	; 0x02
		handle->ifaceKEYPAD.lastkey = handle->ifaceKEYPAD.key;
    12b0:	88 87       	std	Y+8, r24	; 0x08
    12b2:	99 87       	std	Y+9, r25	; 0x09
    12b4:	aa 87       	std	Y+10, r26	; 0x0a
    12b6:	bb 87       	std	Y+11, r27	; 0x0b
		/* Default enter sequence for state CheckKeyDown */
		/* Entry action for state 'CheckKeyDown'. */
		handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    12b8:	0e 94 3d 02 	call	0x47a	; 0x47a <sMOIfaceKEYPAD_checkpress>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	8c 83       	std	Y+4, r24	; 0x04
    12c2:	9d 83       	std	Y+5, r25	; 0x05
    12c4:	ae 83       	std	Y+6, r26	; 0x06
    12c6:	bf 83       	std	Y+7, r27	; 0x07
		handle->ifaceKEYPAD.key_down = bool_true;
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	8c 87       	std	Y+12, r24	; 0x0c
		handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKeyDown;
    12cc:	84 e0       	ldi	r24, 0x04	; 4
    12ce:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    12d0:	1b 82       	std	Y+3, r1	; 0x03
    12d2:	1a 82       	std	Y+2, r1	; 0x02
    12d4:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <sMO_runCycle+0x1880>
	}  else {
		if (handle->ifaceKEYPAD.key == 0) { 
			/* Default enter sequence for state CheckKey */
			/* Entry action for state 'CheckKey'. */
			handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    12d8:	0e 94 3d 02 	call	0x47a	; 0x47a <sMOIfaceKEYPAD_checkpress>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	8c 83       	std	Y+4, r24	; 0x04
    12e2:	9d 83       	std	Y+5, r25	; 0x05
    12e4:	ae 83       	std	Y+6, r26	; 0x06
    12e6:	bf 83       	std	Y+7, r27	; 0x07
			handle->ifaceKEYPAD.key_down = bool_false;
    12e8:	1c 86       	std	Y+12, r1	; 0x0c
			handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKey;
    12ea:	83 e0       	ldi	r24, 0x03	; 3
    12ec:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    12ee:	1b 82       	std	Y+3, r1	; 0x03
    12f0:	1a 82       	std	Y+2, r1	; 0x02
    12f2:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <sMO_runCycle+0x1880>
}

/* The reactions of state CheckKeyDown. */
static void sMO_react_main_region_on_r1_Running_keypad_CheckKeyDown(SMO* handle) {
	/* The reactions of state CheckKeyDown. */
	if (handle->ifaceKEYPAD.key == 0) { 
    12f6:	8c 81       	ldd	r24, Y+4	; 0x04
    12f8:	9d 81       	ldd	r25, Y+5	; 0x05
    12fa:	ae 81       	ldd	r26, Y+6	; 0x06
    12fc:	bf 81       	ldd	r27, Y+7	; 0x07
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	a1 05       	cpc	r26, r1
    1302:	b1 05       	cpc	r27, r1
    1304:	a9 f4       	brne	.+42     	; 0x1330 <sMO_runCycle+0x18e>
		/* Default exit sequence for state CheckKeyDown */
		handle->stateConfVector[0] = SMO_last_state;
    1306:	82 e2       	ldi	r24, 0x22	; 34
    1308:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    130a:	1b 82       	std	Y+3, r1	; 0x03
    130c:	1a 82       	std	Y+2, r1	; 0x02
		handle->ifaceKEYPAD.key_pressed_raised = bool_true;
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	8d 87       	std	Y+13, r24	; 0x0d
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    1312:	0e 94 3d 02 	call	0x47a	; 0x47a <sMOIfaceKEYPAD_checkpress>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	8c 83       	std	Y+4, r24	; 0x04
    131c:	9d 83       	std	Y+5, r25	; 0x05
    131e:	ae 83       	std	Y+6, r26	; 0x06
    1320:	bf 83       	std	Y+7, r27	; 0x07
		handle->ifaceKEYPAD.key_down = bool_false;
    1322:	1c 86       	std	Y+12, r1	; 0x0c
		handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKey;
    1324:	83 e0       	ldi	r24, 0x03	; 3
    1326:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    1328:	1b 82       	std	Y+3, r1	; 0x03
    132a:	1a 82       	std	Y+2, r1	; 0x02
    132c:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <sMO_runCycle+0x1880>
	}  else {
		if (handle->ifaceKEYPAD.key != 0) { 
			/* Default enter sequence for state CheckKeyDown */
			/* Entry action for state 'CheckKeyDown'. */
			handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    1330:	0e 94 3d 02 	call	0x47a	; 0x47a <sMOIfaceKEYPAD_checkpress>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	8c 83       	std	Y+4, r24	; 0x04
    133a:	9d 83       	std	Y+5, r25	; 0x05
    133c:	ae 83       	std	Y+6, r26	; 0x06
    133e:	bf 83       	std	Y+7, r27	; 0x07
			handle->ifaceKEYPAD.key_down = bool_true;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	8c 87       	std	Y+12, r24	; 0x0c
			handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKeyDown;
    1344:	84 e0       	ldi	r24, 0x04	; 4
    1346:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    1348:	1b 82       	std	Y+3, r1	; 0x03
    134a:	1a 82       	std	Y+2, r1	; 0x02
    134c:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <sMO_runCycle+0x1880>
static void sMO_react_main_region_on_r1_Running_running_main_ShowMenu(SMO* handle) {
	/* The reactions of state ShowMenu. */
	if (bool_true) { 
		/* Default exit sequence for state ShowMenu */
		handle->stateConfVector[1] = SMO_last_state;
		handle->stateConfVectorPosition = 1;
    1350:	1b 83       	std	Y+3, r17	; 0x03
    1352:	0a 83       	std	Y+2, r16	; 0x02
		/* Default enter sequence for state CheckKeyPress */
		/* Entry action for state 'CheckKeyPress'. */
		handle->ifaceKEYPAD.lastkey = 0;
    1354:	18 86       	std	Y+8, r1	; 0x08
    1356:	19 86       	std	Y+9, r1	; 0x09
    1358:	1a 86       	std	Y+10, r1	; 0x0a
    135a:	1b 86       	std	Y+11, r1	; 0x0b
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_CheckKeyPress;
    135c:	81 e1       	ldi	r24, 0x11	; 17
    135e:	89 83       	std	Y+1, r24	; 0x01
    1360:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <sMO_runCycle+0x1830>
}

/* The reactions of state ShowCode. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode(SMO* handle) {
	/* The reactions of state ShowCode. */
	if (handle->iface.menuId == 0) { 
    1364:	8a a9       	sts	0x4a, r24
    1366:	9b a9       	sts	0x4b, r25
    1368:	ac a9       	sts	0x4c, r26
    136a:	bd a9       	sts	0x4d, r27
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	a1 05       	cpc	r26, r1
    1370:	b1 05       	cpc	r27, r1
    1372:	09 f0       	breq	.+2      	; 0x1376 <sMO_runCycle+0x1d4>
    1374:	6a c0       	rjmp	.+212    	; 0x144a <sMO_runCycle+0x2a8>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	8a 30       	cpi	r24, 0x0A	; 10
    137a:	41 f1       	breq	.+80     	; 0x13cc <sMO_runCycle+0x22a>
    137c:	8b 30       	cpi	r24, 0x0B	; 11
    137e:	40 f4       	brcc	.+16     	; 0x1390 <sMO_runCycle+0x1ee>
    1380:	88 30       	cpi	r24, 0x08	; 8
    1382:	b1 f0       	breq	.+44     	; 0x13b0 <sMO_runCycle+0x20e>
    1384:	89 30       	cpi	r24, 0x09	; 9
    1386:	d8 f4       	brcc	.+54     	; 0x13be <sMO_runCycle+0x21c>
    1388:	87 30       	cpi	r24, 0x07	; 7
    138a:	09 f0       	breq	.+2      	; 0x138e <sMO_runCycle+0x1ec>
    138c:	41 c0       	rjmp	.+130    	; 0x1410 <sMO_runCycle+0x26e>
    138e:	09 c0       	rjmp	.+18     	; 0x13a2 <sMO_runCycle+0x200>
    1390:	8c 30       	cpi	r24, 0x0C	; 12
    1392:	51 f1       	breq	.+84     	; 0x13e8 <sMO_runCycle+0x246>
    1394:	8c 30       	cpi	r24, 0x0C	; 12
    1396:	08 f1       	brcs	.+66     	; 0x13da <sMO_runCycle+0x238>
    1398:	8e 30       	cpi	r24, 0x0E	; 14
    139a:	69 f1       	breq	.+90     	; 0x13f6 <sMO_runCycle+0x254>
    139c:	8f 30       	cpi	r24, 0x0F	; 15
    139e:	c1 f5       	brne	.+112    	; 0x1410 <sMO_runCycle+0x26e>
    13a0:	31 c0       	rjmp	.+98     	; 0x1404 <sMO_runCycle+0x262>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    13a2:	82 e2       	ldi	r24, 0x22	; 34
    13a4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	9b 83       	std	Y+3, r25	; 0x03
    13ac:	8a 83       	std	Y+2, r24	; 0x02
    13ae:	30 c0       	rjmp	.+96     	; 0x1410 <sMO_runCycle+0x26e>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    13b0:	82 e2       	ldi	r24, 0x22	; 34
    13b2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	9b 83       	std	Y+3, r25	; 0x03
    13ba:	8a 83       	std	Y+2, r24	; 0x02
    13bc:	29 c0       	rjmp	.+82     	; 0x1410 <sMO_runCycle+0x26e>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    13be:	82 e2       	ldi	r24, 0x22	; 34
    13c0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	9b 83       	std	Y+3, r25	; 0x03
    13c8:	8a 83       	std	Y+2, r24	; 0x02
    13ca:	22 c0       	rjmp	.+68     	; 0x1410 <sMO_runCycle+0x26e>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    13cc:	82 e2       	ldi	r24, 0x22	; 34
    13ce:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	9b 83       	std	Y+3, r25	; 0x03
    13d6:	8a 83       	std	Y+2, r24	; 0x02
    13d8:	1b c0       	rjmp	.+54     	; 0x1410 <sMO_runCycle+0x26e>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    13da:	82 e2       	ldi	r24, 0x22	; 34
    13dc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	9b 83       	std	Y+3, r25	; 0x03
    13e4:	8a 83       	std	Y+2, r24	; 0x02
    13e6:	14 c0       	rjmp	.+40     	; 0x1410 <sMO_runCycle+0x26e>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    13e8:	82 e2       	ldi	r24, 0x22	; 34
    13ea:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	9b 83       	std	Y+3, r25	; 0x03
    13f2:	8a 83       	std	Y+2, r24	; 0x02
    13f4:	0d c0       	rjmp	.+26     	; 0x1410 <sMO_runCycle+0x26e>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    13f6:	82 e2       	ldi	r24, 0x22	; 34
    13f8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	9b 83       	std	Y+3, r25	; 0x03
    1400:	8a 83       	std	Y+2, r24	; 0x02
    1402:	06 c0       	rjmp	.+12     	; 0x1410 <sMO_runCycle+0x26e>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1404:	82 e2       	ldi	r24, 0x22	; 34
    1406:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	9b 83       	std	Y+3, r25	; 0x03
    140e:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1410:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1414:	88 e0       	ldi	r24, 0x08	; 8
    1416:	92 e0       	ldi	r25, 0x02	; 2
    1418:	0e 94 47 02 	call	0x48e	; 0x48e <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-WT  D-PAY", 0, 1);
    141c:	86 e1       	ldi	r24, 0x16	; 22
    141e:	92 e0       	ldi	r25, 0x02	; 2
    1420:	40 e0       	ldi	r20, 0x00	; 0
    1422:	50 e0       	ldi	r21, 0x00	; 0
    1424:	ba 01       	movw	r22, r20
    1426:	01 e0       	ldi	r16, 0x01	; 1
    1428:	10 e0       	ldi	r17, 0x00	; 0
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	0e 94 4a 02 	call	0x494	; 0x494 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1432:	1a aa       	sts	0x9a, r17
    1434:	1b aa       	sts	0x9b, r17
    1436:	1c aa       	sts	0x9c, r17
    1438:	1d aa       	sts	0x9d, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    143a:	85 e0       	ldi	r24, 0x05	; 5
    143c:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	9b 83       	std	Y+3, r25	; 0x03
    1444:	8a 83       	std	Y+2, r24	; 0x02
    1446:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <sMO_runCycle+0x1874>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state ShowCode */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    144a:	1b 83       	std	Y+3, r17	; 0x03
    144c:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress1 */
			/* Entry action for state 'CheckKeyPress1'. */
			handle->ifaceKEYPAD.lastkey = 0;
    144e:	18 86       	std	Y+8, r1	; 0x08
    1450:	19 86       	std	Y+9, r1	; 0x09
    1452:	1a 86       	std	Y+10, r1	; 0x0a
    1454:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1;
    1456:	89 e0       	ldi	r24, 0x09	; 9
    1458:	89 83       	std	Y+1, r24	; 0x01
    145a:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <sMO_runCycle+0x1830>
}

/* The reactions of state EnterCode. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode(SMO* handle) {
	/* The reactions of state EnterCode. */
	if (handle->iface.menuId == 0) { 
    145e:	8a a9       	sts	0x4a, r24
    1460:	9b a9       	sts	0x4b, r25
    1462:	ac a9       	sts	0x4c, r26
    1464:	bd a9       	sts	0x4d, r27
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	a1 05       	cpc	r26, r1
    146a:	b1 05       	cpc	r27, r1
    146c:	09 f0       	breq	.+2      	; 0x1470 <sMO_runCycle+0x2ce>
    146e:	6a c0       	rjmp	.+212    	; 0x1544 <sMO_runCycle+0x3a2>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	8a 30       	cpi	r24, 0x0A	; 10
    1474:	41 f1       	breq	.+80     	; 0x14c6 <sMO_runCycle+0x324>
    1476:	8b 30       	cpi	r24, 0x0B	; 11
    1478:	40 f4       	brcc	.+16     	; 0x148a <sMO_runCycle+0x2e8>
    147a:	88 30       	cpi	r24, 0x08	; 8
    147c:	b1 f0       	breq	.+44     	; 0x14aa <sMO_runCycle+0x308>
    147e:	89 30       	cpi	r24, 0x09	; 9
    1480:	d8 f4       	brcc	.+54     	; 0x14b8 <sMO_runCycle+0x316>
    1482:	87 30       	cpi	r24, 0x07	; 7
    1484:	09 f0       	breq	.+2      	; 0x1488 <sMO_runCycle+0x2e6>
    1486:	41 c0       	rjmp	.+130    	; 0x150a <sMO_runCycle+0x368>
    1488:	09 c0       	rjmp	.+18     	; 0x149c <sMO_runCycle+0x2fa>
    148a:	8c 30       	cpi	r24, 0x0C	; 12
    148c:	51 f1       	breq	.+84     	; 0x14e2 <sMO_runCycle+0x340>
    148e:	8c 30       	cpi	r24, 0x0C	; 12
    1490:	08 f1       	brcs	.+66     	; 0x14d4 <sMO_runCycle+0x332>
    1492:	8e 30       	cpi	r24, 0x0E	; 14
    1494:	69 f1       	breq	.+90     	; 0x14f0 <sMO_runCycle+0x34e>
    1496:	8f 30       	cpi	r24, 0x0F	; 15
    1498:	c1 f5       	brne	.+112    	; 0x150a <sMO_runCycle+0x368>
    149a:	31 c0       	rjmp	.+98     	; 0x14fe <sMO_runCycle+0x35c>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    149c:	82 e2       	ldi	r24, 0x22	; 34
    149e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	9b 83       	std	Y+3, r25	; 0x03
    14a6:	8a 83       	std	Y+2, r24	; 0x02
    14a8:	30 c0       	rjmp	.+96     	; 0x150a <sMO_runCycle+0x368>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    14aa:	82 e2       	ldi	r24, 0x22	; 34
    14ac:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	9b 83       	std	Y+3, r25	; 0x03
    14b4:	8a 83       	std	Y+2, r24	; 0x02
    14b6:	29 c0       	rjmp	.+82     	; 0x150a <sMO_runCycle+0x368>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    14b8:	82 e2       	ldi	r24, 0x22	; 34
    14ba:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	9b 83       	std	Y+3, r25	; 0x03
    14c2:	8a 83       	std	Y+2, r24	; 0x02
    14c4:	22 c0       	rjmp	.+68     	; 0x150a <sMO_runCycle+0x368>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    14c6:	82 e2       	ldi	r24, 0x22	; 34
    14c8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	9b 83       	std	Y+3, r25	; 0x03
    14d0:	8a 83       	std	Y+2, r24	; 0x02
    14d2:	1b c0       	rjmp	.+54     	; 0x150a <sMO_runCycle+0x368>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    14d4:	82 e2       	ldi	r24, 0x22	; 34
    14d6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	9b 83       	std	Y+3, r25	; 0x03
    14de:	8a 83       	std	Y+2, r24	; 0x02
    14e0:	14 c0       	rjmp	.+40     	; 0x150a <sMO_runCycle+0x368>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    14e2:	82 e2       	ldi	r24, 0x22	; 34
    14e4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	9b 83       	std	Y+3, r25	; 0x03
    14ec:	8a 83       	std	Y+2, r24	; 0x02
    14ee:	0d c0       	rjmp	.+26     	; 0x150a <sMO_runCycle+0x368>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    14f0:	82 e2       	ldi	r24, 0x22	; 34
    14f2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	9b 83       	std	Y+3, r25	; 0x03
    14fa:	8a 83       	std	Y+2, r24	; 0x02
    14fc:	06 c0       	rjmp	.+12     	; 0x150a <sMO_runCycle+0x368>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    14fe:	82 e2       	ldi	r24, 0x22	; 34
    1500:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	9b 83       	std	Y+3, r25	; 0x03
    1508:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    150a:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    150e:	88 e0       	ldi	r24, 0x08	; 8
    1510:	92 e0       	ldi	r25, 0x02	; 2
    1512:	0e 94 47 02 	call	0x48e	; 0x48e <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-WT  D-PAY", 0, 1);
    1516:	86 e1       	ldi	r24, 0x16	; 22
    1518:	92 e0       	ldi	r25, 0x02	; 2
    151a:	40 e0       	ldi	r20, 0x00	; 0
    151c:	50 e0       	ldi	r21, 0x00	; 0
    151e:	ba 01       	movw	r22, r20
    1520:	01 e0       	ldi	r16, 0x01	; 1
    1522:	10 e0       	ldi	r17, 0x00	; 0
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	0e 94 4a 02 	call	0x494	; 0x494 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    152c:	1a aa       	sts	0x9a, r17
    152e:	1b aa       	sts	0x9b, r17
    1530:	1c aa       	sts	0x9c, r17
    1532:	1d aa       	sts	0x9d, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1534:	85 e0       	ldi	r24, 0x05	; 5
    1536:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	9b 83       	std	Y+3, r25	; 0x03
    153e:	8a 83       	std	Y+2, r24	; 0x02
    1540:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <sMO_runCycle+0x1874>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state EnterCode */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    1544:	1b 83       	std	Y+3, r17	; 0x03
    1546:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress1 */
			/* Entry action for state 'CheckKeyPress1'. */
			handle->ifaceKEYPAD.lastkey = 0;
    1548:	18 86       	std	Y+8, r1	; 0x08
    154a:	19 86       	std	Y+9, r1	; 0x09
    154c:	1a 86       	std	Y+10, r1	; 0x0a
    154e:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1;
    1550:	89 e0       	ldi	r24, 0x09	; 9
    1552:	89 83       	std	Y+1, r24	; 0x01
    1554:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <sMO_runCycle+0x1830>
}

/* The reactions of state CheckKeyPress1. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1(SMO* handle) {
	/* The reactions of state CheckKeyPress1. */
	if (handle->iface.menuId == 0) { 
    1558:	8a a9       	sts	0x4a, r24
    155a:	9b a9       	sts	0x4b, r25
    155c:	ac a9       	sts	0x4c, r26
    155e:	bd a9       	sts	0x4d, r27
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	a1 05       	cpc	r26, r1
    1564:	b1 05       	cpc	r27, r1
    1566:	09 f0       	breq	.+2      	; 0x156a <sMO_runCycle+0x3c8>
    1568:	6a c0       	rjmp	.+212    	; 0x163e <sMO_runCycle+0x49c>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	8a 30       	cpi	r24, 0x0A	; 10
    156e:	41 f1       	breq	.+80     	; 0x15c0 <sMO_runCycle+0x41e>
    1570:	8b 30       	cpi	r24, 0x0B	; 11
    1572:	40 f4       	brcc	.+16     	; 0x1584 <sMO_runCycle+0x3e2>
    1574:	88 30       	cpi	r24, 0x08	; 8
    1576:	b1 f0       	breq	.+44     	; 0x15a4 <sMO_runCycle+0x402>
    1578:	89 30       	cpi	r24, 0x09	; 9
    157a:	d8 f4       	brcc	.+54     	; 0x15b2 <sMO_runCycle+0x410>
    157c:	87 30       	cpi	r24, 0x07	; 7
    157e:	09 f0       	breq	.+2      	; 0x1582 <sMO_runCycle+0x3e0>
    1580:	41 c0       	rjmp	.+130    	; 0x1604 <sMO_runCycle+0x462>
    1582:	09 c0       	rjmp	.+18     	; 0x1596 <sMO_runCycle+0x3f4>
    1584:	8c 30       	cpi	r24, 0x0C	; 12
    1586:	51 f1       	breq	.+84     	; 0x15dc <sMO_runCycle+0x43a>
    1588:	8c 30       	cpi	r24, 0x0C	; 12
    158a:	08 f1       	brcs	.+66     	; 0x15ce <sMO_runCycle+0x42c>
    158c:	8e 30       	cpi	r24, 0x0E	; 14
    158e:	69 f1       	breq	.+90     	; 0x15ea <sMO_runCycle+0x448>
    1590:	8f 30       	cpi	r24, 0x0F	; 15
    1592:	c1 f5       	brne	.+112    	; 0x1604 <sMO_runCycle+0x462>
    1594:	31 c0       	rjmp	.+98     	; 0x15f8 <sMO_runCycle+0x456>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1596:	82 e2       	ldi	r24, 0x22	; 34
    1598:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	9b 83       	std	Y+3, r25	; 0x03
    15a0:	8a 83       	std	Y+2, r24	; 0x02
    15a2:	30 c0       	rjmp	.+96     	; 0x1604 <sMO_runCycle+0x462>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    15a4:	82 e2       	ldi	r24, 0x22	; 34
    15a6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	9b 83       	std	Y+3, r25	; 0x03
    15ae:	8a 83       	std	Y+2, r24	; 0x02
    15b0:	29 c0       	rjmp	.+82     	; 0x1604 <sMO_runCycle+0x462>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    15b2:	82 e2       	ldi	r24, 0x22	; 34
    15b4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	9b 83       	std	Y+3, r25	; 0x03
    15bc:	8a 83       	std	Y+2, r24	; 0x02
    15be:	22 c0       	rjmp	.+68     	; 0x1604 <sMO_runCycle+0x462>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    15c0:	82 e2       	ldi	r24, 0x22	; 34
    15c2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	9b 83       	std	Y+3, r25	; 0x03
    15ca:	8a 83       	std	Y+2, r24	; 0x02
    15cc:	1b c0       	rjmp	.+54     	; 0x1604 <sMO_runCycle+0x462>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    15ce:	82 e2       	ldi	r24, 0x22	; 34
    15d0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	9b 83       	std	Y+3, r25	; 0x03
    15d8:	8a 83       	std	Y+2, r24	; 0x02
    15da:	14 c0       	rjmp	.+40     	; 0x1604 <sMO_runCycle+0x462>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    15dc:	82 e2       	ldi	r24, 0x22	; 34
    15de:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	9b 83       	std	Y+3, r25	; 0x03
    15e6:	8a 83       	std	Y+2, r24	; 0x02
    15e8:	0d c0       	rjmp	.+26     	; 0x1604 <sMO_runCycle+0x462>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    15ea:	82 e2       	ldi	r24, 0x22	; 34
    15ec:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	9b 83       	std	Y+3, r25	; 0x03
    15f4:	8a 83       	std	Y+2, r24	; 0x02
    15f6:	06 c0       	rjmp	.+12     	; 0x1604 <sMO_runCycle+0x462>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    15f8:	82 e2       	ldi	r24, 0x22	; 34
    15fa:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	9b 83       	std	Y+3, r25	; 0x03
    1602:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1604:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1608:	88 e0       	ldi	r24, 0x08	; 8
    160a:	92 e0       	ldi	r25, 0x02	; 2
    160c:	0e 94 47 02 	call	0x48e	; 0x48e <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-WT  D-PAY", 0, 1);
    1610:	86 e1       	ldi	r24, 0x16	; 22
    1612:	92 e0       	ldi	r25, 0x02	; 2
    1614:	40 e0       	ldi	r20, 0x00	; 0
    1616:	50 e0       	ldi	r21, 0x00	; 0
    1618:	ba 01       	movw	r22, r20
    161a:	01 e0       	ldi	r16, 0x01	; 1
    161c:	10 e0       	ldi	r17, 0x00	; 0
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	0e 94 4a 02 	call	0x494	; 0x494 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1626:	1a aa       	sts	0x9a, r17
    1628:	1b aa       	sts	0x9b, r17
    162a:	1c aa       	sts	0x9c, r17
    162c:	1d aa       	sts	0x9d, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    162e:	85 e0       	ldi	r24, 0x05	; 5
    1630:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	9b 83       	std	Y+3, r25	; 0x03
    1638:	8a 83       	std	Y+2, r24	; 0x02
    163a:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <sMO_runCycle+0x1874>
	}  else {
		if (handle->ifaceDISH.pos < 3 && handle->ifaceKEYPAD.lastkey <= 9 && handle->ifaceKEYPAD.lastkey >= 1 && handle->ifaceKEYPAD.key_pressed_raised) { 
    163e:	89 a5       	lds	r24, 0x69
    1640:	9a a5       	lds	r25, 0x6a
    1642:	ab a5       	lds	r26, 0x6b
    1644:	bc a5       	lds	r27, 0x6c
    1646:	83 30       	cpi	r24, 0x03	; 3
    1648:	91 05       	cpc	r25, r1
    164a:	a1 05       	cpc	r26, r1
    164c:	b1 05       	cpc	r27, r1
    164e:	0c f0       	brlt	.+2      	; 0x1652 <sMO_runCycle+0x4b0>
    1650:	6a c0       	rjmp	.+212    	; 0x1726 <sMO_runCycle+0x584>
    1652:	48 85       	ldd	r20, Y+8	; 0x08
    1654:	59 85       	ldd	r21, Y+9	; 0x09
    1656:	6a 85       	ldd	r22, Y+10	; 0x0a
    1658:	7b 85       	ldd	r23, Y+11	; 0x0b
    165a:	4a 30       	cpi	r20, 0x0A	; 10
    165c:	51 05       	cpc	r21, r1
    165e:	61 05       	cpc	r22, r1
    1660:	71 05       	cpc	r23, r1
    1662:	0c f0       	brlt	.+2      	; 0x1666 <sMO_runCycle+0x4c4>
    1664:	4e c0       	rjmp	.+156    	; 0x1702 <sMO_runCycle+0x560>
    1666:	14 16       	cp	r1, r20
    1668:	15 06       	cpc	r1, r21
    166a:	16 06       	cpc	r1, r22
    166c:	17 06       	cpc	r1, r23
    166e:	0c f0       	brlt	.+2      	; 0x1672 <sMO_runCycle+0x4d0>
    1670:	48 c0       	rjmp	.+144    	; 0x1702 <sMO_runCycle+0x560>
    1672:	2d 85       	ldd	r18, Y+13	; 0x0d
    1674:	22 23       	and	r18, r18
    1676:	09 f4       	brne	.+2      	; 0x167a <sMO_runCycle+0x4d8>
    1678:	44 c0       	rjmp	.+136    	; 0x1702 <sMO_runCycle+0x560>
    167a:	6a 01       	movw	r12, r20
    167c:	7b 01       	movw	r14, r22
			/* Default exit sequence for state CheckKeyPress1 */
			handle->stateConfVector[1] = SMO_last_state;
    167e:	22 e2       	ldi	r18, 0x22	; 34
    1680:	29 83       	std	Y+1, r18	; 0x01
			handle->stateConfVectorPosition = 1;
    1682:	88 24       	eor	r8, r8
    1684:	99 24       	eor	r9, r9
    1686:	83 94       	inc	r8
    1688:	9b 82       	std	Y+3, r9	; 0x03
    168a:	8a 82       	std	Y+2, r8	; 0x02
			/* Default enter sequence for state EnterCode */
			/* Entry action for state 'EnterCode'. */
			sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    168c:	9c 01       	movw	r18, r24
    168e:	ad 01       	movw	r20, r26
    1690:	22 0f       	add	r18, r18
    1692:	33 1f       	adc	r19, r19
    1694:	44 1f       	adc	r20, r20
    1696:	55 1f       	adc	r21, r21
    1698:	c7 01       	movw	r24, r14
    169a:	b6 01       	movw	r22, r12
    169c:	ee 24       	eor	r14, r14
    169e:	ff 24       	eor	r15, r15
    16a0:	87 01       	movw	r16, r14
    16a2:	e3 94       	inc	r14
    16a4:	aa 24       	eor	r10, r10
    16a6:	bb 24       	eor	r11, r11
    16a8:	65 01       	movw	r12, r10
    16aa:	a3 94       	inc	r10
    16ac:	0e 94 59 02 	call	0x4b2	; 0x4b2 <sMOIfaceLCD_writeNumberXY>
			handle->ifaceDISH.pos += 1;
    16b0:	89 a5       	lds	r24, 0x69
    16b2:	9a a5       	lds	r25, 0x6a
    16b4:	ab a5       	lds	r26, 0x6b
    16b6:	bc a5       	lds	r27, 0x6c
    16b8:	01 96       	adiw	r24, 0x01	; 1
    16ba:	a1 1d       	adc	r26, r1
    16bc:	b1 1d       	adc	r27, r1
    16be:	89 a7       	lds	r24, 0x79
    16c0:	9a a7       	lds	r25, 0x7a
    16c2:	ab a7       	lds	r26, 0x7b
    16c4:	bc a7       	lds	r27, 0x7c
			handle->ifaceDISH.ID = handle->ifaceDISH.ID * 10 + handle->ifaceKEYPAD.lastkey;
    16c6:	69 a1       	lds	r22, 0x49
    16c8:	7a a1       	lds	r23, 0x4a
    16ca:	8b a1       	lds	r24, 0x4b
    16cc:	9c a1       	lds	r25, 0x4c
    16ce:	2a e0       	ldi	r18, 0x0A	; 10
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	40 e0       	ldi	r20, 0x00	; 0
    16d4:	50 e0       	ldi	r21, 0x00	; 0
    16d6:	0e 94 09 18 	call	0x3012	; 0x3012 <__mulsi3>
    16da:	ab 01       	movw	r20, r22
    16dc:	bc 01       	movw	r22, r24
    16de:	88 85       	ldd	r24, Y+8	; 0x08
    16e0:	99 85       	ldd	r25, Y+9	; 0x09
    16e2:	aa 85       	ldd	r26, Y+10	; 0x0a
    16e4:	bb 85       	ldd	r27, Y+11	; 0x0b
    16e6:	84 0f       	add	r24, r20
    16e8:	95 1f       	adc	r25, r21
    16ea:	a6 1f       	adc	r26, r22
    16ec:	b7 1f       	adc	r27, r23
    16ee:	89 a3       	lds	r24, 0x59
    16f0:	9a a3       	lds	r25, 0x5a
    16f2:	ab a3       	lds	r26, 0x5b
    16f4:	bc a3       	lds	r27, 0x5c
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode;
    16f6:	88 e0       	ldi	r24, 0x08	; 8
    16f8:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    16fa:	9b 82       	std	Y+3, r9	; 0x03
    16fc:	8a 82       	std	Y+2, r8	; 0x02
    16fe:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <sMO_runCycle+0x1874>
		}  else {
			if (handle->ifaceDISH.pos < 3 && handle->ifaceKEYPAD.lastkey == 10 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1702:	4a 30       	cpi	r20, 0x0A	; 10
    1704:	51 05       	cpc	r21, r1
    1706:	61 05       	cpc	r22, r1
    1708:	71 05       	cpc	r23, r1
    170a:	69 f4       	brne	.+26     	; 0x1726 <sMO_runCycle+0x584>
    170c:	8d 85       	ldd	r24, Y+13	; 0x0d
    170e:	88 23       	and	r24, r24
    1710:	51 f0       	breq	.+20     	; 0x1726 <sMO_runCycle+0x584>
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
				handle->stateConfVectorPosition = 1;
    1712:	1b 83       	std	Y+3, r17	; 0x03
    1714:	0a 83       	std	Y+2, r16	; 0x02
				/* Default enter sequence for state CheckCode0 */
				/* Entry action for state 'CheckCode0'. */
				handle->ifaceKEYPAD.lastkey = 0;
    1716:	18 86       	std	Y+8, r1	; 0x08
    1718:	19 86       	std	Y+9, r1	; 0x09
    171a:	1a 86       	std	Y+10, r1	; 0x0a
    171c:	1b 86       	std	Y+11, r1	; 0x0b
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0;
    171e:	8a e0       	ldi	r24, 0x0A	; 10
    1720:	89 83       	std	Y+1, r24	; 0x01
    1722:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <sMO_runCycle+0x1830>
				handle->stateConfVectorPosition = 1;
			}  else {
				if (handle->ifaceKEYPAD.lastkey == 12 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1726:	88 85       	ldd	r24, Y+8	; 0x08
    1728:	99 85       	ldd	r25, Y+9	; 0x09
    172a:	aa 85       	ldd	r26, Y+10	; 0x0a
    172c:	bb 85       	ldd	r27, Y+11	; 0x0b
    172e:	8c 30       	cpi	r24, 0x0C	; 12
    1730:	91 05       	cpc	r25, r1
    1732:	a1 05       	cpc	r26, r1
    1734:	b1 05       	cpc	r27, r1
    1736:	49 f5       	brne	.+82     	; 0x178a <sMO_runCycle+0x5e8>
    1738:	2d 85       	ldd	r18, Y+13	; 0x0d
    173a:	22 23       	and	r18, r18
    173c:	31 f1       	breq	.+76     	; 0x178a <sMO_runCycle+0x5e8>
					/* Default exit sequence for state CheckKeyPress1 */
					handle->stateConfVector[1] = SMO_last_state;
    173e:	82 e2       	ldi	r24, 0x22	; 34
    1740:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    1742:	ee 24       	eor	r14, r14
    1744:	ff 24       	eor	r15, r15
    1746:	e3 94       	inc	r14
    1748:	fb 82       	std	Y+3, r15	; 0x03
    174a:	ea 82       	std	Y+2, r14	; 0x02
					/* Default enter sequence for state ShowCode */
					/* Entry action for state 'ShowCode'. */
					sMOIfaceLCD_clear();
    174c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <sMOIfaceLCD_clear>
					sMOIfaceLCD_writeString("ENTER DISH ID:");
    1750:	82 e2       	ldi	r24, 0x22	; 34
    1752:	92 e0       	ldi	r25, 0x02	; 2
    1754:	0e 94 47 02 	call	0x48e	; 0x48e <sMOIfaceLCD_writeString>
					sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    1758:	81 e3       	ldi	r24, 0x31	; 49
    175a:	92 e0       	ldi	r25, 0x02	; 2
    175c:	40 e0       	ldi	r20, 0x00	; 0
    175e:	50 e0       	ldi	r21, 0x00	; 0
    1760:	ba 01       	movw	r22, r20
    1762:	01 e0       	ldi	r16, 0x01	; 1
    1764:	10 e0       	ldi	r17, 0x00	; 0
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	0e 94 4a 02 	call	0x494	; 0x494 <sMOIfaceLCD_writeStringXY>
					handle->ifaceDISH.pos = 0;
    176e:	19 a6       	lds	r17, 0xb9
    1770:	1a a6       	lds	r17, 0xba
    1772:	1b a6       	lds	r17, 0xbb
    1774:	1c a6       	lds	r17, 0xbc
					handle->ifaceDISH.ID = 0;
    1776:	19 a2       	lds	r17, 0x99
    1778:	1a a2       	lds	r17, 0x9a
    177a:	1b a2       	lds	r17, 0x9b
    177c:	1c a2       	lds	r17, 0x9c
					handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    177e:	87 e0       	ldi	r24, 0x07	; 7
    1780:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    1782:	fb 82       	std	Y+3, r15	; 0x03
    1784:	ea 82       	std	Y+2, r14	; 0x02
    1786:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <sMO_runCycle+0x1874>
				}  else {
					if (handle->ifaceKEYPAD.lastkey == 11 && handle->ifaceKEYPAD.key_pressed_raised) { 
    178a:	8b 30       	cpi	r24, 0x0B	; 11
    178c:	91 05       	cpc	r25, r1
    178e:	a1 05       	cpc	r26, r1
    1790:	b1 05       	cpc	r27, r1
    1792:	49 f5       	brne	.+82     	; 0x17e6 <sMO_runCycle+0x644>
    1794:	2d 85       	ldd	r18, Y+13	; 0x0d
    1796:	22 23       	and	r18, r18
    1798:	31 f1       	breq	.+76     	; 0x17e6 <sMO_runCycle+0x644>
						/* Default exit sequence for state CheckKeyPress1 */
						handle->stateConfVector[1] = SMO_last_state;
    179a:	82 e2       	ldi	r24, 0x22	; 34
    179c:	89 83       	std	Y+1, r24	; 0x01
						handle->stateConfVectorPosition = 1;
    179e:	ee 24       	eor	r14, r14
    17a0:	ff 24       	eor	r15, r15
    17a2:	e3 94       	inc	r14
    17a4:	fb 82       	std	Y+3, r15	; 0x03
    17a6:	ea 82       	std	Y+2, r14	; 0x02
						/* Default enter sequence for state ShowAmount */
						/* Entry action for state 'ShowAmount'. */
						sMOIfaceLCD_clear();
    17a8:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <sMOIfaceLCD_clear>
						sMOIfaceLCD_writeString("ENTER AMOUNT:");
    17ac:	87 e3       	ldi	r24, 0x37	; 55
    17ae:	92 e0       	ldi	r25, 0x02	; 2
    17b0:	0e 94 47 02 	call	0x48e	; 0x48e <sMOIfaceLCD_writeString>
						sMOIfaceLCD_writeStringXY("_ _", 0, 1);
    17b4:	85 e4       	ldi	r24, 0x45	; 69
    17b6:	92 e0       	ldi	r25, 0x02	; 2
    17b8:	40 e0       	ldi	r20, 0x00	; 0
    17ba:	50 e0       	ldi	r21, 0x00	; 0
    17bc:	ba 01       	movw	r22, r20
    17be:	01 e0       	ldi	r16, 0x01	; 1
    17c0:	10 e0       	ldi	r17, 0x00	; 0
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	0e 94 4a 02 	call	0x494	; 0x494 <sMOIfaceLCD_writeStringXY>
						handle->ifaceDISH.pos = 0;
    17ca:	19 a6       	lds	r17, 0xb9
    17cc:	1a a6       	lds	r17, 0xba
    17ce:	1b a6       	lds	r17, 0xbb
    17d0:	1c a6       	lds	r17, 0xbc
						handle->ifaceDISH.amount = 0;
    17d2:	1d a2       	lds	r17, 0x9d
    17d4:	1e a2       	lds	r17, 0x9e
    17d6:	1f a2       	lds	r17, 0x9f
    17d8:	18 a6       	lds	r17, 0xb8
						handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount;
    17da:	8b e0       	ldi	r24, 0x0B	; 11
    17dc:	89 83       	std	Y+1, r24	; 0x01
						handle->stateConfVectorPosition = 1;
    17de:	fb 82       	std	Y+3, r15	; 0x03
    17e0:	ea 82       	std	Y+2, r14	; 0x02
    17e2:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <sMO_runCycle+0x1874>
					}  else {
						if (handle->ifaceKEYPAD.lastkey == 16 && handle->ifaceKEYPAD.key_pressed_raised) { 
    17e6:	80 31       	cpi	r24, 0x10	; 16
    17e8:	91 05       	cpc	r25, r1
    17ea:	a1 05       	cpc	r26, r1
    17ec:	b1 05       	cpc	r27, r1
    17ee:	11 f0       	breq	.+4      	; 0x17f4 <sMO_runCycle+0x652>
    17f0:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <sMO_runCycle+0x1830>
    17f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f6:	88 23       	and	r24, r24
    17f8:	11 f4       	brne	.+4      	; 0x17fe <sMO_runCycle+0x65c>
    17fa:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <sMO_runCycle+0x1830>
							/* Default exit sequence for state CheckKeyPress1 */
							handle->stateConfVector[1] = SMO_last_state;
							handle->stateConfVectorPosition = 1;
    17fe:	1b 83       	std	Y+3, r17	; 0x03
    1800:	0a 83       	std	Y+2, r16	; 0x02
							handle->iface.menuId = 0;
    1802:	1a aa       	sts	0x9a, r17
    1804:	1b aa       	sts	0x9b, r17
    1806:	1c aa       	sts	0x9c, r17
    1808:	1d aa       	sts	0x9d, r17
							/* Default enter sequence for state null */
							handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_;
    180a:	bf e0       	ldi	r27, 0x0F	; 15
    180c:	b9 83       	std	Y+1, r27	; 0x01
    180e:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <sMO_runCycle+0x1830>
}

/* The reactions of state CheckCode0. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0(SMO* handle) {
	/* The reactions of state CheckCode0. */
	if (handle->iface.menuId == 0) { 
    1812:	8a a9       	sts	0x4a, r24
    1814:	9b a9       	sts	0x4b, r25
    1816:	ac a9       	sts	0x4c, r26
    1818:	bd a9       	sts	0x4d, r27
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	a1 05       	cpc	r26, r1
    181e:	b1 05       	cpc	r27, r1
    1820:	09 f0       	breq	.+2      	; 0x1824 <sMO_runCycle+0x682>
    1822:	6a c0       	rjmp	.+212    	; 0x18f8 <sMO_runCycle+0x756>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1824:	89 81       	ldd	r24, Y+1	; 0x01
    1826:	8a 30       	cpi	r24, 0x0A	; 10
    1828:	41 f1       	breq	.+80     	; 0x187a <sMO_runCycle+0x6d8>
    182a:	8b 30       	cpi	r24, 0x0B	; 11
    182c:	40 f4       	brcc	.+16     	; 0x183e <sMO_runCycle+0x69c>
    182e:	88 30       	cpi	r24, 0x08	; 8
    1830:	b1 f0       	breq	.+44     	; 0x185e <sMO_runCycle+0x6bc>
    1832:	89 30       	cpi	r24, 0x09	; 9
    1834:	d8 f4       	brcc	.+54     	; 0x186c <sMO_runCycle+0x6ca>
    1836:	87 30       	cpi	r24, 0x07	; 7
    1838:	09 f0       	breq	.+2      	; 0x183c <sMO_runCycle+0x69a>
    183a:	41 c0       	rjmp	.+130    	; 0x18be <sMO_runCycle+0x71c>
    183c:	09 c0       	rjmp	.+18     	; 0x1850 <sMO_runCycle+0x6ae>
    183e:	8c 30       	cpi	r24, 0x0C	; 12
    1840:	51 f1       	breq	.+84     	; 0x1896 <sMO_runCycle+0x6f4>
    1842:	8c 30       	cpi	r24, 0x0C	; 12
    1844:	08 f1       	brcs	.+66     	; 0x1888 <sMO_runCycle+0x6e6>
    1846:	8e 30       	cpi	r24, 0x0E	; 14
    1848:	69 f1       	breq	.+90     	; 0x18a4 <sMO_runCycle+0x702>
    184a:	8f 30       	cpi	r24, 0x0F	; 15
    184c:	c1 f5       	brne	.+112    	; 0x18be <sMO_runCycle+0x71c>
    184e:	31 c0       	rjmp	.+98     	; 0x18b2 <sMO_runCycle+0x710>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1850:	82 e2       	ldi	r24, 0x22	; 34
    1852:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	9b 83       	std	Y+3, r25	; 0x03
    185a:	8a 83       	std	Y+2, r24	; 0x02
    185c:	30 c0       	rjmp	.+96     	; 0x18be <sMO_runCycle+0x71c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    185e:	82 e2       	ldi	r24, 0x22	; 34
    1860:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	9b 83       	std	Y+3, r25	; 0x03
    1868:	8a 83       	std	Y+2, r24	; 0x02
    186a:	29 c0       	rjmp	.+82     	; 0x18be <sMO_runCycle+0x71c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    186c:	82 e2       	ldi	r24, 0x22	; 34
    186e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	9b 83       	std	Y+3, r25	; 0x03
    1876:	8a 83       	std	Y+2, r24	; 0x02
    1878:	22 c0       	rjmp	.+68     	; 0x18be <sMO_runCycle+0x71c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    187a:	82 e2       	ldi	r24, 0x22	; 34
    187c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	9b 83       	std	Y+3, r25	; 0x03
    1884:	8a 83       	std	Y+2, r24	; 0x02
    1886:	1b c0       	rjmp	.+54     	; 0x18be <sMO_runCycle+0x71c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1888:	82 e2       	ldi	r24, 0x22	; 34
    188a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	9b 83       	std	Y+3, r25	; 0x03
    1892:	8a 83       	std	Y+2, r24	; 0x02
    1894:	14 c0       	rjmp	.+40     	; 0x18be <sMO_runCycle+0x71c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1896:	82 e2       	ldi	r24, 0x22	; 34
    1898:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	9b 83       	std	Y+3, r25	; 0x03
    18a0:	8a 83       	std	Y+2, r24	; 0x02
    18a2:	0d c0       	rjmp	.+26     	; 0x18be <sMO_runCycle+0x71c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    18a4:	82 e2       	ldi	r24, 0x22	; 34
    18a6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	9b 83       	std	Y+3, r25	; 0x03
    18ae:	8a 83       	std	Y+2, r24	; 0x02
    18b0:	06 c0       	rjmp	.+12     	; 0x18be <sMO_runCycle+0x71c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    18b2:	82 e2       	ldi	r24, 0x22	; 34
    18b4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	9b 83       	std	Y+3, r25	; 0x03
    18bc:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    18be:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    18c2:	88 e0       	ldi	r24, 0x08	; 8
    18c4:	92 e0       	ldi	r25, 0x02	; 2
    18c6:	0e 94 47 02 	call	0x48e	; 0x48e <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-WT  D-PAY", 0, 1);
    18ca:	86 e1       	ldi	r24, 0x16	; 22
    18cc:	92 e0       	ldi	r25, 0x02	; 2
    18ce:	40 e0       	ldi	r20, 0x00	; 0
    18d0:	50 e0       	ldi	r21, 0x00	; 0
    18d2:	ba 01       	movw	r22, r20
    18d4:	01 e0       	ldi	r16, 0x01	; 1
    18d6:	10 e0       	ldi	r17, 0x00	; 0
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	0e 94 4a 02 	call	0x494	; 0x494 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    18e0:	1a aa       	sts	0x9a, r17
    18e2:	1b aa       	sts	0x9b, r17
    18e4:	1c aa       	sts	0x9c, r17
    18e6:	1d aa       	sts	0x9d, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    18e8:	85 e0       	ldi	r24, 0x05	; 5
    18ea:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	9b 83       	std	Y+3, r25	; 0x03
    18f2:	8a 83       	std	Y+2, r24	; 0x02
    18f4:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <sMO_runCycle+0x1874>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state CheckCode0 */
			handle->stateConfVector[1] = SMO_last_state;
    18f8:	82 e2       	ldi	r24, 0x22	; 34
    18fa:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    18fc:	88 24       	eor	r8, r8
    18fe:	99 24       	eor	r9, r9
    1900:	83 94       	inc	r8
    1902:	9b 82       	std	Y+3, r9	; 0x03
    1904:	8a 82       	std	Y+2, r8	; 0x02
			/* Default enter sequence for state EnterCode */
			/* Entry action for state 'EnterCode'. */
			sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    1906:	c8 84       	ldd	r12, Y+8	; 0x08
    1908:	d9 84       	ldd	r13, Y+9	; 0x09
    190a:	ea 84       	ldd	r14, Y+10	; 0x0a
    190c:	fb 84       	ldd	r15, Y+11	; 0x0b
    190e:	89 a5       	lds	r24, 0x69
    1910:	9a a5       	lds	r25, 0x6a
    1912:	ab a5       	lds	r26, 0x6b
    1914:	bc a5       	lds	r27, 0x6c
    1916:	9c 01       	movw	r18, r24
    1918:	ad 01       	movw	r20, r26
    191a:	22 0f       	add	r18, r18
    191c:	33 1f       	adc	r19, r19
    191e:	44 1f       	adc	r20, r20
    1920:	55 1f       	adc	r21, r21
    1922:	c7 01       	movw	r24, r14
    1924:	b6 01       	movw	r22, r12
    1926:	ee 24       	eor	r14, r14
    1928:	ff 24       	eor	r15, r15
    192a:	87 01       	movw	r16, r14
    192c:	e3 94       	inc	r14
    192e:	aa 24       	eor	r10, r10
    1930:	bb 24       	eor	r11, r11
    1932:	65 01       	movw	r12, r10
    1934:	a3 94       	inc	r10
    1936:	0e 94 59 02 	call	0x4b2	; 0x4b2 <sMOIfaceLCD_writeNumberXY>
			handle->ifaceDISH.pos += 1;
    193a:	89 a5       	lds	r24, 0x69
    193c:	9a a5       	lds	r25, 0x6a
    193e:	ab a5       	lds	r26, 0x6b
    1940:	bc a5       	lds	r27, 0x6c
    1942:	01 96       	adiw	r24, 0x01	; 1
    1944:	a1 1d       	adc	r26, r1
    1946:	b1 1d       	adc	r27, r1
    1948:	89 a7       	lds	r24, 0x79
    194a:	9a a7       	lds	r25, 0x7a
    194c:	ab a7       	lds	r26, 0x7b
    194e:	bc a7       	lds	r27, 0x7c
			handle->ifaceDISH.ID = handle->ifaceDISH.ID * 10 + handle->ifaceKEYPAD.lastkey;
    1950:	69 a1       	lds	r22, 0x49
    1952:	7a a1       	lds	r23, 0x4a
    1954:	8b a1       	lds	r24, 0x4b
    1956:	9c a1       	lds	r25, 0x4c
    1958:	2a e0       	ldi	r18, 0x0A	; 10
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e0       	ldi	r20, 0x00	; 0
    195e:	50 e0       	ldi	r21, 0x00	; 0
    1960:	0e 94 09 18 	call	0x3012	; 0x3012 <__mulsi3>
    1964:	ab 01       	movw	r20, r22
    1966:	bc 01       	movw	r22, r24
    1968:	88 85       	ldd	r24, Y+8	; 0x08
    196a:	99 85       	ldd	r25, Y+9	; 0x09
    196c:	aa 85       	ldd	r26, Y+10	; 0x0a
    196e:	bb 85       	ldd	r27, Y+11	; 0x0b
    1970:	84 0f       	add	r24, r20
    1972:	95 1f       	adc	r25, r21
    1974:	a6 1f       	adc	r26, r22
    1976:	b7 1f       	adc	r27, r23
    1978:	89 a3       	lds	r24, 0x59
    197a:	9a a3       	lds	r25, 0x5a
    197c:	ab a3       	lds	r26, 0x5b
    197e:	bc a3       	lds	r27, 0x5c
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode;
    1980:	88 e0       	ldi	r24, 0x08	; 8
    1982:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1984:	9b 82       	std	Y+3, r9	; 0x03
    1986:	8a 82       	std	Y+2, r8	; 0x02
    1988:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <sMO_runCycle+0x1874>
}

/* The reactions of state ShowAmount. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount(SMO* handle) {
	/* The reactions of state ShowAmount. */
	if (handle->iface.menuId == 0) { 
    198c:	8a a9       	sts	0x4a, r24
    198e:	9b a9       	sts	0x4b, r25
    1990:	ac a9       	sts	0x4c, r26
    1992:	bd a9       	sts	0x4d, r27
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	a1 05       	cpc	r26, r1
    1998:	b1 05       	cpc	r27, r1
    199a:	09 f0       	breq	.+2      	; 0x199e <sMO_runCycle+0x7fc>
    199c:	69 c0       	rjmp	.+210    	; 0x1a70 <sMO_runCycle+0x8ce>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	8a 30       	cpi	r24, 0x0A	; 10
    19a2:	41 f1       	breq	.+80     	; 0x19f4 <sMO_runCycle+0x852>
    19a4:	8b 30       	cpi	r24, 0x0B	; 11
    19a6:	40 f4       	brcc	.+16     	; 0x19b8 <sMO_runCycle+0x816>
    19a8:	88 30       	cpi	r24, 0x08	; 8
    19aa:	b1 f0       	breq	.+44     	; 0x19d8 <sMO_runCycle+0x836>
    19ac:	89 30       	cpi	r24, 0x09	; 9
    19ae:	d8 f4       	brcc	.+54     	; 0x19e6 <sMO_runCycle+0x844>
    19b0:	87 30       	cpi	r24, 0x07	; 7
    19b2:	09 f0       	breq	.+2      	; 0x19b6 <sMO_runCycle+0x814>
    19b4:	41 c0       	rjmp	.+130    	; 0x1a38 <sMO_runCycle+0x896>
    19b6:	09 c0       	rjmp	.+18     	; 0x19ca <sMO_runCycle+0x828>
    19b8:	8c 30       	cpi	r24, 0x0C	; 12
    19ba:	51 f1       	breq	.+84     	; 0x1a10 <sMO_runCycle+0x86e>
    19bc:	8c 30       	cpi	r24, 0x0C	; 12
    19be:	08 f1       	brcs	.+66     	; 0x1a02 <sMO_runCycle+0x860>
    19c0:	8e 30       	cpi	r24, 0x0E	; 14
    19c2:	69 f1       	breq	.+90     	; 0x1a1e <sMO_runCycle+0x87c>
    19c4:	8f 30       	cpi	r24, 0x0F	; 15
    19c6:	c1 f5       	brne	.+112    	; 0x1a38 <sMO_runCycle+0x896>
    19c8:	31 c0       	rjmp	.+98     	; 0x1a2c <sMO_runCycle+0x88a>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    19ca:	82 e2       	ldi	r24, 0x22	; 34
    19cc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	9b 83       	std	Y+3, r25	; 0x03
    19d4:	8a 83       	std	Y+2, r24	; 0x02
    19d6:	30 c0       	rjmp	.+96     	; 0x1a38 <sMO_runCycle+0x896>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    19d8:	82 e2       	ldi	r24, 0x22	; 34
    19da:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	9b 83       	std	Y+3, r25	; 0x03
    19e2:	8a 83       	std	Y+2, r24	; 0x02
    19e4:	29 c0       	rjmp	.+82     	; 0x1a38 <sMO_runCycle+0x896>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    19e6:	82 e2       	ldi	r24, 0x22	; 34
    19e8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	9b 83       	std	Y+3, r25	; 0x03
    19f0:	8a 83       	std	Y+2, r24	; 0x02
    19f2:	22 c0       	rjmp	.+68     	; 0x1a38 <sMO_runCycle+0x896>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    19f4:	82 e2       	ldi	r24, 0x22	; 34
    19f6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	9b 83       	std	Y+3, r25	; 0x03
    19fe:	8a 83       	std	Y+2, r24	; 0x02
    1a00:	1b c0       	rjmp	.+54     	; 0x1a38 <sMO_runCycle+0x896>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1a02:	82 e2       	ldi	r24, 0x22	; 34
    1a04:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	9b 83       	std	Y+3, r25	; 0x03
    1a0c:	8a 83       	std	Y+2, r24	; 0x02
    1a0e:	14 c0       	rjmp	.+40     	; 0x1a38 <sMO_runCycle+0x896>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1a10:	82 e2       	ldi	r24, 0x22	; 34
    1a12:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	9b 83       	std	Y+3, r25	; 0x03
    1a1a:	8a 83       	std	Y+2, r24	; 0x02
    1a1c:	0d c0       	rjmp	.+26     	; 0x1a38 <sMO_runCycle+0x896>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1a1e:	82 e2       	ldi	r24, 0x22	; 34
    1a20:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	9b 83       	std	Y+3, r25	; 0x03
    1a28:	8a 83       	std	Y+2, r24	; 0x02
    1a2a:	06 c0       	rjmp	.+12     	; 0x1a38 <sMO_runCycle+0x896>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1a2c:	82 e2       	ldi	r24, 0x22	; 34
    1a2e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	9b 83       	std	Y+3, r25	; 0x03
    1a36:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1a38:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1a3c:	88 e0       	ldi	r24, 0x08	; 8
    1a3e:	92 e0       	ldi	r25, 0x02	; 2
    1a40:	0e 94 47 02 	call	0x48e	; 0x48e <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-WT  D-PAY", 0, 1);
    1a44:	86 e1       	ldi	r24, 0x16	; 22
    1a46:	92 e0       	ldi	r25, 0x02	; 2
    1a48:	40 e0       	ldi	r20, 0x00	; 0
    1a4a:	50 e0       	ldi	r21, 0x00	; 0
    1a4c:	ba 01       	movw	r22, r20
    1a4e:	01 e0       	ldi	r16, 0x01	; 1
    1a50:	10 e0       	ldi	r17, 0x00	; 0
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	0e 94 4a 02 	call	0x494	; 0x494 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1a5a:	1a aa       	sts	0x9a, r17
    1a5c:	1b aa       	sts	0x9b, r17
    1a5e:	1c aa       	sts	0x9c, r17
    1a60:	1d aa       	sts	0x9d, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1a62:	85 e0       	ldi	r24, 0x05	; 5
    1a64:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	9b 83       	std	Y+3, r25	; 0x03
    1a6c:	8a 83       	std	Y+2, r24	; 0x02
    1a6e:	d3 c7       	rjmp	.+4006   	; 0x2a16 <sMO_runCycle+0x1874>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state ShowAmount */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    1a70:	1b 83       	std	Y+3, r17	; 0x03
    1a72:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress2 */
			/* Entry action for state 'CheckKeyPress2'. */
			handle->ifaceKEYPAD.lastkey = 0;
    1a74:	18 86       	std	Y+8, r1	; 0x08
    1a76:	19 86       	std	Y+9, r1	; 0x09
    1a78:	1a 86       	std	Y+10, r1	; 0x0a
    1a7a:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2;
    1a7c:	39 82       	std	Y+1, r3	; 0x01
    1a7e:	a9 c7       	rjmp	.+3922   	; 0x29d2 <sMO_runCycle+0x1830>
}

/* The reactions of state CheckKeyPress2. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2(SMO* handle) {
	/* The reactions of state CheckKeyPress2. */
	if (handle->iface.menuId == 0) { 
    1a80:	8a a9       	sts	0x4a, r24
    1a82:	9b a9       	sts	0x4b, r25
    1a84:	ac a9       	sts	0x4c, r26
    1a86:	bd a9       	sts	0x4d, r27
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	a1 05       	cpc	r26, r1
    1a8c:	b1 05       	cpc	r27, r1
    1a8e:	09 f0       	breq	.+2      	; 0x1a92 <sMO_runCycle+0x8f0>
    1a90:	69 c0       	rjmp	.+210    	; 0x1b64 <sMO_runCycle+0x9c2>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	8a 30       	cpi	r24, 0x0A	; 10
    1a96:	41 f1       	breq	.+80     	; 0x1ae8 <sMO_runCycle+0x946>
    1a98:	8b 30       	cpi	r24, 0x0B	; 11
    1a9a:	40 f4       	brcc	.+16     	; 0x1aac <sMO_runCycle+0x90a>
    1a9c:	88 30       	cpi	r24, 0x08	; 8
    1a9e:	b1 f0       	breq	.+44     	; 0x1acc <sMO_runCycle+0x92a>
    1aa0:	89 30       	cpi	r24, 0x09	; 9
    1aa2:	d8 f4       	brcc	.+54     	; 0x1ada <sMO_runCycle+0x938>
    1aa4:	87 30       	cpi	r24, 0x07	; 7
    1aa6:	09 f0       	breq	.+2      	; 0x1aaa <sMO_runCycle+0x908>
    1aa8:	41 c0       	rjmp	.+130    	; 0x1b2c <sMO_runCycle+0x98a>
    1aaa:	09 c0       	rjmp	.+18     	; 0x1abe <sMO_runCycle+0x91c>
    1aac:	8c 30       	cpi	r24, 0x0C	; 12
    1aae:	51 f1       	breq	.+84     	; 0x1b04 <sMO_runCycle+0x962>
    1ab0:	8c 30       	cpi	r24, 0x0C	; 12
    1ab2:	08 f1       	brcs	.+66     	; 0x1af6 <sMO_runCycle+0x954>
    1ab4:	8e 30       	cpi	r24, 0x0E	; 14
    1ab6:	69 f1       	breq	.+90     	; 0x1b12 <sMO_runCycle+0x970>
    1ab8:	8f 30       	cpi	r24, 0x0F	; 15
    1aba:	c1 f5       	brne	.+112    	; 0x1b2c <sMO_runCycle+0x98a>
    1abc:	31 c0       	rjmp	.+98     	; 0x1b20 <sMO_runCycle+0x97e>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1abe:	82 e2       	ldi	r24, 0x22	; 34
    1ac0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	9b 83       	std	Y+3, r25	; 0x03
    1ac8:	8a 83       	std	Y+2, r24	; 0x02
    1aca:	30 c0       	rjmp	.+96     	; 0x1b2c <sMO_runCycle+0x98a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1acc:	82 e2       	ldi	r24, 0x22	; 34
    1ace:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	9b 83       	std	Y+3, r25	; 0x03
    1ad6:	8a 83       	std	Y+2, r24	; 0x02
    1ad8:	29 c0       	rjmp	.+82     	; 0x1b2c <sMO_runCycle+0x98a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1ada:	82 e2       	ldi	r24, 0x22	; 34
    1adc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	9b 83       	std	Y+3, r25	; 0x03
    1ae4:	8a 83       	std	Y+2, r24	; 0x02
    1ae6:	22 c0       	rjmp	.+68     	; 0x1b2c <sMO_runCycle+0x98a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1ae8:	82 e2       	ldi	r24, 0x22	; 34
    1aea:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	9b 83       	std	Y+3, r25	; 0x03
    1af2:	8a 83       	std	Y+2, r24	; 0x02
    1af4:	1b c0       	rjmp	.+54     	; 0x1b2c <sMO_runCycle+0x98a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1af6:	82 e2       	ldi	r24, 0x22	; 34
    1af8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	9b 83       	std	Y+3, r25	; 0x03
    1b00:	8a 83       	std	Y+2, r24	; 0x02
    1b02:	14 c0       	rjmp	.+40     	; 0x1b2c <sMO_runCycle+0x98a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1b04:	82 e2       	ldi	r24, 0x22	; 34
    1b06:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	9b 83       	std	Y+3, r25	; 0x03
    1b0e:	8a 83       	std	Y+2, r24	; 0x02
    1b10:	0d c0       	rjmp	.+26     	; 0x1b2c <sMO_runCycle+0x98a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1b12:	82 e2       	ldi	r24, 0x22	; 34
    1b14:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	9b 83       	std	Y+3, r25	; 0x03
    1b1c:	8a 83       	std	Y+2, r24	; 0x02
    1b1e:	06 c0       	rjmp	.+12     	; 0x1b2c <sMO_runCycle+0x98a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1b20:	82 e2       	ldi	r24, 0x22	; 34
    1b22:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	9b 83       	std	Y+3, r25	; 0x03
    1b2a:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1b2c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1b30:	88 e0       	ldi	r24, 0x08	; 8
    1b32:	92 e0       	ldi	r25, 0x02	; 2
    1b34:	0e 94 47 02 	call	0x48e	; 0x48e <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-WT  D-PAY", 0, 1);
    1b38:	86 e1       	ldi	r24, 0x16	; 22
    1b3a:	92 e0       	ldi	r25, 0x02	; 2
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	50 e0       	ldi	r21, 0x00	; 0
    1b40:	ba 01       	movw	r22, r20
    1b42:	01 e0       	ldi	r16, 0x01	; 1
    1b44:	10 e0       	ldi	r17, 0x00	; 0
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	0e 94 4a 02 	call	0x494	; 0x494 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1b4e:	1a aa       	sts	0x9a, r17
    1b50:	1b aa       	sts	0x9b, r17
    1b52:	1c aa       	sts	0x9c, r17
    1b54:	1d aa       	sts	0x9d, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1b56:	85 e0       	ldi	r24, 0x05	; 5
    1b58:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	9b 83       	std	Y+3, r25	; 0x03
    1b60:	8a 83       	std	Y+2, r24	; 0x02
    1b62:	59 c7       	rjmp	.+3762   	; 0x2a16 <sMO_runCycle+0x1874>
	}  else {
		if (handle->ifaceDISH.pos < 2 && handle->ifaceKEYPAD.lastkey == 10 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1b64:	89 a5       	lds	r24, 0x69
    1b66:	9a a5       	lds	r25, 0x6a
    1b68:	ab a5       	lds	r26, 0x6b
    1b6a:	bc a5       	lds	r27, 0x6c
    1b6c:	82 30       	cpi	r24, 0x02	; 2
    1b6e:	91 05       	cpc	r25, r1
    1b70:	a1 05       	cpc	r26, r1
    1b72:	b1 05       	cpc	r27, r1
    1b74:	0c f0       	brlt	.+2      	; 0x1b78 <sMO_runCycle+0x9d6>
    1b76:	68 c0       	rjmp	.+208    	; 0x1c48 <sMO_runCycle+0xaa6>
    1b78:	48 85       	ldd	r20, Y+8	; 0x08
    1b7a:	59 85       	ldd	r21, Y+9	; 0x09
    1b7c:	6a 85       	ldd	r22, Y+10	; 0x0a
    1b7e:	7b 85       	ldd	r23, Y+11	; 0x0b
    1b80:	4a 30       	cpi	r20, 0x0A	; 10
    1b82:	51 05       	cpc	r21, r1
    1b84:	61 05       	cpc	r22, r1
    1b86:	71 05       	cpc	r23, r1
    1b88:	61 f4       	brne	.+24     	; 0x1ba2 <sMO_runCycle+0xa00>
    1b8a:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b8c:	22 23       	and	r18, r18
    1b8e:	49 f0       	breq	.+18     	; 0x1ba2 <sMO_runCycle+0xa00>
			/* Default exit sequence for state CheckKeyPress2 */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    1b90:	1b 83       	std	Y+3, r17	; 0x03
    1b92:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckAmount0 */
			/* Entry action for state 'CheckAmount0'. */
			handle->ifaceKEYPAD.lastkey = 0;
    1b94:	18 86       	std	Y+8, r1	; 0x08
    1b96:	19 86       	std	Y+9, r1	; 0x09
    1b98:	1a 86       	std	Y+10, r1	; 0x0a
    1b9a:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0;
    1b9c:	8d e0       	ldi	r24, 0x0D	; 13
    1b9e:	89 83       	std	Y+1, r24	; 0x01
    1ba0:	18 c7       	rjmp	.+3632   	; 0x29d2 <sMO_runCycle+0x1830>
			handle->stateConfVectorPosition = 1;
		}  else {
			if (handle->ifaceDISH.pos < 2 && handle->ifaceKEYPAD.lastkey <= 9 && handle->ifaceKEYPAD.lastkey >= 1 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1ba2:	4a 30       	cpi	r20, 0x0A	; 10
    1ba4:	51 05       	cpc	r21, r1
    1ba6:	61 05       	cpc	r22, r1
    1ba8:	71 05       	cpc	r23, r1
    1baa:	0c f0       	brlt	.+2      	; 0x1bae <sMO_runCycle+0xa0c>
    1bac:	4d c0       	rjmp	.+154    	; 0x1c48 <sMO_runCycle+0xaa6>
    1bae:	14 16       	cp	r1, r20
    1bb0:	15 06       	cpc	r1, r21
    1bb2:	16 06       	cpc	r1, r22
    1bb4:	17 06       	cpc	r1, r23
    1bb6:	0c f0       	brlt	.+2      	; 0x1bba <sMO_runCycle+0xa18>
    1bb8:	47 c0       	rjmp	.+142    	; 0x1c48 <sMO_runCycle+0xaa6>
    1bba:	2d 85       	ldd	r18, Y+13	; 0x0d
    1bbc:	22 23       	and	r18, r18
    1bbe:	09 f4       	brne	.+2      	; 0x1bc2 <sMO_runCycle+0xa20>
    1bc0:	43 c0       	rjmp	.+134    	; 0x1c48 <sMO_runCycle+0xaa6>
    1bc2:	6a 01       	movw	r12, r20
    1bc4:	7b 01       	movw	r14, r22
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1bc6:	22 e2       	ldi	r18, 0x22	; 34
    1bc8:	29 83       	std	Y+1, r18	; 0x01
				handle->stateConfVectorPosition = 1;
    1bca:	88 24       	eor	r8, r8
    1bcc:	99 24       	eor	r9, r9
    1bce:	83 94       	inc	r8
    1bd0:	9b 82       	std	Y+3, r9	; 0x03
    1bd2:	8a 82       	std	Y+2, r8	; 0x02
				/* Default enter sequence for state EnterAmount */
				/* Entry action for state 'EnterAmount'. */
				sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    1bd4:	9c 01       	movw	r18, r24
    1bd6:	ad 01       	movw	r20, r26
    1bd8:	22 0f       	add	r18, r18
    1bda:	33 1f       	adc	r19, r19
    1bdc:	44 1f       	adc	r20, r20
    1bde:	55 1f       	adc	r21, r21
    1be0:	c7 01       	movw	r24, r14
    1be2:	b6 01       	movw	r22, r12
    1be4:	ee 24       	eor	r14, r14
    1be6:	ff 24       	eor	r15, r15
    1be8:	87 01       	movw	r16, r14
    1bea:	e3 94       	inc	r14
    1bec:	aa 24       	eor	r10, r10
    1bee:	bb 24       	eor	r11, r11
    1bf0:	65 01       	movw	r12, r10
    1bf2:	a3 94       	inc	r10
    1bf4:	0e 94 59 02 	call	0x4b2	; 0x4b2 <sMOIfaceLCD_writeNumberXY>
				handle->ifaceDISH.pos += 1;
    1bf8:	89 a5       	lds	r24, 0x69
    1bfa:	9a a5       	lds	r25, 0x6a
    1bfc:	ab a5       	lds	r26, 0x6b
    1bfe:	bc a5       	lds	r27, 0x6c
    1c00:	01 96       	adiw	r24, 0x01	; 1
    1c02:	a1 1d       	adc	r26, r1
    1c04:	b1 1d       	adc	r27, r1
    1c06:	89 a7       	lds	r24, 0x79
    1c08:	9a a7       	lds	r25, 0x7a
    1c0a:	ab a7       	lds	r26, 0x7b
    1c0c:	bc a7       	lds	r27, 0x7c
				handle->ifaceDISH.amount = handle->ifaceDISH.amount * 10 + handle->ifaceKEYPAD.lastkey;
    1c0e:	6d a1       	lds	r22, 0x4d
    1c10:	7e a1       	lds	r23, 0x4e
    1c12:	8f a1       	lds	r24, 0x4f
    1c14:	98 a5       	lds	r25, 0x68
    1c16:	2a e0       	ldi	r18, 0x0A	; 10
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	40 e0       	ldi	r20, 0x00	; 0
    1c1c:	50 e0       	ldi	r21, 0x00	; 0
    1c1e:	0e 94 09 18 	call	0x3012	; 0x3012 <__mulsi3>
    1c22:	ab 01       	movw	r20, r22
    1c24:	bc 01       	movw	r22, r24
    1c26:	88 85       	ldd	r24, Y+8	; 0x08
    1c28:	99 85       	ldd	r25, Y+9	; 0x09
    1c2a:	aa 85       	ldd	r26, Y+10	; 0x0a
    1c2c:	bb 85       	ldd	r27, Y+11	; 0x0b
    1c2e:	84 0f       	add	r24, r20
    1c30:	95 1f       	adc	r25, r21
    1c32:	a6 1f       	adc	r26, r22
    1c34:	b7 1f       	adc	r27, r23
    1c36:	8d a3       	lds	r24, 0x5d
    1c38:	9e a3       	lds	r25, 0x5e
    1c3a:	af a3       	lds	r26, 0x5f
    1c3c:	b8 a7       	lds	r27, 0x78
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount;
    1c3e:	8e e0       	ldi	r24, 0x0E	; 14
    1c40:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1c42:	9b 82       	std	Y+3, r9	; 0x03
    1c44:	8a 82       	std	Y+2, r8	; 0x02
    1c46:	e7 c6       	rjmp	.+3534   	; 0x2a16 <sMO_runCycle+0x1874>
			}  else {
				if (handle->ifaceKEYPAD.lastkey == 12 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1c48:	88 85       	ldd	r24, Y+8	; 0x08
    1c4a:	99 85       	ldd	r25, Y+9	; 0x09
    1c4c:	aa 85       	ldd	r26, Y+10	; 0x0a
    1c4e:	bb 85       	ldd	r27, Y+11	; 0x0b
    1c50:	8c 30       	cpi	r24, 0x0C	; 12
    1c52:	91 05       	cpc	r25, r1
    1c54:	a1 05       	cpc	r26, r1
    1c56:	b1 05       	cpc	r27, r1
    1c58:	41 f5       	brne	.+80     	; 0x1caa <sMO_runCycle+0xb08>
    1c5a:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c5c:	22 23       	and	r18, r18
    1c5e:	29 f1       	breq	.+74     	; 0x1caa <sMO_runCycle+0xb08>
					/* Default exit sequence for state CheckKeyPress2 */
					handle->stateConfVector[1] = SMO_last_state;
    1c60:	82 e2       	ldi	r24, 0x22	; 34
    1c62:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    1c64:	ee 24       	eor	r14, r14
    1c66:	ff 24       	eor	r15, r15
    1c68:	e3 94       	inc	r14
    1c6a:	fb 82       	std	Y+3, r15	; 0x03
    1c6c:	ea 82       	std	Y+2, r14	; 0x02
					/* Default enter sequence for state ShowAmount */
					/* Entry action for state 'ShowAmount'. */
					sMOIfaceLCD_clear();
    1c6e:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <sMOIfaceLCD_clear>
					sMOIfaceLCD_writeString("ENTER AMOUNT:");
    1c72:	87 e3       	ldi	r24, 0x37	; 55
    1c74:	92 e0       	ldi	r25, 0x02	; 2
    1c76:	0e 94 47 02 	call	0x48e	; 0x48e <sMOIfaceLCD_writeString>
					sMOIfaceLCD_writeStringXY("_ _", 0, 1);
    1c7a:	85 e4       	ldi	r24, 0x45	; 69
    1c7c:	92 e0       	ldi	r25, 0x02	; 2
    1c7e:	40 e0       	ldi	r20, 0x00	; 0
    1c80:	50 e0       	ldi	r21, 0x00	; 0
    1c82:	ba 01       	movw	r22, r20
    1c84:	01 e0       	ldi	r16, 0x01	; 1
    1c86:	10 e0       	ldi	r17, 0x00	; 0
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	0e 94 4a 02 	call	0x494	; 0x494 <sMOIfaceLCD_writeStringXY>
					handle->ifaceDISH.pos = 0;
    1c90:	19 a6       	lds	r17, 0xb9
    1c92:	1a a6       	lds	r17, 0xba
    1c94:	1b a6       	lds	r17, 0xbb
    1c96:	1c a6       	lds	r17, 0xbc
					handle->ifaceDISH.amount = 0;
    1c98:	1d a2       	lds	r17, 0x9d
    1c9a:	1e a2       	lds	r17, 0x9e
    1c9c:	1f a2       	lds	r17, 0x9f
    1c9e:	18 a6       	lds	r17, 0xb8
					handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount;
    1ca0:	8b e0       	ldi	r24, 0x0B	; 11
    1ca2:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    1ca4:	fb 82       	std	Y+3, r15	; 0x03
    1ca6:	ea 82       	std	Y+2, r14	; 0x02
    1ca8:	b6 c6       	rjmp	.+3436   	; 0x2a16 <sMO_runCycle+0x1874>
				}  else {
					if (handle->ifaceKEYPAD.lastkey == 11 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1caa:	8b 30       	cpi	r24, 0x0B	; 11
    1cac:	91 05       	cpc	r25, r1
    1cae:	a1 05       	cpc	r26, r1
    1cb0:	b1 05       	cpc	r27, r1
    1cb2:	09 f0       	breq	.+2      	; 0x1cb6 <sMO_runCycle+0xb14>
    1cb4:	72 c0       	rjmp	.+228    	; 0x1d9a <sMO_runCycle+0xbf8>
    1cb6:	2d 85       	ldd	r18, Y+13	; 0x0d
    1cb8:	22 23       	and	r18, r18
    1cba:	09 f4       	brne	.+2      	; 0x1cbe <sMO_runCycle+0xb1c>
    1cbc:	6e c0       	rjmp	.+220    	; 0x1d9a <sMO_runCycle+0xbf8>
						/* Default exit sequence for state EnterData */
						/* Default exit sequence for region r1 */
						/* Handle exit of all possible states (of r1) at position 1... */
						switch(handle->stateConfVector[ 1 ]) {
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	8a 30       	cpi	r24, 0x0A	; 10
    1cc2:	41 f1       	breq	.+80     	; 0x1d14 <sMO_runCycle+0xb72>
    1cc4:	8b 30       	cpi	r24, 0x0B	; 11
    1cc6:	40 f4       	brcc	.+16     	; 0x1cd8 <sMO_runCycle+0xb36>
    1cc8:	88 30       	cpi	r24, 0x08	; 8
    1cca:	b1 f0       	breq	.+44     	; 0x1cf8 <sMO_runCycle+0xb56>
    1ccc:	89 30       	cpi	r24, 0x09	; 9
    1cce:	d8 f4       	brcc	.+54     	; 0x1d06 <sMO_runCycle+0xb64>
    1cd0:	87 30       	cpi	r24, 0x07	; 7
    1cd2:	09 f0       	breq	.+2      	; 0x1cd6 <sMO_runCycle+0xb34>
    1cd4:	41 c0       	rjmp	.+130    	; 0x1d58 <sMO_runCycle+0xbb6>
    1cd6:	09 c0       	rjmp	.+18     	; 0x1cea <sMO_runCycle+0xb48>
    1cd8:	8c 30       	cpi	r24, 0x0C	; 12
    1cda:	51 f1       	breq	.+84     	; 0x1d30 <sMO_runCycle+0xb8e>
    1cdc:	8c 30       	cpi	r24, 0x0C	; 12
    1cde:	08 f1       	brcs	.+66     	; 0x1d22 <sMO_runCycle+0xb80>
    1ce0:	8e 30       	cpi	r24, 0x0E	; 14
    1ce2:	69 f1       	breq	.+90     	; 0x1d3e <sMO_runCycle+0xb9c>
    1ce4:	8f 30       	cpi	r24, 0x0F	; 15
    1ce6:	c1 f5       	brne	.+112    	; 0x1d58 <sMO_runCycle+0xbb6>
    1ce8:	31 c0       	rjmp	.+98     	; 0x1d4c <sMO_runCycle+0xbaa>
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
								/* Default exit sequence for state ShowCode */
								handle->stateConfVector[1] = SMO_last_state;
    1cea:	82 e2       	ldi	r24, 0x22	; 34
    1cec:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	9b 83       	std	Y+3, r25	; 0x03
    1cf4:	8a 83       	std	Y+2, r24	; 0x02
    1cf6:	30 c0       	rjmp	.+96     	; 0x1d58 <sMO_runCycle+0xbb6>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
								/* Default exit sequence for state EnterCode */
								handle->stateConfVector[1] = SMO_last_state;
    1cf8:	82 e2       	ldi	r24, 0x22	; 34
    1cfa:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	9b 83       	std	Y+3, r25	; 0x03
    1d02:	8a 83       	std	Y+2, r24	; 0x02
    1d04:	29 c0       	rjmp	.+82     	; 0x1d58 <sMO_runCycle+0xbb6>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
								/* Default exit sequence for state CheckKeyPress1 */
								handle->stateConfVector[1] = SMO_last_state;
    1d06:	82 e2       	ldi	r24, 0x22	; 34
    1d08:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	9b 83       	std	Y+3, r25	; 0x03
    1d10:	8a 83       	std	Y+2, r24	; 0x02
    1d12:	22 c0       	rjmp	.+68     	; 0x1d58 <sMO_runCycle+0xbb6>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
								/* Default exit sequence for state CheckCode0 */
								handle->stateConfVector[1] = SMO_last_state;
    1d14:	82 e2       	ldi	r24, 0x22	; 34
    1d16:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	9b 83       	std	Y+3, r25	; 0x03
    1d1e:	8a 83       	std	Y+2, r24	; 0x02
    1d20:	1b c0       	rjmp	.+54     	; 0x1d58 <sMO_runCycle+0xbb6>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
								/* Default exit sequence for state ShowAmount */
								handle->stateConfVector[1] = SMO_last_state;
    1d22:	82 e2       	ldi	r24, 0x22	; 34
    1d24:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	9b 83       	std	Y+3, r25	; 0x03
    1d2c:	8a 83       	std	Y+2, r24	; 0x02
    1d2e:	14 c0       	rjmp	.+40     	; 0x1d58 <sMO_runCycle+0xbb6>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
								/* Default exit sequence for state CheckKeyPress2 */
								handle->stateConfVector[1] = SMO_last_state;
    1d30:	82 e2       	ldi	r24, 0x22	; 34
    1d32:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	9b 83       	std	Y+3, r25	; 0x03
    1d3a:	8a 83       	std	Y+2, r24	; 0x02
    1d3c:	0d c0       	rjmp	.+26     	; 0x1d58 <sMO_runCycle+0xbb6>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
								/* Default exit sequence for state EnterAmount */
								handle->stateConfVector[1] = SMO_last_state;
    1d3e:	82 e2       	ldi	r24, 0x22	; 34
    1d40:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	9b 83       	std	Y+3, r25	; 0x03
    1d48:	8a 83       	std	Y+2, r24	; 0x02
    1d4a:	06 c0       	rjmp	.+12     	; 0x1d58 <sMO_runCycle+0xbb6>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
								/* Default exit sequence for final state. */
								handle->stateConfVector[1] = SMO_last_state;
    1d4c:	82 e2       	ldi	r24, 0x22	; 34
    1d4e:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	9b 83       	std	Y+3, r25	; 0x03
    1d56:	8a 83       	std	Y+2, r24	; 0x02
								break;
							}
							default: break;
						}
						handle->ifaceRF.result = bool_false;
    1d58:	1f 8a       	std	Y+23, r1	; 0x17
						handle->ifaceRF.retry = 0;
    1d5a:	18 8e       	std	Y+24, r1	; 0x18
    1d5c:	19 8e       	std	Y+25, r1	; 0x19
    1d5e:	1a 8e       	std	Y+26, r1	; 0x1a
    1d60:	1b 8e       	std	Y+27, r1	; 0x1b
						/* Default enter sequence for state SendData */
						/* Default enter sequence for region r1 */
						/* Default react sequence for initial entry  */
						/* Default enter sequence for state Send */
						/* Entry action for state 'Send'. */
						handle->ifaceRF.result = sMOIfaceRF_sendData(handle->iface.menuId, handle->iface.tableId, handle->ifaceDISH.ID, handle->ifaceDISH.amount);
    1d62:	6a a9       	sts	0x4a, r22
    1d64:	7b a9       	sts	0x4b, r23
    1d66:	8c a9       	sts	0x4c, r24
    1d68:	9d a9       	sts	0x4d, r25
    1d6a:	2e a9       	sts	0x4e, r18
    1d6c:	3f a9       	sts	0x4f, r19
    1d6e:	48 ad       	sts	0x68, r20
    1d70:	59 ad       	sts	0x69, r21
    1d72:	e9 a0       	lds	r30, 0x89
    1d74:	fa a0       	lds	r31, 0x8a
    1d76:	0b a1       	lds	r16, 0x4b
    1d78:	1c a1       	lds	r17, 0x4c
    1d7a:	8d a0       	lds	r24, 0x8d
    1d7c:	9e a0       	lds	r25, 0x8e
    1d7e:	af a0       	lds	r26, 0x8f
    1d80:	b8 a4       	lds	r27, 0xa8
    1d82:	65 01       	movw	r12, r10
    1d84:	54 01       	movw	r10, r8
    1d86:	0e 94 3e 03 	call	0x67c	; 0x67c <sMOIfaceRF_sendData>
    1d8a:	8f 8b       	std	Y+23, r24	; 0x17
						handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_Send;
    1d8c:	83 e1       	ldi	r24, 0x13	; 19
    1d8e:	89 83       	std	Y+1, r24	; 0x01
						handle->stateConfVectorPosition = 1;
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	9b 83       	std	Y+3, r25	; 0x03
    1d96:	8a 83       	std	Y+2, r24	; 0x02
    1d98:	3e c6       	rjmp	.+3196   	; 0x2a16 <sMO_runCycle+0x1874>
					}  else {
						if (handle->ifaceKEYPAD.lastkey == 16 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1d9a:	80 31       	cpi	r24, 0x10	; 16
    1d9c:	91 05       	cpc	r25, r1
    1d9e:	a1 05       	cpc	r26, r1
    1da0:	b1 05       	cpc	r27, r1
    1da2:	09 f0       	breq	.+2      	; 0x1da6 <sMO_runCycle+0xc04>
    1da4:	16 c6       	rjmp	.+3116   	; 0x29d2 <sMO_runCycle+0x1830>
    1da6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da8:	88 23       	and	r24, r24
    1daa:	09 f4       	brne	.+2      	; 0x1dae <sMO_runCycle+0xc0c>
    1dac:	12 c6       	rjmp	.+3108   	; 0x29d2 <sMO_runCycle+0x1830>
							/* Default exit sequence for state CheckKeyPress2 */
							handle->stateConfVector[1] = SMO_last_state;
							handle->stateConfVectorPosition = 1;
    1dae:	1b 83       	std	Y+3, r17	; 0x03
    1db0:	0a 83       	std	Y+2, r16	; 0x02
							handle->iface.menuId = 0;
    1db2:	1a aa       	sts	0x9a, r17
    1db4:	1b aa       	sts	0x9b, r17
    1db6:	1c aa       	sts	0x9c, r17
    1db8:	1d aa       	sts	0x9d, r17
							/* Default enter sequence for state null */
							handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_;
    1dba:	8f e0       	ldi	r24, 0x0F	; 15
    1dbc:	89 83       	std	Y+1, r24	; 0x01
    1dbe:	09 c6       	rjmp	.+3090   	; 0x29d2 <sMO_runCycle+0x1830>
}

/* The reactions of state CheckAmount0. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0(SMO* handle) {
	/* The reactions of state CheckAmount0. */
	if (handle->iface.menuId == 0) { 
    1dc0:	8a a9       	sts	0x4a, r24
    1dc2:	9b a9       	sts	0x4b, r25
    1dc4:	ac a9       	sts	0x4c, r26
    1dc6:	bd a9       	sts	0x4d, r27
    1dc8:	00 97       	sbiw	r24, 0x00	; 0
    1dca:	a1 05       	cpc	r26, r1
    1dcc:	b1 05       	cpc	r27, r1
    1dce:	09 f0       	breq	.+2      	; 0x1dd2 <sMO_runCycle+0xc30>
    1dd0:	69 c0       	rjmp	.+210    	; 0x1ea4 <sMO_runCycle+0xd02>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	8a 30       	cpi	r24, 0x0A	; 10
    1dd6:	41 f1       	breq	.+80     	; 0x1e28 <sMO_runCycle+0xc86>
    1dd8:	8b 30       	cpi	r24, 0x0B	; 11
    1dda:	40 f4       	brcc	.+16     	; 0x1dec <sMO_runCycle+0xc4a>
    1ddc:	88 30       	cpi	r24, 0x08	; 8
    1dde:	b1 f0       	breq	.+44     	; 0x1e0c <sMO_runCycle+0xc6a>
    1de0:	89 30       	cpi	r24, 0x09	; 9
    1de2:	d8 f4       	brcc	.+54     	; 0x1e1a <sMO_runCycle+0xc78>
    1de4:	87 30       	cpi	r24, 0x07	; 7
    1de6:	09 f0       	breq	.+2      	; 0x1dea <sMO_runCycle+0xc48>
    1de8:	41 c0       	rjmp	.+130    	; 0x1e6c <sMO_runCycle+0xcca>
    1dea:	09 c0       	rjmp	.+18     	; 0x1dfe <sMO_runCycle+0xc5c>
    1dec:	8c 30       	cpi	r24, 0x0C	; 12
    1dee:	51 f1       	breq	.+84     	; 0x1e44 <sMO_runCycle+0xca2>
    1df0:	8c 30       	cpi	r24, 0x0C	; 12
    1df2:	08 f1       	brcs	.+66     	; 0x1e36 <sMO_runCycle+0xc94>
    1df4:	8e 30       	cpi	r24, 0x0E	; 14
    1df6:	69 f1       	breq	.+90     	; 0x1e52 <sMO_runCycle+0xcb0>
    1df8:	8f 30       	cpi	r24, 0x0F	; 15
    1dfa:	c1 f5       	brne	.+112    	; 0x1e6c <sMO_runCycle+0xcca>
    1dfc:	31 c0       	rjmp	.+98     	; 0x1e60 <sMO_runCycle+0xcbe>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1dfe:	82 e2       	ldi	r24, 0x22	; 34
    1e00:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	9b 83       	std	Y+3, r25	; 0x03
    1e08:	8a 83       	std	Y+2, r24	; 0x02
    1e0a:	30 c0       	rjmp	.+96     	; 0x1e6c <sMO_runCycle+0xcca>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1e0c:	82 e2       	ldi	r24, 0x22	; 34
    1e0e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	9b 83       	std	Y+3, r25	; 0x03
    1e16:	8a 83       	std	Y+2, r24	; 0x02
    1e18:	29 c0       	rjmp	.+82     	; 0x1e6c <sMO_runCycle+0xcca>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1e1a:	82 e2       	ldi	r24, 0x22	; 34
    1e1c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	9b 83       	std	Y+3, r25	; 0x03
    1e24:	8a 83       	std	Y+2, r24	; 0x02
    1e26:	22 c0       	rjmp	.+68     	; 0x1e6c <sMO_runCycle+0xcca>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1e28:	82 e2       	ldi	r24, 0x22	; 34
    1e2a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	9b 83       	std	Y+3, r25	; 0x03
    1e32:	8a 83       	std	Y+2, r24	; 0x02
    1e34:	1b c0       	rjmp	.+54     	; 0x1e6c <sMO_runCycle+0xcca>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1e36:	82 e2       	ldi	r24, 0x22	; 34
    1e38:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	9b 83       	std	Y+3, r25	; 0x03
    1e40:	8a 83       	std	Y+2, r24	; 0x02
    1e42:	14 c0       	rjmp	.+40     	; 0x1e6c <sMO_runCycle+0xcca>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1e44:	82 e2       	ldi	r24, 0x22	; 34
    1e46:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	9b 83       	std	Y+3, r25	; 0x03
    1e4e:	8a 83       	std	Y+2, r24	; 0x02
    1e50:	0d c0       	rjmp	.+26     	; 0x1e6c <sMO_runCycle+0xcca>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1e52:	82 e2       	ldi	r24, 0x22	; 34
    1e54:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	9b 83       	std	Y+3, r25	; 0x03
    1e5c:	8a 83       	std	Y+2, r24	; 0x02
    1e5e:	06 c0       	rjmp	.+12     	; 0x1e6c <sMO_runCycle+0xcca>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1e60:	82 e2       	ldi	r24, 0x22	; 34
    1e62:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	9b 83       	std	Y+3, r25	; 0x03
    1e6a:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1e6c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1e70:	88 e0       	ldi	r24, 0x08	; 8
    1e72:	92 e0       	ldi	r25, 0x02	; 2
    1e74:	0e 94 47 02 	call	0x48e	; 0x48e <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-WT  D-PAY", 0, 1);
    1e78:	86 e1       	ldi	r24, 0x16	; 22
    1e7a:	92 e0       	ldi	r25, 0x02	; 2
    1e7c:	40 e0       	ldi	r20, 0x00	; 0
    1e7e:	50 e0       	ldi	r21, 0x00	; 0
    1e80:	ba 01       	movw	r22, r20
    1e82:	01 e0       	ldi	r16, 0x01	; 1
    1e84:	10 e0       	ldi	r17, 0x00	; 0
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	0e 94 4a 02 	call	0x494	; 0x494 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1e8e:	1a aa       	sts	0x9a, r17
    1e90:	1b aa       	sts	0x9b, r17
    1e92:	1c aa       	sts	0x9c, r17
    1e94:	1d aa       	sts	0x9d, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1e96:	85 e0       	ldi	r24, 0x05	; 5
    1e98:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	9b 83       	std	Y+3, r25	; 0x03
    1ea0:	8a 83       	std	Y+2, r24	; 0x02
    1ea2:	b9 c5       	rjmp	.+2930   	; 0x2a16 <sMO_runCycle+0x1874>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state CheckAmount0 */
			handle->stateConfVector[1] = SMO_last_state;
    1ea4:	82 e2       	ldi	r24, 0x22	; 34
    1ea6:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1ea8:	88 24       	eor	r8, r8
    1eaa:	99 24       	eor	r9, r9
    1eac:	83 94       	inc	r8
    1eae:	9b 82       	std	Y+3, r9	; 0x03
    1eb0:	8a 82       	std	Y+2, r8	; 0x02
			/* Default enter sequence for state EnterAmount */
			/* Entry action for state 'EnterAmount'. */
			sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    1eb2:	c8 84       	ldd	r12, Y+8	; 0x08
    1eb4:	d9 84       	ldd	r13, Y+9	; 0x09
    1eb6:	ea 84       	ldd	r14, Y+10	; 0x0a
    1eb8:	fb 84       	ldd	r15, Y+11	; 0x0b
    1eba:	89 a5       	lds	r24, 0x69
    1ebc:	9a a5       	lds	r25, 0x6a
    1ebe:	ab a5       	lds	r26, 0x6b
    1ec0:	bc a5       	lds	r27, 0x6c
    1ec2:	9c 01       	movw	r18, r24
    1ec4:	ad 01       	movw	r20, r26
    1ec6:	22 0f       	add	r18, r18
    1ec8:	33 1f       	adc	r19, r19
    1eca:	44 1f       	adc	r20, r20
    1ecc:	55 1f       	adc	r21, r21
    1ece:	c7 01       	movw	r24, r14
    1ed0:	b6 01       	movw	r22, r12
    1ed2:	ee 24       	eor	r14, r14
    1ed4:	ff 24       	eor	r15, r15
    1ed6:	87 01       	movw	r16, r14
    1ed8:	e3 94       	inc	r14
    1eda:	aa 24       	eor	r10, r10
    1edc:	bb 24       	eor	r11, r11
    1ede:	65 01       	movw	r12, r10
    1ee0:	a3 94       	inc	r10
    1ee2:	0e 94 59 02 	call	0x4b2	; 0x4b2 <sMOIfaceLCD_writeNumberXY>
			handle->ifaceDISH.pos += 1;
    1ee6:	89 a5       	lds	r24, 0x69
    1ee8:	9a a5       	lds	r25, 0x6a
    1eea:	ab a5       	lds	r26, 0x6b
    1eec:	bc a5       	lds	r27, 0x6c
    1eee:	01 96       	adiw	r24, 0x01	; 1
    1ef0:	a1 1d       	adc	r26, r1
    1ef2:	b1 1d       	adc	r27, r1
    1ef4:	89 a7       	lds	r24, 0x79
    1ef6:	9a a7       	lds	r25, 0x7a
    1ef8:	ab a7       	lds	r26, 0x7b
    1efa:	bc a7       	lds	r27, 0x7c
			handle->ifaceDISH.amount = handle->ifaceDISH.amount * 10 + handle->ifaceKEYPAD.lastkey;
    1efc:	6d a1       	lds	r22, 0x4d
    1efe:	7e a1       	lds	r23, 0x4e
    1f00:	8f a1       	lds	r24, 0x4f
    1f02:	98 a5       	lds	r25, 0x68
    1f04:	2a e0       	ldi	r18, 0x0A	; 10
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e0       	ldi	r20, 0x00	; 0
    1f0a:	50 e0       	ldi	r21, 0x00	; 0
    1f0c:	0e 94 09 18 	call	0x3012	; 0x3012 <__mulsi3>
    1f10:	ab 01       	movw	r20, r22
    1f12:	bc 01       	movw	r22, r24
    1f14:	88 85       	ldd	r24, Y+8	; 0x08
    1f16:	99 85       	ldd	r25, Y+9	; 0x09
    1f18:	aa 85       	ldd	r26, Y+10	; 0x0a
    1f1a:	bb 85       	ldd	r27, Y+11	; 0x0b
    1f1c:	84 0f       	add	r24, r20
    1f1e:	95 1f       	adc	r25, r21
    1f20:	a6 1f       	adc	r26, r22
    1f22:	b7 1f       	adc	r27, r23
    1f24:	8d a3       	lds	r24, 0x5d
    1f26:	9e a3       	lds	r25, 0x5e
    1f28:	af a3       	lds	r26, 0x5f
    1f2a:	b8 a7       	lds	r27, 0x78
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount;
    1f2c:	8e e0       	ldi	r24, 0x0E	; 14
    1f2e:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1f30:	9b 82       	std	Y+3, r9	; 0x03
    1f32:	8a 82       	std	Y+2, r8	; 0x02
    1f34:	70 c5       	rjmp	.+2784   	; 0x2a16 <sMO_runCycle+0x1874>
}

/* The reactions of state EnterAmount. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount(SMO* handle) {
	/* The reactions of state EnterAmount. */
	if (handle->iface.menuId == 0) { 
    1f36:	8a a9       	sts	0x4a, r24
    1f38:	9b a9       	sts	0x4b, r25
    1f3a:	ac a9       	sts	0x4c, r26
    1f3c:	bd a9       	sts	0x4d, r27
    1f3e:	00 97       	sbiw	r24, 0x00	; 0
    1f40:	a1 05       	cpc	r26, r1
    1f42:	b1 05       	cpc	r27, r1
    1f44:	09 f0       	breq	.+2      	; 0x1f48 <sMO_runCycle+0xda6>
    1f46:	69 c0       	rjmp	.+210    	; 0x201a <sMO_runCycle+0xe78>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	8a 30       	cpi	r24, 0x0A	; 10
    1f4c:	41 f1       	breq	.+80     	; 0x1f9e <sMO_runCycle+0xdfc>
    1f4e:	8b 30       	cpi	r24, 0x0B	; 11
    1f50:	40 f4       	brcc	.+16     	; 0x1f62 <sMO_runCycle+0xdc0>
    1f52:	88 30       	cpi	r24, 0x08	; 8
    1f54:	b1 f0       	breq	.+44     	; 0x1f82 <sMO_runCycle+0xde0>
    1f56:	89 30       	cpi	r24, 0x09	; 9
    1f58:	d8 f4       	brcc	.+54     	; 0x1f90 <sMO_runCycle+0xdee>
    1f5a:	87 30       	cpi	r24, 0x07	; 7
    1f5c:	09 f0       	breq	.+2      	; 0x1f60 <sMO_runCycle+0xdbe>
    1f5e:	41 c0       	rjmp	.+130    	; 0x1fe2 <sMO_runCycle+0xe40>
    1f60:	09 c0       	rjmp	.+18     	; 0x1f74 <sMO_runCycle+0xdd2>
    1f62:	8c 30       	cpi	r24, 0x0C	; 12
    1f64:	51 f1       	breq	.+84     	; 0x1fba <sMO_runCycle+0xe18>
    1f66:	8c 30       	cpi	r24, 0x0C	; 12
    1f68:	08 f1       	brcs	.+66     	; 0x1fac <sMO_runCycle+0xe0a>
    1f6a:	8e 30       	cpi	r24, 0x0E	; 14
    1f6c:	69 f1       	breq	.+90     	; 0x1fc8 <sMO_runCycle+0xe26>
    1f6e:	8f 30       	cpi	r24, 0x0F	; 15
    1f70:	c1 f5       	brne	.+112    	; 0x1fe2 <sMO_runCycle+0xe40>
    1f72:	31 c0       	rjmp	.+98     	; 0x1fd6 <sMO_runCycle+0xe34>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1f74:	82 e2       	ldi	r24, 0x22	; 34
    1f76:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	9b 83       	std	Y+3, r25	; 0x03
    1f7e:	8a 83       	std	Y+2, r24	; 0x02
    1f80:	30 c0       	rjmp	.+96     	; 0x1fe2 <sMO_runCycle+0xe40>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1f82:	82 e2       	ldi	r24, 0x22	; 34
    1f84:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	9b 83       	std	Y+3, r25	; 0x03
    1f8c:	8a 83       	std	Y+2, r24	; 0x02
    1f8e:	29 c0       	rjmp	.+82     	; 0x1fe2 <sMO_runCycle+0xe40>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1f90:	82 e2       	ldi	r24, 0x22	; 34
    1f92:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	9b 83       	std	Y+3, r25	; 0x03
    1f9a:	8a 83       	std	Y+2, r24	; 0x02
    1f9c:	22 c0       	rjmp	.+68     	; 0x1fe2 <sMO_runCycle+0xe40>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1f9e:	82 e2       	ldi	r24, 0x22	; 34
    1fa0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	9b 83       	std	Y+3, r25	; 0x03
    1fa8:	8a 83       	std	Y+2, r24	; 0x02
    1faa:	1b c0       	rjmp	.+54     	; 0x1fe2 <sMO_runCycle+0xe40>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1fac:	82 e2       	ldi	r24, 0x22	; 34
    1fae:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	9b 83       	std	Y+3, r25	; 0x03
    1fb6:	8a 83       	std	Y+2, r24	; 0x02
    1fb8:	14 c0       	rjmp	.+40     	; 0x1fe2 <sMO_runCycle+0xe40>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1fba:	82 e2       	ldi	r24, 0x22	; 34
    1fbc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	9b 83       	std	Y+3, r25	; 0x03
    1fc4:	8a 83       	std	Y+2, r24	; 0x02
    1fc6:	0d c0       	rjmp	.+26     	; 0x1fe2 <sMO_runCycle+0xe40>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1fc8:	82 e2       	ldi	r24, 0x22	; 34
    1fca:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	9b 83       	std	Y+3, r25	; 0x03
    1fd2:	8a 83       	std	Y+2, r24	; 0x02
    1fd4:	06 c0       	rjmp	.+12     	; 0x1fe2 <sMO_runCycle+0xe40>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1fd6:	82 e2       	ldi	r24, 0x22	; 34
    1fd8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	9b 83       	std	Y+3, r25	; 0x03
    1fe0:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1fe2:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1fe6:	88 e0       	ldi	r24, 0x08	; 8
    1fe8:	92 e0       	ldi	r25, 0x02	; 2
    1fea:	0e 94 47 02 	call	0x48e	; 0x48e <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-WT  D-PAY", 0, 1);
    1fee:	86 e1       	ldi	r24, 0x16	; 22
    1ff0:	92 e0       	ldi	r25, 0x02	; 2
    1ff2:	40 e0       	ldi	r20, 0x00	; 0
    1ff4:	50 e0       	ldi	r21, 0x00	; 0
    1ff6:	ba 01       	movw	r22, r20
    1ff8:	01 e0       	ldi	r16, 0x01	; 1
    1ffa:	10 e0       	ldi	r17, 0x00	; 0
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	0e 94 4a 02 	call	0x494	; 0x494 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    2004:	1a aa       	sts	0x9a, r17
    2006:	1b aa       	sts	0x9b, r17
    2008:	1c aa       	sts	0x9c, r17
    200a:	1d aa       	sts	0x9d, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    200c:	85 e0       	ldi	r24, 0x05	; 5
    200e:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	9b 83       	std	Y+3, r25	; 0x03
    2016:	8a 83       	std	Y+2, r24	; 0x02
    2018:	fe c4       	rjmp	.+2556   	; 0x2a16 <sMO_runCycle+0x1874>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state EnterAmount */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    201a:	1b 83       	std	Y+3, r17	; 0x03
    201c:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress2 */
			/* Entry action for state 'CheckKeyPress2'. */
			handle->ifaceKEYPAD.lastkey = 0;
    201e:	18 86       	std	Y+8, r1	; 0x08
    2020:	19 86       	std	Y+9, r1	; 0x09
    2022:	1a 86       	std	Y+10, r1	; 0x0a
    2024:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2;
    2026:	39 82       	std	Y+1, r3	; 0x01
    2028:	d4 c4       	rjmp	.+2472   	; 0x29d2 <sMO_runCycle+0x1830>
}

/* The reactions of state null. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1__final_0(SMO* handle) {
	/* The reactions of state null. */
	if (handle->iface.menuId == 0) { 
    202a:	8a a9       	sts	0x4a, r24
    202c:	9b a9       	sts	0x4b, r25
    202e:	ac a9       	sts	0x4c, r26
    2030:	bd a9       	sts	0x4d, r27
    2032:	00 97       	sbiw	r24, 0x00	; 0
    2034:	a1 05       	cpc	r26, r1
    2036:	b1 05       	cpc	r27, r1
    2038:	09 f0       	breq	.+2      	; 0x203c <sMO_runCycle+0xe9a>
    203a:	cb c4       	rjmp	.+2454   	; 0x29d2 <sMO_runCycle+0x1830>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	8a 30       	cpi	r24, 0x0A	; 10
    2040:	41 f1       	breq	.+80     	; 0x2092 <sMO_runCycle+0xef0>
    2042:	8b 30       	cpi	r24, 0x0B	; 11
    2044:	40 f4       	brcc	.+16     	; 0x2056 <sMO_runCycle+0xeb4>
    2046:	88 30       	cpi	r24, 0x08	; 8
    2048:	b1 f0       	breq	.+44     	; 0x2076 <sMO_runCycle+0xed4>
    204a:	89 30       	cpi	r24, 0x09	; 9
    204c:	d8 f4       	brcc	.+54     	; 0x2084 <sMO_runCycle+0xee2>
    204e:	87 30       	cpi	r24, 0x07	; 7
    2050:	09 f0       	breq	.+2      	; 0x2054 <sMO_runCycle+0xeb2>
    2052:	41 c0       	rjmp	.+130    	; 0x20d6 <sMO_runCycle+0xf34>
    2054:	09 c0       	rjmp	.+18     	; 0x2068 <sMO_runCycle+0xec6>
    2056:	8c 30       	cpi	r24, 0x0C	; 12
    2058:	51 f1       	breq	.+84     	; 0x20ae <sMO_runCycle+0xf0c>
    205a:	8c 30       	cpi	r24, 0x0C	; 12
    205c:	08 f1       	brcs	.+66     	; 0x20a0 <sMO_runCycle+0xefe>
    205e:	8e 30       	cpi	r24, 0x0E	; 14
    2060:	69 f1       	breq	.+90     	; 0x20bc <sMO_runCycle+0xf1a>
    2062:	8f 30       	cpi	r24, 0x0F	; 15
    2064:	c1 f5       	brne	.+112    	; 0x20d6 <sMO_runCycle+0xf34>
    2066:	31 c0       	rjmp	.+98     	; 0x20ca <sMO_runCycle+0xf28>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    2068:	82 e2       	ldi	r24, 0x22	; 34
    206a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	9b 83       	std	Y+3, r25	; 0x03
    2072:	8a 83       	std	Y+2, r24	; 0x02
    2074:	30 c0       	rjmp	.+96     	; 0x20d6 <sMO_runCycle+0xf34>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    2076:	82 e2       	ldi	r24, 0x22	; 34
    2078:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	9b 83       	std	Y+3, r25	; 0x03
    2080:	8a 83       	std	Y+2, r24	; 0x02
    2082:	29 c0       	rjmp	.+82     	; 0x20d6 <sMO_runCycle+0xf34>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    2084:	82 e2       	ldi	r24, 0x22	; 34
    2086:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	9b 83       	std	Y+3, r25	; 0x03
    208e:	8a 83       	std	Y+2, r24	; 0x02
    2090:	22 c0       	rjmp	.+68     	; 0x20d6 <sMO_runCycle+0xf34>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    2092:	82 e2       	ldi	r24, 0x22	; 34
    2094:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	9b 83       	std	Y+3, r25	; 0x03
    209c:	8a 83       	std	Y+2, r24	; 0x02
    209e:	1b c0       	rjmp	.+54     	; 0x20d6 <sMO_runCycle+0xf34>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    20a0:	82 e2       	ldi	r24, 0x22	; 34
    20a2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	9b 83       	std	Y+3, r25	; 0x03
    20aa:	8a 83       	std	Y+2, r24	; 0x02
    20ac:	14 c0       	rjmp	.+40     	; 0x20d6 <sMO_runCycle+0xf34>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    20ae:	82 e2       	ldi	r24, 0x22	; 34
    20b0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	9b 83       	std	Y+3, r25	; 0x03
    20b8:	8a 83       	std	Y+2, r24	; 0x02
    20ba:	0d c0       	rjmp	.+26     	; 0x20d6 <sMO_runCycle+0xf34>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    20bc:	82 e2       	ldi	r24, 0x22	; 34
    20be:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	9b 83       	std	Y+3, r25	; 0x03
    20c6:	8a 83       	std	Y+2, r24	; 0x02
    20c8:	06 c0       	rjmp	.+12     	; 0x20d6 <sMO_runCycle+0xf34>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    20ca:	82 e2       	ldi	r24, 0x22	; 34
    20cc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	9b 83       	std	Y+3, r25	; 0x03
    20d4:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    20d6:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    20da:	88 e0       	ldi	r24, 0x08	; 8
    20dc:	92 e0       	ldi	r25, 0x02	; 2
    20de:	0e 94 47 02 	call	0x48e	; 0x48e <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-WT  D-PAY", 0, 1);
    20e2:	86 e1       	ldi	r24, 0x16	; 22
    20e4:	92 e0       	ldi	r25, 0x02	; 2
    20e6:	40 e0       	ldi	r20, 0x00	; 0
    20e8:	50 e0       	ldi	r21, 0x00	; 0
    20ea:	ba 01       	movw	r22, r20
    20ec:	01 e0       	ldi	r16, 0x01	; 1
    20ee:	10 e0       	ldi	r17, 0x00	; 0
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	0e 94 4a 02 	call	0x494	; 0x494 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    20f8:	1a aa       	sts	0x9a, r17
    20fa:	1b aa       	sts	0x9b, r17
    20fc:	1c aa       	sts	0x9c, r17
    20fe:	1d aa       	sts	0x9d, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    2100:	85 e0       	ldi	r24, 0x05	; 5
    2102:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	9b 83       	std	Y+3, r25	; 0x03
    210a:	8a 83       	std	Y+2, r24	; 0x02
    210c:	84 c4       	rjmp	.+2312   	; 0x2a16 <sMO_runCycle+0x1874>
/* The reactions of state MenuA. */
static void sMO_react_main_region_on_r1_Running_running_main_MenuA(SMO* handle) {
	/* The reactions of state MenuA. */
	if (bool_true) { 
		/* Default exit sequence for state MenuA */
		handle->stateConfVector[1] = SMO_last_state;
    210e:	82 e2       	ldi	r24, 0x22	; 34
    2110:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2112:	ee 24       	eor	r14, r14
    2114:	ff 24       	eor	r15, r15
    2116:	e3 94       	inc	r14
    2118:	fb 82       	std	Y+3, r15	; 0x03
    211a:	ea 82       	std	Y+2, r14	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    211c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("ENTER DISH ID:");
    2120:	82 e2       	ldi	r24, 0x22	; 34
    2122:	92 e0       	ldi	r25, 0x02	; 2
    2124:	0e 94 47 02 	call	0x48e	; 0x48e <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    2128:	81 e3       	ldi	r24, 0x31	; 49
    212a:	92 e0       	ldi	r25, 0x02	; 2
    212c:	40 e0       	ldi	r20, 0x00	; 0
    212e:	50 e0       	ldi	r21, 0x00	; 0
    2130:	ba 01       	movw	r22, r20
    2132:	01 e0       	ldi	r16, 0x01	; 1
    2134:	10 e0       	ldi	r17, 0x00	; 0
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	0e 94 4a 02 	call	0x494	; 0x494 <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    213e:	19 a6       	lds	r17, 0xb9
    2140:	1a a6       	lds	r17, 0xba
    2142:	1b a6       	lds	r17, 0xbb
    2144:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    2146:	19 a2       	lds	r17, 0x99
    2148:	1a a2       	lds	r17, 0x9a
    214a:	1b a2       	lds	r17, 0x9b
    214c:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    214e:	87 e0       	ldi	r24, 0x07	; 7
    2150:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2152:	fb 82       	std	Y+3, r15	; 0x03
    2154:	ea 82       	std	Y+2, r14	; 0x02
    2156:	5f c4       	rjmp	.+2238   	; 0x2a16 <sMO_runCycle+0x1874>
}

/* The reactions of state CheckKeyPress. */
static void sMO_react_main_region_on_r1_Running_running_main_CheckKeyPress(SMO* handle) {
	/* The reactions of state CheckKeyPress. */
	if (handle->ifaceKEYPAD.lastkey == 13 && handle->ifaceKEYPAD.key_pressed_raised) { 
    2158:	88 85       	ldd	r24, Y+8	; 0x08
    215a:	99 85       	ldd	r25, Y+9	; 0x09
    215c:	aa 85       	ldd	r26, Y+10	; 0x0a
    215e:	bb 85       	ldd	r27, Y+11	; 0x0b
    2160:	8d 30       	cpi	r24, 0x0D	; 13
    2162:	91 05       	cpc	r25, r1
    2164:	a1 05       	cpc	r26, r1
    2166:	b1 05       	cpc	r27, r1
    2168:	61 f4       	brne	.+24     	; 0x2182 <sMO_runCycle+0xfe0>
    216a:	2d 85       	ldd	r18, Y+13	; 0x0d
    216c:	22 23       	and	r18, r18
    216e:	49 f0       	breq	.+18     	; 0x2182 <sMO_runCycle+0xfe0>
		/* Default exit sequence for state CheckKeyPress */
		handle->stateConfVector[1] = SMO_last_state;
		handle->stateConfVectorPosition = 1;
    2170:	1b 83       	std	Y+3, r17	; 0x03
    2172:	0a 83       	std	Y+2, r16	; 0x02
		/* Default enter sequence for state MenuA */
		/* Entry action for state 'MenuA'. */
		handle->iface.menuId = 1;
    2174:	4a aa       	sts	0x9a, r20
    2176:	5b aa       	sts	0x9b, r21
    2178:	6c aa       	sts	0x9c, r22
    217a:	7d aa       	sts	0x9d, r23
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_MenuA;
    217c:	90 e1       	ldi	r25, 0x10	; 16
    217e:	99 83       	std	Y+1, r25	; 0x01
    2180:	28 c4       	rjmp	.+2128   	; 0x29d2 <sMO_runCycle+0x1830>
		handle->stateConfVectorPosition = 1;
	}  else {
		if (handle->ifaceKEYPAD.lastkey == 14 && handle->ifaceKEYPAD.key_pressed_raised) { 
    2182:	8e 30       	cpi	r24, 0x0E	; 14
    2184:	91 05       	cpc	r25, r1
    2186:	a1 05       	cpc	r26, r1
    2188:	b1 05       	cpc	r27, r1
    218a:	61 f4       	brne	.+24     	; 0x21a4 <sMO_runCycle+0x1002>
    218c:	2d 85       	ldd	r18, Y+13	; 0x0d
    218e:	22 23       	and	r18, r18
    2190:	49 f0       	breq	.+18     	; 0x21a4 <sMO_runCycle+0x1002>
			/* Default exit sequence for state CheckKeyPress */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    2192:	1b 83       	std	Y+3, r17	; 0x03
    2194:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state MenuB */
			/* Entry action for state 'MenuB'. */
			handle->iface.menuId = 2;
    2196:	8a aa       	sts	0x9a, r24
    2198:	9b aa       	sts	0x9b, r25
    219a:	ac aa       	sts	0x9c, r26
    219c:	bd aa       	sts	0x9d, r27
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_MenuB;
    219e:	a6 e1       	ldi	r26, 0x16	; 22
    21a0:	a9 83       	std	Y+1, r26	; 0x01
    21a2:	17 c4       	rjmp	.+2094   	; 0x29d2 <sMO_runCycle+0x1830>
			handle->stateConfVectorPosition = 1;
		}  else {
			if (handle->ifaceKEYPAD.lastkey == 15 && handle->ifaceKEYPAD.key_pressed_raised) { 
    21a4:	8f 30       	cpi	r24, 0x0F	; 15
    21a6:	91 05       	cpc	r25, r1
    21a8:	a1 05       	cpc	r26, r1
    21aa:	b1 05       	cpc	r27, r1
    21ac:	81 f4       	brne	.+32     	; 0x21ce <sMO_runCycle+0x102c>
    21ae:	2d 85       	ldd	r18, Y+13	; 0x0d
    21b0:	22 23       	and	r18, r18
    21b2:	69 f0       	breq	.+26     	; 0x21ce <sMO_runCycle+0x102c>
				/* Default exit sequence for state CheckKeyPress */
				handle->stateConfVector[1] = SMO_last_state;
				handle->stateConfVectorPosition = 1;
    21b4:	1b 83       	std	Y+3, r17	; 0x03
    21b6:	0a 83       	std	Y+2, r16	; 0x02
				/* Default enter sequence for state MenuC */
				/* Entry action for state 'MenuC'. */
				handle->iface.menuId = 3;
    21b8:	83 e0       	ldi	r24, 0x03	; 3
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	a0 e0       	ldi	r26, 0x00	; 0
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	8a ab       	sts	0x5a, r24
    21c2:	9b ab       	sts	0x5b, r25
    21c4:	ac ab       	sts	0x5c, r26
    21c6:	bd ab       	sts	0x5d, r27
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_MenuC;
    21c8:	97 e1       	ldi	r25, 0x17	; 23
    21ca:	99 83       	std	Y+1, r25	; 0x01
    21cc:	02 c4       	rjmp	.+2052   	; 0x29d2 <sMO_runCycle+0x1830>
				handle->stateConfVectorPosition = 1;
			}  else {
				if (handle->ifaceKEYPAD.lastkey == 16 && handle->ifaceKEYPAD.key_pressed_raised) { 
    21ce:	80 31       	cpi	r24, 0x10	; 16
    21d0:	91 05       	cpc	r25, r1
    21d2:	a1 05       	cpc	r26, r1
    21d4:	b1 05       	cpc	r27, r1
    21d6:	09 f0       	breq	.+2      	; 0x21da <sMO_runCycle+0x1038>
    21d8:	fc c3       	rjmp	.+2040   	; 0x29d2 <sMO_runCycle+0x1830>
    21da:	8d 85       	ldd	r24, Y+13	; 0x0d
    21dc:	88 23       	and	r24, r24
    21de:	09 f4       	brne	.+2      	; 0x21e2 <sMO_runCycle+0x1040>
    21e0:	f8 c3       	rjmp	.+2032   	; 0x29d2 <sMO_runCycle+0x1830>
					/* Default exit sequence for state CheckKeyPress */
					handle->stateConfVector[1] = SMO_last_state;
					handle->stateConfVectorPosition = 1;
    21e2:	1b 83       	std	Y+3, r17	; 0x03
    21e4:	0a 83       	std	Y+2, r16	; 0x02
					/* Default enter sequence for state MenuD */
					/* Entry action for state 'MenuD'. */
					handle->iface.menuId = 4;
    21e6:	ca aa       	sts	0x9a, r28
    21e8:	db aa       	sts	0x9b, r29
    21ea:	ec aa       	sts	0x9c, r30
    21ec:	fd aa       	sts	0x9d, r31
					handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_MenuD;
    21ee:	a8 e1       	ldi	r26, 0x18	; 24
    21f0:	a9 83       	std	Y+1, r26	; 0x01
    21f2:	ef c3       	rjmp	.+2014   	; 0x29d2 <sMO_runCycle+0x1830>
}

/* The reactions of state Send. */
static void sMO_react_main_region_on_r1_Running_running_main_SendData_r1_Send(SMO* handle) {
	/* The reactions of state Send. */
	if (handle->ifaceRF.result == bool_true) { 
    21f4:	8f 89       	ldd	r24, Y+23	; 0x17
    21f6:	88 23       	and	r24, r24
    21f8:	d9 f1       	breq	.+118    	; 0x2270 <sMO_runCycle+0x10ce>
		/* Default exit sequence for state SendData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	84 31       	cpi	r24, 0x14	; 20
    21fe:	59 f0       	breq	.+22     	; 0x2216 <sMO_runCycle+0x1074>
    2200:	85 31       	cpi	r24, 0x15	; 21
    2202:	81 f0       	breq	.+32     	; 0x2224 <sMO_runCycle+0x1082>
    2204:	83 31       	cpi	r24, 0x13	; 19
    2206:	a1 f4       	brne	.+40     	; 0x2230 <sMO_runCycle+0x108e>
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    2208:	82 e2       	ldi	r24, 0x22	; 34
    220a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	9b 83       	std	Y+3, r25	; 0x03
    2212:	8a 83       	std	Y+2, r24	; 0x02
    2214:	0d c0       	rjmp	.+26     	; 0x2230 <sMO_runCycle+0x108e>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    2216:	82 e2       	ldi	r24, 0x22	; 34
    2218:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	9b 83       	std	Y+3, r25	; 0x03
    2220:	8a 83       	std	Y+2, r24	; 0x02
    2222:	06 c0       	rjmp	.+12     	; 0x2230 <sMO_runCycle+0x108e>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2224:	82 e2       	ldi	r24, 0x22	; 34
    2226:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	9b 83       	std	Y+3, r25	; 0x03
    222e:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    2230:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("ENTER DISH ID:");
    2234:	82 e2       	ldi	r24, 0x22	; 34
    2236:	92 e0       	ldi	r25, 0x02	; 2
    2238:	0e 94 47 02 	call	0x48e	; 0x48e <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    223c:	81 e3       	ldi	r24, 0x31	; 49
    223e:	92 e0       	ldi	r25, 0x02	; 2
    2240:	40 e0       	ldi	r20, 0x00	; 0
    2242:	50 e0       	ldi	r21, 0x00	; 0
    2244:	ba 01       	movw	r22, r20
    2246:	01 e0       	ldi	r16, 0x01	; 1
    2248:	10 e0       	ldi	r17, 0x00	; 0
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	0e 94 4a 02 	call	0x494	; 0x494 <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    2252:	19 a6       	lds	r17, 0xb9
    2254:	1a a6       	lds	r17, 0xba
    2256:	1b a6       	lds	r17, 0xbb
    2258:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    225a:	19 a2       	lds	r17, 0x99
    225c:	1a a2       	lds	r17, 0x9a
    225e:	1b a2       	lds	r17, 0x9b
    2260:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    2262:	87 e0       	ldi	r24, 0x07	; 7
    2264:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	9b 83       	std	Y+3, r25	; 0x03
    226c:	8a 83       	std	Y+2, r24	; 0x02
    226e:	d3 c3       	rjmp	.+1958   	; 0x2a16 <sMO_runCycle+0x1874>
			handle->stateConfVectorPosition = 1;
		}  else {
			if (handle->ifaceRF.result == bool_false) { 
				/* Default enter sequence for state Send */
				/* Entry action for state 'Send'. */
				handle->ifaceRF.result = sMOIfaceRF_sendData(handle->iface.menuId, handle->iface.tableId, handle->ifaceDISH.ID, handle->ifaceDISH.amount);
    2270:	6a a9       	sts	0x4a, r22
    2272:	7b a9       	sts	0x4b, r23
    2274:	8c a9       	sts	0x4c, r24
    2276:	9d a9       	sts	0x4d, r25
    2278:	2e a9       	sts	0x4e, r18
    227a:	3f a9       	sts	0x4f, r19
    227c:	48 ad       	sts	0x68, r20
    227e:	59 ad       	sts	0x69, r21
    2280:	e9 a0       	lds	r30, 0x89
    2282:	fa a0       	lds	r31, 0x8a
    2284:	0b a1       	lds	r16, 0x4b
    2286:	1c a1       	lds	r17, 0x4c
    2288:	8d a0       	lds	r24, 0x8d
    228a:	9e a0       	lds	r25, 0x8e
    228c:	af a0       	lds	r26, 0x8f
    228e:	b8 a4       	lds	r27, 0xa8
    2290:	65 01       	movw	r12, r10
    2292:	54 01       	movw	r10, r8
    2294:	0e 94 3e 03 	call	0x67c	; 0x67c <sMOIfaceRF_sendData>
    2298:	8f 8b       	std	Y+23, r24	; 0x17
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_Send;
    229a:	83 e1       	ldi	r24, 0x13	; 19
    229c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	9b 83       	std	Y+3, r25	; 0x03
    22a4:	8a 83       	std	Y+2, r24	; 0x02
    22a6:	b7 c3       	rjmp	.+1902   	; 0x2a16 <sMO_runCycle+0x1874>
}

/* The reactions of state Check. */
static void sMO_react_main_region_on_r1_Running_running_main_SendData_r1_Check(SMO* handle) {
	/* The reactions of state Check. */
	if (handle->ifaceRF.result == bool_true) { 
    22a8:	8f 89       	ldd	r24, Y+23	; 0x17
    22aa:	88 23       	and	r24, r24
    22ac:	d9 f1       	breq	.+118    	; 0x2324 <sMO_runCycle+0x1182>
		/* Default exit sequence for state SendData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	84 31       	cpi	r24, 0x14	; 20
    22b2:	59 f0       	breq	.+22     	; 0x22ca <sMO_runCycle+0x1128>
    22b4:	85 31       	cpi	r24, 0x15	; 21
    22b6:	81 f0       	breq	.+32     	; 0x22d8 <sMO_runCycle+0x1136>
    22b8:	83 31       	cpi	r24, 0x13	; 19
    22ba:	a1 f4       	brne	.+40     	; 0x22e4 <sMO_runCycle+0x1142>
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    22bc:	82 e2       	ldi	r24, 0x22	; 34
    22be:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	9b 83       	std	Y+3, r25	; 0x03
    22c6:	8a 83       	std	Y+2, r24	; 0x02
    22c8:	0d c0       	rjmp	.+26     	; 0x22e4 <sMO_runCycle+0x1142>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    22ca:	82 e2       	ldi	r24, 0x22	; 34
    22cc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	9b 83       	std	Y+3, r25	; 0x03
    22d4:	8a 83       	std	Y+2, r24	; 0x02
    22d6:	06 c0       	rjmp	.+12     	; 0x22e4 <sMO_runCycle+0x1142>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    22d8:	82 e2       	ldi	r24, 0x22	; 34
    22da:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	9b 83       	std	Y+3, r25	; 0x03
    22e2:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    22e4:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("ENTER DISH ID:");
    22e8:	82 e2       	ldi	r24, 0x22	; 34
    22ea:	92 e0       	ldi	r25, 0x02	; 2
    22ec:	0e 94 47 02 	call	0x48e	; 0x48e <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    22f0:	81 e3       	ldi	r24, 0x31	; 49
    22f2:	92 e0       	ldi	r25, 0x02	; 2
    22f4:	40 e0       	ldi	r20, 0x00	; 0
    22f6:	50 e0       	ldi	r21, 0x00	; 0
    22f8:	ba 01       	movw	r22, r20
    22fa:	01 e0       	ldi	r16, 0x01	; 1
    22fc:	10 e0       	ldi	r17, 0x00	; 0
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	0e 94 4a 02 	call	0x494	; 0x494 <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    2306:	19 a6       	lds	r17, 0xb9
    2308:	1a a6       	lds	r17, 0xba
    230a:	1b a6       	lds	r17, 0xbb
    230c:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    230e:	19 a2       	lds	r17, 0x99
    2310:	1a a2       	lds	r17, 0x9a
    2312:	1b a2       	lds	r17, 0x9b
    2314:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    2316:	87 e0       	ldi	r24, 0x07	; 7
    2318:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	9b 83       	std	Y+3, r25	; 0x03
    2320:	8a 83       	std	Y+2, r24	; 0x02
    2322:	79 c3       	rjmp	.+1778   	; 0x2a16 <sMO_runCycle+0x1874>
	}  else {
		if (handle->ifaceRF.result == bool_false) { 
			/* Default exit sequence for state Check */
			handle->stateConfVector[1] = SMO_last_state;
    2324:	82 e2       	ldi	r24, 0x22	; 34
    2326:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    2328:	44 24       	eor	r4, r4
    232a:	55 24       	eor	r5, r5
    232c:	43 94       	inc	r4
    232e:	5b 82       	std	Y+3, r5	; 0x03
    2330:	4a 82       	std	Y+2, r4	; 0x02
			/* Default enter sequence for state Send */
			/* Entry action for state 'Send'. */
			handle->ifaceRF.result = sMOIfaceRF_sendData(handle->iface.menuId, handle->iface.tableId, handle->ifaceDISH.ID, handle->ifaceDISH.amount);
    2332:	6a a9       	sts	0x4a, r22
    2334:	7b a9       	sts	0x4b, r23
    2336:	8c a9       	sts	0x4c, r24
    2338:	9d a9       	sts	0x4d, r25
    233a:	2e a9       	sts	0x4e, r18
    233c:	3f a9       	sts	0x4f, r19
    233e:	48 ad       	sts	0x68, r20
    2340:	59 ad       	sts	0x69, r21
    2342:	e9 a0       	lds	r30, 0x89
    2344:	fa a0       	lds	r31, 0x8a
    2346:	0b a1       	lds	r16, 0x4b
    2348:	1c a1       	lds	r17, 0x4c
    234a:	8d a0       	lds	r24, 0x8d
    234c:	9e a0       	lds	r25, 0x8e
    234e:	af a0       	lds	r26, 0x8f
    2350:	b8 a4       	lds	r27, 0xa8
    2352:	65 01       	movw	r12, r10
    2354:	54 01       	movw	r10, r8
    2356:	0e 94 3e 03 	call	0x67c	; 0x67c <sMOIfaceRF_sendData>
    235a:	8f 8b       	std	Y+23, r24	; 0x17
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_Send;
    235c:	83 e1       	ldi	r24, 0x13	; 19
    235e:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    2360:	5b 82       	std	Y+3, r5	; 0x03
    2362:	4a 82       	std	Y+2, r4	; 0x02
    2364:	58 c3       	rjmp	.+1712   	; 0x2a16 <sMO_runCycle+0x1874>
}

/* The reactions of state null. */
static void sMO_react_main_region_on_r1_Running_running_main_SendData_r1__final_0(SMO* handle) {
	/* The reactions of state null. */
	if (handle->ifaceRF.result == bool_true) { 
    2366:	8f 89       	ldd	r24, Y+23	; 0x17
    2368:	88 23       	and	r24, r24
    236a:	09 f4       	brne	.+2      	; 0x236e <sMO_runCycle+0x11cc>
    236c:	32 c3       	rjmp	.+1636   	; 0x29d2 <sMO_runCycle+0x1830>
		/* Default exit sequence for state SendData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	84 31       	cpi	r24, 0x14	; 20
    2372:	59 f0       	breq	.+22     	; 0x238a <sMO_runCycle+0x11e8>
    2374:	85 31       	cpi	r24, 0x15	; 21
    2376:	81 f0       	breq	.+32     	; 0x2398 <sMO_runCycle+0x11f6>
    2378:	83 31       	cpi	r24, 0x13	; 19
    237a:	a1 f4       	brne	.+40     	; 0x23a4 <sMO_runCycle+0x1202>
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    237c:	82 e2       	ldi	r24, 0x22	; 34
    237e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	9b 83       	std	Y+3, r25	; 0x03
    2386:	8a 83       	std	Y+2, r24	; 0x02
    2388:	0d c0       	rjmp	.+26     	; 0x23a4 <sMO_runCycle+0x1202>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    238a:	82 e2       	ldi	r24, 0x22	; 34
    238c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	9b 83       	std	Y+3, r25	; 0x03
    2394:	8a 83       	std	Y+2, r24	; 0x02
    2396:	06 c0       	rjmp	.+12     	; 0x23a4 <sMO_runCycle+0x1202>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2398:	82 e2       	ldi	r24, 0x22	; 34
    239a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	9b 83       	std	Y+3, r25	; 0x03
    23a2:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    23a4:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("ENTER DISH ID:");
    23a8:	82 e2       	ldi	r24, 0x22	; 34
    23aa:	92 e0       	ldi	r25, 0x02	; 2
    23ac:	0e 94 47 02 	call	0x48e	; 0x48e <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    23b0:	81 e3       	ldi	r24, 0x31	; 49
    23b2:	92 e0       	ldi	r25, 0x02	; 2
    23b4:	40 e0       	ldi	r20, 0x00	; 0
    23b6:	50 e0       	ldi	r21, 0x00	; 0
    23b8:	ba 01       	movw	r22, r20
    23ba:	01 e0       	ldi	r16, 0x01	; 1
    23bc:	10 e0       	ldi	r17, 0x00	; 0
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	0e 94 4a 02 	call	0x494	; 0x494 <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    23c6:	19 a6       	lds	r17, 0xb9
    23c8:	1a a6       	lds	r17, 0xba
    23ca:	1b a6       	lds	r17, 0xbb
    23cc:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    23ce:	19 a2       	lds	r17, 0x99
    23d0:	1a a2       	lds	r17, 0x9a
    23d2:	1b a2       	lds	r17, 0x9b
    23d4:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    23d6:	87 e0       	ldi	r24, 0x07	; 7
    23d8:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	9b 83       	std	Y+3, r25	; 0x03
    23e0:	8a 83       	std	Y+2, r24	; 0x02
    23e2:	19 c3       	rjmp	.+1586   	; 0x2a16 <sMO_runCycle+0x1874>
/* The reactions of state MenuB. */
static void sMO_react_main_region_on_r1_Running_running_main_MenuB(SMO* handle) {
	/* The reactions of state MenuB. */
	if (bool_true) { 
		/* Default exit sequence for state MenuB */
		handle->stateConfVector[1] = SMO_last_state;
    23e4:	82 e2       	ldi	r24, 0x22	; 34
    23e6:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    23e8:	ee 24       	eor	r14, r14
    23ea:	ff 24       	eor	r15, r15
    23ec:	e3 94       	inc	r14
    23ee:	fb 82       	std	Y+3, r15	; 0x03
    23f0:	ea 82       	std	Y+2, r14	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    23f2:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("ENTER DISH ID:");
    23f6:	82 e2       	ldi	r24, 0x22	; 34
    23f8:	92 e0       	ldi	r25, 0x02	; 2
    23fa:	0e 94 47 02 	call	0x48e	; 0x48e <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    23fe:	81 e3       	ldi	r24, 0x31	; 49
    2400:	92 e0       	ldi	r25, 0x02	; 2
    2402:	40 e0       	ldi	r20, 0x00	; 0
    2404:	50 e0       	ldi	r21, 0x00	; 0
    2406:	ba 01       	movw	r22, r20
    2408:	01 e0       	ldi	r16, 0x01	; 1
    240a:	10 e0       	ldi	r17, 0x00	; 0
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	0e 94 4a 02 	call	0x494	; 0x494 <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    2414:	19 a6       	lds	r17, 0xb9
    2416:	1a a6       	lds	r17, 0xba
    2418:	1b a6       	lds	r17, 0xbb
    241a:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    241c:	19 a2       	lds	r17, 0x99
    241e:	1a a2       	lds	r17, 0x9a
    2420:	1b a2       	lds	r17, 0x9b
    2422:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    2424:	87 e0       	ldi	r24, 0x07	; 7
    2426:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2428:	fb 82       	std	Y+3, r15	; 0x03
    242a:	ea 82       	std	Y+2, r14	; 0x02
    242c:	f4 c2       	rjmp	.+1512   	; 0x2a16 <sMO_runCycle+0x1874>
/* The reactions of state MenuC. */
static void sMO_react_main_region_on_r1_Running_running_main_MenuC(SMO* handle) {
	/* The reactions of state MenuC. */
	if (bool_true) { 
		/* Default exit sequence for state MenuC */
		handle->stateConfVector[1] = SMO_last_state;
    242e:	82 e2       	ldi	r24, 0x22	; 34
    2430:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2432:	ee 24       	eor	r14, r14
    2434:	ff 24       	eor	r15, r15
    2436:	e3 94       	inc	r14
    2438:	fb 82       	std	Y+3, r15	; 0x03
    243a:	ea 82       	std	Y+2, r14	; 0x02
		/* Default enter sequence for state SendRequest */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state RequestConfirmation */
		/* Entry action for state 'RequestConfirmation'. */
		sMOIfaceLCD_clear();
    243c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("PROCEED?");
    2440:	89 e4       	ldi	r24, 0x49	; 73
    2442:	92 e0       	ldi	r25, 0x02	; 2
    2444:	0e 94 47 02 	call	0x48e	; 0x48e <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("1-NO  2-YES", 0, 1);
    2448:	82 e5       	ldi	r24, 0x52	; 82
    244a:	92 e0       	ldi	r25, 0x02	; 2
    244c:	40 e0       	ldi	r20, 0x00	; 0
    244e:	50 e0       	ldi	r21, 0x00	; 0
    2450:	ba 01       	movw	r22, r20
    2452:	01 e0       	ldi	r16, 0x01	; 1
    2454:	10 e0       	ldi	r17, 0x00	; 0
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	0e 94 4a 02 	call	0x494	; 0x494 <sMOIfaceLCD_writeStringXY>
		handle->ifaceCONF.confirmId = 0;
    245e:	1d a6       	lds	r17, 0xbd
    2460:	1e a6       	lds	r17, 0xbe
    2462:	1f a6       	lds	r17, 0xbf
    2464:	18 aa       	sts	0x98, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendRequest_r1_RequestConfirmation;
    2466:	8a e1       	ldi	r24, 0x1A	; 26
    2468:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    246a:	fb 82       	std	Y+3, r15	; 0x03
    246c:	ea 82       	std	Y+2, r14	; 0x02
    246e:	d3 c2       	rjmp	.+1446   	; 0x2a16 <sMO_runCycle+0x1874>
/* The reactions of state MenuD. */
static void sMO_react_main_region_on_r1_Running_running_main_MenuD(SMO* handle) {
	/* The reactions of state MenuD. */
	if (bool_true) { 
		/* Default exit sequence for state MenuD */
		handle->stateConfVector[1] = SMO_last_state;
    2470:	82 e2       	ldi	r24, 0x22	; 34
    2472:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2474:	ee 24       	eor	r14, r14
    2476:	ff 24       	eor	r15, r15
    2478:	e3 94       	inc	r14
    247a:	fb 82       	std	Y+3, r15	; 0x03
    247c:	ea 82       	std	Y+2, r14	; 0x02
		/* Default enter sequence for state SendRequest */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state RequestConfirmation */
		/* Entry action for state 'RequestConfirmation'. */
		sMOIfaceLCD_clear();
    247e:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("PROCEED?");
    2482:	89 e4       	ldi	r24, 0x49	; 73
    2484:	92 e0       	ldi	r25, 0x02	; 2
    2486:	0e 94 47 02 	call	0x48e	; 0x48e <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("1-NO  2-YES", 0, 1);
    248a:	82 e5       	ldi	r24, 0x52	; 82
    248c:	92 e0       	ldi	r25, 0x02	; 2
    248e:	40 e0       	ldi	r20, 0x00	; 0
    2490:	50 e0       	ldi	r21, 0x00	; 0
    2492:	ba 01       	movw	r22, r20
    2494:	01 e0       	ldi	r16, 0x01	; 1
    2496:	10 e0       	ldi	r17, 0x00	; 0
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	0e 94 4a 02 	call	0x494	; 0x494 <sMOIfaceLCD_writeStringXY>
		handle->ifaceCONF.confirmId = 0;
    24a0:	1d a6       	lds	r17, 0xbd
    24a2:	1e a6       	lds	r17, 0xbe
    24a4:	1f a6       	lds	r17, 0xbf
    24a6:	18 aa       	sts	0x98, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendRequest_r1_RequestConfirmation;
    24a8:	8a e1       	ldi	r24, 0x1A	; 26
    24aa:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    24ac:	fb 82       	std	Y+3, r15	; 0x03
    24ae:	ea 82       	std	Y+2, r14	; 0x02
    24b0:	b2 c2       	rjmp	.+1380   	; 0x2a16 <sMO_runCycle+0x1874>
}

/* The reactions of state RequestConfirmation. */
static void sMO_react_main_region_on_r1_Running_running_main_SendRequest_r1_RequestConfirmation(SMO* handle) {
	/* The reactions of state RequestConfirmation. */
	if (handle->iface.menuId == 0) { 
    24b2:	8a a9       	sts	0x4a, r24
    24b4:	9b a9       	sts	0x4b, r25
    24b6:	ac a9       	sts	0x4c, r26
    24b8:	bd a9       	sts	0x4d, r27
    24ba:	00 97       	sbiw	r24, 0x00	; 0
    24bc:	a1 05       	cpc	r26, r1
    24be:	b1 05       	cpc	r27, r1
    24c0:	09 f0       	breq	.+2      	; 0x24c4 <sMO_runCycle+0x1322>
    24c2:	48 c0       	rjmp	.+144    	; 0x2554 <sMO_runCycle+0x13b2>
		/* Default exit sequence for state SendRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    24c4:	89 81       	ldd	r24, Y+1	; 0x01
    24c6:	8b 31       	cpi	r24, 0x1B	; 27
    24c8:	89 f0       	breq	.+34     	; 0x24ec <sMO_runCycle+0x134a>
    24ca:	8c 31       	cpi	r24, 0x1C	; 28
    24cc:	18 f4       	brcc	.+6      	; 0x24d4 <sMO_runCycle+0x1332>
    24ce:	8a 31       	cpi	r24, 0x1A	; 26
    24d0:	29 f5       	brne	.+74     	; 0x251c <sMO_runCycle+0x137a>
    24d2:	05 c0       	rjmp	.+10     	; 0x24de <sMO_runCycle+0x133c>
    24d4:	8c 31       	cpi	r24, 0x1C	; 28
    24d6:	a9 f0       	breq	.+42     	; 0x2502 <sMO_runCycle+0x1360>
    24d8:	8d 31       	cpi	r24, 0x1D	; 29
    24da:	01 f5       	brne	.+64     	; 0x251c <sMO_runCycle+0x137a>
    24dc:	19 c0       	rjmp	.+50     	; 0x2510 <sMO_runCycle+0x136e>
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_RequestConfirmation : {
				/* Default exit sequence for state RequestConfirmation */
				handle->stateConfVector[1] = SMO_last_state;
    24de:	82 e2       	ldi	r24, 0x22	; 34
    24e0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	9b 83       	std	Y+3, r25	; 0x03
    24e8:	8a 83       	std	Y+2, r24	; 0x02
    24ea:	18 c0       	rjmp	.+48     	; 0x251c <sMO_runCycle+0x137a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_EnterConfirmation : {
				/* Default exit sequence for state EnterConfirmation */
				handle->stateConfVector[1] = SMO_last_state;
    24ec:	82 e2       	ldi	r24, 0x22	; 34
    24ee:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	9b 83       	std	Y+3, r25	; 0x03
    24f6:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'EnterConfirmation'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.EnterConfirmation_time_event_0_raised) );		
    24f8:	ce 01       	movw	r24, r28
    24fa:	cd 96       	adiw	r24, 0x3d	; 61
    24fc:	0e 94 b4 03 	call	0x768	; 0x768 <sMO_unsetTimer>
    2500:	0d c0       	rjmp	.+26     	; 0x251c <sMO_runCycle+0x137a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_CheckKeyPress : {
				/* Default exit sequence for state CheckKeyPress */
				handle->stateConfVector[1] = SMO_last_state;
    2502:	82 e2       	ldi	r24, 0x22	; 34
    2504:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	9b 83       	std	Y+3, r25	; 0x03
    250c:	8a 83       	std	Y+2, r24	; 0x02
    250e:	06 c0       	rjmp	.+12     	; 0x251c <sMO_runCycle+0x137a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2510:	82 e2       	ldi	r24, 0x22	; 34
    2512:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	9b 83       	std	Y+3, r25	; 0x03
    251a:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    251c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    2520:	88 e0       	ldi	r24, 0x08	; 8
    2522:	92 e0       	ldi	r25, 0x02	; 2
    2524:	0e 94 47 02 	call	0x48e	; 0x48e <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-WT  D-PAY", 0, 1);
    2528:	86 e1       	ldi	r24, 0x16	; 22
    252a:	92 e0       	ldi	r25, 0x02	; 2
    252c:	40 e0       	ldi	r20, 0x00	; 0
    252e:	50 e0       	ldi	r21, 0x00	; 0
    2530:	ba 01       	movw	r22, r20
    2532:	01 e0       	ldi	r16, 0x01	; 1
    2534:	10 e0       	ldi	r17, 0x00	; 0
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	0e 94 4a 02 	call	0x494	; 0x494 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    253e:	1a aa       	sts	0x9a, r17
    2540:	1b aa       	sts	0x9b, r17
    2542:	1c aa       	sts	0x9c, r17
    2544:	1d aa       	sts	0x9d, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    2546:	85 e0       	ldi	r24, 0x05	; 5
    2548:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	9b 83       	std	Y+3, r25	; 0x03
    2550:	8a 83       	std	Y+2, r24	; 0x02
    2552:	61 c2       	rjmp	.+1218   	; 0x2a16 <sMO_runCycle+0x1874>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state RequestConfirmation */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    2554:	1b 83       	std	Y+3, r17	; 0x03
    2556:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress */
			/* Entry action for state 'CheckKeyPress'. */
			handle->ifaceKEYPAD.lastkey = 0;
    2558:	18 86       	std	Y+8, r1	; 0x08
    255a:	19 86       	std	Y+9, r1	; 0x09
    255c:	1a 86       	std	Y+10, r1	; 0x0a
    255e:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendRequest_r1_CheckKeyPress;
    2560:	29 82       	std	Y+1, r2	; 0x01
    2562:	37 c2       	rjmp	.+1134   	; 0x29d2 <sMO_runCycle+0x1830>
}

/* The reactions of state EnterConfirmation. */
static void sMO_react_main_region_on_r1_Running_running_main_SendRequest_r1_EnterConfirmation(SMO* handle) {
	/* The reactions of state EnterConfirmation. */
	if (handle->iface.menuId == 0) { 
    2564:	8a a9       	sts	0x4a, r24
    2566:	9b a9       	sts	0x4b, r25
    2568:	ac a9       	sts	0x4c, r26
    256a:	bd a9       	sts	0x4d, r27
    256c:	00 97       	sbiw	r24, 0x00	; 0
    256e:	a1 05       	cpc	r26, r1
    2570:	b1 05       	cpc	r27, r1
    2572:	09 f0       	breq	.+2      	; 0x2576 <sMO_runCycle+0x13d4>
    2574:	48 c0       	rjmp	.+144    	; 0x2606 <sMO_runCycle+0x1464>
		/* Default exit sequence for state SendRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	8b 31       	cpi	r24, 0x1B	; 27
    257a:	89 f0       	breq	.+34     	; 0x259e <sMO_runCycle+0x13fc>
    257c:	8c 31       	cpi	r24, 0x1C	; 28
    257e:	18 f4       	brcc	.+6      	; 0x2586 <sMO_runCycle+0x13e4>
    2580:	8a 31       	cpi	r24, 0x1A	; 26
    2582:	29 f5       	brne	.+74     	; 0x25ce <sMO_runCycle+0x142c>
    2584:	05 c0       	rjmp	.+10     	; 0x2590 <sMO_runCycle+0x13ee>
    2586:	8c 31       	cpi	r24, 0x1C	; 28
    2588:	a9 f0       	breq	.+42     	; 0x25b4 <sMO_runCycle+0x1412>
    258a:	8d 31       	cpi	r24, 0x1D	; 29
    258c:	01 f5       	brne	.+64     	; 0x25ce <sMO_runCycle+0x142c>
    258e:	19 c0       	rjmp	.+50     	; 0x25c2 <sMO_runCycle+0x1420>
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_RequestConfirmation : {
				/* Default exit sequence for state RequestConfirmation */
				handle->stateConfVector[1] = SMO_last_state;
    2590:	82 e2       	ldi	r24, 0x22	; 34
    2592:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	9b 83       	std	Y+3, r25	; 0x03
    259a:	8a 83       	std	Y+2, r24	; 0x02
    259c:	18 c0       	rjmp	.+48     	; 0x25ce <sMO_runCycle+0x142c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_EnterConfirmation : {
				/* Default exit sequence for state EnterConfirmation */
				handle->stateConfVector[1] = SMO_last_state;
    259e:	82 e2       	ldi	r24, 0x22	; 34
    25a0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	9b 83       	std	Y+3, r25	; 0x03
    25a8:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'EnterConfirmation'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.EnterConfirmation_time_event_0_raised) );		
    25aa:	ce 01       	movw	r24, r28
    25ac:	cd 96       	adiw	r24, 0x3d	; 61
    25ae:	0e 94 b4 03 	call	0x768	; 0x768 <sMO_unsetTimer>
    25b2:	0d c0       	rjmp	.+26     	; 0x25ce <sMO_runCycle+0x142c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_CheckKeyPress : {
				/* Default exit sequence for state CheckKeyPress */
				handle->stateConfVector[1] = SMO_last_state;
    25b4:	82 e2       	ldi	r24, 0x22	; 34
    25b6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	9b 83       	std	Y+3, r25	; 0x03
    25be:	8a 83       	std	Y+2, r24	; 0x02
    25c0:	06 c0       	rjmp	.+12     	; 0x25ce <sMO_runCycle+0x142c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    25c2:	82 e2       	ldi	r24, 0x22	; 34
    25c4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	9b 83       	std	Y+3, r25	; 0x03
    25cc:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    25ce:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    25d2:	88 e0       	ldi	r24, 0x08	; 8
    25d4:	92 e0       	ldi	r25, 0x02	; 2
    25d6:	0e 94 47 02 	call	0x48e	; 0x48e <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-WT  D-PAY", 0, 1);
    25da:	86 e1       	ldi	r24, 0x16	; 22
    25dc:	92 e0       	ldi	r25, 0x02	; 2
    25de:	40 e0       	ldi	r20, 0x00	; 0
    25e0:	50 e0       	ldi	r21, 0x00	; 0
    25e2:	ba 01       	movw	r22, r20
    25e4:	01 e0       	ldi	r16, 0x01	; 1
    25e6:	10 e0       	ldi	r17, 0x00	; 0
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	0e 94 4a 02 	call	0x494	; 0x494 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    25f0:	1a aa       	sts	0x9a, r17
    25f2:	1b aa       	sts	0x9b, r17
    25f4:	1c aa       	sts	0x9c, r17
    25f6:	1d aa       	sts	0x9d, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    25f8:	85 e0       	ldi	r24, 0x05	; 5
    25fa:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	9b 83       	std	Y+3, r25	; 0x03
    2602:	8a 83       	std	Y+2, r24	; 0x02
    2604:	08 c2       	rjmp	.+1040   	; 0x2a16 <sMO_runCycle+0x1874>
	}  else {
		if (handle->timeEvents.EnterConfirmation_time_event_0_raised) { 
    2606:	8d ad       	sts	0x6d, r24
    2608:	88 23       	and	r24, r24
    260a:	09 f4       	brne	.+2      	; 0x260e <sMO_runCycle+0x146c>
    260c:	e2 c1       	rjmp	.+964    	; 0x29d2 <sMO_runCycle+0x1830>
			/* Default exit sequence for state EnterConfirmation */
			handle->stateConfVector[1] = SMO_last_state;
    260e:	82 e2       	ldi	r24, 0x22	; 34
    2610:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    2612:	01 e0       	ldi	r16, 0x01	; 1
    2614:	10 e0       	ldi	r17, 0x00	; 0
    2616:	1b 83       	std	Y+3, r17	; 0x03
    2618:	0a 83       	std	Y+2, r16	; 0x02
			/* Exit action for state 'EnterConfirmation'. */
			sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.EnterConfirmation_time_event_0_raised) );		
    261a:	ce 01       	movw	r24, r28
    261c:	cd 96       	adiw	r24, 0x3d	; 61
    261e:	0e 94 b4 03 	call	0x768	; 0x768 <sMO_unsetTimer>
			/* Default enter sequence for state CheckKeyPress */
			/* Entry action for state 'CheckKeyPress'. */
			handle->ifaceKEYPAD.lastkey = 0;
    2622:	18 86       	std	Y+8, r1	; 0x08
    2624:	19 86       	std	Y+9, r1	; 0x09
    2626:	1a 86       	std	Y+10, r1	; 0x0a
    2628:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendRequest_r1_CheckKeyPress;
    262a:	8c e1       	ldi	r24, 0x1C	; 28
    262c:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    262e:	1b 83       	std	Y+3, r17	; 0x03
    2630:	0a 83       	std	Y+2, r16	; 0x02
    2632:	f1 c1       	rjmp	.+994    	; 0x2a16 <sMO_runCycle+0x1874>
}

/* The reactions of state CheckKeyPress. */
static void sMO_react_main_region_on_r1_Running_running_main_SendRequest_r1_CheckKeyPress(SMO* handle) {
	/* The reactions of state CheckKeyPress. */
	if (handle->iface.menuId == 0) { 
    2634:	8a a9       	sts	0x4a, r24
    2636:	9b a9       	sts	0x4b, r25
    2638:	ac a9       	sts	0x4c, r26
    263a:	bd a9       	sts	0x4d, r27
    263c:	00 97       	sbiw	r24, 0x00	; 0
    263e:	a1 05       	cpc	r26, r1
    2640:	b1 05       	cpc	r27, r1
    2642:	09 f0       	breq	.+2      	; 0x2646 <sMO_runCycle+0x14a4>
    2644:	48 c0       	rjmp	.+144    	; 0x26d6 <sMO_runCycle+0x1534>
		/* Default exit sequence for state SendRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2646:	89 81       	ldd	r24, Y+1	; 0x01
    2648:	8b 31       	cpi	r24, 0x1B	; 27
    264a:	89 f0       	breq	.+34     	; 0x266e <sMO_runCycle+0x14cc>
    264c:	8c 31       	cpi	r24, 0x1C	; 28
    264e:	18 f4       	brcc	.+6      	; 0x2656 <sMO_runCycle+0x14b4>
    2650:	8a 31       	cpi	r24, 0x1A	; 26
    2652:	29 f5       	brne	.+74     	; 0x269e <sMO_runCycle+0x14fc>
    2654:	05 c0       	rjmp	.+10     	; 0x2660 <sMO_runCycle+0x14be>
    2656:	8c 31       	cpi	r24, 0x1C	; 28
    2658:	a9 f0       	breq	.+42     	; 0x2684 <sMO_runCycle+0x14e2>
    265a:	8d 31       	cpi	r24, 0x1D	; 29
    265c:	01 f5       	brne	.+64     	; 0x269e <sMO_runCycle+0x14fc>
    265e:	19 c0       	rjmp	.+50     	; 0x2692 <sMO_runCycle+0x14f0>
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_RequestConfirmation : {
				/* Default exit sequence for state RequestConfirmation */
				handle->stateConfVector[1] = SMO_last_state;
    2660:	82 e2       	ldi	r24, 0x22	; 34
    2662:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	9b 83       	std	Y+3, r25	; 0x03
    266a:	8a 83       	std	Y+2, r24	; 0x02
    266c:	18 c0       	rjmp	.+48     	; 0x269e <sMO_runCycle+0x14fc>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_EnterConfirmation : {
				/* Default exit sequence for state EnterConfirmation */
				handle->stateConfVector[1] = SMO_last_state;
    266e:	82 e2       	ldi	r24, 0x22	; 34
    2670:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	9b 83       	std	Y+3, r25	; 0x03
    2678:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'EnterConfirmation'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.EnterConfirmation_time_event_0_raised) );		
    267a:	ce 01       	movw	r24, r28
    267c:	cd 96       	adiw	r24, 0x3d	; 61
    267e:	0e 94 b4 03 	call	0x768	; 0x768 <sMO_unsetTimer>
    2682:	0d c0       	rjmp	.+26     	; 0x269e <sMO_runCycle+0x14fc>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_CheckKeyPress : {
				/* Default exit sequence for state CheckKeyPress */
				handle->stateConfVector[1] = SMO_last_state;
    2684:	82 e2       	ldi	r24, 0x22	; 34
    2686:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	9b 83       	std	Y+3, r25	; 0x03
    268e:	8a 83       	std	Y+2, r24	; 0x02
    2690:	06 c0       	rjmp	.+12     	; 0x269e <sMO_runCycle+0x14fc>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2692:	82 e2       	ldi	r24, 0x22	; 34
    2694:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	9b 83       	std	Y+3, r25	; 0x03
    269c:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    269e:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    26a2:	88 e0       	ldi	r24, 0x08	; 8
    26a4:	92 e0       	ldi	r25, 0x02	; 2
    26a6:	0e 94 47 02 	call	0x48e	; 0x48e <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-WT  D-PAY", 0, 1);
    26aa:	86 e1       	ldi	r24, 0x16	; 22
    26ac:	92 e0       	ldi	r25, 0x02	; 2
    26ae:	40 e0       	ldi	r20, 0x00	; 0
    26b0:	50 e0       	ldi	r21, 0x00	; 0
    26b2:	ba 01       	movw	r22, r20
    26b4:	01 e0       	ldi	r16, 0x01	; 1
    26b6:	10 e0       	ldi	r17, 0x00	; 0
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	0e 94 4a 02 	call	0x494	; 0x494 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    26c0:	1a aa       	sts	0x9a, r17
    26c2:	1b aa       	sts	0x9b, r17
    26c4:	1c aa       	sts	0x9c, r17
    26c6:	1d aa       	sts	0x9d, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    26c8:	85 e0       	ldi	r24, 0x05	; 5
    26ca:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	9b 83       	std	Y+3, r25	; 0x03
    26d2:	8a 83       	std	Y+2, r24	; 0x02
    26d4:	a0 c1       	rjmp	.+832    	; 0x2a16 <sMO_runCycle+0x1874>
	}  else {
		if (handle->ifaceKEYPAD.lastkey == 2 && handle->ifaceKEYPAD.key_pressed_raised) { 
    26d6:	88 85       	ldd	r24, Y+8	; 0x08
    26d8:	99 85       	ldd	r25, Y+9	; 0x09
    26da:	aa 85       	ldd	r26, Y+10	; 0x0a
    26dc:	bb 85       	ldd	r27, Y+11	; 0x0b
    26de:	82 30       	cpi	r24, 0x02	; 2
    26e0:	91 05       	cpc	r25, r1
    26e2:	a1 05       	cpc	r26, r1
    26e4:	b1 05       	cpc	r27, r1
    26e6:	29 f5       	brne	.+74     	; 0x2732 <sMO_runCycle+0x1590>
    26e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ea:	88 23       	and	r24, r24
    26ec:	61 f1       	breq	.+88     	; 0x2746 <sMO_runCycle+0x15a4>
			/* Default exit sequence for state CheckKeyPress */
			handle->stateConfVector[1] = SMO_last_state;
    26ee:	82 e2       	ldi	r24, 0x22	; 34
    26f0:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    26f2:	01 e0       	ldi	r16, 0x01	; 1
    26f4:	10 e0       	ldi	r17, 0x00	; 0
    26f6:	1b 83       	std	Y+3, r17	; 0x03
    26f8:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state EnterConfirmation */
			/* Entry action for state 'EnterConfirmation'. */
			sMO_setTimer( (sc_eventid) &(handle->timeEvents.EnterConfirmation_time_event_0_raised) , 3 * 1000, bool_false);
    26fa:	ce 01       	movw	r24, r28
    26fc:	cd 96       	adiw	r24, 0x3d	; 61
    26fe:	48 eb       	ldi	r20, 0xB8	; 184
    2700:	5b e0       	ldi	r21, 0x0B	; 11
    2702:	60 e0       	ldi	r22, 0x00	; 0
    2704:	70 e0       	ldi	r23, 0x00	; 0
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	0e 94 b1 03 	call	0x762	; 0x762 <sMO_setTimer>
			sMOIfaceLCD_clear();
    270c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <sMOIfaceLCD_clear>
			sMOIfaceLCD_writeString("Order Transferring");
    2710:	8e e5       	ldi	r24, 0x5E	; 94
    2712:	92 e0       	ldi	r25, 0x02	; 2
    2714:	0e 94 47 02 	call	0x48e	; 0x48e <sMOIfaceLCD_writeString>
			handle->ifaceCONF.confirmId = handle->ifaceKEYPAD.lastkey;
    2718:	88 85       	ldd	r24, Y+8	; 0x08
    271a:	99 85       	ldd	r25, Y+9	; 0x09
    271c:	aa 85       	ldd	r26, Y+10	; 0x0a
    271e:	bb 85       	ldd	r27, Y+11	; 0x0b
    2720:	8d a7       	lds	r24, 0x7d
    2722:	9e a7       	lds	r25, 0x7e
    2724:	af a7       	lds	r26, 0x7f
    2726:	b8 ab       	sts	0x58, r27
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendRequest_r1_EnterConfirmation;
    2728:	8b e1       	ldi	r24, 0x1B	; 27
    272a:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    272c:	1b 83       	std	Y+3, r17	; 0x03
    272e:	0a 83       	std	Y+2, r16	; 0x02
    2730:	72 c1       	rjmp	.+740    	; 0x2a16 <sMO_runCycle+0x1874>
				handle->ifaceRF.result = bool_false;
				handle->ifaceRF.retry = 0;
				/* Default enter sequence for state SendConfirm */
				/* Default enter sequence for region r1 */
			}  else {
				if (handle->ifaceKEYPAD.lastkey == 2 || handle->ifaceKEYPAD.lastkey == 1 && handle->ifaceKEYPAD.key_pressed_raised) { 
    2732:	81 30       	cpi	r24, 0x01	; 1
    2734:	91 05       	cpc	r25, r1
    2736:	a1 05       	cpc	r26, r1
    2738:	b1 05       	cpc	r27, r1
    273a:	09 f0       	breq	.+2      	; 0x273e <sMO_runCycle+0x159c>
    273c:	4a c1       	rjmp	.+660    	; 0x29d2 <sMO_runCycle+0x1830>
    273e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2740:	88 23       	and	r24, r24
    2742:	09 f4       	brne	.+2      	; 0x2746 <sMO_runCycle+0x15a4>
    2744:	46 c1       	rjmp	.+652    	; 0x29d2 <sMO_runCycle+0x1830>
					/* Default exit sequence for state CheckKeyPress */
					handle->stateConfVector[1] = SMO_last_state;
					handle->stateConfVectorPosition = 1;
    2746:	1b 83       	std	Y+3, r17	; 0x03
    2748:	0a 83       	std	Y+2, r16	; 0x02
					handle->iface.menuId = 0;
    274a:	1a aa       	sts	0x9a, r17
    274c:	1b aa       	sts	0x9b, r17
    274e:	1c aa       	sts	0x9c, r17
    2750:	1d aa       	sts	0x9d, r17
					/* Default enter sequence for state null */
					handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_;
    2752:	bd e1       	ldi	r27, 0x1D	; 29
    2754:	b9 83       	std	Y+1, r27	; 0x01
    2756:	3d c1       	rjmp	.+634    	; 0x29d2 <sMO_runCycle+0x1830>
}

/* The reactions of state null. */
static void sMO_react_main_region_on_r1_Running_running_main_SendRequest_r1__final_0(SMO* handle) {
	/* The reactions of state null. */
	if (handle->iface.menuId == 0) { 
    2758:	8a a9       	sts	0x4a, r24
    275a:	9b a9       	sts	0x4b, r25
    275c:	ac a9       	sts	0x4c, r26
    275e:	bd a9       	sts	0x4d, r27
    2760:	00 97       	sbiw	r24, 0x00	; 0
    2762:	a1 05       	cpc	r26, r1
    2764:	b1 05       	cpc	r27, r1
    2766:	09 f0       	breq	.+2      	; 0x276a <sMO_runCycle+0x15c8>
    2768:	34 c1       	rjmp	.+616    	; 0x29d2 <sMO_runCycle+0x1830>
		/* Default exit sequence for state SendRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    276a:	89 81       	ldd	r24, Y+1	; 0x01
    276c:	8b 31       	cpi	r24, 0x1B	; 27
    276e:	89 f0       	breq	.+34     	; 0x2792 <sMO_runCycle+0x15f0>
    2770:	8c 31       	cpi	r24, 0x1C	; 28
    2772:	18 f4       	brcc	.+6      	; 0x277a <sMO_runCycle+0x15d8>
    2774:	8a 31       	cpi	r24, 0x1A	; 26
    2776:	29 f5       	brne	.+74     	; 0x27c2 <sMO_runCycle+0x1620>
    2778:	05 c0       	rjmp	.+10     	; 0x2784 <sMO_runCycle+0x15e2>
    277a:	8c 31       	cpi	r24, 0x1C	; 28
    277c:	a9 f0       	breq	.+42     	; 0x27a8 <sMO_runCycle+0x1606>
    277e:	8d 31       	cpi	r24, 0x1D	; 29
    2780:	01 f5       	brne	.+64     	; 0x27c2 <sMO_runCycle+0x1620>
    2782:	19 c0       	rjmp	.+50     	; 0x27b6 <sMO_runCycle+0x1614>
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_RequestConfirmation : {
				/* Default exit sequence for state RequestConfirmation */
				handle->stateConfVector[1] = SMO_last_state;
    2784:	82 e2       	ldi	r24, 0x22	; 34
    2786:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	9b 83       	std	Y+3, r25	; 0x03
    278e:	8a 83       	std	Y+2, r24	; 0x02
    2790:	18 c0       	rjmp	.+48     	; 0x27c2 <sMO_runCycle+0x1620>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_EnterConfirmation : {
				/* Default exit sequence for state EnterConfirmation */
				handle->stateConfVector[1] = SMO_last_state;
    2792:	82 e2       	ldi	r24, 0x22	; 34
    2794:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	9b 83       	std	Y+3, r25	; 0x03
    279c:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'EnterConfirmation'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.EnterConfirmation_time_event_0_raised) );		
    279e:	ce 01       	movw	r24, r28
    27a0:	cd 96       	adiw	r24, 0x3d	; 61
    27a2:	0e 94 b4 03 	call	0x768	; 0x768 <sMO_unsetTimer>
    27a6:	0d c0       	rjmp	.+26     	; 0x27c2 <sMO_runCycle+0x1620>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_CheckKeyPress : {
				/* Default exit sequence for state CheckKeyPress */
				handle->stateConfVector[1] = SMO_last_state;
    27a8:	82 e2       	ldi	r24, 0x22	; 34
    27aa:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	9b 83       	std	Y+3, r25	; 0x03
    27b2:	8a 83       	std	Y+2, r24	; 0x02
    27b4:	06 c0       	rjmp	.+12     	; 0x27c2 <sMO_runCycle+0x1620>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    27b6:	82 e2       	ldi	r24, 0x22	; 34
    27b8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	9b 83       	std	Y+3, r25	; 0x03
    27c0:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    27c2:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    27c6:	88 e0       	ldi	r24, 0x08	; 8
    27c8:	92 e0       	ldi	r25, 0x02	; 2
    27ca:	0e 94 47 02 	call	0x48e	; 0x48e <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-WT  D-PAY", 0, 1);
    27ce:	86 e1       	ldi	r24, 0x16	; 22
    27d0:	92 e0       	ldi	r25, 0x02	; 2
    27d2:	40 e0       	ldi	r20, 0x00	; 0
    27d4:	50 e0       	ldi	r21, 0x00	; 0
    27d6:	ba 01       	movw	r22, r20
    27d8:	01 e0       	ldi	r16, 0x01	; 1
    27da:	10 e0       	ldi	r17, 0x00	; 0
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	0e 94 4a 02 	call	0x494	; 0x494 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    27e4:	1a aa       	sts	0x9a, r17
    27e6:	1b aa       	sts	0x9b, r17
    27e8:	1c aa       	sts	0x9c, r17
    27ea:	1d aa       	sts	0x9d, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    27ec:	85 e0       	ldi	r24, 0x05	; 5
    27ee:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	9b 83       	std	Y+3, r25	; 0x03
    27f6:	8a 83       	std	Y+2, r24	; 0x02
    27f8:	0e c1       	rjmp	.+540    	; 0x2a16 <sMO_runCycle+0x1874>
}

/* The reactions of state SendConfirmation. */
static void sMO_react_main_region_on_r1_Running_running_main_SendConfirm_r1_SendConfirmation(SMO* handle) {
	/* The reactions of state SendConfirmation. */
	if (handle->ifaceRF.result == bool_true) { 
    27fa:	8f 89       	ldd	r24, Y+23	; 0x17
    27fc:	88 23       	and	r24, r24
    27fe:	b9 f1       	breq	.+110    	; 0x286e <sMO_runCycle+0x16cc>
		/* Default exit sequence for state SendConfirm */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	80 32       	cpi	r24, 0x20	; 32
    2804:	59 f0       	breq	.+22     	; 0x281c <sMO_runCycle+0x167a>
    2806:	81 32       	cpi	r24, 0x21	; 33
    2808:	81 f0       	breq	.+32     	; 0x282a <sMO_runCycle+0x1688>
    280a:	8f 31       	cpi	r24, 0x1F	; 31
    280c:	a1 f4       	brne	.+40     	; 0x2836 <sMO_runCycle+0x1694>
			case SMO_main_region_on_r1_Running_running_main_SendConfirm_r1_SendConfirmation : {
				/* Default exit sequence for state SendConfirmation */
				handle->stateConfVector[1] = SMO_last_state;
    280e:	82 e2       	ldi	r24, 0x22	; 34
    2810:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	9b 83       	std	Y+3, r25	; 0x03
    2818:	8a 83       	std	Y+2, r24	; 0x02
    281a:	0d c0       	rjmp	.+26     	; 0x2836 <sMO_runCycle+0x1694>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendConfirm_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    281c:	82 e2       	ldi	r24, 0x22	; 34
    281e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	9b 83       	std	Y+3, r25	; 0x03
    2826:	8a 83       	std	Y+2, r24	; 0x02
    2828:	06 c0       	rjmp	.+12     	; 0x2836 <sMO_runCycle+0x1694>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendConfirm_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    282a:	82 e2       	ldi	r24, 0x22	; 34
    282c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	9b 83       	std	Y+3, r25	; 0x03
    2834:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state SendRequest */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state RequestConfirmation */
		/* Entry action for state 'RequestConfirmation'. */
		sMOIfaceLCD_clear();
    2836:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("PROCEED?");
    283a:	89 e4       	ldi	r24, 0x49	; 73
    283c:	92 e0       	ldi	r25, 0x02	; 2
    283e:	0e 94 47 02 	call	0x48e	; 0x48e <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("1-NO  2-YES", 0, 1);
    2842:	82 e5       	ldi	r24, 0x52	; 82
    2844:	92 e0       	ldi	r25, 0x02	; 2
    2846:	40 e0       	ldi	r20, 0x00	; 0
    2848:	50 e0       	ldi	r21, 0x00	; 0
    284a:	ba 01       	movw	r22, r20
    284c:	01 e0       	ldi	r16, 0x01	; 1
    284e:	10 e0       	ldi	r17, 0x00	; 0
    2850:	20 e0       	ldi	r18, 0x00	; 0
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	0e 94 4a 02 	call	0x494	; 0x494 <sMOIfaceLCD_writeStringXY>
		handle->ifaceCONF.confirmId = 0;
    2858:	1d a6       	lds	r17, 0xbd
    285a:	1e a6       	lds	r17, 0xbe
    285c:	1f a6       	lds	r17, 0xbf
    285e:	18 aa       	sts	0x98, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendRequest_r1_RequestConfirmation;
    2860:	8a e1       	ldi	r24, 0x1A	; 26
    2862:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	9b 83       	std	Y+3, r25	; 0x03
    286a:	8a 83       	std	Y+2, r24	; 0x02
    286c:	d4 c0       	rjmp	.+424    	; 0x2a16 <sMO_runCycle+0x1874>
			handle->stateConfVectorPosition = 1;
		}  else {
			if (handle->ifaceRF.result == bool_false) { 
				/* Default enter sequence for state SendConfirmation */
				/* Entry action for state 'SendConfirmation'. */
				handle->ifaceRF.result = sMOIfaceRF_sendConf(handle->iface.menuId, handle->iface.tableId);
    286e:	6a a9       	sts	0x4a, r22
    2870:	7b a9       	sts	0x4b, r23
    2872:	8c a9       	sts	0x4c, r24
    2874:	9d a9       	sts	0x4d, r25
    2876:	2e a9       	sts	0x4e, r18
    2878:	3f a9       	sts	0x4f, r19
    287a:	48 ad       	sts	0x68, r20
    287c:	59 ad       	sts	0x69, r21
    287e:	0e 94 8a 03 	call	0x714	; 0x714 <sMOIfaceRF_sendConf>
    2882:	8f 8b       	std	Y+23, r24	; 0x17
				handle->ifaceRF.retry += 1;
    2884:	88 8d       	ldd	r24, Y+24	; 0x18
    2886:	99 8d       	ldd	r25, Y+25	; 0x19
    2888:	aa 8d       	ldd	r26, Y+26	; 0x1a
    288a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    288c:	01 96       	adiw	r24, 0x01	; 1
    288e:	a1 1d       	adc	r26, r1
    2890:	b1 1d       	adc	r27, r1
    2892:	88 8f       	std	Y+24, r24	; 0x18
    2894:	99 8f       	std	Y+25, r25	; 0x19
    2896:	aa 8f       	std	Y+26, r26	; 0x1a
    2898:	bb 8f       	std	Y+27, r27	; 0x1b
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendConfirm_r1_SendConfirmation;
    289a:	8f e1       	ldi	r24, 0x1F	; 31
    289c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	9b 83       	std	Y+3, r25	; 0x03
    28a4:	8a 83       	std	Y+2, r24	; 0x02
    28a6:	b7 c0       	rjmp	.+366    	; 0x2a16 <sMO_runCycle+0x1874>
}

/* The reactions of state Check. */
static void sMO_react_main_region_on_r1_Running_running_main_SendConfirm_r1_Check(SMO* handle) {
	/* The reactions of state Check. */
	if (handle->ifaceRF.result == bool_true) { 
    28a8:	8f 89       	ldd	r24, Y+23	; 0x17
    28aa:	88 23       	and	r24, r24
    28ac:	b9 f1       	breq	.+110    	; 0x291c <sMO_runCycle+0x177a>
		/* Default exit sequence for state SendConfirm */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	80 32       	cpi	r24, 0x20	; 32
    28b2:	59 f0       	breq	.+22     	; 0x28ca <sMO_runCycle+0x1728>
    28b4:	81 32       	cpi	r24, 0x21	; 33
    28b6:	81 f0       	breq	.+32     	; 0x28d8 <sMO_runCycle+0x1736>
    28b8:	8f 31       	cpi	r24, 0x1F	; 31
    28ba:	a1 f4       	brne	.+40     	; 0x28e4 <sMO_runCycle+0x1742>
			case SMO_main_region_on_r1_Running_running_main_SendConfirm_r1_SendConfirmation : {
				/* Default exit sequence for state SendConfirmation */
				handle->stateConfVector[1] = SMO_last_state;
    28bc:	82 e2       	ldi	r24, 0x22	; 34
    28be:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	9b 83       	std	Y+3, r25	; 0x03
    28c6:	8a 83       	std	Y+2, r24	; 0x02
    28c8:	0d c0       	rjmp	.+26     	; 0x28e4 <sMO_runCycle+0x1742>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendConfirm_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    28ca:	82 e2       	ldi	r24, 0x22	; 34
    28cc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	9b 83       	std	Y+3, r25	; 0x03
    28d4:	8a 83       	std	Y+2, r24	; 0x02
    28d6:	06 c0       	rjmp	.+12     	; 0x28e4 <sMO_runCycle+0x1742>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendConfirm_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    28d8:	82 e2       	ldi	r24, 0x22	; 34
    28da:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	9b 83       	std	Y+3, r25	; 0x03
    28e2:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state SendRequest */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state RequestConfirmation */
		/* Entry action for state 'RequestConfirmation'. */
		sMOIfaceLCD_clear();
    28e4:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("PROCEED?");
    28e8:	89 e4       	ldi	r24, 0x49	; 73
    28ea:	92 e0       	ldi	r25, 0x02	; 2
    28ec:	0e 94 47 02 	call	0x48e	; 0x48e <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("1-NO  2-YES", 0, 1);
    28f0:	82 e5       	ldi	r24, 0x52	; 82
    28f2:	92 e0       	ldi	r25, 0x02	; 2
    28f4:	40 e0       	ldi	r20, 0x00	; 0
    28f6:	50 e0       	ldi	r21, 0x00	; 0
    28f8:	ba 01       	movw	r22, r20
    28fa:	01 e0       	ldi	r16, 0x01	; 1
    28fc:	10 e0       	ldi	r17, 0x00	; 0
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	0e 94 4a 02 	call	0x494	; 0x494 <sMOIfaceLCD_writeStringXY>
		handle->ifaceCONF.confirmId = 0;
    2906:	1d a6       	lds	r17, 0xbd
    2908:	1e a6       	lds	r17, 0xbe
    290a:	1f a6       	lds	r17, 0xbf
    290c:	18 aa       	sts	0x98, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendRequest_r1_RequestConfirmation;
    290e:	8a e1       	ldi	r24, 0x1A	; 26
    2910:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	9b 83       	std	Y+3, r25	; 0x03
    2918:	8a 83       	std	Y+2, r24	; 0x02
    291a:	7d c0       	rjmp	.+250    	; 0x2a16 <sMO_runCycle+0x1874>
	}  else {
		if (handle->ifaceRF.result == bool_false) { 
			/* Default exit sequence for state Check */
			handle->stateConfVector[1] = SMO_last_state;
    291c:	82 e2       	ldi	r24, 0x22	; 34
    291e:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    2920:	01 e0       	ldi	r16, 0x01	; 1
    2922:	10 e0       	ldi	r17, 0x00	; 0
    2924:	1b 83       	std	Y+3, r17	; 0x03
    2926:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state SendConfirmation */
			/* Entry action for state 'SendConfirmation'. */
			handle->ifaceRF.result = sMOIfaceRF_sendConf(handle->iface.menuId, handle->iface.tableId);
    2928:	6a a9       	sts	0x4a, r22
    292a:	7b a9       	sts	0x4b, r23
    292c:	8c a9       	sts	0x4c, r24
    292e:	9d a9       	sts	0x4d, r25
    2930:	2e a9       	sts	0x4e, r18
    2932:	3f a9       	sts	0x4f, r19
    2934:	48 ad       	sts	0x68, r20
    2936:	59 ad       	sts	0x69, r21
    2938:	0e 94 8a 03 	call	0x714	; 0x714 <sMOIfaceRF_sendConf>
    293c:	8f 8b       	std	Y+23, r24	; 0x17
			handle->ifaceRF.retry += 1;
    293e:	88 8d       	ldd	r24, Y+24	; 0x18
    2940:	99 8d       	ldd	r25, Y+25	; 0x19
    2942:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2944:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2946:	01 96       	adiw	r24, 0x01	; 1
    2948:	a1 1d       	adc	r26, r1
    294a:	b1 1d       	adc	r27, r1
    294c:	88 8f       	std	Y+24, r24	; 0x18
    294e:	99 8f       	std	Y+25, r25	; 0x19
    2950:	aa 8f       	std	Y+26, r26	; 0x1a
    2952:	bb 8f       	std	Y+27, r27	; 0x1b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendConfirm_r1_SendConfirmation;
    2954:	8f e1       	ldi	r24, 0x1F	; 31
    2956:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    2958:	1b 83       	std	Y+3, r17	; 0x03
    295a:	0a 83       	std	Y+2, r16	; 0x02
    295c:	5c c0       	rjmp	.+184    	; 0x2a16 <sMO_runCycle+0x1874>
}

/* The reactions of state null. */
static void sMO_react_main_region_on_r1_Running_running_main_SendConfirm_r1__final_0(SMO* handle) {
	/* The reactions of state null. */
	if (handle->ifaceRF.result == bool_true) { 
    295e:	8f 89       	ldd	r24, Y+23	; 0x17
    2960:	88 23       	and	r24, r24
    2962:	b9 f1       	breq	.+110    	; 0x29d2 <sMO_runCycle+0x1830>
		/* Default exit sequence for state SendConfirm */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2964:	89 81       	ldd	r24, Y+1	; 0x01
    2966:	80 32       	cpi	r24, 0x20	; 32
    2968:	59 f0       	breq	.+22     	; 0x2980 <sMO_runCycle+0x17de>
    296a:	81 32       	cpi	r24, 0x21	; 33
    296c:	81 f0       	breq	.+32     	; 0x298e <sMO_runCycle+0x17ec>
    296e:	8f 31       	cpi	r24, 0x1F	; 31
    2970:	a1 f4       	brne	.+40     	; 0x299a <sMO_runCycle+0x17f8>
			case SMO_main_region_on_r1_Running_running_main_SendConfirm_r1_SendConfirmation : {
				/* Default exit sequence for state SendConfirmation */
				handle->stateConfVector[1] = SMO_last_state;
    2972:	82 e2       	ldi	r24, 0x22	; 34
    2974:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	9b 83       	std	Y+3, r25	; 0x03
    297c:	8a 83       	std	Y+2, r24	; 0x02
    297e:	0d c0       	rjmp	.+26     	; 0x299a <sMO_runCycle+0x17f8>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendConfirm_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    2980:	82 e2       	ldi	r24, 0x22	; 34
    2982:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	9b 83       	std	Y+3, r25	; 0x03
    298a:	8a 83       	std	Y+2, r24	; 0x02
    298c:	06 c0       	rjmp	.+12     	; 0x299a <sMO_runCycle+0x17f8>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendConfirm_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    298e:	82 e2       	ldi	r24, 0x22	; 34
    2990:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	9b 83       	std	Y+3, r25	; 0x03
    2998:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state SendRequest */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state RequestConfirmation */
		/* Entry action for state 'RequestConfirmation'. */
		sMOIfaceLCD_clear();
    299a:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("PROCEED?");
    299e:	89 e4       	ldi	r24, 0x49	; 73
    29a0:	92 e0       	ldi	r25, 0x02	; 2
    29a2:	0e 94 47 02 	call	0x48e	; 0x48e <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("1-NO  2-YES", 0, 1);
    29a6:	82 e5       	ldi	r24, 0x52	; 82
    29a8:	92 e0       	ldi	r25, 0x02	; 2
    29aa:	40 e0       	ldi	r20, 0x00	; 0
    29ac:	50 e0       	ldi	r21, 0x00	; 0
    29ae:	ba 01       	movw	r22, r20
    29b0:	01 e0       	ldi	r16, 0x01	; 1
    29b2:	10 e0       	ldi	r17, 0x00	; 0
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	0e 94 4a 02 	call	0x494	; 0x494 <sMOIfaceLCD_writeStringXY>
		handle->ifaceCONF.confirmId = 0;
    29bc:	1d a6       	lds	r17, 0xbd
    29be:	1e a6       	lds	r17, 0xbe
    29c0:	1f a6       	lds	r17, 0xbf
    29c2:	18 aa       	sts	0x98, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendRequest_r1_RequestConfirmation;
    29c4:	8a e1       	ldi	r24, 0x1A	; 26
    29c6:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	9b 83       	std	Y+3, r25	; 0x03
    29ce:	8a 83       	std	Y+2, r24	; 0x02
    29d0:	22 c0       	rjmp	.+68     	; 0x2a16 <sMO_runCycle+0x1874>
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
    29d2:	8a 81       	ldd	r24, Y+2	; 0x02
    29d4:	9b 81       	ldd	r25, Y+3	; 0x03
    29d6:	01 96       	adiw	r24, 0x01	; 1
    29d8:	9b 83       	std	Y+3, r25	; 0x03
    29da:	8a 83       	std	Y+2, r24	; 0x02

void sMO_runCycle(SMO* handle) {
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
    29dc:	82 30       	cpi	r24, 0x02	; 2
    29de:	91 05       	cpc	r25, r1
    29e0:	10 f4       	brcc	.+4      	; 0x29e6 <sMO_runCycle+0x1844>
    29e2:	0c 94 00 09 	jmp	0x1200	; 0x1200 <sMO_runCycle+0x5e>
	}
	sMO_exitaction(handle);
}

static void clearInEvents(SMO* handle) {
	handle->ifaceKEYPAD.key_pressed_raised = bool_false;
    29e6:	1d 86       	std	Y+13, r1	; 0x0d
	handle->ifaceUART.DataRecieved_raised = bool_false;
    29e8:	1a 8a       	std	Y+18, r1	; 0x12
	handle->ifaceRF.DataRecieved_raised = bool_false;
    29ea:	18 a2       	lds	r17, 0x98
	handle->iface.switchOff_raised = bool_false;
    29ec:	1a ae       	sts	0xba, r17
	handle->iface.switchOn_raised = bool_false;
    29ee:	1b ae       	sts	0xbb, r17
			break;
		}
	}
	
	clearInEvents(handle);
}
    29f0:	df 91       	pop	r29
    29f2:	cf 91       	pop	r28
    29f4:	1f 91       	pop	r17
    29f6:	0f 91       	pop	r16
    29f8:	ff 90       	pop	r15
    29fa:	ef 90       	pop	r14
    29fc:	df 90       	pop	r13
    29fe:	cf 90       	pop	r12
    2a00:	bf 90       	pop	r11
    2a02:	af 90       	pop	r10
    2a04:	9f 90       	pop	r9
    2a06:	8f 90       	pop	r8
    2a08:	7f 90       	pop	r7
    2a0a:	6f 90       	pop	r6
    2a0c:	5f 90       	pop	r5
    2a0e:	4f 90       	pop	r4
    2a10:	3f 90       	pop	r3
    2a12:	2f 90       	pop	r2
    2a14:	08 95       	ret
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
    2a16:	8a 81       	ldd	r24, Y+2	; 0x02
    2a18:	9b 81       	ldd	r25, Y+3	; 0x03
    2a1a:	01 96       	adiw	r24, 0x01	; 1
    2a1c:	9b 83       	std	Y+3, r25	; 0x03
    2a1e:	8a 83       	std	Y+2, r24	; 0x02
    2a20:	e2 cf       	rjmp	.-60     	; 0x29e6 <sMO_runCycle+0x1844>
    2a22:	8a 81       	ldd	r24, Y+2	; 0x02
    2a24:	9b 81       	ldd	r25, Y+3	; 0x03
    2a26:	01 96       	adiw	r24, 0x01	; 1
    2a28:	9b 83       	std	Y+3, r25	; 0x03
    2a2a:	8a 83       	std	Y+2, r24	; 0x02
    2a2c:	0c 94 00 09 	jmp	0x1200	; 0x1200 <sMO_runCycle+0x5e>

00002a30 <sMO_raiseTimeEvent>:
	
	clearInEvents(handle);
}

void sMO_raiseTimeEvent(SMO* handle, sc_eventid evid) {
	if ( ((intptr_t)evid) >= ((intptr_t)&(handle->timeEvents))
    2a30:	cc 96       	adiw	r24, 0x3c	; 60
    2a32:	68 17       	cp	r22, r24
    2a34:	79 07       	cpc	r23, r25
    2a36:	3c f0       	brlt	.+14     	; 0x2a46 <sMO_raiseTimeEvent+0x16>
		&&  ((intptr_t)evid) < ((intptr_t)&(handle->timeEvents)) + sizeof(SMOTimeEvents)) {
    2a38:	02 96       	adiw	r24, 0x02	; 2
    2a3a:	68 17       	cp	r22, r24
    2a3c:	79 07       	cpc	r23, r25
    2a3e:	18 f4       	brcc	.+6      	; 0x2a46 <sMO_raiseTimeEvent+0x16>
		*(sc_boolean*)evid = bool_true;
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	fb 01       	movw	r30, r22
    2a44:	80 83       	st	Z, r24
    2a46:	08 95       	ret

00002a48 <sMO_isActive>:
	}		
}

sc_boolean sMO_isActive(SMO* handle, SMOStates state) {
    2a48:	dc 01       	movw	r26, r24
	switch (state) {
    2a4a:	e6 2f       	mov	r30, r22
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	e2 32       	cpi	r30, 0x22	; 34
    2a50:	f1 05       	cpc	r31, r1
    2a52:	08 f0       	brcs	.+2      	; 0x2a56 <sMO_isActive+0xe>
    2a54:	2d c1       	rjmp	.+602    	; 0x2cb0 <sMO_isActive+0x268>
    2a56:	ec 57       	subi	r30, 0x7C	; 124
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	ee 0f       	add	r30, r30
    2a5c:	ff 1f       	adc	r31, r31
    2a5e:	05 90       	lpm	r0, Z+
    2a60:	f4 91       	lpm	r31, Z
    2a62:	e0 2d       	mov	r30, r0
    2a64:	09 94       	ijmp
		case SMO_main_region_on : 
			return (sc_boolean) (handle->stateConfVector[0] >= SMO_main_region_on
    2a66:	81 e0       	ldi	r24, 0x01	; 1
    2a68:	9c 91       	ld	r25, X
    2a6a:	92 32       	cpi	r25, 0x22	; 34
    2a6c:	08 f4       	brcc	.+2      	; 0x2a70 <sMO_isActive+0x28>
    2a6e:	21 c1       	rjmp	.+578    	; 0x2cb2 <sMO_isActive+0x26a>
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	08 95       	ret
				&& handle->stateConfVector[0] <= SMO_main_region_on_r1_Running_running_main_SendConfirm_r1__final_);
		case SMO_main_region_on_r1_Init : 
			return (sc_boolean) (handle->stateConfVector[0] == SMO_main_region_on_r1_Init
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	9c 91       	ld	r25, X
    2a78:	91 30       	cpi	r25, 0x01	; 1
    2a7a:	09 f4       	brne	.+2      	; 0x2a7e <sMO_isActive+0x36>
    2a7c:	1a c1       	rjmp	.+564    	; 0x2cb2 <sMO_isActive+0x26a>
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running : 
			return (sc_boolean) (handle->stateConfVector[0] >= SMO_main_region_on_r1_Running
    2a82:	9c 91       	ld	r25, X
    2a84:	92 50       	subi	r25, 0x02	; 2
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	90 32       	cpi	r25, 0x20	; 32
    2a8a:	08 f4       	brcc	.+2      	; 0x2a8e <sMO_isActive+0x46>
    2a8c:	12 c1       	rjmp	.+548    	; 0x2cb2 <sMO_isActive+0x26a>
    2a8e:	80 e0       	ldi	r24, 0x00	; 0
    2a90:	08 95       	ret
				&& handle->stateConfVector[0] <= SMO_main_region_on_r1_Running_running_main_SendConfirm_r1__final_);
		case SMO_main_region_on_r1_Running_keypad_CheckKey : 
			return (sc_boolean) (handle->stateConfVector[0] == SMO_main_region_on_r1_Running_keypad_CheckKey
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	9c 91       	ld	r25, X
    2a96:	93 30       	cpi	r25, 0x03	; 3
    2a98:	09 f4       	brne	.+2      	; 0x2a9c <sMO_isActive+0x54>
    2a9a:	0b c1       	rjmp	.+534    	; 0x2cb2 <sMO_isActive+0x26a>
    2a9c:	80 e0       	ldi	r24, 0x00	; 0
    2a9e:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_keypad_CheckKeyDown : 
			return (sc_boolean) (handle->stateConfVector[0] == SMO_main_region_on_r1_Running_keypad_CheckKeyDown
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	9c 91       	ld	r25, X
    2aa4:	94 30       	cpi	r25, 0x04	; 4
    2aa6:	09 f4       	brne	.+2      	; 0x2aaa <sMO_isActive+0x62>
    2aa8:	04 c1       	rjmp	.+520    	; 0x2cb2 <sMO_isActive+0x26a>
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_ShowMenu : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_ShowMenu
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	11 96       	adiw	r26, 0x01	; 1
    2ab2:	9c 91       	ld	r25, X
    2ab4:	11 97       	sbiw	r26, 0x01	; 1
    2ab6:	95 30       	cpi	r25, 0x05	; 5
    2ab8:	09 f4       	brne	.+2      	; 0x2abc <sMO_isActive+0x74>
    2aba:	fb c0       	rjmp	.+502    	; 0x2cb2 <sMO_isActive+0x26a>
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData : 
			return (sc_boolean) (handle->stateConfVector[1] >= SMO_main_region_on_r1_Running_running_main_EnterData
    2ac0:	11 96       	adiw	r26, 0x01	; 1
    2ac2:	9c 91       	ld	r25, X
    2ac4:	11 97       	sbiw	r26, 0x01	; 1
    2ac6:	96 50       	subi	r25, 0x06	; 6
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	9a 30       	cpi	r25, 0x0A	; 10
    2acc:	08 f4       	brcc	.+2      	; 0x2ad0 <sMO_isActive+0x88>
    2ace:	f1 c0       	rjmp	.+482    	; 0x2cb2 <sMO_isActive+0x26a>
    2ad0:	80 e0       	ldi	r24, 0x00	; 0
    2ad2:	08 95       	ret
				&& handle->stateConfVector[1] <= SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	11 96       	adiw	r26, 0x01	; 1
    2ad8:	9c 91       	ld	r25, X
    2ada:	11 97       	sbiw	r26, 0x01	; 1
    2adc:	97 30       	cpi	r25, 0x07	; 7
    2ade:	09 f4       	brne	.+2      	; 0x2ae2 <sMO_isActive+0x9a>
    2ae0:	e8 c0       	rjmp	.+464    	; 0x2cb2 <sMO_isActive+0x26a>
    2ae2:	80 e0       	ldi	r24, 0x00	; 0
    2ae4:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	11 96       	adiw	r26, 0x01	; 1
    2aea:	9c 91       	ld	r25, X
    2aec:	11 97       	sbiw	r26, 0x01	; 1
    2aee:	98 30       	cpi	r25, 0x08	; 8
    2af0:	09 f4       	brne	.+2      	; 0x2af4 <sMO_isActive+0xac>
    2af2:	df c0       	rjmp	.+446    	; 0x2cb2 <sMO_isActive+0x26a>
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	11 96       	adiw	r26, 0x01	; 1
    2afc:	9c 91       	ld	r25, X
    2afe:	11 97       	sbiw	r26, 0x01	; 1
    2b00:	99 30       	cpi	r25, 0x09	; 9
    2b02:	09 f4       	brne	.+2      	; 0x2b06 <sMO_isActive+0xbe>
    2b04:	d6 c0       	rjmp	.+428    	; 0x2cb2 <sMO_isActive+0x26a>
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	11 96       	adiw	r26, 0x01	; 1
    2b0e:	9c 91       	ld	r25, X
    2b10:	11 97       	sbiw	r26, 0x01	; 1
    2b12:	9a 30       	cpi	r25, 0x0A	; 10
    2b14:	09 f4       	brne	.+2      	; 0x2b18 <sMO_isActive+0xd0>
    2b16:	cd c0       	rjmp	.+410    	; 0x2cb2 <sMO_isActive+0x26a>
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	11 96       	adiw	r26, 0x01	; 1
    2b20:	9c 91       	ld	r25, X
    2b22:	11 97       	sbiw	r26, 0x01	; 1
    2b24:	9b 30       	cpi	r25, 0x0B	; 11
    2b26:	09 f4       	brne	.+2      	; 0x2b2a <sMO_isActive+0xe2>
    2b28:	c4 c0       	rjmp	.+392    	; 0x2cb2 <sMO_isActive+0x26a>
    2b2a:	80 e0       	ldi	r24, 0x00	; 0
    2b2c:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	11 96       	adiw	r26, 0x01	; 1
    2b32:	9c 91       	ld	r25, X
    2b34:	11 97       	sbiw	r26, 0x01	; 1
    2b36:	9c 30       	cpi	r25, 0x0C	; 12
    2b38:	09 f4       	brne	.+2      	; 0x2b3c <sMO_isActive+0xf4>
    2b3a:	bb c0       	rjmp	.+374    	; 0x2cb2 <sMO_isActive+0x26a>
    2b3c:	80 e0       	ldi	r24, 0x00	; 0
    2b3e:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	11 96       	adiw	r26, 0x01	; 1
    2b44:	9c 91       	ld	r25, X
    2b46:	11 97       	sbiw	r26, 0x01	; 1
    2b48:	9d 30       	cpi	r25, 0x0D	; 13
    2b4a:	09 f4       	brne	.+2      	; 0x2b4e <sMO_isActive+0x106>
    2b4c:	b2 c0       	rjmp	.+356    	; 0x2cb2 <sMO_isActive+0x26a>
    2b4e:	80 e0       	ldi	r24, 0x00	; 0
    2b50:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	11 96       	adiw	r26, 0x01	; 1
    2b56:	9c 91       	ld	r25, X
    2b58:	11 97       	sbiw	r26, 0x01	; 1
    2b5a:	9e 30       	cpi	r25, 0x0E	; 14
    2b5c:	09 f4       	brne	.+2      	; 0x2b60 <sMO_isActive+0x118>
    2b5e:	a9 c0       	rjmp	.+338    	; 0x2cb2 <sMO_isActive+0x26a>
    2b60:	80 e0       	ldi	r24, 0x00	; 0
    2b62:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	11 96       	adiw	r26, 0x01	; 1
    2b68:	9c 91       	ld	r25, X
    2b6a:	11 97       	sbiw	r26, 0x01	; 1
    2b6c:	9f 30       	cpi	r25, 0x0F	; 15
    2b6e:	09 f4       	brne	.+2      	; 0x2b72 <sMO_isActive+0x12a>
    2b70:	a0 c0       	rjmp	.+320    	; 0x2cb2 <sMO_isActive+0x26a>
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_MenuA : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_MenuA
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	11 96       	adiw	r26, 0x01	; 1
    2b7a:	9c 91       	ld	r25, X
    2b7c:	11 97       	sbiw	r26, 0x01	; 1
    2b7e:	90 31       	cpi	r25, 0x10	; 16
    2b80:	09 f4       	brne	.+2      	; 0x2b84 <sMO_isActive+0x13c>
    2b82:	97 c0       	rjmp	.+302    	; 0x2cb2 <sMO_isActive+0x26a>
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_CheckKeyPress : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_CheckKeyPress
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	11 96       	adiw	r26, 0x01	; 1
    2b8c:	9c 91       	ld	r25, X
    2b8e:	11 97       	sbiw	r26, 0x01	; 1
    2b90:	91 31       	cpi	r25, 0x11	; 17
    2b92:	09 f4       	brne	.+2      	; 0x2b96 <sMO_isActive+0x14e>
    2b94:	8e c0       	rjmp	.+284    	; 0x2cb2 <sMO_isActive+0x26a>
    2b96:	80 e0       	ldi	r24, 0x00	; 0
    2b98:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendData : 
			return (sc_boolean) (handle->stateConfVector[1] >= SMO_main_region_on_r1_Running_running_main_SendData
    2b9a:	11 96       	adiw	r26, 0x01	; 1
    2b9c:	9c 91       	ld	r25, X
    2b9e:	11 97       	sbiw	r26, 0x01	; 1
    2ba0:	92 51       	subi	r25, 0x12	; 18
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	94 30       	cpi	r25, 0x04	; 4
    2ba6:	08 f4       	brcc	.+2      	; 0x2baa <sMO_isActive+0x162>
    2ba8:	84 c0       	rjmp	.+264    	; 0x2cb2 <sMO_isActive+0x26a>
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    2bac:	08 95       	ret
				&& handle->stateConfVector[1] <= SMO_main_region_on_r1_Running_running_main_SendData_r1__final_);
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendData_r1_Send
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	11 96       	adiw	r26, 0x01	; 1
    2bb2:	9c 91       	ld	r25, X
    2bb4:	11 97       	sbiw	r26, 0x01	; 1
    2bb6:	93 31       	cpi	r25, 0x13	; 19
    2bb8:	09 f4       	brne	.+2      	; 0x2bbc <sMO_isActive+0x174>
    2bba:	7b c0       	rjmp	.+246    	; 0x2cb2 <sMO_isActive+0x26a>
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
    2bbe:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendData_r1_Check
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	11 96       	adiw	r26, 0x01	; 1
    2bc4:	9c 91       	ld	r25, X
    2bc6:	11 97       	sbiw	r26, 0x01	; 1
    2bc8:	94 31       	cpi	r25, 0x14	; 20
    2bca:	09 f4       	brne	.+2      	; 0x2bce <sMO_isActive+0x186>
    2bcc:	72 c0       	rjmp	.+228    	; 0x2cb2 <sMO_isActive+0x26a>
    2bce:	80 e0       	ldi	r24, 0x00	; 0
    2bd0:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendData_r1__final_
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	11 96       	adiw	r26, 0x01	; 1
    2bd6:	9c 91       	ld	r25, X
    2bd8:	11 97       	sbiw	r26, 0x01	; 1
    2bda:	95 31       	cpi	r25, 0x15	; 21
    2bdc:	09 f4       	brne	.+2      	; 0x2be0 <sMO_isActive+0x198>
    2bde:	69 c0       	rjmp	.+210    	; 0x2cb2 <sMO_isActive+0x26a>
    2be0:	80 e0       	ldi	r24, 0x00	; 0
    2be2:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_MenuB : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_MenuB
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	11 96       	adiw	r26, 0x01	; 1
    2be8:	9c 91       	ld	r25, X
    2bea:	11 97       	sbiw	r26, 0x01	; 1
    2bec:	96 31       	cpi	r25, 0x16	; 22
    2bee:	09 f4       	brne	.+2      	; 0x2bf2 <sMO_isActive+0x1aa>
    2bf0:	60 c0       	rjmp	.+192    	; 0x2cb2 <sMO_isActive+0x26a>
    2bf2:	80 e0       	ldi	r24, 0x00	; 0
    2bf4:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_MenuC : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_MenuC
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	11 96       	adiw	r26, 0x01	; 1
    2bfa:	9c 91       	ld	r25, X
    2bfc:	11 97       	sbiw	r26, 0x01	; 1
    2bfe:	97 31       	cpi	r25, 0x17	; 23
    2c00:	09 f4       	brne	.+2      	; 0x2c04 <sMO_isActive+0x1bc>
    2c02:	57 c0       	rjmp	.+174    	; 0x2cb2 <sMO_isActive+0x26a>
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_MenuD : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_MenuD
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	11 96       	adiw	r26, 0x01	; 1
    2c0c:	9c 91       	ld	r25, X
    2c0e:	11 97       	sbiw	r26, 0x01	; 1
    2c10:	98 31       	cpi	r25, 0x18	; 24
    2c12:	09 f4       	brne	.+2      	; 0x2c16 <sMO_isActive+0x1ce>
    2c14:	4e c0       	rjmp	.+156    	; 0x2cb2 <sMO_isActive+0x26a>
    2c16:	80 e0       	ldi	r24, 0x00	; 0
    2c18:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendRequest : 
			return (sc_boolean) (handle->stateConfVector[1] >= SMO_main_region_on_r1_Running_running_main_SendRequest
    2c1a:	11 96       	adiw	r26, 0x01	; 1
    2c1c:	9c 91       	ld	r25, X
    2c1e:	11 97       	sbiw	r26, 0x01	; 1
    2c20:	99 51       	subi	r25, 0x19	; 25
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	95 30       	cpi	r25, 0x05	; 5
    2c26:	08 f4       	brcc	.+2      	; 0x2c2a <sMO_isActive+0x1e2>
    2c28:	44 c0       	rjmp	.+136    	; 0x2cb2 <sMO_isActive+0x26a>
    2c2a:	80 e0       	ldi	r24, 0x00	; 0
    2c2c:	08 95       	ret
				&& handle->stateConfVector[1] <= SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_);
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_RequestConfirmation : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendRequest_r1_RequestConfirmation
    2c2e:	81 e0       	ldi	r24, 0x01	; 1
    2c30:	11 96       	adiw	r26, 0x01	; 1
    2c32:	9c 91       	ld	r25, X
    2c34:	11 97       	sbiw	r26, 0x01	; 1
    2c36:	9a 31       	cpi	r25, 0x1A	; 26
    2c38:	e1 f1       	breq	.+120    	; 0x2cb2 <sMO_isActive+0x26a>
    2c3a:	80 e0       	ldi	r24, 0x00	; 0
    2c3c:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_EnterConfirmation : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendRequest_r1_EnterConfirmation
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	11 96       	adiw	r26, 0x01	; 1
    2c42:	9c 91       	ld	r25, X
    2c44:	11 97       	sbiw	r26, 0x01	; 1
    2c46:	9b 31       	cpi	r25, 0x1B	; 27
    2c48:	a1 f1       	breq	.+104    	; 0x2cb2 <sMO_isActive+0x26a>
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
    2c4c:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_CheckKeyPress : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendRequest_r1_CheckKeyPress
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	11 96       	adiw	r26, 0x01	; 1
    2c52:	9c 91       	ld	r25, X
    2c54:	11 97       	sbiw	r26, 0x01	; 1
    2c56:	9c 31       	cpi	r25, 0x1C	; 28
    2c58:	61 f1       	breq	.+88     	; 0x2cb2 <sMO_isActive+0x26a>
    2c5a:	80 e0       	ldi	r24, 0x00	; 0
    2c5c:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_ : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	11 96       	adiw	r26, 0x01	; 1
    2c62:	9c 91       	ld	r25, X
    2c64:	11 97       	sbiw	r26, 0x01	; 1
    2c66:	9d 31       	cpi	r25, 0x1D	; 29
    2c68:	21 f1       	breq	.+72     	; 0x2cb2 <sMO_isActive+0x26a>
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendConfirm : 
			return (sc_boolean) (handle->stateConfVector[1] >= SMO_main_region_on_r1_Running_running_main_SendConfirm
    2c6e:	11 96       	adiw	r26, 0x01	; 1
    2c70:	9c 91       	ld	r25, X
    2c72:	11 97       	sbiw	r26, 0x01	; 1
    2c74:	9e 51       	subi	r25, 0x1E	; 30
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	94 30       	cpi	r25, 0x04	; 4
    2c7a:	d8 f0       	brcs	.+54     	; 0x2cb2 <sMO_isActive+0x26a>
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	08 95       	ret
				&& handle->stateConfVector[1] <= SMO_main_region_on_r1_Running_running_main_SendConfirm_r1__final_);
		case SMO_main_region_on_r1_Running_running_main_SendConfirm_r1_SendConfirmation : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendConfirm_r1_SendConfirmation
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	11 96       	adiw	r26, 0x01	; 1
    2c84:	9c 91       	ld	r25, X
    2c86:	11 97       	sbiw	r26, 0x01	; 1
    2c88:	9f 31       	cpi	r25, 0x1F	; 31
    2c8a:	99 f0       	breq	.+38     	; 0x2cb2 <sMO_isActive+0x26a>
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
    2c8e:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendConfirm_r1_Check : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendConfirm_r1_Check
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	11 96       	adiw	r26, 0x01	; 1
    2c94:	9c 91       	ld	r25, X
    2c96:	11 97       	sbiw	r26, 0x01	; 1
    2c98:	90 32       	cpi	r25, 0x20	; 32
    2c9a:	59 f0       	breq	.+22     	; 0x2cb2 <sMO_isActive+0x26a>
    2c9c:	80 e0       	ldi	r24, 0x00	; 0
    2c9e:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendConfirm_r1__final_ : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendConfirm_r1__final_
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	11 96       	adiw	r26, 0x01	; 1
    2ca4:	9c 91       	ld	r25, X
    2ca6:	11 97       	sbiw	r26, 0x01	; 1
    2ca8:	91 32       	cpi	r25, 0x21	; 33
    2caa:	19 f0       	breq	.+6      	; 0x2cb2 <sMO_isActive+0x26a>
    2cac:	80 e0       	ldi	r24, 0x00	; 0
    2cae:	08 95       	ret
			);
		default: return bool_false;
    2cb0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2cb2:	08 95       	ret

00002cb4 <sMOIfaceKEYPAD_raise_key_pressed>:



void sMOIfaceKEYPAD_raise_key_pressed(SMO* handle) {
	handle->ifaceKEYPAD.key_pressed_raised = bool_true;
    2cb4:	21 e0       	ldi	r18, 0x01	; 1
    2cb6:	fc 01       	movw	r30, r24
    2cb8:	25 87       	std	Z+13, r18	; 0x0d
}
    2cba:	08 95       	ret

00002cbc <sMOIfaceKEYPAD_get_key>:


sc_integer sMOIfaceKEYPAD_get_key(SMO* handle) {
    2cbc:	fc 01       	movw	r30, r24
	return handle->ifaceKEYPAD.key;
    2cbe:	64 81       	ldd	r22, Z+4	; 0x04
    2cc0:	75 81       	ldd	r23, Z+5	; 0x05
}
    2cc2:	86 81       	ldd	r24, Z+6	; 0x06
    2cc4:	97 81       	ldd	r25, Z+7	; 0x07
    2cc6:	08 95       	ret

00002cc8 <sMOIfaceKEYPAD_set_key>:
void sMOIfaceKEYPAD_set_key(SMO* handle, sc_integer value) {
	handle->ifaceKEYPAD.key = value;
    2cc8:	fc 01       	movw	r30, r24
    2cca:	44 83       	std	Z+4, r20	; 0x04
    2ccc:	55 83       	std	Z+5, r21	; 0x05
    2cce:	66 83       	std	Z+6, r22	; 0x06
    2cd0:	77 83       	std	Z+7, r23	; 0x07
}
    2cd2:	08 95       	ret

00002cd4 <sMOIfaceKEYPAD_get_lastkey>:
sc_integer sMOIfaceKEYPAD_get_lastkey(SMO* handle) {
    2cd4:	fc 01       	movw	r30, r24
	return handle->ifaceKEYPAD.lastkey;
    2cd6:	60 85       	ldd	r22, Z+8	; 0x08
    2cd8:	71 85       	ldd	r23, Z+9	; 0x09
}
    2cda:	82 85       	ldd	r24, Z+10	; 0x0a
    2cdc:	93 85       	ldd	r25, Z+11	; 0x0b
    2cde:	08 95       	ret

00002ce0 <sMOIfaceKEYPAD_set_lastkey>:
void sMOIfaceKEYPAD_set_lastkey(SMO* handle, sc_integer value) {
	handle->ifaceKEYPAD.lastkey = value;
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	40 87       	std	Z+8, r20	; 0x08
    2ce4:	51 87       	std	Z+9, r21	; 0x09
    2ce6:	62 87       	std	Z+10, r22	; 0x0a
    2ce8:	73 87       	std	Z+11, r23	; 0x0b
}
    2cea:	08 95       	ret

00002cec <sMOIfaceKEYPAD_get_key_down>:
sc_boolean sMOIfaceKEYPAD_get_key_down(SMO* handle) {
	return handle->ifaceKEYPAD.key_down;
}
    2cec:	fc 01       	movw	r30, r24
    2cee:	84 85       	ldd	r24, Z+12	; 0x0c
    2cf0:	08 95       	ret

00002cf2 <sMOIfaceKEYPAD_set_key_down>:
void sMOIfaceKEYPAD_set_key_down(SMO* handle, sc_boolean value) {
	handle->ifaceKEYPAD.key_down = value;
    2cf2:	fc 01       	movw	r30, r24
    2cf4:	64 87       	std	Z+12, r22	; 0x0c
}
    2cf6:	08 95       	ret

00002cf8 <sMOIfaceUART_raise_dataRecieved>:
void sMOIfaceUART_raise_dataRecieved(SMO* handle) {
	handle->ifaceUART.DataRecieved_raised = bool_true;
    2cf8:	21 e0       	ldi	r18, 0x01	; 1
    2cfa:	fc 01       	movw	r30, r24
    2cfc:	22 8b       	std	Z+18, r18	; 0x12
}
    2cfe:	08 95       	ret

00002d00 <sMOIfaceUART_get_data>:


sc_string sMOIfaceUART_get_data(SMO* handle) {
    2d00:	fc 01       	movw	r30, r24
	return handle->ifaceUART.data;
}
    2d02:	86 85       	ldd	r24, Z+14	; 0x0e
    2d04:	97 85       	ldd	r25, Z+15	; 0x0f
    2d06:	08 95       	ret

00002d08 <sMOIfaceUART_set_data>:
void sMOIfaceUART_set_data(SMO* handle, sc_string value) {
	handle->ifaceUART.data = value;
    2d08:	fc 01       	movw	r30, r24
    2d0a:	77 87       	std	Z+15, r23	; 0x0f
    2d0c:	66 87       	std	Z+14, r22	; 0x0e
}
    2d0e:	08 95       	ret

00002d10 <sMOIfaceUART_get_lastdata>:
sc_string sMOIfaceUART_get_lastdata(SMO* handle) {
    2d10:	fc 01       	movw	r30, r24
	return handle->ifaceUART.lastdata;
}
    2d12:	80 89       	ldd	r24, Z+16	; 0x10
    2d14:	91 89       	ldd	r25, Z+17	; 0x11
    2d16:	08 95       	ret

00002d18 <sMOIfaceUART_set_lastdata>:
void sMOIfaceUART_set_lastdata(SMO* handle, sc_string value) {
	handle->ifaceUART.lastdata = value;
    2d18:	fc 01       	movw	r30, r24
    2d1a:	71 8b       	std	Z+17, r23	; 0x11
    2d1c:	60 8b       	std	Z+16, r22	; 0x10
}
    2d1e:	08 95       	ret

00002d20 <sMOIfaceRF_raise_dataRecieved>:
void sMOIfaceRF_raise_dataRecieved(SMO* handle) {
	handle->ifaceRF.DataRecieved_raised = bool_true;
    2d20:	21 e0       	ldi	r18, 0x01	; 1
    2d22:	fc 01       	movw	r30, r24
    2d24:	20 a3       	lds	r18, 0x50
}
    2d26:	08 95       	ret

00002d28 <sMOIfaceRF_get_data>:


sc_string sMOIfaceRF_get_data(SMO* handle) {
    2d28:	fc 01       	movw	r30, r24
	return handle->ifaceRF.data;
}
    2d2a:	83 89       	ldd	r24, Z+19	; 0x13
    2d2c:	94 89       	ldd	r25, Z+20	; 0x14
    2d2e:	08 95       	ret

00002d30 <sMOIfaceRF_set_data>:
void sMOIfaceRF_set_data(SMO* handle, sc_string value) {
	handle->ifaceRF.data = value;
    2d30:	fc 01       	movw	r30, r24
    2d32:	74 8b       	std	Z+20, r23	; 0x14
    2d34:	63 8b       	std	Z+19, r22	; 0x13
}
    2d36:	08 95       	ret

00002d38 <sMOIfaceRF_get_lastdata>:
sc_string sMOIfaceRF_get_lastdata(SMO* handle) {
    2d38:	fc 01       	movw	r30, r24
	return handle->ifaceRF.lastdata;
}
    2d3a:	85 89       	ldd	r24, Z+21	; 0x15
    2d3c:	96 89       	ldd	r25, Z+22	; 0x16
    2d3e:	08 95       	ret

00002d40 <sMOIfaceRF_set_lastdata>:
void sMOIfaceRF_set_lastdata(SMO* handle, sc_string value) {
	handle->ifaceRF.lastdata = value;
    2d40:	fc 01       	movw	r30, r24
    2d42:	76 8b       	std	Z+22, r23	; 0x16
    2d44:	65 8b       	std	Z+21, r22	; 0x15
}
    2d46:	08 95       	ret

00002d48 <sMOIfaceRF_get_result>:
sc_boolean sMOIfaceRF_get_result(SMO* handle) {
	return handle->ifaceRF.result;
}
    2d48:	fc 01       	movw	r30, r24
    2d4a:	87 89       	ldd	r24, Z+23	; 0x17
    2d4c:	08 95       	ret

00002d4e <sMOIfaceRF_set_result>:
void sMOIfaceRF_set_result(SMO* handle, sc_boolean value) {
	handle->ifaceRF.result = value;
    2d4e:	fc 01       	movw	r30, r24
    2d50:	67 8b       	std	Z+23, r22	; 0x17
}
    2d52:	08 95       	ret

00002d54 <sMOIfaceRF_get_retry>:
sc_integer sMOIfaceRF_get_retry(SMO* handle) {
    2d54:	fc 01       	movw	r30, r24
	return handle->ifaceRF.retry;
    2d56:	60 8d       	ldd	r22, Z+24	; 0x18
    2d58:	71 8d       	ldd	r23, Z+25	; 0x19
}
    2d5a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d5c:	93 8d       	ldd	r25, Z+27	; 0x1b
    2d5e:	08 95       	ret

00002d60 <sMOIfaceRF_set_retry>:
void sMOIfaceRF_set_retry(SMO* handle, sc_integer value) {
	handle->ifaceRF.retry = value;
    2d60:	fc 01       	movw	r30, r24
    2d62:	40 8f       	std	Z+24, r20	; 0x18
    2d64:	51 8f       	std	Z+25, r21	; 0x19
    2d66:	62 8f       	std	Z+26, r22	; 0x1a
    2d68:	73 8f       	std	Z+27, r23	; 0x1b
}
    2d6a:	08 95       	ret

00002d6c <sMOIfaceRF_get_iD>:
sc_integer sMOIfaceRF_get_iD(SMO* handle) {
    2d6c:	fc 01       	movw	r30, r24
	return handle->ifaceRF.ID;
    2d6e:	64 8d       	ldd	r22, Z+28	; 0x1c
    2d70:	75 8d       	ldd	r23, Z+29	; 0x1d
}
    2d72:	86 8d       	ldd	r24, Z+30	; 0x1e
    2d74:	97 8d       	ldd	r25, Z+31	; 0x1f
    2d76:	08 95       	ret

00002d78 <sMOIfaceRF_set_iD>:
void sMOIfaceRF_set_iD(SMO* handle, sc_integer value) {
	handle->ifaceRF.ID = value;
    2d78:	fc 01       	movw	r30, r24
    2d7a:	44 8f       	std	Z+28, r20	; 0x1c
    2d7c:	55 8f       	std	Z+29, r21	; 0x1d
    2d7e:	66 8f       	std	Z+30, r22	; 0x1e
    2d80:	77 8f       	std	Z+31, r23	; 0x1f
}
    2d82:	08 95       	ret

00002d84 <sMOIfaceDISH_get_iD>:


sc_integer sMOIfaceDISH_get_iD(SMO* handle) {
    2d84:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.ID;
    2d86:	61 a1       	lds	r22, 0x41
    2d88:	72 a1       	lds	r23, 0x42
}
    2d8a:	83 a1       	lds	r24, 0x43
    2d8c:	94 a1       	lds	r25, 0x44
    2d8e:	08 95       	ret

00002d90 <sMOIfaceDISH_set_iD>:
void sMOIfaceDISH_set_iD(SMO* handle, sc_integer value) {
	handle->ifaceDISH.ID = value;
    2d90:	fc 01       	movw	r30, r24
    2d92:	41 a3       	lds	r20, 0x51
    2d94:	52 a3       	lds	r21, 0x52
    2d96:	63 a3       	lds	r22, 0x53
    2d98:	74 a3       	lds	r23, 0x54
}
    2d9a:	08 95       	ret

00002d9c <sMOIfaceDISH_get_amount>:
sc_integer sMOIfaceDISH_get_amount(SMO* handle) {
    2d9c:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.amount;
    2d9e:	65 a1       	lds	r22, 0x45
    2da0:	76 a1       	lds	r23, 0x46
}
    2da2:	87 a1       	lds	r24, 0x47
    2da4:	90 a5       	lds	r25, 0x60
    2da6:	08 95       	ret

00002da8 <sMOIfaceDISH_set_amount>:
void sMOIfaceDISH_set_amount(SMO* handle, sc_integer value) {
	handle->ifaceDISH.amount = value;
    2da8:	fc 01       	movw	r30, r24
    2daa:	45 a3       	lds	r20, 0x55
    2dac:	56 a3       	lds	r21, 0x56
    2dae:	67 a3       	lds	r22, 0x57
    2db0:	70 a7       	lds	r23, 0x70
}
    2db2:	08 95       	ret

00002db4 <sMOIfaceDISH_get_pos>:
sc_integer sMOIfaceDISH_get_pos(SMO* handle) {
    2db4:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.pos;
    2db6:	61 a5       	lds	r22, 0x61
    2db8:	72 a5       	lds	r23, 0x62
}
    2dba:	83 a5       	lds	r24, 0x63
    2dbc:	94 a5       	lds	r25, 0x64
    2dbe:	08 95       	ret

00002dc0 <sMOIfaceDISH_set_pos>:
void sMOIfaceDISH_set_pos(SMO* handle, sc_integer value) {
	handle->ifaceDISH.pos = value;
    2dc0:	fc 01       	movw	r30, r24
    2dc2:	41 a7       	lds	r20, 0x71
    2dc4:	52 a7       	lds	r21, 0x72
    2dc6:	63 a7       	lds	r22, 0x73
    2dc8:	74 a7       	lds	r23, 0x74
}
    2dca:	08 95       	ret

00002dcc <sMOIfaceCONF_get_confirmId>:


sc_integer sMOIfaceCONF_get_confirmId(SMO* handle) {
    2dcc:	fc 01       	movw	r30, r24
	return handle->ifaceCONF.confirmId;
    2dce:	65 a5       	lds	r22, 0x65
    2dd0:	76 a5       	lds	r23, 0x66
}
    2dd2:	87 a5       	lds	r24, 0x67
    2dd4:	90 a9       	sts	0x40, r25
    2dd6:	08 95       	ret

00002dd8 <sMOIfaceCONF_set_confirmId>:
void sMOIfaceCONF_set_confirmId(SMO* handle, sc_integer value) {
	handle->ifaceCONF.confirmId = value;
    2dd8:	fc 01       	movw	r30, r24
    2dda:	45 a7       	lds	r20, 0x75
    2ddc:	56 a7       	lds	r21, 0x76
    2dde:	67 a7       	lds	r22, 0x77
    2de0:	70 ab       	sts	0x50, r23
}
    2de2:	08 95       	ret

00002de4 <sMOIface_raise_switchOff>:
void sMOIface_raise_switchOff(SMO* handle) {
	handle->iface.switchOff_raised = bool_true;
    2de4:	21 e0       	ldi	r18, 0x01	; 1
    2de6:	fc 01       	movw	r30, r24
    2de8:	22 af       	sts	0x72, r18
}
    2dea:	08 95       	ret

00002dec <sMOIface_raise_switchOn>:
void sMOIface_raise_switchOn(SMO* handle) {
	handle->iface.switchOn_raised = bool_true;
    2dec:	21 e0       	ldi	r18, 0x01	; 1
    2dee:	fc 01       	movw	r30, r24
    2df0:	23 af       	sts	0x73, r18
}
    2df2:	08 95       	ret

00002df4 <sMOIface_get_lightOn>:


sc_boolean sMOIface_get_lightOn(SMO* handle) {
	return handle->iface.lightOn;
}
    2df4:	fc 01       	movw	r30, r24
    2df6:	81 a9       	sts	0x41, r24
    2df8:	08 95       	ret

00002dfa <sMOIface_set_lightOn>:
void sMOIface_set_lightOn(SMO* handle, sc_boolean value) {
	handle->iface.lightOn = value;
    2dfa:	fc 01       	movw	r30, r24
    2dfc:	61 ab       	sts	0x51, r22
}
    2dfe:	08 95       	ret

00002e00 <sMOIface_get_menuId>:
sc_integer sMOIface_get_menuId(SMO* handle) {
    2e00:	fc 01       	movw	r30, r24
	return handle->iface.menuId;
    2e02:	62 a9       	sts	0x42, r22
    2e04:	73 a9       	sts	0x43, r23
}
    2e06:	84 a9       	sts	0x44, r24
    2e08:	95 a9       	sts	0x45, r25
    2e0a:	08 95       	ret

00002e0c <sMOIface_set_menuId>:
void sMOIface_set_menuId(SMO* handle, sc_integer value) {
	handle->iface.menuId = value;
    2e0c:	fc 01       	movw	r30, r24
    2e0e:	42 ab       	sts	0x52, r20
    2e10:	53 ab       	sts	0x53, r21
    2e12:	64 ab       	sts	0x54, r22
    2e14:	75 ab       	sts	0x55, r23
}
    2e16:	08 95       	ret

00002e18 <sMOIface_get_tableId>:
sc_integer sMOIface_get_tableId(SMO* handle) {
    2e18:	fc 01       	movw	r30, r24
	return handle->iface.tableId;
    2e1a:	66 a9       	sts	0x46, r22
    2e1c:	77 a9       	sts	0x47, r23
}
    2e1e:	80 ad       	sts	0x60, r24
    2e20:	91 ad       	sts	0x61, r25
    2e22:	08 95       	ret

00002e24 <sMOIface_set_tableId>:
void sMOIface_set_tableId(SMO* handle, sc_integer value) {
	handle->iface.tableId = value;
    2e24:	fc 01       	movw	r30, r24
    2e26:	46 ab       	sts	0x56, r20
    2e28:	57 ab       	sts	0x57, r21
    2e2a:	60 af       	sts	0x70, r22
    2e2c:	71 af       	sts	0x71, r23
}
    2e2e:	08 95       	ret

00002e30 <spi_init>:

/*
 * spi initialize
 */
void spi_init() {
    SPI_DDR &= ~((1<<SPI_MOSI) | (1<<SPI_MISO) | (1<<SPI_SS) | (1<<SPI_SCK)); //input
    2e30:	87 b3       	in	r24, 0x17	; 23
    2e32:	80 7f       	andi	r24, 0xF0	; 240
    2e34:	87 bb       	out	0x17, r24	; 23
    SPI_DDR |= ((1<<SPI_MOSI) | (1<<SPI_SS) | (1<<SPI_SCK)); //output
    2e36:	87 b3       	in	r24, 0x17	; 23
    2e38:	87 60       	ori	r24, 0x07	; 7
    2e3a:	87 bb       	out	0x17, r24	; 23

    SPCR = ((1<<SPE)|               // SPI Enable
    2e3c:	81 e5       	ldi	r24, 0x51	; 81
    2e3e:	8d b9       	out	0x0d, r24	; 13
            (1<<MSTR)|              // Master/Slave select
            (0<<SPR1)|(1<<SPR0)|    // SPI Clock Rate
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR = (1<<SPI2X); // Double SPI Speed Bit
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	8e b9       	out	0x0e, r24	; 14
}
    2e44:	08 95       	ret

00002e46 <spi_writereadbyte>:

/*
 * spi write one byte and read it back
 */
uint8_t spi_writereadbyte(uint8_t data) {
    SPDR = data;
    2e46:	8f b9       	out	0x0f, r24	; 15
    while((SPSR & (1<<SPIF)) == 0);
    2e48:	77 9b       	sbis	0x0e, 7	; 14
    2e4a:	fe cf       	rjmp	.-4      	; 0x2e48 <spi_writereadbyte+0x2>
    return SPDR;
    2e4c:	8f b1       	in	r24, 0x0f	; 15
}
    2e4e:	08 95       	ret

00002e50 <TimerInit>:

TimeEvent tmrEvent[10];
int tmrCount=0;

void TimerInit() {
	TCCR0 = 0b011; //CS02=0, CS01=1, CS00=0, chon Prescaler=64
    2e50:	83 e0       	ldi	r24, 0x03	; 3
    2e52:	83 bf       	out	0x33, r24	; 51
	//Xung chip la 8MHZ -> 1 xung mat 1us/8 = 0.125 us
	//Prescaler=64, kich 256 lan moi tang 1 lan trong bo dem Timer-> Ton 8us
	//Vay, de Timer ngat moi 1ms, ta can: 1000/8=125 lan dem.
	//Ma Timer ngat khi bo dem toi 255, ta can set gia tri ban dau cho bo dem la: 255-125+1=131
	TCNT0=131;
    2e54:	83 e8       	ldi	r24, 0x83	; 131
    2e56:	82 bf       	out	0x32, r24	; 50
	TIMSK=(1<<TOIE0); //Cho phep ngat khi cho tran o T/C0
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	87 bf       	out	0x37, r24	; 55
	tmrCount=0;
    2e5c:	10 92 79 02 	sts	0x0279, r1
    2e60:	10 92 78 02 	sts	0x0278, r1
	sei();
    2e64:	78 94       	sei
}
    2e66:	08 95       	ret

00002e68 <TimerSet>:

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
    2e68:	cf 92       	push	r12
    2e6a:	df 92       	push	r13
    2e6c:	ef 92       	push	r14
    2e6e:	ff 92       	push	r15
    2e70:	cf 93       	push	r28
    2e72:	df 93       	push	r29
    2e74:	ec 01       	movw	r28, r24
    2e76:	6a 01       	movw	r12, r20
    2e78:	7b 01       	movw	r14, r22
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
    2e7a:	40 91 78 02 	lds	r20, 0x0278
    2e7e:	50 91 79 02 	lds	r21, 0x0279
    2e82:	14 16       	cp	r1, r20
    2e84:	15 06       	cpc	r1, r21
    2e86:	e4 f4       	brge	.+56     	; 0x2ec0 <TimerSet+0x58>
    2e88:	ee e8       	ldi	r30, 0x8E	; 142
    2e8a:	f2 e0       	ldi	r31, 0x02	; 2
    2e8c:	df 01       	movw	r26, r30
    2e8e:	16 96       	adiw	r26, 0x06	; 6
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	30 e0       	ldi	r19, 0x00	; 0
	sei();
}

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
    2e94:	70 e0       	ldi	r23, 0x00	; 0
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
			check=true;
			tmrEvent[i].count=0;
			tmrEvent[i].max=max;
			tmrEvent[i].enabled=true;
    2e96:	61 e0       	ldi	r22, 0x01	; 1

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
    2e98:	80 81       	ld	r24, Z
    2e9a:	91 81       	ldd	r25, Z+1	; 0x01
    2e9c:	8c 17       	cp	r24, r28
    2e9e:	9d 07       	cpc	r25, r29
    2ea0:	31 f4       	brne	.+12     	; 0x2eae <TimerSet+0x46>
			check=true;
			tmrEvent[i].count=0;
    2ea2:	13 82       	std	Z+3, r1	; 0x03
    2ea4:	12 82       	std	Z+2, r1	; 0x02
			tmrEvent[i].max=max;
    2ea6:	d5 82       	std	Z+5, r13	; 0x05
    2ea8:	c4 82       	std	Z+4, r12	; 0x04
			tmrEvent[i].enabled=true;
    2eaa:	6c 93       	st	X, r22
//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
			check=true;
    2eac:	76 2f       	mov	r23, r22
}

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
    2eae:	2f 5f       	subi	r18, 0xFF	; 255
    2eb0:	3f 4f       	sbci	r19, 0xFF	; 255
    2eb2:	37 96       	adiw	r30, 0x07	; 7
    2eb4:	17 96       	adiw	r26, 0x07	; 7
    2eb6:	24 17       	cp	r18, r20
    2eb8:	35 07       	cpc	r19, r21
    2eba:	74 f3       	brlt	.-36     	; 0x2e98 <TimerSet+0x30>
			tmrEvent[i].count=0;
			tmrEvent[i].max=max;
			tmrEvent[i].enabled=true;
		}
	}
	if (!check) {
    2ebc:	77 23       	and	r23, r23
    2ebe:	c9 f4       	brne	.+50     	; 0x2ef2 <TimerSet+0x8a>
		tmrEvent[tmrCount].EventId=evenId;
    2ec0:	fa 01       	movw	r30, r20
    2ec2:	ee 0f       	add	r30, r30
    2ec4:	ff 1f       	adc	r31, r31
    2ec6:	ee 0f       	add	r30, r30
    2ec8:	ff 1f       	adc	r31, r31
    2eca:	ee 0f       	add	r30, r30
    2ecc:	ff 1f       	adc	r31, r31
    2ece:	e4 1b       	sub	r30, r20
    2ed0:	f5 0b       	sbc	r31, r21
    2ed2:	e2 57       	subi	r30, 0x72	; 114
    2ed4:	fd 4f       	sbci	r31, 0xFD	; 253
    2ed6:	d1 83       	std	Z+1, r29	; 0x01
    2ed8:	c0 83       	st	Z, r28
		tmrEvent[tmrCount].count=0;
    2eda:	13 82       	std	Z+3, r1	; 0x03
    2edc:	12 82       	std	Z+2, r1	; 0x02
		tmrEvent[tmrCount].max=max;
    2ede:	d5 82       	std	Z+5, r13	; 0x05
    2ee0:	c4 82       	std	Z+4, r12	; 0x04
		tmrEvent[tmrCount].enabled=true;
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	86 83       	std	Z+6, r24	; 0x06
		tmrCount++;
    2ee6:	4f 5f       	subi	r20, 0xFF	; 255
    2ee8:	5f 4f       	sbci	r21, 0xFF	; 255
    2eea:	50 93 79 02 	sts	0x0279, r21
    2eee:	40 93 78 02 	sts	0x0278, r20
	}
}
    2ef2:	df 91       	pop	r29
    2ef4:	cf 91       	pop	r28
    2ef6:	ff 90       	pop	r15
    2ef8:	ef 90       	pop	r14
    2efa:	df 90       	pop	r13
    2efc:	cf 90       	pop	r12
    2efe:	08 95       	ret

00002f00 <TimerUnSet>:

void TimerUnSet(const sc_eventid evenId) {
    2f00:	dc 01       	movw	r26, r24
	for (int i=0;i<tmrCount;i++) {
    2f02:	60 91 78 02 	lds	r22, 0x0278
    2f06:	70 91 79 02 	lds	r23, 0x0279
    2f0a:	16 16       	cp	r1, r22
    2f0c:	17 06       	cpc	r1, r23
    2f0e:	64 f5       	brge	.+88     	; 0x2f68 <TimerUnSet+0x68>
		if (tmrEvent[i].EventId==evenId) {
    2f10:	80 91 8e 02 	lds	r24, 0x028E
    2f14:	90 91 8f 02 	lds	r25, 0x028F
    2f18:	8a 17       	cp	r24, r26
    2f1a:	9b 07       	cpc	r25, r27
    2f1c:	e1 f4       	brne	.+56     	; 0x2f56 <TimerUnSet+0x56>
    2f1e:	0a c0       	rjmp	.+20     	; 0x2f34 <TimerUnSet+0x34>
    2f20:	29 5f       	subi	r18, 0xF9	; 249
    2f22:	3f 4f       	sbci	r19, 0xFF	; 255
		tmrEvent[tmrCount].enabled=true;
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
    2f24:	f9 01       	movw	r30, r18
    2f26:	37 97       	sbiw	r30, 0x07	; 7
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
    2f28:	80 81       	ld	r24, Z
    2f2a:	91 81       	ldd	r25, Z+1	; 0x01
    2f2c:	8a 17       	cp	r24, r26
    2f2e:	9b 07       	cpc	r25, r27
    2f30:	b1 f4       	brne	.+44     	; 0x2f5e <TimerUnSet+0x5e>
    2f32:	02 c0       	rjmp	.+4      	; 0x2f38 <TimerUnSet+0x38>
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
	for (int i=0;i<tmrCount;i++) {
    2f34:	40 e0       	ldi	r20, 0x00	; 0
    2f36:	50 e0       	ldi	r21, 0x00	; 0
		if (tmrEvent[i].EventId==evenId) {
			tmrEvent[i].count=0;
    2f38:	fa 01       	movw	r30, r20
    2f3a:	ee 0f       	add	r30, r30
    2f3c:	ff 1f       	adc	r31, r31
    2f3e:	ee 0f       	add	r30, r30
    2f40:	ff 1f       	adc	r31, r31
    2f42:	ee 0f       	add	r30, r30
    2f44:	ff 1f       	adc	r31, r31
    2f46:	e4 1b       	sub	r30, r20
    2f48:	f5 0b       	sbc	r31, r21
    2f4a:	e2 57       	subi	r30, 0x72	; 114
    2f4c:	fd 4f       	sbci	r31, 0xFD	; 253
    2f4e:	13 82       	std	Z+3, r1	; 0x03
    2f50:	12 82       	std	Z+2, r1	; 0x02
			tmrEvent[i].enabled=false;
    2f52:	16 82       	std	Z+6, r1	; 0x06
			return;
    2f54:	08 95       	ret
    2f56:	25 e9       	ldi	r18, 0x95	; 149
    2f58:	32 e0       	ldi	r19, 0x02	; 2
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
	for (int i=0;i<tmrCount;i++) {
    2f5a:	40 e0       	ldi	r20, 0x00	; 0
    2f5c:	50 e0       	ldi	r21, 0x00	; 0
    2f5e:	4f 5f       	subi	r20, 0xFF	; 255
    2f60:	5f 4f       	sbci	r21, 0xFF	; 255
    2f62:	46 17       	cp	r20, r22
    2f64:	57 07       	cpc	r21, r23
    2f66:	e1 f6       	brne	.-72     	; 0x2f20 <TimerUnSet+0x20>
    2f68:	08 95       	ret

00002f6a <TimerCheck>:
			return;
		}
	}
}

void TimerCheck(SMO* handle) {
    2f6a:	cf 92       	push	r12
    2f6c:	df 92       	push	r13
    2f6e:	ef 92       	push	r14
    2f70:	ff 92       	push	r15
    2f72:	0f 93       	push	r16
    2f74:	1f 93       	push	r17
    2f76:	cf 93       	push	r28
    2f78:	df 93       	push	r29
    2f7a:	6c 01       	movw	r12, r24
	for (int i=0;i<tmrCount;i++) {
    2f7c:	80 91 78 02 	lds	r24, 0x0278
    2f80:	90 91 79 02 	lds	r25, 0x0279
    2f84:	18 16       	cp	r1, r24
    2f86:	19 06       	cpc	r1, r25
    2f88:	94 f5       	brge	.+100    	; 0x2fee <TimerCheck+0x84>
    2f8a:	c4 e9       	ldi	r28, 0x94	; 148
    2f8c:	d2 e0       	ldi	r29, 0x02	; 2
    2f8e:	8e 01       	movw	r16, r28
    2f90:	06 50       	subi	r16, 0x06	; 6
    2f92:	10 40       	sbci	r17, 0x00	; 0
    2f94:	ee 24       	eor	r14, r14
    2f96:	ff 24       	eor	r15, r15
		if (tmrEvent[i].enabled) {
    2f98:	88 81       	ld	r24, Y
    2f9a:	88 23       	and	r24, r24
    2f9c:	d9 f0       	breq	.+54     	; 0x2fd4 <TimerCheck+0x6a>
			tmrEvent[i].count++;
    2f9e:	d8 01       	movw	r26, r16
    2fa0:	12 96       	adiw	r26, 0x02	; 2
    2fa2:	8d 91       	ld	r24, X+
    2fa4:	9c 91       	ld	r25, X
    2fa6:	13 97       	sbiw	r26, 0x03	; 3
    2fa8:	01 96       	adiw	r24, 0x01	; 1
    2faa:	13 96       	adiw	r26, 0x03	; 3
    2fac:	9c 93       	st	X, r25
    2fae:	8e 93       	st	-X, r24
    2fb0:	12 97       	sbiw	r26, 0x02	; 2
			if (tmrEvent[i].count==tmrEvent[i].max) {
    2fb2:	14 96       	adiw	r26, 0x04	; 4
    2fb4:	2d 91       	ld	r18, X+
    2fb6:	3c 91       	ld	r19, X
    2fb8:	15 97       	sbiw	r26, 0x05	; 5
    2fba:	82 17       	cp	r24, r18
    2fbc:	93 07       	cpc	r25, r19
    2fbe:	51 f4       	brne	.+20     	; 0x2fd4 <TimerCheck+0x6a>
				tmrEvent[i].count=0;
    2fc0:	13 96       	adiw	r26, 0x03	; 3
    2fc2:	1c 92       	st	X, r1
    2fc4:	1e 92       	st	-X, r1
    2fc6:	12 97       	sbiw	r26, 0x02	; 2
				tmrEvent[i].enabled=false;
    2fc8:	18 82       	st	Y, r1
				sMO_raiseTimeEvent(handle,tmrEvent[i].EventId);
    2fca:	6d 91       	ld	r22, X+
    2fcc:	7c 91       	ld	r23, X
    2fce:	c6 01       	movw	r24, r12
    2fd0:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sMO_raiseTimeEvent>
		}
	}
}

void TimerCheck(SMO* handle) {
	for (int i=0;i<tmrCount;i++) {
    2fd4:	08 94       	sec
    2fd6:	e1 1c       	adc	r14, r1
    2fd8:	f1 1c       	adc	r15, r1
    2fda:	27 96       	adiw	r28, 0x07	; 7
    2fdc:	09 5f       	subi	r16, 0xF9	; 249
    2fde:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe0:	80 91 78 02 	lds	r24, 0x0278
    2fe4:	90 91 79 02 	lds	r25, 0x0279
    2fe8:	e8 16       	cp	r14, r24
    2fea:	f9 06       	cpc	r15, r25
    2fec:	ac f2       	brlt	.-86     	; 0x2f98 <TimerCheck+0x2e>
				tmrEvent[i].enabled=false;
				sMO_raiseTimeEvent(handle,tmrEvent[i].EventId);
			}
		}
	}
}
    2fee:	df 91       	pop	r29
    2ff0:	cf 91       	pop	r28
    2ff2:	1f 91       	pop	r17
    2ff4:	0f 91       	pop	r16
    2ff6:	ff 90       	pop	r15
    2ff8:	ef 90       	pop	r14
    2ffa:	df 90       	pop	r13
    2ffc:	cf 90       	pop	r12
    2ffe:	08 95       	ret

00003000 <TimerClear>:

void TimerClear() {
	free(tmrEvent);
    3000:	8e e8       	ldi	r24, 0x8E	; 142
    3002:	92 e0       	ldi	r25, 0x02	; 2
    3004:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <free>
	tmrCount=0;
    3008:	10 92 79 02 	sts	0x0279, r1
    300c:	10 92 78 02 	sts	0x0278, r1
    3010:	08 95       	ret

00003012 <__mulsi3>:
    3012:	62 9f       	mul	r22, r18
    3014:	d0 01       	movw	r26, r0
    3016:	73 9f       	mul	r23, r19
    3018:	f0 01       	movw	r30, r0
    301a:	82 9f       	mul	r24, r18
    301c:	e0 0d       	add	r30, r0
    301e:	f1 1d       	adc	r31, r1
    3020:	64 9f       	mul	r22, r20
    3022:	e0 0d       	add	r30, r0
    3024:	f1 1d       	adc	r31, r1
    3026:	92 9f       	mul	r25, r18
    3028:	f0 0d       	add	r31, r0
    302a:	83 9f       	mul	r24, r19
    302c:	f0 0d       	add	r31, r0
    302e:	74 9f       	mul	r23, r20
    3030:	f0 0d       	add	r31, r0
    3032:	65 9f       	mul	r22, r21
    3034:	f0 0d       	add	r31, r0
    3036:	99 27       	eor	r25, r25
    3038:	72 9f       	mul	r23, r18
    303a:	b0 0d       	add	r27, r0
    303c:	e1 1d       	adc	r30, r1
    303e:	f9 1f       	adc	r31, r25
    3040:	63 9f       	mul	r22, r19
    3042:	b0 0d       	add	r27, r0
    3044:	e1 1d       	adc	r30, r1
    3046:	f9 1f       	adc	r31, r25
    3048:	bd 01       	movw	r22, r26
    304a:	cf 01       	movw	r24, r30
    304c:	11 24       	eor	r1, r1
    304e:	08 95       	ret

00003050 <__udivmodqi4>:
    3050:	99 1b       	sub	r25, r25
    3052:	79 e0       	ldi	r23, 0x09	; 9
    3054:	04 c0       	rjmp	.+8      	; 0x305e <__udivmodqi4_ep>

00003056 <__udivmodqi4_loop>:
    3056:	99 1f       	adc	r25, r25
    3058:	96 17       	cp	r25, r22
    305a:	08 f0       	brcs	.+2      	; 0x305e <__udivmodqi4_ep>
    305c:	96 1b       	sub	r25, r22

0000305e <__udivmodqi4_ep>:
    305e:	88 1f       	adc	r24, r24
    3060:	7a 95       	dec	r23
    3062:	c9 f7       	brne	.-14     	; 0x3056 <__udivmodqi4_loop>
    3064:	80 95       	com	r24
    3066:	08 95       	ret

00003068 <__divmodhi4>:
    3068:	97 fb       	bst	r25, 7
    306a:	09 2e       	mov	r0, r25
    306c:	07 26       	eor	r0, r23
    306e:	0a d0       	rcall	.+20     	; 0x3084 <__divmodhi4_neg1>
    3070:	77 fd       	sbrc	r23, 7
    3072:	04 d0       	rcall	.+8      	; 0x307c <__divmodhi4_neg2>
    3074:	0c d0       	rcall	.+24     	; 0x308e <__udivmodhi4>
    3076:	06 d0       	rcall	.+12     	; 0x3084 <__divmodhi4_neg1>
    3078:	00 20       	and	r0, r0
    307a:	1a f4       	brpl	.+6      	; 0x3082 <__divmodhi4_exit>

0000307c <__divmodhi4_neg2>:
    307c:	70 95       	com	r23
    307e:	61 95       	neg	r22
    3080:	7f 4f       	sbci	r23, 0xFF	; 255

00003082 <__divmodhi4_exit>:
    3082:	08 95       	ret

00003084 <__divmodhi4_neg1>:
    3084:	f6 f7       	brtc	.-4      	; 0x3082 <__divmodhi4_exit>
    3086:	90 95       	com	r25
    3088:	81 95       	neg	r24
    308a:	9f 4f       	sbci	r25, 0xFF	; 255
    308c:	08 95       	ret

0000308e <__udivmodhi4>:
    308e:	aa 1b       	sub	r26, r26
    3090:	bb 1b       	sub	r27, r27
    3092:	51 e1       	ldi	r21, 0x11	; 17
    3094:	07 c0       	rjmp	.+14     	; 0x30a4 <__udivmodhi4_ep>

00003096 <__udivmodhi4_loop>:
    3096:	aa 1f       	adc	r26, r26
    3098:	bb 1f       	adc	r27, r27
    309a:	a6 17       	cp	r26, r22
    309c:	b7 07       	cpc	r27, r23
    309e:	10 f0       	brcs	.+4      	; 0x30a4 <__udivmodhi4_ep>
    30a0:	a6 1b       	sub	r26, r22
    30a2:	b7 0b       	sbc	r27, r23

000030a4 <__udivmodhi4_ep>:
    30a4:	88 1f       	adc	r24, r24
    30a6:	99 1f       	adc	r25, r25
    30a8:	5a 95       	dec	r21
    30aa:	a9 f7       	brne	.-22     	; 0x3096 <__udivmodhi4_loop>
    30ac:	80 95       	com	r24
    30ae:	90 95       	com	r25
    30b0:	bc 01       	movw	r22, r24
    30b2:	cd 01       	movw	r24, r26
    30b4:	08 95       	ret

000030b6 <malloc>:
    30b6:	cf 93       	push	r28
    30b8:	df 93       	push	r29
    30ba:	ac 01       	movw	r20, r24
    30bc:	82 30       	cpi	r24, 0x02	; 2
    30be:	91 05       	cpc	r25, r1
    30c0:	10 f4       	brcc	.+4      	; 0x30c6 <malloc+0x10>
    30c2:	42 e0       	ldi	r20, 0x02	; 2
    30c4:	50 e0       	ldi	r21, 0x00	; 0
    30c6:	e0 91 d6 02 	lds	r30, 0x02D6
    30ca:	f0 91 d7 02 	lds	r31, 0x02D7
    30ce:	20 e0       	ldi	r18, 0x00	; 0
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	a0 e0       	ldi	r26, 0x00	; 0
    30d4:	b0 e0       	ldi	r27, 0x00	; 0
    30d6:	24 c0       	rjmp	.+72     	; 0x3120 <malloc+0x6a>
    30d8:	80 81       	ld	r24, Z
    30da:	91 81       	ldd	r25, Z+1	; 0x01
    30dc:	84 17       	cp	r24, r20
    30de:	95 07       	cpc	r25, r21
    30e0:	d0 f0       	brcs	.+52     	; 0x3116 <malloc+0x60>
    30e2:	84 17       	cp	r24, r20
    30e4:	95 07       	cpc	r25, r21
    30e6:	71 f4       	brne	.+28     	; 0x3104 <malloc+0x4e>
    30e8:	82 81       	ldd	r24, Z+2	; 0x02
    30ea:	93 81       	ldd	r25, Z+3	; 0x03
    30ec:	10 97       	sbiw	r26, 0x00	; 0
    30ee:	29 f0       	breq	.+10     	; 0x30fa <malloc+0x44>
    30f0:	13 96       	adiw	r26, 0x03	; 3
    30f2:	9c 93       	st	X, r25
    30f4:	8e 93       	st	-X, r24
    30f6:	12 97       	sbiw	r26, 0x02	; 2
    30f8:	2c c0       	rjmp	.+88     	; 0x3152 <malloc+0x9c>
    30fa:	90 93 d7 02 	sts	0x02D7, r25
    30fe:	80 93 d6 02 	sts	0x02D6, r24
    3102:	27 c0       	rjmp	.+78     	; 0x3152 <malloc+0x9c>
    3104:	21 15       	cp	r18, r1
    3106:	31 05       	cpc	r19, r1
    3108:	19 f0       	breq	.+6      	; 0x3110 <malloc+0x5a>
    310a:	82 17       	cp	r24, r18
    310c:	93 07       	cpc	r25, r19
    310e:	18 f4       	brcc	.+6      	; 0x3116 <malloc+0x60>
    3110:	9c 01       	movw	r18, r24
    3112:	bd 01       	movw	r22, r26
    3114:	ef 01       	movw	r28, r30
    3116:	92 81       	ldd	r25, Z+2	; 0x02
    3118:	83 81       	ldd	r24, Z+3	; 0x03
    311a:	df 01       	movw	r26, r30
    311c:	e9 2f       	mov	r30, r25
    311e:	f8 2f       	mov	r31, r24
    3120:	30 97       	sbiw	r30, 0x00	; 0
    3122:	d1 f6       	brne	.-76     	; 0x30d8 <malloc+0x22>
    3124:	21 15       	cp	r18, r1
    3126:	31 05       	cpc	r19, r1
    3128:	f9 f0       	breq	.+62     	; 0x3168 <malloc+0xb2>
    312a:	c9 01       	movw	r24, r18
    312c:	84 1b       	sub	r24, r20
    312e:	95 0b       	sbc	r25, r21
    3130:	84 30       	cpi	r24, 0x04	; 4
    3132:	91 05       	cpc	r25, r1
    3134:	80 f4       	brcc	.+32     	; 0x3156 <malloc+0xa0>
    3136:	8a 81       	ldd	r24, Y+2	; 0x02
    3138:	9b 81       	ldd	r25, Y+3	; 0x03
    313a:	61 15       	cp	r22, r1
    313c:	71 05       	cpc	r23, r1
    313e:	21 f0       	breq	.+8      	; 0x3148 <malloc+0x92>
    3140:	fb 01       	movw	r30, r22
    3142:	93 83       	std	Z+3, r25	; 0x03
    3144:	82 83       	std	Z+2, r24	; 0x02
    3146:	04 c0       	rjmp	.+8      	; 0x3150 <malloc+0x9a>
    3148:	90 93 d7 02 	sts	0x02D7, r25
    314c:	80 93 d6 02 	sts	0x02D6, r24
    3150:	fe 01       	movw	r30, r28
    3152:	32 96       	adiw	r30, 0x02	; 2
    3154:	42 c0       	rjmp	.+132    	; 0x31da <malloc+0x124>
    3156:	fe 01       	movw	r30, r28
    3158:	e8 0f       	add	r30, r24
    315a:	f9 1f       	adc	r31, r25
    315c:	41 93       	st	Z+, r20
    315e:	51 93       	st	Z+, r21
    3160:	02 97       	sbiw	r24, 0x02	; 2
    3162:	99 83       	std	Y+1, r25	; 0x01
    3164:	88 83       	st	Y, r24
    3166:	39 c0       	rjmp	.+114    	; 0x31da <malloc+0x124>
    3168:	80 91 d4 02 	lds	r24, 0x02D4
    316c:	90 91 d5 02 	lds	r25, 0x02D5
    3170:	00 97       	sbiw	r24, 0x00	; 0
    3172:	41 f4       	brne	.+16     	; 0x3184 <malloc+0xce>
    3174:	80 91 73 02 	lds	r24, 0x0273
    3178:	90 91 74 02 	lds	r25, 0x0274
    317c:	90 93 d5 02 	sts	0x02D5, r25
    3180:	80 93 d4 02 	sts	0x02D4, r24
    3184:	20 91 71 02 	lds	r18, 0x0271
    3188:	30 91 72 02 	lds	r19, 0x0272
    318c:	21 15       	cp	r18, r1
    318e:	31 05       	cpc	r19, r1
    3190:	41 f4       	brne	.+16     	; 0x31a2 <malloc+0xec>
    3192:	2d b7       	in	r18, 0x3d	; 61
    3194:	3e b7       	in	r19, 0x3e	; 62
    3196:	80 91 75 02 	lds	r24, 0x0275
    319a:	90 91 76 02 	lds	r25, 0x0276
    319e:	28 1b       	sub	r18, r24
    31a0:	39 0b       	sbc	r19, r25
    31a2:	e0 91 d4 02 	lds	r30, 0x02D4
    31a6:	f0 91 d5 02 	lds	r31, 0x02D5
    31aa:	e2 17       	cp	r30, r18
    31ac:	f3 07       	cpc	r31, r19
    31ae:	98 f4       	brcc	.+38     	; 0x31d6 <malloc+0x120>
    31b0:	2e 1b       	sub	r18, r30
    31b2:	3f 0b       	sbc	r19, r31
    31b4:	24 17       	cp	r18, r20
    31b6:	35 07       	cpc	r19, r21
    31b8:	70 f0       	brcs	.+28     	; 0x31d6 <malloc+0x120>
    31ba:	ca 01       	movw	r24, r20
    31bc:	02 96       	adiw	r24, 0x02	; 2
    31be:	28 17       	cp	r18, r24
    31c0:	39 07       	cpc	r19, r25
    31c2:	48 f0       	brcs	.+18     	; 0x31d6 <malloc+0x120>
    31c4:	8e 0f       	add	r24, r30
    31c6:	9f 1f       	adc	r25, r31
    31c8:	90 93 d5 02 	sts	0x02D5, r25
    31cc:	80 93 d4 02 	sts	0x02D4, r24
    31d0:	41 93       	st	Z+, r20
    31d2:	51 93       	st	Z+, r21
    31d4:	02 c0       	rjmp	.+4      	; 0x31da <malloc+0x124>
    31d6:	e0 e0       	ldi	r30, 0x00	; 0
    31d8:	f0 e0       	ldi	r31, 0x00	; 0
    31da:	cf 01       	movw	r24, r30
    31dc:	df 91       	pop	r29
    31de:	cf 91       	pop	r28
    31e0:	08 95       	ret

000031e2 <free>:
    31e2:	0f 93       	push	r16
    31e4:	1f 93       	push	r17
    31e6:	cf 93       	push	r28
    31e8:	df 93       	push	r29
    31ea:	9c 01       	movw	r18, r24
    31ec:	00 97       	sbiw	r24, 0x00	; 0
    31ee:	09 f4       	brne	.+2      	; 0x31f2 <free+0x10>
    31f0:	8c c0       	rjmp	.+280    	; 0x330a <free+0x128>
    31f2:	dc 01       	movw	r26, r24
    31f4:	12 97       	sbiw	r26, 0x02	; 2
    31f6:	13 96       	adiw	r26, 0x03	; 3
    31f8:	1c 92       	st	X, r1
    31fa:	1e 92       	st	-X, r1
    31fc:	12 97       	sbiw	r26, 0x02	; 2
    31fe:	60 91 d6 02 	lds	r22, 0x02D6
    3202:	70 91 d7 02 	lds	r23, 0x02D7
    3206:	61 15       	cp	r22, r1
    3208:	71 05       	cpc	r23, r1
    320a:	89 f4       	brne	.+34     	; 0x322e <free+0x4c>
    320c:	8d 91       	ld	r24, X+
    320e:	9c 91       	ld	r25, X
    3210:	11 97       	sbiw	r26, 0x01	; 1
    3212:	82 0f       	add	r24, r18
    3214:	93 1f       	adc	r25, r19
    3216:	20 91 d4 02 	lds	r18, 0x02D4
    321a:	30 91 d5 02 	lds	r19, 0x02D5
    321e:	28 17       	cp	r18, r24
    3220:	39 07       	cpc	r19, r25
    3222:	69 f5       	brne	.+90     	; 0x327e <free+0x9c>
    3224:	b0 93 d5 02 	sts	0x02D5, r27
    3228:	a0 93 d4 02 	sts	0x02D4, r26
    322c:	6e c0       	rjmp	.+220    	; 0x330a <free+0x128>
    322e:	fb 01       	movw	r30, r22
    3230:	40 e0       	ldi	r20, 0x00	; 0
    3232:	50 e0       	ldi	r21, 0x00	; 0
    3234:	01 c0       	rjmp	.+2      	; 0x3238 <free+0x56>
    3236:	fc 01       	movw	r30, r24
    3238:	ea 17       	cp	r30, r26
    323a:	fb 07       	cpc	r31, r27
    323c:	30 f4       	brcc	.+12     	; 0x324a <free+0x68>
    323e:	82 81       	ldd	r24, Z+2	; 0x02
    3240:	93 81       	ldd	r25, Z+3	; 0x03
    3242:	af 01       	movw	r20, r30
    3244:	00 97       	sbiw	r24, 0x00	; 0
    3246:	b9 f7       	brne	.-18     	; 0x3236 <free+0x54>
    3248:	1f c0       	rjmp	.+62     	; 0x3288 <free+0xa6>
    324a:	e9 01       	movw	r28, r18
    324c:	22 97       	sbiw	r28, 0x02	; 2
    324e:	fb 83       	std	Y+3, r31	; 0x03
    3250:	ea 83       	std	Y+2, r30	; 0x02
    3252:	08 81       	ld	r16, Y
    3254:	19 81       	ldd	r17, Y+1	; 0x01
    3256:	c9 01       	movw	r24, r18
    3258:	80 0f       	add	r24, r16
    325a:	91 1f       	adc	r25, r17
    325c:	8e 17       	cp	r24, r30
    325e:	9f 07       	cpc	r25, r31
    3260:	59 f4       	brne	.+22     	; 0x3278 <free+0x96>
    3262:	80 81       	ld	r24, Z
    3264:	91 81       	ldd	r25, Z+1	; 0x01
    3266:	80 0f       	add	r24, r16
    3268:	91 1f       	adc	r25, r17
    326a:	02 96       	adiw	r24, 0x02	; 2
    326c:	99 83       	std	Y+1, r25	; 0x01
    326e:	88 83       	st	Y, r24
    3270:	82 81       	ldd	r24, Z+2	; 0x02
    3272:	93 81       	ldd	r25, Z+3	; 0x03
    3274:	9b 83       	std	Y+3, r25	; 0x03
    3276:	8a 83       	std	Y+2, r24	; 0x02
    3278:	41 15       	cp	r20, r1
    327a:	51 05       	cpc	r21, r1
    327c:	29 f4       	brne	.+10     	; 0x3288 <free+0xa6>
    327e:	b0 93 d7 02 	sts	0x02D7, r27
    3282:	a0 93 d6 02 	sts	0x02D6, r26
    3286:	41 c0       	rjmp	.+130    	; 0x330a <free+0x128>
    3288:	fa 01       	movw	r30, r20
    328a:	b3 83       	std	Z+3, r27	; 0x03
    328c:	a2 83       	std	Z+2, r26	; 0x02
    328e:	c1 91       	ld	r28, Z+
    3290:	d1 91       	ld	r29, Z+
    3292:	ec 0f       	add	r30, r28
    3294:	fd 1f       	adc	r31, r29
    3296:	ae 17       	cp	r26, r30
    3298:	bf 07       	cpc	r27, r31
    329a:	81 f4       	brne	.+32     	; 0x32bc <free+0xda>
    329c:	f9 01       	movw	r30, r18
    329e:	92 91       	ld	r25, -Z
    32a0:	82 91       	ld	r24, -Z
    32a2:	8c 0f       	add	r24, r28
    32a4:	9d 1f       	adc	r25, r29
    32a6:	02 96       	adiw	r24, 0x02	; 2
    32a8:	da 01       	movw	r26, r20
    32aa:	11 96       	adiw	r26, 0x01	; 1
    32ac:	9c 93       	st	X, r25
    32ae:	8e 93       	st	-X, r24
    32b0:	82 81       	ldd	r24, Z+2	; 0x02
    32b2:	93 81       	ldd	r25, Z+3	; 0x03
    32b4:	13 96       	adiw	r26, 0x03	; 3
    32b6:	9c 93       	st	X, r25
    32b8:	8e 93       	st	-X, r24
    32ba:	12 97       	sbiw	r26, 0x02	; 2
    32bc:	e0 e0       	ldi	r30, 0x00	; 0
    32be:	f0 e0       	ldi	r31, 0x00	; 0
    32c0:	02 c0       	rjmp	.+4      	; 0x32c6 <free+0xe4>
    32c2:	fb 01       	movw	r30, r22
    32c4:	bc 01       	movw	r22, r24
    32c6:	db 01       	movw	r26, r22
    32c8:	12 96       	adiw	r26, 0x02	; 2
    32ca:	8d 91       	ld	r24, X+
    32cc:	9c 91       	ld	r25, X
    32ce:	13 97       	sbiw	r26, 0x03	; 3
    32d0:	00 97       	sbiw	r24, 0x00	; 0
    32d2:	b9 f7       	brne	.-18     	; 0x32c2 <free+0xe0>
    32d4:	cb 01       	movw	r24, r22
    32d6:	02 96       	adiw	r24, 0x02	; 2
    32d8:	2d 91       	ld	r18, X+
    32da:	3c 91       	ld	r19, X
    32dc:	11 97       	sbiw	r26, 0x01	; 1
    32de:	82 0f       	add	r24, r18
    32e0:	93 1f       	adc	r25, r19
    32e2:	20 91 d4 02 	lds	r18, 0x02D4
    32e6:	30 91 d5 02 	lds	r19, 0x02D5
    32ea:	28 17       	cp	r18, r24
    32ec:	39 07       	cpc	r19, r25
    32ee:	69 f4       	brne	.+26     	; 0x330a <free+0x128>
    32f0:	30 97       	sbiw	r30, 0x00	; 0
    32f2:	29 f4       	brne	.+10     	; 0x32fe <free+0x11c>
    32f4:	10 92 d7 02 	sts	0x02D7, r1
    32f8:	10 92 d6 02 	sts	0x02D6, r1
    32fc:	02 c0       	rjmp	.+4      	; 0x3302 <free+0x120>
    32fe:	13 82       	std	Z+3, r1	; 0x03
    3300:	12 82       	std	Z+2, r1	; 0x02
    3302:	70 93 d5 02 	sts	0x02D5, r23
    3306:	60 93 d4 02 	sts	0x02D4, r22
    330a:	df 91       	pop	r29
    330c:	cf 91       	pop	r28
    330e:	1f 91       	pop	r17
    3310:	0f 91       	pop	r16
    3312:	08 95       	ret

00003314 <sprintf>:
    3314:	0f 93       	push	r16
    3316:	1f 93       	push	r17
    3318:	cf 93       	push	r28
    331a:	df 93       	push	r29
    331c:	cd b7       	in	r28, 0x3d	; 61
    331e:	de b7       	in	r29, 0x3e	; 62
    3320:	2e 97       	sbiw	r28, 0x0e	; 14
    3322:	0f b6       	in	r0, 0x3f	; 63
    3324:	f8 94       	cli
    3326:	de bf       	out	0x3e, r29	; 62
    3328:	0f be       	out	0x3f, r0	; 63
    332a:	cd bf       	out	0x3d, r28	; 61
    332c:	0d 89       	ldd	r16, Y+21	; 0x15
    332e:	1e 89       	ldd	r17, Y+22	; 0x16
    3330:	86 e0       	ldi	r24, 0x06	; 6
    3332:	8c 83       	std	Y+4, r24	; 0x04
    3334:	1a 83       	std	Y+2, r17	; 0x02
    3336:	09 83       	std	Y+1, r16	; 0x01
    3338:	8f ef       	ldi	r24, 0xFF	; 255
    333a:	9f e7       	ldi	r25, 0x7F	; 127
    333c:	9e 83       	std	Y+6, r25	; 0x06
    333e:	8d 83       	std	Y+5, r24	; 0x05
    3340:	ae 01       	movw	r20, r28
    3342:	47 5e       	subi	r20, 0xE7	; 231
    3344:	5f 4f       	sbci	r21, 0xFF	; 255
    3346:	ce 01       	movw	r24, r28
    3348:	01 96       	adiw	r24, 0x01	; 1
    334a:	6f 89       	ldd	r22, Y+23	; 0x17
    334c:	78 8d       	ldd	r23, Y+24	; 0x18
    334e:	0e 94 b9 19 	call	0x3372	; 0x3372 <vfprintf>
    3352:	ef 81       	ldd	r30, Y+7	; 0x07
    3354:	f8 85       	ldd	r31, Y+8	; 0x08
    3356:	e0 0f       	add	r30, r16
    3358:	f1 1f       	adc	r31, r17
    335a:	10 82       	st	Z, r1
    335c:	2e 96       	adiw	r28, 0x0e	; 14
    335e:	0f b6       	in	r0, 0x3f	; 63
    3360:	f8 94       	cli
    3362:	de bf       	out	0x3e, r29	; 62
    3364:	0f be       	out	0x3f, r0	; 63
    3366:	cd bf       	out	0x3d, r28	; 61
    3368:	df 91       	pop	r29
    336a:	cf 91       	pop	r28
    336c:	1f 91       	pop	r17
    336e:	0f 91       	pop	r16
    3370:	08 95       	ret

00003372 <vfprintf>:
    3372:	2f 92       	push	r2
    3374:	3f 92       	push	r3
    3376:	4f 92       	push	r4
    3378:	5f 92       	push	r5
    337a:	6f 92       	push	r6
    337c:	7f 92       	push	r7
    337e:	8f 92       	push	r8
    3380:	9f 92       	push	r9
    3382:	af 92       	push	r10
    3384:	bf 92       	push	r11
    3386:	cf 92       	push	r12
    3388:	df 92       	push	r13
    338a:	ef 92       	push	r14
    338c:	ff 92       	push	r15
    338e:	0f 93       	push	r16
    3390:	1f 93       	push	r17
    3392:	cf 93       	push	r28
    3394:	df 93       	push	r29
    3396:	cd b7       	in	r28, 0x3d	; 61
    3398:	de b7       	in	r29, 0x3e	; 62
    339a:	2d 97       	sbiw	r28, 0x0d	; 13
    339c:	0f b6       	in	r0, 0x3f	; 63
    339e:	f8 94       	cli
    33a0:	de bf       	out	0x3e, r29	; 62
    33a2:	0f be       	out	0x3f, r0	; 63
    33a4:	cd bf       	out	0x3d, r28	; 61
    33a6:	3c 01       	movw	r6, r24
    33a8:	7d 87       	std	Y+13, r23	; 0x0d
    33aa:	6c 87       	std	Y+12, r22	; 0x0c
    33ac:	5a 01       	movw	r10, r20
    33ae:	fc 01       	movw	r30, r24
    33b0:	17 82       	std	Z+7, r1	; 0x07
    33b2:	16 82       	std	Z+6, r1	; 0x06
    33b4:	83 81       	ldd	r24, Z+3	; 0x03
    33b6:	81 ff       	sbrs	r24, 1
    33b8:	c8 c1       	rjmp	.+912    	; 0x374a <vfprintf+0x3d8>
    33ba:	2e 01       	movw	r4, r28
    33bc:	08 94       	sec
    33be:	41 1c       	adc	r4, r1
    33c0:	51 1c       	adc	r5, r1
    33c2:	f3 01       	movw	r30, r6
    33c4:	93 81       	ldd	r25, Z+3	; 0x03
    33c6:	ec 85       	ldd	r30, Y+12	; 0x0c
    33c8:	fd 85       	ldd	r31, Y+13	; 0x0d
    33ca:	93 fd       	sbrc	r25, 3
    33cc:	85 91       	lpm	r24, Z+
    33ce:	93 ff       	sbrs	r25, 3
    33d0:	81 91       	ld	r24, Z+
    33d2:	fd 87       	std	Y+13, r31	; 0x0d
    33d4:	ec 87       	std	Y+12, r30	; 0x0c
    33d6:	88 23       	and	r24, r24
    33d8:	09 f4       	brne	.+2      	; 0x33dc <vfprintf+0x6a>
    33da:	b3 c1       	rjmp	.+870    	; 0x3742 <vfprintf+0x3d0>
    33dc:	85 32       	cpi	r24, 0x25	; 37
    33de:	41 f4       	brne	.+16     	; 0x33f0 <vfprintf+0x7e>
    33e0:	93 fd       	sbrc	r25, 3
    33e2:	85 91       	lpm	r24, Z+
    33e4:	93 ff       	sbrs	r25, 3
    33e6:	81 91       	ld	r24, Z+
    33e8:	fd 87       	std	Y+13, r31	; 0x0d
    33ea:	ec 87       	std	Y+12, r30	; 0x0c
    33ec:	85 32       	cpi	r24, 0x25	; 37
    33ee:	29 f4       	brne	.+10     	; 0x33fa <vfprintf+0x88>
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	b3 01       	movw	r22, r6
    33f4:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <fputc>
    33f8:	e4 cf       	rjmp	.-56     	; 0x33c2 <vfprintf+0x50>
    33fa:	ff 24       	eor	r15, r15
    33fc:	ee 24       	eor	r14, r14
    33fe:	10 e0       	ldi	r17, 0x00	; 0
    3400:	10 32       	cpi	r17, 0x20	; 32
    3402:	b0 f4       	brcc	.+44     	; 0x3430 <vfprintf+0xbe>
    3404:	8b 32       	cpi	r24, 0x2B	; 43
    3406:	69 f0       	breq	.+26     	; 0x3422 <vfprintf+0xb0>
    3408:	8c 32       	cpi	r24, 0x2C	; 44
    340a:	28 f4       	brcc	.+10     	; 0x3416 <vfprintf+0xa4>
    340c:	80 32       	cpi	r24, 0x20	; 32
    340e:	51 f0       	breq	.+20     	; 0x3424 <vfprintf+0xb2>
    3410:	83 32       	cpi	r24, 0x23	; 35
    3412:	71 f4       	brne	.+28     	; 0x3430 <vfprintf+0xbe>
    3414:	0b c0       	rjmp	.+22     	; 0x342c <vfprintf+0xba>
    3416:	8d 32       	cpi	r24, 0x2D	; 45
    3418:	39 f0       	breq	.+14     	; 0x3428 <vfprintf+0xb6>
    341a:	80 33       	cpi	r24, 0x30	; 48
    341c:	49 f4       	brne	.+18     	; 0x3430 <vfprintf+0xbe>
    341e:	11 60       	ori	r17, 0x01	; 1
    3420:	2c c0       	rjmp	.+88     	; 0x347a <vfprintf+0x108>
    3422:	12 60       	ori	r17, 0x02	; 2
    3424:	14 60       	ori	r17, 0x04	; 4
    3426:	29 c0       	rjmp	.+82     	; 0x347a <vfprintf+0x108>
    3428:	18 60       	ori	r17, 0x08	; 8
    342a:	27 c0       	rjmp	.+78     	; 0x347a <vfprintf+0x108>
    342c:	10 61       	ori	r17, 0x10	; 16
    342e:	25 c0       	rjmp	.+74     	; 0x347a <vfprintf+0x108>
    3430:	17 fd       	sbrc	r17, 7
    3432:	2e c0       	rjmp	.+92     	; 0x3490 <vfprintf+0x11e>
    3434:	28 2f       	mov	r18, r24
    3436:	20 53       	subi	r18, 0x30	; 48
    3438:	2a 30       	cpi	r18, 0x0A	; 10
    343a:	98 f4       	brcc	.+38     	; 0x3462 <vfprintf+0xf0>
    343c:	16 ff       	sbrs	r17, 6
    343e:	08 c0       	rjmp	.+16     	; 0x3450 <vfprintf+0xde>
    3440:	8f 2d       	mov	r24, r15
    3442:	88 0f       	add	r24, r24
    3444:	f8 2e       	mov	r15, r24
    3446:	ff 0c       	add	r15, r15
    3448:	ff 0c       	add	r15, r15
    344a:	f8 0e       	add	r15, r24
    344c:	f2 0e       	add	r15, r18
    344e:	15 c0       	rjmp	.+42     	; 0x347a <vfprintf+0x108>
    3450:	8e 2d       	mov	r24, r14
    3452:	88 0f       	add	r24, r24
    3454:	e8 2e       	mov	r14, r24
    3456:	ee 0c       	add	r14, r14
    3458:	ee 0c       	add	r14, r14
    345a:	e8 0e       	add	r14, r24
    345c:	e2 0e       	add	r14, r18
    345e:	10 62       	ori	r17, 0x20	; 32
    3460:	0c c0       	rjmp	.+24     	; 0x347a <vfprintf+0x108>
    3462:	8e 32       	cpi	r24, 0x2E	; 46
    3464:	21 f4       	brne	.+8      	; 0x346e <vfprintf+0xfc>
    3466:	16 fd       	sbrc	r17, 6
    3468:	6c c1       	rjmp	.+728    	; 0x3742 <vfprintf+0x3d0>
    346a:	10 64       	ori	r17, 0x40	; 64
    346c:	06 c0       	rjmp	.+12     	; 0x347a <vfprintf+0x108>
    346e:	8c 36       	cpi	r24, 0x6C	; 108
    3470:	11 f4       	brne	.+4      	; 0x3476 <vfprintf+0x104>
    3472:	10 68       	ori	r17, 0x80	; 128
    3474:	02 c0       	rjmp	.+4      	; 0x347a <vfprintf+0x108>
    3476:	88 36       	cpi	r24, 0x68	; 104
    3478:	59 f4       	brne	.+22     	; 0x3490 <vfprintf+0x11e>
    347a:	ec 85       	ldd	r30, Y+12	; 0x0c
    347c:	fd 85       	ldd	r31, Y+13	; 0x0d
    347e:	93 fd       	sbrc	r25, 3
    3480:	85 91       	lpm	r24, Z+
    3482:	93 ff       	sbrs	r25, 3
    3484:	81 91       	ld	r24, Z+
    3486:	fd 87       	std	Y+13, r31	; 0x0d
    3488:	ec 87       	std	Y+12, r30	; 0x0c
    348a:	88 23       	and	r24, r24
    348c:	09 f0       	breq	.+2      	; 0x3490 <vfprintf+0x11e>
    348e:	b8 cf       	rjmp	.-144    	; 0x3400 <vfprintf+0x8e>
    3490:	98 2f       	mov	r25, r24
    3492:	95 54       	subi	r25, 0x45	; 69
    3494:	93 30       	cpi	r25, 0x03	; 3
    3496:	18 f0       	brcs	.+6      	; 0x349e <vfprintf+0x12c>
    3498:	90 52       	subi	r25, 0x20	; 32
    349a:	93 30       	cpi	r25, 0x03	; 3
    349c:	38 f4       	brcc	.+14     	; 0x34ac <vfprintf+0x13a>
    349e:	24 e0       	ldi	r18, 0x04	; 4
    34a0:	30 e0       	ldi	r19, 0x00	; 0
    34a2:	a2 0e       	add	r10, r18
    34a4:	b3 1e       	adc	r11, r19
    34a6:	3f e3       	ldi	r19, 0x3F	; 63
    34a8:	39 83       	std	Y+1, r19	; 0x01
    34aa:	0f c0       	rjmp	.+30     	; 0x34ca <vfprintf+0x158>
    34ac:	83 36       	cpi	r24, 0x63	; 99
    34ae:	31 f0       	breq	.+12     	; 0x34bc <vfprintf+0x14a>
    34b0:	83 37       	cpi	r24, 0x73	; 115
    34b2:	81 f0       	breq	.+32     	; 0x34d4 <vfprintf+0x162>
    34b4:	83 35       	cpi	r24, 0x53	; 83
    34b6:	09 f0       	breq	.+2      	; 0x34ba <vfprintf+0x148>
    34b8:	5a c0       	rjmp	.+180    	; 0x356e <vfprintf+0x1fc>
    34ba:	22 c0       	rjmp	.+68     	; 0x3500 <vfprintf+0x18e>
    34bc:	f5 01       	movw	r30, r10
    34be:	80 81       	ld	r24, Z
    34c0:	89 83       	std	Y+1, r24	; 0x01
    34c2:	22 e0       	ldi	r18, 0x02	; 2
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	a2 0e       	add	r10, r18
    34c8:	b3 1e       	adc	r11, r19
    34ca:	21 e0       	ldi	r18, 0x01	; 1
    34cc:	c2 2e       	mov	r12, r18
    34ce:	d1 2c       	mov	r13, r1
    34d0:	42 01       	movw	r8, r4
    34d2:	14 c0       	rjmp	.+40     	; 0x34fc <vfprintf+0x18a>
    34d4:	92 e0       	ldi	r25, 0x02	; 2
    34d6:	29 2e       	mov	r2, r25
    34d8:	31 2c       	mov	r3, r1
    34da:	2a 0c       	add	r2, r10
    34dc:	3b 1c       	adc	r3, r11
    34de:	f5 01       	movw	r30, r10
    34e0:	80 80       	ld	r8, Z
    34e2:	91 80       	ldd	r9, Z+1	; 0x01
    34e4:	16 ff       	sbrs	r17, 6
    34e6:	03 c0       	rjmp	.+6      	; 0x34ee <vfprintf+0x17c>
    34e8:	6f 2d       	mov	r22, r15
    34ea:	70 e0       	ldi	r23, 0x00	; 0
    34ec:	02 c0       	rjmp	.+4      	; 0x34f2 <vfprintf+0x180>
    34ee:	6f ef       	ldi	r22, 0xFF	; 255
    34f0:	7f ef       	ldi	r23, 0xFF	; 255
    34f2:	c4 01       	movw	r24, r8
    34f4:	0e 94 cb 1b 	call	0x3796	; 0x3796 <strnlen>
    34f8:	6c 01       	movw	r12, r24
    34fa:	51 01       	movw	r10, r2
    34fc:	1f 77       	andi	r17, 0x7F	; 127
    34fe:	15 c0       	rjmp	.+42     	; 0x352a <vfprintf+0x1b8>
    3500:	82 e0       	ldi	r24, 0x02	; 2
    3502:	28 2e       	mov	r2, r24
    3504:	31 2c       	mov	r3, r1
    3506:	2a 0c       	add	r2, r10
    3508:	3b 1c       	adc	r3, r11
    350a:	f5 01       	movw	r30, r10
    350c:	80 80       	ld	r8, Z
    350e:	91 80       	ldd	r9, Z+1	; 0x01
    3510:	16 ff       	sbrs	r17, 6
    3512:	03 c0       	rjmp	.+6      	; 0x351a <vfprintf+0x1a8>
    3514:	6f 2d       	mov	r22, r15
    3516:	70 e0       	ldi	r23, 0x00	; 0
    3518:	02 c0       	rjmp	.+4      	; 0x351e <vfprintf+0x1ac>
    351a:	6f ef       	ldi	r22, 0xFF	; 255
    351c:	7f ef       	ldi	r23, 0xFF	; 255
    351e:	c4 01       	movw	r24, r8
    3520:	0e 94 c0 1b 	call	0x3780	; 0x3780 <strnlen_P>
    3524:	6c 01       	movw	r12, r24
    3526:	10 68       	ori	r17, 0x80	; 128
    3528:	51 01       	movw	r10, r2
    352a:	13 fd       	sbrc	r17, 3
    352c:	1c c0       	rjmp	.+56     	; 0x3566 <vfprintf+0x1f4>
    352e:	06 c0       	rjmp	.+12     	; 0x353c <vfprintf+0x1ca>
    3530:	80 e2       	ldi	r24, 0x20	; 32
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	b3 01       	movw	r22, r6
    3536:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <fputc>
    353a:	ea 94       	dec	r14
    353c:	8e 2d       	mov	r24, r14
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	c8 16       	cp	r12, r24
    3542:	d9 06       	cpc	r13, r25
    3544:	a8 f3       	brcs	.-22     	; 0x3530 <vfprintf+0x1be>
    3546:	0f c0       	rjmp	.+30     	; 0x3566 <vfprintf+0x1f4>
    3548:	f4 01       	movw	r30, r8
    354a:	17 fd       	sbrc	r17, 7
    354c:	85 91       	lpm	r24, Z+
    354e:	17 ff       	sbrs	r17, 7
    3550:	81 91       	ld	r24, Z+
    3552:	4f 01       	movw	r8, r30
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	b3 01       	movw	r22, r6
    3558:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <fputc>
    355c:	e1 10       	cpse	r14, r1
    355e:	ea 94       	dec	r14
    3560:	08 94       	sec
    3562:	c1 08       	sbc	r12, r1
    3564:	d1 08       	sbc	r13, r1
    3566:	c1 14       	cp	r12, r1
    3568:	d1 04       	cpc	r13, r1
    356a:	71 f7       	brne	.-36     	; 0x3548 <vfprintf+0x1d6>
    356c:	e7 c0       	rjmp	.+462    	; 0x373c <vfprintf+0x3ca>
    356e:	84 36       	cpi	r24, 0x64	; 100
    3570:	11 f0       	breq	.+4      	; 0x3576 <vfprintf+0x204>
    3572:	89 36       	cpi	r24, 0x69	; 105
    3574:	51 f5       	brne	.+84     	; 0x35ca <vfprintf+0x258>
    3576:	f5 01       	movw	r30, r10
    3578:	17 ff       	sbrs	r17, 7
    357a:	07 c0       	rjmp	.+14     	; 0x358a <vfprintf+0x218>
    357c:	80 81       	ld	r24, Z
    357e:	91 81       	ldd	r25, Z+1	; 0x01
    3580:	a2 81       	ldd	r26, Z+2	; 0x02
    3582:	b3 81       	ldd	r27, Z+3	; 0x03
    3584:	24 e0       	ldi	r18, 0x04	; 4
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	08 c0       	rjmp	.+16     	; 0x359a <vfprintf+0x228>
    358a:	80 81       	ld	r24, Z
    358c:	91 81       	ldd	r25, Z+1	; 0x01
    358e:	aa 27       	eor	r26, r26
    3590:	97 fd       	sbrc	r25, 7
    3592:	a0 95       	com	r26
    3594:	ba 2f       	mov	r27, r26
    3596:	22 e0       	ldi	r18, 0x02	; 2
    3598:	30 e0       	ldi	r19, 0x00	; 0
    359a:	a2 0e       	add	r10, r18
    359c:	b3 1e       	adc	r11, r19
    359e:	01 2f       	mov	r16, r17
    35a0:	0f 76       	andi	r16, 0x6F	; 111
    35a2:	b7 ff       	sbrs	r27, 7
    35a4:	08 c0       	rjmp	.+16     	; 0x35b6 <vfprintf+0x244>
    35a6:	b0 95       	com	r27
    35a8:	a0 95       	com	r26
    35aa:	90 95       	com	r25
    35ac:	81 95       	neg	r24
    35ae:	9f 4f       	sbci	r25, 0xFF	; 255
    35b0:	af 4f       	sbci	r26, 0xFF	; 255
    35b2:	bf 4f       	sbci	r27, 0xFF	; 255
    35b4:	00 68       	ori	r16, 0x80	; 128
    35b6:	bc 01       	movw	r22, r24
    35b8:	cd 01       	movw	r24, r26
    35ba:	a2 01       	movw	r20, r4
    35bc:	2a e0       	ldi	r18, 0x0A	; 10
    35be:	30 e0       	ldi	r19, 0x00	; 0
    35c0:	0e 94 02 1c 	call	0x3804	; 0x3804 <__ultoa_invert>
    35c4:	d8 2e       	mov	r13, r24
    35c6:	d4 18       	sub	r13, r4
    35c8:	3f c0       	rjmp	.+126    	; 0x3648 <vfprintf+0x2d6>
    35ca:	85 37       	cpi	r24, 0x75	; 117
    35cc:	21 f4       	brne	.+8      	; 0x35d6 <vfprintf+0x264>
    35ce:	1f 7e       	andi	r17, 0xEF	; 239
    35d0:	2a e0       	ldi	r18, 0x0A	; 10
    35d2:	30 e0       	ldi	r19, 0x00	; 0
    35d4:	20 c0       	rjmp	.+64     	; 0x3616 <vfprintf+0x2a4>
    35d6:	19 7f       	andi	r17, 0xF9	; 249
    35d8:	8f 36       	cpi	r24, 0x6F	; 111
    35da:	a9 f0       	breq	.+42     	; 0x3606 <vfprintf+0x294>
    35dc:	80 37       	cpi	r24, 0x70	; 112
    35de:	20 f4       	brcc	.+8      	; 0x35e8 <vfprintf+0x276>
    35e0:	88 35       	cpi	r24, 0x58	; 88
    35e2:	09 f0       	breq	.+2      	; 0x35e6 <vfprintf+0x274>
    35e4:	ae c0       	rjmp	.+348    	; 0x3742 <vfprintf+0x3d0>
    35e6:	0b c0       	rjmp	.+22     	; 0x35fe <vfprintf+0x28c>
    35e8:	80 37       	cpi	r24, 0x70	; 112
    35ea:	21 f0       	breq	.+8      	; 0x35f4 <vfprintf+0x282>
    35ec:	88 37       	cpi	r24, 0x78	; 120
    35ee:	09 f0       	breq	.+2      	; 0x35f2 <vfprintf+0x280>
    35f0:	a8 c0       	rjmp	.+336    	; 0x3742 <vfprintf+0x3d0>
    35f2:	01 c0       	rjmp	.+2      	; 0x35f6 <vfprintf+0x284>
    35f4:	10 61       	ori	r17, 0x10	; 16
    35f6:	14 ff       	sbrs	r17, 4
    35f8:	09 c0       	rjmp	.+18     	; 0x360c <vfprintf+0x29a>
    35fa:	14 60       	ori	r17, 0x04	; 4
    35fc:	07 c0       	rjmp	.+14     	; 0x360c <vfprintf+0x29a>
    35fe:	14 ff       	sbrs	r17, 4
    3600:	08 c0       	rjmp	.+16     	; 0x3612 <vfprintf+0x2a0>
    3602:	16 60       	ori	r17, 0x06	; 6
    3604:	06 c0       	rjmp	.+12     	; 0x3612 <vfprintf+0x2a0>
    3606:	28 e0       	ldi	r18, 0x08	; 8
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	05 c0       	rjmp	.+10     	; 0x3616 <vfprintf+0x2a4>
    360c:	20 e1       	ldi	r18, 0x10	; 16
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	02 c0       	rjmp	.+4      	; 0x3616 <vfprintf+0x2a4>
    3612:	20 e1       	ldi	r18, 0x10	; 16
    3614:	32 e0       	ldi	r19, 0x02	; 2
    3616:	f5 01       	movw	r30, r10
    3618:	17 ff       	sbrs	r17, 7
    361a:	07 c0       	rjmp	.+14     	; 0x362a <vfprintf+0x2b8>
    361c:	60 81       	ld	r22, Z
    361e:	71 81       	ldd	r23, Z+1	; 0x01
    3620:	82 81       	ldd	r24, Z+2	; 0x02
    3622:	93 81       	ldd	r25, Z+3	; 0x03
    3624:	44 e0       	ldi	r20, 0x04	; 4
    3626:	50 e0       	ldi	r21, 0x00	; 0
    3628:	06 c0       	rjmp	.+12     	; 0x3636 <vfprintf+0x2c4>
    362a:	60 81       	ld	r22, Z
    362c:	71 81       	ldd	r23, Z+1	; 0x01
    362e:	80 e0       	ldi	r24, 0x00	; 0
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	42 e0       	ldi	r20, 0x02	; 2
    3634:	50 e0       	ldi	r21, 0x00	; 0
    3636:	a4 0e       	add	r10, r20
    3638:	b5 1e       	adc	r11, r21
    363a:	a2 01       	movw	r20, r4
    363c:	0e 94 02 1c 	call	0x3804	; 0x3804 <__ultoa_invert>
    3640:	d8 2e       	mov	r13, r24
    3642:	d4 18       	sub	r13, r4
    3644:	01 2f       	mov	r16, r17
    3646:	0f 77       	andi	r16, 0x7F	; 127
    3648:	06 ff       	sbrs	r16, 6
    364a:	09 c0       	rjmp	.+18     	; 0x365e <vfprintf+0x2ec>
    364c:	0e 7f       	andi	r16, 0xFE	; 254
    364e:	df 14       	cp	r13, r15
    3650:	30 f4       	brcc	.+12     	; 0x365e <vfprintf+0x2ec>
    3652:	04 ff       	sbrs	r16, 4
    3654:	06 c0       	rjmp	.+12     	; 0x3662 <vfprintf+0x2f0>
    3656:	02 fd       	sbrc	r16, 2
    3658:	04 c0       	rjmp	.+8      	; 0x3662 <vfprintf+0x2f0>
    365a:	0f 7e       	andi	r16, 0xEF	; 239
    365c:	02 c0       	rjmp	.+4      	; 0x3662 <vfprintf+0x2f0>
    365e:	1d 2d       	mov	r17, r13
    3660:	01 c0       	rjmp	.+2      	; 0x3664 <vfprintf+0x2f2>
    3662:	1f 2d       	mov	r17, r15
    3664:	80 2f       	mov	r24, r16
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	04 ff       	sbrs	r16, 4
    366a:	0c c0       	rjmp	.+24     	; 0x3684 <vfprintf+0x312>
    366c:	fe 01       	movw	r30, r28
    366e:	ed 0d       	add	r30, r13
    3670:	f1 1d       	adc	r31, r1
    3672:	20 81       	ld	r18, Z
    3674:	20 33       	cpi	r18, 0x30	; 48
    3676:	11 f4       	brne	.+4      	; 0x367c <vfprintf+0x30a>
    3678:	09 7e       	andi	r16, 0xE9	; 233
    367a:	09 c0       	rjmp	.+18     	; 0x368e <vfprintf+0x31c>
    367c:	02 ff       	sbrs	r16, 2
    367e:	06 c0       	rjmp	.+12     	; 0x368c <vfprintf+0x31a>
    3680:	1e 5f       	subi	r17, 0xFE	; 254
    3682:	05 c0       	rjmp	.+10     	; 0x368e <vfprintf+0x31c>
    3684:	86 78       	andi	r24, 0x86	; 134
    3686:	90 70       	andi	r25, 0x00	; 0
    3688:	00 97       	sbiw	r24, 0x00	; 0
    368a:	09 f0       	breq	.+2      	; 0x368e <vfprintf+0x31c>
    368c:	1f 5f       	subi	r17, 0xFF	; 255
    368e:	80 2e       	mov	r8, r16
    3690:	99 24       	eor	r9, r9
    3692:	03 fd       	sbrc	r16, 3
    3694:	12 c0       	rjmp	.+36     	; 0x36ba <vfprintf+0x348>
    3696:	00 ff       	sbrs	r16, 0
    3698:	0d c0       	rjmp	.+26     	; 0x36b4 <vfprintf+0x342>
    369a:	fd 2c       	mov	r15, r13
    369c:	1e 15       	cp	r17, r14
    369e:	50 f4       	brcc	.+20     	; 0x36b4 <vfprintf+0x342>
    36a0:	fe 0c       	add	r15, r14
    36a2:	f1 1a       	sub	r15, r17
    36a4:	1e 2d       	mov	r17, r14
    36a6:	06 c0       	rjmp	.+12     	; 0x36b4 <vfprintf+0x342>
    36a8:	80 e2       	ldi	r24, 0x20	; 32
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	b3 01       	movw	r22, r6
    36ae:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <fputc>
    36b2:	1f 5f       	subi	r17, 0xFF	; 255
    36b4:	1e 15       	cp	r17, r14
    36b6:	c0 f3       	brcs	.-16     	; 0x36a8 <vfprintf+0x336>
    36b8:	04 c0       	rjmp	.+8      	; 0x36c2 <vfprintf+0x350>
    36ba:	1e 15       	cp	r17, r14
    36bc:	10 f4       	brcc	.+4      	; 0x36c2 <vfprintf+0x350>
    36be:	e1 1a       	sub	r14, r17
    36c0:	01 c0       	rjmp	.+2      	; 0x36c4 <vfprintf+0x352>
    36c2:	ee 24       	eor	r14, r14
    36c4:	84 fe       	sbrs	r8, 4
    36c6:	0f c0       	rjmp	.+30     	; 0x36e6 <vfprintf+0x374>
    36c8:	80 e3       	ldi	r24, 0x30	; 48
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	b3 01       	movw	r22, r6
    36ce:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <fputc>
    36d2:	82 fe       	sbrs	r8, 2
    36d4:	1f c0       	rjmp	.+62     	; 0x3714 <vfprintf+0x3a2>
    36d6:	81 fe       	sbrs	r8, 1
    36d8:	03 c0       	rjmp	.+6      	; 0x36e0 <vfprintf+0x36e>
    36da:	88 e5       	ldi	r24, 0x58	; 88
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	10 c0       	rjmp	.+32     	; 0x3700 <vfprintf+0x38e>
    36e0:	88 e7       	ldi	r24, 0x78	; 120
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	0d c0       	rjmp	.+26     	; 0x3700 <vfprintf+0x38e>
    36e6:	c4 01       	movw	r24, r8
    36e8:	86 78       	andi	r24, 0x86	; 134
    36ea:	90 70       	andi	r25, 0x00	; 0
    36ec:	00 97       	sbiw	r24, 0x00	; 0
    36ee:	91 f0       	breq	.+36     	; 0x3714 <vfprintf+0x3a2>
    36f0:	81 fc       	sbrc	r8, 1
    36f2:	02 c0       	rjmp	.+4      	; 0x36f8 <vfprintf+0x386>
    36f4:	80 e2       	ldi	r24, 0x20	; 32
    36f6:	01 c0       	rjmp	.+2      	; 0x36fa <vfprintf+0x388>
    36f8:	8b e2       	ldi	r24, 0x2B	; 43
    36fa:	07 fd       	sbrc	r16, 7
    36fc:	8d e2       	ldi	r24, 0x2D	; 45
    36fe:	90 e0       	ldi	r25, 0x00	; 0
    3700:	b3 01       	movw	r22, r6
    3702:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <fputc>
    3706:	06 c0       	rjmp	.+12     	; 0x3714 <vfprintf+0x3a2>
    3708:	80 e3       	ldi	r24, 0x30	; 48
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	b3 01       	movw	r22, r6
    370e:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <fputc>
    3712:	fa 94       	dec	r15
    3714:	df 14       	cp	r13, r15
    3716:	c0 f3       	brcs	.-16     	; 0x3708 <vfprintf+0x396>
    3718:	da 94       	dec	r13
    371a:	f2 01       	movw	r30, r4
    371c:	ed 0d       	add	r30, r13
    371e:	f1 1d       	adc	r31, r1
    3720:	80 81       	ld	r24, Z
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	b3 01       	movw	r22, r6
    3726:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <fputc>
    372a:	dd 20       	and	r13, r13
    372c:	a9 f7       	brne	.-22     	; 0x3718 <vfprintf+0x3a6>
    372e:	06 c0       	rjmp	.+12     	; 0x373c <vfprintf+0x3ca>
    3730:	80 e2       	ldi	r24, 0x20	; 32
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	b3 01       	movw	r22, r6
    3736:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <fputc>
    373a:	ea 94       	dec	r14
    373c:	ee 20       	and	r14, r14
    373e:	c1 f7       	brne	.-16     	; 0x3730 <vfprintf+0x3be>
    3740:	40 ce       	rjmp	.-896    	; 0x33c2 <vfprintf+0x50>
    3742:	f3 01       	movw	r30, r6
    3744:	86 81       	ldd	r24, Z+6	; 0x06
    3746:	97 81       	ldd	r25, Z+7	; 0x07
    3748:	02 c0       	rjmp	.+4      	; 0x374e <vfprintf+0x3dc>
    374a:	8f ef       	ldi	r24, 0xFF	; 255
    374c:	9f ef       	ldi	r25, 0xFF	; 255
    374e:	2d 96       	adiw	r28, 0x0d	; 13
    3750:	0f b6       	in	r0, 0x3f	; 63
    3752:	f8 94       	cli
    3754:	de bf       	out	0x3e, r29	; 62
    3756:	0f be       	out	0x3f, r0	; 63
    3758:	cd bf       	out	0x3d, r28	; 61
    375a:	df 91       	pop	r29
    375c:	cf 91       	pop	r28
    375e:	1f 91       	pop	r17
    3760:	0f 91       	pop	r16
    3762:	ff 90       	pop	r15
    3764:	ef 90       	pop	r14
    3766:	df 90       	pop	r13
    3768:	cf 90       	pop	r12
    376a:	bf 90       	pop	r11
    376c:	af 90       	pop	r10
    376e:	9f 90       	pop	r9
    3770:	8f 90       	pop	r8
    3772:	7f 90       	pop	r7
    3774:	6f 90       	pop	r6
    3776:	5f 90       	pop	r5
    3778:	4f 90       	pop	r4
    377a:	3f 90       	pop	r3
    377c:	2f 90       	pop	r2
    377e:	08 95       	ret

00003780 <strnlen_P>:
    3780:	fc 01       	movw	r30, r24
    3782:	05 90       	lpm	r0, Z+
    3784:	61 50       	subi	r22, 0x01	; 1
    3786:	70 40       	sbci	r23, 0x00	; 0
    3788:	01 10       	cpse	r0, r1
    378a:	d8 f7       	brcc	.-10     	; 0x3782 <strnlen_P+0x2>
    378c:	80 95       	com	r24
    378e:	90 95       	com	r25
    3790:	8e 0f       	add	r24, r30
    3792:	9f 1f       	adc	r25, r31
    3794:	08 95       	ret

00003796 <strnlen>:
    3796:	fc 01       	movw	r30, r24
    3798:	61 50       	subi	r22, 0x01	; 1
    379a:	70 40       	sbci	r23, 0x00	; 0
    379c:	01 90       	ld	r0, Z+
    379e:	01 10       	cpse	r0, r1
    37a0:	d8 f7       	brcc	.-10     	; 0x3798 <strnlen+0x2>
    37a2:	80 95       	com	r24
    37a4:	90 95       	com	r25
    37a6:	8e 0f       	add	r24, r30
    37a8:	9f 1f       	adc	r25, r31
    37aa:	08 95       	ret

000037ac <fputc>:
    37ac:	0f 93       	push	r16
    37ae:	1f 93       	push	r17
    37b0:	cf 93       	push	r28
    37b2:	df 93       	push	r29
    37b4:	8c 01       	movw	r16, r24
    37b6:	eb 01       	movw	r28, r22
    37b8:	8b 81       	ldd	r24, Y+3	; 0x03
    37ba:	81 ff       	sbrs	r24, 1
    37bc:	1b c0       	rjmp	.+54     	; 0x37f4 <fputc+0x48>
    37be:	82 ff       	sbrs	r24, 2
    37c0:	0d c0       	rjmp	.+26     	; 0x37dc <fputc+0x30>
    37c2:	2e 81       	ldd	r18, Y+6	; 0x06
    37c4:	3f 81       	ldd	r19, Y+7	; 0x07
    37c6:	8c 81       	ldd	r24, Y+4	; 0x04
    37c8:	9d 81       	ldd	r25, Y+5	; 0x05
    37ca:	28 17       	cp	r18, r24
    37cc:	39 07       	cpc	r19, r25
    37ce:	64 f4       	brge	.+24     	; 0x37e8 <fputc+0x3c>
    37d0:	e8 81       	ld	r30, Y
    37d2:	f9 81       	ldd	r31, Y+1	; 0x01
    37d4:	01 93       	st	Z+, r16
    37d6:	f9 83       	std	Y+1, r31	; 0x01
    37d8:	e8 83       	st	Y, r30
    37da:	06 c0       	rjmp	.+12     	; 0x37e8 <fputc+0x3c>
    37dc:	e8 85       	ldd	r30, Y+8	; 0x08
    37de:	f9 85       	ldd	r31, Y+9	; 0x09
    37e0:	80 2f       	mov	r24, r16
    37e2:	09 95       	icall
    37e4:	00 97       	sbiw	r24, 0x00	; 0
    37e6:	31 f4       	brne	.+12     	; 0x37f4 <fputc+0x48>
    37e8:	8e 81       	ldd	r24, Y+6	; 0x06
    37ea:	9f 81       	ldd	r25, Y+7	; 0x07
    37ec:	01 96       	adiw	r24, 0x01	; 1
    37ee:	9f 83       	std	Y+7, r25	; 0x07
    37f0:	8e 83       	std	Y+6, r24	; 0x06
    37f2:	02 c0       	rjmp	.+4      	; 0x37f8 <fputc+0x4c>
    37f4:	0f ef       	ldi	r16, 0xFF	; 255
    37f6:	1f ef       	ldi	r17, 0xFF	; 255
    37f8:	c8 01       	movw	r24, r16
    37fa:	df 91       	pop	r29
    37fc:	cf 91       	pop	r28
    37fe:	1f 91       	pop	r17
    3800:	0f 91       	pop	r16
    3802:	08 95       	ret

00003804 <__ultoa_invert>:
    3804:	fa 01       	movw	r30, r20
    3806:	aa 27       	eor	r26, r26
    3808:	28 30       	cpi	r18, 0x08	; 8
    380a:	51 f1       	breq	.+84     	; 0x3860 <__ultoa_invert+0x5c>
    380c:	20 31       	cpi	r18, 0x10	; 16
    380e:	81 f1       	breq	.+96     	; 0x3870 <__ultoa_invert+0x6c>
    3810:	e8 94       	clt
    3812:	6f 93       	push	r22
    3814:	6e 7f       	andi	r22, 0xFE	; 254
    3816:	6e 5f       	subi	r22, 0xFE	; 254
    3818:	7f 4f       	sbci	r23, 0xFF	; 255
    381a:	8f 4f       	sbci	r24, 0xFF	; 255
    381c:	9f 4f       	sbci	r25, 0xFF	; 255
    381e:	af 4f       	sbci	r26, 0xFF	; 255
    3820:	b1 e0       	ldi	r27, 0x01	; 1
    3822:	3e d0       	rcall	.+124    	; 0x38a0 <__ultoa_invert+0x9c>
    3824:	b4 e0       	ldi	r27, 0x04	; 4
    3826:	3c d0       	rcall	.+120    	; 0x38a0 <__ultoa_invert+0x9c>
    3828:	67 0f       	add	r22, r23
    382a:	78 1f       	adc	r23, r24
    382c:	89 1f       	adc	r24, r25
    382e:	9a 1f       	adc	r25, r26
    3830:	a1 1d       	adc	r26, r1
    3832:	68 0f       	add	r22, r24
    3834:	79 1f       	adc	r23, r25
    3836:	8a 1f       	adc	r24, r26
    3838:	91 1d       	adc	r25, r1
    383a:	a1 1d       	adc	r26, r1
    383c:	6a 0f       	add	r22, r26
    383e:	71 1d       	adc	r23, r1
    3840:	81 1d       	adc	r24, r1
    3842:	91 1d       	adc	r25, r1
    3844:	a1 1d       	adc	r26, r1
    3846:	20 d0       	rcall	.+64     	; 0x3888 <__ultoa_invert+0x84>
    3848:	09 f4       	brne	.+2      	; 0x384c <__ultoa_invert+0x48>
    384a:	68 94       	set
    384c:	3f 91       	pop	r19
    384e:	2a e0       	ldi	r18, 0x0A	; 10
    3850:	26 9f       	mul	r18, r22
    3852:	11 24       	eor	r1, r1
    3854:	30 19       	sub	r19, r0
    3856:	30 5d       	subi	r19, 0xD0	; 208
    3858:	31 93       	st	Z+, r19
    385a:	de f6       	brtc	.-74     	; 0x3812 <__ultoa_invert+0xe>
    385c:	cf 01       	movw	r24, r30
    385e:	08 95       	ret
    3860:	46 2f       	mov	r20, r22
    3862:	47 70       	andi	r20, 0x07	; 7
    3864:	40 5d       	subi	r20, 0xD0	; 208
    3866:	41 93       	st	Z+, r20
    3868:	b3 e0       	ldi	r27, 0x03	; 3
    386a:	0f d0       	rcall	.+30     	; 0x388a <__ultoa_invert+0x86>
    386c:	c9 f7       	brne	.-14     	; 0x3860 <__ultoa_invert+0x5c>
    386e:	f6 cf       	rjmp	.-20     	; 0x385c <__ultoa_invert+0x58>
    3870:	46 2f       	mov	r20, r22
    3872:	4f 70       	andi	r20, 0x0F	; 15
    3874:	40 5d       	subi	r20, 0xD0	; 208
    3876:	4a 33       	cpi	r20, 0x3A	; 58
    3878:	18 f0       	brcs	.+6      	; 0x3880 <__ultoa_invert+0x7c>
    387a:	49 5d       	subi	r20, 0xD9	; 217
    387c:	31 fd       	sbrc	r19, 1
    387e:	40 52       	subi	r20, 0x20	; 32
    3880:	41 93       	st	Z+, r20
    3882:	02 d0       	rcall	.+4      	; 0x3888 <__ultoa_invert+0x84>
    3884:	a9 f7       	brne	.-22     	; 0x3870 <__ultoa_invert+0x6c>
    3886:	ea cf       	rjmp	.-44     	; 0x385c <__ultoa_invert+0x58>
    3888:	b4 e0       	ldi	r27, 0x04	; 4
    388a:	a6 95       	lsr	r26
    388c:	97 95       	ror	r25
    388e:	87 95       	ror	r24
    3890:	77 95       	ror	r23
    3892:	67 95       	ror	r22
    3894:	ba 95       	dec	r27
    3896:	c9 f7       	brne	.-14     	; 0x388a <__ultoa_invert+0x86>
    3898:	00 97       	sbiw	r24, 0x00	; 0
    389a:	61 05       	cpc	r22, r1
    389c:	71 05       	cpc	r23, r1
    389e:	08 95       	ret
    38a0:	9b 01       	movw	r18, r22
    38a2:	ac 01       	movw	r20, r24
    38a4:	0a 2e       	mov	r0, r26
    38a6:	06 94       	lsr	r0
    38a8:	57 95       	ror	r21
    38aa:	47 95       	ror	r20
    38ac:	37 95       	ror	r19
    38ae:	27 95       	ror	r18
    38b0:	ba 95       	dec	r27
    38b2:	c9 f7       	brne	.-14     	; 0x38a6 <__ultoa_invert+0xa2>
    38b4:	62 0f       	add	r22, r18
    38b6:	73 1f       	adc	r23, r19
    38b8:	84 1f       	adc	r24, r20
    38ba:	95 1f       	adc	r25, r21
    38bc:	a0 1d       	adc	r26, r0
    38be:	08 95       	ret

000038c0 <_exit>:
    38c0:	f8 94       	cli

000038c2 <__stop_program>:
    38c2:	ff cf       	rjmp	.-2      	; 0x38c2 <__stop_program>
