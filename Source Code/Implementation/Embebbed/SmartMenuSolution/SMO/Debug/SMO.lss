
SMO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000152  00800100  00003028  000030bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003028  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000060  00800252  00800252  0000320e  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00003210  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  00003e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000248  00000000  00000000  00004050  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003939  00000000  00000000  00004298  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000100f  00000000  00000000  00007bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000192f  00000000  00000000  00008be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ac4  00000000  00000000  0000a510  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000171a  00000000  00000000  0000afd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000262d  00000000  00000000  0000c6ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000ed1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__ctors_end>
       4:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       8:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      10:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      24:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      30:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      40:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__vector_16>
      44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      48:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      4c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      54:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      58:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      5c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      60:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      64:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      68:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      6c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      70:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      74:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      78:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      7c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      80:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      84:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      88:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      8c:	8f 08       	sbc	r8, r15
      8e:	15 11       	cpse	r17, r5
      90:	c6 08       	sbc	r12, r6
      92:	f2 08       	sbc	r15, r2
      94:	1b 09       	sbc	r17, r11
      96:	15 11       	cpse	r17, r5
      98:	23 09       	sbc	r18, r3
      9a:	9d 09       	sbc	r25, r13
      9c:	17 0a       	sbc	r1, r23
      9e:	6c 0b       	sbc	r22, r28
      a0:	27 0c       	add	r2, r7
      a2:	a1 0c       	add	r10, r1
      a4:	3f 0e       	add	r3, r31
      a6:	fa 0e       	add	r15, r26
      a8:	74 0f       	add	r23, r20
      aa:	e6 0f       	add	r30, r22
      ac:	0b 10       	cpse	r0, r11
      ae:	15 11       	cpse	r17, r5
      b0:	22 10       	cpse	r2, r2
      b2:	7a 10       	cpse	r7, r10
      b4:	d7 10       	cpse	r13, r7
      b6:	5f 11       	cpse	r21, r15
      b8:	66 11       	cpse	r22, r6
      ba:	6d 11       	cpse	r22, r13
      bc:	75 11       	cpse	r23, r5
      be:	7c 11       	cpse	r23, r12
      c0:	83 11       	cpse	r24, r3
      c2:	8c 11       	cpse	r24, r12
      c4:	96 11       	cpse	r25, r6
      c6:	9f 11       	cpse	r25, r15
      c8:	a8 11       	cpse	r26, r8
      ca:	b1 11       	cpse	r27, r1
      cc:	ba 11       	cpse	r27, r10
      ce:	c3 11       	cpse	r28, r3
      d0:	cc 11       	cpse	r28, r12
      d2:	d5 11       	cpse	r29, r5
      d4:	dd 11       	cpse	r29, r13
      d6:	e5 11       	cpse	r30, r5
      d8:	ed 11       	cpse	r30, r13
      da:	f5 11       	cpse	r31, r5
      dc:	fe 11       	cpse	r31, r14
      de:	06 12       	cpse	r0, r22
      e0:	0e 12       	cpse	r0, r30

000000e2 <__ctors_end>:
      e2:	11 24       	eor	r1, r1
      e4:	1f be       	out	0x3f, r1	; 63
      e6:	cf ef       	ldi	r28, 0xFF	; 255
      e8:	d0 e1       	ldi	r29, 0x10	; 16
      ea:	de bf       	out	0x3e, r29	; 62
      ec:	cd bf       	out	0x3d, r28	; 61

000000ee <__do_copy_data>:
      ee:	12 e0       	ldi	r17, 0x02	; 2
      f0:	a0 e0       	ldi	r26, 0x00	; 0
      f2:	b1 e0       	ldi	r27, 0x01	; 1
      f4:	e8 e2       	ldi	r30, 0x28	; 40
      f6:	f0 e3       	ldi	r31, 0x30	; 48
      f8:	00 e0       	ldi	r16, 0x00	; 0
      fa:	0b bf       	out	0x3b, r16	; 59
      fc:	02 c0       	rjmp	.+4      	; 0x102 <__do_copy_data+0x14>
      fe:	07 90       	elpm	r0, Z+
     100:	0d 92       	st	X+, r0
     102:	a2 35       	cpi	r26, 0x52	; 82
     104:	b1 07       	cpc	r27, r17
     106:	d9 f7       	brne	.-10     	; 0xfe <__do_copy_data+0x10>

00000108 <__do_clear_bss>:
     108:	12 e0       	ldi	r17, 0x02	; 2
     10a:	a2 e5       	ldi	r26, 0x52	; 82
     10c:	b2 e0       	ldi	r27, 0x02	; 2
     10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
     110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
     112:	a2 3b       	cpi	r26, 0xB2	; 178
     114:	b1 07       	cpc	r27, r17
     116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>
     118:	0e 94 5e 03 	call	0x6bc	; 0x6bc <main>
     11c:	0c 94 12 18 	jmp	0x3024	; 0x3024 <_exit>

00000120 <__bad_interrupt>:
     120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <KEYPAD_Check>:
uint8_t ascii_code[4][4]={16,15,14,13,
						  12,9,6,3,
						  10,8,5,2,
						  11,7,4,1};

uint8_t KEYPAD_Check() {
     124:	af 92       	push	r10
     126:	bf 92       	push	r11
     128:	cf 92       	push	r12
     12a:	df 92       	push	r13
     12c:	ef 92       	push	r14
     12e:	ff 92       	push	r15
     130:	0f 93       	push	r16
     132:	1f 93       	push	r17
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	20 e0       	ldi	r18, 0x00	; 0
     13a:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     13c:	41 e0       	ldi	r20, 0x01	; 1
     13e:	50 e0       	ldi	r21, 0x00	; 0
     140:	e2 e6       	ldi	r30, 0x62	; 98
     142:	f0 e0       	ldi	r31, 0x00	; 0
		_delay_us(10);
		keyin=KEYPAD_PIN & 0x0F;
		if (keyin!=0x0F)
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
     144:	a0 e1       	ldi	r26, 0x10	; 16
     146:	b1 e0       	ldi	r27, 0x01	; 1
     148:	0f 2e       	mov	r0, r31
     14a:	f1 e1       	ldi	r31, 0x11	; 17
     14c:	af 2e       	mov	r10, r31
     14e:	f1 e0       	ldi	r31, 0x01	; 1
     150:	bf 2e       	mov	r11, r31
     152:	f0 2d       	mov	r31, r0
     154:	02 e1       	ldi	r16, 0x12	; 18
     156:	11 e0       	ldi	r17, 0x01	; 1
     158:	0f 2e       	mov	r0, r31
     15a:	f3 e1       	ldi	r31, 0x13	; 19
     15c:	ef 2e       	mov	r14, r31
     15e:	f1 e0       	ldi	r31, 0x01	; 1
     160:	ff 2e       	mov	r15, r31
     162:	f0 2d       	mov	r31, r0
						  11,7,4,1};

uint8_t KEYPAD_Check() {
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     164:	b9 01       	movw	r22, r18
uint8_t ascii_code[4][4]={16,15,14,13,
						  12,9,6,3,
						  10,8,5,2,
						  11,7,4,1};

uint8_t KEYPAD_Check() {
     166:	c9 01       	movw	r24, r18
     168:	04 96       	adiw	r24, 0x04	; 4
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     16a:	6a 01       	movw	r12, r20
     16c:	02 c0       	rjmp	.+4      	; 0x172 <KEYPAD_Check+0x4e>
     16e:	cc 0c       	add	r12, r12
     170:	dd 1c       	adc	r13, r13
     172:	8a 95       	dec	r24
     174:	e2 f7       	brpl	.-8      	; 0x16e <KEYPAD_Check+0x4a>
     176:	c6 01       	movw	r24, r12
     178:	80 95       	com	r24
     17a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     17c:	83 e0       	ldi	r24, 0x03	; 3
     17e:	8a 95       	dec	r24
     180:	f1 f7       	brne	.-4      	; 0x17e <KEYPAD_Check+0x5a>
     182:	00 00       	nop
		_delay_us(10);
		keyin=KEYPAD_PIN & 0x0F;
     184:	80 b1       	in	r24, 0x00	; 0
     186:	8f 70       	andi	r24, 0x0F	; 15
		if (keyin!=0x0F)
     188:	8f 30       	cpi	r24, 0x0F	; 15
     18a:	29 f1       	breq	.+74     	; 0x1d6 <KEYPAD_Check+0xb2>
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
     18c:	9c 91       	ld	r25, X
     18e:	98 17       	cp	r25, r24
     190:	a9 f0       	breq	.+42     	; 0x1bc <KEYPAD_Check+0x98>
     192:	e5 01       	movw	r28, r10
     194:	98 81       	ld	r25, Y
     196:	98 17       	cp	r25, r24
     198:	59 f0       	breq	.+22     	; 0x1b0 <KEYPAD_Check+0x8c>
     19a:	e8 01       	movw	r28, r16
     19c:	98 81       	ld	r25, Y
     19e:	98 17       	cp	r25, r24
     1a0:	51 f0       	breq	.+20     	; 0x1b6 <KEYPAD_Check+0x92>
     1a2:	e7 01       	movw	r28, r14
     1a4:	98 81       	ld	r25, Y
     1a6:	98 17       	cp	r25, r24
     1a8:	b1 f4       	brne	.+44     	; 0x1d6 <KEYPAD_Check+0xb2>
     1aa:	e3 e0       	ldi	r30, 0x03	; 3
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	08 c0       	rjmp	.+16     	; 0x1c0 <KEYPAD_Check+0x9c>
     1b0:	e1 e0       	ldi	r30, 0x01	; 1
     1b2:	f0 e0       	ldi	r31, 0x00	; 0
     1b4:	05 c0       	rjmp	.+10     	; 0x1c0 <KEYPAD_Check+0x9c>
     1b6:	e2 e0       	ldi	r30, 0x02	; 2
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <KEYPAD_Check+0x9c>
     1bc:	e0 e0       	ldi	r30, 0x00	; 0
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	ee 0f       	add	r30, r30
     1c2:	ff 1f       	adc	r31, r31
     1c4:	ee 0f       	add	r30, r30
     1c6:	ff 1f       	adc	r31, r31
     1c8:	6e 0f       	add	r22, r30
     1ca:	7f 1f       	adc	r23, r31
     1cc:	fb 01       	movw	r30, r22
     1ce:	e0 50       	subi	r30, 0x00	; 0
     1d0:	ff 4f       	sbci	r31, 0xFF	; 255
     1d2:	80 81       	ld	r24, Z
     1d4:	06 c0       	rjmp	.+12     	; 0x1e2 <KEYPAD_Check+0xbe>
     1d6:	2f 5f       	subi	r18, 0xFF	; 255
     1d8:	3f 4f       	sbci	r19, 0xFF	; 255
						  10,8,5,2,
						  11,7,4,1};

uint8_t KEYPAD_Check() {
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
     1da:	24 30       	cpi	r18, 0x04	; 4
     1dc:	31 05       	cpc	r19, r1
     1de:	11 f6       	brne	.-124    	; 0x164 <KEYPAD_Check+0x40>
		keyin=KEYPAD_PIN & 0x0F;
		if (keyin!=0x0F)
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
	}
	return 0;
     1e0:	80 e0       	ldi	r24, 0x00	; 0
}
     1e2:	df 91       	pop	r29
     1e4:	cf 91       	pop	r28
     1e6:	1f 91       	pop	r17
     1e8:	0f 91       	pop	r16
     1ea:	ff 90       	pop	r15
     1ec:	ef 90       	pop	r14
     1ee:	df 90       	pop	r13
     1f0:	cf 90       	pop	r12
     1f2:	bf 90       	pop	r11
     1f4:	af 90       	pop	r10
     1f6:	08 95       	ret

000001f8 <KEYPAD_Init>:

void KEYPAD_Init()
{
	//Khai bao huong cho cac chan ket noi keypad
	KEYPAD_DDR=0xF0;
     1f8:	80 ef       	ldi	r24, 0xF0	; 240
     1fa:	80 93 61 00 	sts	0x0061, r24
	KEYPAD_PORT=0x0F;
     1fe:	8f e0       	ldi	r24, 0x0F	; 15
     200:	80 93 62 00 	sts	0x0062, r24
     204:	08 95       	ret

00000206 <LCDBusyLoop>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     206:	8f ec       	ldi	r24, 0xCF	; 207
     208:	97 e0       	ldi	r25, 0x07	; 7
     20a:	01 97       	sbiw	r24, 0x01	; 1
     20c:	f1 f7       	brne	.-4      	; 0x20a <LCDBusyLoop+0x4>
     20e:	00 c0       	rjmp	.+0      	; 0x210 <LCDBusyLoop+0xa>
     210:	00 00       	nop
}

void LCDBusyLoop()
{
	_delay_ms(8);
}
     212:	08 95       	ret

00000214 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
     214:	28 2f       	mov	r18, r24
     216:	22 95       	swap	r18
     218:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
     21a:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
     21c:	66 23       	and	r22, r22
     21e:	11 f4       	brne	.+4      	; 0x224 <LCDByte+0x10>
CLEAR_RS();
     220:	d8 98       	cbi	0x1b, 0	; 27
     222:	01 c0       	rjmp	.+2      	; 0x226 <LCDByte+0x12>
else
SET_RS();
     224:	d8 9a       	sbi	0x1b, 0	; 27

//_delay_ms(0.500);		//tAS

SET_E();
     226:	d9 9a       	sbi	0x1b, 1	; 27

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
     228:	9b b3       	in	r25, 0x1b	; 27
     22a:	22 0f       	add	r18, r18
     22c:	22 0f       	add	r18, r18
     22e:	93 7c       	andi	r25, 0xC3	; 195
     230:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
     232:	9b bb       	out	0x1b, r25	; 27

//_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
     234:	d9 98       	cbi	0x1b, 1	; 27

//_delay_us(1);

//Send the lower nibble
SET_E();
     236:	d9 9a       	sbi	0x1b, 1	; 27

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
     238:	9b b3       	in	r25, 0x1b	; 27
     23a:	88 0f       	add	r24, r24
     23c:	88 0f       	add	r24, r24
     23e:	93 7c       	andi	r25, 0xC3	; 195
     240:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     242:	8b bb       	out	0x1b, r24	; 27

//_delay_us(1);			//tEH

//SEND

CLEAR_E();
     244:	d9 98       	cbi	0x1b, 1	; 27

//_delay_us(1);			//tEL

LCDBusyLoop();
     246:	0e 94 03 01 	call	0x206	; 0x206 <LCDBusyLoop>
}
     24a:	08 95       	ret

0000024c <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	8c 01       	movw	r16, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     256:	fc 01       	movw	r30, r24
     258:	80 81       	ld	r24, Z
     25a:	88 23       	and	r24, r24
     25c:	09 f1       	breq	.+66     	; 0x2a0 <LCDWriteString+0x54>
 {
 	//Custom Char Support
	if(*msg=='%')
     25e:	85 32       	cpi	r24, 0x25	; 37
     260:	a9 f4       	brne	.+42     	; 0x28c <LCDWriteString+0x40>
	{
		msg++;
     262:	e8 01       	movw	r28, r16
     264:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
     266:	f8 01       	movw	r30, r16
     268:	81 81       	ldd	r24, Z+1	; 0x01
     26a:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
     26c:	88 30       	cpi	r24, 0x08	; 8
     26e:	20 f4       	brcc	.+8      	; 0x278 <LCDWriteString+0x2c>
		{
			LCDData(cc);
     270:	61 e0       	ldi	r22, 0x01	; 1
     272:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>
     276:	0e c0       	rjmp	.+28     	; 0x294 <LCDWriteString+0x48>
		}
		else
		{
			LCDData('%');
     278:	85 e2       	ldi	r24, 0x25	; 37
     27a:	61 e0       	ldi	r22, 0x01	; 1
     27c:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>
			LCDData(*msg);
     280:	f8 01       	movw	r30, r16
     282:	81 81       	ldd	r24, Z+1	; 0x01
     284:	61 e0       	ldi	r22, 0x01	; 1
     286:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>
     28a:	04 c0       	rjmp	.+8      	; 0x294 <LCDWriteString+0x48>
		}
	}
	else
	{
		LCDData(*msg);
     28c:	61 e0       	ldi	r22, 0x01	; 1
     28e:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>
     292:	e8 01       	movw	r28, r16
	}
	msg++;
     294:	8e 01       	movw	r16, r28
     296:	0f 5f       	subi	r16, 0xFF	; 255
     298:	1f 4f       	sbci	r17, 0xFF	; 255
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     29a:	89 81       	ldd	r24, Y+1	; 0x01
     29c:	88 23       	and	r24, r24
     29e:	f9 f6       	brne	.-66     	; 0x25e <LCDWriteString+0x12>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	1f 91       	pop	r17
     2a6:	0f 91       	pop	r16
     2a8:	08 95       	ret

000002aa <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     2aa:	ef 92       	push	r14
     2ac:	ff 92       	push	r15
     2ae:	0f 93       	push	r16
     2b0:	1f 93       	push	r17
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	00 d0       	rcall	.+0      	; 0x2b8 <LCDWriteInt+0xe>
     2b8:	00 d0       	rcall	.+0      	; 0x2ba <LCDWriteInt+0x10>
     2ba:	0f 92       	push	r0
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
     2c0:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     2c2:	fe 01       	movw	r30, r28
     2c4:	31 96       	adiw	r30, 0x01	; 1
     2c6:	25 e0       	ldi	r18, 0x05	; 5
     2c8:	df 01       	movw	r26, r30
     2ca:	1d 92       	st	X+, r1
     2cc:	2a 95       	dec	r18
     2ce:	e9 f7       	brne	.-6      	; 0x2ca <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
     2d0:	00 97       	sbiw	r24, 0x00	; 0
     2d2:	61 f0       	breq	.+24     	; 0x2ec <LCDWriteInt+0x42>
     2d4:	fe 01       	movw	r30, r28
     2d6:	36 96       	adiw	r30, 0x06	; 6
	{
	str[i]=val%10;
     2d8:	2a e0       	ldi	r18, 0x0A	; 10
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	b9 01       	movw	r22, r18
     2de:	0e 94 e6 13 	call	0x27cc	; 0x27cc <__divmodhi4>
     2e2:	82 93       	st	-Z, r24
	val=val/10;
     2e4:	86 2f       	mov	r24, r22
     2e6:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     2e8:	00 97       	sbiw	r24, 0x00	; 0
     2ea:	c1 f7       	brne	.-16     	; 0x2dc <LCDWriteInt+0x32>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     2ec:	bf ef       	ldi	r27, 0xFF	; 255
     2ee:	eb 16       	cp	r14, r27
     2f0:	bf ef       	ldi	r27, 0xFF	; 255
     2f2:	fb 06       	cpc	r15, r27
     2f4:	69 f4       	brne	.+26     	; 0x310 <LCDWriteInt+0x66>
		while(str[j]==0) j++;
     2f6:	29 81       	ldd	r18, Y+1	; 0x01
     2f8:	22 23       	and	r18, r18
     2fa:	79 f4       	brne	.+30     	; 0x31a <LCDWriteInt+0x70>
     2fc:	fe 01       	movw	r30, r28
     2fe:	32 96       	adiw	r30, 0x02	; 2
     300:	00 e0       	ldi	r16, 0x00	; 0
     302:	10 e0       	ldi	r17, 0x00	; 0
     304:	0f 5f       	subi	r16, 0xFF	; 255
     306:	1f 4f       	sbci	r17, 0xFF	; 255
     308:	21 91       	ld	r18, Z+
     30a:	22 23       	and	r18, r18
     30c:	d9 f3       	breq	.-10     	; 0x304 <LCDWriteInt+0x5a>
     30e:	07 c0       	rjmp	.+14     	; 0x31e <LCDWriteInt+0x74>
	else
		j=5-field_length;
     310:	05 e0       	ldi	r16, 0x05	; 5
     312:	10 e0       	ldi	r17, 0x00	; 0
     314:	0e 19       	sub	r16, r14
     316:	1f 09       	sbc	r17, r15
     318:	02 c0       	rjmp	.+4      	; 0x31e <LCDWriteInt+0x74>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
     31a:	00 e0       	ldi	r16, 0x00	; 0
     31c:	10 e0       	ldi	r17, 0x00	; 0
	else
		j=5-field_length;

	if(val<0) LCDData('-');
     31e:	99 23       	and	r25, r25
     320:	24 f4       	brge	.+8      	; 0x32a <LCDWriteInt+0x80>
     322:	8d e2       	ldi	r24, 0x2D	; 45
     324:	61 e0       	ldi	r22, 0x01	; 1
     326:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>
	for(i=j;i<5;i++)
     32a:	05 30       	cpi	r16, 0x05	; 5
     32c:	11 05       	cpc	r17, r1
     32e:	bc f4       	brge	.+46     	; 0x35e <LCDWriteInt+0xb4>
	}
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
     330:	e1 e0       	ldi	r30, 0x01	; 1
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	ec 0f       	add	r30, r28
     336:	fd 1f       	adc	r31, r29
     338:	0e 0f       	add	r16, r30
     33a:	1f 1f       	adc	r17, r31
     33c:	0f 2e       	mov	r0, r31
     33e:	f6 e0       	ldi	r31, 0x06	; 6
     340:	ef 2e       	mov	r14, r31
     342:	ff 24       	eor	r15, r15
     344:	f0 2d       	mov	r31, r0
     346:	ec 0e       	add	r14, r28
     348:	fd 1e       	adc	r15, r29
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     34a:	d8 01       	movw	r26, r16
     34c:	8d 91       	ld	r24, X+
     34e:	8d 01       	movw	r16, r26
     350:	80 5d       	subi	r24, 0xD0	; 208
     352:	61 e0       	ldi	r22, 0x01	; 1
     354:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     358:	0e 15       	cp	r16, r14
     35a:	1f 05       	cpc	r17, r15
     35c:	b1 f7       	brne	.-20     	; 0x34a <LCDWriteInt+0xa0>
	{
	LCDData(48+str[i]);
	}
}
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0
     368:	df 91       	pop	r29
     36a:	cf 91       	pop	r28
     36c:	1f 91       	pop	r17
     36e:	0f 91       	pop	r16
     370:	ff 90       	pop	r15
     372:	ef 90       	pop	r14
     374:	08 95       	ret

00000376 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
     376:	84 31       	cpi	r24, 0x14	; 20
     378:	78 f4       	brcc	.+30     	; 0x398 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
     37a:	62 30       	cpi	r22, 0x02	; 2
     37c:	31 f0       	breq	.+12     	; 0x38a <LCDGotoXY+0x14>
     37e:	63 30       	cpi	r22, 0x03	; 3
     380:	31 f0       	breq	.+12     	; 0x38e <LCDGotoXY+0x18>
     382:	61 30       	cpi	r22, 0x01	; 1
     384:	29 f4       	brne	.+10     	; 0x390 <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
     386:	80 64       	ori	r24, 0x40	; 64
			break;
     388:	03 c0       	rjmp	.+6      	; 0x390 <LCDGotoXY+0x1a>
		case 2:
			x+=0x14;
     38a:	8c 5e       	subi	r24, 0xEC	; 236
			break;
     38c:	01 c0       	rjmp	.+2      	; 0x390 <LCDGotoXY+0x1a>
		case 3:
			x+=0x54;
     38e:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
     390:	80 68       	ori	r24, 0x80	; 128
     392:	60 e0       	ldi	r22, 0x00	; 0
     394:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>
     398:	08 95       	ret

0000039a <LCDInit>:
{
	_delay_ms(8);
}

void LCDInit(uint8_t style)
{
     39a:	0f 93       	push	r16
     39c:	1f 93       	push	r17
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
     3a2:	c8 2f       	mov	r28, r24
     3a4:	8b e4       	ldi	r24, 0x4B	; 75
     3a6:	9d e1       	ldi	r25, 0x1D	; 29
     3a8:	01 97       	sbiw	r24, 0x01	; 1
     3aa:	f1 f7       	brne	.-4      	; 0x3a8 <LCDInit+0xe>
     3ac:	00 c0       	rjmp	.+0      	; 0x3ae <LCDInit+0x14>
     3ae:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
     3b0:	8a b3       	in	r24, 0x1a	; 26
     3b2:	8c 63       	ori	r24, 0x3C	; 60
     3b4:	8a bb       	out	0x1a, r24	; 26
	LCD_E_DDR|=(1<<LCD_E_POS);
     3b6:	d1 9a       	sbi	0x1a, 1	; 26
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     3b8:	d0 9a       	sbi	0x1a, 0	; 26

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
     3ba:	8b b3       	in	r24, 0x1b	; 27
     3bc:	83 7c       	andi	r24, 0xC3	; 195
     3be:	8b bb       	out	0x1b, r24	; 27
	CLEAR_E();
     3c0:	d9 98       	cbi	0x1b, 1	; 27
	CLEAR_RS();
     3c2:	d8 98       	cbi	0x1b, 0	; 27

	//Set 4-bit mode
	//_delay_us(0.3);	//tAS

	SET_E();
     3c4:	d9 9a       	sbi	0x1b, 1	; 27
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     3c6:	db 9a       	sbi	0x1b, 3	; 27
	//_delay_us(1);
	CLEAR_E();
     3c8:	d9 98       	cbi	0x1b, 1	; 27
	//_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     3ca:	0e 94 03 01 	call	0x206	; 0x206 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     3ce:	8c 2f       	mov	r24, r28
     3d0:	8c 60       	ori	r24, 0x0C	; 12
     3d2:	60 e0       	ldi	r22, 0x00	; 0
     3d4:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     3d8:	88 e2       	ldi	r24, 0x28	; 40
     3da:	60 e0       	ldi	r22, 0x00	; 0
     3dc:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
     3e0:	80 e4       	ldi	r24, 0x40	; 64
     3e2:	60 e0       	ldi	r22, 0x00	; 0
     3e4:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>
     3e8:	c4 e1       	ldi	r28, 0x14	; 20
     3ea:	d1 e0       	ldi	r29, 0x01	; 1
void LCDBusyLoop()
{
	_delay_ms(8);
}

void LCDInit(uint8_t style)
     3ec:	04 e5       	ldi	r16, 0x54	; 84
     3ee:	11 e0       	ldi	r17, 0x01	; 1
	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
     3f0:	89 91       	ld	r24, Y+
     3f2:	61 e0       	ldi	r22, 0x01	; 1
     3f4:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
     3f8:	c0 17       	cp	r28, r16
     3fa:	d1 07       	cpc	r29, r17
     3fc:	c9 f7       	brne	.-14     	; 0x3f0 <LCDInit+0x56>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	0e 94 bb 01 	call	0x376	; 0x376 <LCDGotoXY>

}
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	1f 91       	pop	r17
     40c:	0f 91       	pop	r16
     40e:	08 95       	ret

00000410 <sMOIfaceKEYPAD_checkpress>:

static uint8_t nrf24l01_addr5[NRF24L01_ADDRSIZE] = NRF24L01_ADDRP5;
static uint8_t nrf24l01_addrtx[NRF24L01_ADDRSIZE] = NRF24L01_ADDRTX;

sc_integer sMOIfaceKEYPAD_checkpress() {
	return KEYPAD_Check();
     410:	0e 94 92 00 	call	0x124	; 0x124 <KEYPAD_Check>
}
     414:	68 2f       	mov	r22, r24
     416:	70 e0       	ldi	r23, 0x00	; 0
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	08 95       	ret

0000041e <sMOIfaceKEYPAD_init>:
void sMOIfaceKEYPAD_init() {
	KEYPAD_Init();
     41e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <KEYPAD_Init>
}
     422:	08 95       	ret

00000424 <sMOIfaceLCD_writeString>:
void sMOIfaceLCD_writeString(const sc_string chr) {
	LCDWriteString(chr);
     424:	0e 94 26 01 	call	0x24c	; 0x24c <LCDWriteString>
}
     428:	08 95       	ret

0000042a <sMOIfaceLCD_writeStringXY>:
void sMOIfaceLCD_writeStringXY(const sc_string chr, const sc_integer x, const sc_integer y) {
     42a:	0f 93       	push	r16
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	ec 01       	movw	r28, r24
     432:	84 2f       	mov	r24, r20
     434:	60 2f       	mov	r22, r16
	LCDWriteStringXY(x,y,chr);
     436:	0e 94 bb 01 	call	0x376	; 0x376 <LCDGotoXY>
     43a:	ce 01       	movw	r24, r28
     43c:	0e 94 26 01 	call	0x24c	; 0x24c <LCDWriteString>
}
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	0f 91       	pop	r16
     446:	08 95       	ret

00000448 <sMOIfaceLCD_writeNumberXY>:
void sMOIfaceLCD_writeNumberXY(const sc_integer num, const sc_integer x, const sc_integer y, const sc_integer l) {
     448:	4f 92       	push	r4
     44a:	5f 92       	push	r5
     44c:	6f 92       	push	r6
     44e:	7f 92       	push	r7
     450:	af 92       	push	r10
     452:	bf 92       	push	r11
     454:	cf 92       	push	r12
     456:	df 92       	push	r13
     458:	ef 92       	push	r14
     45a:	ff 92       	push	r15
     45c:	2b 01       	movw	r4, r22
     45e:	3c 01       	movw	r6, r24
     460:	82 2f       	mov	r24, r18
     462:	6e 2d       	mov	r22, r14
     464:	76 01       	movw	r14, r12
     466:	65 01       	movw	r12, r10
	LCDWriteIntXY(x,y,num,l);
     468:	0e 94 bb 01 	call	0x376	; 0x376 <LCDGotoXY>
     46c:	c2 01       	movw	r24, r4
     46e:	b6 01       	movw	r22, r12
     470:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCDWriteInt>
}
     474:	ff 90       	pop	r15
     476:	ef 90       	pop	r14
     478:	df 90       	pop	r13
     47a:	cf 90       	pop	r12
     47c:	bf 90       	pop	r11
     47e:	af 90       	pop	r10
     480:	7f 90       	pop	r7
     482:	6f 90       	pop	r6
     484:	5f 90       	pop	r5
     486:	4f 90       	pop	r4
     488:	08 95       	ret

0000048a <sMOIfaceLCD_clear>:
void sMOIfaceLCD_clear() {
	LCDClear();
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>
     492:	82 e0       	ldi	r24, 0x02	; 2
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>
}
     49a:	08 95       	ret

0000049c <sMOIfaceLCD_init>:
void sMOIfaceLCD_init() {
	LCDInit(0);
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	0e 94 cd 01 	call	0x39a	; 0x39a <LCDInit>
}
     4a2:	08 95       	ret

000004a4 <sMOIfaceRF_getData>:

sc_string sMOIfaceRF_getData() {
     4a4:	0f 93       	push	r16
     4a6:	1f 93       	push	r17
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
     4ac:	0f 92       	push	r0
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
	uint8_t pipe = 0;
     4b2:	19 82       	std	Y+1, r1	; 0x01
	if (nrf24l01_readready(&pipe)) {
     4b4:	ce 01       	movw	r24, r28
     4b6:	01 96       	adiw	r24, 0x01	; 1
     4b8:	0e 94 1e 06 	call	0xc3c	; 0xc3c <nrf24l01_readready>
     4bc:	88 23       	and	r24, r24
     4be:	99 f0       	breq	.+38     	; 0x4e6 <sMOIfaceRF_getData+0x42>
		if (pipe==0) {
     4c0:	89 81       	ldd	r24, Y+1	; 0x01
     4c2:	88 23       	and	r24, r24
     4c4:	99 f4       	brne	.+38     	; 0x4ec <sMOIfaceRF_getData+0x48>
     4c6:	e4 e5       	ldi	r30, 0x54	; 84
     4c8:	f2 e0       	ldi	r31, 0x02	; 2
}
void sMOIfaceLCD_init() {
	LCDInit(0);
}

sc_string sMOIfaceRF_getData() {
     4ca:	cf 01       	movw	r24, r30
     4cc:	09 96       	adiw	r24, 0x09	; 9
	uint8_t pipe = 0;
	if (nrf24l01_readready(&pipe)) {
		if (pipe==0) {
		//clear buffer
		for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
     4ce:	11 92       	st	Z+, r1
     4d0:	e8 17       	cp	r30, r24
     4d2:	f9 07       	cpc	r31, r25
     4d4:	e1 f7       	brne	.-8      	; 0x4ce <sMOIfaceRF_getData+0x2a>
		
		//read buffer
		nrf24l01_read(pipe,bufferin);
     4d6:	04 e5       	ldi	r16, 0x54	; 84
     4d8:	12 e0       	ldi	r17, 0x02	; 2
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	b8 01       	movw	r22, r16
     4de:	0e 94 30 06 	call	0xc60	; 0xc60 <nrf24l01_read>
		return bufferin;
     4e2:	c8 01       	movw	r24, r16
     4e4:	05 c0       	rjmp	.+10     	; 0x4f0 <sMOIfaceRF_getData+0x4c>
		}
	}
	return "";
     4e6:	84 e5       	ldi	r24, 0x54	; 84
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <sMOIfaceRF_getData+0x4c>
     4ec:	84 e5       	ldi	r24, 0x54	; 84
     4ee:	91 e0       	ldi	r25, 0x01	; 1
}
     4f0:	0f 90       	pop	r0
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	1f 91       	pop	r17
     4f8:	0f 91       	pop	r16
     4fa:	08 95       	ret

000004fc <sMOIfaceRF_sendMsg>:

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	9c 01       	movw	r18, r24
     502:	cf e5       	ldi	r28, 0x5F	; 95
     504:	d2 e0       	ldi	r29, 0x02	; 2
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	90 e0       	ldi	r25, 0x00	; 0
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
		if (i<strlen(msg)) bufferout[i]=msg[i];
     50a:	a2 2f       	mov	r26, r18
     50c:	b3 2f       	mov	r27, r19
     50e:	fd 01       	movw	r30, r26
     510:	01 90       	ld	r0, Z+
     512:	00 20       	and	r0, r0
     514:	e9 f7       	brne	.-6      	; 0x510 <sMOIfaceRF_sendMsg+0x14>
     516:	31 97       	sbiw	r30, 0x01	; 1
     518:	ea 1b       	sub	r30, r26
     51a:	fb 0b       	sbc	r31, r27
     51c:	8e 17       	cp	r24, r30
     51e:	9f 07       	cpc	r25, r31
     520:	30 f4       	brcc	.+12     	; 0x52e <sMOIfaceRF_sendMsg+0x32>
		}
	}
	return "";
}

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
     522:	f9 01       	movw	r30, r18
     524:	e8 0f       	add	r30, r24
     526:	f9 1f       	adc	r31, r25
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
		if (i<strlen(msg)) bufferout[i]=msg[i];
     528:	40 81       	ld	r20, Z
     52a:	48 83       	st	Y, r20
     52c:	01 c0       	rjmp	.+2      	; 0x530 <sMOIfaceRF_sendMsg+0x34>
		else bufferout[i] = 0;
     52e:	18 82       	st	Y, r1
     530:	01 96       	adiw	r24, 0x01	; 1
     532:	21 96       	adiw	r28, 0x01	; 1
	return "";
}

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
     534:	89 30       	cpi	r24, 0x09	; 9
     536:	91 05       	cpc	r25, r1
     538:	41 f7       	brne	.-48     	; 0x50a <sMOIfaceRF_sendMsg+0xe>
		if (i<strlen(msg)) bufferout[i]=msg[i];
		else bufferout[i] = 0;
	}
	
	//Set Address for Data
	nrf24l01_settxaddr(nrf24l01_addrtx);
     53a:	85 e5       	ldi	r24, 0x55	; 85
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	0e 94 8e 04 	call	0x91c	; 0x91c <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     542:	8f e5       	ldi	r24, 0x5F	; 95
     544:	92 e0       	ldi	r25, 0x02	; 2
     546:	0e 94 56 06 	call	0xcac	; 0xcac <nrf24l01_write>
     54a:	98 2f       	mov	r25, r24
     54c:	ef ec       	ldi	r30, 0xCF	; 207
     54e:	f7 e0       	ldi	r31, 0x07	; 7
     550:	31 97       	sbiw	r30, 0x01	; 1
     552:	f1 f7       	brne	.-4      	; 0x550 <sMOIfaceRF_sendMsg+0x54>
     554:	00 c0       	rjmp	.+0      	; 0x556 <sMOIfaceRF_sendMsg+0x5a>
     556:	00 00       	nop
		}
	}
	return "";
}

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	91 30       	cpi	r25, 0x01	; 1
     55c:	09 f0       	breq	.+2      	; 0x560 <sMOIfaceRF_sendMsg+0x64>
     55e:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	08 95       	ret

00000566 <sMOIfaceRF_sendCheck>:

sc_boolean sMOIfaceRF_sendCheck() {
     566:	ef e5       	ldi	r30, 0x5F	; 95
     568:	f2 e0       	ldi	r31, 0x02	; 2
     56a:	cf 01       	movw	r24, r30
     56c:	09 96       	adiw	r24, 0x09	; 9
	//set all buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferout[i] = 1;
     56e:	21 e0       	ldi	r18, 0x01	; 1
     570:	21 93       	st	Z+, r18
     572:	e8 17       	cp	r30, r24
     574:	f9 07       	cpc	r31, r25
     576:	e1 f7       	brne	.-8      	; 0x570 <sMOIfaceRF_sendCheck+0xa>
	//Set Address for check
	nrf24l01_settxaddr(nrf24l01_addr5);
     578:	8a e5       	ldi	r24, 0x5A	; 90
     57a:	91 e0       	ldi	r25, 0x01	; 1
     57c:	0e 94 8e 04 	call	0x91c	; 0x91c <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     580:	8f e5       	ldi	r24, 0x5F	; 95
     582:	92 e0       	ldi	r25, 0x02	; 2
     584:	0e 94 56 06 	call	0xcac	; 0xcac <nrf24l01_write>
     588:	98 2f       	mov	r25, r24
     58a:	ef ec       	ldi	r30, 0xCF	; 207
     58c:	f7 e0       	ldi	r31, 0x07	; 7
     58e:	31 97       	sbiw	r30, 0x01	; 1
     590:	f1 f7       	brne	.-4      	; 0x58e <sMOIfaceRF_sendCheck+0x28>
     592:	00 c0       	rjmp	.+0      	; 0x594 <sMOIfaceRF_sendCheck+0x2e>
     594:	00 00       	nop
	} else {
		return false;
	}
}

sc_boolean sMOIfaceRF_sendCheck() {
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	91 30       	cpi	r25, 0x01	; 1
     59a:	09 f0       	breq	.+2      	; 0x59e <sMOIfaceRF_sendCheck+0x38>
     59c:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     59e:	08 95       	ret

000005a0 <sMOIfaceRF_getCheck>:

sc_boolean sMOIfaceRF_getCheck() {
     5a0:	0f 93       	push	r16
     5a2:	1f 93       	push	r17
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	0f 92       	push	r0
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
	uint8_t pipe = 0;
     5ae:	19 82       	std	Y+1, r1	; 0x01
	if (nrf24l01_readready(&pipe)) {
     5b0:	ce 01       	movw	r24, r28
     5b2:	01 96       	adiw	r24, 0x01	; 1
     5b4:	0e 94 1e 06 	call	0xc3c	; 0xc3c <nrf24l01_readready>
     5b8:	88 23       	and	r24, r24
     5ba:	f1 f0       	breq	.+60     	; 0x5f8 <sMOIfaceRF_getCheck+0x58>
		if (pipe==5) {
     5bc:	89 81       	ldd	r24, Y+1	; 0x01
     5be:	85 30       	cpi	r24, 0x05	; 5
     5c0:	e9 f4       	brne	.+58     	; 0x5fc <sMOIfaceRF_getCheck+0x5c>
     5c2:	e4 e5       	ldi	r30, 0x54	; 84
     5c4:	f2 e0       	ldi	r31, 0x02	; 2
	} else {
		return false;
	}
}

sc_boolean sMOIfaceRF_getCheck() {
     5c6:	8f 01       	movw	r16, r30
     5c8:	07 5f       	subi	r16, 0xF7	; 247
     5ca:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t pipe = 0;
	if (nrf24l01_readready(&pipe)) {
		if (pipe==5) {
			//clear buffer
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
     5cc:	11 92       	st	Z+, r1
     5ce:	e0 17       	cp	r30, r16
     5d0:	f1 07       	cpc	r31, r17
     5d2:	e1 f7       	brne	.-8      	; 0x5cc <sMOIfaceRF_getCheck+0x2c>
			
			//read buffer
			nrf24l01_read(pipe,bufferin);
     5d4:	85 e0       	ldi	r24, 0x05	; 5
     5d6:	64 e5       	ldi	r22, 0x54	; 84
     5d8:	72 e0       	ldi	r23, 0x02	; 2
     5da:	0e 94 30 06 	call	0xc60	; 0xc60 <nrf24l01_read>
			
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) if (bufferin[i]!=1) return false;
     5de:	80 91 54 02 	lds	r24, 0x0254
     5e2:	81 30       	cpi	r24, 0x01	; 1
     5e4:	69 f4       	brne	.+26     	; 0x600 <sMOIfaceRF_getCheck+0x60>
     5e6:	e5 e5       	ldi	r30, 0x55	; 85
     5e8:	f2 e0       	ldi	r31, 0x02	; 2
     5ea:	81 91       	ld	r24, Z+
     5ec:	81 30       	cpi	r24, 0x01	; 1
     5ee:	51 f4       	brne	.+20     	; 0x604 <sMOIfaceRF_getCheck+0x64>
     5f0:	e0 17       	cp	r30, r16
     5f2:	f1 07       	cpc	r31, r17
     5f4:	d1 f7       	brne	.-12     	; 0x5ea <sMOIfaceRF_getCheck+0x4a>
     5f6:	07 c0       	rjmp	.+14     	; 0x606 <sMOIfaceRF_getCheck+0x66>
			return true;
		}
	}
	return false;
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	05 c0       	rjmp	.+10     	; 0x606 <sMOIfaceRF_getCheck+0x66>
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	03 c0       	rjmp	.+6      	; 0x606 <sMOIfaceRF_getCheck+0x66>
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
			
			//read buffer
			nrf24l01_read(pipe,bufferin);
			
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) if (bufferin[i]!=1) return false;
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	01 c0       	rjmp	.+2      	; 0x606 <sMOIfaceRF_getCheck+0x66>
     604:	80 e0       	ldi	r24, 0x00	; 0
			return true;
		}
	}
	return false;
}
     606:	0f 90       	pop	r0
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	1f 91       	pop	r17
     60e:	0f 91       	pop	r16
     610:	08 95       	ret

00000612 <sMOIfaceRF_sendData>:

sc_boolean sMOIfaceRF_sendData(const sc_integer cmd, const sc_integer id, const sc_integer dish_id, const sc_integer amount) {
     612:	af 92       	push	r10
     614:	ef 92       	push	r14
     616:	82 2f       	mov	r24, r18
     618:	ef e5       	ldi	r30, 0x5F	; 95
     61a:	f2 e0       	ldi	r31, 0x02	; 2
     61c:	af 01       	movw	r20, r30
     61e:	47 5f       	subi	r20, 0xF7	; 247
     620:	5f 4f       	sbci	r21, 0xFF	; 255
	
	unsigned char num;
	unsigned char mod;
	//clear buffer
	for(uint8_t i=0; i<sizeof(bufferout); i++) bufferout[i] = 0;
     622:	11 92       	st	Z+, r1
     624:	e4 17       	cp	r30, r20
     626:	f5 07       	cpc	r31, r21
     628:	e1 f7       	brne	.-8      	; 0x622 <sMOIfaceRF_sendData+0x10>
	
	//Lenh cho data: 1-goi mon, 2-huy mon, 3-thanh toan, 4-goi boi ban
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
     62a:	60 5d       	subi	r22, 0xD0	; 208
     62c:	60 93 5f 02 	sts	0x025F, r22
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     630:	3a e0       	ldi	r19, 0x0A	; 10
     632:	63 2f       	mov	r22, r19
     634:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     638:	90 5d       	subi	r25, 0xD0	; 208
     63a:	90 93 61 02 	sts	0x0261, r25
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     63e:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     642:	90 5d       	subi	r25, 0xD0	; 208
     644:	90 93 60 02 	sts	0x0260, r25
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
		num/=10;
     648:	8e 2d       	mov	r24, r14
     64a:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__udivmodqi4>
		bufferout[3+i]=mod+'0';
     64e:	90 5d       	subi	r25, 0xD0	; 208
     650:	90 93 64 02 	sts	0x0264, r25
	}
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
     654:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__udivmodqi4>
		num/=10;
		bufferout[3+i]=mod+'0';
     658:	90 5d       	subi	r25, 0xD0	; 208
     65a:	90 93 63 02 	sts	0x0263, r25
	}
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
     65e:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__udivmodqi4>
		num/=10;
		bufferout[3+i]=mod+'0';
     662:	90 5d       	subi	r25, 0xD0	; 208
     664:	90 93 62 02 	sts	0x0262, r25
	}
	
	//Chuyen doi so luong mon an
	num=amount;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     668:	8a 2d       	mov	r24, r10
     66a:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__udivmodqi4>
		num/=10;
		bufferout[6+i]=mod+'0';
     66e:	90 5d       	subi	r25, 0xD0	; 208
     670:	90 93 66 02 	sts	0x0266, r25
	}
	
	//Chuyen doi so luong mon an
	num=amount;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     674:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__udivmodqi4>
		num/=10;
		bufferout[6+i]=mod+'0';
     678:	90 5d       	subi	r25, 0xD0	; 208
     67a:	90 93 65 02 	sts	0x0265, r25
	}
	
	//Set Address for Data
	nrf24l01_settxaddr(nrf24l01_addrtx);
     67e:	85 e5       	ldi	r24, 0x55	; 85
     680:	91 e0       	ldi	r25, 0x01	; 1
     682:	0e 94 8e 04 	call	0x91c	; 0x91c <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     686:	8f e5       	ldi	r24, 0x5F	; 95
     688:	92 e0       	ldi	r25, 0x02	; 2
     68a:	0e 94 56 06 	call	0xcac	; 0xcac <nrf24l01_write>
     68e:	98 2f       	mov	r25, r24
     690:	ef ec       	ldi	r30, 0xCF	; 207
     692:	f7 e0       	ldi	r31, 0x07	; 7
     694:	31 97       	sbiw	r30, 0x01	; 1
     696:	f1 f7       	brne	.-4      	; 0x694 <sMOIfaceRF_sendData+0x82>
     698:	00 c0       	rjmp	.+0      	; 0x69a <sMOIfaceRF_sendData+0x88>
     69a:	00 00       	nop
		}
	}
	return false;
}

sc_boolean sMOIfaceRF_sendData(const sc_integer cmd, const sc_integer id, const sc_integer dish_id, const sc_integer amount) {
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	91 30       	cpi	r25, 0x01	; 1
     6a0:	09 f0       	breq	.+2      	; 0x6a4 <sMOIfaceRF_sendData+0x92>
     6a2:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     6a4:	ef 90       	pop	r14
     6a6:	af 90       	pop	r10
     6a8:	08 95       	ret

000006aa <sMO_setTimer>:


void sMO_setTimer(const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
	TimerSet(evid,time_ms);
     6aa:	0e 94 e6 12 	call	0x25cc	; 0x25cc <TimerSet>
}
     6ae:	08 95       	ret

000006b0 <sMO_unsetTimer>:
void sMO_unsetTimer(const sc_eventid evid) {
	TimerUnSet(evid);
     6b0:	0e 94 32 13 	call	0x2664	; 0x2664 <TimerUnSet>
}
     6b4:	08 95       	ret

000006b6 <sMOIfaceRF_init>:

void sMOIfaceRF_init() {
	nrf24l01_init();
     6b6:	0e 94 ac 06 	call	0xd58	; 0xd58 <nrf24l01_init>
}
     6ba:	08 95       	ret

000006bc <main>:

int main(void)
{
	uint8_t i;
	DDRC=0x0F;
     6bc:	8f e0       	ldi	r24, 0x0F	; 15
     6be:	84 bb       	out	0x14, r24	; 20
	PORTC=0x0F;
     6c0:	85 bb       	out	0x15, r24	; 21
	l=malloc(sizeof(SMO*)) ;
     6c2:	82 e0       	ldi	r24, 0x02	; 2
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	0e 94 0d 14 	call	0x281a	; 0x281a <malloc>
     6ca:	80 93 5d 02 	sts	0x025D, r24
     6ce:	90 93 5e 02 	sts	0x025E, r25
	TimerInit();
     6d2:	0e 94 da 12 	call	0x25b4	; 0x25b4 <TimerInit>
	sMO_init(l);
     6d6:	80 91 5d 02 	lds	r24, 0x025D
     6da:	90 91 5e 02 	lds	r25, 0x025E
     6de:	0e 94 6b 07 	call	0xed6	; 0xed6 <sMO_init>
	sMO_enter(l);
     6e2:	80 91 5d 02 	lds	r24, 0x025D
     6e6:	90 91 5e 02 	lds	r25, 0x025E
     6ea:	0e 94 72 07 	call	0xee4	; 0xee4 <sMO_enter>
	
	while(1)
	{
		sMO_runCycle(l);
     6ee:	80 91 5d 02 	lds	r24, 0x025D
     6f2:	90 91 5e 02 	lds	r25, 0x025E
     6f6:	0e 94 49 08 	call	0x1092	; 0x1092 <sMO_runCycle>
     6fa:	f9 cf       	rjmp	.-14     	; 0x6ee <main+0x32>

000006fc <__vector_16>:
	}
}

ISR (TIMER0_OVF_vect) {
     6fc:	1f 92       	push	r1
     6fe:	0f 92       	push	r0
     700:	0f b6       	in	r0, 0x3f	; 63
     702:	0f 92       	push	r0
     704:	0b b6       	in	r0, 0x3b	; 59
     706:	0f 92       	push	r0
     708:	11 24       	eor	r1, r1
     70a:	2f 93       	push	r18
     70c:	3f 93       	push	r19
     70e:	4f 93       	push	r20
     710:	5f 93       	push	r21
     712:	6f 93       	push	r22
     714:	7f 93       	push	r23
     716:	8f 93       	push	r24
     718:	9f 93       	push	r25
     71a:	af 93       	push	r26
     71c:	bf 93       	push	r27
     71e:	ef 93       	push	r30
     720:	ff 93       	push	r31
	TCNT0=131;
     722:	83 e8       	ldi	r24, 0x83	; 131
     724:	82 bf       	out	0x32, r24	; 50
	TimerCheck(l);
     726:	80 91 5d 02 	lds	r24, 0x025D
     72a:	90 91 5e 02 	lds	r25, 0x025E
     72e:	0e 94 67 13 	call	0x26ce	; 0x26ce <TimerCheck>
     732:	ff 91       	pop	r31
     734:	ef 91       	pop	r30
     736:	bf 91       	pop	r27
     738:	af 91       	pop	r26
     73a:	9f 91       	pop	r25
     73c:	8f 91       	pop	r24
     73e:	7f 91       	pop	r23
     740:	6f 91       	pop	r22
     742:	5f 91       	pop	r21
     744:	4f 91       	pop	r20
     746:	3f 91       	pop	r19
     748:	2f 91       	pop	r18
     74a:	0f 90       	pop	r0
     74c:	0b be       	out	0x3b, r0	; 59
     74e:	0f 90       	pop	r0
     750:	0f be       	out	0x3f, r0	; 63
     752:	0f 90       	pop	r0
     754:	1f 90       	pop	r1
     756:	18 95       	reti

00000758 <nrf24l01_readregister>:

/*
 * read one register
 */
uint8_t nrf24l01_readregister(uint8_t reg) {
	nrf24l01_CSNlo; //low CSN
     758:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     75a:	8f 71       	andi	r24, 0x1F	; 31
     75c:	0e 94 d5 12 	call	0x25aa	; 0x25aa <spi_writereadbyte>
    uint8_t result = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
     760:	8f ef       	ldi	r24, 0xFF	; 255
     762:	0e 94 d5 12 	call	0x25aa	; 0x25aa <spi_writereadbyte>
    nrf24l01_CSNhi; //high CSN
     766:	ae 9a       	sbi	0x15, 6	; 21
    return result;
}
     768:	08 95       	ret

0000076a <nrf24l01_readregisters>:

/*
 * read many registers
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
     76a:	ff 92       	push	r15
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	06 2f       	mov	r16, r22
     776:	f7 2e       	mov	r15, r23
     778:	14 2f       	mov	r17, r20
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
     77a:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     77c:	8f 71       	andi	r24, 0x1F	; 31
     77e:	0e 94 d5 12 	call	0x25aa	; 0x25aa <spi_writereadbyte>
	for(i=0; i<len; i++)
     782:	11 23       	and	r17, r17
     784:	51 f0       	breq	.+20     	; 0x79a <nrf24l01_readregisters+0x30>
     786:	c0 2f       	mov	r28, r16
     788:	df 2d       	mov	r29, r15
     78a:	00 e0       	ldi	r16, 0x00	; 0
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
     78c:	8f ef       	ldi	r24, 0xFF	; 255
     78e:	0e 94 d5 12 	call	0x25aa	; 0x25aa <spi_writereadbyte>
     792:	89 93       	st	Y+, r24
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     794:	0f 5f       	subi	r16, 0xFF	; 255
     796:	01 17       	cp	r16, r17
     798:	c9 f7       	brne	.-14     	; 0x78c <nrf24l01_readregisters+0x22>
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
	nrf24l01_CSNhi; //high CSN
     79a:	ae 9a       	sbi	0x15, 6	; 21
}
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	1f 91       	pop	r17
     7a2:	0f 91       	pop	r16
     7a4:	ff 90       	pop	r15
     7a6:	08 95       	ret

000007a8 <nrf24l01_writeregister>:

/*
 * write one register
 */
void nrf24l01_writeregister(uint8_t reg, uint8_t value) {
     7a8:	cf 93       	push	r28
     7aa:	c6 2f       	mov	r28, r22
	nrf24l01_CSNlo; //low CSN
     7ac:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     7ae:	8f 71       	andi	r24, 0x1F	; 31
     7b0:	80 62       	ori	r24, 0x20	; 32
     7b2:	0e 94 d5 12 	call	0x25aa	; 0x25aa <spi_writereadbyte>
	spi_writereadbyte(value); //write register
     7b6:	8c 2f       	mov	r24, r28
     7b8:	0e 94 d5 12 	call	0x25aa	; 0x25aa <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     7bc:	ae 9a       	sbi	0x15, 6	; 21
}
     7be:	cf 91       	pop	r28
     7c0:	08 95       	ret

000007c2 <nrf24l01_writeregisters>:

/*
 * write many registers
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
     7c2:	ff 92       	push	r15
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	06 2f       	mov	r16, r22
     7ce:	f7 2e       	mov	r15, r23
     7d0:	14 2f       	mov	r17, r20
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
     7d2:	ae 98       	cbi	0x15, 6	; 21
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     7d4:	8f 71       	andi	r24, 0x1F	; 31
     7d6:	80 62       	ori	r24, 0x20	; 32
     7d8:	0e 94 d5 12 	call	0x25aa	; 0x25aa <spi_writereadbyte>
	for(i=0; i<len; i++)
     7dc:	11 23       	and	r17, r17
     7de:	49 f0       	breq	.+18     	; 0x7f2 <nrf24l01_writeregisters+0x30>
     7e0:	c0 2f       	mov	r28, r16
     7e2:	df 2d       	mov	r29, r15
     7e4:	00 e0       	ldi	r16, 0x00	; 0
		 spi_writereadbyte(value[i]); //write register
     7e6:	89 91       	ld	r24, Y+
     7e8:	0e 94 d5 12 	call	0x25aa	; 0x25aa <spi_writereadbyte>
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     7ec:	0f 5f       	subi	r16, 0xFF	; 255
     7ee:	01 17       	cp	r16, r17
     7f0:	d1 f7       	brne	.-12     	; 0x7e6 <nrf24l01_writeregisters+0x24>
		 spi_writereadbyte(value[i]); //write register
	nrf24l01_CSNhi; //high CSN
     7f2:	ae 9a       	sbi	0x15, 6	; 21
}
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	ff 90       	pop	r15
     7fe:	08 95       	ret

00000800 <nrf24l01_revaddress>:

/*
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	04 96       	adiw	r24, 0x04	; 4
     806:	db 01       	movw	r26, r22
     808:	a2 0f       	add	r26, r18
     80a:	b3 1f       	adc	r27, r19
     80c:	fc 01       	movw	r30, r24
     80e:	e2 1b       	sub	r30, r18
     810:	f3 0b       	sbc	r31, r19
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
     812:	40 81       	ld	r20, Z
     814:	4c 93       	st	X, r20
     816:	2f 5f       	subi	r18, 0xFF	; 255
     818:	3f 4f       	sbci	r19, 0xFF	; 255
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
     81a:	25 30       	cpi	r18, 0x05	; 5
     81c:	31 05       	cpc	r19, r1
     81e:	99 f7       	brne	.-26     	; 0x806 <nrf24l01_revaddress+0x6>
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
}
     820:	08 95       	ret

00000822 <nrf24l01_setrxaddr>:

/*
 * set rx address
 */
void nrf24l01_setrxaddr(uint8_t pipe, uint8_t *addr) {
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	00 d0       	rcall	.+0      	; 0x828 <nrf24l01_setrxaddr+0x6>
     828:	00 d0       	rcall	.+0      	; 0x82a <nrf24l01_setrxaddr+0x8>
     82a:	0f 92       	push	r0
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
	if(pipe == 0) {
     830:	88 23       	and	r24, r24
     832:	b1 f4       	brne	.+44     	; 0x860 <nrf24l01_setrxaddr+0x3e>
		memcpy(&nrf24l01_addr0, addr, NRF24L01_ADDRSIZE); //cache address
     834:	a9 ed       	ldi	r26, 0xD9	; 217
     836:	b1 e0       	ldi	r27, 0x01	; 1
     838:	fb 01       	movw	r30, r22
     83a:	85 e0       	ldi	r24, 0x05	; 5
     83c:	01 90       	ld	r0, Z+
     83e:	0d 92       	st	X+, r0
     840:	81 50       	subi	r24, 0x01	; 1
     842:	e1 f7       	brne	.-8      	; 0x83c <nrf24l01_setrxaddr+0x1a>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     844:	cb 01       	movw	r24, r22
     846:	be 01       	movw	r22, r28
     848:	6f 5f       	subi	r22, 0xFF	; 255
     84a:	7f 4f       	sbci	r23, 0xFF	; 255
     84c:	0e 94 00 04 	call	0x800	; 0x800 <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE);
     850:	8a e0       	ldi	r24, 0x0A	; 10
     852:	be 01       	movw	r22, r28
     854:	6f 5f       	subi	r22, 0xFF	; 255
     856:	7f 4f       	sbci	r23, 0xFF	; 255
     858:	45 e0       	ldi	r20, 0x05	; 5
     85a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <nrf24l01_writeregisters>
     85e:	56 c0       	rjmp	.+172    	; 0x90c <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 1) {
     860:	81 30       	cpi	r24, 0x01	; 1
     862:	b1 f4       	brne	.+44     	; 0x890 <nrf24l01_setrxaddr+0x6e>
		memcpy(&nrf24l01_addr1, addr, NRF24L01_ADDRSIZE); //cache address
     864:	ae ed       	ldi	r26, 0xDE	; 222
     866:	b1 e0       	ldi	r27, 0x01	; 1
     868:	fb 01       	movw	r30, r22
     86a:	85 e0       	ldi	r24, 0x05	; 5
     86c:	01 90       	ld	r0, Z+
     86e:	0d 92       	st	X+, r0
     870:	81 50       	subi	r24, 0x01	; 1
     872:	e1 f7       	brne	.-8      	; 0x86c <nrf24l01_setrxaddr+0x4a>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     874:	cb 01       	movw	r24, r22
     876:	be 01       	movw	r22, r28
     878:	6f 5f       	subi	r22, 0xFF	; 255
     87a:	7f 4f       	sbci	r23, 0xFF	; 255
     87c:	0e 94 00 04 	call	0x800	; 0x800 <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P1, addrrev, NRF24L01_ADDRSIZE);
     880:	8b e0       	ldi	r24, 0x0B	; 11
     882:	be 01       	movw	r22, r28
     884:	6f 5f       	subi	r22, 0xFF	; 255
     886:	7f 4f       	sbci	r23, 0xFF	; 255
     888:	45 e0       	ldi	r20, 0x05	; 5
     88a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <nrf24l01_writeregisters>
     88e:	3e c0       	rjmp	.+124    	; 0x90c <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 2) {
     890:	82 30       	cpi	r24, 0x02	; 2
     892:	71 f4       	brne	.+28     	; 0x8b0 <nrf24l01_setrxaddr+0x8e>
		memcpy(&nrf24l01_addr2, addr, NRF24L01_ADDRSIZE); //cache address
     894:	a3 ee       	ldi	r26, 0xE3	; 227
     896:	b1 e0       	ldi	r27, 0x01	; 1
     898:	fb 01       	movw	r30, r22
     89a:	85 e0       	ldi	r24, 0x05	; 5
     89c:	01 90       	ld	r0, Z+
     89e:	0d 92       	st	X+, r0
     8a0:	81 50       	subi	r24, 0x01	; 1
     8a2:	e1 f7       	brne	.-8      	; 0x89c <nrf24l01_setrxaddr+0x7a>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P2, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     8a4:	8c e0       	ldi	r24, 0x0C	; 12
     8a6:	fb 01       	movw	r30, r22
     8a8:	64 81       	ldd	r22, Z+4	; 0x04
     8aa:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
     8ae:	2e c0       	rjmp	.+92     	; 0x90c <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 3) {
     8b0:	83 30       	cpi	r24, 0x03	; 3
     8b2:	71 f4       	brne	.+28     	; 0x8d0 <nrf24l01_setrxaddr+0xae>
		memcpy(&nrf24l01_addr3, addr, NRF24L01_ADDRSIZE); //cache address
     8b4:	a8 ee       	ldi	r26, 0xE8	; 232
     8b6:	b1 e0       	ldi	r27, 0x01	; 1
     8b8:	fb 01       	movw	r30, r22
     8ba:	85 e0       	ldi	r24, 0x05	; 5
     8bc:	01 90       	ld	r0, Z+
     8be:	0d 92       	st	X+, r0
     8c0:	81 50       	subi	r24, 0x01	; 1
     8c2:	e1 f7       	brne	.-8      	; 0x8bc <nrf24l01_setrxaddr+0x9a>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P3, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     8c4:	8d e0       	ldi	r24, 0x0D	; 13
     8c6:	fb 01       	movw	r30, r22
     8c8:	64 81       	ldd	r22, Z+4	; 0x04
     8ca:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
     8ce:	1e c0       	rjmp	.+60     	; 0x90c <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 4) {
     8d0:	84 30       	cpi	r24, 0x04	; 4
     8d2:	71 f4       	brne	.+28     	; 0x8f0 <nrf24l01_setrxaddr+0xce>
		memcpy(&nrf24l01_addr4, addr, NRF24L01_ADDRSIZE); //cache address
     8d4:	ad ee       	ldi	r26, 0xED	; 237
     8d6:	b1 e0       	ldi	r27, 0x01	; 1
     8d8:	fb 01       	movw	r30, r22
     8da:	85 e0       	ldi	r24, 0x05	; 5
     8dc:	01 90       	ld	r0, Z+
     8de:	0d 92       	st	X+, r0
     8e0:	81 50       	subi	r24, 0x01	; 1
     8e2:	e1 f7       	brne	.-8      	; 0x8dc <nrf24l01_setrxaddr+0xba>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P4, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     8e4:	8e e0       	ldi	r24, 0x0E	; 14
     8e6:	fb 01       	movw	r30, r22
     8e8:	64 81       	ldd	r22, Z+4	; 0x04
     8ea:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
     8ee:	0e c0       	rjmp	.+28     	; 0x90c <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 5) {
     8f0:	85 30       	cpi	r24, 0x05	; 5
     8f2:	61 f4       	brne	.+24     	; 0x90c <nrf24l01_setrxaddr+0xea>
		memcpy(&nrf24l01_addr5, addr, NRF24L01_ADDRSIZE); //cache address
     8f4:	a2 ef       	ldi	r26, 0xF2	; 242
     8f6:	b1 e0       	ldi	r27, 0x01	; 1
     8f8:	fb 01       	movw	r30, r22
     8fa:	01 90       	ld	r0, Z+
     8fc:	0d 92       	st	X+, r0
     8fe:	81 50       	subi	r24, 0x01	; 1
     900:	e1 f7       	brne	.-8      	; 0x8fa <nrf24l01_setrxaddr+0xd8>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P5, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     902:	8f e0       	ldi	r24, 0x0F	; 15
     904:	fb 01       	movw	r30, r22
     906:	64 81       	ldd	r22, Z+4	; 0x04
     908:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
	}
}
     90c:	0f 90       	pop	r0
     90e:	0f 90       	pop	r0
     910:	0f 90       	pop	r0
     912:	0f 90       	pop	r0
     914:	0f 90       	pop	r0
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	08 95       	ret

0000091c <nrf24l01_settxaddr>:

/*
 * set tx address
 */
void nrf24l01_settxaddr(uint8_t *addr) {
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	00 d0       	rcall	.+0      	; 0x922 <nrf24l01_settxaddr+0x6>
     922:	00 d0       	rcall	.+0      	; 0x924 <nrf24l01_settxaddr+0x8>
     924:	0f 92       	push	r0
     926:	cd b7       	in	r28, 0x3d	; 61
     928:	de b7       	in	r29, 0x3e	; 62
	memcpy(&nrf24l01_addrtx, addr, NRF24L01_ADDRSIZE); //cache address
     92a:	a7 ef       	ldi	r26, 0xF7	; 247
     92c:	b1 e0       	ldi	r27, 0x01	; 1
     92e:	e8 2f       	mov	r30, r24
     930:	f9 2f       	mov	r31, r25
     932:	25 e0       	ldi	r18, 0x05	; 5
     934:	01 90       	ld	r0, Z+
     936:	0d 92       	st	X+, r0
     938:	21 50       	subi	r18, 0x01	; 1
     93a:	e1 f7       	brne	.-8      	; 0x934 <nrf24l01_settxaddr+0x18>
	uint8_t addrrev[NRF24L01_ADDRSIZE];
	nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     93c:	be 01       	movw	r22, r28
     93e:	6f 5f       	subi	r22, 0xFF	; 255
     940:	7f 4f       	sbci	r23, 0xFF	; 255
     942:	0e 94 00 04 	call	0x800	; 0x800 <nrf24l01_revaddress>
	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE); //set rx address for ack on pipe 0
     946:	8a e0       	ldi	r24, 0x0A	; 10
     948:	be 01       	movw	r22, r28
     94a:	6f 5f       	subi	r22, 0xFF	; 255
     94c:	7f 4f       	sbci	r23, 0xFF	; 255
     94e:	45 e0       	ldi	r20, 0x05	; 5
     950:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <nrf24l01_writeregisters>
	nrf24l01_writeregisters(NRF24L01_REG_TX_ADDR, addrrev, NRF24L01_ADDRSIZE); //set tx address
     954:	80 e1       	ldi	r24, 0x10	; 16
     956:	be 01       	movw	r22, r28
     958:	6f 5f       	subi	r22, 0xFF	; 255
     95a:	7f 4f       	sbci	r23, 0xFF	; 255
     95c:	45 e0       	ldi	r20, 0x05	; 5
     95e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <nrf24l01_writeregisters>
}
     962:	0f 90       	pop	r0
     964:	0f 90       	pop	r0
     966:	0f 90       	pop	r0
     968:	0f 90       	pop	r0
     96a:	0f 90       	pop	r0
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	08 95       	ret

00000972 <nrf24l01_flushRXfifo>:

/*
 * flush RX fifo
 */
void nrf24l01_flushRXfifo() {
	nrf24l01_CSNlo; //low CSN
     972:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_FLUSH_RX);
     974:	82 ee       	ldi	r24, 0xE2	; 226
     976:	0e 94 d5 12 	call	0x25aa	; 0x25aa <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     97a:	ae 9a       	sbi	0x15, 6	; 21
}
     97c:	08 95       	ret

0000097e <nrf24l01_flushTXfifo>:

/*
 * flush TX fifo
 */
void nrf24l01_flushTXfifo() {
	nrf24l01_CSNlo; //low CSN
     97e:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_FLUSH_TX);
     980:	81 ee       	ldi	r24, 0xE1	; 225
     982:	0e 94 d5 12 	call	0x25aa	; 0x25aa <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     986:	ae 9a       	sbi	0x15, 6	; 21
}
     988:	08 95       	ret

0000098a <nrf24l01_setRX>:

/*
 * set chip as RX
 */
void nrf24l01_setRX() {
	nrf24l01_setrxaddr(0, nrf24l01_addr0); //restore pipe 0 address
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	69 ed       	ldi	r22, 0xD9	; 217
     98e:	71 e0       	ldi	r23, 0x01	; 1
     990:	0e 94 11 04 	call	0x822	; 0x822 <nrf24l01_setrxaddr>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PRIM_RX)); //prx mode
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	0e 94 ac 03 	call	0x758	; 0x758 <nrf24l01_readregister>
     99a:	68 2f       	mov	r22, r24
     99c:	61 60       	ori	r22, 0x01	; 1
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	0e 94 ac 03 	call	0x758	; 0x758 <nrf24l01_readregister>
     9aa:	68 2f       	mov	r22, r24
     9ac:	62 60       	ori	r22, 0x02	; 2
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     9b4:	87 e0       	ldi	r24, 0x07	; 7
     9b6:	60 e7       	ldi	r22, 0x70	; 112
     9b8:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
	nrf24l01_flushRXfifo(); //flush rx fifo
     9bc:	0e 94 b9 04 	call	0x972	; 0x972 <nrf24l01_flushRXfifo>
	nrf24l01_flushTXfifo(); //flush tx fifo
     9c0:	0e 94 bf 04 	call	0x97e	; 0x97e <nrf24l01_flushTXfifo>
	nrf24l01_CEhi; //start listening
     9c4:	af 9a       	sbi	0x15, 7	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9c6:	82 e3       	ldi	r24, 0x32	; 50
     9c8:	8a 95       	dec	r24
     9ca:	f1 f7       	brne	.-4      	; 0x9c8 <nrf24l01_setRX+0x3e>
	_delay_us(150); //wait for the radio to power up
}
     9cc:	08 95       	ret

000009ce <nrf24l01_setTX>:

/*
 * set chip as TX
 */
void nrf24l01_setTX() {
	nrf24l01_CElo; //stop listening
     9ce:	af 98       	cbi	0x15, 7	; 21
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PRIM_RX)); //ptx mode
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	0e 94 ac 03 	call	0x758	; 0x758 <nrf24l01_readregister>
     9d6:	68 2f       	mov	r22, r24
     9d8:	6e 7f       	andi	r22, 0xFE	; 254
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	0e 94 ac 03 	call	0x758	; 0x758 <nrf24l01_readregister>
     9e6:	68 2f       	mov	r22, r24
     9e8:	62 60       	ori	r22, 0x02	; 2
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     9f0:	87 e0       	ldi	r24, 0x07	; 7
     9f2:	60 e7       	ldi	r22, 0x70	; 112
     9f4:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
	nrf24l01_flushTXfifo(); //flush tx fifo
     9f8:	0e 94 bf 04 	call	0x97e	; 0x97e <nrf24l01_flushTXfifo>
     9fc:	82 e3       	ldi	r24, 0x32	; 50
     9fe:	8a 95       	dec	r24
     a00:	f1 f7       	brne	.-4      	; 0x9fe <nrf24l01_setTX+0x30>
	_delay_us(150); //wait for the radio to power up
}
     a02:	08 95       	ret

00000a04 <nrf24l01_getstatus>:
/*
 * get status register
 */
uint8_t nrf24l01_getstatus() {
	uint8_t status = 0;
	nrf24l01_CSNlo; //low CSN
     a04:	ae 98       	cbi	0x15, 6	; 21
	status = spi_writereadbyte(NRF24L01_CMD_NOP); //get status, send NOP request
     a06:	8f ef       	ldi	r24, 0xFF	; 255
     a08:	0e 94 d5 12 	call	0x25aa	; 0x25aa <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     a0c:	ae 9a       	sbi	0x15, 6	; 21
	return status;
}
     a0e:	08 95       	ret

00000a10 <nrf24l01_printinfo>:

#if NRF24L01_PRINTENABLE == 1
/*
 * print info
 */
void nrf24l01_printinfo(void(*prints)(const char *), void(*printc)(unsigned char data)) {
     a10:	ef 92       	push	r14
     a12:	ff 92       	push	r15
     a14:	0f 93       	push	r16
     a16:	1f 93       	push	r17
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	cd b7       	in	r28, 0x3d	; 61
     a1e:	de b7       	in	r29, 0x3e	; 62
     a20:	c4 56       	subi	r28, 0x64	; 100
     a22:	d0 40       	sbci	r29, 0x00	; 0
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	f8 94       	cli
     a28:	de bf       	out	0x3e, r29	; 62
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	cd bf       	out	0x3d, r28	; 61
     a2e:	7c 01       	movw	r14, r24
	char buff[100];
	prints("info\r\n");
     a30:	8f e5       	ldi	r24, 0x5F	; 95
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	f7 01       	movw	r30, r14
     a36:	09 95       	icall
	sprintf(buff,"STATUS: %02X\r\n", nrf24l01_getstatus()); prints(buff);
     a38:	0e 94 02 05 	call	0xa04	; 0xa04 <nrf24l01_getstatus>
     a3c:	00 d0       	rcall	.+0      	; 0xa3e <nrf24l01_printinfo+0x2e>
     a3e:	00 d0       	rcall	.+0      	; 0xa40 <nrf24l01_printinfo+0x30>
     a40:	00 d0       	rcall	.+0      	; 0xa42 <nrf24l01_printinfo+0x32>
     a42:	ed b7       	in	r30, 0x3d	; 61
     a44:	fe b7       	in	r31, 0x3e	; 62
     a46:	31 96       	adiw	r30, 0x01	; 1
     a48:	8e 01       	movw	r16, r28
     a4a:	0f 5f       	subi	r16, 0xFF	; 255
     a4c:	1f 4f       	sbci	r17, 0xFF	; 255
     a4e:	ad b7       	in	r26, 0x3d	; 61
     a50:	be b7       	in	r27, 0x3e	; 62
     a52:	12 96       	adiw	r26, 0x02	; 2
     a54:	1c 93       	st	X, r17
     a56:	0e 93       	st	-X, r16
     a58:	11 97       	sbiw	r26, 0x01	; 1
     a5a:	26 e6       	ldi	r18, 0x66	; 102
     a5c:	31 e0       	ldi	r19, 0x01	; 1
     a5e:	33 83       	std	Z+3, r19	; 0x03
     a60:	22 83       	std	Z+2, r18	; 0x02
     a62:	84 83       	std	Z+4, r24	; 0x04
     a64:	15 82       	std	Z+5, r1	; 0x05
     a66:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <sprintf>
     a6a:	8d b7       	in	r24, 0x3d	; 61
     a6c:	9e b7       	in	r25, 0x3e	; 62
     a6e:	06 96       	adiw	r24, 0x06	; 6
     a70:	0f b6       	in	r0, 0x3f	; 63
     a72:	f8 94       	cli
     a74:	9e bf       	out	0x3e, r25	; 62
     a76:	0f be       	out	0x3f, r0	; 63
     a78:	8d bf       	out	0x3d, r24	; 61
     a7a:	c8 01       	movw	r24, r16
     a7c:	f7 01       	movw	r30, r14
     a7e:	09 95       	icall
	sprintf(buff,"CONFIG: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_CONFIG)); prints(buff);
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	0e 94 ac 03 	call	0x758	; 0x758 <nrf24l01_readregister>
     a86:	00 d0       	rcall	.+0      	; 0xa88 <nrf24l01_printinfo+0x78>
     a88:	00 d0       	rcall	.+0      	; 0xa8a <nrf24l01_printinfo+0x7a>
     a8a:	00 d0       	rcall	.+0      	; 0xa8c <nrf24l01_printinfo+0x7c>
     a8c:	ed b7       	in	r30, 0x3d	; 61
     a8e:	fe b7       	in	r31, 0x3e	; 62
     a90:	31 96       	adiw	r30, 0x01	; 1
     a92:	ad b7       	in	r26, 0x3d	; 61
     a94:	be b7       	in	r27, 0x3e	; 62
     a96:	12 96       	adiw	r26, 0x02	; 2
     a98:	1c 93       	st	X, r17
     a9a:	0e 93       	st	-X, r16
     a9c:	11 97       	sbiw	r26, 0x01	; 1
     a9e:	25 e7       	ldi	r18, 0x75	; 117
     aa0:	31 e0       	ldi	r19, 0x01	; 1
     aa2:	33 83       	std	Z+3, r19	; 0x03
     aa4:	22 83       	std	Z+2, r18	; 0x02
     aa6:	84 83       	std	Z+4, r24	; 0x04
     aa8:	15 82       	std	Z+5, r1	; 0x05
     aaa:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <sprintf>
     aae:	8d b7       	in	r24, 0x3d	; 61
     ab0:	9e b7       	in	r25, 0x3e	; 62
     ab2:	06 96       	adiw	r24, 0x06	; 6
     ab4:	0f b6       	in	r0, 0x3f	; 63
     ab6:	f8 94       	cli
     ab8:	9e bf       	out	0x3e, r25	; 62
     aba:	0f be       	out	0x3f, r0	; 63
     abc:	8d bf       	out	0x3d, r24	; 61
     abe:	c8 01       	movw	r24, r16
     ac0:	f7 01       	movw	r30, r14
     ac2:	09 95       	icall
	sprintf(buff,"RF_CH: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_CH)); prints(buff);
     ac4:	85 e0       	ldi	r24, 0x05	; 5
     ac6:	0e 94 ac 03 	call	0x758	; 0x758 <nrf24l01_readregister>
     aca:	00 d0       	rcall	.+0      	; 0xacc <nrf24l01_printinfo+0xbc>
     acc:	00 d0       	rcall	.+0      	; 0xace <nrf24l01_printinfo+0xbe>
     ace:	00 d0       	rcall	.+0      	; 0xad0 <nrf24l01_printinfo+0xc0>
     ad0:	ed b7       	in	r30, 0x3d	; 61
     ad2:	fe b7       	in	r31, 0x3e	; 62
     ad4:	31 96       	adiw	r30, 0x01	; 1
     ad6:	ad b7       	in	r26, 0x3d	; 61
     ad8:	be b7       	in	r27, 0x3e	; 62
     ada:	12 96       	adiw	r26, 0x02	; 2
     adc:	1c 93       	st	X, r17
     ade:	0e 93       	st	-X, r16
     ae0:	11 97       	sbiw	r26, 0x01	; 1
     ae2:	24 e8       	ldi	r18, 0x84	; 132
     ae4:	31 e0       	ldi	r19, 0x01	; 1
     ae6:	33 83       	std	Z+3, r19	; 0x03
     ae8:	22 83       	std	Z+2, r18	; 0x02
     aea:	84 83       	std	Z+4, r24	; 0x04
     aec:	15 82       	std	Z+5, r1	; 0x05
     aee:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <sprintf>
     af2:	8d b7       	in	r24, 0x3d	; 61
     af4:	9e b7       	in	r25, 0x3e	; 62
     af6:	06 96       	adiw	r24, 0x06	; 6
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	f8 94       	cli
     afc:	9e bf       	out	0x3e, r25	; 62
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	8d bf       	out	0x3d, r24	; 61
     b02:	c8 01       	movw	r24, r16
     b04:	f7 01       	movw	r30, r14
     b06:	09 95       	icall
	sprintf(buff,"RF_SETUP: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_SETUP)); prints(buff);
     b08:	86 e0       	ldi	r24, 0x06	; 6
     b0a:	0e 94 ac 03 	call	0x758	; 0x758 <nrf24l01_readregister>
     b0e:	00 d0       	rcall	.+0      	; 0xb10 <nrf24l01_printinfo+0x100>
     b10:	00 d0       	rcall	.+0      	; 0xb12 <nrf24l01_printinfo+0x102>
     b12:	00 d0       	rcall	.+0      	; 0xb14 <nrf24l01_printinfo+0x104>
     b14:	ed b7       	in	r30, 0x3d	; 61
     b16:	fe b7       	in	r31, 0x3e	; 62
     b18:	31 96       	adiw	r30, 0x01	; 1
     b1a:	ad b7       	in	r26, 0x3d	; 61
     b1c:	be b7       	in	r27, 0x3e	; 62
     b1e:	12 96       	adiw	r26, 0x02	; 2
     b20:	1c 93       	st	X, r17
     b22:	0e 93       	st	-X, r16
     b24:	11 97       	sbiw	r26, 0x01	; 1
     b26:	22 e9       	ldi	r18, 0x92	; 146
     b28:	31 e0       	ldi	r19, 0x01	; 1
     b2a:	33 83       	std	Z+3, r19	; 0x03
     b2c:	22 83       	std	Z+2, r18	; 0x02
     b2e:	84 83       	std	Z+4, r24	; 0x04
     b30:	15 82       	std	Z+5, r1	; 0x05
     b32:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <sprintf>
     b36:	8d b7       	in	r24, 0x3d	; 61
     b38:	9e b7       	in	r25, 0x3e	; 62
     b3a:	06 96       	adiw	r24, 0x06	; 6
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	f8 94       	cli
     b40:	9e bf       	out	0x3e, r25	; 62
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	8d bf       	out	0x3d, r24	; 61
     b46:	c8 01       	movw	r24, r16
     b48:	f7 01       	movw	r30, r14
     b4a:	09 95       	icall
	sprintf(buff,"EN_AA: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_AA)); prints(buff);
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	0e 94 ac 03 	call	0x758	; 0x758 <nrf24l01_readregister>
     b52:	00 d0       	rcall	.+0      	; 0xb54 <nrf24l01_printinfo+0x144>
     b54:	00 d0       	rcall	.+0      	; 0xb56 <nrf24l01_printinfo+0x146>
     b56:	00 d0       	rcall	.+0      	; 0xb58 <nrf24l01_printinfo+0x148>
     b58:	ed b7       	in	r30, 0x3d	; 61
     b5a:	fe b7       	in	r31, 0x3e	; 62
     b5c:	31 96       	adiw	r30, 0x01	; 1
     b5e:	ad b7       	in	r26, 0x3d	; 61
     b60:	be b7       	in	r27, 0x3e	; 62
     b62:	12 96       	adiw	r26, 0x02	; 2
     b64:	1c 93       	st	X, r17
     b66:	0e 93       	st	-X, r16
     b68:	11 97       	sbiw	r26, 0x01	; 1
     b6a:	23 ea       	ldi	r18, 0xA3	; 163
     b6c:	31 e0       	ldi	r19, 0x01	; 1
     b6e:	33 83       	std	Z+3, r19	; 0x03
     b70:	22 83       	std	Z+2, r18	; 0x02
     b72:	84 83       	std	Z+4, r24	; 0x04
     b74:	15 82       	std	Z+5, r1	; 0x05
     b76:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <sprintf>
     b7a:	8d b7       	in	r24, 0x3d	; 61
     b7c:	9e b7       	in	r25, 0x3e	; 62
     b7e:	06 96       	adiw	r24, 0x06	; 6
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	f8 94       	cli
     b84:	9e bf       	out	0x3e, r25	; 62
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	8d bf       	out	0x3d, r24	; 61
     b8a:	c8 01       	movw	r24, r16
     b8c:	f7 01       	movw	r30, r14
     b8e:	09 95       	icall
	sprintf(buff,"EN_RXADDR: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_RXADDR)); prints(buff);
     b90:	82 e0       	ldi	r24, 0x02	; 2
     b92:	0e 94 ac 03 	call	0x758	; 0x758 <nrf24l01_readregister>
     b96:	00 d0       	rcall	.+0      	; 0xb98 <nrf24l01_printinfo+0x188>
     b98:	00 d0       	rcall	.+0      	; 0xb9a <nrf24l01_printinfo+0x18a>
     b9a:	00 d0       	rcall	.+0      	; 0xb9c <nrf24l01_printinfo+0x18c>
     b9c:	ed b7       	in	r30, 0x3d	; 61
     b9e:	fe b7       	in	r31, 0x3e	; 62
     ba0:	31 96       	adiw	r30, 0x01	; 1
     ba2:	ad b7       	in	r26, 0x3d	; 61
     ba4:	be b7       	in	r27, 0x3e	; 62
     ba6:	12 96       	adiw	r26, 0x02	; 2
     ba8:	1c 93       	st	X, r17
     baa:	0e 93       	st	-X, r16
     bac:	11 97       	sbiw	r26, 0x01	; 1
     bae:	21 eb       	ldi	r18, 0xB1	; 177
     bb0:	31 e0       	ldi	r19, 0x01	; 1
     bb2:	33 83       	std	Z+3, r19	; 0x03
     bb4:	22 83       	std	Z+2, r18	; 0x02
     bb6:	84 83       	std	Z+4, r24	; 0x04
     bb8:	15 82       	std	Z+5, r1	; 0x05
     bba:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <sprintf>
     bbe:	8d b7       	in	r24, 0x3d	; 61
     bc0:	9e b7       	in	r25, 0x3e	; 62
     bc2:	06 96       	adiw	r24, 0x06	; 6
     bc4:	0f b6       	in	r0, 0x3f	; 63
     bc6:	f8 94       	cli
     bc8:	9e bf       	out	0x3e, r25	; 62
     bca:	0f be       	out	0x3f, r0	; 63
     bcc:	8d bf       	out	0x3d, r24	; 61
     bce:	c8 01       	movw	r24, r16
     bd0:	f7 01       	movw	r30, r14
     bd2:	09 95       	icall
	sprintf(buff,"OBSERVE_TX: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_OBSERVE_TX)); prints(buff);
     bd4:	88 e0       	ldi	r24, 0x08	; 8
     bd6:	0e 94 ac 03 	call	0x758	; 0x758 <nrf24l01_readregister>
     bda:	00 d0       	rcall	.+0      	; 0xbdc <nrf24l01_printinfo+0x1cc>
     bdc:	00 d0       	rcall	.+0      	; 0xbde <nrf24l01_printinfo+0x1ce>
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <nrf24l01_printinfo+0x1d0>
     be0:	ed b7       	in	r30, 0x3d	; 61
     be2:	fe b7       	in	r31, 0x3e	; 62
     be4:	31 96       	adiw	r30, 0x01	; 1
     be6:	ad b7       	in	r26, 0x3d	; 61
     be8:	be b7       	in	r27, 0x3e	; 62
     bea:	12 96       	adiw	r26, 0x02	; 2
     bec:	1c 93       	st	X, r17
     bee:	0e 93       	st	-X, r16
     bf0:	11 97       	sbiw	r26, 0x01	; 1
     bf2:	23 ec       	ldi	r18, 0xC3	; 195
     bf4:	31 e0       	ldi	r19, 0x01	; 1
     bf6:	33 83       	std	Z+3, r19	; 0x03
     bf8:	22 83       	std	Z+2, r18	; 0x02
     bfa:	84 83       	std	Z+4, r24	; 0x04
     bfc:	15 82       	std	Z+5, r1	; 0x05
     bfe:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <sprintf>
     c02:	8d b7       	in	r24, 0x3d	; 61
     c04:	9e b7       	in	r25, 0x3e	; 62
     c06:	06 96       	adiw	r24, 0x06	; 6
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	f8 94       	cli
     c0c:	9e bf       	out	0x3e, r25	; 62
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	8d bf       	out	0x3d, r24	; 61
     c12:	c8 01       	movw	r24, r16
     c14:	f7 01       	movw	r30, r14
     c16:	09 95       	icall
	prints("\r\n");
     c18:	86 ed       	ldi	r24, 0xD6	; 214
     c1a:	91 e0       	ldi	r25, 0x01	; 1
     c1c:	f7 01       	movw	r30, r14
     c1e:	09 95       	icall
}
     c20:	cc 59       	subi	r28, 0x9C	; 156
     c22:	df 4f       	sbci	r29, 0xFF	; 255
     c24:	0f b6       	in	r0, 0x3f	; 63
     c26:	f8 94       	cli
     c28:	de bf       	out	0x3e, r29	; 62
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	cd bf       	out	0x3d, r28	; 61
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	ff 90       	pop	r15
     c38:	ef 90       	pop	r14
     c3a:	08 95       	ret

00000c3c <nrf24l01_readready>:
}

/*
 * check if there is data ready
 */
uint8_t nrf24l01_readready(uint8_t* pipe) {
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	ec 01       	movw	r28, r24
    uint8_t status = nrf24l01_getstatus();
     c42:	0e 94 02 05 	call	0xa04	; 0xa04 <nrf24l01_getstatus>
    uint8_t ret = status & (1<<NRF24L01_REG_RX_DR);
    if(ret) {
     c46:	98 2f       	mov	r25, r24
     c48:	90 74       	andi	r25, 0x40	; 64
     c4a:	86 ff       	sbrs	r24, 6
     c4c:	05 c0       	rjmp	.+10     	; 0xc58 <nrf24l01_readready+0x1c>
		//get the pipe number
		if(pipe)
     c4e:	20 97       	sbiw	r28, 0x00	; 0
     c50:	19 f0       	breq	.+6      	; 0xc58 <nrf24l01_readready+0x1c>
			*pipe = (status >> NRF24L01_REG_RX_P_NO) & 0b111;
     c52:	86 95       	lsr	r24
     c54:	87 70       	andi	r24, 0x07	; 7
     c56:	88 83       	st	Y, r24
    }
    return ret;
}
     c58:	89 2f       	mov	r24, r25
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	08 95       	ret

00000c60 <nrf24l01_read>:

/*
 * get data
 */
void nrf24l01_read(uint8_t pipe,uint8_t *data) {
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	06 2f       	mov	r16, r22
     c6a:	17 2f       	mov	r17, r23
	uint8_t i = 0;
	//read rx register
	nrf24l01_CSNlo; //low CSN
     c6c:	ae 98       	cbi	0x15, 6	; 21
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
     c6e:	81 e6       	ldi	r24, 0x61	; 97
     c70:	0e 94 d5 12 	call	0x25aa	; 0x25aa <spi_writereadbyte>
     c74:	c0 2f       	mov	r28, r16
     c76:	d1 2f       	mov	r29, r17
	//Thay doi lai command, lay PAYLOAD va write ACK
	//spi_writereadbyte(NRF24L01_CMD_W_ACK_PAYLOAD | pipe);
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     c78:	10 e0       	ldi	r17, 0x00	; 0
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
     c7a:	8f ef       	ldi	r24, 0xFF	; 255
     c7c:	0e 94 d5 12 	call	0x25aa	; 0x25aa <spi_writereadbyte>
     c80:	89 93       	st	Y+, r24
	//read rx register
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
	//Thay doi lai command, lay PAYLOAD va write ACK
	//spi_writereadbyte(NRF24L01_CMD_W_ACK_PAYLOAD | pipe);
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     c82:	1f 5f       	subi	r17, 0xFF	; 255
     c84:	19 30       	cpi	r17, 0x09	; 9
     c86:	c9 f7       	brne	.-14     	; 0xc7a <nrf24l01_read+0x1a>
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
    nrf24l01_CSNhi; //high CSN
     c88:	ae 9a       	sbi	0x15, 6	; 21
    //reset register
    nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR));
     c8a:	87 e0       	ldi	r24, 0x07	; 7
     c8c:	60 e4       	ldi	r22, 0x40	; 64
     c8e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
    //handle ack payload receipt
	if (nrf24l01_getstatus() & (1<<NRF24L01_REG_TX_DS))
     c92:	0e 94 02 05 	call	0xa04	; 0xa04 <nrf24l01_getstatus>
     c96:	85 ff       	sbrs	r24, 5
     c98:	04 c0       	rjmp	.+8      	; 0xca2 <nrf24l01_read+0x42>
		nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_TX_DS));
     c9a:	87 e0       	ldi	r24, 0x07	; 7
     c9c:	60 e2       	ldi	r22, 0x20	; 32
     c9e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
}
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	1f 91       	pop	r17
     ca8:	0f 91       	pop	r16
     caa:	08 95       	ret

00000cac <nrf24l01_write>:

/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	08 2f       	mov	r16, r24
     cb6:	19 2f       	mov	r17, r25
	uint8_t i = 0;
	uint8_t ret = 0;

	//set tx mode
	nrf24l01_setTX();
     cb8:	0e 94 e7 04 	call	0x9ce	; 0x9ce <nrf24l01_setTX>

	//write data
	nrf24l01_CSNlo; //low CSN
     cbc:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
     cbe:	80 ea       	ldi	r24, 0xA0	; 160
     cc0:	0e 94 d5 12 	call	0x25aa	; 0x25aa <spi_writereadbyte>
     cc4:	c0 2f       	mov	r28, r16
     cc6:	d1 2f       	mov	r29, r17
     cc8:	19 e0       	ldi	r17, 0x09	; 9
	for (i=0; i<NRF24L01_PAYLOAD; i++)
		spi_writereadbyte(data[i]);
     cca:	89 91       	ld	r24, Y+
     ccc:	0e 94 d5 12 	call	0x25aa	; 0x25aa <spi_writereadbyte>
     cd0:	11 50       	subi	r17, 0x01	; 1
	nrf24l01_setTX();

	//write data
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
	for (i=0; i<NRF24L01_PAYLOAD; i++)
     cd2:	d9 f7       	brne	.-10     	; 0xcca <nrf24l01_write+0x1e>
		spi_writereadbyte(data[i]);
	nrf24l01_CSNhi; //high CSN
     cd4:	ae 9a       	sbi	0x15, 6	; 21

	//start transmission
	nrf24l01_CEhi; //high CE
     cd6:	af 9a       	sbi	0x15, 7	; 21
     cd8:	85 e0       	ldi	r24, 0x05	; 5
     cda:	8a 95       	dec	r24
     cdc:	f1 f7       	brne	.-4      	; 0xcda <nrf24l01_write+0x2e>
	_delay_us(15);
	nrf24l01_CElo; //low CE
     cde:	af 98       	cbi	0x15, 7	; 21
     ce0:	83 e0       	ldi	r24, 0x03	; 3
     ce2:	8a 95       	dec	r24
     ce4:	f1 f7       	brne	.-4      	; 0xce2 <nrf24l01_write+0x36>
     ce6:	00 00       	nop

	//stop if max_retries reached or send is ok
	do {
		_delay_us(10);
	}
	while( !(nrf24l01_getstatus() & (1<<NRF24L01_REG_MAX_RT | 1<<NRF24L01_REG_TX_DS)) );
     ce8:	0e 94 02 05 	call	0xa04	; 0xa04 <nrf24l01_getstatus>
     cec:	80 73       	andi	r24, 0x30	; 48
     cee:	c1 f3       	breq	.-16     	; 0xce0 <nrf24l01_write+0x34>

	if(nrf24l01_getstatus() & 1<<NRF24L01_REG_TX_DS)
     cf0:	0e 94 02 05 	call	0xa04	; 0xa04 <nrf24l01_getstatus>
     cf4:	c8 2f       	mov	r28, r24
		ret = 1;

	//reset PLOS_CNT
	nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH);
     cf6:	85 e0       	ldi	r24, 0x05	; 5
     cf8:	6c e4       	ldi	r22, 0x4C	; 76
     cfa:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>

	//power down
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PWR_UP));
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	0e 94 ac 03 	call	0x758	; 0x758 <nrf24l01_readregister>
     d04:	68 2f       	mov	r22, r24
     d06:	6d 7f       	andi	r22, 0xFD	; 253
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>

	//set rx mode
	nrf24l01_setRX();
     d0e:	0e 94 c5 04 	call	0x98a	; 0x98a <nrf24l01_setRX>
/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
	uint8_t i = 0;
	uint8_t ret = 0;
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	c5 ff       	sbrs	r28, 5
     d16:	80 e0       	ldi	r24, 0x00	; 0

	//set rx mode
	nrf24l01_setRX();

	return ret;
}
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	08 95       	ret

00000d22 <nrf24l01_setpalevel>:

/*
 * set power level
 */
void nrf24l01_setpalevel() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP);
     d22:	86 e0       	ldi	r24, 0x06	; 6
     d24:	0e 94 ac 03 	call	0x758	; 0x758 <nrf24l01_readregister>
  setup &= ~((1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH));

  if (NRF24L01_RF24_PA == NRF24L01_RF24_PA_MAX) {
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
     d28:	68 2f       	mov	r22, r24
     d2a:	66 60       	ori	r22, 0x06	; 6
  } else {
	  //default is max power
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     d2c:	86 e0       	ldi	r24, 0x06	; 6
     d2e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
}
     d32:	08 95       	ret

00000d34 <nrf24l01_setdatarate>:

/*
 * set datarate
 */
void nrf24l01_setdatarate() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP) ;
     d34:	86 e0       	ldi	r24, 0x06	; 6
     d36:	0e 94 ac 03 	call	0x758	; 0x758 <nrf24l01_readregister>

  setup &= ~((1<<NRF24L01_REG_RF_DR_LOW) | (1<<NRF24L01_REG_RF_DR_HIGH));
     d3a:	68 2f       	mov	r22, r24
     d3c:	67 7d       	andi	r22, 0xD7	; 215
    } else {
    	//default is 1Mbps
    }
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     d3e:	86 e0       	ldi	r24, 0x06	; 6
     d40:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
}
     d44:	08 95       	ret

00000d46 <nrf24l01_setcrclength>:

/*
 * set crc length
 */
void nrf24l01_setcrclength() {
  uint8_t config = nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~((1<<NRF24L01_REG_CRCO) | (1<<NRF24L01_REG_EN_CRC));
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	0e 94 ac 03 	call	0x758	; 0x758 <nrf24l01_readregister>
	  //nothing
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_8) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_16) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
	  config |= (1<<NRF24L01_REG_CRCO);
     d4c:	68 2f       	mov	r22, r24
     d4e:	6c 60       	ori	r22, 0x0C	; 12
  } else {
	  //default is disabled
  }

  nrf24l01_writeregister(NRF24L01_REG_CONFIG, config);
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
}
     d56:	08 95       	ret

00000d58 <nrf24l01_init>:
/*
 * init nrf24l01
 */
void nrf24l01_init() {
	//setup port
	NRF24L01_DDR |= (1<<NRF24L01_CSN); //output
     d58:	a6 9a       	sbi	0x14, 6	; 20
	NRF24L01_DDR |= (1<<NRF24L01_CE); //output
     d5a:	a7 9a       	sbi	0x14, 7	; 20

    spi_init(); //init spi
     d5c:	0e 94 ca 12 	call	0x2594	; 0x2594 <spi_init>

    nrf24l01_CElo; //low CE
     d60:	af 98       	cbi	0x15, 7	; 21
    nrf24l01_CSNhi; //high CSN
     d62:	ae 9a       	sbi	0x15, 6	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d64:	81 ee       	ldi	r24, 0xE1	; 225
     d66:	94 e0       	ldi	r25, 0x04	; 4
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	f1 f7       	brne	.-4      	; 0xd68 <nrf24l01_init+0x10>
     d6c:	00 c0       	rjmp	.+0      	; 0xd6e <nrf24l01_init+0x16>
     d6e:	00 00       	nop

    _delay_ms(5); //wait for the radio to init

    nrf24l01_setpalevel(); //set power level
     d70:	0e 94 91 06 	call	0xd22	; 0xd22 <nrf24l01_setpalevel>
    nrf24l01_setdatarate(); //set data rate
     d74:	0e 94 9a 06 	call	0xd34	; 0xd34 <nrf24l01_setdatarate>
    nrf24l01_setcrclength(); //set crc length
     d78:	0e 94 a3 06 	call	0xd46	; 0xd46 <nrf24l01_setcrclength>
    nrf24l01_writeregister(NRF24L01_REG_SETUP_RETR, NRF24L01_RETR); // set retries
     d7c:	84 e0       	ldi	r24, 0x04	; 4
     d7e:	67 e4       	ldi	r22, 0x47	; 71
     d80:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_DYNPD, 0); //disable dynamic payloads
     d84:	8c e1       	ldi	r24, 0x1C	; 28
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH); //set RF channel
     d8c:	85 e0       	ldi	r24, 0x05	; 5
     d8e:	6c e4       	ldi	r22, 0x4C	; 76
     d90:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>

	//payload size
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P0, NRF24L01_PAYLOAD);
     d94:	81 e1       	ldi	r24, 0x11	; 17
     d96:	69 e0       	ldi	r22, 0x09	; 9
     d98:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P1, NRF24L01_PAYLOAD);
     d9c:	82 e1       	ldi	r24, 0x12	; 18
     d9e:	69 e0       	ldi	r22, 0x09	; 9
     da0:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P2, NRF24L01_PAYLOAD);
     da4:	83 e1       	ldi	r24, 0x13	; 19
     da6:	69 e0       	ldi	r22, 0x09	; 9
     da8:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P3, NRF24L01_PAYLOAD);
     dac:	84 e1       	ldi	r24, 0x14	; 20
     dae:	69 e0       	ldi	r22, 0x09	; 9
     db0:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P4, NRF24L01_PAYLOAD);
     db4:	85 e1       	ldi	r24, 0x15	; 21
     db6:	69 e0       	ldi	r22, 0x09	; 9
     db8:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P5, NRF24L01_PAYLOAD);
     dbc:	86 e1       	ldi	r24, 0x16	; 22
     dbe:	69 e0       	ldi	r22, 0x09	; 9
     dc0:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
	#endif

	//enable pipe
	nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, 0);
     dc4:	82 e0       	ldi	r24, 0x02	; 2
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P0));
     dcc:	82 e0       	ldi	r24, 0x02	; 2
     dce:	0e 94 ac 03 	call	0x758	; 0x758 <nrf24l01_readregister>
     dd2:	68 2f       	mov	r22, r24
     dd4:	61 60       	ori	r22, 0x01	; 1
     dd6:	82 e0       	ldi	r24, 0x02	; 2
     dd8:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P1));
     ddc:	82 e0       	ldi	r24, 0x02	; 2
     dde:	0e 94 ac 03 	call	0x758	; 0x758 <nrf24l01_readregister>
     de2:	68 2f       	mov	r22, r24
     de4:	62 60       	ori	r22, 0x02	; 2
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P2));
     dec:	82 e0       	ldi	r24, 0x02	; 2
     dee:	0e 94 ac 03 	call	0x758	; 0x758 <nrf24l01_readregister>
     df2:	68 2f       	mov	r22, r24
     df4:	64 60       	ori	r22, 0x04	; 4
     df6:	82 e0       	ldi	r24, 0x02	; 2
     df8:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P3));
     dfc:	82 e0       	ldi	r24, 0x02	; 2
     dfe:	0e 94 ac 03 	call	0x758	; 0x758 <nrf24l01_readregister>
     e02:	68 2f       	mov	r22, r24
     e04:	68 60       	ori	r22, 0x08	; 8
     e06:	82 e0       	ldi	r24, 0x02	; 2
     e08:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P4));
     e0c:	82 e0       	ldi	r24, 0x02	; 2
     e0e:	0e 94 ac 03 	call	0x758	; 0x758 <nrf24l01_readregister>
     e12:	68 2f       	mov	r22, r24
     e14:	60 61       	ori	r22, 0x10	; 16
     e16:	82 e0       	ldi	r24, 0x02	; 2
     e18:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P5));
     e1c:	82 e0       	ldi	r24, 0x02	; 2
     e1e:	0e 94 ac 03 	call	0x758	; 0x758 <nrf24l01_readregister>
     e22:	68 2f       	mov	r22, r24
     e24:	60 62       	ori	r22, 0x20	; 32
     e26:	82 e0       	ldi	r24, 0x02	; 2
     e28:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
	#endif

	//auto ack
	#if NRF24L01_ACK == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P0));
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	0e 94 ac 03 	call	0x758	; 0x758 <nrf24l01_readregister>
     e32:	68 2f       	mov	r22, r24
     e34:	61 60       	ori	r22, 0x01	; 1
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P1));
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	0e 94 ac 03 	call	0x758	; 0x758 <nrf24l01_readregister>
     e42:	68 2f       	mov	r22, r24
     e44:	62 60       	ori	r22, 0x02	; 2
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P2));
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	0e 94 ac 03 	call	0x758	; 0x758 <nrf24l01_readregister>
     e52:	68 2f       	mov	r22, r24
     e54:	64 60       	ori	r22, 0x04	; 4
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P3));
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	0e 94 ac 03 	call	0x758	; 0x758 <nrf24l01_readregister>
     e62:	68 2f       	mov	r22, r24
     e64:	68 60       	ori	r22, 0x08	; 8
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P4));
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	0e 94 ac 03 	call	0x758	; 0x758 <nrf24l01_readregister>
     e72:	68 2f       	mov	r22, r24
     e74:	60 61       	ori	r22, 0x10	; 16
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P5));
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	0e 94 ac 03 	call	0x758	; 0x758 <nrf24l01_readregister>
     e82:	68 2f       	mov	r22, r24
     e84:	60 62       	ori	r22, 0x20	; 32
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P4));
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P5));
	#endif

	//rx address
	nrf24l01_setrxaddr(0, nrf24l01_addr0);
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	69 ed       	ldi	r22, 0xD9	; 217
     e90:	71 e0       	ldi	r23, 0x01	; 1
     e92:	0e 94 11 04 	call	0x822	; 0x822 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(1, nrf24l01_addr1);
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	6e ed       	ldi	r22, 0xDE	; 222
     e9a:	71 e0       	ldi	r23, 0x01	; 1
     e9c:	0e 94 11 04 	call	0x822	; 0x822 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(2, nrf24l01_addr2);
     ea0:	82 e0       	ldi	r24, 0x02	; 2
     ea2:	63 ee       	ldi	r22, 0xE3	; 227
     ea4:	71 e0       	ldi	r23, 0x01	; 1
     ea6:	0e 94 11 04 	call	0x822	; 0x822 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(3, nrf24l01_addr3);
     eaa:	83 e0       	ldi	r24, 0x03	; 3
     eac:	68 ee       	ldi	r22, 0xE8	; 232
     eae:	71 e0       	ldi	r23, 0x01	; 1
     eb0:	0e 94 11 04 	call	0x822	; 0x822 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(4, nrf24l01_addr4);
     eb4:	84 e0       	ldi	r24, 0x04	; 4
     eb6:	6d ee       	ldi	r22, 0xED	; 237
     eb8:	71 e0       	ldi	r23, 0x01	; 1
     eba:	0e 94 11 04 	call	0x822	; 0x822 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(5, nrf24l01_addr5);
     ebe:	85 e0       	ldi	r24, 0x05	; 5
     ec0:	62 ef       	ldi	r22, 0xF2	; 242
     ec2:	71 e0       	ldi	r23, 0x01	; 1
     ec4:	0e 94 11 04 	call	0x822	; 0x822 <nrf24l01_setrxaddr>

	//tx address
	nrf24l01_settxaddr(nrf24l01_addrtx);
     ec8:	87 ef       	ldi	r24, 0xF7	; 247
     eca:	91 e0       	ldi	r25, 0x01	; 1
     ecc:	0e 94 8e 04 	call	0x91c	; 0x91c <nrf24l01_settxaddr>

	//set rx mode
	nrf24l01_setRX();
     ed0:	0e 94 c5 04 	call	0x98a	; 0x98a <nrf24l01_setRX>
}
     ed4:	08 95       	ret

00000ed6 <sMO_init>:
static void clearInEvents(SMO* handle);
static void clearOutEvents(SMO* handle);


void sMO_init(SMO* handle)
{
     ed6:	fc 01       	movw	r30, r24
	int i;

	for (i = 0; i < SMO_MAX_ORTHOGONAL_STATES; ++i)
		handle->stateConfVector[i] = SMO_last_state;
     ed8:	86 e1       	ldi	r24, 0x16	; 22
     eda:	80 83       	st	Z, r24
     edc:	81 83       	std	Z+1, r24	; 0x01
	
	
	handle->stateConfVectorPosition = 0;
     ede:	13 82       	std	Z+3, r1	; 0x03
     ee0:	12 82       	std	Z+2, r1	; 0x02

	// TODO: initialize all events ...
	// TODO: initialize all variables ... (set default values - here or inenter sequence ?!?)

}
     ee2:	08 95       	ret

00000ee4 <sMO_enter>:

void sMO_enter(SMO* handle)
{
     ee4:	1f 93       	push	r17
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	ec 01       	movw	r28, r24
	sMO_entryaction(handle);
	/* Default enter sequence for region main region */
	/* Default react sequence for initial entry  */
	/* Default enter sequence for state on */
	/* Entry action for state 'on'. */
	handle->iface.lightOn = bool_true;
     eec:	11 e0       	ldi	r17, 0x01	; 1
     eee:	1d a7       	lds	r17, 0x7d
	/* Default enter sequence for region r1 */
	/* Default react sequence for initial entry  */
	/* Default enter sequence for state Init */
	/* Entry action for state 'Init'. */
	sMO_setTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) , 3 * 1000, bool_false);
     ef0:	c8 96       	adiw	r24, 0x38	; 56
     ef2:	48 eb       	ldi	r20, 0xB8	; 184
     ef4:	5b e0       	ldi	r21, 0x0B	; 11
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	0e 94 55 03 	call	0x6aa	; 0x6aa <sMO_setTimer>
	handle->iface.tableId = 1;
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	a0 e0       	ldi	r26, 0x00	; 0
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	8a ab       	sts	0x5a, r24
     f0a:	9b ab       	sts	0x5b, r25
     f0c:	ac ab       	sts	0x5c, r26
     f0e:	bd ab       	sts	0x5d, r27
	sMOIfaceLCD_init();
     f10:	0e 94 4e 02 	call	0x49c	; 0x49c <sMOIfaceLCD_init>
	sMOIfaceKEYPAD_init();
     f14:	0e 94 0f 02 	call	0x41e	; 0x41e <sMOIfaceKEYPAD_init>
	sMOIfaceRF_init();
     f18:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <sMOIfaceRF_init>
	sMOIfaceLCD_clear();
     f1c:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
	sMOIfaceLCD_writeString("Waitting...");
     f20:	8c ef       	ldi	r24, 0xFC	; 252
     f22:	91 e0       	ldi	r25, 0x01	; 1
     f24:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
	handle->stateConfVector[0] = SMO_main_region_on_r1_Init;
     f28:	18 83       	st	Y, r17
	handle->stateConfVectorPosition = 0;
     f2a:	1b 82       	std	Y+3, r1	; 0x03
     f2c:	1a 82       	std	Y+2, r1	; 0x02
}
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	1f 91       	pop	r17
     f34:	08 95       	ret

00000f36 <sMO_exit>:

void sMO_exit(SMO* handle)
{
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	ec 01       	movw	r28, r24
	/* Default exit sequence for statechart SMO */
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of main region) at position 0... */
	switch(handle->stateConfVector[ 0 ]) {
     f3c:	88 81       	ld	r24, Y
     f3e:	83 30       	cpi	r24, 0x03	; 3
     f40:	69 f0       	breq	.+26     	; 0xf5c <sMO_exit+0x26>
     f42:	84 30       	cpi	r24, 0x04	; 4
     f44:	81 f0       	breq	.+32     	; 0xf66 <sMO_exit+0x30>
     f46:	81 30       	cpi	r24, 0x01	; 1
     f48:	91 f4       	brne	.+36     	; 0xf6e <sMO_exit+0x38>
		case SMO_main_region_on_r1_Init : {
			/* Default exit sequence for state Init */
			handle->stateConfVector[0] = SMO_last_state;
     f4a:	86 e1       	ldi	r24, 0x16	; 22
     f4c:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
     f4e:	1b 82       	std	Y+3, r1	; 0x03
     f50:	1a 82       	std	Y+2, r1	; 0x02
			/* Exit action for state 'Init'. */
			sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) );		
     f52:	ce 01       	movw	r24, r28
     f54:	c8 96       	adiw	r24, 0x38	; 56
     f56:	0e 94 58 03 	call	0x6b0	; 0x6b0 <sMO_unsetTimer>
			break;
     f5a:	09 c0       	rjmp	.+18     	; 0xf6e <sMO_exit+0x38>
		}
		case SMO_main_region_on_r1_Running_keypad_CheckKey : {
			/* Default exit sequence for state CheckKey */
			handle->stateConfVector[0] = SMO_last_state;
     f5c:	86 e1       	ldi	r24, 0x16	; 22
     f5e:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
     f60:	1b 82       	std	Y+3, r1	; 0x03
     f62:	1a 82       	std	Y+2, r1	; 0x02
			break;
     f64:	04 c0       	rjmp	.+8      	; 0xf6e <sMO_exit+0x38>
		}
		case SMO_main_region_on_r1_Running_keypad_CheckKeyDown : {
			/* Default exit sequence for state CheckKeyDown */
			handle->stateConfVector[0] = SMO_last_state;
     f66:	86 e1       	ldi	r24, 0x16	; 22
     f68:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
     f6a:	1b 82       	std	Y+3, r1	; 0x03
     f6c:	1a 82       	std	Y+2, r1	; 0x02
			break;
		}
		default: break;
	}
	/* Handle exit of all possible states (of main region) at position 1... */
	switch(handle->stateConfVector[ 1 ]) {
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	8c 30       	cpi	r24, 0x0C	; 12
     f72:	09 f4       	brne	.+2      	; 0xf76 <sMO_exit+0x40>
     f74:	54 c0       	rjmp	.+168    	; 0x101e <sMO_exit+0xe8>
     f76:	8d 30       	cpi	r24, 0x0D	; 13
     f78:	78 f4       	brcc	.+30     	; 0xf98 <sMO_exit+0x62>
     f7a:	88 30       	cpi	r24, 0x08	; 8
     f7c:	a1 f1       	breq	.+104    	; 0xfe6 <sMO_exit+0xb0>
     f7e:	89 30       	cpi	r24, 0x09	; 9
     f80:	30 f4       	brcc	.+12     	; 0xf8e <sMO_exit+0x58>
     f82:	85 30       	cpi	r24, 0x05	; 5
     f84:	11 f1       	breq	.+68     	; 0xfca <sMO_exit+0x94>
     f86:	87 30       	cpi	r24, 0x07	; 7
     f88:	09 f0       	breq	.+2      	; 0xf8c <sMO_exit+0x56>
     f8a:	80 c0       	rjmp	.+256    	; 0x108c <sMO_exit+0x156>
     f8c:	25 c0       	rjmp	.+74     	; 0xfd8 <sMO_exit+0xa2>
     f8e:	8a 30       	cpi	r24, 0x0A	; 10
     f90:	c1 f1       	breq	.+112    	; 0x1002 <sMO_exit+0xcc>
     f92:	8b 30       	cpi	r24, 0x0B	; 11
     f94:	e8 f5       	brcc	.+122    	; 0x1010 <sMO_exit+0xda>
     f96:	2e c0       	rjmp	.+92     	; 0xff4 <sMO_exit+0xbe>
     f98:	81 31       	cpi	r24, 0x11	; 17
     f9a:	09 f4       	brne	.+2      	; 0xf9e <sMO_exit+0x68>
     f9c:	5c c0       	rjmp	.+184    	; 0x1056 <sMO_exit+0x120>
     f9e:	82 31       	cpi	r24, 0x12	; 18
     fa0:	50 f4       	brcc	.+20     	; 0xfb6 <sMO_exit+0x80>
     fa2:	8f 30       	cpi	r24, 0x0F	; 15
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <sMO_exit+0x72>
     fa6:	49 c0       	rjmp	.+146    	; 0x103a <sMO_exit+0x104>
     fa8:	80 31       	cpi	r24, 0x10	; 16
     faa:	08 f0       	brcs	.+2      	; 0xfae <sMO_exit+0x78>
     fac:	4d c0       	rjmp	.+154    	; 0x1048 <sMO_exit+0x112>
     fae:	8e 30       	cpi	r24, 0x0E	; 14
     fb0:	09 f0       	breq	.+2      	; 0xfb4 <sMO_exit+0x7e>
     fb2:	6c c0       	rjmp	.+216    	; 0x108c <sMO_exit+0x156>
     fb4:	3b c0       	rjmp	.+118    	; 0x102c <sMO_exit+0xf6>
     fb6:	84 31       	cpi	r24, 0x14	; 20
     fb8:	09 f4       	brne	.+2      	; 0xfbc <sMO_exit+0x86>
     fba:	5b c0       	rjmp	.+182    	; 0x1072 <sMO_exit+0x13c>
     fbc:	85 31       	cpi	r24, 0x15	; 21
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <sMO_exit+0x8c>
     fc0:	5f c0       	rjmp	.+190    	; 0x1080 <sMO_exit+0x14a>
     fc2:	83 31       	cpi	r24, 0x13	; 19
     fc4:	09 f0       	breq	.+2      	; 0xfc8 <sMO_exit+0x92>
     fc6:	62 c0       	rjmp	.+196    	; 0x108c <sMO_exit+0x156>
     fc8:	4d c0       	rjmp	.+154    	; 0x1064 <sMO_exit+0x12e>
		case SMO_main_region_on_r1_Running_running_main_ShowMenu : {
			/* Default exit sequence for state ShowMenu */
			handle->stateConfVector[1] = SMO_last_state;
     fca:	86 e1       	ldi	r24, 0x16	; 22
     fcc:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	9b 83       	std	Y+3, r25	; 0x03
     fd4:	8a 83       	std	Y+2, r24	; 0x02
			break;
     fd6:	5a c0       	rjmp	.+180    	; 0x108c <sMO_exit+0x156>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
			/* Default exit sequence for state ShowCode */
			handle->stateConfVector[1] = SMO_last_state;
     fd8:	86 e1       	ldi	r24, 0x16	; 22
     fda:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	9b 83       	std	Y+3, r25	; 0x03
     fe2:	8a 83       	std	Y+2, r24	; 0x02
			break;
     fe4:	53 c0       	rjmp	.+166    	; 0x108c <sMO_exit+0x156>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
			/* Default exit sequence for state EnterCode */
			handle->stateConfVector[1] = SMO_last_state;
     fe6:	86 e1       	ldi	r24, 0x16	; 22
     fe8:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	9b 83       	std	Y+3, r25	; 0x03
     ff0:	8a 83       	std	Y+2, r24	; 0x02
			break;
     ff2:	4c c0       	rjmp	.+152    	; 0x108c <sMO_exit+0x156>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
			/* Default exit sequence for state CheckKeyPress1 */
			handle->stateConfVector[1] = SMO_last_state;
     ff4:	86 e1       	ldi	r24, 0x16	; 22
     ff6:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	9b 83       	std	Y+3, r25	; 0x03
     ffe:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1000:	45 c0       	rjmp	.+138    	; 0x108c <sMO_exit+0x156>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
			/* Default exit sequence for state CheckCode0 */
			handle->stateConfVector[1] = SMO_last_state;
    1002:	86 e1       	ldi	r24, 0x16	; 22
    1004:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	9b 83       	std	Y+3, r25	; 0x03
    100c:	8a 83       	std	Y+2, r24	; 0x02
			break;
    100e:	3e c0       	rjmp	.+124    	; 0x108c <sMO_exit+0x156>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
			/* Default exit sequence for state ShowAmount */
			handle->stateConfVector[1] = SMO_last_state;
    1010:	86 e1       	ldi	r24, 0x16	; 22
    1012:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	9b 83       	std	Y+3, r25	; 0x03
    101a:	8a 83       	std	Y+2, r24	; 0x02
			break;
    101c:	37 c0       	rjmp	.+110    	; 0x108c <sMO_exit+0x156>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
			/* Default exit sequence for state CheckKeyPress2 */
			handle->stateConfVector[1] = SMO_last_state;
    101e:	86 e1       	ldi	r24, 0x16	; 22
    1020:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	9b 83       	std	Y+3, r25	; 0x03
    1028:	8a 83       	std	Y+2, r24	; 0x02
			break;
    102a:	30 c0       	rjmp	.+96     	; 0x108c <sMO_exit+0x156>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
			/* Default exit sequence for state EnterAmount */
			handle->stateConfVector[1] = SMO_last_state;
    102c:	86 e1       	ldi	r24, 0x16	; 22
    102e:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	9b 83       	std	Y+3, r25	; 0x03
    1036:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1038:	29 c0       	rjmp	.+82     	; 0x108c <sMO_exit+0x156>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
			/* Default exit sequence for final state. */
			handle->stateConfVector[1] = SMO_last_state;
    103a:	86 e1       	ldi	r24, 0x16	; 22
    103c:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	9b 83       	std	Y+3, r25	; 0x03
    1044:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1046:	22 c0       	rjmp	.+68     	; 0x108c <sMO_exit+0x156>
		}
		case SMO_main_region_on_r1_Running_running_main_MenuA : {
			/* Default exit sequence for state MenuA */
			handle->stateConfVector[1] = SMO_last_state;
    1048:	86 e1       	ldi	r24, 0x16	; 22
    104a:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	9b 83       	std	Y+3, r25	; 0x03
    1052:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1054:	1b c0       	rjmp	.+54     	; 0x108c <sMO_exit+0x156>
		}
		case SMO_main_region_on_r1_Running_running_main_CheckKeyPress : {
			/* Default exit sequence for state CheckKeyPress */
			handle->stateConfVector[1] = SMO_last_state;
    1056:	86 e1       	ldi	r24, 0x16	; 22
    1058:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	9b 83       	std	Y+3, r25	; 0x03
    1060:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1062:	14 c0       	rjmp	.+40     	; 0x108c <sMO_exit+0x156>
		}
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
			/* Default exit sequence for state Send */
			handle->stateConfVector[1] = SMO_last_state;
    1064:	86 e1       	ldi	r24, 0x16	; 22
    1066:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	9b 83       	std	Y+3, r25	; 0x03
    106e:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1070:	0d c0       	rjmp	.+26     	; 0x108c <sMO_exit+0x156>
		}
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
			/* Default exit sequence for state Check */
			handle->stateConfVector[1] = SMO_last_state;
    1072:	86 e1       	ldi	r24, 0x16	; 22
    1074:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	9b 83       	std	Y+3, r25	; 0x03
    107c:	8a 83       	std	Y+2, r24	; 0x02
			break;
    107e:	06 c0       	rjmp	.+12     	; 0x108c <sMO_exit+0x156>
		}
		case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
			/* Default exit sequence for final state. */
			handle->stateConfVector[1] = SMO_last_state;
    1080:	86 e1       	ldi	r24, 0x16	; 22
    1082:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	9b 83       	std	Y+3, r25	; 0x03
    108a:	8a 83       	std	Y+2, r24	; 0x02
			break;
		}
		default: break;
	}
	sMO_exitaction(handle);
}
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	08 95       	ret

00001092 <sMO_runCycle>:
}

static void clearOutEvents(SMO* handle) {
}

void sMO_runCycle(SMO* handle) {
    1092:	2f 92       	push	r2
    1094:	3f 92       	push	r3
    1096:	4f 92       	push	r4
    1098:	5f 92       	push	r5
    109a:	6f 92       	push	r6
    109c:	7f 92       	push	r7
    109e:	8f 92       	push	r8
    10a0:	9f 92       	push	r9
    10a2:	af 92       	push	r10
    10a4:	bf 92       	push	r11
    10a6:	cf 92       	push	r12
    10a8:	df 92       	push	r13
    10aa:	ef 92       	push	r14
    10ac:	ff 92       	push	r15
    10ae:	0f 93       	push	r16
    10b0:	1f 93       	push	r17
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	ec 01       	movw	r28, r24
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
    10b8:	1b 82       	std	Y+3, r1	; 0x03
    10ba:	1a 82       	std	Y+2, r1	; 0x02
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	90 e0       	ldi	r25, 0x00	; 0
static void sMO_react_main_region_on_r1_Running_running_main_CheckKeyPress(SMO* handle) {
	/* The reactions of state CheckKeyPress. */
	if (handle->ifaceKEYPAD.lastkey == 13 && handle->ifaceKEYPAD.key_pressed_raised) { 
		/* Default exit sequence for state CheckKeyPress */
		handle->stateConfVector[1] = SMO_last_state;
		handle->stateConfVectorPosition = 1;
    10c0:	01 e0       	ldi	r16, 0x01	; 1
    10c2:	10 e0       	ldi	r17, 0x00	; 0
		/* Default enter sequence for state MenuA */
		/* Entry action for state 'MenuA'. */
		handle->iface.menuId = 1;
    10c4:	44 24       	eor	r4, r4
    10c6:	55 24       	eor	r5, r5
    10c8:	32 01       	movw	r6, r4
    10ca:	43 94       	inc	r4
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
			/* Default enter sequence for state CheckKeyPress2 */
			/* Entry action for state 'CheckKeyPress2'. */
			handle->ifaceKEYPAD.lastkey = 0;
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2;
    10cc:	0f 2e       	mov	r0, r31
    10ce:	fc e0       	ldi	r31, 0x0C	; 12
    10d0:	af 2e       	mov	r10, r31
    10d2:	f0 2d       	mov	r31, r0
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
			/* Default enter sequence for state CheckKeyPress1 */
			/* Entry action for state 'CheckKeyPress1'. */
			handle->ifaceKEYPAD.lastkey = 0;
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1;
    10d4:	0f 2e       	mov	r0, r31
    10d6:	f9 e0       	ldi	r31, 0x09	; 9
    10d8:	9f 2e       	mov	r9, r31
    10da:	f0 2d       	mov	r31, r0
		handle->stateConfVector[1] = SMO_last_state;
		handle->stateConfVectorPosition = 1;
		/* Default enter sequence for state CheckKeyPress */
		/* Entry action for state 'CheckKeyPress'. */
		handle->ifaceKEYPAD.lastkey = 0;
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_CheckKeyPress;
    10dc:	0f 2e       	mov	r0, r31
    10de:	f1 e1       	ldi	r31, 0x11	; 17
    10e0:	bf 2e       	mov	r11, r31
    10e2:	f0 2d       	mov	r31, r0
	}  else {
		if (handle->ifaceKEYPAD.key != 0) { 
			/* Default enter sequence for state CheckKeyDown */
			/* Entry action for state 'CheckKeyDown'. */
			handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
			handle->ifaceKEYPAD.key_down = bool_true;
    10e4:	88 24       	eor	r8, r8
    10e6:	83 94       	inc	r8
			handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKeyDown;
    10e8:	33 24       	eor	r3, r3
    10ea:	68 94       	set
    10ec:	32 f8       	bld	r3, 2
		handle->ifaceKEYPAD.key_pressed_raised = bool_true;
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
		handle->ifaceKEYPAD.key_down = bool_false;
		handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKey;
    10ee:	0f 2e       	mov	r0, r31
    10f0:	f3 e0       	ldi	r31, 0x03	; 3
    10f2:	2f 2e       	mov	r2, r31
    10f4:	f0 2d       	mov	r31, r0
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
			
		switch (handle->stateConfVector[handle->stateConfVectorPosition]) {
    10f6:	8c 0f       	add	r24, r28
    10f8:	9d 1f       	adc	r25, r29
    10fa:	fc 01       	movw	r30, r24
    10fc:	80 81       	ld	r24, Z
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	01 97       	sbiw	r24, 0x01	; 1
    1102:	85 31       	cpi	r24, 0x15	; 21
    1104:	91 05       	cpc	r25, r1
    1106:	10 f0       	brcs	.+4      	; 0x110c <__stack+0xd>
    1108:	0c 94 15 11 	jmp	0x222a	; 0x222a <__stack+0x112b>
    110c:	8a 5b       	subi	r24, 0xBA	; 186
    110e:	9f 4f       	sbci	r25, 0xFF	; 255
    1110:	fc 01       	movw	r30, r24
    1112:	ee 0f       	add	r30, r30
    1114:	ff 1f       	adc	r31, r31
    1116:	05 90       	lpm	r0, Z+
    1118:	f4 91       	lpm	r31, Z
    111a:	e0 2d       	mov	r30, r0
    111c:	09 94       	ijmp
}

/* The reactions of state Init. */
static void sMO_react_main_region_on_r1_Init(SMO* handle) {
	/* The reactions of state Init. */
	if (handle->timeEvents.Init_time_event_0_raised) { 
    111e:	88 ad       	sts	0x68, r24
    1120:	88 23       	and	r24, r24
    1122:	11 f4       	brne	.+4      	; 0x1128 <__stack+0x29>
    1124:	0c 94 15 11 	jmp	0x222a	; 0x222a <__stack+0x112b>
		/* Default exit sequence for state Init */
		handle->stateConfVector[0] = SMO_last_state;
    1128:	86 e1       	ldi	r24, 0x16	; 22
    112a:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    112c:	1b 82       	std	Y+3, r1	; 0x03
    112e:	1a 82       	std	Y+2, r1	; 0x02
		/* Exit action for state 'Init'. */
		sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) );		
    1130:	ce 01       	movw	r24, r28
    1132:	c8 96       	adiw	r24, 0x38	; 56
    1134:	0e 94 58 03 	call	0x6b0	; 0x6b0 <sMO_unsetTimer>
		/* Default enter sequence for state Running */
		/* Default enter sequence for region keypad */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    1138:	0e 94 08 02 	call	0x410	; 0x410 <sMOIfaceKEYPAD_checkpress>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	8c 83       	std	Y+4, r24	; 0x04
    1142:	9d 83       	std	Y+5, r25	; 0x05
    1144:	ae 83       	std	Y+6, r26	; 0x06
    1146:	bf 83       	std	Y+7, r27	; 0x07
		handle->ifaceKEYPAD.key_down = bool_false;
    1148:	1c 86       	std	Y+12, r1	; 0x0c
		handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKey;
    114a:	83 e0       	ldi	r24, 0x03	; 3
    114c:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    114e:	1b 82       	std	Y+3, r1	; 0x03
    1150:	1a 82       	std	Y+2, r1	; 0x02
		/* Default enter sequence for region running main */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1152:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1156:	88 e0       	ldi	r24, 0x08	; 8
    1158:	92 e0       	ldi	r25, 0x02	; 2
    115a:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    115e:	86 e1       	ldi	r24, 0x16	; 22
    1160:	92 e0       	ldi	r25, 0x02	; 2
    1162:	40 e0       	ldi	r20, 0x00	; 0
    1164:	50 e0       	ldi	r21, 0x00	; 0
    1166:	ba 01       	movw	r22, r20
    1168:	01 e0       	ldi	r16, 0x01	; 1
    116a:	10 e0       	ldi	r17, 0x00	; 0
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1174:	1e a6       	lds	r17, 0xbe
    1176:	1f a6       	lds	r17, 0xbf
    1178:	18 aa       	sts	0x98, r17
    117a:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    117c:	85 e0       	ldi	r24, 0x05	; 5
    117e:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	9b 83       	std	Y+3, r25	; 0x03
    1186:	8a 83       	std	Y+2, r24	; 0x02
    1188:	0c 94 37 11 	jmp	0x226e	; 0x226e <__stack+0x116f>
}

/* The reactions of state CheckKey. */
static void sMO_react_main_region_on_r1_Running_keypad_CheckKey(SMO* handle) {
	/* The reactions of state CheckKey. */
	if (handle->ifaceKEYPAD.key != 0) { 
    118c:	8c 81       	ldd	r24, Y+4	; 0x04
    118e:	9d 81       	ldd	r25, Y+5	; 0x05
    1190:	ae 81       	ldd	r26, Y+6	; 0x06
    1192:	bf 81       	ldd	r27, Y+7	; 0x07
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	a1 05       	cpc	r26, r1
    1198:	b1 05       	cpc	r27, r1
    119a:	b1 f0       	breq	.+44     	; 0x11c8 <__stack+0xc9>
		/* Default exit sequence for state CheckKey */
		handle->stateConfVector[0] = SMO_last_state;
    119c:	f6 e1       	ldi	r31, 0x16	; 22
    119e:	f8 83       	st	Y, r31
		handle->stateConfVectorPosition = 0;
    11a0:	1b 82       	std	Y+3, r1	; 0x03
    11a2:	1a 82       	std	Y+2, r1	; 0x02
		handle->ifaceKEYPAD.lastkey = handle->ifaceKEYPAD.key;
    11a4:	88 87       	std	Y+8, r24	; 0x08
    11a6:	99 87       	std	Y+9, r25	; 0x09
    11a8:	aa 87       	std	Y+10, r26	; 0x0a
    11aa:	bb 87       	std	Y+11, r27	; 0x0b
		/* Default enter sequence for state CheckKeyDown */
		/* Entry action for state 'CheckKeyDown'. */
		handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    11ac:	0e 94 08 02 	call	0x410	; 0x410 <sMOIfaceKEYPAD_checkpress>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	8c 83       	std	Y+4, r24	; 0x04
    11b6:	9d 83       	std	Y+5, r25	; 0x05
    11b8:	ae 83       	std	Y+6, r26	; 0x06
    11ba:	bf 83       	std	Y+7, r27	; 0x07
		handle->ifaceKEYPAD.key_down = bool_true;
    11bc:	8c 86       	std	Y+12, r8	; 0x0c
		handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKeyDown;
    11be:	38 82       	st	Y, r3
		handle->stateConfVectorPosition = 0;
    11c0:	1b 82       	std	Y+3, r1	; 0x03
    11c2:	1a 82       	std	Y+2, r1	; 0x02
    11c4:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__stack+0x117b>
	}  else {
		if (handle->ifaceKEYPAD.key == 0) { 
			/* Default enter sequence for state CheckKey */
			/* Entry action for state 'CheckKey'. */
			handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    11c8:	0e 94 08 02 	call	0x410	; 0x410 <sMOIfaceKEYPAD_checkpress>
    11cc:	dc 01       	movw	r26, r24
    11ce:	cb 01       	movw	r24, r22
    11d0:	8c 83       	std	Y+4, r24	; 0x04
    11d2:	9d 83       	std	Y+5, r25	; 0x05
    11d4:	ae 83       	std	Y+6, r26	; 0x06
    11d6:	bf 83       	std	Y+7, r27	; 0x07
			handle->ifaceKEYPAD.key_down = bool_false;
    11d8:	1c 86       	std	Y+12, r1	; 0x0c
			handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKey;
    11da:	28 82       	st	Y, r2
			handle->stateConfVectorPosition = 0;
    11dc:	1b 82       	std	Y+3, r1	; 0x03
    11de:	1a 82       	std	Y+2, r1	; 0x02
    11e0:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__stack+0x117b>
}

/* The reactions of state CheckKeyDown. */
static void sMO_react_main_region_on_r1_Running_keypad_CheckKeyDown(SMO* handle) {
	/* The reactions of state CheckKeyDown. */
	if (handle->ifaceKEYPAD.key == 0) { 
    11e4:	8c 81       	ldd	r24, Y+4	; 0x04
    11e6:	9d 81       	ldd	r25, Y+5	; 0x05
    11e8:	ae 81       	ldd	r26, Y+6	; 0x06
    11ea:	bf 81       	ldd	r27, Y+7	; 0x07
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	a1 05       	cpc	r26, r1
    11f0:	b1 05       	cpc	r27, r1
    11f2:	99 f4       	brne	.+38     	; 0x121a <__stack+0x11b>
		/* Default exit sequence for state CheckKeyDown */
		handle->stateConfVector[0] = SMO_last_state;
    11f4:	26 e1       	ldi	r18, 0x16	; 22
    11f6:	28 83       	st	Y, r18
		handle->stateConfVectorPosition = 0;
    11f8:	1b 82       	std	Y+3, r1	; 0x03
    11fa:	1a 82       	std	Y+2, r1	; 0x02
		handle->ifaceKEYPAD.key_pressed_raised = bool_true;
    11fc:	8d 86       	std	Y+13, r8	; 0x0d
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    11fe:	0e 94 08 02 	call	0x410	; 0x410 <sMOIfaceKEYPAD_checkpress>
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	8c 83       	std	Y+4, r24	; 0x04
    1208:	9d 83       	std	Y+5, r25	; 0x05
    120a:	ae 83       	std	Y+6, r26	; 0x06
    120c:	bf 83       	std	Y+7, r27	; 0x07
		handle->ifaceKEYPAD.key_down = bool_false;
    120e:	1c 86       	std	Y+12, r1	; 0x0c
		handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKey;
    1210:	28 82       	st	Y, r2
		handle->stateConfVectorPosition = 0;
    1212:	1b 82       	std	Y+3, r1	; 0x03
    1214:	1a 82       	std	Y+2, r1	; 0x02
    1216:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__stack+0x117b>
	}  else {
		if (handle->ifaceKEYPAD.key != 0) { 
			/* Default enter sequence for state CheckKeyDown */
			/* Entry action for state 'CheckKeyDown'. */
			handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    121a:	0e 94 08 02 	call	0x410	; 0x410 <sMOIfaceKEYPAD_checkpress>
    121e:	dc 01       	movw	r26, r24
    1220:	cb 01       	movw	r24, r22
    1222:	8c 83       	std	Y+4, r24	; 0x04
    1224:	9d 83       	std	Y+5, r25	; 0x05
    1226:	ae 83       	std	Y+6, r26	; 0x06
    1228:	bf 83       	std	Y+7, r27	; 0x07
			handle->ifaceKEYPAD.key_down = bool_true;
    122a:	8c 86       	std	Y+12, r8	; 0x0c
			handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKeyDown;
    122c:	38 82       	st	Y, r3
			handle->stateConfVectorPosition = 0;
    122e:	1b 82       	std	Y+3, r1	; 0x03
    1230:	1a 82       	std	Y+2, r1	; 0x02
    1232:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__stack+0x117b>
static void sMO_react_main_region_on_r1_Running_running_main_ShowMenu(SMO* handle) {
	/* The reactions of state ShowMenu. */
	if (bool_true) { 
		/* Default exit sequence for state ShowMenu */
		handle->stateConfVector[1] = SMO_last_state;
		handle->stateConfVectorPosition = 1;
    1236:	1b 83       	std	Y+3, r17	; 0x03
    1238:	0a 83       	std	Y+2, r16	; 0x02
		/* Default enter sequence for state CheckKeyPress */
		/* Entry action for state 'CheckKeyPress'. */
		handle->ifaceKEYPAD.lastkey = 0;
    123a:	18 86       	std	Y+8, r1	; 0x08
    123c:	19 86       	std	Y+9, r1	; 0x09
    123e:	1a 86       	std	Y+10, r1	; 0x0a
    1240:	1b 86       	std	Y+11, r1	; 0x0b
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_CheckKeyPress;
    1242:	b9 82       	std	Y+1, r11	; 0x01
    1244:	f2 c7       	rjmp	.+4068   	; 0x222a <__stack+0x112b>
}

/* The reactions of state ShowCode. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode(SMO* handle) {
	/* The reactions of state ShowCode. */
	if (handle->iface.menuId == 0) { 
    1246:	8e a5       	lds	r24, 0x6e
    1248:	9f a5       	lds	r25, 0x6f
    124a:	a8 a9       	sts	0x48, r26
    124c:	b9 a9       	sts	0x49, r27
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	a1 05       	cpc	r26, r1
    1252:	b1 05       	cpc	r27, r1
    1254:	09 f0       	breq	.+2      	; 0x1258 <__stack+0x159>
    1256:	69 c0       	rjmp	.+210    	; 0x132a <__stack+0x22b>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	8a 30       	cpi	r24, 0x0A	; 10
    125c:	41 f1       	breq	.+80     	; 0x12ae <__stack+0x1af>
    125e:	8b 30       	cpi	r24, 0x0B	; 11
    1260:	40 f4       	brcc	.+16     	; 0x1272 <__stack+0x173>
    1262:	88 30       	cpi	r24, 0x08	; 8
    1264:	b1 f0       	breq	.+44     	; 0x1292 <__stack+0x193>
    1266:	89 30       	cpi	r24, 0x09	; 9
    1268:	d8 f4       	brcc	.+54     	; 0x12a0 <__stack+0x1a1>
    126a:	87 30       	cpi	r24, 0x07	; 7
    126c:	09 f0       	breq	.+2      	; 0x1270 <__stack+0x171>
    126e:	41 c0       	rjmp	.+130    	; 0x12f2 <__stack+0x1f3>
    1270:	09 c0       	rjmp	.+18     	; 0x1284 <__stack+0x185>
    1272:	8c 30       	cpi	r24, 0x0C	; 12
    1274:	51 f1       	breq	.+84     	; 0x12ca <__stack+0x1cb>
    1276:	8c 30       	cpi	r24, 0x0C	; 12
    1278:	08 f1       	brcs	.+66     	; 0x12bc <__stack+0x1bd>
    127a:	8e 30       	cpi	r24, 0x0E	; 14
    127c:	69 f1       	breq	.+90     	; 0x12d8 <__stack+0x1d9>
    127e:	8f 30       	cpi	r24, 0x0F	; 15
    1280:	c1 f5       	brne	.+112    	; 0x12f2 <__stack+0x1f3>
    1282:	31 c0       	rjmp	.+98     	; 0x12e6 <__stack+0x1e7>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1284:	86 e1       	ldi	r24, 0x16	; 22
    1286:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	9b 83       	std	Y+3, r25	; 0x03
    128e:	8a 83       	std	Y+2, r24	; 0x02
    1290:	30 c0       	rjmp	.+96     	; 0x12f2 <__stack+0x1f3>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1292:	86 e1       	ldi	r24, 0x16	; 22
    1294:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	9b 83       	std	Y+3, r25	; 0x03
    129c:	8a 83       	std	Y+2, r24	; 0x02
    129e:	29 c0       	rjmp	.+82     	; 0x12f2 <__stack+0x1f3>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    12a0:	86 e1       	ldi	r24, 0x16	; 22
    12a2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	9b 83       	std	Y+3, r25	; 0x03
    12aa:	8a 83       	std	Y+2, r24	; 0x02
    12ac:	22 c0       	rjmp	.+68     	; 0x12f2 <__stack+0x1f3>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    12ae:	86 e1       	ldi	r24, 0x16	; 22
    12b0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	9b 83       	std	Y+3, r25	; 0x03
    12b8:	8a 83       	std	Y+2, r24	; 0x02
    12ba:	1b c0       	rjmp	.+54     	; 0x12f2 <__stack+0x1f3>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    12bc:	86 e1       	ldi	r24, 0x16	; 22
    12be:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	9b 83       	std	Y+3, r25	; 0x03
    12c6:	8a 83       	std	Y+2, r24	; 0x02
    12c8:	14 c0       	rjmp	.+40     	; 0x12f2 <__stack+0x1f3>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    12ca:	86 e1       	ldi	r24, 0x16	; 22
    12cc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	9b 83       	std	Y+3, r25	; 0x03
    12d4:	8a 83       	std	Y+2, r24	; 0x02
    12d6:	0d c0       	rjmp	.+26     	; 0x12f2 <__stack+0x1f3>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    12d8:	86 e1       	ldi	r24, 0x16	; 22
    12da:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	9b 83       	std	Y+3, r25	; 0x03
    12e2:	8a 83       	std	Y+2, r24	; 0x02
    12e4:	06 c0       	rjmp	.+12     	; 0x12f2 <__stack+0x1f3>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    12e6:	86 e1       	ldi	r24, 0x16	; 22
    12e8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	9b 83       	std	Y+3, r25	; 0x03
    12f0:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    12f2:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    12f6:	88 e0       	ldi	r24, 0x08	; 8
    12f8:	92 e0       	ldi	r25, 0x02	; 2
    12fa:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    12fe:	86 e1       	ldi	r24, 0x16	; 22
    1300:	92 e0       	ldi	r25, 0x02	; 2
    1302:	40 e0       	ldi	r20, 0x00	; 0
    1304:	50 e0       	ldi	r21, 0x00	; 0
    1306:	ba 01       	movw	r22, r20
    1308:	01 e0       	ldi	r16, 0x01	; 1
    130a:	10 e0       	ldi	r17, 0x00	; 0
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1314:	1e a6       	lds	r17, 0xbe
    1316:	1f a6       	lds	r17, 0xbf
    1318:	18 aa       	sts	0x98, r17
    131a:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    131c:	85 e0       	ldi	r24, 0x05	; 5
    131e:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	9b 83       	std	Y+3, r25	; 0x03
    1326:	8a 83       	std	Y+2, r24	; 0x02
    1328:	a2 c7       	rjmp	.+3908   	; 0x226e <__stack+0x116f>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state ShowCode */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    132a:	1b 83       	std	Y+3, r17	; 0x03
    132c:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress1 */
			/* Entry action for state 'CheckKeyPress1'. */
			handle->ifaceKEYPAD.lastkey = 0;
    132e:	18 86       	std	Y+8, r1	; 0x08
    1330:	19 86       	std	Y+9, r1	; 0x09
    1332:	1a 86       	std	Y+10, r1	; 0x0a
    1334:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1;
    1336:	99 82       	std	Y+1, r9	; 0x01
    1338:	78 c7       	rjmp	.+3824   	; 0x222a <__stack+0x112b>
}

/* The reactions of state EnterCode. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode(SMO* handle) {
	/* The reactions of state EnterCode. */
	if (handle->iface.menuId == 0) { 
    133a:	8e a5       	lds	r24, 0x6e
    133c:	9f a5       	lds	r25, 0x6f
    133e:	a8 a9       	sts	0x48, r26
    1340:	b9 a9       	sts	0x49, r27
    1342:	00 97       	sbiw	r24, 0x00	; 0
    1344:	a1 05       	cpc	r26, r1
    1346:	b1 05       	cpc	r27, r1
    1348:	09 f0       	breq	.+2      	; 0x134c <__stack+0x24d>
    134a:	69 c0       	rjmp	.+210    	; 0x141e <__stack+0x31f>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	8a 30       	cpi	r24, 0x0A	; 10
    1350:	41 f1       	breq	.+80     	; 0x13a2 <__stack+0x2a3>
    1352:	8b 30       	cpi	r24, 0x0B	; 11
    1354:	40 f4       	brcc	.+16     	; 0x1366 <__stack+0x267>
    1356:	88 30       	cpi	r24, 0x08	; 8
    1358:	b1 f0       	breq	.+44     	; 0x1386 <__stack+0x287>
    135a:	89 30       	cpi	r24, 0x09	; 9
    135c:	d8 f4       	brcc	.+54     	; 0x1394 <__stack+0x295>
    135e:	87 30       	cpi	r24, 0x07	; 7
    1360:	09 f0       	breq	.+2      	; 0x1364 <__stack+0x265>
    1362:	41 c0       	rjmp	.+130    	; 0x13e6 <__stack+0x2e7>
    1364:	09 c0       	rjmp	.+18     	; 0x1378 <__stack+0x279>
    1366:	8c 30       	cpi	r24, 0x0C	; 12
    1368:	51 f1       	breq	.+84     	; 0x13be <__stack+0x2bf>
    136a:	8c 30       	cpi	r24, 0x0C	; 12
    136c:	08 f1       	brcs	.+66     	; 0x13b0 <__stack+0x2b1>
    136e:	8e 30       	cpi	r24, 0x0E	; 14
    1370:	69 f1       	breq	.+90     	; 0x13cc <__stack+0x2cd>
    1372:	8f 30       	cpi	r24, 0x0F	; 15
    1374:	c1 f5       	brne	.+112    	; 0x13e6 <__stack+0x2e7>
    1376:	31 c0       	rjmp	.+98     	; 0x13da <__stack+0x2db>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1378:	86 e1       	ldi	r24, 0x16	; 22
    137a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	9b 83       	std	Y+3, r25	; 0x03
    1382:	8a 83       	std	Y+2, r24	; 0x02
    1384:	30 c0       	rjmp	.+96     	; 0x13e6 <__stack+0x2e7>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1386:	86 e1       	ldi	r24, 0x16	; 22
    1388:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	9b 83       	std	Y+3, r25	; 0x03
    1390:	8a 83       	std	Y+2, r24	; 0x02
    1392:	29 c0       	rjmp	.+82     	; 0x13e6 <__stack+0x2e7>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1394:	86 e1       	ldi	r24, 0x16	; 22
    1396:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	9b 83       	std	Y+3, r25	; 0x03
    139e:	8a 83       	std	Y+2, r24	; 0x02
    13a0:	22 c0       	rjmp	.+68     	; 0x13e6 <__stack+0x2e7>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    13a2:	86 e1       	ldi	r24, 0x16	; 22
    13a4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	9b 83       	std	Y+3, r25	; 0x03
    13ac:	8a 83       	std	Y+2, r24	; 0x02
    13ae:	1b c0       	rjmp	.+54     	; 0x13e6 <__stack+0x2e7>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    13b0:	86 e1       	ldi	r24, 0x16	; 22
    13b2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	9b 83       	std	Y+3, r25	; 0x03
    13ba:	8a 83       	std	Y+2, r24	; 0x02
    13bc:	14 c0       	rjmp	.+40     	; 0x13e6 <__stack+0x2e7>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    13be:	86 e1       	ldi	r24, 0x16	; 22
    13c0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	9b 83       	std	Y+3, r25	; 0x03
    13c8:	8a 83       	std	Y+2, r24	; 0x02
    13ca:	0d c0       	rjmp	.+26     	; 0x13e6 <__stack+0x2e7>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    13cc:	86 e1       	ldi	r24, 0x16	; 22
    13ce:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	9b 83       	std	Y+3, r25	; 0x03
    13d6:	8a 83       	std	Y+2, r24	; 0x02
    13d8:	06 c0       	rjmp	.+12     	; 0x13e6 <__stack+0x2e7>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    13da:	86 e1       	ldi	r24, 0x16	; 22
    13dc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	9b 83       	std	Y+3, r25	; 0x03
    13e4:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    13e6:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    13ea:	88 e0       	ldi	r24, 0x08	; 8
    13ec:	92 e0       	ldi	r25, 0x02	; 2
    13ee:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    13f2:	86 e1       	ldi	r24, 0x16	; 22
    13f4:	92 e0       	ldi	r25, 0x02	; 2
    13f6:	40 e0       	ldi	r20, 0x00	; 0
    13f8:	50 e0       	ldi	r21, 0x00	; 0
    13fa:	ba 01       	movw	r22, r20
    13fc:	01 e0       	ldi	r16, 0x01	; 1
    13fe:	10 e0       	ldi	r17, 0x00	; 0
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1408:	1e a6       	lds	r17, 0xbe
    140a:	1f a6       	lds	r17, 0xbf
    140c:	18 aa       	sts	0x98, r17
    140e:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1410:	85 e0       	ldi	r24, 0x05	; 5
    1412:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	9b 83       	std	Y+3, r25	; 0x03
    141a:	8a 83       	std	Y+2, r24	; 0x02
    141c:	28 c7       	rjmp	.+3664   	; 0x226e <__stack+0x116f>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state EnterCode */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    141e:	1b 83       	std	Y+3, r17	; 0x03
    1420:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress1 */
			/* Entry action for state 'CheckKeyPress1'. */
			handle->ifaceKEYPAD.lastkey = 0;
    1422:	18 86       	std	Y+8, r1	; 0x08
    1424:	19 86       	std	Y+9, r1	; 0x09
    1426:	1a 86       	std	Y+10, r1	; 0x0a
    1428:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1;
    142a:	99 82       	std	Y+1, r9	; 0x01
    142c:	fe c6       	rjmp	.+3580   	; 0x222a <__stack+0x112b>
}

/* The reactions of state CheckKeyPress1. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1(SMO* handle) {
	/* The reactions of state CheckKeyPress1. */
	if (handle->iface.menuId == 0) { 
    142e:	8e a5       	lds	r24, 0x6e
    1430:	9f a5       	lds	r25, 0x6f
    1432:	a8 a9       	sts	0x48, r26
    1434:	b9 a9       	sts	0x49, r27
    1436:	00 97       	sbiw	r24, 0x00	; 0
    1438:	a1 05       	cpc	r26, r1
    143a:	b1 05       	cpc	r27, r1
    143c:	09 f0       	breq	.+2      	; 0x1440 <__stack+0x341>
    143e:	69 c0       	rjmp	.+210    	; 0x1512 <__stack+0x413>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	8a 30       	cpi	r24, 0x0A	; 10
    1444:	41 f1       	breq	.+80     	; 0x1496 <__stack+0x397>
    1446:	8b 30       	cpi	r24, 0x0B	; 11
    1448:	40 f4       	brcc	.+16     	; 0x145a <__stack+0x35b>
    144a:	88 30       	cpi	r24, 0x08	; 8
    144c:	b1 f0       	breq	.+44     	; 0x147a <__stack+0x37b>
    144e:	89 30       	cpi	r24, 0x09	; 9
    1450:	d8 f4       	brcc	.+54     	; 0x1488 <__stack+0x389>
    1452:	87 30       	cpi	r24, 0x07	; 7
    1454:	09 f0       	breq	.+2      	; 0x1458 <__stack+0x359>
    1456:	41 c0       	rjmp	.+130    	; 0x14da <__stack+0x3db>
    1458:	09 c0       	rjmp	.+18     	; 0x146c <__stack+0x36d>
    145a:	8c 30       	cpi	r24, 0x0C	; 12
    145c:	51 f1       	breq	.+84     	; 0x14b2 <__stack+0x3b3>
    145e:	8c 30       	cpi	r24, 0x0C	; 12
    1460:	08 f1       	brcs	.+66     	; 0x14a4 <__stack+0x3a5>
    1462:	8e 30       	cpi	r24, 0x0E	; 14
    1464:	69 f1       	breq	.+90     	; 0x14c0 <__stack+0x3c1>
    1466:	8f 30       	cpi	r24, 0x0F	; 15
    1468:	c1 f5       	brne	.+112    	; 0x14da <__stack+0x3db>
    146a:	31 c0       	rjmp	.+98     	; 0x14ce <__stack+0x3cf>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    146c:	86 e1       	ldi	r24, 0x16	; 22
    146e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	9b 83       	std	Y+3, r25	; 0x03
    1476:	8a 83       	std	Y+2, r24	; 0x02
    1478:	30 c0       	rjmp	.+96     	; 0x14da <__stack+0x3db>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    147a:	86 e1       	ldi	r24, 0x16	; 22
    147c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	9b 83       	std	Y+3, r25	; 0x03
    1484:	8a 83       	std	Y+2, r24	; 0x02
    1486:	29 c0       	rjmp	.+82     	; 0x14da <__stack+0x3db>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1488:	86 e1       	ldi	r24, 0x16	; 22
    148a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	9b 83       	std	Y+3, r25	; 0x03
    1492:	8a 83       	std	Y+2, r24	; 0x02
    1494:	22 c0       	rjmp	.+68     	; 0x14da <__stack+0x3db>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1496:	86 e1       	ldi	r24, 0x16	; 22
    1498:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	9b 83       	std	Y+3, r25	; 0x03
    14a0:	8a 83       	std	Y+2, r24	; 0x02
    14a2:	1b c0       	rjmp	.+54     	; 0x14da <__stack+0x3db>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    14a4:	86 e1       	ldi	r24, 0x16	; 22
    14a6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	9b 83       	std	Y+3, r25	; 0x03
    14ae:	8a 83       	std	Y+2, r24	; 0x02
    14b0:	14 c0       	rjmp	.+40     	; 0x14da <__stack+0x3db>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    14b2:	86 e1       	ldi	r24, 0x16	; 22
    14b4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	9b 83       	std	Y+3, r25	; 0x03
    14bc:	8a 83       	std	Y+2, r24	; 0x02
    14be:	0d c0       	rjmp	.+26     	; 0x14da <__stack+0x3db>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    14c0:	86 e1       	ldi	r24, 0x16	; 22
    14c2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	9b 83       	std	Y+3, r25	; 0x03
    14ca:	8a 83       	std	Y+2, r24	; 0x02
    14cc:	06 c0       	rjmp	.+12     	; 0x14da <__stack+0x3db>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    14ce:	86 e1       	ldi	r24, 0x16	; 22
    14d0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	9b 83       	std	Y+3, r25	; 0x03
    14d8:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    14da:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    14de:	88 e0       	ldi	r24, 0x08	; 8
    14e0:	92 e0       	ldi	r25, 0x02	; 2
    14e2:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    14e6:	86 e1       	ldi	r24, 0x16	; 22
    14e8:	92 e0       	ldi	r25, 0x02	; 2
    14ea:	40 e0       	ldi	r20, 0x00	; 0
    14ec:	50 e0       	ldi	r21, 0x00	; 0
    14ee:	ba 01       	movw	r22, r20
    14f0:	01 e0       	ldi	r16, 0x01	; 1
    14f2:	10 e0       	ldi	r17, 0x00	; 0
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    14fc:	1e a6       	lds	r17, 0xbe
    14fe:	1f a6       	lds	r17, 0xbf
    1500:	18 aa       	sts	0x98, r17
    1502:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1504:	85 e0       	ldi	r24, 0x05	; 5
    1506:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	9b 83       	std	Y+3, r25	; 0x03
    150e:	8a 83       	std	Y+2, r24	; 0x02
    1510:	ae c6       	rjmp	.+3420   	; 0x226e <__stack+0x116f>
	}  else {
		if (handle->ifaceDISH.pos < 3 && handle->ifaceKEYPAD.lastkey <= 9 && handle->ifaceKEYPAD.lastkey >= 1 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1512:	89 a5       	lds	r24, 0x69
    1514:	9a a5       	lds	r25, 0x6a
    1516:	ab a5       	lds	r26, 0x6b
    1518:	bc a5       	lds	r27, 0x6c
    151a:	83 30       	cpi	r24, 0x03	; 3
    151c:	91 05       	cpc	r25, r1
    151e:	a1 05       	cpc	r26, r1
    1520:	b1 05       	cpc	r27, r1
    1522:	0c f0       	brlt	.+2      	; 0x1526 <__stack+0x427>
    1524:	68 c0       	rjmp	.+208    	; 0x15f6 <__stack+0x4f7>
    1526:	c8 84       	ldd	r12, Y+8	; 0x08
    1528:	d9 84       	ldd	r13, Y+9	; 0x09
    152a:	ea 84       	ldd	r14, Y+10	; 0x0a
    152c:	fb 84       	ldd	r15, Y+11	; 0x0b
    152e:	ea e0       	ldi	r30, 0x0A	; 10
    1530:	ce 16       	cp	r12, r30
    1532:	d1 04       	cpc	r13, r1
    1534:	e1 04       	cpc	r14, r1
    1536:	f1 04       	cpc	r15, r1
    1538:	0c f0       	brlt	.+2      	; 0x153c <__stack+0x43d>
    153a:	4b c0       	rjmp	.+150    	; 0x15d2 <__stack+0x4d3>
    153c:	1c 14       	cp	r1, r12
    153e:	1d 04       	cpc	r1, r13
    1540:	1e 04       	cpc	r1, r14
    1542:	1f 04       	cpc	r1, r15
    1544:	0c f0       	brlt	.+2      	; 0x1548 <__stack+0x449>
    1546:	45 c0       	rjmp	.+138    	; 0x15d2 <__stack+0x4d3>
    1548:	2d 85       	ldd	r18, Y+13	; 0x0d
    154a:	22 23       	and	r18, r18
    154c:	09 f4       	brne	.+2      	; 0x1550 <__stack+0x451>
    154e:	41 c0       	rjmp	.+130    	; 0x15d2 <__stack+0x4d3>
			/* Default exit sequence for state CheckKeyPress1 */
			handle->stateConfVector[1] = SMO_last_state;
    1550:	26 e1       	ldi	r18, 0x16	; 22
    1552:	29 83       	std	Y+1, r18	; 0x01
			handle->stateConfVectorPosition = 1;
    1554:	88 24       	eor	r8, r8
    1556:	99 24       	eor	r9, r9
    1558:	83 94       	inc	r8
    155a:	9b 82       	std	Y+3, r9	; 0x03
    155c:	8a 82       	std	Y+2, r8	; 0x02
			/* Default enter sequence for state EnterCode */
			/* Entry action for state 'EnterCode'. */
			sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    155e:	9c 01       	movw	r18, r24
    1560:	ad 01       	movw	r20, r26
    1562:	22 0f       	add	r18, r18
    1564:	33 1f       	adc	r19, r19
    1566:	44 1f       	adc	r20, r20
    1568:	55 1f       	adc	r21, r21
    156a:	c7 01       	movw	r24, r14
    156c:	b6 01       	movw	r22, r12
    156e:	ee 24       	eor	r14, r14
    1570:	ff 24       	eor	r15, r15
    1572:	87 01       	movw	r16, r14
    1574:	e3 94       	inc	r14
    1576:	aa 24       	eor	r10, r10
    1578:	bb 24       	eor	r11, r11
    157a:	65 01       	movw	r12, r10
    157c:	a3 94       	inc	r10
    157e:	0e 94 24 02 	call	0x448	; 0x448 <sMOIfaceLCD_writeNumberXY>
			handle->ifaceDISH.pos += 1;
    1582:	89 a5       	lds	r24, 0x69
    1584:	9a a5       	lds	r25, 0x6a
    1586:	ab a5       	lds	r26, 0x6b
    1588:	bc a5       	lds	r27, 0x6c
    158a:	01 96       	adiw	r24, 0x01	; 1
    158c:	a1 1d       	adc	r26, r1
    158e:	b1 1d       	adc	r27, r1
    1590:	89 a7       	lds	r24, 0x79
    1592:	9a a7       	lds	r25, 0x7a
    1594:	ab a7       	lds	r26, 0x7b
    1596:	bc a7       	lds	r27, 0x7c
			handle->ifaceDISH.ID = handle->ifaceDISH.ID * 10 + handle->ifaceKEYPAD.lastkey;
    1598:	69 a1       	lds	r22, 0x49
    159a:	7a a1       	lds	r23, 0x4a
    159c:	8b a1       	lds	r24, 0x4b
    159e:	9c a1       	lds	r25, 0x4c
    15a0:	2a e0       	ldi	r18, 0x0A	; 10
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	40 e0       	ldi	r20, 0x00	; 0
    15a6:	50 e0       	ldi	r21, 0x00	; 0
    15a8:	0e 94 bb 13 	call	0x2776	; 0x2776 <__mulsi3>
    15ac:	ab 01       	movw	r20, r22
    15ae:	bc 01       	movw	r22, r24
    15b0:	88 85       	ldd	r24, Y+8	; 0x08
    15b2:	99 85       	ldd	r25, Y+9	; 0x09
    15b4:	aa 85       	ldd	r26, Y+10	; 0x0a
    15b6:	bb 85       	ldd	r27, Y+11	; 0x0b
    15b8:	84 0f       	add	r24, r20
    15ba:	95 1f       	adc	r25, r21
    15bc:	a6 1f       	adc	r26, r22
    15be:	b7 1f       	adc	r27, r23
    15c0:	89 a3       	lds	r24, 0x59
    15c2:	9a a3       	lds	r25, 0x5a
    15c4:	ab a3       	lds	r26, 0x5b
    15c6:	bc a3       	lds	r27, 0x5c
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode;
    15c8:	88 e0       	ldi	r24, 0x08	; 8
    15ca:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    15cc:	9b 82       	std	Y+3, r9	; 0x03
    15ce:	8a 82       	std	Y+2, r8	; 0x02
    15d0:	4e c6       	rjmp	.+3228   	; 0x226e <__stack+0x116f>
		}  else {
			if (handle->ifaceDISH.pos < 3 && handle->ifaceKEYPAD.lastkey == 10 && handle->ifaceKEYPAD.key_pressed_raised) { 
    15d2:	fa e0       	ldi	r31, 0x0A	; 10
    15d4:	cf 16       	cp	r12, r31
    15d6:	d1 04       	cpc	r13, r1
    15d8:	e1 04       	cpc	r14, r1
    15da:	f1 04       	cpc	r15, r1
    15dc:	61 f4       	brne	.+24     	; 0x15f6 <__stack+0x4f7>
    15de:	8d 85       	ldd	r24, Y+13	; 0x0d
    15e0:	88 23       	and	r24, r24
    15e2:	49 f0       	breq	.+18     	; 0x15f6 <__stack+0x4f7>
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
				handle->stateConfVectorPosition = 1;
    15e4:	1b 83       	std	Y+3, r17	; 0x03
    15e6:	0a 83       	std	Y+2, r16	; 0x02
				/* Default enter sequence for state CheckCode0 */
				/* Entry action for state 'CheckCode0'. */
				handle->ifaceKEYPAD.lastkey = 0;
    15e8:	18 86       	std	Y+8, r1	; 0x08
    15ea:	19 86       	std	Y+9, r1	; 0x09
    15ec:	1a 86       	std	Y+10, r1	; 0x0a
    15ee:	1b 86       	std	Y+11, r1	; 0x0b
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0;
    15f0:	2a e0       	ldi	r18, 0x0A	; 10
    15f2:	29 83       	std	Y+1, r18	; 0x01
    15f4:	1a c6       	rjmp	.+3124   	; 0x222a <__stack+0x112b>
				handle->stateConfVectorPosition = 1;
			}  else {
				if (handle->ifaceKEYPAD.lastkey == 12 && handle->ifaceKEYPAD.key_pressed_raised) { 
    15f6:	88 85       	ldd	r24, Y+8	; 0x08
    15f8:	99 85       	ldd	r25, Y+9	; 0x09
    15fa:	aa 85       	ldd	r26, Y+10	; 0x0a
    15fc:	bb 85       	ldd	r27, Y+11	; 0x0b
    15fe:	8c 30       	cpi	r24, 0x0C	; 12
    1600:	91 05       	cpc	r25, r1
    1602:	a1 05       	cpc	r26, r1
    1604:	b1 05       	cpc	r27, r1
    1606:	41 f5       	brne	.+80     	; 0x1658 <__stack+0x559>
    1608:	2d 85       	ldd	r18, Y+13	; 0x0d
    160a:	22 23       	and	r18, r18
    160c:	29 f1       	breq	.+74     	; 0x1658 <__stack+0x559>
					/* Default exit sequence for state CheckKeyPress1 */
					handle->stateConfVector[1] = SMO_last_state;
    160e:	86 e1       	ldi	r24, 0x16	; 22
    1610:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    1612:	ee 24       	eor	r14, r14
    1614:	ff 24       	eor	r15, r15
    1616:	e3 94       	inc	r14
    1618:	fb 82       	std	Y+3, r15	; 0x03
    161a:	ea 82       	std	Y+2, r14	; 0x02
					/* Default enter sequence for state ShowCode */
					/* Entry action for state 'ShowCode'. */
					sMOIfaceLCD_clear();
    161c:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
					sMOIfaceLCD_writeString("Nhap ma mon an:");
    1620:	82 e2       	ldi	r24, 0x22	; 34
    1622:	92 e0       	ldi	r25, 0x02	; 2
    1624:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
					sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    1628:	82 e3       	ldi	r24, 0x32	; 50
    162a:	92 e0       	ldi	r25, 0x02	; 2
    162c:	40 e0       	ldi	r20, 0x00	; 0
    162e:	50 e0       	ldi	r21, 0x00	; 0
    1630:	ba 01       	movw	r22, r20
    1632:	01 e0       	ldi	r16, 0x01	; 1
    1634:	10 e0       	ldi	r17, 0x00	; 0
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
					handle->ifaceDISH.pos = 0;
    163e:	19 a6       	lds	r17, 0xb9
    1640:	1a a6       	lds	r17, 0xba
    1642:	1b a6       	lds	r17, 0xbb
    1644:	1c a6       	lds	r17, 0xbc
					handle->ifaceDISH.ID = 0;
    1646:	19 a2       	lds	r17, 0x99
    1648:	1a a2       	lds	r17, 0x9a
    164a:	1b a2       	lds	r17, 0x9b
    164c:	1c a2       	lds	r17, 0x9c
					handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    164e:	87 e0       	ldi	r24, 0x07	; 7
    1650:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    1652:	fb 82       	std	Y+3, r15	; 0x03
    1654:	ea 82       	std	Y+2, r14	; 0x02
    1656:	0b c6       	rjmp	.+3094   	; 0x226e <__stack+0x116f>
				}  else {
					if (handle->ifaceKEYPAD.lastkey == 11 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1658:	8b 30       	cpi	r24, 0x0B	; 11
    165a:	91 05       	cpc	r25, r1
    165c:	a1 05       	cpc	r26, r1
    165e:	b1 05       	cpc	r27, r1
    1660:	41 f5       	brne	.+80     	; 0x16b2 <__stack+0x5b3>
    1662:	2d 85       	ldd	r18, Y+13	; 0x0d
    1664:	22 23       	and	r18, r18
    1666:	29 f1       	breq	.+74     	; 0x16b2 <__stack+0x5b3>
						/* Default exit sequence for state CheckKeyPress1 */
						handle->stateConfVector[1] = SMO_last_state;
    1668:	86 e1       	ldi	r24, 0x16	; 22
    166a:	89 83       	std	Y+1, r24	; 0x01
						handle->stateConfVectorPosition = 1;
    166c:	ee 24       	eor	r14, r14
    166e:	ff 24       	eor	r15, r15
    1670:	e3 94       	inc	r14
    1672:	fb 82       	std	Y+3, r15	; 0x03
    1674:	ea 82       	std	Y+2, r14	; 0x02
						/* Default enter sequence for state ShowAmount */
						/* Entry action for state 'ShowAmount'. */
						sMOIfaceLCD_clear();
    1676:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
						sMOIfaceLCD_writeString("Nhap so luong:");
    167a:	88 e3       	ldi	r24, 0x38	; 56
    167c:	92 e0       	ldi	r25, 0x02	; 2
    167e:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
						sMOIfaceLCD_writeStringXY("_ _", 0, 1);
    1682:	87 e4       	ldi	r24, 0x47	; 71
    1684:	92 e0       	ldi	r25, 0x02	; 2
    1686:	40 e0       	ldi	r20, 0x00	; 0
    1688:	50 e0       	ldi	r21, 0x00	; 0
    168a:	ba 01       	movw	r22, r20
    168c:	01 e0       	ldi	r16, 0x01	; 1
    168e:	10 e0       	ldi	r17, 0x00	; 0
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
						handle->ifaceDISH.pos = 0;
    1698:	19 a6       	lds	r17, 0xb9
    169a:	1a a6       	lds	r17, 0xba
    169c:	1b a6       	lds	r17, 0xbb
    169e:	1c a6       	lds	r17, 0xbc
						handle->ifaceDISH.amount = 0;
    16a0:	1d a2       	lds	r17, 0x9d
    16a2:	1e a2       	lds	r17, 0x9e
    16a4:	1f a2       	lds	r17, 0x9f
    16a6:	18 a6       	lds	r17, 0xb8
						handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount;
    16a8:	8b e0       	ldi	r24, 0x0B	; 11
    16aa:	89 83       	std	Y+1, r24	; 0x01
						handle->stateConfVectorPosition = 1;
    16ac:	fb 82       	std	Y+3, r15	; 0x03
    16ae:	ea 82       	std	Y+2, r14	; 0x02
    16b0:	de c5       	rjmp	.+3004   	; 0x226e <__stack+0x116f>
					}  else {
						if (handle->ifaceKEYPAD.lastkey == 16 && handle->ifaceKEYPAD.key_pressed_raised) { 
    16b2:	80 31       	cpi	r24, 0x10	; 16
    16b4:	91 05       	cpc	r25, r1
    16b6:	a1 05       	cpc	r26, r1
    16b8:	b1 05       	cpc	r27, r1
    16ba:	09 f0       	breq	.+2      	; 0x16be <__stack+0x5bf>
    16bc:	b6 c5       	rjmp	.+2924   	; 0x222a <__stack+0x112b>
    16be:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c0:	88 23       	and	r24, r24
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <__stack+0x5c7>
    16c4:	b2 c5       	rjmp	.+2916   	; 0x222a <__stack+0x112b>
							/* Default exit sequence for state CheckKeyPress1 */
							handle->stateConfVector[1] = SMO_last_state;
							handle->stateConfVectorPosition = 1;
    16c6:	1b 83       	std	Y+3, r17	; 0x03
    16c8:	0a 83       	std	Y+2, r16	; 0x02
							handle->iface.menuId = 0;
    16ca:	1e a6       	lds	r17, 0xbe
    16cc:	1f a6       	lds	r17, 0xbf
    16ce:	18 aa       	sts	0x98, r17
    16d0:	19 aa       	sts	0x99, r17
							/* Default enter sequence for state null */
							handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_;
    16d2:	8f e0       	ldi	r24, 0x0F	; 15
    16d4:	89 83       	std	Y+1, r24	; 0x01
    16d6:	a9 c5       	rjmp	.+2898   	; 0x222a <__stack+0x112b>
}

/* The reactions of state CheckCode0. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0(SMO* handle) {
	/* The reactions of state CheckCode0. */
	if (handle->iface.menuId == 0) { 
    16d8:	8e a5       	lds	r24, 0x6e
    16da:	9f a5       	lds	r25, 0x6f
    16dc:	a8 a9       	sts	0x48, r26
    16de:	b9 a9       	sts	0x49, r27
    16e0:	00 97       	sbiw	r24, 0x00	; 0
    16e2:	a1 05       	cpc	r26, r1
    16e4:	b1 05       	cpc	r27, r1
    16e6:	09 f0       	breq	.+2      	; 0x16ea <__stack+0x5eb>
    16e8:	69 c0       	rjmp	.+210    	; 0x17bc <__stack+0x6bd>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	8a 30       	cpi	r24, 0x0A	; 10
    16ee:	41 f1       	breq	.+80     	; 0x1740 <__stack+0x641>
    16f0:	8b 30       	cpi	r24, 0x0B	; 11
    16f2:	40 f4       	brcc	.+16     	; 0x1704 <__stack+0x605>
    16f4:	88 30       	cpi	r24, 0x08	; 8
    16f6:	b1 f0       	breq	.+44     	; 0x1724 <__stack+0x625>
    16f8:	89 30       	cpi	r24, 0x09	; 9
    16fa:	d8 f4       	brcc	.+54     	; 0x1732 <__stack+0x633>
    16fc:	87 30       	cpi	r24, 0x07	; 7
    16fe:	09 f0       	breq	.+2      	; 0x1702 <__stack+0x603>
    1700:	41 c0       	rjmp	.+130    	; 0x1784 <__stack+0x685>
    1702:	09 c0       	rjmp	.+18     	; 0x1716 <__stack+0x617>
    1704:	8c 30       	cpi	r24, 0x0C	; 12
    1706:	51 f1       	breq	.+84     	; 0x175c <__stack+0x65d>
    1708:	8c 30       	cpi	r24, 0x0C	; 12
    170a:	08 f1       	brcs	.+66     	; 0x174e <__stack+0x64f>
    170c:	8e 30       	cpi	r24, 0x0E	; 14
    170e:	69 f1       	breq	.+90     	; 0x176a <__stack+0x66b>
    1710:	8f 30       	cpi	r24, 0x0F	; 15
    1712:	c1 f5       	brne	.+112    	; 0x1784 <__stack+0x685>
    1714:	31 c0       	rjmp	.+98     	; 0x1778 <__stack+0x679>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1716:	86 e1       	ldi	r24, 0x16	; 22
    1718:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	9b 83       	std	Y+3, r25	; 0x03
    1720:	8a 83       	std	Y+2, r24	; 0x02
    1722:	30 c0       	rjmp	.+96     	; 0x1784 <__stack+0x685>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1724:	86 e1       	ldi	r24, 0x16	; 22
    1726:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	9b 83       	std	Y+3, r25	; 0x03
    172e:	8a 83       	std	Y+2, r24	; 0x02
    1730:	29 c0       	rjmp	.+82     	; 0x1784 <__stack+0x685>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1732:	86 e1       	ldi	r24, 0x16	; 22
    1734:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	9b 83       	std	Y+3, r25	; 0x03
    173c:	8a 83       	std	Y+2, r24	; 0x02
    173e:	22 c0       	rjmp	.+68     	; 0x1784 <__stack+0x685>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1740:	86 e1       	ldi	r24, 0x16	; 22
    1742:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	9b 83       	std	Y+3, r25	; 0x03
    174a:	8a 83       	std	Y+2, r24	; 0x02
    174c:	1b c0       	rjmp	.+54     	; 0x1784 <__stack+0x685>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    174e:	86 e1       	ldi	r24, 0x16	; 22
    1750:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	9b 83       	std	Y+3, r25	; 0x03
    1758:	8a 83       	std	Y+2, r24	; 0x02
    175a:	14 c0       	rjmp	.+40     	; 0x1784 <__stack+0x685>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    175c:	86 e1       	ldi	r24, 0x16	; 22
    175e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	9b 83       	std	Y+3, r25	; 0x03
    1766:	8a 83       	std	Y+2, r24	; 0x02
    1768:	0d c0       	rjmp	.+26     	; 0x1784 <__stack+0x685>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    176a:	86 e1       	ldi	r24, 0x16	; 22
    176c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	9b 83       	std	Y+3, r25	; 0x03
    1774:	8a 83       	std	Y+2, r24	; 0x02
    1776:	06 c0       	rjmp	.+12     	; 0x1784 <__stack+0x685>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1778:	86 e1       	ldi	r24, 0x16	; 22
    177a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	9b 83       	std	Y+3, r25	; 0x03
    1782:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1784:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1788:	88 e0       	ldi	r24, 0x08	; 8
    178a:	92 e0       	ldi	r25, 0x02	; 2
    178c:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    1790:	86 e1       	ldi	r24, 0x16	; 22
    1792:	92 e0       	ldi	r25, 0x02	; 2
    1794:	40 e0       	ldi	r20, 0x00	; 0
    1796:	50 e0       	ldi	r21, 0x00	; 0
    1798:	ba 01       	movw	r22, r20
    179a:	01 e0       	ldi	r16, 0x01	; 1
    179c:	10 e0       	ldi	r17, 0x00	; 0
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    17a6:	1e a6       	lds	r17, 0xbe
    17a8:	1f a6       	lds	r17, 0xbf
    17aa:	18 aa       	sts	0x98, r17
    17ac:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    17ae:	85 e0       	ldi	r24, 0x05	; 5
    17b0:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	9b 83       	std	Y+3, r25	; 0x03
    17b8:	8a 83       	std	Y+2, r24	; 0x02
    17ba:	59 c5       	rjmp	.+2738   	; 0x226e <__stack+0x116f>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state CheckCode0 */
			handle->stateConfVector[1] = SMO_last_state;
    17bc:	86 e1       	ldi	r24, 0x16	; 22
    17be:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    17c0:	88 24       	eor	r8, r8
    17c2:	99 24       	eor	r9, r9
    17c4:	83 94       	inc	r8
    17c6:	9b 82       	std	Y+3, r9	; 0x03
    17c8:	8a 82       	std	Y+2, r8	; 0x02
			/* Default enter sequence for state EnterCode */
			/* Entry action for state 'EnterCode'. */
			sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    17ca:	c8 84       	ldd	r12, Y+8	; 0x08
    17cc:	d9 84       	ldd	r13, Y+9	; 0x09
    17ce:	ea 84       	ldd	r14, Y+10	; 0x0a
    17d0:	fb 84       	ldd	r15, Y+11	; 0x0b
    17d2:	89 a5       	lds	r24, 0x69
    17d4:	9a a5       	lds	r25, 0x6a
    17d6:	ab a5       	lds	r26, 0x6b
    17d8:	bc a5       	lds	r27, 0x6c
    17da:	9c 01       	movw	r18, r24
    17dc:	ad 01       	movw	r20, r26
    17de:	22 0f       	add	r18, r18
    17e0:	33 1f       	adc	r19, r19
    17e2:	44 1f       	adc	r20, r20
    17e4:	55 1f       	adc	r21, r21
    17e6:	c7 01       	movw	r24, r14
    17e8:	b6 01       	movw	r22, r12
    17ea:	ee 24       	eor	r14, r14
    17ec:	ff 24       	eor	r15, r15
    17ee:	87 01       	movw	r16, r14
    17f0:	e3 94       	inc	r14
    17f2:	aa 24       	eor	r10, r10
    17f4:	bb 24       	eor	r11, r11
    17f6:	65 01       	movw	r12, r10
    17f8:	a3 94       	inc	r10
    17fa:	0e 94 24 02 	call	0x448	; 0x448 <sMOIfaceLCD_writeNumberXY>
			handle->ifaceDISH.pos += 1;
    17fe:	89 a5       	lds	r24, 0x69
    1800:	9a a5       	lds	r25, 0x6a
    1802:	ab a5       	lds	r26, 0x6b
    1804:	bc a5       	lds	r27, 0x6c
    1806:	01 96       	adiw	r24, 0x01	; 1
    1808:	a1 1d       	adc	r26, r1
    180a:	b1 1d       	adc	r27, r1
    180c:	89 a7       	lds	r24, 0x79
    180e:	9a a7       	lds	r25, 0x7a
    1810:	ab a7       	lds	r26, 0x7b
    1812:	bc a7       	lds	r27, 0x7c
			handle->ifaceDISH.ID = handle->ifaceDISH.ID * 10 + handle->ifaceKEYPAD.lastkey;
    1814:	69 a1       	lds	r22, 0x49
    1816:	7a a1       	lds	r23, 0x4a
    1818:	8b a1       	lds	r24, 0x4b
    181a:	9c a1       	lds	r25, 0x4c
    181c:	2a e0       	ldi	r18, 0x0A	; 10
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	40 e0       	ldi	r20, 0x00	; 0
    1822:	50 e0       	ldi	r21, 0x00	; 0
    1824:	0e 94 bb 13 	call	0x2776	; 0x2776 <__mulsi3>
    1828:	ab 01       	movw	r20, r22
    182a:	bc 01       	movw	r22, r24
    182c:	88 85       	ldd	r24, Y+8	; 0x08
    182e:	99 85       	ldd	r25, Y+9	; 0x09
    1830:	aa 85       	ldd	r26, Y+10	; 0x0a
    1832:	bb 85       	ldd	r27, Y+11	; 0x0b
    1834:	84 0f       	add	r24, r20
    1836:	95 1f       	adc	r25, r21
    1838:	a6 1f       	adc	r26, r22
    183a:	b7 1f       	adc	r27, r23
    183c:	89 a3       	lds	r24, 0x59
    183e:	9a a3       	lds	r25, 0x5a
    1840:	ab a3       	lds	r26, 0x5b
    1842:	bc a3       	lds	r27, 0x5c
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode;
    1844:	88 e0       	ldi	r24, 0x08	; 8
    1846:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1848:	9b 82       	std	Y+3, r9	; 0x03
    184a:	8a 82       	std	Y+2, r8	; 0x02
    184c:	10 c5       	rjmp	.+2592   	; 0x226e <__stack+0x116f>
}

/* The reactions of state ShowAmount. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount(SMO* handle) {
	/* The reactions of state ShowAmount. */
	if (handle->iface.menuId == 0) { 
    184e:	8e a5       	lds	r24, 0x6e
    1850:	9f a5       	lds	r25, 0x6f
    1852:	a8 a9       	sts	0x48, r26
    1854:	b9 a9       	sts	0x49, r27
    1856:	00 97       	sbiw	r24, 0x00	; 0
    1858:	a1 05       	cpc	r26, r1
    185a:	b1 05       	cpc	r27, r1
    185c:	09 f0       	breq	.+2      	; 0x1860 <__stack+0x761>
    185e:	69 c0       	rjmp	.+210    	; 0x1932 <__stack+0x833>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	8a 30       	cpi	r24, 0x0A	; 10
    1864:	41 f1       	breq	.+80     	; 0x18b6 <__stack+0x7b7>
    1866:	8b 30       	cpi	r24, 0x0B	; 11
    1868:	40 f4       	brcc	.+16     	; 0x187a <__stack+0x77b>
    186a:	88 30       	cpi	r24, 0x08	; 8
    186c:	b1 f0       	breq	.+44     	; 0x189a <__stack+0x79b>
    186e:	89 30       	cpi	r24, 0x09	; 9
    1870:	d8 f4       	brcc	.+54     	; 0x18a8 <__stack+0x7a9>
    1872:	87 30       	cpi	r24, 0x07	; 7
    1874:	09 f0       	breq	.+2      	; 0x1878 <__stack+0x779>
    1876:	41 c0       	rjmp	.+130    	; 0x18fa <__stack+0x7fb>
    1878:	09 c0       	rjmp	.+18     	; 0x188c <__stack+0x78d>
    187a:	8c 30       	cpi	r24, 0x0C	; 12
    187c:	51 f1       	breq	.+84     	; 0x18d2 <__stack+0x7d3>
    187e:	8c 30       	cpi	r24, 0x0C	; 12
    1880:	08 f1       	brcs	.+66     	; 0x18c4 <__stack+0x7c5>
    1882:	8e 30       	cpi	r24, 0x0E	; 14
    1884:	69 f1       	breq	.+90     	; 0x18e0 <__stack+0x7e1>
    1886:	8f 30       	cpi	r24, 0x0F	; 15
    1888:	c1 f5       	brne	.+112    	; 0x18fa <__stack+0x7fb>
    188a:	31 c0       	rjmp	.+98     	; 0x18ee <__stack+0x7ef>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    188c:	86 e1       	ldi	r24, 0x16	; 22
    188e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	9b 83       	std	Y+3, r25	; 0x03
    1896:	8a 83       	std	Y+2, r24	; 0x02
    1898:	30 c0       	rjmp	.+96     	; 0x18fa <__stack+0x7fb>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    189a:	86 e1       	ldi	r24, 0x16	; 22
    189c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	9b 83       	std	Y+3, r25	; 0x03
    18a4:	8a 83       	std	Y+2, r24	; 0x02
    18a6:	29 c0       	rjmp	.+82     	; 0x18fa <__stack+0x7fb>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    18a8:	86 e1       	ldi	r24, 0x16	; 22
    18aa:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	9b 83       	std	Y+3, r25	; 0x03
    18b2:	8a 83       	std	Y+2, r24	; 0x02
    18b4:	22 c0       	rjmp	.+68     	; 0x18fa <__stack+0x7fb>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    18b6:	86 e1       	ldi	r24, 0x16	; 22
    18b8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	9b 83       	std	Y+3, r25	; 0x03
    18c0:	8a 83       	std	Y+2, r24	; 0x02
    18c2:	1b c0       	rjmp	.+54     	; 0x18fa <__stack+0x7fb>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    18c4:	86 e1       	ldi	r24, 0x16	; 22
    18c6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	9b 83       	std	Y+3, r25	; 0x03
    18ce:	8a 83       	std	Y+2, r24	; 0x02
    18d0:	14 c0       	rjmp	.+40     	; 0x18fa <__stack+0x7fb>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    18d2:	86 e1       	ldi	r24, 0x16	; 22
    18d4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	9b 83       	std	Y+3, r25	; 0x03
    18dc:	8a 83       	std	Y+2, r24	; 0x02
    18de:	0d c0       	rjmp	.+26     	; 0x18fa <__stack+0x7fb>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    18e0:	86 e1       	ldi	r24, 0x16	; 22
    18e2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	9b 83       	std	Y+3, r25	; 0x03
    18ea:	8a 83       	std	Y+2, r24	; 0x02
    18ec:	06 c0       	rjmp	.+12     	; 0x18fa <__stack+0x7fb>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    18ee:	86 e1       	ldi	r24, 0x16	; 22
    18f0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	9b 83       	std	Y+3, r25	; 0x03
    18f8:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    18fa:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    18fe:	88 e0       	ldi	r24, 0x08	; 8
    1900:	92 e0       	ldi	r25, 0x02	; 2
    1902:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    1906:	86 e1       	ldi	r24, 0x16	; 22
    1908:	92 e0       	ldi	r25, 0x02	; 2
    190a:	40 e0       	ldi	r20, 0x00	; 0
    190c:	50 e0       	ldi	r21, 0x00	; 0
    190e:	ba 01       	movw	r22, r20
    1910:	01 e0       	ldi	r16, 0x01	; 1
    1912:	10 e0       	ldi	r17, 0x00	; 0
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    191c:	1e a6       	lds	r17, 0xbe
    191e:	1f a6       	lds	r17, 0xbf
    1920:	18 aa       	sts	0x98, r17
    1922:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1924:	85 e0       	ldi	r24, 0x05	; 5
    1926:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	9b 83       	std	Y+3, r25	; 0x03
    192e:	8a 83       	std	Y+2, r24	; 0x02
    1930:	9e c4       	rjmp	.+2364   	; 0x226e <__stack+0x116f>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state ShowAmount */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    1932:	1b 83       	std	Y+3, r17	; 0x03
    1934:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress2 */
			/* Entry action for state 'CheckKeyPress2'. */
			handle->ifaceKEYPAD.lastkey = 0;
    1936:	18 86       	std	Y+8, r1	; 0x08
    1938:	19 86       	std	Y+9, r1	; 0x09
    193a:	1a 86       	std	Y+10, r1	; 0x0a
    193c:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2;
    193e:	a9 82       	std	Y+1, r10	; 0x01
    1940:	74 c4       	rjmp	.+2280   	; 0x222a <__stack+0x112b>
}

/* The reactions of state CheckKeyPress2. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2(SMO* handle) {
	/* The reactions of state CheckKeyPress2. */
	if (handle->iface.menuId == 0) { 
    1942:	8e a5       	lds	r24, 0x6e
    1944:	9f a5       	lds	r25, 0x6f
    1946:	a8 a9       	sts	0x48, r26
    1948:	b9 a9       	sts	0x49, r27
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	a1 05       	cpc	r26, r1
    194e:	b1 05       	cpc	r27, r1
    1950:	09 f0       	breq	.+2      	; 0x1954 <__stack+0x855>
    1952:	69 c0       	rjmp	.+210    	; 0x1a26 <__stack+0x927>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	8a 30       	cpi	r24, 0x0A	; 10
    1958:	41 f1       	breq	.+80     	; 0x19aa <__stack+0x8ab>
    195a:	8b 30       	cpi	r24, 0x0B	; 11
    195c:	40 f4       	brcc	.+16     	; 0x196e <__stack+0x86f>
    195e:	88 30       	cpi	r24, 0x08	; 8
    1960:	b1 f0       	breq	.+44     	; 0x198e <__stack+0x88f>
    1962:	89 30       	cpi	r24, 0x09	; 9
    1964:	d8 f4       	brcc	.+54     	; 0x199c <__stack+0x89d>
    1966:	87 30       	cpi	r24, 0x07	; 7
    1968:	09 f0       	breq	.+2      	; 0x196c <__stack+0x86d>
    196a:	41 c0       	rjmp	.+130    	; 0x19ee <__stack+0x8ef>
    196c:	09 c0       	rjmp	.+18     	; 0x1980 <__stack+0x881>
    196e:	8c 30       	cpi	r24, 0x0C	; 12
    1970:	51 f1       	breq	.+84     	; 0x19c6 <__stack+0x8c7>
    1972:	8c 30       	cpi	r24, 0x0C	; 12
    1974:	08 f1       	brcs	.+66     	; 0x19b8 <__stack+0x8b9>
    1976:	8e 30       	cpi	r24, 0x0E	; 14
    1978:	69 f1       	breq	.+90     	; 0x19d4 <__stack+0x8d5>
    197a:	8f 30       	cpi	r24, 0x0F	; 15
    197c:	c1 f5       	brne	.+112    	; 0x19ee <__stack+0x8ef>
    197e:	31 c0       	rjmp	.+98     	; 0x19e2 <__stack+0x8e3>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1980:	86 e1       	ldi	r24, 0x16	; 22
    1982:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	9b 83       	std	Y+3, r25	; 0x03
    198a:	8a 83       	std	Y+2, r24	; 0x02
    198c:	30 c0       	rjmp	.+96     	; 0x19ee <__stack+0x8ef>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    198e:	86 e1       	ldi	r24, 0x16	; 22
    1990:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	9b 83       	std	Y+3, r25	; 0x03
    1998:	8a 83       	std	Y+2, r24	; 0x02
    199a:	29 c0       	rjmp	.+82     	; 0x19ee <__stack+0x8ef>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    199c:	86 e1       	ldi	r24, 0x16	; 22
    199e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	9b 83       	std	Y+3, r25	; 0x03
    19a6:	8a 83       	std	Y+2, r24	; 0x02
    19a8:	22 c0       	rjmp	.+68     	; 0x19ee <__stack+0x8ef>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    19aa:	86 e1       	ldi	r24, 0x16	; 22
    19ac:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	9b 83       	std	Y+3, r25	; 0x03
    19b4:	8a 83       	std	Y+2, r24	; 0x02
    19b6:	1b c0       	rjmp	.+54     	; 0x19ee <__stack+0x8ef>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    19b8:	86 e1       	ldi	r24, 0x16	; 22
    19ba:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	9b 83       	std	Y+3, r25	; 0x03
    19c2:	8a 83       	std	Y+2, r24	; 0x02
    19c4:	14 c0       	rjmp	.+40     	; 0x19ee <__stack+0x8ef>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    19c6:	86 e1       	ldi	r24, 0x16	; 22
    19c8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	9b 83       	std	Y+3, r25	; 0x03
    19d0:	8a 83       	std	Y+2, r24	; 0x02
    19d2:	0d c0       	rjmp	.+26     	; 0x19ee <__stack+0x8ef>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    19d4:	86 e1       	ldi	r24, 0x16	; 22
    19d6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	9b 83       	std	Y+3, r25	; 0x03
    19de:	8a 83       	std	Y+2, r24	; 0x02
    19e0:	06 c0       	rjmp	.+12     	; 0x19ee <__stack+0x8ef>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    19e2:	86 e1       	ldi	r24, 0x16	; 22
    19e4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	9b 83       	std	Y+3, r25	; 0x03
    19ec:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    19ee:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    19f2:	88 e0       	ldi	r24, 0x08	; 8
    19f4:	92 e0       	ldi	r25, 0x02	; 2
    19f6:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    19fa:	86 e1       	ldi	r24, 0x16	; 22
    19fc:	92 e0       	ldi	r25, 0x02	; 2
    19fe:	40 e0       	ldi	r20, 0x00	; 0
    1a00:	50 e0       	ldi	r21, 0x00	; 0
    1a02:	ba 01       	movw	r22, r20
    1a04:	01 e0       	ldi	r16, 0x01	; 1
    1a06:	10 e0       	ldi	r17, 0x00	; 0
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1a10:	1e a6       	lds	r17, 0xbe
    1a12:	1f a6       	lds	r17, 0xbf
    1a14:	18 aa       	sts	0x98, r17
    1a16:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1a18:	85 e0       	ldi	r24, 0x05	; 5
    1a1a:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	9b 83       	std	Y+3, r25	; 0x03
    1a22:	8a 83       	std	Y+2, r24	; 0x02
    1a24:	24 c4       	rjmp	.+2120   	; 0x226e <__stack+0x116f>
	}  else {
		if (handle->ifaceDISH.pos < 2 && handle->ifaceKEYPAD.lastkey == 10 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1a26:	89 a5       	lds	r24, 0x69
    1a28:	9a a5       	lds	r25, 0x6a
    1a2a:	ab a5       	lds	r26, 0x6b
    1a2c:	bc a5       	lds	r27, 0x6c
    1a2e:	82 30       	cpi	r24, 0x02	; 2
    1a30:	91 05       	cpc	r25, r1
    1a32:	a1 05       	cpc	r26, r1
    1a34:	b1 05       	cpc	r27, r1
    1a36:	0c f0       	brlt	.+2      	; 0x1a3a <__stack+0x93b>
    1a38:	68 c0       	rjmp	.+208    	; 0x1b0a <__stack+0xa0b>
    1a3a:	c8 84       	ldd	r12, Y+8	; 0x08
    1a3c:	d9 84       	ldd	r13, Y+9	; 0x09
    1a3e:	ea 84       	ldd	r14, Y+10	; 0x0a
    1a40:	fb 84       	ldd	r15, Y+11	; 0x0b
    1a42:	ea e0       	ldi	r30, 0x0A	; 10
    1a44:	ce 16       	cp	r12, r30
    1a46:	d1 04       	cpc	r13, r1
    1a48:	e1 04       	cpc	r14, r1
    1a4a:	f1 04       	cpc	r15, r1
    1a4c:	61 f4       	brne	.+24     	; 0x1a66 <__stack+0x967>
    1a4e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a50:	22 23       	and	r18, r18
    1a52:	49 f0       	breq	.+18     	; 0x1a66 <__stack+0x967>
			/* Default exit sequence for state CheckKeyPress2 */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    1a54:	1b 83       	std	Y+3, r17	; 0x03
    1a56:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckAmount0 */
			/* Entry action for state 'CheckAmount0'. */
			handle->ifaceKEYPAD.lastkey = 0;
    1a58:	18 86       	std	Y+8, r1	; 0x08
    1a5a:	19 86       	std	Y+9, r1	; 0x09
    1a5c:	1a 86       	std	Y+10, r1	; 0x0a
    1a5e:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0;
    1a60:	fd e0       	ldi	r31, 0x0D	; 13
    1a62:	f9 83       	std	Y+1, r31	; 0x01
    1a64:	e2 c3       	rjmp	.+1988   	; 0x222a <__stack+0x112b>
			handle->stateConfVectorPosition = 1;
		}  else {
			if (handle->ifaceDISH.pos < 2 && handle->ifaceKEYPAD.lastkey <= 9 && handle->ifaceKEYPAD.lastkey >= 1 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1a66:	2a e0       	ldi	r18, 0x0A	; 10
    1a68:	c2 16       	cp	r12, r18
    1a6a:	d1 04       	cpc	r13, r1
    1a6c:	e1 04       	cpc	r14, r1
    1a6e:	f1 04       	cpc	r15, r1
    1a70:	0c f0       	brlt	.+2      	; 0x1a74 <__stack+0x975>
    1a72:	4b c0       	rjmp	.+150    	; 0x1b0a <__stack+0xa0b>
    1a74:	1c 14       	cp	r1, r12
    1a76:	1d 04       	cpc	r1, r13
    1a78:	1e 04       	cpc	r1, r14
    1a7a:	1f 04       	cpc	r1, r15
    1a7c:	0c f0       	brlt	.+2      	; 0x1a80 <__stack+0x981>
    1a7e:	45 c0       	rjmp	.+138    	; 0x1b0a <__stack+0xa0b>
    1a80:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a82:	22 23       	and	r18, r18
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <__stack+0x989>
    1a86:	41 c0       	rjmp	.+130    	; 0x1b0a <__stack+0xa0b>
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1a88:	26 e1       	ldi	r18, 0x16	; 22
    1a8a:	29 83       	std	Y+1, r18	; 0x01
				handle->stateConfVectorPosition = 1;
    1a8c:	88 24       	eor	r8, r8
    1a8e:	99 24       	eor	r9, r9
    1a90:	83 94       	inc	r8
    1a92:	9b 82       	std	Y+3, r9	; 0x03
    1a94:	8a 82       	std	Y+2, r8	; 0x02
				/* Default enter sequence for state EnterAmount */
				/* Entry action for state 'EnterAmount'. */
				sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    1a96:	9c 01       	movw	r18, r24
    1a98:	ad 01       	movw	r20, r26
    1a9a:	22 0f       	add	r18, r18
    1a9c:	33 1f       	adc	r19, r19
    1a9e:	44 1f       	adc	r20, r20
    1aa0:	55 1f       	adc	r21, r21
    1aa2:	c7 01       	movw	r24, r14
    1aa4:	b6 01       	movw	r22, r12
    1aa6:	ee 24       	eor	r14, r14
    1aa8:	ff 24       	eor	r15, r15
    1aaa:	87 01       	movw	r16, r14
    1aac:	e3 94       	inc	r14
    1aae:	aa 24       	eor	r10, r10
    1ab0:	bb 24       	eor	r11, r11
    1ab2:	65 01       	movw	r12, r10
    1ab4:	a3 94       	inc	r10
    1ab6:	0e 94 24 02 	call	0x448	; 0x448 <sMOIfaceLCD_writeNumberXY>
				handle->ifaceDISH.pos += 1;
    1aba:	89 a5       	lds	r24, 0x69
    1abc:	9a a5       	lds	r25, 0x6a
    1abe:	ab a5       	lds	r26, 0x6b
    1ac0:	bc a5       	lds	r27, 0x6c
    1ac2:	01 96       	adiw	r24, 0x01	; 1
    1ac4:	a1 1d       	adc	r26, r1
    1ac6:	b1 1d       	adc	r27, r1
    1ac8:	89 a7       	lds	r24, 0x79
    1aca:	9a a7       	lds	r25, 0x7a
    1acc:	ab a7       	lds	r26, 0x7b
    1ace:	bc a7       	lds	r27, 0x7c
				handle->ifaceDISH.amount = handle->ifaceDISH.amount * 10 + handle->ifaceKEYPAD.lastkey;
    1ad0:	6d a1       	lds	r22, 0x4d
    1ad2:	7e a1       	lds	r23, 0x4e
    1ad4:	8f a1       	lds	r24, 0x4f
    1ad6:	98 a5       	lds	r25, 0x68
    1ad8:	2a e0       	ldi	r18, 0x0A	; 10
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e0       	ldi	r20, 0x00	; 0
    1ade:	50 e0       	ldi	r21, 0x00	; 0
    1ae0:	0e 94 bb 13 	call	0x2776	; 0x2776 <__mulsi3>
    1ae4:	ab 01       	movw	r20, r22
    1ae6:	bc 01       	movw	r22, r24
    1ae8:	88 85       	ldd	r24, Y+8	; 0x08
    1aea:	99 85       	ldd	r25, Y+9	; 0x09
    1aec:	aa 85       	ldd	r26, Y+10	; 0x0a
    1aee:	bb 85       	ldd	r27, Y+11	; 0x0b
    1af0:	84 0f       	add	r24, r20
    1af2:	95 1f       	adc	r25, r21
    1af4:	a6 1f       	adc	r26, r22
    1af6:	b7 1f       	adc	r27, r23
    1af8:	8d a3       	lds	r24, 0x5d
    1afa:	9e a3       	lds	r25, 0x5e
    1afc:	af a3       	lds	r26, 0x5f
    1afe:	b8 a7       	lds	r27, 0x78
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount;
    1b00:	8e e0       	ldi	r24, 0x0E	; 14
    1b02:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1b04:	9b 82       	std	Y+3, r9	; 0x03
    1b06:	8a 82       	std	Y+2, r8	; 0x02
    1b08:	b2 c3       	rjmp	.+1892   	; 0x226e <__stack+0x116f>
			}  else {
				if (handle->ifaceKEYPAD.lastkey == 12 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1b0a:	88 85       	ldd	r24, Y+8	; 0x08
    1b0c:	99 85       	ldd	r25, Y+9	; 0x09
    1b0e:	aa 85       	ldd	r26, Y+10	; 0x0a
    1b10:	bb 85       	ldd	r27, Y+11	; 0x0b
    1b12:	8c 30       	cpi	r24, 0x0C	; 12
    1b14:	91 05       	cpc	r25, r1
    1b16:	a1 05       	cpc	r26, r1
    1b18:	b1 05       	cpc	r27, r1
    1b1a:	41 f5       	brne	.+80     	; 0x1b6c <__stack+0xa6d>
    1b1c:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b1e:	22 23       	and	r18, r18
    1b20:	29 f1       	breq	.+74     	; 0x1b6c <__stack+0xa6d>
					/* Default exit sequence for state CheckKeyPress2 */
					handle->stateConfVector[1] = SMO_last_state;
    1b22:	86 e1       	ldi	r24, 0x16	; 22
    1b24:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    1b26:	ee 24       	eor	r14, r14
    1b28:	ff 24       	eor	r15, r15
    1b2a:	e3 94       	inc	r14
    1b2c:	fb 82       	std	Y+3, r15	; 0x03
    1b2e:	ea 82       	std	Y+2, r14	; 0x02
					/* Default enter sequence for state ShowAmount */
					/* Entry action for state 'ShowAmount'. */
					sMOIfaceLCD_clear();
    1b30:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
					sMOIfaceLCD_writeString("Nhap so luong:");
    1b34:	88 e3       	ldi	r24, 0x38	; 56
    1b36:	92 e0       	ldi	r25, 0x02	; 2
    1b38:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
					sMOIfaceLCD_writeStringXY("_ _", 0, 1);
    1b3c:	87 e4       	ldi	r24, 0x47	; 71
    1b3e:	92 e0       	ldi	r25, 0x02	; 2
    1b40:	40 e0       	ldi	r20, 0x00	; 0
    1b42:	50 e0       	ldi	r21, 0x00	; 0
    1b44:	ba 01       	movw	r22, r20
    1b46:	01 e0       	ldi	r16, 0x01	; 1
    1b48:	10 e0       	ldi	r17, 0x00	; 0
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
					handle->ifaceDISH.pos = 0;
    1b52:	19 a6       	lds	r17, 0xb9
    1b54:	1a a6       	lds	r17, 0xba
    1b56:	1b a6       	lds	r17, 0xbb
    1b58:	1c a6       	lds	r17, 0xbc
					handle->ifaceDISH.amount = 0;
    1b5a:	1d a2       	lds	r17, 0x9d
    1b5c:	1e a2       	lds	r17, 0x9e
    1b5e:	1f a2       	lds	r17, 0x9f
    1b60:	18 a6       	lds	r17, 0xb8
					handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount;
    1b62:	8b e0       	ldi	r24, 0x0B	; 11
    1b64:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    1b66:	fb 82       	std	Y+3, r15	; 0x03
    1b68:	ea 82       	std	Y+2, r14	; 0x02
    1b6a:	81 c3       	rjmp	.+1794   	; 0x226e <__stack+0x116f>
				}  else {
					if (handle->ifaceKEYPAD.lastkey == 11 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1b6c:	8b 30       	cpi	r24, 0x0B	; 11
    1b6e:	91 05       	cpc	r25, r1
    1b70:	a1 05       	cpc	r26, r1
    1b72:	b1 05       	cpc	r27, r1
    1b74:	09 f0       	breq	.+2      	; 0x1b78 <__stack+0xa79>
    1b76:	70 c0       	rjmp	.+224    	; 0x1c58 <__stack+0xb59>
    1b78:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b7a:	22 23       	and	r18, r18
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <__stack+0xa81>
    1b7e:	6c c0       	rjmp	.+216    	; 0x1c58 <__stack+0xb59>
						/* Default exit sequence for state EnterData */
						/* Default exit sequence for region r1 */
						/* Handle exit of all possible states (of r1) at position 1... */
						switch(handle->stateConfVector[ 1 ]) {
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	8a 30       	cpi	r24, 0x0A	; 10
    1b84:	41 f1       	breq	.+80     	; 0x1bd6 <__stack+0xad7>
    1b86:	8b 30       	cpi	r24, 0x0B	; 11
    1b88:	40 f4       	brcc	.+16     	; 0x1b9a <__stack+0xa9b>
    1b8a:	88 30       	cpi	r24, 0x08	; 8
    1b8c:	b1 f0       	breq	.+44     	; 0x1bba <__stack+0xabb>
    1b8e:	89 30       	cpi	r24, 0x09	; 9
    1b90:	d8 f4       	brcc	.+54     	; 0x1bc8 <__stack+0xac9>
    1b92:	87 30       	cpi	r24, 0x07	; 7
    1b94:	09 f0       	breq	.+2      	; 0x1b98 <__stack+0xa99>
    1b96:	41 c0       	rjmp	.+130    	; 0x1c1a <__stack+0xb1b>
    1b98:	09 c0       	rjmp	.+18     	; 0x1bac <__stack+0xaad>
    1b9a:	8c 30       	cpi	r24, 0x0C	; 12
    1b9c:	51 f1       	breq	.+84     	; 0x1bf2 <__stack+0xaf3>
    1b9e:	8c 30       	cpi	r24, 0x0C	; 12
    1ba0:	08 f1       	brcs	.+66     	; 0x1be4 <__stack+0xae5>
    1ba2:	8e 30       	cpi	r24, 0x0E	; 14
    1ba4:	69 f1       	breq	.+90     	; 0x1c00 <__stack+0xb01>
    1ba6:	8f 30       	cpi	r24, 0x0F	; 15
    1ba8:	c1 f5       	brne	.+112    	; 0x1c1a <__stack+0xb1b>
    1baa:	31 c0       	rjmp	.+98     	; 0x1c0e <__stack+0xb0f>
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
								/* Default exit sequence for state ShowCode */
								handle->stateConfVector[1] = SMO_last_state;
    1bac:	86 e1       	ldi	r24, 0x16	; 22
    1bae:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	9b 83       	std	Y+3, r25	; 0x03
    1bb6:	8a 83       	std	Y+2, r24	; 0x02
    1bb8:	30 c0       	rjmp	.+96     	; 0x1c1a <__stack+0xb1b>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
								/* Default exit sequence for state EnterCode */
								handle->stateConfVector[1] = SMO_last_state;
    1bba:	86 e1       	ldi	r24, 0x16	; 22
    1bbc:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	9b 83       	std	Y+3, r25	; 0x03
    1bc4:	8a 83       	std	Y+2, r24	; 0x02
    1bc6:	29 c0       	rjmp	.+82     	; 0x1c1a <__stack+0xb1b>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
								/* Default exit sequence for state CheckKeyPress1 */
								handle->stateConfVector[1] = SMO_last_state;
    1bc8:	86 e1       	ldi	r24, 0x16	; 22
    1bca:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	9b 83       	std	Y+3, r25	; 0x03
    1bd2:	8a 83       	std	Y+2, r24	; 0x02
    1bd4:	22 c0       	rjmp	.+68     	; 0x1c1a <__stack+0xb1b>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
								/* Default exit sequence for state CheckCode0 */
								handle->stateConfVector[1] = SMO_last_state;
    1bd6:	86 e1       	ldi	r24, 0x16	; 22
    1bd8:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	9b 83       	std	Y+3, r25	; 0x03
    1be0:	8a 83       	std	Y+2, r24	; 0x02
    1be2:	1b c0       	rjmp	.+54     	; 0x1c1a <__stack+0xb1b>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
								/* Default exit sequence for state ShowAmount */
								handle->stateConfVector[1] = SMO_last_state;
    1be4:	86 e1       	ldi	r24, 0x16	; 22
    1be6:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	9b 83       	std	Y+3, r25	; 0x03
    1bee:	8a 83       	std	Y+2, r24	; 0x02
    1bf0:	14 c0       	rjmp	.+40     	; 0x1c1a <__stack+0xb1b>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
								/* Default exit sequence for state CheckKeyPress2 */
								handle->stateConfVector[1] = SMO_last_state;
    1bf2:	86 e1       	ldi	r24, 0x16	; 22
    1bf4:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	9b 83       	std	Y+3, r25	; 0x03
    1bfc:	8a 83       	std	Y+2, r24	; 0x02
    1bfe:	0d c0       	rjmp	.+26     	; 0x1c1a <__stack+0xb1b>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
								/* Default exit sequence for state EnterAmount */
								handle->stateConfVector[1] = SMO_last_state;
    1c00:	86 e1       	ldi	r24, 0x16	; 22
    1c02:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	9b 83       	std	Y+3, r25	; 0x03
    1c0a:	8a 83       	std	Y+2, r24	; 0x02
    1c0c:	06 c0       	rjmp	.+12     	; 0x1c1a <__stack+0xb1b>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
								/* Default exit sequence for final state. */
								handle->stateConfVector[1] = SMO_last_state;
    1c0e:	86 e1       	ldi	r24, 0x16	; 22
    1c10:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	9b 83       	std	Y+3, r25	; 0x03
    1c18:	8a 83       	std	Y+2, r24	; 0x02
								break;
							}
							default: break;
						}
						handle->ifaceRF.result = bool_false;
    1c1a:	1f 8a       	std	Y+23, r1	; 0x17
						handle->ifaceRF.retry = 0;
    1c1c:	18 8e       	std	Y+24, r1	; 0x18
    1c1e:	19 8e       	std	Y+25, r1	; 0x19
    1c20:	1a 8e       	std	Y+26, r1	; 0x1a
    1c22:	1b 8e       	std	Y+27, r1	; 0x1b
						/* Default enter sequence for state SendData */
						/* Default enter sequence for region r1 */
						/* Default react sequence for initial entry  */
						/* Default enter sequence for state Send */
						/* Entry action for state 'Send'. */
						handle->ifaceRF.result = sMOIfaceRF_sendData(handle->iface.menuId, handle->iface.tableId, handle->ifaceDISH.ID, handle->ifaceDISH.amount);
    1c24:	6e a5       	lds	r22, 0x6e
    1c26:	7f a5       	lds	r23, 0x6f
    1c28:	88 a9       	sts	0x48, r24
    1c2a:	99 a9       	sts	0x49, r25
    1c2c:	2a a9       	sts	0x4a, r18
    1c2e:	3b a9       	sts	0x4b, r19
    1c30:	4c a9       	sts	0x4c, r20
    1c32:	5d a9       	sts	0x4d, r21
    1c34:	e9 a0       	lds	r30, 0x89
    1c36:	fa a0       	lds	r31, 0x8a
    1c38:	0b a1       	lds	r16, 0x4b
    1c3a:	1c a1       	lds	r17, 0x4c
    1c3c:	ad a0       	lds	r26, 0x8d
    1c3e:	be a0       	lds	r27, 0x8e
    1c40:	cf a0       	lds	r28, 0x8f
    1c42:	d8 a4       	lds	r29, 0xa8
    1c44:	0e 94 09 03 	call	0x612	; 0x612 <sMOIfaceRF_sendData>
    1c48:	8f 8b       	std	Y+23, r24	; 0x17
						handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_Send;
    1c4a:	83 e1       	ldi	r24, 0x13	; 19
    1c4c:	89 83       	std	Y+1, r24	; 0x01
						handle->stateConfVectorPosition = 1;
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	9b 83       	std	Y+3, r25	; 0x03
    1c54:	8a 83       	std	Y+2, r24	; 0x02
    1c56:	0b c3       	rjmp	.+1558   	; 0x226e <__stack+0x116f>
					}  else {
						if (handle->ifaceKEYPAD.lastkey == 16 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1c58:	80 31       	cpi	r24, 0x10	; 16
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	a1 05       	cpc	r26, r1
    1c5e:	b1 05       	cpc	r27, r1
    1c60:	09 f0       	breq	.+2      	; 0x1c64 <__stack+0xb65>
    1c62:	e3 c2       	rjmp	.+1478   	; 0x222a <__stack+0x112b>
    1c64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c66:	88 23       	and	r24, r24
    1c68:	09 f4       	brne	.+2      	; 0x1c6c <__stack+0xb6d>
    1c6a:	df c2       	rjmp	.+1470   	; 0x222a <__stack+0x112b>
							/* Default exit sequence for state CheckKeyPress2 */
							handle->stateConfVector[1] = SMO_last_state;
							handle->stateConfVectorPosition = 1;
    1c6c:	1b 83       	std	Y+3, r17	; 0x03
    1c6e:	0a 83       	std	Y+2, r16	; 0x02
							handle->iface.menuId = 0;
    1c70:	1e a6       	lds	r17, 0xbe
    1c72:	1f a6       	lds	r17, 0xbf
    1c74:	18 aa       	sts	0x98, r17
    1c76:	19 aa       	sts	0x99, r17
							/* Default enter sequence for state null */
							handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_;
    1c78:	8f e0       	ldi	r24, 0x0F	; 15
    1c7a:	89 83       	std	Y+1, r24	; 0x01
    1c7c:	d6 c2       	rjmp	.+1452   	; 0x222a <__stack+0x112b>
}

/* The reactions of state CheckAmount0. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0(SMO* handle) {
	/* The reactions of state CheckAmount0. */
	if (handle->iface.menuId == 0) { 
    1c7e:	8e a5       	lds	r24, 0x6e
    1c80:	9f a5       	lds	r25, 0x6f
    1c82:	a8 a9       	sts	0x48, r26
    1c84:	b9 a9       	sts	0x49, r27
    1c86:	00 97       	sbiw	r24, 0x00	; 0
    1c88:	a1 05       	cpc	r26, r1
    1c8a:	b1 05       	cpc	r27, r1
    1c8c:	09 f0       	breq	.+2      	; 0x1c90 <__stack+0xb91>
    1c8e:	69 c0       	rjmp	.+210    	; 0x1d62 <__stack+0xc63>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1c90:	89 81       	ldd	r24, Y+1	; 0x01
    1c92:	8a 30       	cpi	r24, 0x0A	; 10
    1c94:	41 f1       	breq	.+80     	; 0x1ce6 <__stack+0xbe7>
    1c96:	8b 30       	cpi	r24, 0x0B	; 11
    1c98:	40 f4       	brcc	.+16     	; 0x1caa <__stack+0xbab>
    1c9a:	88 30       	cpi	r24, 0x08	; 8
    1c9c:	b1 f0       	breq	.+44     	; 0x1cca <__stack+0xbcb>
    1c9e:	89 30       	cpi	r24, 0x09	; 9
    1ca0:	d8 f4       	brcc	.+54     	; 0x1cd8 <__stack+0xbd9>
    1ca2:	87 30       	cpi	r24, 0x07	; 7
    1ca4:	09 f0       	breq	.+2      	; 0x1ca8 <__stack+0xba9>
    1ca6:	41 c0       	rjmp	.+130    	; 0x1d2a <__stack+0xc2b>
    1ca8:	09 c0       	rjmp	.+18     	; 0x1cbc <__stack+0xbbd>
    1caa:	8c 30       	cpi	r24, 0x0C	; 12
    1cac:	51 f1       	breq	.+84     	; 0x1d02 <__stack+0xc03>
    1cae:	8c 30       	cpi	r24, 0x0C	; 12
    1cb0:	08 f1       	brcs	.+66     	; 0x1cf4 <__stack+0xbf5>
    1cb2:	8e 30       	cpi	r24, 0x0E	; 14
    1cb4:	69 f1       	breq	.+90     	; 0x1d10 <__stack+0xc11>
    1cb6:	8f 30       	cpi	r24, 0x0F	; 15
    1cb8:	c1 f5       	brne	.+112    	; 0x1d2a <__stack+0xc2b>
    1cba:	31 c0       	rjmp	.+98     	; 0x1d1e <__stack+0xc1f>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1cbc:	86 e1       	ldi	r24, 0x16	; 22
    1cbe:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	9b 83       	std	Y+3, r25	; 0x03
    1cc6:	8a 83       	std	Y+2, r24	; 0x02
    1cc8:	30 c0       	rjmp	.+96     	; 0x1d2a <__stack+0xc2b>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1cca:	86 e1       	ldi	r24, 0x16	; 22
    1ccc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	9b 83       	std	Y+3, r25	; 0x03
    1cd4:	8a 83       	std	Y+2, r24	; 0x02
    1cd6:	29 c0       	rjmp	.+82     	; 0x1d2a <__stack+0xc2b>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1cd8:	86 e1       	ldi	r24, 0x16	; 22
    1cda:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	9b 83       	std	Y+3, r25	; 0x03
    1ce2:	8a 83       	std	Y+2, r24	; 0x02
    1ce4:	22 c0       	rjmp	.+68     	; 0x1d2a <__stack+0xc2b>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1ce6:	86 e1       	ldi	r24, 0x16	; 22
    1ce8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	9b 83       	std	Y+3, r25	; 0x03
    1cf0:	8a 83       	std	Y+2, r24	; 0x02
    1cf2:	1b c0       	rjmp	.+54     	; 0x1d2a <__stack+0xc2b>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1cf4:	86 e1       	ldi	r24, 0x16	; 22
    1cf6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	9b 83       	std	Y+3, r25	; 0x03
    1cfe:	8a 83       	std	Y+2, r24	; 0x02
    1d00:	14 c0       	rjmp	.+40     	; 0x1d2a <__stack+0xc2b>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1d02:	86 e1       	ldi	r24, 0x16	; 22
    1d04:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	9b 83       	std	Y+3, r25	; 0x03
    1d0c:	8a 83       	std	Y+2, r24	; 0x02
    1d0e:	0d c0       	rjmp	.+26     	; 0x1d2a <__stack+0xc2b>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1d10:	86 e1       	ldi	r24, 0x16	; 22
    1d12:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	9b 83       	std	Y+3, r25	; 0x03
    1d1a:	8a 83       	std	Y+2, r24	; 0x02
    1d1c:	06 c0       	rjmp	.+12     	; 0x1d2a <__stack+0xc2b>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1d1e:	86 e1       	ldi	r24, 0x16	; 22
    1d20:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	9b 83       	std	Y+3, r25	; 0x03
    1d28:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1d2a:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1d2e:	88 e0       	ldi	r24, 0x08	; 8
    1d30:	92 e0       	ldi	r25, 0x02	; 2
    1d32:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    1d36:	86 e1       	ldi	r24, 0x16	; 22
    1d38:	92 e0       	ldi	r25, 0x02	; 2
    1d3a:	40 e0       	ldi	r20, 0x00	; 0
    1d3c:	50 e0       	ldi	r21, 0x00	; 0
    1d3e:	ba 01       	movw	r22, r20
    1d40:	01 e0       	ldi	r16, 0x01	; 1
    1d42:	10 e0       	ldi	r17, 0x00	; 0
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1d4c:	1e a6       	lds	r17, 0xbe
    1d4e:	1f a6       	lds	r17, 0xbf
    1d50:	18 aa       	sts	0x98, r17
    1d52:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1d54:	85 e0       	ldi	r24, 0x05	; 5
    1d56:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	9b 83       	std	Y+3, r25	; 0x03
    1d5e:	8a 83       	std	Y+2, r24	; 0x02
    1d60:	86 c2       	rjmp	.+1292   	; 0x226e <__stack+0x116f>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state CheckAmount0 */
			handle->stateConfVector[1] = SMO_last_state;
    1d62:	86 e1       	ldi	r24, 0x16	; 22
    1d64:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1d66:	88 24       	eor	r8, r8
    1d68:	99 24       	eor	r9, r9
    1d6a:	83 94       	inc	r8
    1d6c:	9b 82       	std	Y+3, r9	; 0x03
    1d6e:	8a 82       	std	Y+2, r8	; 0x02
			/* Default enter sequence for state EnterAmount */
			/* Entry action for state 'EnterAmount'. */
			sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    1d70:	c8 84       	ldd	r12, Y+8	; 0x08
    1d72:	d9 84       	ldd	r13, Y+9	; 0x09
    1d74:	ea 84       	ldd	r14, Y+10	; 0x0a
    1d76:	fb 84       	ldd	r15, Y+11	; 0x0b
    1d78:	89 a5       	lds	r24, 0x69
    1d7a:	9a a5       	lds	r25, 0x6a
    1d7c:	ab a5       	lds	r26, 0x6b
    1d7e:	bc a5       	lds	r27, 0x6c
    1d80:	9c 01       	movw	r18, r24
    1d82:	ad 01       	movw	r20, r26
    1d84:	22 0f       	add	r18, r18
    1d86:	33 1f       	adc	r19, r19
    1d88:	44 1f       	adc	r20, r20
    1d8a:	55 1f       	adc	r21, r21
    1d8c:	c7 01       	movw	r24, r14
    1d8e:	b6 01       	movw	r22, r12
    1d90:	ee 24       	eor	r14, r14
    1d92:	ff 24       	eor	r15, r15
    1d94:	87 01       	movw	r16, r14
    1d96:	e3 94       	inc	r14
    1d98:	aa 24       	eor	r10, r10
    1d9a:	bb 24       	eor	r11, r11
    1d9c:	65 01       	movw	r12, r10
    1d9e:	a3 94       	inc	r10
    1da0:	0e 94 24 02 	call	0x448	; 0x448 <sMOIfaceLCD_writeNumberXY>
			handle->ifaceDISH.pos += 1;
    1da4:	89 a5       	lds	r24, 0x69
    1da6:	9a a5       	lds	r25, 0x6a
    1da8:	ab a5       	lds	r26, 0x6b
    1daa:	bc a5       	lds	r27, 0x6c
    1dac:	01 96       	adiw	r24, 0x01	; 1
    1dae:	a1 1d       	adc	r26, r1
    1db0:	b1 1d       	adc	r27, r1
    1db2:	89 a7       	lds	r24, 0x79
    1db4:	9a a7       	lds	r25, 0x7a
    1db6:	ab a7       	lds	r26, 0x7b
    1db8:	bc a7       	lds	r27, 0x7c
			handle->ifaceDISH.amount = handle->ifaceDISH.amount * 10 + handle->ifaceKEYPAD.lastkey;
    1dba:	6d a1       	lds	r22, 0x4d
    1dbc:	7e a1       	lds	r23, 0x4e
    1dbe:	8f a1       	lds	r24, 0x4f
    1dc0:	98 a5       	lds	r25, 0x68
    1dc2:	2a e0       	ldi	r18, 0x0A	; 10
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	40 e0       	ldi	r20, 0x00	; 0
    1dc8:	50 e0       	ldi	r21, 0x00	; 0
    1dca:	0e 94 bb 13 	call	0x2776	; 0x2776 <__mulsi3>
    1dce:	ab 01       	movw	r20, r22
    1dd0:	bc 01       	movw	r22, r24
    1dd2:	88 85       	ldd	r24, Y+8	; 0x08
    1dd4:	99 85       	ldd	r25, Y+9	; 0x09
    1dd6:	aa 85       	ldd	r26, Y+10	; 0x0a
    1dd8:	bb 85       	ldd	r27, Y+11	; 0x0b
    1dda:	84 0f       	add	r24, r20
    1ddc:	95 1f       	adc	r25, r21
    1dde:	a6 1f       	adc	r26, r22
    1de0:	b7 1f       	adc	r27, r23
    1de2:	8d a3       	lds	r24, 0x5d
    1de4:	9e a3       	lds	r25, 0x5e
    1de6:	af a3       	lds	r26, 0x5f
    1de8:	b8 a7       	lds	r27, 0x78
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount;
    1dea:	8e e0       	ldi	r24, 0x0E	; 14
    1dec:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1dee:	9b 82       	std	Y+3, r9	; 0x03
    1df0:	8a 82       	std	Y+2, r8	; 0x02
    1df2:	3d c2       	rjmp	.+1146   	; 0x226e <__stack+0x116f>
}

/* The reactions of state EnterAmount. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount(SMO* handle) {
	/* The reactions of state EnterAmount. */
	if (handle->iface.menuId == 0) { 
    1df4:	8e a5       	lds	r24, 0x6e
    1df6:	9f a5       	lds	r25, 0x6f
    1df8:	a8 a9       	sts	0x48, r26
    1dfa:	b9 a9       	sts	0x49, r27
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	a1 05       	cpc	r26, r1
    1e00:	b1 05       	cpc	r27, r1
    1e02:	09 f0       	breq	.+2      	; 0x1e06 <__stack+0xd07>
    1e04:	69 c0       	rjmp	.+210    	; 0x1ed8 <__stack+0xdd9>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	8a 30       	cpi	r24, 0x0A	; 10
    1e0a:	41 f1       	breq	.+80     	; 0x1e5c <__stack+0xd5d>
    1e0c:	8b 30       	cpi	r24, 0x0B	; 11
    1e0e:	40 f4       	brcc	.+16     	; 0x1e20 <__stack+0xd21>
    1e10:	88 30       	cpi	r24, 0x08	; 8
    1e12:	b1 f0       	breq	.+44     	; 0x1e40 <__stack+0xd41>
    1e14:	89 30       	cpi	r24, 0x09	; 9
    1e16:	d8 f4       	brcc	.+54     	; 0x1e4e <__stack+0xd4f>
    1e18:	87 30       	cpi	r24, 0x07	; 7
    1e1a:	09 f0       	breq	.+2      	; 0x1e1e <__stack+0xd1f>
    1e1c:	41 c0       	rjmp	.+130    	; 0x1ea0 <__stack+0xda1>
    1e1e:	09 c0       	rjmp	.+18     	; 0x1e32 <__stack+0xd33>
    1e20:	8c 30       	cpi	r24, 0x0C	; 12
    1e22:	51 f1       	breq	.+84     	; 0x1e78 <__stack+0xd79>
    1e24:	8c 30       	cpi	r24, 0x0C	; 12
    1e26:	08 f1       	brcs	.+66     	; 0x1e6a <__stack+0xd6b>
    1e28:	8e 30       	cpi	r24, 0x0E	; 14
    1e2a:	69 f1       	breq	.+90     	; 0x1e86 <__stack+0xd87>
    1e2c:	8f 30       	cpi	r24, 0x0F	; 15
    1e2e:	c1 f5       	brne	.+112    	; 0x1ea0 <__stack+0xda1>
    1e30:	31 c0       	rjmp	.+98     	; 0x1e94 <__stack+0xd95>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1e32:	86 e1       	ldi	r24, 0x16	; 22
    1e34:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	9b 83       	std	Y+3, r25	; 0x03
    1e3c:	8a 83       	std	Y+2, r24	; 0x02
    1e3e:	30 c0       	rjmp	.+96     	; 0x1ea0 <__stack+0xda1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1e40:	86 e1       	ldi	r24, 0x16	; 22
    1e42:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	9b 83       	std	Y+3, r25	; 0x03
    1e4a:	8a 83       	std	Y+2, r24	; 0x02
    1e4c:	29 c0       	rjmp	.+82     	; 0x1ea0 <__stack+0xda1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1e4e:	86 e1       	ldi	r24, 0x16	; 22
    1e50:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	9b 83       	std	Y+3, r25	; 0x03
    1e58:	8a 83       	std	Y+2, r24	; 0x02
    1e5a:	22 c0       	rjmp	.+68     	; 0x1ea0 <__stack+0xda1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1e5c:	86 e1       	ldi	r24, 0x16	; 22
    1e5e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	9b 83       	std	Y+3, r25	; 0x03
    1e66:	8a 83       	std	Y+2, r24	; 0x02
    1e68:	1b c0       	rjmp	.+54     	; 0x1ea0 <__stack+0xda1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1e6a:	86 e1       	ldi	r24, 0x16	; 22
    1e6c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	9b 83       	std	Y+3, r25	; 0x03
    1e74:	8a 83       	std	Y+2, r24	; 0x02
    1e76:	14 c0       	rjmp	.+40     	; 0x1ea0 <__stack+0xda1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1e78:	86 e1       	ldi	r24, 0x16	; 22
    1e7a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	9b 83       	std	Y+3, r25	; 0x03
    1e82:	8a 83       	std	Y+2, r24	; 0x02
    1e84:	0d c0       	rjmp	.+26     	; 0x1ea0 <__stack+0xda1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1e86:	86 e1       	ldi	r24, 0x16	; 22
    1e88:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	9b 83       	std	Y+3, r25	; 0x03
    1e90:	8a 83       	std	Y+2, r24	; 0x02
    1e92:	06 c0       	rjmp	.+12     	; 0x1ea0 <__stack+0xda1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1e94:	86 e1       	ldi	r24, 0x16	; 22
    1e96:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	9b 83       	std	Y+3, r25	; 0x03
    1e9e:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1ea0:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1ea4:	88 e0       	ldi	r24, 0x08	; 8
    1ea6:	92 e0       	ldi	r25, 0x02	; 2
    1ea8:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    1eac:	86 e1       	ldi	r24, 0x16	; 22
    1eae:	92 e0       	ldi	r25, 0x02	; 2
    1eb0:	40 e0       	ldi	r20, 0x00	; 0
    1eb2:	50 e0       	ldi	r21, 0x00	; 0
    1eb4:	ba 01       	movw	r22, r20
    1eb6:	01 e0       	ldi	r16, 0x01	; 1
    1eb8:	10 e0       	ldi	r17, 0x00	; 0
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1ec2:	1e a6       	lds	r17, 0xbe
    1ec4:	1f a6       	lds	r17, 0xbf
    1ec6:	18 aa       	sts	0x98, r17
    1ec8:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1eca:	85 e0       	ldi	r24, 0x05	; 5
    1ecc:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	9b 83       	std	Y+3, r25	; 0x03
    1ed4:	8a 83       	std	Y+2, r24	; 0x02
    1ed6:	cb c1       	rjmp	.+918    	; 0x226e <__stack+0x116f>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state EnterAmount */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    1ed8:	1b 83       	std	Y+3, r17	; 0x03
    1eda:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress2 */
			/* Entry action for state 'CheckKeyPress2'. */
			handle->ifaceKEYPAD.lastkey = 0;
    1edc:	18 86       	std	Y+8, r1	; 0x08
    1ede:	19 86       	std	Y+9, r1	; 0x09
    1ee0:	1a 86       	std	Y+10, r1	; 0x0a
    1ee2:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2;
    1ee4:	a9 82       	std	Y+1, r10	; 0x01
    1ee6:	a1 c1       	rjmp	.+834    	; 0x222a <__stack+0x112b>
}

/* The reactions of state null. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1__final_0(SMO* handle) {
	/* The reactions of state null. */
	if (handle->iface.menuId == 0) { 
    1ee8:	8e a5       	lds	r24, 0x6e
    1eea:	9f a5       	lds	r25, 0x6f
    1eec:	a8 a9       	sts	0x48, r26
    1eee:	b9 a9       	sts	0x49, r27
    1ef0:	00 97       	sbiw	r24, 0x00	; 0
    1ef2:	a1 05       	cpc	r26, r1
    1ef4:	b1 05       	cpc	r27, r1
    1ef6:	09 f0       	breq	.+2      	; 0x1efa <__stack+0xdfb>
    1ef8:	98 c1       	rjmp	.+816    	; 0x222a <__stack+0x112b>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
    1efc:	8a 30       	cpi	r24, 0x0A	; 10
    1efe:	41 f1       	breq	.+80     	; 0x1f50 <__stack+0xe51>
    1f00:	8b 30       	cpi	r24, 0x0B	; 11
    1f02:	40 f4       	brcc	.+16     	; 0x1f14 <__stack+0xe15>
    1f04:	88 30       	cpi	r24, 0x08	; 8
    1f06:	b1 f0       	breq	.+44     	; 0x1f34 <__stack+0xe35>
    1f08:	89 30       	cpi	r24, 0x09	; 9
    1f0a:	d8 f4       	brcc	.+54     	; 0x1f42 <__stack+0xe43>
    1f0c:	87 30       	cpi	r24, 0x07	; 7
    1f0e:	09 f0       	breq	.+2      	; 0x1f12 <__stack+0xe13>
    1f10:	41 c0       	rjmp	.+130    	; 0x1f94 <__stack+0xe95>
    1f12:	09 c0       	rjmp	.+18     	; 0x1f26 <__stack+0xe27>
    1f14:	8c 30       	cpi	r24, 0x0C	; 12
    1f16:	51 f1       	breq	.+84     	; 0x1f6c <__stack+0xe6d>
    1f18:	8c 30       	cpi	r24, 0x0C	; 12
    1f1a:	08 f1       	brcs	.+66     	; 0x1f5e <__stack+0xe5f>
    1f1c:	8e 30       	cpi	r24, 0x0E	; 14
    1f1e:	69 f1       	breq	.+90     	; 0x1f7a <__stack+0xe7b>
    1f20:	8f 30       	cpi	r24, 0x0F	; 15
    1f22:	c1 f5       	brne	.+112    	; 0x1f94 <__stack+0xe95>
    1f24:	31 c0       	rjmp	.+98     	; 0x1f88 <__stack+0xe89>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1f26:	86 e1       	ldi	r24, 0x16	; 22
    1f28:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	9b 83       	std	Y+3, r25	; 0x03
    1f30:	8a 83       	std	Y+2, r24	; 0x02
    1f32:	30 c0       	rjmp	.+96     	; 0x1f94 <__stack+0xe95>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1f34:	86 e1       	ldi	r24, 0x16	; 22
    1f36:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	9b 83       	std	Y+3, r25	; 0x03
    1f3e:	8a 83       	std	Y+2, r24	; 0x02
    1f40:	29 c0       	rjmp	.+82     	; 0x1f94 <__stack+0xe95>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1f42:	86 e1       	ldi	r24, 0x16	; 22
    1f44:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	9b 83       	std	Y+3, r25	; 0x03
    1f4c:	8a 83       	std	Y+2, r24	; 0x02
    1f4e:	22 c0       	rjmp	.+68     	; 0x1f94 <__stack+0xe95>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1f50:	86 e1       	ldi	r24, 0x16	; 22
    1f52:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	9b 83       	std	Y+3, r25	; 0x03
    1f5a:	8a 83       	std	Y+2, r24	; 0x02
    1f5c:	1b c0       	rjmp	.+54     	; 0x1f94 <__stack+0xe95>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1f5e:	86 e1       	ldi	r24, 0x16	; 22
    1f60:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	9b 83       	std	Y+3, r25	; 0x03
    1f68:	8a 83       	std	Y+2, r24	; 0x02
    1f6a:	14 c0       	rjmp	.+40     	; 0x1f94 <__stack+0xe95>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1f6c:	86 e1       	ldi	r24, 0x16	; 22
    1f6e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	9b 83       	std	Y+3, r25	; 0x03
    1f76:	8a 83       	std	Y+2, r24	; 0x02
    1f78:	0d c0       	rjmp	.+26     	; 0x1f94 <__stack+0xe95>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1f7a:	86 e1       	ldi	r24, 0x16	; 22
    1f7c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	9b 83       	std	Y+3, r25	; 0x03
    1f84:	8a 83       	std	Y+2, r24	; 0x02
    1f86:	06 c0       	rjmp	.+12     	; 0x1f94 <__stack+0xe95>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1f88:	86 e1       	ldi	r24, 0x16	; 22
    1f8a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	9b 83       	std	Y+3, r25	; 0x03
    1f92:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1f94:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1f98:	88 e0       	ldi	r24, 0x08	; 8
    1f9a:	92 e0       	ldi	r25, 0x02	; 2
    1f9c:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    1fa0:	86 e1       	ldi	r24, 0x16	; 22
    1fa2:	92 e0       	ldi	r25, 0x02	; 2
    1fa4:	40 e0       	ldi	r20, 0x00	; 0
    1fa6:	50 e0       	ldi	r21, 0x00	; 0
    1fa8:	ba 01       	movw	r22, r20
    1faa:	01 e0       	ldi	r16, 0x01	; 1
    1fac:	10 e0       	ldi	r17, 0x00	; 0
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1fb6:	1e a6       	lds	r17, 0xbe
    1fb8:	1f a6       	lds	r17, 0xbf
    1fba:	18 aa       	sts	0x98, r17
    1fbc:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1fbe:	85 e0       	ldi	r24, 0x05	; 5
    1fc0:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	9b 83       	std	Y+3, r25	; 0x03
    1fc8:	8a 83       	std	Y+2, r24	; 0x02
    1fca:	51 c1       	rjmp	.+674    	; 0x226e <__stack+0x116f>
/* The reactions of state MenuA. */
static void sMO_react_main_region_on_r1_Running_running_main_MenuA(SMO* handle) {
	/* The reactions of state MenuA. */
	if (bool_true) { 
		/* Default exit sequence for state MenuA */
		handle->stateConfVector[1] = SMO_last_state;
    1fcc:	86 e1       	ldi	r24, 0x16	; 22
    1fce:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1fd0:	ee 24       	eor	r14, r14
    1fd2:	ff 24       	eor	r15, r15
    1fd4:	e3 94       	inc	r14
    1fd6:	fb 82       	std	Y+3, r15	; 0x03
    1fd8:	ea 82       	std	Y+2, r14	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    1fda:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Nhap ma mon an:");
    1fde:	82 e2       	ldi	r24, 0x22	; 34
    1fe0:	92 e0       	ldi	r25, 0x02	; 2
    1fe2:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    1fe6:	82 e3       	ldi	r24, 0x32	; 50
    1fe8:	92 e0       	ldi	r25, 0x02	; 2
    1fea:	40 e0       	ldi	r20, 0x00	; 0
    1fec:	50 e0       	ldi	r21, 0x00	; 0
    1fee:	ba 01       	movw	r22, r20
    1ff0:	01 e0       	ldi	r16, 0x01	; 1
    1ff2:	10 e0       	ldi	r17, 0x00	; 0
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    1ffc:	19 a6       	lds	r17, 0xb9
    1ffe:	1a a6       	lds	r17, 0xba
    2000:	1b a6       	lds	r17, 0xbb
    2002:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    2004:	19 a2       	lds	r17, 0x99
    2006:	1a a2       	lds	r17, 0x9a
    2008:	1b a2       	lds	r17, 0x9b
    200a:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    200c:	87 e0       	ldi	r24, 0x07	; 7
    200e:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2010:	fb 82       	std	Y+3, r15	; 0x03
    2012:	ea 82       	std	Y+2, r14	; 0x02
    2014:	2c c1       	rjmp	.+600    	; 0x226e <__stack+0x116f>
}

/* The reactions of state CheckKeyPress. */
static void sMO_react_main_region_on_r1_Running_running_main_CheckKeyPress(SMO* handle) {
	/* The reactions of state CheckKeyPress. */
	if (handle->ifaceKEYPAD.lastkey == 13 && handle->ifaceKEYPAD.key_pressed_raised) { 
    2016:	88 85       	ldd	r24, Y+8	; 0x08
    2018:	99 85       	ldd	r25, Y+9	; 0x09
    201a:	aa 85       	ldd	r26, Y+10	; 0x0a
    201c:	bb 85       	ldd	r27, Y+11	; 0x0b
    201e:	8d 30       	cpi	r24, 0x0D	; 13
    2020:	91 05       	cpc	r25, r1
    2022:	a1 05       	cpc	r26, r1
    2024:	b1 05       	cpc	r27, r1
    2026:	09 f0       	breq	.+2      	; 0x202a <__stack+0xf2b>
    2028:	00 c1       	rjmp	.+512    	; 0x222a <__stack+0x112b>
    202a:	8d 85       	ldd	r24, Y+13	; 0x0d
    202c:	88 23       	and	r24, r24
    202e:	09 f4       	brne	.+2      	; 0x2032 <__stack+0xf33>
    2030:	fc c0       	rjmp	.+504    	; 0x222a <__stack+0x112b>
		/* Default exit sequence for state CheckKeyPress */
		handle->stateConfVector[1] = SMO_last_state;
		handle->stateConfVectorPosition = 1;
    2032:	1b 83       	std	Y+3, r17	; 0x03
    2034:	0a 83       	std	Y+2, r16	; 0x02
		/* Default enter sequence for state MenuA */
		/* Entry action for state 'MenuA'. */
		handle->iface.menuId = 1;
    2036:	4e a6       	lds	r20, 0xbe
    2038:	5f a6       	lds	r21, 0xbf
    203a:	68 aa       	sts	0x98, r22
    203c:	79 aa       	sts	0x99, r23
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_MenuA;
    203e:	e0 e1       	ldi	r30, 0x10	; 16
    2040:	e9 83       	std	Y+1, r30	; 0x01
    2042:	f3 c0       	rjmp	.+486    	; 0x222a <__stack+0x112b>
}

/* The reactions of state Send. */
static void sMO_react_main_region_on_r1_Running_running_main_SendData_r1_Send(SMO* handle) {
	/* The reactions of state Send. */
	if (handle->ifaceRF.result == bool_true) { 
    2044:	8f 89       	ldd	r24, Y+23	; 0x17
    2046:	88 23       	and	r24, r24
    2048:	d9 f1       	breq	.+118    	; 0x20c0 <__stack+0xfc1>
		/* Default exit sequence for state SendData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	84 31       	cpi	r24, 0x14	; 20
    204e:	59 f0       	breq	.+22     	; 0x2066 <__stack+0xf67>
    2050:	85 31       	cpi	r24, 0x15	; 21
    2052:	81 f0       	breq	.+32     	; 0x2074 <__stack+0xf75>
    2054:	83 31       	cpi	r24, 0x13	; 19
    2056:	a1 f4       	brne	.+40     	; 0x2080 <__stack+0xf81>
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    2058:	86 e1       	ldi	r24, 0x16	; 22
    205a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	9b 83       	std	Y+3, r25	; 0x03
    2062:	8a 83       	std	Y+2, r24	; 0x02
    2064:	0d c0       	rjmp	.+26     	; 0x2080 <__stack+0xf81>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    2066:	86 e1       	ldi	r24, 0x16	; 22
    2068:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	9b 83       	std	Y+3, r25	; 0x03
    2070:	8a 83       	std	Y+2, r24	; 0x02
    2072:	06 c0       	rjmp	.+12     	; 0x2080 <__stack+0xf81>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2074:	86 e1       	ldi	r24, 0x16	; 22
    2076:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	9b 83       	std	Y+3, r25	; 0x03
    207e:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    2080:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Nhap ma mon an:");
    2084:	82 e2       	ldi	r24, 0x22	; 34
    2086:	92 e0       	ldi	r25, 0x02	; 2
    2088:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    208c:	82 e3       	ldi	r24, 0x32	; 50
    208e:	92 e0       	ldi	r25, 0x02	; 2
    2090:	40 e0       	ldi	r20, 0x00	; 0
    2092:	50 e0       	ldi	r21, 0x00	; 0
    2094:	ba 01       	movw	r22, r20
    2096:	01 e0       	ldi	r16, 0x01	; 1
    2098:	10 e0       	ldi	r17, 0x00	; 0
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    20a2:	19 a6       	lds	r17, 0xb9
    20a4:	1a a6       	lds	r17, 0xba
    20a6:	1b a6       	lds	r17, 0xbb
    20a8:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    20aa:	19 a2       	lds	r17, 0x99
    20ac:	1a a2       	lds	r17, 0x9a
    20ae:	1b a2       	lds	r17, 0x9b
    20b0:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    20b2:	87 e0       	ldi	r24, 0x07	; 7
    20b4:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	9b 83       	std	Y+3, r25	; 0x03
    20bc:	8a 83       	std	Y+2, r24	; 0x02
    20be:	d7 c0       	rjmp	.+430    	; 0x226e <__stack+0x116f>
			handle->stateConfVectorPosition = 1;
		}  else {
			if (handle->ifaceRF.result == bool_false) { 
				/* Default enter sequence for state Send */
				/* Entry action for state 'Send'. */
				handle->ifaceRF.result = sMOIfaceRF_sendData(handle->iface.menuId, handle->iface.tableId, handle->ifaceDISH.ID, handle->ifaceDISH.amount);
    20c0:	6e a5       	lds	r22, 0x6e
    20c2:	7f a5       	lds	r23, 0x6f
    20c4:	88 a9       	sts	0x48, r24
    20c6:	99 a9       	sts	0x49, r25
    20c8:	2a a9       	sts	0x4a, r18
    20ca:	3b a9       	sts	0x4b, r19
    20cc:	4c a9       	sts	0x4c, r20
    20ce:	5d a9       	sts	0x4d, r21
    20d0:	e9 a0       	lds	r30, 0x89
    20d2:	fa a0       	lds	r31, 0x8a
    20d4:	0b a1       	lds	r16, 0x4b
    20d6:	1c a1       	lds	r17, 0x4c
    20d8:	ad a0       	lds	r26, 0x8d
    20da:	be a0       	lds	r27, 0x8e
    20dc:	cf a0       	lds	r28, 0x8f
    20de:	d8 a4       	lds	r29, 0xa8
    20e0:	0e 94 09 03 	call	0x612	; 0x612 <sMOIfaceRF_sendData>
    20e4:	8f 8b       	std	Y+23, r24	; 0x17
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_Send;
    20e6:	83 e1       	ldi	r24, 0x13	; 19
    20e8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	9b 83       	std	Y+3, r25	; 0x03
    20f0:	8a 83       	std	Y+2, r24	; 0x02
    20f2:	bd c0       	rjmp	.+378    	; 0x226e <__stack+0x116f>
}

/* The reactions of state Check. */
static void sMO_react_main_region_on_r1_Running_running_main_SendData_r1_Check(SMO* handle) {
	/* The reactions of state Check. */
	if (handle->ifaceRF.result == bool_true) { 
    20f4:	8f 89       	ldd	r24, Y+23	; 0x17
    20f6:	88 23       	and	r24, r24
    20f8:	d9 f1       	breq	.+118    	; 0x2170 <__stack+0x1071>
		/* Default exit sequence for state SendData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	84 31       	cpi	r24, 0x14	; 20
    20fe:	59 f0       	breq	.+22     	; 0x2116 <__stack+0x1017>
    2100:	85 31       	cpi	r24, 0x15	; 21
    2102:	81 f0       	breq	.+32     	; 0x2124 <__stack+0x1025>
    2104:	83 31       	cpi	r24, 0x13	; 19
    2106:	a1 f4       	brne	.+40     	; 0x2130 <__stack+0x1031>
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    2108:	86 e1       	ldi	r24, 0x16	; 22
    210a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	9b 83       	std	Y+3, r25	; 0x03
    2112:	8a 83       	std	Y+2, r24	; 0x02
    2114:	0d c0       	rjmp	.+26     	; 0x2130 <__stack+0x1031>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    2116:	86 e1       	ldi	r24, 0x16	; 22
    2118:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	9b 83       	std	Y+3, r25	; 0x03
    2120:	8a 83       	std	Y+2, r24	; 0x02
    2122:	06 c0       	rjmp	.+12     	; 0x2130 <__stack+0x1031>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2124:	86 e1       	ldi	r24, 0x16	; 22
    2126:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	9b 83       	std	Y+3, r25	; 0x03
    212e:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    2130:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Nhap ma mon an:");
    2134:	82 e2       	ldi	r24, 0x22	; 34
    2136:	92 e0       	ldi	r25, 0x02	; 2
    2138:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    213c:	82 e3       	ldi	r24, 0x32	; 50
    213e:	92 e0       	ldi	r25, 0x02	; 2
    2140:	40 e0       	ldi	r20, 0x00	; 0
    2142:	50 e0       	ldi	r21, 0x00	; 0
    2144:	ba 01       	movw	r22, r20
    2146:	01 e0       	ldi	r16, 0x01	; 1
    2148:	10 e0       	ldi	r17, 0x00	; 0
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    2152:	19 a6       	lds	r17, 0xb9
    2154:	1a a6       	lds	r17, 0xba
    2156:	1b a6       	lds	r17, 0xbb
    2158:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    215a:	19 a2       	lds	r17, 0x99
    215c:	1a a2       	lds	r17, 0x9a
    215e:	1b a2       	lds	r17, 0x9b
    2160:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    2162:	87 e0       	ldi	r24, 0x07	; 7
    2164:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	9b 83       	std	Y+3, r25	; 0x03
    216c:	8a 83       	std	Y+2, r24	; 0x02
    216e:	7f c0       	rjmp	.+254    	; 0x226e <__stack+0x116f>
	}  else {
		if (handle->ifaceRF.result == bool_false) { 
			/* Default exit sequence for state Check */
			handle->stateConfVector[1] = SMO_last_state;
    2170:	86 e1       	ldi	r24, 0x16	; 22
    2172:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    2174:	88 24       	eor	r8, r8
    2176:	99 24       	eor	r9, r9
    2178:	83 94       	inc	r8
    217a:	9b 82       	std	Y+3, r9	; 0x03
    217c:	8a 82       	std	Y+2, r8	; 0x02
			/* Default enter sequence for state Send */
			/* Entry action for state 'Send'. */
			handle->ifaceRF.result = sMOIfaceRF_sendData(handle->iface.menuId, handle->iface.tableId, handle->ifaceDISH.ID, handle->ifaceDISH.amount);
    217e:	6e a5       	lds	r22, 0x6e
    2180:	7f a5       	lds	r23, 0x6f
    2182:	88 a9       	sts	0x48, r24
    2184:	99 a9       	sts	0x49, r25
    2186:	2a a9       	sts	0x4a, r18
    2188:	3b a9       	sts	0x4b, r19
    218a:	4c a9       	sts	0x4c, r20
    218c:	5d a9       	sts	0x4d, r21
    218e:	e9 a0       	lds	r30, 0x89
    2190:	fa a0       	lds	r31, 0x8a
    2192:	0b a1       	lds	r16, 0x4b
    2194:	1c a1       	lds	r17, 0x4c
    2196:	ad a0       	lds	r26, 0x8d
    2198:	be a0       	lds	r27, 0x8e
    219a:	cf a0       	lds	r28, 0x8f
    219c:	d8 a4       	lds	r29, 0xa8
    219e:	0e 94 09 03 	call	0x612	; 0x612 <sMOIfaceRF_sendData>
    21a2:	8f 8b       	std	Y+23, r24	; 0x17
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_Send;
    21a4:	83 e1       	ldi	r24, 0x13	; 19
    21a6:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    21a8:	9b 82       	std	Y+3, r9	; 0x03
    21aa:	8a 82       	std	Y+2, r8	; 0x02
    21ac:	60 c0       	rjmp	.+192    	; 0x226e <__stack+0x116f>
}

/* The reactions of state null. */
static void sMO_react_main_region_on_r1_Running_running_main_SendData_r1__final_0(SMO* handle) {
	/* The reactions of state null. */
	if (handle->ifaceRF.result == bool_true) { 
    21ae:	8f 89       	ldd	r24, Y+23	; 0x17
    21b0:	88 23       	and	r24, r24
    21b2:	d9 f1       	breq	.+118    	; 0x222a <__stack+0x112b>
		/* Default exit sequence for state SendData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	84 31       	cpi	r24, 0x14	; 20
    21b8:	59 f0       	breq	.+22     	; 0x21d0 <__stack+0x10d1>
    21ba:	85 31       	cpi	r24, 0x15	; 21
    21bc:	81 f0       	breq	.+32     	; 0x21de <__stack+0x10df>
    21be:	83 31       	cpi	r24, 0x13	; 19
    21c0:	a1 f4       	brne	.+40     	; 0x21ea <__stack+0x10eb>
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    21c2:	86 e1       	ldi	r24, 0x16	; 22
    21c4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	9b 83       	std	Y+3, r25	; 0x03
    21cc:	8a 83       	std	Y+2, r24	; 0x02
    21ce:	0d c0       	rjmp	.+26     	; 0x21ea <__stack+0x10eb>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    21d0:	86 e1       	ldi	r24, 0x16	; 22
    21d2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	9b 83       	std	Y+3, r25	; 0x03
    21da:	8a 83       	std	Y+2, r24	; 0x02
    21dc:	06 c0       	rjmp	.+12     	; 0x21ea <__stack+0x10eb>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    21de:	86 e1       	ldi	r24, 0x16	; 22
    21e0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	9b 83       	std	Y+3, r25	; 0x03
    21e8:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    21ea:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Nhap ma mon an:");
    21ee:	82 e2       	ldi	r24, 0x22	; 34
    21f0:	92 e0       	ldi	r25, 0x02	; 2
    21f2:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    21f6:	82 e3       	ldi	r24, 0x32	; 50
    21f8:	92 e0       	ldi	r25, 0x02	; 2
    21fa:	40 e0       	ldi	r20, 0x00	; 0
    21fc:	50 e0       	ldi	r21, 0x00	; 0
    21fe:	ba 01       	movw	r22, r20
    2200:	01 e0       	ldi	r16, 0x01	; 1
    2202:	10 e0       	ldi	r17, 0x00	; 0
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    220c:	19 a6       	lds	r17, 0xb9
    220e:	1a a6       	lds	r17, 0xba
    2210:	1b a6       	lds	r17, 0xbb
    2212:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    2214:	19 a2       	lds	r17, 0x99
    2216:	1a a2       	lds	r17, 0x9a
    2218:	1b a2       	lds	r17, 0x9b
    221a:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    221c:	87 e0       	ldi	r24, 0x07	; 7
    221e:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	9b 83       	std	Y+3, r25	; 0x03
    2226:	8a 83       	std	Y+2, r24	; 0x02
    2228:	22 c0       	rjmp	.+68     	; 0x226e <__stack+0x116f>
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
    222a:	8a 81       	ldd	r24, Y+2	; 0x02
    222c:	9b 81       	ldd	r25, Y+3	; 0x03
    222e:	01 96       	adiw	r24, 0x01	; 1
    2230:	9b 83       	std	Y+3, r25	; 0x03
    2232:	8a 83       	std	Y+2, r24	; 0x02

void sMO_runCycle(SMO* handle) {
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
    2234:	82 30       	cpi	r24, 0x02	; 2
    2236:	91 05       	cpc	r25, r1
    2238:	10 f4       	brcc	.+4      	; 0x223e <__stack+0x113f>
    223a:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <sMO_runCycle+0x64>
	}
	sMO_exitaction(handle);
}

static void clearInEvents(SMO* handle) {
	handle->ifaceKEYPAD.key_pressed_raised = bool_false;
    223e:	1d 86       	std	Y+13, r1	; 0x0d
	handle->ifaceUART.DataRecieved_raised = bool_false;
    2240:	1a 8a       	std	Y+18, r1	; 0x12
	handle->ifaceRF.DataRecieved_raised = bool_false;
    2242:	18 a2       	lds	r17, 0x98
	handle->iface.switchOff_raised = bool_false;
    2244:	1e aa       	sts	0x9e, r17
	handle->iface.switchOn_raised = bool_false;
    2246:	1f aa       	sts	0x9f, r17
			break;
		}
	}
	
	clearInEvents(handle);
}
    2248:	df 91       	pop	r29
    224a:	cf 91       	pop	r28
    224c:	1f 91       	pop	r17
    224e:	0f 91       	pop	r16
    2250:	ff 90       	pop	r15
    2252:	ef 90       	pop	r14
    2254:	df 90       	pop	r13
    2256:	cf 90       	pop	r12
    2258:	bf 90       	pop	r11
    225a:	af 90       	pop	r10
    225c:	9f 90       	pop	r9
    225e:	8f 90       	pop	r8
    2260:	7f 90       	pop	r7
    2262:	6f 90       	pop	r6
    2264:	5f 90       	pop	r5
    2266:	4f 90       	pop	r4
    2268:	3f 90       	pop	r3
    226a:	2f 90       	pop	r2
    226c:	08 95       	ret
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
    226e:	8a 81       	ldd	r24, Y+2	; 0x02
    2270:	9b 81       	ldd	r25, Y+3	; 0x03
    2272:	01 96       	adiw	r24, 0x01	; 1
    2274:	9b 83       	std	Y+3, r25	; 0x03
    2276:	8a 83       	std	Y+2, r24	; 0x02
    2278:	e2 cf       	rjmp	.-60     	; 0x223e <__stack+0x113f>
    227a:	8a 81       	ldd	r24, Y+2	; 0x02
    227c:	9b 81       	ldd	r25, Y+3	; 0x03
    227e:	01 96       	adiw	r24, 0x01	; 1
    2280:	9b 83       	std	Y+3, r25	; 0x03
    2282:	8a 83       	std	Y+2, r24	; 0x02
    2284:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <sMO_runCycle+0x64>

00002288 <sMO_raiseTimeEvent>:
	
	clearInEvents(handle);
}

void sMO_raiseTimeEvent(SMO* handle, sc_eventid evid) {
	if ( ((intptr_t)evid) >= ((intptr_t)&(handle->timeEvents))
    2288:	c8 96       	adiw	r24, 0x38	; 56
    228a:	68 17       	cp	r22, r24
    228c:	79 07       	cpc	r23, r25
    228e:	3c f0       	brlt	.+14     	; 0x229e <sMO_raiseTimeEvent+0x16>
		&&  ((intptr_t)evid) < ((intptr_t)&(handle->timeEvents)) + sizeof(SMOTimeEvents)) {
    2290:	01 96       	adiw	r24, 0x01	; 1
    2292:	68 17       	cp	r22, r24
    2294:	79 07       	cpc	r23, r25
    2296:	18 f4       	brcc	.+6      	; 0x229e <sMO_raiseTimeEvent+0x16>
		*(sc_boolean*)evid = bool_true;
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	fb 01       	movw	r30, r22
    229c:	80 83       	st	Z, r24
    229e:	08 95       	ret

000022a0 <sMO_isActive>:
	}		
}

sc_boolean sMO_isActive(SMO* handle, SMOStates state) {
    22a0:	dc 01       	movw	r26, r24
	switch (state) {
    22a2:	e6 2f       	mov	r30, r22
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	e6 31       	cpi	r30, 0x16	; 22
    22a8:	f1 05       	cpc	r31, r1
    22aa:	08 f0       	brcs	.+2      	; 0x22ae <sMO_isActive+0xe>
    22ac:	bf c0       	rjmp	.+382    	; 0x242c <sMO_isActive+0x18c>
    22ae:	e5 5a       	subi	r30, 0xA5	; 165
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	ee 0f       	add	r30, r30
    22b4:	ff 1f       	adc	r31, r31
    22b6:	05 90       	lpm	r0, Z+
    22b8:	f4 91       	lpm	r31, Z
    22ba:	e0 2d       	mov	r30, r0
    22bc:	09 94       	ijmp
		case SMO_main_region_on : 
			return (sc_boolean) (handle->stateConfVector[0] >= SMO_main_region_on
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	9c 91       	ld	r25, X
    22c2:	96 31       	cpi	r25, 0x16	; 22
    22c4:	08 f4       	brcc	.+2      	; 0x22c8 <sMO_isActive+0x28>
    22c6:	b3 c0       	rjmp	.+358    	; 0x242e <sMO_isActive+0x18e>
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	08 95       	ret
				&& handle->stateConfVector[0] <= SMO_main_region_on_r1_Running_running_main_SendData_r1__final_);
		case SMO_main_region_on_r1_Init : 
			return (sc_boolean) (handle->stateConfVector[0] == SMO_main_region_on_r1_Init
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	9c 91       	ld	r25, X
    22d0:	91 30       	cpi	r25, 0x01	; 1
    22d2:	09 f4       	brne	.+2      	; 0x22d6 <sMO_isActive+0x36>
    22d4:	ac c0       	rjmp	.+344    	; 0x242e <sMO_isActive+0x18e>
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running : 
			return (sc_boolean) (handle->stateConfVector[0] >= SMO_main_region_on_r1_Running
    22da:	9c 91       	ld	r25, X
    22dc:	92 50       	subi	r25, 0x02	; 2
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	94 31       	cpi	r25, 0x14	; 20
    22e2:	08 f4       	brcc	.+2      	; 0x22e6 <sMO_isActive+0x46>
    22e4:	a4 c0       	rjmp	.+328    	; 0x242e <sMO_isActive+0x18e>
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	08 95       	ret
				&& handle->stateConfVector[0] <= SMO_main_region_on_r1_Running_running_main_SendData_r1__final_);
		case SMO_main_region_on_r1_Running_keypad_CheckKey : 
			return (sc_boolean) (handle->stateConfVector[0] == SMO_main_region_on_r1_Running_keypad_CheckKey
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	9c 91       	ld	r25, X
    22ee:	93 30       	cpi	r25, 0x03	; 3
    22f0:	09 f4       	brne	.+2      	; 0x22f4 <sMO_isActive+0x54>
    22f2:	9d c0       	rjmp	.+314    	; 0x242e <sMO_isActive+0x18e>
    22f4:	80 e0       	ldi	r24, 0x00	; 0
    22f6:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_keypad_CheckKeyDown : 
			return (sc_boolean) (handle->stateConfVector[0] == SMO_main_region_on_r1_Running_keypad_CheckKeyDown
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	9c 91       	ld	r25, X
    22fc:	94 30       	cpi	r25, 0x04	; 4
    22fe:	09 f4       	brne	.+2      	; 0x2302 <sMO_isActive+0x62>
    2300:	96 c0       	rjmp	.+300    	; 0x242e <sMO_isActive+0x18e>
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_ShowMenu : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_ShowMenu
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	11 96       	adiw	r26, 0x01	; 1
    230a:	9c 91       	ld	r25, X
    230c:	11 97       	sbiw	r26, 0x01	; 1
    230e:	95 30       	cpi	r25, 0x05	; 5
    2310:	09 f4       	brne	.+2      	; 0x2314 <sMO_isActive+0x74>
    2312:	8d c0       	rjmp	.+282    	; 0x242e <sMO_isActive+0x18e>
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData : 
			return (sc_boolean) (handle->stateConfVector[1] >= SMO_main_region_on_r1_Running_running_main_EnterData
    2318:	11 96       	adiw	r26, 0x01	; 1
    231a:	9c 91       	ld	r25, X
    231c:	11 97       	sbiw	r26, 0x01	; 1
    231e:	96 50       	subi	r25, 0x06	; 6
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	9a 30       	cpi	r25, 0x0A	; 10
    2324:	08 f4       	brcc	.+2      	; 0x2328 <sMO_isActive+0x88>
    2326:	83 c0       	rjmp	.+262    	; 0x242e <sMO_isActive+0x18e>
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	08 95       	ret
				&& handle->stateConfVector[1] <= SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	11 96       	adiw	r26, 0x01	; 1
    2330:	9c 91       	ld	r25, X
    2332:	11 97       	sbiw	r26, 0x01	; 1
    2334:	97 30       	cpi	r25, 0x07	; 7
    2336:	09 f4       	brne	.+2      	; 0x233a <sMO_isActive+0x9a>
    2338:	7a c0       	rjmp	.+244    	; 0x242e <sMO_isActive+0x18e>
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	11 96       	adiw	r26, 0x01	; 1
    2342:	9c 91       	ld	r25, X
    2344:	11 97       	sbiw	r26, 0x01	; 1
    2346:	98 30       	cpi	r25, 0x08	; 8
    2348:	09 f4       	brne	.+2      	; 0x234c <sMO_isActive+0xac>
    234a:	71 c0       	rjmp	.+226    	; 0x242e <sMO_isActive+0x18e>
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	11 96       	adiw	r26, 0x01	; 1
    2354:	9c 91       	ld	r25, X
    2356:	11 97       	sbiw	r26, 0x01	; 1
    2358:	99 30       	cpi	r25, 0x09	; 9
    235a:	09 f4       	brne	.+2      	; 0x235e <sMO_isActive+0xbe>
    235c:	68 c0       	rjmp	.+208    	; 0x242e <sMO_isActive+0x18e>
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	11 96       	adiw	r26, 0x01	; 1
    2366:	9c 91       	ld	r25, X
    2368:	11 97       	sbiw	r26, 0x01	; 1
    236a:	9a 30       	cpi	r25, 0x0A	; 10
    236c:	09 f4       	brne	.+2      	; 0x2370 <sMO_isActive+0xd0>
    236e:	5f c0       	rjmp	.+190    	; 0x242e <sMO_isActive+0x18e>
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	11 96       	adiw	r26, 0x01	; 1
    2378:	9c 91       	ld	r25, X
    237a:	11 97       	sbiw	r26, 0x01	; 1
    237c:	9b 30       	cpi	r25, 0x0B	; 11
    237e:	09 f4       	brne	.+2      	; 0x2382 <sMO_isActive+0xe2>
    2380:	56 c0       	rjmp	.+172    	; 0x242e <sMO_isActive+0x18e>
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	11 96       	adiw	r26, 0x01	; 1
    238a:	9c 91       	ld	r25, X
    238c:	11 97       	sbiw	r26, 0x01	; 1
    238e:	9c 30       	cpi	r25, 0x0C	; 12
    2390:	09 f4       	brne	.+2      	; 0x2394 <sMO_isActive+0xf4>
    2392:	4d c0       	rjmp	.+154    	; 0x242e <sMO_isActive+0x18e>
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	11 96       	adiw	r26, 0x01	; 1
    239c:	9c 91       	ld	r25, X
    239e:	11 97       	sbiw	r26, 0x01	; 1
    23a0:	9d 30       	cpi	r25, 0x0D	; 13
    23a2:	09 f4       	brne	.+2      	; 0x23a6 <sMO_isActive+0x106>
    23a4:	44 c0       	rjmp	.+136    	; 0x242e <sMO_isActive+0x18e>
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	11 96       	adiw	r26, 0x01	; 1
    23ae:	9c 91       	ld	r25, X
    23b0:	11 97       	sbiw	r26, 0x01	; 1
    23b2:	9e 30       	cpi	r25, 0x0E	; 14
    23b4:	e1 f1       	breq	.+120    	; 0x242e <sMO_isActive+0x18e>
    23b6:	80 e0       	ldi	r24, 0x00	; 0
    23b8:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	11 96       	adiw	r26, 0x01	; 1
    23be:	9c 91       	ld	r25, X
    23c0:	11 97       	sbiw	r26, 0x01	; 1
    23c2:	9f 30       	cpi	r25, 0x0F	; 15
    23c4:	a1 f1       	breq	.+104    	; 0x242e <sMO_isActive+0x18e>
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_MenuA : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_MenuA
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	11 96       	adiw	r26, 0x01	; 1
    23ce:	9c 91       	ld	r25, X
    23d0:	11 97       	sbiw	r26, 0x01	; 1
    23d2:	90 31       	cpi	r25, 0x10	; 16
    23d4:	61 f1       	breq	.+88     	; 0x242e <sMO_isActive+0x18e>
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_CheckKeyPress : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_CheckKeyPress
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	11 96       	adiw	r26, 0x01	; 1
    23de:	9c 91       	ld	r25, X
    23e0:	11 97       	sbiw	r26, 0x01	; 1
    23e2:	91 31       	cpi	r25, 0x11	; 17
    23e4:	21 f1       	breq	.+72     	; 0x242e <sMO_isActive+0x18e>
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendData : 
			return (sc_boolean) (handle->stateConfVector[1] >= SMO_main_region_on_r1_Running_running_main_SendData
    23ea:	11 96       	adiw	r26, 0x01	; 1
    23ec:	9c 91       	ld	r25, X
    23ee:	11 97       	sbiw	r26, 0x01	; 1
    23f0:	92 51       	subi	r25, 0x12	; 18
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	94 30       	cpi	r25, 0x04	; 4
    23f6:	d8 f0       	brcs	.+54     	; 0x242e <sMO_isActive+0x18e>
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	08 95       	ret
				&& handle->stateConfVector[1] <= SMO_main_region_on_r1_Running_running_main_SendData_r1__final_);
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendData_r1_Send
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	11 96       	adiw	r26, 0x01	; 1
    2400:	9c 91       	ld	r25, X
    2402:	11 97       	sbiw	r26, 0x01	; 1
    2404:	93 31       	cpi	r25, 0x13	; 19
    2406:	99 f0       	breq	.+38     	; 0x242e <sMO_isActive+0x18e>
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendData_r1_Check
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	11 96       	adiw	r26, 0x01	; 1
    2410:	9c 91       	ld	r25, X
    2412:	11 97       	sbiw	r26, 0x01	; 1
    2414:	94 31       	cpi	r25, 0x14	; 20
    2416:	59 f0       	breq	.+22     	; 0x242e <sMO_isActive+0x18e>
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendData_r1__final_
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	11 96       	adiw	r26, 0x01	; 1
    2420:	9c 91       	ld	r25, X
    2422:	11 97       	sbiw	r26, 0x01	; 1
    2424:	95 31       	cpi	r25, 0x15	; 21
    2426:	19 f0       	breq	.+6      	; 0x242e <sMO_isActive+0x18e>
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	08 95       	ret
			);
		default: return bool_false;
    242c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    242e:	08 95       	ret

00002430 <sMOIfaceKEYPAD_raise_key_pressed>:



void sMOIfaceKEYPAD_raise_key_pressed(SMO* handle) {
	handle->ifaceKEYPAD.key_pressed_raised = bool_true;
    2430:	21 e0       	ldi	r18, 0x01	; 1
    2432:	fc 01       	movw	r30, r24
    2434:	25 87       	std	Z+13, r18	; 0x0d
}
    2436:	08 95       	ret

00002438 <sMOIfaceKEYPAD_get_key>:


sc_integer sMOIfaceKEYPAD_get_key(SMO* handle) {
    2438:	fc 01       	movw	r30, r24
	return handle->ifaceKEYPAD.key;
    243a:	64 81       	ldd	r22, Z+4	; 0x04
    243c:	75 81       	ldd	r23, Z+5	; 0x05
}
    243e:	86 81       	ldd	r24, Z+6	; 0x06
    2440:	97 81       	ldd	r25, Z+7	; 0x07
    2442:	08 95       	ret

00002444 <sMOIfaceKEYPAD_set_key>:
void sMOIfaceKEYPAD_set_key(SMO* handle, sc_integer value) {
	handle->ifaceKEYPAD.key = value;
    2444:	fc 01       	movw	r30, r24
    2446:	44 83       	std	Z+4, r20	; 0x04
    2448:	55 83       	std	Z+5, r21	; 0x05
    244a:	66 83       	std	Z+6, r22	; 0x06
    244c:	77 83       	std	Z+7, r23	; 0x07
}
    244e:	08 95       	ret

00002450 <sMOIfaceKEYPAD_get_lastkey>:
sc_integer sMOIfaceKEYPAD_get_lastkey(SMO* handle) {
    2450:	fc 01       	movw	r30, r24
	return handle->ifaceKEYPAD.lastkey;
    2452:	60 85       	ldd	r22, Z+8	; 0x08
    2454:	71 85       	ldd	r23, Z+9	; 0x09
}
    2456:	82 85       	ldd	r24, Z+10	; 0x0a
    2458:	93 85       	ldd	r25, Z+11	; 0x0b
    245a:	08 95       	ret

0000245c <sMOIfaceKEYPAD_set_lastkey>:
void sMOIfaceKEYPAD_set_lastkey(SMO* handle, sc_integer value) {
	handle->ifaceKEYPAD.lastkey = value;
    245c:	fc 01       	movw	r30, r24
    245e:	40 87       	std	Z+8, r20	; 0x08
    2460:	51 87       	std	Z+9, r21	; 0x09
    2462:	62 87       	std	Z+10, r22	; 0x0a
    2464:	73 87       	std	Z+11, r23	; 0x0b
}
    2466:	08 95       	ret

00002468 <sMOIfaceKEYPAD_get_key_down>:
sc_boolean sMOIfaceKEYPAD_get_key_down(SMO* handle) {
	return handle->ifaceKEYPAD.key_down;
}
    2468:	fc 01       	movw	r30, r24
    246a:	84 85       	ldd	r24, Z+12	; 0x0c
    246c:	08 95       	ret

0000246e <sMOIfaceKEYPAD_set_key_down>:
void sMOIfaceKEYPAD_set_key_down(SMO* handle, sc_boolean value) {
	handle->ifaceKEYPAD.key_down = value;
    246e:	fc 01       	movw	r30, r24
    2470:	64 87       	std	Z+12, r22	; 0x0c
}
    2472:	08 95       	ret

00002474 <sMOIfaceUART_raise_dataRecieved>:
void sMOIfaceUART_raise_dataRecieved(SMO* handle) {
	handle->ifaceUART.DataRecieved_raised = bool_true;
    2474:	21 e0       	ldi	r18, 0x01	; 1
    2476:	fc 01       	movw	r30, r24
    2478:	22 8b       	std	Z+18, r18	; 0x12
}
    247a:	08 95       	ret

0000247c <sMOIfaceUART_get_data>:


sc_string sMOIfaceUART_get_data(SMO* handle) {
    247c:	fc 01       	movw	r30, r24
	return handle->ifaceUART.data;
}
    247e:	86 85       	ldd	r24, Z+14	; 0x0e
    2480:	97 85       	ldd	r25, Z+15	; 0x0f
    2482:	08 95       	ret

00002484 <sMOIfaceUART_set_data>:
void sMOIfaceUART_set_data(SMO* handle, sc_string value) {
	handle->ifaceUART.data = value;
    2484:	fc 01       	movw	r30, r24
    2486:	77 87       	std	Z+15, r23	; 0x0f
    2488:	66 87       	std	Z+14, r22	; 0x0e
}
    248a:	08 95       	ret

0000248c <sMOIfaceUART_get_lastdata>:
sc_string sMOIfaceUART_get_lastdata(SMO* handle) {
    248c:	fc 01       	movw	r30, r24
	return handle->ifaceUART.lastdata;
}
    248e:	80 89       	ldd	r24, Z+16	; 0x10
    2490:	91 89       	ldd	r25, Z+17	; 0x11
    2492:	08 95       	ret

00002494 <sMOIfaceUART_set_lastdata>:
void sMOIfaceUART_set_lastdata(SMO* handle, sc_string value) {
	handle->ifaceUART.lastdata = value;
    2494:	fc 01       	movw	r30, r24
    2496:	71 8b       	std	Z+17, r23	; 0x11
    2498:	60 8b       	std	Z+16, r22	; 0x10
}
    249a:	08 95       	ret

0000249c <sMOIfaceRF_raise_dataRecieved>:
void sMOIfaceRF_raise_dataRecieved(SMO* handle) {
	handle->ifaceRF.DataRecieved_raised = bool_true;
    249c:	21 e0       	ldi	r18, 0x01	; 1
    249e:	fc 01       	movw	r30, r24
    24a0:	20 a3       	lds	r18, 0x50
}
    24a2:	08 95       	ret

000024a4 <sMOIfaceRF_get_data>:


sc_string sMOIfaceRF_get_data(SMO* handle) {
    24a4:	fc 01       	movw	r30, r24
	return handle->ifaceRF.data;
}
    24a6:	83 89       	ldd	r24, Z+19	; 0x13
    24a8:	94 89       	ldd	r25, Z+20	; 0x14
    24aa:	08 95       	ret

000024ac <sMOIfaceRF_set_data>:
void sMOIfaceRF_set_data(SMO* handle, sc_string value) {
	handle->ifaceRF.data = value;
    24ac:	fc 01       	movw	r30, r24
    24ae:	74 8b       	std	Z+20, r23	; 0x14
    24b0:	63 8b       	std	Z+19, r22	; 0x13
}
    24b2:	08 95       	ret

000024b4 <sMOIfaceRF_get_lastdata>:
sc_string sMOIfaceRF_get_lastdata(SMO* handle) {
    24b4:	fc 01       	movw	r30, r24
	return handle->ifaceRF.lastdata;
}
    24b6:	85 89       	ldd	r24, Z+21	; 0x15
    24b8:	96 89       	ldd	r25, Z+22	; 0x16
    24ba:	08 95       	ret

000024bc <sMOIfaceRF_set_lastdata>:
void sMOIfaceRF_set_lastdata(SMO* handle, sc_string value) {
	handle->ifaceRF.lastdata = value;
    24bc:	fc 01       	movw	r30, r24
    24be:	76 8b       	std	Z+22, r23	; 0x16
    24c0:	65 8b       	std	Z+21, r22	; 0x15
}
    24c2:	08 95       	ret

000024c4 <sMOIfaceRF_get_result>:
sc_boolean sMOIfaceRF_get_result(SMO* handle) {
	return handle->ifaceRF.result;
}
    24c4:	fc 01       	movw	r30, r24
    24c6:	87 89       	ldd	r24, Z+23	; 0x17
    24c8:	08 95       	ret

000024ca <sMOIfaceRF_set_result>:
void sMOIfaceRF_set_result(SMO* handle, sc_boolean value) {
	handle->ifaceRF.result = value;
    24ca:	fc 01       	movw	r30, r24
    24cc:	67 8b       	std	Z+23, r22	; 0x17
}
    24ce:	08 95       	ret

000024d0 <sMOIfaceRF_get_retry>:
sc_integer sMOIfaceRF_get_retry(SMO* handle) {
    24d0:	fc 01       	movw	r30, r24
	return handle->ifaceRF.retry;
    24d2:	60 8d       	ldd	r22, Z+24	; 0x18
    24d4:	71 8d       	ldd	r23, Z+25	; 0x19
}
    24d6:	82 8d       	ldd	r24, Z+26	; 0x1a
    24d8:	93 8d       	ldd	r25, Z+27	; 0x1b
    24da:	08 95       	ret

000024dc <sMOIfaceRF_set_retry>:
void sMOIfaceRF_set_retry(SMO* handle, sc_integer value) {
	handle->ifaceRF.retry = value;
    24dc:	fc 01       	movw	r30, r24
    24de:	40 8f       	std	Z+24, r20	; 0x18
    24e0:	51 8f       	std	Z+25, r21	; 0x19
    24e2:	62 8f       	std	Z+26, r22	; 0x1a
    24e4:	73 8f       	std	Z+27, r23	; 0x1b
}
    24e6:	08 95       	ret

000024e8 <sMOIfaceRF_get_iD>:
sc_integer sMOIfaceRF_get_iD(SMO* handle) {
    24e8:	fc 01       	movw	r30, r24
	return handle->ifaceRF.ID;
    24ea:	64 8d       	ldd	r22, Z+28	; 0x1c
    24ec:	75 8d       	ldd	r23, Z+29	; 0x1d
}
    24ee:	86 8d       	ldd	r24, Z+30	; 0x1e
    24f0:	97 8d       	ldd	r25, Z+31	; 0x1f
    24f2:	08 95       	ret

000024f4 <sMOIfaceRF_set_iD>:
void sMOIfaceRF_set_iD(SMO* handle, sc_integer value) {
	handle->ifaceRF.ID = value;
    24f4:	fc 01       	movw	r30, r24
    24f6:	44 8f       	std	Z+28, r20	; 0x1c
    24f8:	55 8f       	std	Z+29, r21	; 0x1d
    24fa:	66 8f       	std	Z+30, r22	; 0x1e
    24fc:	77 8f       	std	Z+31, r23	; 0x1f
}
    24fe:	08 95       	ret

00002500 <sMOIfaceDISH_get_iD>:


sc_integer sMOIfaceDISH_get_iD(SMO* handle) {
    2500:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.ID;
    2502:	61 a1       	lds	r22, 0x41
    2504:	72 a1       	lds	r23, 0x42
}
    2506:	83 a1       	lds	r24, 0x43
    2508:	94 a1       	lds	r25, 0x44
    250a:	08 95       	ret

0000250c <sMOIfaceDISH_set_iD>:
void sMOIfaceDISH_set_iD(SMO* handle, sc_integer value) {
	handle->ifaceDISH.ID = value;
    250c:	fc 01       	movw	r30, r24
    250e:	41 a3       	lds	r20, 0x51
    2510:	52 a3       	lds	r21, 0x52
    2512:	63 a3       	lds	r22, 0x53
    2514:	74 a3       	lds	r23, 0x54
}
    2516:	08 95       	ret

00002518 <sMOIfaceDISH_get_amount>:
sc_integer sMOIfaceDISH_get_amount(SMO* handle) {
    2518:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.amount;
    251a:	65 a1       	lds	r22, 0x45
    251c:	76 a1       	lds	r23, 0x46
}
    251e:	87 a1       	lds	r24, 0x47
    2520:	90 a5       	lds	r25, 0x60
    2522:	08 95       	ret

00002524 <sMOIfaceDISH_set_amount>:
void sMOIfaceDISH_set_amount(SMO* handle, sc_integer value) {
	handle->ifaceDISH.amount = value;
    2524:	fc 01       	movw	r30, r24
    2526:	45 a3       	lds	r20, 0x55
    2528:	56 a3       	lds	r21, 0x56
    252a:	67 a3       	lds	r22, 0x57
    252c:	70 a7       	lds	r23, 0x70
}
    252e:	08 95       	ret

00002530 <sMOIfaceDISH_get_pos>:
sc_integer sMOIfaceDISH_get_pos(SMO* handle) {
    2530:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.pos;
    2532:	61 a5       	lds	r22, 0x61
    2534:	72 a5       	lds	r23, 0x62
}
    2536:	83 a5       	lds	r24, 0x63
    2538:	94 a5       	lds	r25, 0x64
    253a:	08 95       	ret

0000253c <sMOIfaceDISH_set_pos>:
void sMOIfaceDISH_set_pos(SMO* handle, sc_integer value) {
	handle->ifaceDISH.pos = value;
    253c:	fc 01       	movw	r30, r24
    253e:	41 a7       	lds	r20, 0x71
    2540:	52 a7       	lds	r21, 0x72
    2542:	63 a7       	lds	r22, 0x73
    2544:	74 a7       	lds	r23, 0x74
}
    2546:	08 95       	ret

00002548 <sMOIface_raise_switchOff>:
void sMOIface_raise_switchOff(SMO* handle) {
	handle->iface.switchOff_raised = bool_true;
    2548:	21 e0       	ldi	r18, 0x01	; 1
    254a:	fc 01       	movw	r30, r24
    254c:	26 ab       	sts	0x56, r18
}
    254e:	08 95       	ret

00002550 <sMOIface_raise_switchOn>:
void sMOIface_raise_switchOn(SMO* handle) {
	handle->iface.switchOn_raised = bool_true;
    2550:	21 e0       	ldi	r18, 0x01	; 1
    2552:	fc 01       	movw	r30, r24
    2554:	27 ab       	sts	0x57, r18
}
    2556:	08 95       	ret

00002558 <sMOIface_get_lightOn>:


sc_boolean sMOIface_get_lightOn(SMO* handle) {
	return handle->iface.lightOn;
}
    2558:	fc 01       	movw	r30, r24
    255a:	85 a5       	lds	r24, 0x65
    255c:	08 95       	ret

0000255e <sMOIface_set_lightOn>:
void sMOIface_set_lightOn(SMO* handle, sc_boolean value) {
	handle->iface.lightOn = value;
    255e:	fc 01       	movw	r30, r24
    2560:	65 a7       	lds	r22, 0x75
}
    2562:	08 95       	ret

00002564 <sMOIface_get_menuId>:
sc_integer sMOIface_get_menuId(SMO* handle) {
    2564:	fc 01       	movw	r30, r24
	return handle->iface.menuId;
    2566:	66 a5       	lds	r22, 0x66
    2568:	77 a5       	lds	r23, 0x67
}
    256a:	80 a9       	sts	0x40, r24
    256c:	91 a9       	sts	0x41, r25
    256e:	08 95       	ret

00002570 <sMOIface_set_menuId>:
void sMOIface_set_menuId(SMO* handle, sc_integer value) {
	handle->iface.menuId = value;
    2570:	fc 01       	movw	r30, r24
    2572:	46 a7       	lds	r20, 0x76
    2574:	57 a7       	lds	r21, 0x77
    2576:	60 ab       	sts	0x50, r22
    2578:	71 ab       	sts	0x51, r23
}
    257a:	08 95       	ret

0000257c <sMOIface_get_tableId>:
sc_integer sMOIface_get_tableId(SMO* handle) {
    257c:	fc 01       	movw	r30, r24
	return handle->iface.tableId;
    257e:	62 a9       	sts	0x42, r22
    2580:	73 a9       	sts	0x43, r23
}
    2582:	84 a9       	sts	0x44, r24
    2584:	95 a9       	sts	0x45, r25
    2586:	08 95       	ret

00002588 <sMOIface_set_tableId>:
void sMOIface_set_tableId(SMO* handle, sc_integer value) {
	handle->iface.tableId = value;
    2588:	fc 01       	movw	r30, r24
    258a:	42 ab       	sts	0x52, r20
    258c:	53 ab       	sts	0x53, r21
    258e:	64 ab       	sts	0x54, r22
    2590:	75 ab       	sts	0x55, r23
}
    2592:	08 95       	ret

00002594 <spi_init>:

/*
 * spi initialize
 */
void spi_init() {
    SPI_DDR &= ~((1<<SPI_MOSI) | (1<<SPI_MISO) | (1<<SPI_SS) | (1<<SPI_SCK)); //input
    2594:	87 b3       	in	r24, 0x17	; 23
    2596:	80 7f       	andi	r24, 0xF0	; 240
    2598:	87 bb       	out	0x17, r24	; 23
    SPI_DDR |= ((1<<SPI_MOSI) | (1<<SPI_SS) | (1<<SPI_SCK)); //output
    259a:	87 b3       	in	r24, 0x17	; 23
    259c:	87 60       	ori	r24, 0x07	; 7
    259e:	87 bb       	out	0x17, r24	; 23

    SPCR = ((1<<SPE)|               // SPI Enable
    25a0:	81 e5       	ldi	r24, 0x51	; 81
    25a2:	8d b9       	out	0x0d, r24	; 13
            (1<<MSTR)|              // Master/Slave select
            (0<<SPR1)|(1<<SPR0)|    // SPI Clock Rate
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR = (1<<SPI2X); // Double SPI Speed Bit
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	8e b9       	out	0x0e, r24	; 14
}
    25a8:	08 95       	ret

000025aa <spi_writereadbyte>:

/*
 * spi write one byte and read it back
 */
uint8_t spi_writereadbyte(uint8_t data) {
    SPDR = data;
    25aa:	8f b9       	out	0x0f, r24	; 15
    while((SPSR & (1<<SPIF)) == 0);
    25ac:	77 9b       	sbis	0x0e, 7	; 14
    25ae:	fe cf       	rjmp	.-4      	; 0x25ac <spi_writereadbyte+0x2>
    return SPDR;
    25b0:	8f b1       	in	r24, 0x0f	; 15
}
    25b2:	08 95       	ret

000025b4 <TimerInit>:

TimeEvent tmrEvent[10];
int tmrCount=0;

void TimerInit() {
	TCCR0 = 0b011; //CS02=0, CS01=1, CS00=0, chon Prescaler=64
    25b4:	83 e0       	ldi	r24, 0x03	; 3
    25b6:	83 bf       	out	0x33, r24	; 51
	//Xung chip la 8MHZ -> 1 xung mat 1us/8 = 0.125 us
	//Prescaler=64, kich 256 lan moi tang 1 lan trong bo dem Timer-> Ton 8us
	//Vay, de Timer ngat moi 1ms, ta can: 1000/8=125 lan dem.
	//Ma Timer ngat khi bo dem toi 255, ta can set gia tri ban dau cho bo dem la: 255-125+1=131
	TCNT0=131;
    25b8:	83 e8       	ldi	r24, 0x83	; 131
    25ba:	82 bf       	out	0x32, r24	; 50
	TIMSK=(1<<TOIE0); //Cho phep ngat khi cho tran o T/C0
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	87 bf       	out	0x37, r24	; 55
	tmrCount=0;
    25c0:	10 92 53 02 	sts	0x0253, r1
    25c4:	10 92 52 02 	sts	0x0252, r1
	sei();
    25c8:	78 94       	sei
}
    25ca:	08 95       	ret

000025cc <TimerSet>:

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
    25cc:	cf 92       	push	r12
    25ce:	df 92       	push	r13
    25d0:	ef 92       	push	r14
    25d2:	ff 92       	push	r15
    25d4:	cf 93       	push	r28
    25d6:	df 93       	push	r29
    25d8:	ec 01       	movw	r28, r24
    25da:	6a 01       	movw	r12, r20
    25dc:	7b 01       	movw	r14, r22
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
    25de:	40 91 52 02 	lds	r20, 0x0252
    25e2:	50 91 53 02 	lds	r21, 0x0253
    25e6:	14 16       	cp	r1, r20
    25e8:	15 06       	cpc	r1, r21
    25ea:	e4 f4       	brge	.+56     	; 0x2624 <TimerSet+0x58>
    25ec:	e8 e6       	ldi	r30, 0x68	; 104
    25ee:	f2 e0       	ldi	r31, 0x02	; 2
    25f0:	df 01       	movw	r26, r30
    25f2:	16 96       	adiw	r26, 0x06	; 6
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	30 e0       	ldi	r19, 0x00	; 0
	sei();
}

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
    25f8:	70 e0       	ldi	r23, 0x00	; 0
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
			check=true;
			tmrEvent[i].count=0;
			tmrEvent[i].max=max;
			tmrEvent[i].enabled=true;
    25fa:	61 e0       	ldi	r22, 0x01	; 1

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
    25fc:	80 81       	ld	r24, Z
    25fe:	91 81       	ldd	r25, Z+1	; 0x01
    2600:	8c 17       	cp	r24, r28
    2602:	9d 07       	cpc	r25, r29
    2604:	31 f4       	brne	.+12     	; 0x2612 <TimerSet+0x46>
			check=true;
			tmrEvent[i].count=0;
    2606:	13 82       	std	Z+3, r1	; 0x03
    2608:	12 82       	std	Z+2, r1	; 0x02
			tmrEvent[i].max=max;
    260a:	d5 82       	std	Z+5, r13	; 0x05
    260c:	c4 82       	std	Z+4, r12	; 0x04
			tmrEvent[i].enabled=true;
    260e:	6c 93       	st	X, r22
//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
			check=true;
    2610:	76 2f       	mov	r23, r22
}

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
    2612:	2f 5f       	subi	r18, 0xFF	; 255
    2614:	3f 4f       	sbci	r19, 0xFF	; 255
    2616:	37 96       	adiw	r30, 0x07	; 7
    2618:	17 96       	adiw	r26, 0x07	; 7
    261a:	24 17       	cp	r18, r20
    261c:	35 07       	cpc	r19, r21
    261e:	74 f3       	brlt	.-36     	; 0x25fc <TimerSet+0x30>
			tmrEvent[i].count=0;
			tmrEvent[i].max=max;
			tmrEvent[i].enabled=true;
		}
	}
	if (!check) {
    2620:	77 23       	and	r23, r23
    2622:	c9 f4       	brne	.+50     	; 0x2656 <TimerSet+0x8a>
		tmrEvent[tmrCount].EventId=evenId;
    2624:	fa 01       	movw	r30, r20
    2626:	ee 0f       	add	r30, r30
    2628:	ff 1f       	adc	r31, r31
    262a:	ee 0f       	add	r30, r30
    262c:	ff 1f       	adc	r31, r31
    262e:	ee 0f       	add	r30, r30
    2630:	ff 1f       	adc	r31, r31
    2632:	e4 1b       	sub	r30, r20
    2634:	f5 0b       	sbc	r31, r21
    2636:	e8 59       	subi	r30, 0x98	; 152
    2638:	fd 4f       	sbci	r31, 0xFD	; 253
    263a:	d1 83       	std	Z+1, r29	; 0x01
    263c:	c0 83       	st	Z, r28
		tmrEvent[tmrCount].count=0;
    263e:	13 82       	std	Z+3, r1	; 0x03
    2640:	12 82       	std	Z+2, r1	; 0x02
		tmrEvent[tmrCount].max=max;
    2642:	d5 82       	std	Z+5, r13	; 0x05
    2644:	c4 82       	std	Z+4, r12	; 0x04
		tmrEvent[tmrCount].enabled=true;
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	86 83       	std	Z+6, r24	; 0x06
		tmrCount++;
    264a:	4f 5f       	subi	r20, 0xFF	; 255
    264c:	5f 4f       	sbci	r21, 0xFF	; 255
    264e:	50 93 53 02 	sts	0x0253, r21
    2652:	40 93 52 02 	sts	0x0252, r20
	}
}
    2656:	df 91       	pop	r29
    2658:	cf 91       	pop	r28
    265a:	ff 90       	pop	r15
    265c:	ef 90       	pop	r14
    265e:	df 90       	pop	r13
    2660:	cf 90       	pop	r12
    2662:	08 95       	ret

00002664 <TimerUnSet>:

void TimerUnSet(const sc_eventid evenId) {
    2664:	dc 01       	movw	r26, r24
	for (int i=0;i<tmrCount;i++) {
    2666:	60 91 52 02 	lds	r22, 0x0252
    266a:	70 91 53 02 	lds	r23, 0x0253
    266e:	16 16       	cp	r1, r22
    2670:	17 06       	cpc	r1, r23
    2672:	64 f5       	brge	.+88     	; 0x26cc <TimerUnSet+0x68>
		if (tmrEvent[i].EventId==evenId) {
    2674:	80 91 68 02 	lds	r24, 0x0268
    2678:	90 91 69 02 	lds	r25, 0x0269
    267c:	8a 17       	cp	r24, r26
    267e:	9b 07       	cpc	r25, r27
    2680:	e1 f4       	brne	.+56     	; 0x26ba <TimerUnSet+0x56>
    2682:	0a c0       	rjmp	.+20     	; 0x2698 <TimerUnSet+0x34>
    2684:	29 5f       	subi	r18, 0xF9	; 249
    2686:	3f 4f       	sbci	r19, 0xFF	; 255
		tmrEvent[tmrCount].enabled=true;
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
    2688:	f9 01       	movw	r30, r18
    268a:	37 97       	sbiw	r30, 0x07	; 7
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
    268c:	80 81       	ld	r24, Z
    268e:	91 81       	ldd	r25, Z+1	; 0x01
    2690:	8a 17       	cp	r24, r26
    2692:	9b 07       	cpc	r25, r27
    2694:	b1 f4       	brne	.+44     	; 0x26c2 <TimerUnSet+0x5e>
    2696:	02 c0       	rjmp	.+4      	; 0x269c <TimerUnSet+0x38>
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
	for (int i=0;i<tmrCount;i++) {
    2698:	40 e0       	ldi	r20, 0x00	; 0
    269a:	50 e0       	ldi	r21, 0x00	; 0
		if (tmrEvent[i].EventId==evenId) {
			tmrEvent[i].count=0;
    269c:	fa 01       	movw	r30, r20
    269e:	ee 0f       	add	r30, r30
    26a0:	ff 1f       	adc	r31, r31
    26a2:	ee 0f       	add	r30, r30
    26a4:	ff 1f       	adc	r31, r31
    26a6:	ee 0f       	add	r30, r30
    26a8:	ff 1f       	adc	r31, r31
    26aa:	e4 1b       	sub	r30, r20
    26ac:	f5 0b       	sbc	r31, r21
    26ae:	e8 59       	subi	r30, 0x98	; 152
    26b0:	fd 4f       	sbci	r31, 0xFD	; 253
    26b2:	13 82       	std	Z+3, r1	; 0x03
    26b4:	12 82       	std	Z+2, r1	; 0x02
			tmrEvent[i].enabled=false;
    26b6:	16 82       	std	Z+6, r1	; 0x06
			return;
    26b8:	08 95       	ret
    26ba:	2f e6       	ldi	r18, 0x6F	; 111
    26bc:	32 e0       	ldi	r19, 0x02	; 2
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
	for (int i=0;i<tmrCount;i++) {
    26be:	40 e0       	ldi	r20, 0x00	; 0
    26c0:	50 e0       	ldi	r21, 0x00	; 0
    26c2:	4f 5f       	subi	r20, 0xFF	; 255
    26c4:	5f 4f       	sbci	r21, 0xFF	; 255
    26c6:	46 17       	cp	r20, r22
    26c8:	57 07       	cpc	r21, r23
    26ca:	e1 f6       	brne	.-72     	; 0x2684 <TimerUnSet+0x20>
    26cc:	08 95       	ret

000026ce <TimerCheck>:
			return;
		}
	}
}

void TimerCheck(SMO* handle) {
    26ce:	cf 92       	push	r12
    26d0:	df 92       	push	r13
    26d2:	ef 92       	push	r14
    26d4:	ff 92       	push	r15
    26d6:	0f 93       	push	r16
    26d8:	1f 93       	push	r17
    26da:	cf 93       	push	r28
    26dc:	df 93       	push	r29
    26de:	6c 01       	movw	r12, r24
	for (int i=0;i<tmrCount;i++) {
    26e0:	80 91 52 02 	lds	r24, 0x0252
    26e4:	90 91 53 02 	lds	r25, 0x0253
    26e8:	18 16       	cp	r1, r24
    26ea:	19 06       	cpc	r1, r25
    26ec:	94 f5       	brge	.+100    	; 0x2752 <TimerCheck+0x84>
    26ee:	ce e6       	ldi	r28, 0x6E	; 110
    26f0:	d2 e0       	ldi	r29, 0x02	; 2
    26f2:	8e 01       	movw	r16, r28
    26f4:	06 50       	subi	r16, 0x06	; 6
    26f6:	10 40       	sbci	r17, 0x00	; 0
    26f8:	ee 24       	eor	r14, r14
    26fa:	ff 24       	eor	r15, r15
		if (tmrEvent[i].enabled) {
    26fc:	88 81       	ld	r24, Y
    26fe:	88 23       	and	r24, r24
    2700:	d9 f0       	breq	.+54     	; 0x2738 <TimerCheck+0x6a>
			tmrEvent[i].count++;
    2702:	d8 01       	movw	r26, r16
    2704:	12 96       	adiw	r26, 0x02	; 2
    2706:	8d 91       	ld	r24, X+
    2708:	9c 91       	ld	r25, X
    270a:	13 97       	sbiw	r26, 0x03	; 3
    270c:	01 96       	adiw	r24, 0x01	; 1
    270e:	13 96       	adiw	r26, 0x03	; 3
    2710:	9c 93       	st	X, r25
    2712:	8e 93       	st	-X, r24
    2714:	12 97       	sbiw	r26, 0x02	; 2
			if (tmrEvent[i].count==tmrEvent[i].max) {
    2716:	14 96       	adiw	r26, 0x04	; 4
    2718:	2d 91       	ld	r18, X+
    271a:	3c 91       	ld	r19, X
    271c:	15 97       	sbiw	r26, 0x05	; 5
    271e:	82 17       	cp	r24, r18
    2720:	93 07       	cpc	r25, r19
    2722:	51 f4       	brne	.+20     	; 0x2738 <TimerCheck+0x6a>
				tmrEvent[i].count=0;
    2724:	13 96       	adiw	r26, 0x03	; 3
    2726:	1c 92       	st	X, r1
    2728:	1e 92       	st	-X, r1
    272a:	12 97       	sbiw	r26, 0x02	; 2
				tmrEvent[i].enabled=false;
    272c:	18 82       	st	Y, r1
				sMO_raiseTimeEvent(handle,tmrEvent[i].EventId);
    272e:	6d 91       	ld	r22, X+
    2730:	7c 91       	ld	r23, X
    2732:	c6 01       	movw	r24, r12
    2734:	0e 94 44 11 	call	0x2288	; 0x2288 <sMO_raiseTimeEvent>
		}
	}
}

void TimerCheck(SMO* handle) {
	for (int i=0;i<tmrCount;i++) {
    2738:	08 94       	sec
    273a:	e1 1c       	adc	r14, r1
    273c:	f1 1c       	adc	r15, r1
    273e:	27 96       	adiw	r28, 0x07	; 7
    2740:	09 5f       	subi	r16, 0xF9	; 249
    2742:	1f 4f       	sbci	r17, 0xFF	; 255
    2744:	80 91 52 02 	lds	r24, 0x0252
    2748:	90 91 53 02 	lds	r25, 0x0253
    274c:	e8 16       	cp	r14, r24
    274e:	f9 06       	cpc	r15, r25
    2750:	ac f2       	brlt	.-86     	; 0x26fc <TimerCheck+0x2e>
				tmrEvent[i].enabled=false;
				sMO_raiseTimeEvent(handle,tmrEvent[i].EventId);
			}
		}
	}
}
    2752:	df 91       	pop	r29
    2754:	cf 91       	pop	r28
    2756:	1f 91       	pop	r17
    2758:	0f 91       	pop	r16
    275a:	ff 90       	pop	r15
    275c:	ef 90       	pop	r14
    275e:	df 90       	pop	r13
    2760:	cf 90       	pop	r12
    2762:	08 95       	ret

00002764 <TimerClear>:

void TimerClear() {
	free(tmrEvent);
    2764:	88 e6       	ldi	r24, 0x68	; 104
    2766:	92 e0       	ldi	r25, 0x02	; 2
    2768:	0e 94 a3 14 	call	0x2946	; 0x2946 <free>
	tmrCount=0;
    276c:	10 92 53 02 	sts	0x0253, r1
    2770:	10 92 52 02 	sts	0x0252, r1
    2774:	08 95       	ret

00002776 <__mulsi3>:
    2776:	62 9f       	mul	r22, r18
    2778:	d0 01       	movw	r26, r0
    277a:	73 9f       	mul	r23, r19
    277c:	f0 01       	movw	r30, r0
    277e:	82 9f       	mul	r24, r18
    2780:	e0 0d       	add	r30, r0
    2782:	f1 1d       	adc	r31, r1
    2784:	64 9f       	mul	r22, r20
    2786:	e0 0d       	add	r30, r0
    2788:	f1 1d       	adc	r31, r1
    278a:	92 9f       	mul	r25, r18
    278c:	f0 0d       	add	r31, r0
    278e:	83 9f       	mul	r24, r19
    2790:	f0 0d       	add	r31, r0
    2792:	74 9f       	mul	r23, r20
    2794:	f0 0d       	add	r31, r0
    2796:	65 9f       	mul	r22, r21
    2798:	f0 0d       	add	r31, r0
    279a:	99 27       	eor	r25, r25
    279c:	72 9f       	mul	r23, r18
    279e:	b0 0d       	add	r27, r0
    27a0:	e1 1d       	adc	r30, r1
    27a2:	f9 1f       	adc	r31, r25
    27a4:	63 9f       	mul	r22, r19
    27a6:	b0 0d       	add	r27, r0
    27a8:	e1 1d       	adc	r30, r1
    27aa:	f9 1f       	adc	r31, r25
    27ac:	bd 01       	movw	r22, r26
    27ae:	cf 01       	movw	r24, r30
    27b0:	11 24       	eor	r1, r1
    27b2:	08 95       	ret

000027b4 <__udivmodqi4>:
    27b4:	99 1b       	sub	r25, r25
    27b6:	79 e0       	ldi	r23, 0x09	; 9
    27b8:	04 c0       	rjmp	.+8      	; 0x27c2 <__udivmodqi4_ep>

000027ba <__udivmodqi4_loop>:
    27ba:	99 1f       	adc	r25, r25
    27bc:	96 17       	cp	r25, r22
    27be:	08 f0       	brcs	.+2      	; 0x27c2 <__udivmodqi4_ep>
    27c0:	96 1b       	sub	r25, r22

000027c2 <__udivmodqi4_ep>:
    27c2:	88 1f       	adc	r24, r24
    27c4:	7a 95       	dec	r23
    27c6:	c9 f7       	brne	.-14     	; 0x27ba <__udivmodqi4_loop>
    27c8:	80 95       	com	r24
    27ca:	08 95       	ret

000027cc <__divmodhi4>:
    27cc:	97 fb       	bst	r25, 7
    27ce:	09 2e       	mov	r0, r25
    27d0:	07 26       	eor	r0, r23
    27d2:	0a d0       	rcall	.+20     	; 0x27e8 <__divmodhi4_neg1>
    27d4:	77 fd       	sbrc	r23, 7
    27d6:	04 d0       	rcall	.+8      	; 0x27e0 <__divmodhi4_neg2>
    27d8:	0c d0       	rcall	.+24     	; 0x27f2 <__udivmodhi4>
    27da:	06 d0       	rcall	.+12     	; 0x27e8 <__divmodhi4_neg1>
    27dc:	00 20       	and	r0, r0
    27de:	1a f4       	brpl	.+6      	; 0x27e6 <__divmodhi4_exit>

000027e0 <__divmodhi4_neg2>:
    27e0:	70 95       	com	r23
    27e2:	61 95       	neg	r22
    27e4:	7f 4f       	sbci	r23, 0xFF	; 255

000027e6 <__divmodhi4_exit>:
    27e6:	08 95       	ret

000027e8 <__divmodhi4_neg1>:
    27e8:	f6 f7       	brtc	.-4      	; 0x27e6 <__divmodhi4_exit>
    27ea:	90 95       	com	r25
    27ec:	81 95       	neg	r24
    27ee:	9f 4f       	sbci	r25, 0xFF	; 255
    27f0:	08 95       	ret

000027f2 <__udivmodhi4>:
    27f2:	aa 1b       	sub	r26, r26
    27f4:	bb 1b       	sub	r27, r27
    27f6:	51 e1       	ldi	r21, 0x11	; 17
    27f8:	07 c0       	rjmp	.+14     	; 0x2808 <__udivmodhi4_ep>

000027fa <__udivmodhi4_loop>:
    27fa:	aa 1f       	adc	r26, r26
    27fc:	bb 1f       	adc	r27, r27
    27fe:	a6 17       	cp	r26, r22
    2800:	b7 07       	cpc	r27, r23
    2802:	10 f0       	brcs	.+4      	; 0x2808 <__udivmodhi4_ep>
    2804:	a6 1b       	sub	r26, r22
    2806:	b7 0b       	sbc	r27, r23

00002808 <__udivmodhi4_ep>:
    2808:	88 1f       	adc	r24, r24
    280a:	99 1f       	adc	r25, r25
    280c:	5a 95       	dec	r21
    280e:	a9 f7       	brne	.-22     	; 0x27fa <__udivmodhi4_loop>
    2810:	80 95       	com	r24
    2812:	90 95       	com	r25
    2814:	bc 01       	movw	r22, r24
    2816:	cd 01       	movw	r24, r26
    2818:	08 95       	ret

0000281a <malloc>:
    281a:	cf 93       	push	r28
    281c:	df 93       	push	r29
    281e:	ac 01       	movw	r20, r24
    2820:	82 30       	cpi	r24, 0x02	; 2
    2822:	91 05       	cpc	r25, r1
    2824:	10 f4       	brcc	.+4      	; 0x282a <malloc+0x10>
    2826:	42 e0       	ldi	r20, 0x02	; 2
    2828:	50 e0       	ldi	r21, 0x00	; 0
    282a:	e0 91 b0 02 	lds	r30, 0x02B0
    282e:	f0 91 b1 02 	lds	r31, 0x02B1
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	a0 e0       	ldi	r26, 0x00	; 0
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	24 c0       	rjmp	.+72     	; 0x2884 <malloc+0x6a>
    283c:	80 81       	ld	r24, Z
    283e:	91 81       	ldd	r25, Z+1	; 0x01
    2840:	84 17       	cp	r24, r20
    2842:	95 07       	cpc	r25, r21
    2844:	d0 f0       	brcs	.+52     	; 0x287a <malloc+0x60>
    2846:	84 17       	cp	r24, r20
    2848:	95 07       	cpc	r25, r21
    284a:	71 f4       	brne	.+28     	; 0x2868 <malloc+0x4e>
    284c:	82 81       	ldd	r24, Z+2	; 0x02
    284e:	93 81       	ldd	r25, Z+3	; 0x03
    2850:	10 97       	sbiw	r26, 0x00	; 0
    2852:	29 f0       	breq	.+10     	; 0x285e <malloc+0x44>
    2854:	13 96       	adiw	r26, 0x03	; 3
    2856:	9c 93       	st	X, r25
    2858:	8e 93       	st	-X, r24
    285a:	12 97       	sbiw	r26, 0x02	; 2
    285c:	2c c0       	rjmp	.+88     	; 0x28b6 <malloc+0x9c>
    285e:	90 93 b1 02 	sts	0x02B1, r25
    2862:	80 93 b0 02 	sts	0x02B0, r24
    2866:	27 c0       	rjmp	.+78     	; 0x28b6 <malloc+0x9c>
    2868:	21 15       	cp	r18, r1
    286a:	31 05       	cpc	r19, r1
    286c:	19 f0       	breq	.+6      	; 0x2874 <malloc+0x5a>
    286e:	82 17       	cp	r24, r18
    2870:	93 07       	cpc	r25, r19
    2872:	18 f4       	brcc	.+6      	; 0x287a <malloc+0x60>
    2874:	9c 01       	movw	r18, r24
    2876:	bd 01       	movw	r22, r26
    2878:	ef 01       	movw	r28, r30
    287a:	92 81       	ldd	r25, Z+2	; 0x02
    287c:	83 81       	ldd	r24, Z+3	; 0x03
    287e:	df 01       	movw	r26, r30
    2880:	e9 2f       	mov	r30, r25
    2882:	f8 2f       	mov	r31, r24
    2884:	30 97       	sbiw	r30, 0x00	; 0
    2886:	d1 f6       	brne	.-76     	; 0x283c <malloc+0x22>
    2888:	21 15       	cp	r18, r1
    288a:	31 05       	cpc	r19, r1
    288c:	f9 f0       	breq	.+62     	; 0x28cc <malloc+0xb2>
    288e:	c9 01       	movw	r24, r18
    2890:	84 1b       	sub	r24, r20
    2892:	95 0b       	sbc	r25, r21
    2894:	84 30       	cpi	r24, 0x04	; 4
    2896:	91 05       	cpc	r25, r1
    2898:	80 f4       	brcc	.+32     	; 0x28ba <malloc+0xa0>
    289a:	8a 81       	ldd	r24, Y+2	; 0x02
    289c:	9b 81       	ldd	r25, Y+3	; 0x03
    289e:	61 15       	cp	r22, r1
    28a0:	71 05       	cpc	r23, r1
    28a2:	21 f0       	breq	.+8      	; 0x28ac <malloc+0x92>
    28a4:	fb 01       	movw	r30, r22
    28a6:	93 83       	std	Z+3, r25	; 0x03
    28a8:	82 83       	std	Z+2, r24	; 0x02
    28aa:	04 c0       	rjmp	.+8      	; 0x28b4 <malloc+0x9a>
    28ac:	90 93 b1 02 	sts	0x02B1, r25
    28b0:	80 93 b0 02 	sts	0x02B0, r24
    28b4:	fe 01       	movw	r30, r28
    28b6:	32 96       	adiw	r30, 0x02	; 2
    28b8:	42 c0       	rjmp	.+132    	; 0x293e <malloc+0x124>
    28ba:	fe 01       	movw	r30, r28
    28bc:	e8 0f       	add	r30, r24
    28be:	f9 1f       	adc	r31, r25
    28c0:	41 93       	st	Z+, r20
    28c2:	51 93       	st	Z+, r21
    28c4:	02 97       	sbiw	r24, 0x02	; 2
    28c6:	99 83       	std	Y+1, r25	; 0x01
    28c8:	88 83       	st	Y, r24
    28ca:	39 c0       	rjmp	.+114    	; 0x293e <malloc+0x124>
    28cc:	80 91 ae 02 	lds	r24, 0x02AE
    28d0:	90 91 af 02 	lds	r25, 0x02AF
    28d4:	00 97       	sbiw	r24, 0x00	; 0
    28d6:	41 f4       	brne	.+16     	; 0x28e8 <malloc+0xce>
    28d8:	80 91 4d 02 	lds	r24, 0x024D
    28dc:	90 91 4e 02 	lds	r25, 0x024E
    28e0:	90 93 af 02 	sts	0x02AF, r25
    28e4:	80 93 ae 02 	sts	0x02AE, r24
    28e8:	20 91 4b 02 	lds	r18, 0x024B
    28ec:	30 91 4c 02 	lds	r19, 0x024C
    28f0:	21 15       	cp	r18, r1
    28f2:	31 05       	cpc	r19, r1
    28f4:	41 f4       	brne	.+16     	; 0x2906 <malloc+0xec>
    28f6:	2d b7       	in	r18, 0x3d	; 61
    28f8:	3e b7       	in	r19, 0x3e	; 62
    28fa:	80 91 4f 02 	lds	r24, 0x024F
    28fe:	90 91 50 02 	lds	r25, 0x0250
    2902:	28 1b       	sub	r18, r24
    2904:	39 0b       	sbc	r19, r25
    2906:	e0 91 ae 02 	lds	r30, 0x02AE
    290a:	f0 91 af 02 	lds	r31, 0x02AF
    290e:	e2 17       	cp	r30, r18
    2910:	f3 07       	cpc	r31, r19
    2912:	98 f4       	brcc	.+38     	; 0x293a <malloc+0x120>
    2914:	2e 1b       	sub	r18, r30
    2916:	3f 0b       	sbc	r19, r31
    2918:	24 17       	cp	r18, r20
    291a:	35 07       	cpc	r19, r21
    291c:	70 f0       	brcs	.+28     	; 0x293a <malloc+0x120>
    291e:	ca 01       	movw	r24, r20
    2920:	02 96       	adiw	r24, 0x02	; 2
    2922:	28 17       	cp	r18, r24
    2924:	39 07       	cpc	r19, r25
    2926:	48 f0       	brcs	.+18     	; 0x293a <malloc+0x120>
    2928:	8e 0f       	add	r24, r30
    292a:	9f 1f       	adc	r25, r31
    292c:	90 93 af 02 	sts	0x02AF, r25
    2930:	80 93 ae 02 	sts	0x02AE, r24
    2934:	41 93       	st	Z+, r20
    2936:	51 93       	st	Z+, r21
    2938:	02 c0       	rjmp	.+4      	; 0x293e <malloc+0x124>
    293a:	e0 e0       	ldi	r30, 0x00	; 0
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	cf 01       	movw	r24, r30
    2940:	df 91       	pop	r29
    2942:	cf 91       	pop	r28
    2944:	08 95       	ret

00002946 <free>:
    2946:	0f 93       	push	r16
    2948:	1f 93       	push	r17
    294a:	cf 93       	push	r28
    294c:	df 93       	push	r29
    294e:	9c 01       	movw	r18, r24
    2950:	00 97       	sbiw	r24, 0x00	; 0
    2952:	09 f4       	brne	.+2      	; 0x2956 <free+0x10>
    2954:	8c c0       	rjmp	.+280    	; 0x2a6e <free+0x128>
    2956:	dc 01       	movw	r26, r24
    2958:	12 97       	sbiw	r26, 0x02	; 2
    295a:	13 96       	adiw	r26, 0x03	; 3
    295c:	1c 92       	st	X, r1
    295e:	1e 92       	st	-X, r1
    2960:	12 97       	sbiw	r26, 0x02	; 2
    2962:	60 91 b0 02 	lds	r22, 0x02B0
    2966:	70 91 b1 02 	lds	r23, 0x02B1
    296a:	61 15       	cp	r22, r1
    296c:	71 05       	cpc	r23, r1
    296e:	89 f4       	brne	.+34     	; 0x2992 <free+0x4c>
    2970:	8d 91       	ld	r24, X+
    2972:	9c 91       	ld	r25, X
    2974:	11 97       	sbiw	r26, 0x01	; 1
    2976:	82 0f       	add	r24, r18
    2978:	93 1f       	adc	r25, r19
    297a:	20 91 ae 02 	lds	r18, 0x02AE
    297e:	30 91 af 02 	lds	r19, 0x02AF
    2982:	28 17       	cp	r18, r24
    2984:	39 07       	cpc	r19, r25
    2986:	69 f5       	brne	.+90     	; 0x29e2 <free+0x9c>
    2988:	b0 93 af 02 	sts	0x02AF, r27
    298c:	a0 93 ae 02 	sts	0x02AE, r26
    2990:	6e c0       	rjmp	.+220    	; 0x2a6e <free+0x128>
    2992:	fb 01       	movw	r30, r22
    2994:	40 e0       	ldi	r20, 0x00	; 0
    2996:	50 e0       	ldi	r21, 0x00	; 0
    2998:	01 c0       	rjmp	.+2      	; 0x299c <free+0x56>
    299a:	fc 01       	movw	r30, r24
    299c:	ea 17       	cp	r30, r26
    299e:	fb 07       	cpc	r31, r27
    29a0:	30 f4       	brcc	.+12     	; 0x29ae <free+0x68>
    29a2:	82 81       	ldd	r24, Z+2	; 0x02
    29a4:	93 81       	ldd	r25, Z+3	; 0x03
    29a6:	af 01       	movw	r20, r30
    29a8:	00 97       	sbiw	r24, 0x00	; 0
    29aa:	b9 f7       	brne	.-18     	; 0x299a <free+0x54>
    29ac:	1f c0       	rjmp	.+62     	; 0x29ec <free+0xa6>
    29ae:	e9 01       	movw	r28, r18
    29b0:	22 97       	sbiw	r28, 0x02	; 2
    29b2:	fb 83       	std	Y+3, r31	; 0x03
    29b4:	ea 83       	std	Y+2, r30	; 0x02
    29b6:	08 81       	ld	r16, Y
    29b8:	19 81       	ldd	r17, Y+1	; 0x01
    29ba:	c9 01       	movw	r24, r18
    29bc:	80 0f       	add	r24, r16
    29be:	91 1f       	adc	r25, r17
    29c0:	8e 17       	cp	r24, r30
    29c2:	9f 07       	cpc	r25, r31
    29c4:	59 f4       	brne	.+22     	; 0x29dc <free+0x96>
    29c6:	80 81       	ld	r24, Z
    29c8:	91 81       	ldd	r25, Z+1	; 0x01
    29ca:	80 0f       	add	r24, r16
    29cc:	91 1f       	adc	r25, r17
    29ce:	02 96       	adiw	r24, 0x02	; 2
    29d0:	99 83       	std	Y+1, r25	; 0x01
    29d2:	88 83       	st	Y, r24
    29d4:	82 81       	ldd	r24, Z+2	; 0x02
    29d6:	93 81       	ldd	r25, Z+3	; 0x03
    29d8:	9b 83       	std	Y+3, r25	; 0x03
    29da:	8a 83       	std	Y+2, r24	; 0x02
    29dc:	41 15       	cp	r20, r1
    29de:	51 05       	cpc	r21, r1
    29e0:	29 f4       	brne	.+10     	; 0x29ec <free+0xa6>
    29e2:	b0 93 b1 02 	sts	0x02B1, r27
    29e6:	a0 93 b0 02 	sts	0x02B0, r26
    29ea:	41 c0       	rjmp	.+130    	; 0x2a6e <free+0x128>
    29ec:	fa 01       	movw	r30, r20
    29ee:	b3 83       	std	Z+3, r27	; 0x03
    29f0:	a2 83       	std	Z+2, r26	; 0x02
    29f2:	c1 91       	ld	r28, Z+
    29f4:	d1 91       	ld	r29, Z+
    29f6:	ec 0f       	add	r30, r28
    29f8:	fd 1f       	adc	r31, r29
    29fa:	ae 17       	cp	r26, r30
    29fc:	bf 07       	cpc	r27, r31
    29fe:	81 f4       	brne	.+32     	; 0x2a20 <free+0xda>
    2a00:	f9 01       	movw	r30, r18
    2a02:	92 91       	ld	r25, -Z
    2a04:	82 91       	ld	r24, -Z
    2a06:	8c 0f       	add	r24, r28
    2a08:	9d 1f       	adc	r25, r29
    2a0a:	02 96       	adiw	r24, 0x02	; 2
    2a0c:	da 01       	movw	r26, r20
    2a0e:	11 96       	adiw	r26, 0x01	; 1
    2a10:	9c 93       	st	X, r25
    2a12:	8e 93       	st	-X, r24
    2a14:	82 81       	ldd	r24, Z+2	; 0x02
    2a16:	93 81       	ldd	r25, Z+3	; 0x03
    2a18:	13 96       	adiw	r26, 0x03	; 3
    2a1a:	9c 93       	st	X, r25
    2a1c:	8e 93       	st	-X, r24
    2a1e:	12 97       	sbiw	r26, 0x02	; 2
    2a20:	e0 e0       	ldi	r30, 0x00	; 0
    2a22:	f0 e0       	ldi	r31, 0x00	; 0
    2a24:	02 c0       	rjmp	.+4      	; 0x2a2a <free+0xe4>
    2a26:	fb 01       	movw	r30, r22
    2a28:	bc 01       	movw	r22, r24
    2a2a:	db 01       	movw	r26, r22
    2a2c:	12 96       	adiw	r26, 0x02	; 2
    2a2e:	8d 91       	ld	r24, X+
    2a30:	9c 91       	ld	r25, X
    2a32:	13 97       	sbiw	r26, 0x03	; 3
    2a34:	00 97       	sbiw	r24, 0x00	; 0
    2a36:	b9 f7       	brne	.-18     	; 0x2a26 <free+0xe0>
    2a38:	cb 01       	movw	r24, r22
    2a3a:	02 96       	adiw	r24, 0x02	; 2
    2a3c:	2d 91       	ld	r18, X+
    2a3e:	3c 91       	ld	r19, X
    2a40:	11 97       	sbiw	r26, 0x01	; 1
    2a42:	82 0f       	add	r24, r18
    2a44:	93 1f       	adc	r25, r19
    2a46:	20 91 ae 02 	lds	r18, 0x02AE
    2a4a:	30 91 af 02 	lds	r19, 0x02AF
    2a4e:	28 17       	cp	r18, r24
    2a50:	39 07       	cpc	r19, r25
    2a52:	69 f4       	brne	.+26     	; 0x2a6e <free+0x128>
    2a54:	30 97       	sbiw	r30, 0x00	; 0
    2a56:	29 f4       	brne	.+10     	; 0x2a62 <free+0x11c>
    2a58:	10 92 b1 02 	sts	0x02B1, r1
    2a5c:	10 92 b0 02 	sts	0x02B0, r1
    2a60:	02 c0       	rjmp	.+4      	; 0x2a66 <free+0x120>
    2a62:	13 82       	std	Z+3, r1	; 0x03
    2a64:	12 82       	std	Z+2, r1	; 0x02
    2a66:	70 93 af 02 	sts	0x02AF, r23
    2a6a:	60 93 ae 02 	sts	0x02AE, r22
    2a6e:	df 91       	pop	r29
    2a70:	cf 91       	pop	r28
    2a72:	1f 91       	pop	r17
    2a74:	0f 91       	pop	r16
    2a76:	08 95       	ret

00002a78 <sprintf>:
    2a78:	0f 93       	push	r16
    2a7a:	1f 93       	push	r17
    2a7c:	cf 93       	push	r28
    2a7e:	df 93       	push	r29
    2a80:	cd b7       	in	r28, 0x3d	; 61
    2a82:	de b7       	in	r29, 0x3e	; 62
    2a84:	2e 97       	sbiw	r28, 0x0e	; 14
    2a86:	0f b6       	in	r0, 0x3f	; 63
    2a88:	f8 94       	cli
    2a8a:	de bf       	out	0x3e, r29	; 62
    2a8c:	0f be       	out	0x3f, r0	; 63
    2a8e:	cd bf       	out	0x3d, r28	; 61
    2a90:	0d 89       	ldd	r16, Y+21	; 0x15
    2a92:	1e 89       	ldd	r17, Y+22	; 0x16
    2a94:	86 e0       	ldi	r24, 0x06	; 6
    2a96:	8c 83       	std	Y+4, r24	; 0x04
    2a98:	1a 83       	std	Y+2, r17	; 0x02
    2a9a:	09 83       	std	Y+1, r16	; 0x01
    2a9c:	8f ef       	ldi	r24, 0xFF	; 255
    2a9e:	9f e7       	ldi	r25, 0x7F	; 127
    2aa0:	9e 83       	std	Y+6, r25	; 0x06
    2aa2:	8d 83       	std	Y+5, r24	; 0x05
    2aa4:	ae 01       	movw	r20, r28
    2aa6:	47 5e       	subi	r20, 0xE7	; 231
    2aa8:	5f 4f       	sbci	r21, 0xFF	; 255
    2aaa:	ce 01       	movw	r24, r28
    2aac:	01 96       	adiw	r24, 0x01	; 1
    2aae:	6f 89       	ldd	r22, Y+23	; 0x17
    2ab0:	78 8d       	ldd	r23, Y+24	; 0x18
    2ab2:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <vfprintf>
    2ab6:	ef 81       	ldd	r30, Y+7	; 0x07
    2ab8:	f8 85       	ldd	r31, Y+8	; 0x08
    2aba:	e0 0f       	add	r30, r16
    2abc:	f1 1f       	adc	r31, r17
    2abe:	10 82       	st	Z, r1
    2ac0:	2e 96       	adiw	r28, 0x0e	; 14
    2ac2:	0f b6       	in	r0, 0x3f	; 63
    2ac4:	f8 94       	cli
    2ac6:	de bf       	out	0x3e, r29	; 62
    2ac8:	0f be       	out	0x3f, r0	; 63
    2aca:	cd bf       	out	0x3d, r28	; 61
    2acc:	df 91       	pop	r29
    2ace:	cf 91       	pop	r28
    2ad0:	1f 91       	pop	r17
    2ad2:	0f 91       	pop	r16
    2ad4:	08 95       	ret

00002ad6 <vfprintf>:
    2ad6:	2f 92       	push	r2
    2ad8:	3f 92       	push	r3
    2ada:	4f 92       	push	r4
    2adc:	5f 92       	push	r5
    2ade:	6f 92       	push	r6
    2ae0:	7f 92       	push	r7
    2ae2:	8f 92       	push	r8
    2ae4:	9f 92       	push	r9
    2ae6:	af 92       	push	r10
    2ae8:	bf 92       	push	r11
    2aea:	cf 92       	push	r12
    2aec:	df 92       	push	r13
    2aee:	ef 92       	push	r14
    2af0:	ff 92       	push	r15
    2af2:	0f 93       	push	r16
    2af4:	1f 93       	push	r17
    2af6:	cf 93       	push	r28
    2af8:	df 93       	push	r29
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
    2afe:	2d 97       	sbiw	r28, 0x0d	; 13
    2b00:	0f b6       	in	r0, 0x3f	; 63
    2b02:	f8 94       	cli
    2b04:	de bf       	out	0x3e, r29	; 62
    2b06:	0f be       	out	0x3f, r0	; 63
    2b08:	cd bf       	out	0x3d, r28	; 61
    2b0a:	3c 01       	movw	r6, r24
    2b0c:	7d 87       	std	Y+13, r23	; 0x0d
    2b0e:	6c 87       	std	Y+12, r22	; 0x0c
    2b10:	5a 01       	movw	r10, r20
    2b12:	fc 01       	movw	r30, r24
    2b14:	17 82       	std	Z+7, r1	; 0x07
    2b16:	16 82       	std	Z+6, r1	; 0x06
    2b18:	83 81       	ldd	r24, Z+3	; 0x03
    2b1a:	81 ff       	sbrs	r24, 1
    2b1c:	c8 c1       	rjmp	.+912    	; 0x2eae <vfprintf+0x3d8>
    2b1e:	2e 01       	movw	r4, r28
    2b20:	08 94       	sec
    2b22:	41 1c       	adc	r4, r1
    2b24:	51 1c       	adc	r5, r1
    2b26:	f3 01       	movw	r30, r6
    2b28:	93 81       	ldd	r25, Z+3	; 0x03
    2b2a:	ec 85       	ldd	r30, Y+12	; 0x0c
    2b2c:	fd 85       	ldd	r31, Y+13	; 0x0d
    2b2e:	93 fd       	sbrc	r25, 3
    2b30:	85 91       	lpm	r24, Z+
    2b32:	93 ff       	sbrs	r25, 3
    2b34:	81 91       	ld	r24, Z+
    2b36:	fd 87       	std	Y+13, r31	; 0x0d
    2b38:	ec 87       	std	Y+12, r30	; 0x0c
    2b3a:	88 23       	and	r24, r24
    2b3c:	09 f4       	brne	.+2      	; 0x2b40 <vfprintf+0x6a>
    2b3e:	b3 c1       	rjmp	.+870    	; 0x2ea6 <vfprintf+0x3d0>
    2b40:	85 32       	cpi	r24, 0x25	; 37
    2b42:	41 f4       	brne	.+16     	; 0x2b54 <vfprintf+0x7e>
    2b44:	93 fd       	sbrc	r25, 3
    2b46:	85 91       	lpm	r24, Z+
    2b48:	93 ff       	sbrs	r25, 3
    2b4a:	81 91       	ld	r24, Z+
    2b4c:	fd 87       	std	Y+13, r31	; 0x0d
    2b4e:	ec 87       	std	Y+12, r30	; 0x0c
    2b50:	85 32       	cpi	r24, 0x25	; 37
    2b52:	29 f4       	brne	.+10     	; 0x2b5e <vfprintf+0x88>
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	b3 01       	movw	r22, r6
    2b58:	0e 94 88 17 	call	0x2f10	; 0x2f10 <fputc>
    2b5c:	e4 cf       	rjmp	.-56     	; 0x2b26 <vfprintf+0x50>
    2b5e:	ff 24       	eor	r15, r15
    2b60:	ee 24       	eor	r14, r14
    2b62:	10 e0       	ldi	r17, 0x00	; 0
    2b64:	10 32       	cpi	r17, 0x20	; 32
    2b66:	b0 f4       	brcc	.+44     	; 0x2b94 <vfprintf+0xbe>
    2b68:	8b 32       	cpi	r24, 0x2B	; 43
    2b6a:	69 f0       	breq	.+26     	; 0x2b86 <vfprintf+0xb0>
    2b6c:	8c 32       	cpi	r24, 0x2C	; 44
    2b6e:	28 f4       	brcc	.+10     	; 0x2b7a <vfprintf+0xa4>
    2b70:	80 32       	cpi	r24, 0x20	; 32
    2b72:	51 f0       	breq	.+20     	; 0x2b88 <vfprintf+0xb2>
    2b74:	83 32       	cpi	r24, 0x23	; 35
    2b76:	71 f4       	brne	.+28     	; 0x2b94 <vfprintf+0xbe>
    2b78:	0b c0       	rjmp	.+22     	; 0x2b90 <vfprintf+0xba>
    2b7a:	8d 32       	cpi	r24, 0x2D	; 45
    2b7c:	39 f0       	breq	.+14     	; 0x2b8c <vfprintf+0xb6>
    2b7e:	80 33       	cpi	r24, 0x30	; 48
    2b80:	49 f4       	brne	.+18     	; 0x2b94 <vfprintf+0xbe>
    2b82:	11 60       	ori	r17, 0x01	; 1
    2b84:	2c c0       	rjmp	.+88     	; 0x2bde <vfprintf+0x108>
    2b86:	12 60       	ori	r17, 0x02	; 2
    2b88:	14 60       	ori	r17, 0x04	; 4
    2b8a:	29 c0       	rjmp	.+82     	; 0x2bde <vfprintf+0x108>
    2b8c:	18 60       	ori	r17, 0x08	; 8
    2b8e:	27 c0       	rjmp	.+78     	; 0x2bde <vfprintf+0x108>
    2b90:	10 61       	ori	r17, 0x10	; 16
    2b92:	25 c0       	rjmp	.+74     	; 0x2bde <vfprintf+0x108>
    2b94:	17 fd       	sbrc	r17, 7
    2b96:	2e c0       	rjmp	.+92     	; 0x2bf4 <vfprintf+0x11e>
    2b98:	28 2f       	mov	r18, r24
    2b9a:	20 53       	subi	r18, 0x30	; 48
    2b9c:	2a 30       	cpi	r18, 0x0A	; 10
    2b9e:	98 f4       	brcc	.+38     	; 0x2bc6 <vfprintf+0xf0>
    2ba0:	16 ff       	sbrs	r17, 6
    2ba2:	08 c0       	rjmp	.+16     	; 0x2bb4 <vfprintf+0xde>
    2ba4:	8f 2d       	mov	r24, r15
    2ba6:	88 0f       	add	r24, r24
    2ba8:	f8 2e       	mov	r15, r24
    2baa:	ff 0c       	add	r15, r15
    2bac:	ff 0c       	add	r15, r15
    2bae:	f8 0e       	add	r15, r24
    2bb0:	f2 0e       	add	r15, r18
    2bb2:	15 c0       	rjmp	.+42     	; 0x2bde <vfprintf+0x108>
    2bb4:	8e 2d       	mov	r24, r14
    2bb6:	88 0f       	add	r24, r24
    2bb8:	e8 2e       	mov	r14, r24
    2bba:	ee 0c       	add	r14, r14
    2bbc:	ee 0c       	add	r14, r14
    2bbe:	e8 0e       	add	r14, r24
    2bc0:	e2 0e       	add	r14, r18
    2bc2:	10 62       	ori	r17, 0x20	; 32
    2bc4:	0c c0       	rjmp	.+24     	; 0x2bde <vfprintf+0x108>
    2bc6:	8e 32       	cpi	r24, 0x2E	; 46
    2bc8:	21 f4       	brne	.+8      	; 0x2bd2 <vfprintf+0xfc>
    2bca:	16 fd       	sbrc	r17, 6
    2bcc:	6c c1       	rjmp	.+728    	; 0x2ea6 <vfprintf+0x3d0>
    2bce:	10 64       	ori	r17, 0x40	; 64
    2bd0:	06 c0       	rjmp	.+12     	; 0x2bde <vfprintf+0x108>
    2bd2:	8c 36       	cpi	r24, 0x6C	; 108
    2bd4:	11 f4       	brne	.+4      	; 0x2bda <vfprintf+0x104>
    2bd6:	10 68       	ori	r17, 0x80	; 128
    2bd8:	02 c0       	rjmp	.+4      	; 0x2bde <vfprintf+0x108>
    2bda:	88 36       	cpi	r24, 0x68	; 104
    2bdc:	59 f4       	brne	.+22     	; 0x2bf4 <vfprintf+0x11e>
    2bde:	ec 85       	ldd	r30, Y+12	; 0x0c
    2be0:	fd 85       	ldd	r31, Y+13	; 0x0d
    2be2:	93 fd       	sbrc	r25, 3
    2be4:	85 91       	lpm	r24, Z+
    2be6:	93 ff       	sbrs	r25, 3
    2be8:	81 91       	ld	r24, Z+
    2bea:	fd 87       	std	Y+13, r31	; 0x0d
    2bec:	ec 87       	std	Y+12, r30	; 0x0c
    2bee:	88 23       	and	r24, r24
    2bf0:	09 f0       	breq	.+2      	; 0x2bf4 <vfprintf+0x11e>
    2bf2:	b8 cf       	rjmp	.-144    	; 0x2b64 <vfprintf+0x8e>
    2bf4:	98 2f       	mov	r25, r24
    2bf6:	95 54       	subi	r25, 0x45	; 69
    2bf8:	93 30       	cpi	r25, 0x03	; 3
    2bfa:	18 f0       	brcs	.+6      	; 0x2c02 <vfprintf+0x12c>
    2bfc:	90 52       	subi	r25, 0x20	; 32
    2bfe:	93 30       	cpi	r25, 0x03	; 3
    2c00:	38 f4       	brcc	.+14     	; 0x2c10 <vfprintf+0x13a>
    2c02:	24 e0       	ldi	r18, 0x04	; 4
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	a2 0e       	add	r10, r18
    2c08:	b3 1e       	adc	r11, r19
    2c0a:	3f e3       	ldi	r19, 0x3F	; 63
    2c0c:	39 83       	std	Y+1, r19	; 0x01
    2c0e:	0f c0       	rjmp	.+30     	; 0x2c2e <vfprintf+0x158>
    2c10:	83 36       	cpi	r24, 0x63	; 99
    2c12:	31 f0       	breq	.+12     	; 0x2c20 <vfprintf+0x14a>
    2c14:	83 37       	cpi	r24, 0x73	; 115
    2c16:	81 f0       	breq	.+32     	; 0x2c38 <vfprintf+0x162>
    2c18:	83 35       	cpi	r24, 0x53	; 83
    2c1a:	09 f0       	breq	.+2      	; 0x2c1e <vfprintf+0x148>
    2c1c:	5a c0       	rjmp	.+180    	; 0x2cd2 <vfprintf+0x1fc>
    2c1e:	22 c0       	rjmp	.+68     	; 0x2c64 <vfprintf+0x18e>
    2c20:	f5 01       	movw	r30, r10
    2c22:	80 81       	ld	r24, Z
    2c24:	89 83       	std	Y+1, r24	; 0x01
    2c26:	22 e0       	ldi	r18, 0x02	; 2
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	a2 0e       	add	r10, r18
    2c2c:	b3 1e       	adc	r11, r19
    2c2e:	21 e0       	ldi	r18, 0x01	; 1
    2c30:	c2 2e       	mov	r12, r18
    2c32:	d1 2c       	mov	r13, r1
    2c34:	42 01       	movw	r8, r4
    2c36:	14 c0       	rjmp	.+40     	; 0x2c60 <vfprintf+0x18a>
    2c38:	92 e0       	ldi	r25, 0x02	; 2
    2c3a:	29 2e       	mov	r2, r25
    2c3c:	31 2c       	mov	r3, r1
    2c3e:	2a 0c       	add	r2, r10
    2c40:	3b 1c       	adc	r3, r11
    2c42:	f5 01       	movw	r30, r10
    2c44:	80 80       	ld	r8, Z
    2c46:	91 80       	ldd	r9, Z+1	; 0x01
    2c48:	16 ff       	sbrs	r17, 6
    2c4a:	03 c0       	rjmp	.+6      	; 0x2c52 <vfprintf+0x17c>
    2c4c:	6f 2d       	mov	r22, r15
    2c4e:	70 e0       	ldi	r23, 0x00	; 0
    2c50:	02 c0       	rjmp	.+4      	; 0x2c56 <vfprintf+0x180>
    2c52:	6f ef       	ldi	r22, 0xFF	; 255
    2c54:	7f ef       	ldi	r23, 0xFF	; 255
    2c56:	c4 01       	movw	r24, r8
    2c58:	0e 94 7d 17 	call	0x2efa	; 0x2efa <strnlen>
    2c5c:	6c 01       	movw	r12, r24
    2c5e:	51 01       	movw	r10, r2
    2c60:	1f 77       	andi	r17, 0x7F	; 127
    2c62:	15 c0       	rjmp	.+42     	; 0x2c8e <vfprintf+0x1b8>
    2c64:	82 e0       	ldi	r24, 0x02	; 2
    2c66:	28 2e       	mov	r2, r24
    2c68:	31 2c       	mov	r3, r1
    2c6a:	2a 0c       	add	r2, r10
    2c6c:	3b 1c       	adc	r3, r11
    2c6e:	f5 01       	movw	r30, r10
    2c70:	80 80       	ld	r8, Z
    2c72:	91 80       	ldd	r9, Z+1	; 0x01
    2c74:	16 ff       	sbrs	r17, 6
    2c76:	03 c0       	rjmp	.+6      	; 0x2c7e <vfprintf+0x1a8>
    2c78:	6f 2d       	mov	r22, r15
    2c7a:	70 e0       	ldi	r23, 0x00	; 0
    2c7c:	02 c0       	rjmp	.+4      	; 0x2c82 <vfprintf+0x1ac>
    2c7e:	6f ef       	ldi	r22, 0xFF	; 255
    2c80:	7f ef       	ldi	r23, 0xFF	; 255
    2c82:	c4 01       	movw	r24, r8
    2c84:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <strnlen_P>
    2c88:	6c 01       	movw	r12, r24
    2c8a:	10 68       	ori	r17, 0x80	; 128
    2c8c:	51 01       	movw	r10, r2
    2c8e:	13 fd       	sbrc	r17, 3
    2c90:	1c c0       	rjmp	.+56     	; 0x2cca <vfprintf+0x1f4>
    2c92:	06 c0       	rjmp	.+12     	; 0x2ca0 <vfprintf+0x1ca>
    2c94:	80 e2       	ldi	r24, 0x20	; 32
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	b3 01       	movw	r22, r6
    2c9a:	0e 94 88 17 	call	0x2f10	; 0x2f10 <fputc>
    2c9e:	ea 94       	dec	r14
    2ca0:	8e 2d       	mov	r24, r14
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	c8 16       	cp	r12, r24
    2ca6:	d9 06       	cpc	r13, r25
    2ca8:	a8 f3       	brcs	.-22     	; 0x2c94 <vfprintf+0x1be>
    2caa:	0f c0       	rjmp	.+30     	; 0x2cca <vfprintf+0x1f4>
    2cac:	f4 01       	movw	r30, r8
    2cae:	17 fd       	sbrc	r17, 7
    2cb0:	85 91       	lpm	r24, Z+
    2cb2:	17 ff       	sbrs	r17, 7
    2cb4:	81 91       	ld	r24, Z+
    2cb6:	4f 01       	movw	r8, r30
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	b3 01       	movw	r22, r6
    2cbc:	0e 94 88 17 	call	0x2f10	; 0x2f10 <fputc>
    2cc0:	e1 10       	cpse	r14, r1
    2cc2:	ea 94       	dec	r14
    2cc4:	08 94       	sec
    2cc6:	c1 08       	sbc	r12, r1
    2cc8:	d1 08       	sbc	r13, r1
    2cca:	c1 14       	cp	r12, r1
    2ccc:	d1 04       	cpc	r13, r1
    2cce:	71 f7       	brne	.-36     	; 0x2cac <vfprintf+0x1d6>
    2cd0:	e7 c0       	rjmp	.+462    	; 0x2ea0 <vfprintf+0x3ca>
    2cd2:	84 36       	cpi	r24, 0x64	; 100
    2cd4:	11 f0       	breq	.+4      	; 0x2cda <vfprintf+0x204>
    2cd6:	89 36       	cpi	r24, 0x69	; 105
    2cd8:	51 f5       	brne	.+84     	; 0x2d2e <vfprintf+0x258>
    2cda:	f5 01       	movw	r30, r10
    2cdc:	17 ff       	sbrs	r17, 7
    2cde:	07 c0       	rjmp	.+14     	; 0x2cee <vfprintf+0x218>
    2ce0:	80 81       	ld	r24, Z
    2ce2:	91 81       	ldd	r25, Z+1	; 0x01
    2ce4:	a2 81       	ldd	r26, Z+2	; 0x02
    2ce6:	b3 81       	ldd	r27, Z+3	; 0x03
    2ce8:	24 e0       	ldi	r18, 0x04	; 4
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	08 c0       	rjmp	.+16     	; 0x2cfe <vfprintf+0x228>
    2cee:	80 81       	ld	r24, Z
    2cf0:	91 81       	ldd	r25, Z+1	; 0x01
    2cf2:	aa 27       	eor	r26, r26
    2cf4:	97 fd       	sbrc	r25, 7
    2cf6:	a0 95       	com	r26
    2cf8:	ba 2f       	mov	r27, r26
    2cfa:	22 e0       	ldi	r18, 0x02	; 2
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	a2 0e       	add	r10, r18
    2d00:	b3 1e       	adc	r11, r19
    2d02:	01 2f       	mov	r16, r17
    2d04:	0f 76       	andi	r16, 0x6F	; 111
    2d06:	b7 ff       	sbrs	r27, 7
    2d08:	08 c0       	rjmp	.+16     	; 0x2d1a <vfprintf+0x244>
    2d0a:	b0 95       	com	r27
    2d0c:	a0 95       	com	r26
    2d0e:	90 95       	com	r25
    2d10:	81 95       	neg	r24
    2d12:	9f 4f       	sbci	r25, 0xFF	; 255
    2d14:	af 4f       	sbci	r26, 0xFF	; 255
    2d16:	bf 4f       	sbci	r27, 0xFF	; 255
    2d18:	00 68       	ori	r16, 0x80	; 128
    2d1a:	bc 01       	movw	r22, r24
    2d1c:	cd 01       	movw	r24, r26
    2d1e:	a2 01       	movw	r20, r4
    2d20:	2a e0       	ldi	r18, 0x0A	; 10
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <__ultoa_invert>
    2d28:	d8 2e       	mov	r13, r24
    2d2a:	d4 18       	sub	r13, r4
    2d2c:	3f c0       	rjmp	.+126    	; 0x2dac <vfprintf+0x2d6>
    2d2e:	85 37       	cpi	r24, 0x75	; 117
    2d30:	21 f4       	brne	.+8      	; 0x2d3a <vfprintf+0x264>
    2d32:	1f 7e       	andi	r17, 0xEF	; 239
    2d34:	2a e0       	ldi	r18, 0x0A	; 10
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	20 c0       	rjmp	.+64     	; 0x2d7a <vfprintf+0x2a4>
    2d3a:	19 7f       	andi	r17, 0xF9	; 249
    2d3c:	8f 36       	cpi	r24, 0x6F	; 111
    2d3e:	a9 f0       	breq	.+42     	; 0x2d6a <vfprintf+0x294>
    2d40:	80 37       	cpi	r24, 0x70	; 112
    2d42:	20 f4       	brcc	.+8      	; 0x2d4c <vfprintf+0x276>
    2d44:	88 35       	cpi	r24, 0x58	; 88
    2d46:	09 f0       	breq	.+2      	; 0x2d4a <vfprintf+0x274>
    2d48:	ae c0       	rjmp	.+348    	; 0x2ea6 <vfprintf+0x3d0>
    2d4a:	0b c0       	rjmp	.+22     	; 0x2d62 <vfprintf+0x28c>
    2d4c:	80 37       	cpi	r24, 0x70	; 112
    2d4e:	21 f0       	breq	.+8      	; 0x2d58 <vfprintf+0x282>
    2d50:	88 37       	cpi	r24, 0x78	; 120
    2d52:	09 f0       	breq	.+2      	; 0x2d56 <vfprintf+0x280>
    2d54:	a8 c0       	rjmp	.+336    	; 0x2ea6 <vfprintf+0x3d0>
    2d56:	01 c0       	rjmp	.+2      	; 0x2d5a <vfprintf+0x284>
    2d58:	10 61       	ori	r17, 0x10	; 16
    2d5a:	14 ff       	sbrs	r17, 4
    2d5c:	09 c0       	rjmp	.+18     	; 0x2d70 <vfprintf+0x29a>
    2d5e:	14 60       	ori	r17, 0x04	; 4
    2d60:	07 c0       	rjmp	.+14     	; 0x2d70 <vfprintf+0x29a>
    2d62:	14 ff       	sbrs	r17, 4
    2d64:	08 c0       	rjmp	.+16     	; 0x2d76 <vfprintf+0x2a0>
    2d66:	16 60       	ori	r17, 0x06	; 6
    2d68:	06 c0       	rjmp	.+12     	; 0x2d76 <vfprintf+0x2a0>
    2d6a:	28 e0       	ldi	r18, 0x08	; 8
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	05 c0       	rjmp	.+10     	; 0x2d7a <vfprintf+0x2a4>
    2d70:	20 e1       	ldi	r18, 0x10	; 16
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	02 c0       	rjmp	.+4      	; 0x2d7a <vfprintf+0x2a4>
    2d76:	20 e1       	ldi	r18, 0x10	; 16
    2d78:	32 e0       	ldi	r19, 0x02	; 2
    2d7a:	f5 01       	movw	r30, r10
    2d7c:	17 ff       	sbrs	r17, 7
    2d7e:	07 c0       	rjmp	.+14     	; 0x2d8e <vfprintf+0x2b8>
    2d80:	60 81       	ld	r22, Z
    2d82:	71 81       	ldd	r23, Z+1	; 0x01
    2d84:	82 81       	ldd	r24, Z+2	; 0x02
    2d86:	93 81       	ldd	r25, Z+3	; 0x03
    2d88:	44 e0       	ldi	r20, 0x04	; 4
    2d8a:	50 e0       	ldi	r21, 0x00	; 0
    2d8c:	06 c0       	rjmp	.+12     	; 0x2d9a <vfprintf+0x2c4>
    2d8e:	60 81       	ld	r22, Z
    2d90:	71 81       	ldd	r23, Z+1	; 0x01
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	42 e0       	ldi	r20, 0x02	; 2
    2d98:	50 e0       	ldi	r21, 0x00	; 0
    2d9a:	a4 0e       	add	r10, r20
    2d9c:	b5 1e       	adc	r11, r21
    2d9e:	a2 01       	movw	r20, r4
    2da0:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <__ultoa_invert>
    2da4:	d8 2e       	mov	r13, r24
    2da6:	d4 18       	sub	r13, r4
    2da8:	01 2f       	mov	r16, r17
    2daa:	0f 77       	andi	r16, 0x7F	; 127
    2dac:	06 ff       	sbrs	r16, 6
    2dae:	09 c0       	rjmp	.+18     	; 0x2dc2 <vfprintf+0x2ec>
    2db0:	0e 7f       	andi	r16, 0xFE	; 254
    2db2:	df 14       	cp	r13, r15
    2db4:	30 f4       	brcc	.+12     	; 0x2dc2 <vfprintf+0x2ec>
    2db6:	04 ff       	sbrs	r16, 4
    2db8:	06 c0       	rjmp	.+12     	; 0x2dc6 <vfprintf+0x2f0>
    2dba:	02 fd       	sbrc	r16, 2
    2dbc:	04 c0       	rjmp	.+8      	; 0x2dc6 <vfprintf+0x2f0>
    2dbe:	0f 7e       	andi	r16, 0xEF	; 239
    2dc0:	02 c0       	rjmp	.+4      	; 0x2dc6 <vfprintf+0x2f0>
    2dc2:	1d 2d       	mov	r17, r13
    2dc4:	01 c0       	rjmp	.+2      	; 0x2dc8 <vfprintf+0x2f2>
    2dc6:	1f 2d       	mov	r17, r15
    2dc8:	80 2f       	mov	r24, r16
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	04 ff       	sbrs	r16, 4
    2dce:	0c c0       	rjmp	.+24     	; 0x2de8 <vfprintf+0x312>
    2dd0:	fe 01       	movw	r30, r28
    2dd2:	ed 0d       	add	r30, r13
    2dd4:	f1 1d       	adc	r31, r1
    2dd6:	20 81       	ld	r18, Z
    2dd8:	20 33       	cpi	r18, 0x30	; 48
    2dda:	11 f4       	brne	.+4      	; 0x2de0 <vfprintf+0x30a>
    2ddc:	09 7e       	andi	r16, 0xE9	; 233
    2dde:	09 c0       	rjmp	.+18     	; 0x2df2 <vfprintf+0x31c>
    2de0:	02 ff       	sbrs	r16, 2
    2de2:	06 c0       	rjmp	.+12     	; 0x2df0 <vfprintf+0x31a>
    2de4:	1e 5f       	subi	r17, 0xFE	; 254
    2de6:	05 c0       	rjmp	.+10     	; 0x2df2 <vfprintf+0x31c>
    2de8:	86 78       	andi	r24, 0x86	; 134
    2dea:	90 70       	andi	r25, 0x00	; 0
    2dec:	00 97       	sbiw	r24, 0x00	; 0
    2dee:	09 f0       	breq	.+2      	; 0x2df2 <vfprintf+0x31c>
    2df0:	1f 5f       	subi	r17, 0xFF	; 255
    2df2:	80 2e       	mov	r8, r16
    2df4:	99 24       	eor	r9, r9
    2df6:	03 fd       	sbrc	r16, 3
    2df8:	12 c0       	rjmp	.+36     	; 0x2e1e <vfprintf+0x348>
    2dfa:	00 ff       	sbrs	r16, 0
    2dfc:	0d c0       	rjmp	.+26     	; 0x2e18 <vfprintf+0x342>
    2dfe:	fd 2c       	mov	r15, r13
    2e00:	1e 15       	cp	r17, r14
    2e02:	50 f4       	brcc	.+20     	; 0x2e18 <vfprintf+0x342>
    2e04:	fe 0c       	add	r15, r14
    2e06:	f1 1a       	sub	r15, r17
    2e08:	1e 2d       	mov	r17, r14
    2e0a:	06 c0       	rjmp	.+12     	; 0x2e18 <vfprintf+0x342>
    2e0c:	80 e2       	ldi	r24, 0x20	; 32
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	b3 01       	movw	r22, r6
    2e12:	0e 94 88 17 	call	0x2f10	; 0x2f10 <fputc>
    2e16:	1f 5f       	subi	r17, 0xFF	; 255
    2e18:	1e 15       	cp	r17, r14
    2e1a:	c0 f3       	brcs	.-16     	; 0x2e0c <vfprintf+0x336>
    2e1c:	04 c0       	rjmp	.+8      	; 0x2e26 <vfprintf+0x350>
    2e1e:	1e 15       	cp	r17, r14
    2e20:	10 f4       	brcc	.+4      	; 0x2e26 <vfprintf+0x350>
    2e22:	e1 1a       	sub	r14, r17
    2e24:	01 c0       	rjmp	.+2      	; 0x2e28 <vfprintf+0x352>
    2e26:	ee 24       	eor	r14, r14
    2e28:	84 fe       	sbrs	r8, 4
    2e2a:	0f c0       	rjmp	.+30     	; 0x2e4a <vfprintf+0x374>
    2e2c:	80 e3       	ldi	r24, 0x30	; 48
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	b3 01       	movw	r22, r6
    2e32:	0e 94 88 17 	call	0x2f10	; 0x2f10 <fputc>
    2e36:	82 fe       	sbrs	r8, 2
    2e38:	1f c0       	rjmp	.+62     	; 0x2e78 <vfprintf+0x3a2>
    2e3a:	81 fe       	sbrs	r8, 1
    2e3c:	03 c0       	rjmp	.+6      	; 0x2e44 <vfprintf+0x36e>
    2e3e:	88 e5       	ldi	r24, 0x58	; 88
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	10 c0       	rjmp	.+32     	; 0x2e64 <vfprintf+0x38e>
    2e44:	88 e7       	ldi	r24, 0x78	; 120
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	0d c0       	rjmp	.+26     	; 0x2e64 <vfprintf+0x38e>
    2e4a:	c4 01       	movw	r24, r8
    2e4c:	86 78       	andi	r24, 0x86	; 134
    2e4e:	90 70       	andi	r25, 0x00	; 0
    2e50:	00 97       	sbiw	r24, 0x00	; 0
    2e52:	91 f0       	breq	.+36     	; 0x2e78 <vfprintf+0x3a2>
    2e54:	81 fc       	sbrc	r8, 1
    2e56:	02 c0       	rjmp	.+4      	; 0x2e5c <vfprintf+0x386>
    2e58:	80 e2       	ldi	r24, 0x20	; 32
    2e5a:	01 c0       	rjmp	.+2      	; 0x2e5e <vfprintf+0x388>
    2e5c:	8b e2       	ldi	r24, 0x2B	; 43
    2e5e:	07 fd       	sbrc	r16, 7
    2e60:	8d e2       	ldi	r24, 0x2D	; 45
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	b3 01       	movw	r22, r6
    2e66:	0e 94 88 17 	call	0x2f10	; 0x2f10 <fputc>
    2e6a:	06 c0       	rjmp	.+12     	; 0x2e78 <vfprintf+0x3a2>
    2e6c:	80 e3       	ldi	r24, 0x30	; 48
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	b3 01       	movw	r22, r6
    2e72:	0e 94 88 17 	call	0x2f10	; 0x2f10 <fputc>
    2e76:	fa 94       	dec	r15
    2e78:	df 14       	cp	r13, r15
    2e7a:	c0 f3       	brcs	.-16     	; 0x2e6c <vfprintf+0x396>
    2e7c:	da 94       	dec	r13
    2e7e:	f2 01       	movw	r30, r4
    2e80:	ed 0d       	add	r30, r13
    2e82:	f1 1d       	adc	r31, r1
    2e84:	80 81       	ld	r24, Z
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	b3 01       	movw	r22, r6
    2e8a:	0e 94 88 17 	call	0x2f10	; 0x2f10 <fputc>
    2e8e:	dd 20       	and	r13, r13
    2e90:	a9 f7       	brne	.-22     	; 0x2e7c <vfprintf+0x3a6>
    2e92:	06 c0       	rjmp	.+12     	; 0x2ea0 <vfprintf+0x3ca>
    2e94:	80 e2       	ldi	r24, 0x20	; 32
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	b3 01       	movw	r22, r6
    2e9a:	0e 94 88 17 	call	0x2f10	; 0x2f10 <fputc>
    2e9e:	ea 94       	dec	r14
    2ea0:	ee 20       	and	r14, r14
    2ea2:	c1 f7       	brne	.-16     	; 0x2e94 <vfprintf+0x3be>
    2ea4:	40 ce       	rjmp	.-896    	; 0x2b26 <vfprintf+0x50>
    2ea6:	f3 01       	movw	r30, r6
    2ea8:	86 81       	ldd	r24, Z+6	; 0x06
    2eaa:	97 81       	ldd	r25, Z+7	; 0x07
    2eac:	02 c0       	rjmp	.+4      	; 0x2eb2 <vfprintf+0x3dc>
    2eae:	8f ef       	ldi	r24, 0xFF	; 255
    2eb0:	9f ef       	ldi	r25, 0xFF	; 255
    2eb2:	2d 96       	adiw	r28, 0x0d	; 13
    2eb4:	0f b6       	in	r0, 0x3f	; 63
    2eb6:	f8 94       	cli
    2eb8:	de bf       	out	0x3e, r29	; 62
    2eba:	0f be       	out	0x3f, r0	; 63
    2ebc:	cd bf       	out	0x3d, r28	; 61
    2ebe:	df 91       	pop	r29
    2ec0:	cf 91       	pop	r28
    2ec2:	1f 91       	pop	r17
    2ec4:	0f 91       	pop	r16
    2ec6:	ff 90       	pop	r15
    2ec8:	ef 90       	pop	r14
    2eca:	df 90       	pop	r13
    2ecc:	cf 90       	pop	r12
    2ece:	bf 90       	pop	r11
    2ed0:	af 90       	pop	r10
    2ed2:	9f 90       	pop	r9
    2ed4:	8f 90       	pop	r8
    2ed6:	7f 90       	pop	r7
    2ed8:	6f 90       	pop	r6
    2eda:	5f 90       	pop	r5
    2edc:	4f 90       	pop	r4
    2ede:	3f 90       	pop	r3
    2ee0:	2f 90       	pop	r2
    2ee2:	08 95       	ret

00002ee4 <strnlen_P>:
    2ee4:	fc 01       	movw	r30, r24
    2ee6:	05 90       	lpm	r0, Z+
    2ee8:	61 50       	subi	r22, 0x01	; 1
    2eea:	70 40       	sbci	r23, 0x00	; 0
    2eec:	01 10       	cpse	r0, r1
    2eee:	d8 f7       	brcc	.-10     	; 0x2ee6 <strnlen_P+0x2>
    2ef0:	80 95       	com	r24
    2ef2:	90 95       	com	r25
    2ef4:	8e 0f       	add	r24, r30
    2ef6:	9f 1f       	adc	r25, r31
    2ef8:	08 95       	ret

00002efa <strnlen>:
    2efa:	fc 01       	movw	r30, r24
    2efc:	61 50       	subi	r22, 0x01	; 1
    2efe:	70 40       	sbci	r23, 0x00	; 0
    2f00:	01 90       	ld	r0, Z+
    2f02:	01 10       	cpse	r0, r1
    2f04:	d8 f7       	brcc	.-10     	; 0x2efc <strnlen+0x2>
    2f06:	80 95       	com	r24
    2f08:	90 95       	com	r25
    2f0a:	8e 0f       	add	r24, r30
    2f0c:	9f 1f       	adc	r25, r31
    2f0e:	08 95       	ret

00002f10 <fputc>:
    2f10:	0f 93       	push	r16
    2f12:	1f 93       	push	r17
    2f14:	cf 93       	push	r28
    2f16:	df 93       	push	r29
    2f18:	8c 01       	movw	r16, r24
    2f1a:	eb 01       	movw	r28, r22
    2f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1e:	81 ff       	sbrs	r24, 1
    2f20:	1b c0       	rjmp	.+54     	; 0x2f58 <fputc+0x48>
    2f22:	82 ff       	sbrs	r24, 2
    2f24:	0d c0       	rjmp	.+26     	; 0x2f40 <fputc+0x30>
    2f26:	2e 81       	ldd	r18, Y+6	; 0x06
    2f28:	3f 81       	ldd	r19, Y+7	; 0x07
    2f2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f2c:	9d 81       	ldd	r25, Y+5	; 0x05
    2f2e:	28 17       	cp	r18, r24
    2f30:	39 07       	cpc	r19, r25
    2f32:	64 f4       	brge	.+24     	; 0x2f4c <fputc+0x3c>
    2f34:	e8 81       	ld	r30, Y
    2f36:	f9 81       	ldd	r31, Y+1	; 0x01
    2f38:	01 93       	st	Z+, r16
    2f3a:	f9 83       	std	Y+1, r31	; 0x01
    2f3c:	e8 83       	st	Y, r30
    2f3e:	06 c0       	rjmp	.+12     	; 0x2f4c <fputc+0x3c>
    2f40:	e8 85       	ldd	r30, Y+8	; 0x08
    2f42:	f9 85       	ldd	r31, Y+9	; 0x09
    2f44:	80 2f       	mov	r24, r16
    2f46:	09 95       	icall
    2f48:	00 97       	sbiw	r24, 0x00	; 0
    2f4a:	31 f4       	brne	.+12     	; 0x2f58 <fputc+0x48>
    2f4c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f4e:	9f 81       	ldd	r25, Y+7	; 0x07
    2f50:	01 96       	adiw	r24, 0x01	; 1
    2f52:	9f 83       	std	Y+7, r25	; 0x07
    2f54:	8e 83       	std	Y+6, r24	; 0x06
    2f56:	02 c0       	rjmp	.+4      	; 0x2f5c <fputc+0x4c>
    2f58:	0f ef       	ldi	r16, 0xFF	; 255
    2f5a:	1f ef       	ldi	r17, 0xFF	; 255
    2f5c:	c8 01       	movw	r24, r16
    2f5e:	df 91       	pop	r29
    2f60:	cf 91       	pop	r28
    2f62:	1f 91       	pop	r17
    2f64:	0f 91       	pop	r16
    2f66:	08 95       	ret

00002f68 <__ultoa_invert>:
    2f68:	fa 01       	movw	r30, r20
    2f6a:	aa 27       	eor	r26, r26
    2f6c:	28 30       	cpi	r18, 0x08	; 8
    2f6e:	51 f1       	breq	.+84     	; 0x2fc4 <__ultoa_invert+0x5c>
    2f70:	20 31       	cpi	r18, 0x10	; 16
    2f72:	81 f1       	breq	.+96     	; 0x2fd4 <__ultoa_invert+0x6c>
    2f74:	e8 94       	clt
    2f76:	6f 93       	push	r22
    2f78:	6e 7f       	andi	r22, 0xFE	; 254
    2f7a:	6e 5f       	subi	r22, 0xFE	; 254
    2f7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f7e:	8f 4f       	sbci	r24, 0xFF	; 255
    2f80:	9f 4f       	sbci	r25, 0xFF	; 255
    2f82:	af 4f       	sbci	r26, 0xFF	; 255
    2f84:	b1 e0       	ldi	r27, 0x01	; 1
    2f86:	3e d0       	rcall	.+124    	; 0x3004 <__ultoa_invert+0x9c>
    2f88:	b4 e0       	ldi	r27, 0x04	; 4
    2f8a:	3c d0       	rcall	.+120    	; 0x3004 <__ultoa_invert+0x9c>
    2f8c:	67 0f       	add	r22, r23
    2f8e:	78 1f       	adc	r23, r24
    2f90:	89 1f       	adc	r24, r25
    2f92:	9a 1f       	adc	r25, r26
    2f94:	a1 1d       	adc	r26, r1
    2f96:	68 0f       	add	r22, r24
    2f98:	79 1f       	adc	r23, r25
    2f9a:	8a 1f       	adc	r24, r26
    2f9c:	91 1d       	adc	r25, r1
    2f9e:	a1 1d       	adc	r26, r1
    2fa0:	6a 0f       	add	r22, r26
    2fa2:	71 1d       	adc	r23, r1
    2fa4:	81 1d       	adc	r24, r1
    2fa6:	91 1d       	adc	r25, r1
    2fa8:	a1 1d       	adc	r26, r1
    2faa:	20 d0       	rcall	.+64     	; 0x2fec <__ultoa_invert+0x84>
    2fac:	09 f4       	brne	.+2      	; 0x2fb0 <__ultoa_invert+0x48>
    2fae:	68 94       	set
    2fb0:	3f 91       	pop	r19
    2fb2:	2a e0       	ldi	r18, 0x0A	; 10
    2fb4:	26 9f       	mul	r18, r22
    2fb6:	11 24       	eor	r1, r1
    2fb8:	30 19       	sub	r19, r0
    2fba:	30 5d       	subi	r19, 0xD0	; 208
    2fbc:	31 93       	st	Z+, r19
    2fbe:	de f6       	brtc	.-74     	; 0x2f76 <__ultoa_invert+0xe>
    2fc0:	cf 01       	movw	r24, r30
    2fc2:	08 95       	ret
    2fc4:	46 2f       	mov	r20, r22
    2fc6:	47 70       	andi	r20, 0x07	; 7
    2fc8:	40 5d       	subi	r20, 0xD0	; 208
    2fca:	41 93       	st	Z+, r20
    2fcc:	b3 e0       	ldi	r27, 0x03	; 3
    2fce:	0f d0       	rcall	.+30     	; 0x2fee <__ultoa_invert+0x86>
    2fd0:	c9 f7       	brne	.-14     	; 0x2fc4 <__ultoa_invert+0x5c>
    2fd2:	f6 cf       	rjmp	.-20     	; 0x2fc0 <__ultoa_invert+0x58>
    2fd4:	46 2f       	mov	r20, r22
    2fd6:	4f 70       	andi	r20, 0x0F	; 15
    2fd8:	40 5d       	subi	r20, 0xD0	; 208
    2fda:	4a 33       	cpi	r20, 0x3A	; 58
    2fdc:	18 f0       	brcs	.+6      	; 0x2fe4 <__ultoa_invert+0x7c>
    2fde:	49 5d       	subi	r20, 0xD9	; 217
    2fe0:	31 fd       	sbrc	r19, 1
    2fe2:	40 52       	subi	r20, 0x20	; 32
    2fe4:	41 93       	st	Z+, r20
    2fe6:	02 d0       	rcall	.+4      	; 0x2fec <__ultoa_invert+0x84>
    2fe8:	a9 f7       	brne	.-22     	; 0x2fd4 <__ultoa_invert+0x6c>
    2fea:	ea cf       	rjmp	.-44     	; 0x2fc0 <__ultoa_invert+0x58>
    2fec:	b4 e0       	ldi	r27, 0x04	; 4
    2fee:	a6 95       	lsr	r26
    2ff0:	97 95       	ror	r25
    2ff2:	87 95       	ror	r24
    2ff4:	77 95       	ror	r23
    2ff6:	67 95       	ror	r22
    2ff8:	ba 95       	dec	r27
    2ffa:	c9 f7       	brne	.-14     	; 0x2fee <__ultoa_invert+0x86>
    2ffc:	00 97       	sbiw	r24, 0x00	; 0
    2ffe:	61 05       	cpc	r22, r1
    3000:	71 05       	cpc	r23, r1
    3002:	08 95       	ret
    3004:	9b 01       	movw	r18, r22
    3006:	ac 01       	movw	r20, r24
    3008:	0a 2e       	mov	r0, r26
    300a:	06 94       	lsr	r0
    300c:	57 95       	ror	r21
    300e:	47 95       	ror	r20
    3010:	37 95       	ror	r19
    3012:	27 95       	ror	r18
    3014:	ba 95       	dec	r27
    3016:	c9 f7       	brne	.-14     	; 0x300a <__ultoa_invert+0xa2>
    3018:	62 0f       	add	r22, r18
    301a:	73 1f       	adc	r23, r19
    301c:	84 1f       	adc	r24, r20
    301e:	95 1f       	adc	r25, r21
    3020:	a0 1d       	adc	r26, r0
    3022:	08 95       	ret

00003024 <_exit>:
    3024:	f8 94       	cli

00003026 <__stop_program>:
    3026:	ff cf       	rjmp	.-2      	; 0x3026 <__stop_program>
