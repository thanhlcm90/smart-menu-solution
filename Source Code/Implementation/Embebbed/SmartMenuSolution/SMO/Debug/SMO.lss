
SMO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000170  00800100  00003dd6  00003e6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003dd6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000060  00800270  00800270  00003fda  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00003fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  00004c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000248  00000000  00000000  00004e18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003ee0  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fe6  00000000  00000000  00008f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a99  00000000  00000000  00009f26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000af4  00000000  00000000  0000b9c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001fb0  00000000  00000000  0000c4b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002857  00000000  00000000  0000e464  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00010cbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b2 00 	jmp	0x164	; 0x164 <__ctors_end>
       4:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
       8:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
       c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      10:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      14:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      18:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      1c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      20:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      24:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      28:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      2c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      30:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      34:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      38:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      3c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      40:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__vector_16>
      44:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      48:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      4c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      50:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      54:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      58:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      5c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      60:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      64:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      68:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      6c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      70:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      74:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      78:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      7c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      80:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      84:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      88:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      8c:	35 08       	sbc	r3, r5
      8e:	04 09       	sbc	r16, r4
      90:	3c 08       	sbc	r3, r12
      92:	43 08       	sbc	r4, r3
      94:	4a 08       	sbc	r4, r10
      96:	51 08       	sbc	r5, r1
      98:	58 08       	sbc	r5, r8
      9a:	5f 08       	sbc	r5, r15
      9c:	04 09       	sbc	r16, r4
      9e:	66 08       	sbc	r6, r6
      a0:	6d 08       	sbc	r6, r13
      a2:	74 08       	sbc	r7, r4
      a4:	7b 08       	sbc	r7, r11
      a6:	04 09       	sbc	r16, r4
      a8:	82 08       	sbc	r8, r2
      aa:	89 08       	sbc	r8, r9
      ac:	90 08       	sbc	r9, r0
      ae:	97 08       	sbc	r9, r7
      b0:	a2 08       	sbc	r10, r2
      b2:	a9 08       	sbc	r10, r9
      b4:	b0 08       	sbc	r11, r0
      b6:	b7 08       	sbc	r11, r7
      b8:	04 09       	sbc	r16, r4
      ba:	be 08       	sbc	r11, r14
      bc:	c5 08       	sbc	r12, r5
      be:	d0 08       	sbc	r13, r0
      c0:	d7 08       	sbc	r13, r7
      c2:	04 09       	sbc	r16, r4
      c4:	de 08       	sbc	r13, r14
      c6:	e5 08       	sbc	r14, r5
      c8:	ec 08       	sbc	r14, r12
      ca:	f3 08       	sbc	r15, r3
      cc:	fe 08       	sbc	r15, r14
      ce:	50 09       	sbc	r21, r0
      d0:	4d 17       	cp	r20, r29
      d2:	87 09       	sbc	r24, r7
      d4:	b6 09       	sbc	r27, r6
      d6:	e3 09       	sbc	r30, r3
      d8:	4d 17       	cp	r20, r29
      da:	ed 09       	sbc	r30, r13
      dc:	6a 0a       	sbc	r6, r26
      de:	e7 0a       	sbc	r14, r23
      e0:	44 0c       	add	r4, r4
      e2:	01 0d       	add	r16, r1
      e4:	7e 0d       	add	r23, r14
      e6:	2a 0f       	add	r18, r26
      e8:	e5 0f       	add	r30, r21
      ea:	60 10       	cpse	r6, r0
      ec:	d2 10       	cpse	r13, r2
      ee:	f7 10       	cpse	r15, r7
      f0:	4d 17       	cp	r20, r29
      f2:	45 11       	cpse	r20, r5
      f4:	b8 11       	cpse	r27, r8
      f6:	3d 12       	cpse	r3, r29
      f8:	96 12       	cpse	r9, r22
      fa:	08 13       	cpse	r16, r24
      fc:	66 13       	cpse	r22, r22
      fe:	8b 13       	cpse	r24, r27
     100:	a8 13       	cpse	r26, r24
     102:	4d 17       	cp	r20, r29
     104:	c5 13       	cpse	r28, r21
     106:	1e 14       	cp	r1, r14
     108:	86 14       	cp	r8, r6
     10a:	10 15       	cp	r17, r0
     10c:	4d 17       	cp	r20, r29
     10e:	61 15       	cp	r22, r1
     110:	cc 15       	cp	r28, r12
     112:	3e 16       	cp	r3, r30
     114:	8f 16       	cp	r8, r31
     116:	f9 16       	cp	r15, r25
     118:	97 17       	cp	r25, r23
     11a:	9e 17       	cp	r25, r30
     11c:	a5 17       	cp	r26, r21
     11e:	ad 17       	cp	r26, r29
     120:	b4 17       	cp	r27, r20
     122:	bb 17       	cp	r27, r27
     124:	c4 17       	cp	r28, r20
     126:	ce 17       	cp	r28, r30
     128:	d7 17       	cp	r29, r23
     12a:	e0 17       	cp	r30, r16
     12c:	e9 17       	cp	r30, r25
     12e:	f2 17       	cp	r31, r18
     130:	fb 17       	cp	r31, r27
     132:	04 18       	sub	r0, r4
     134:	0d 18       	sub	r0, r13
     136:	16 18       	sub	r1, r6
     138:	1f 18       	sub	r1, r15
     13a:	28 18       	sub	r2, r8
     13c:	31 18       	sub	r3, r1
     13e:	3b 18       	sub	r3, r11
     140:	44 18       	sub	r4, r4
     142:	4d 18       	sub	r4, r13
     144:	56 18       	sub	r5, r6
     146:	5f 18       	sub	r5, r15
     148:	68 18       	sub	r6, r8
     14a:	71 18       	sub	r7, r1
     14c:	7a 18       	sub	r7, r10
     14e:	83 18       	sub	r8, r3
     150:	8d 18       	sub	r8, r13
     152:	96 18       	sub	r9, r6
     154:	9f 18       	sub	r9, r15
     156:	a7 18       	sub	r10, r7
     158:	af 18       	sub	r10, r15
     15a:	b8 18       	sub	r11, r8
     15c:	c0 18       	sub	r12, r0
     15e:	c8 18       	sub	r12, r8
     160:	d0 18       	sub	r13, r0
     162:	d8 18       	sub	r13, r8

00000164 <__ctors_end>:
     164:	11 24       	eor	r1, r1
     166:	1f be       	out	0x3f, r1	; 63
     168:	cf ef       	ldi	r28, 0xFF	; 255
     16a:	d0 e1       	ldi	r29, 0x10	; 16
     16c:	de bf       	out	0x3e, r29	; 62
     16e:	cd bf       	out	0x3d, r28	; 61

00000170 <__do_copy_data>:
     170:	12 e0       	ldi	r17, 0x02	; 2
     172:	a0 e0       	ldi	r26, 0x00	; 0
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	e6 ed       	ldi	r30, 0xD6	; 214
     178:	fd e3       	ldi	r31, 0x3D	; 61
     17a:	00 e0       	ldi	r16, 0x00	; 0
     17c:	0b bf       	out	0x3b, r16	; 59
     17e:	02 c0       	rjmp	.+4      	; 0x184 <__do_copy_data+0x14>
     180:	07 90       	elpm	r0, Z+
     182:	0d 92       	st	X+, r0
     184:	a0 37       	cpi	r26, 0x70	; 112
     186:	b1 07       	cpc	r27, r17
     188:	d9 f7       	brne	.-10     	; 0x180 <__do_copy_data+0x10>

0000018a <__do_clear_bss>:
     18a:	12 e0       	ldi	r17, 0x02	; 2
     18c:	a0 e7       	ldi	r26, 0x70	; 112
     18e:	b2 e0       	ldi	r27, 0x02	; 2
     190:	01 c0       	rjmp	.+2      	; 0x194 <.do_clear_bss_start>

00000192 <.do_clear_bss_loop>:
     192:	1d 92       	st	X+, r1

00000194 <.do_clear_bss_start>:
     194:	a0 3d       	cpi	r26, 0xD0	; 208
     196:	b1 07       	cpc	r27, r17
     198:	e1 f7       	brne	.-8      	; 0x192 <.do_clear_bss_loop>
     19a:	0e 94 cc 03 	call	0x798	; 0x798 <main>
     19e:	0c 94 e9 1e 	jmp	0x3dd2	; 0x3dd2 <_exit>

000001a2 <__bad_interrupt>:
     1a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a6 <KEYPAD_Check>:
uint8_t ascii_code[4][4]={16,15,14,13,
						  12,9,6,3,
						  10,8,5,2,
						  11,7,4,1};

uint8_t KEYPAD_Check() {
     1a6:	af 92       	push	r10
     1a8:	bf 92       	push	r11
     1aa:	cf 92       	push	r12
     1ac:	df 92       	push	r13
     1ae:	ef 92       	push	r14
     1b0:	ff 92       	push	r15
     1b2:	0f 93       	push	r16
     1b4:	1f 93       	push	r17
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	20 e0       	ldi	r18, 0x00	; 0
     1bc:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     1be:	41 e0       	ldi	r20, 0x01	; 1
     1c0:	50 e0       	ldi	r21, 0x00	; 0
     1c2:	e2 e6       	ldi	r30, 0x62	; 98
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
		_delay_us(10);
		keyin=KEYPAD_PIN & 0x0F;
		if (keyin!=0x0F)
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
     1c6:	a0 e1       	ldi	r26, 0x10	; 16
     1c8:	b1 e0       	ldi	r27, 0x01	; 1
     1ca:	0f 2e       	mov	r0, r31
     1cc:	f1 e1       	ldi	r31, 0x11	; 17
     1ce:	af 2e       	mov	r10, r31
     1d0:	f1 e0       	ldi	r31, 0x01	; 1
     1d2:	bf 2e       	mov	r11, r31
     1d4:	f0 2d       	mov	r31, r0
     1d6:	02 e1       	ldi	r16, 0x12	; 18
     1d8:	11 e0       	ldi	r17, 0x01	; 1
     1da:	0f 2e       	mov	r0, r31
     1dc:	f3 e1       	ldi	r31, 0x13	; 19
     1de:	ef 2e       	mov	r14, r31
     1e0:	f1 e0       	ldi	r31, 0x01	; 1
     1e2:	ff 2e       	mov	r15, r31
     1e4:	f0 2d       	mov	r31, r0
						  11,7,4,1};

uint8_t KEYPAD_Check() {
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     1e6:	b9 01       	movw	r22, r18
uint8_t ascii_code[4][4]={16,15,14,13,
						  12,9,6,3,
						  10,8,5,2,
						  11,7,4,1};

uint8_t KEYPAD_Check() {
     1e8:	c9 01       	movw	r24, r18
     1ea:	04 96       	adiw	r24, 0x04	; 4
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     1ec:	6a 01       	movw	r12, r20
     1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <KEYPAD_Check+0x4e>
     1f0:	cc 0c       	add	r12, r12
     1f2:	dd 1c       	adc	r13, r13
     1f4:	8a 95       	dec	r24
     1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <KEYPAD_Check+0x4a>
     1f8:	c6 01       	movw	r24, r12
     1fa:	80 95       	com	r24
     1fc:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1fe:	83 e0       	ldi	r24, 0x03	; 3
     200:	8a 95       	dec	r24
     202:	f1 f7       	brne	.-4      	; 0x200 <KEYPAD_Check+0x5a>
     204:	00 00       	nop
		_delay_us(10);
		keyin=KEYPAD_PIN & 0x0F;
     206:	80 b1       	in	r24, 0x00	; 0
     208:	8f 70       	andi	r24, 0x0F	; 15
		if (keyin!=0x0F)
     20a:	8f 30       	cpi	r24, 0x0F	; 15
     20c:	29 f1       	breq	.+74     	; 0x258 <KEYPAD_Check+0xb2>
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
     20e:	9c 91       	ld	r25, X
     210:	98 17       	cp	r25, r24
     212:	a9 f0       	breq	.+42     	; 0x23e <KEYPAD_Check+0x98>
     214:	e5 01       	movw	r28, r10
     216:	98 81       	ld	r25, Y
     218:	98 17       	cp	r25, r24
     21a:	59 f0       	breq	.+22     	; 0x232 <KEYPAD_Check+0x8c>
     21c:	e8 01       	movw	r28, r16
     21e:	98 81       	ld	r25, Y
     220:	98 17       	cp	r25, r24
     222:	51 f0       	breq	.+20     	; 0x238 <KEYPAD_Check+0x92>
     224:	e7 01       	movw	r28, r14
     226:	98 81       	ld	r25, Y
     228:	98 17       	cp	r25, r24
     22a:	b1 f4       	brne	.+44     	; 0x258 <KEYPAD_Check+0xb2>
     22c:	e3 e0       	ldi	r30, 0x03	; 3
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	08 c0       	rjmp	.+16     	; 0x242 <KEYPAD_Check+0x9c>
     232:	e1 e0       	ldi	r30, 0x01	; 1
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	05 c0       	rjmp	.+10     	; 0x242 <KEYPAD_Check+0x9c>
     238:	e2 e0       	ldi	r30, 0x02	; 2
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	02 c0       	rjmp	.+4      	; 0x242 <KEYPAD_Check+0x9c>
     23e:	e0 e0       	ldi	r30, 0x00	; 0
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	ee 0f       	add	r30, r30
     244:	ff 1f       	adc	r31, r31
     246:	ee 0f       	add	r30, r30
     248:	ff 1f       	adc	r31, r31
     24a:	6e 0f       	add	r22, r30
     24c:	7f 1f       	adc	r23, r31
     24e:	fb 01       	movw	r30, r22
     250:	e0 50       	subi	r30, 0x00	; 0
     252:	ff 4f       	sbci	r31, 0xFF	; 255
     254:	80 81       	ld	r24, Z
     256:	06 c0       	rjmp	.+12     	; 0x264 <KEYPAD_Check+0xbe>
     258:	2f 5f       	subi	r18, 0xFF	; 255
     25a:	3f 4f       	sbci	r19, 0xFF	; 255
						  10,8,5,2,
						  11,7,4,1};

uint8_t KEYPAD_Check() {
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
     25c:	24 30       	cpi	r18, 0x04	; 4
     25e:	31 05       	cpc	r19, r1
     260:	11 f6       	brne	.-124    	; 0x1e6 <KEYPAD_Check+0x40>
		keyin=KEYPAD_PIN & 0x0F;
		if (keyin!=0x0F)
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
	}
	return 0;
     262:	80 e0       	ldi	r24, 0x00	; 0
}
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	1f 91       	pop	r17
     26a:	0f 91       	pop	r16
     26c:	ff 90       	pop	r15
     26e:	ef 90       	pop	r14
     270:	df 90       	pop	r13
     272:	cf 90       	pop	r12
     274:	bf 90       	pop	r11
     276:	af 90       	pop	r10
     278:	08 95       	ret

0000027a <KEYPAD_Init>:

void KEYPAD_Init()
{
	//Khai bao huong cho cac chan ket noi keypad
	KEYPAD_DDR=0xF0;
     27a:	80 ef       	ldi	r24, 0xF0	; 240
     27c:	80 93 61 00 	sts	0x0061, r24
	KEYPAD_PORT=0x0F;
     280:	8f e0       	ldi	r24, 0x0F	; 15
     282:	80 93 62 00 	sts	0x0062, r24
     286:	08 95       	ret

00000288 <LCDBusyLoop>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     288:	8f ec       	ldi	r24, 0xCF	; 207
     28a:	97 e0       	ldi	r25, 0x07	; 7
     28c:	01 97       	sbiw	r24, 0x01	; 1
     28e:	f1 f7       	brne	.-4      	; 0x28c <LCDBusyLoop+0x4>
     290:	00 c0       	rjmp	.+0      	; 0x292 <LCDBusyLoop+0xa>
     292:	00 00       	nop
}

void LCDBusyLoop()
{
	_delay_ms(8);
}
     294:	08 95       	ret

00000296 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
     296:	28 2f       	mov	r18, r24
     298:	22 95       	swap	r18
     29a:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
     29c:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
     29e:	66 23       	and	r22, r22
     2a0:	11 f4       	brne	.+4      	; 0x2a6 <LCDByte+0x10>
CLEAR_RS();
     2a2:	d8 98       	cbi	0x1b, 0	; 27
     2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <LCDByte+0x12>
else
SET_RS();
     2a6:	d8 9a       	sbi	0x1b, 0	; 27

//_delay_ms(0.500);		//tAS

SET_E();
     2a8:	d9 9a       	sbi	0x1b, 1	; 27

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
     2aa:	9b b3       	in	r25, 0x1b	; 27
     2ac:	22 0f       	add	r18, r18
     2ae:	22 0f       	add	r18, r18
     2b0:	93 7c       	andi	r25, 0xC3	; 195
     2b2:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
     2b4:	9b bb       	out	0x1b, r25	; 27

//_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
     2b6:	d9 98       	cbi	0x1b, 1	; 27

//_delay_us(1);

//Send the lower nibble
SET_E();
     2b8:	d9 9a       	sbi	0x1b, 1	; 27

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
     2ba:	9b b3       	in	r25, 0x1b	; 27
     2bc:	88 0f       	add	r24, r24
     2be:	88 0f       	add	r24, r24
     2c0:	93 7c       	andi	r25, 0xC3	; 195
     2c2:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     2c4:	8b bb       	out	0x1b, r24	; 27

//_delay_us(1);			//tEH

//SEND

CLEAR_E();
     2c6:	d9 98       	cbi	0x1b, 1	; 27

//_delay_us(1);			//tEL

LCDBusyLoop();
     2c8:	0e 94 44 01 	call	0x288	; 0x288 <LCDBusyLoop>
}
     2cc:	08 95       	ret

000002ce <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
     2ce:	0f 93       	push	r16
     2d0:	1f 93       	push	r17
     2d2:	cf 93       	push	r28
     2d4:	df 93       	push	r29
     2d6:	8c 01       	movw	r16, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     2d8:	fc 01       	movw	r30, r24
     2da:	80 81       	ld	r24, Z
     2dc:	88 23       	and	r24, r24
     2de:	09 f1       	breq	.+66     	; 0x322 <LCDWriteString+0x54>
 {
 	//Custom Char Support
	if(*msg=='%')
     2e0:	85 32       	cpi	r24, 0x25	; 37
     2e2:	a9 f4       	brne	.+42     	; 0x30e <LCDWriteString+0x40>
	{
		msg++;
     2e4:	e8 01       	movw	r28, r16
     2e6:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
     2e8:	f8 01       	movw	r30, r16
     2ea:	81 81       	ldd	r24, Z+1	; 0x01
     2ec:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
     2ee:	88 30       	cpi	r24, 0x08	; 8
     2f0:	20 f4       	brcc	.+8      	; 0x2fa <LCDWriteString+0x2c>
		{
			LCDData(cc);
     2f2:	61 e0       	ldi	r22, 0x01	; 1
     2f4:	0e 94 4b 01 	call	0x296	; 0x296 <LCDByte>
     2f8:	0e c0       	rjmp	.+28     	; 0x316 <LCDWriteString+0x48>
		}
		else
		{
			LCDData('%');
     2fa:	85 e2       	ldi	r24, 0x25	; 37
     2fc:	61 e0       	ldi	r22, 0x01	; 1
     2fe:	0e 94 4b 01 	call	0x296	; 0x296 <LCDByte>
			LCDData(*msg);
     302:	f8 01       	movw	r30, r16
     304:	81 81       	ldd	r24, Z+1	; 0x01
     306:	61 e0       	ldi	r22, 0x01	; 1
     308:	0e 94 4b 01 	call	0x296	; 0x296 <LCDByte>
     30c:	04 c0       	rjmp	.+8      	; 0x316 <LCDWriteString+0x48>
		}
	}
	else
	{
		LCDData(*msg);
     30e:	61 e0       	ldi	r22, 0x01	; 1
     310:	0e 94 4b 01 	call	0x296	; 0x296 <LCDByte>
     314:	e8 01       	movw	r28, r16
	}
	msg++;
     316:	8e 01       	movw	r16, r28
     318:	0f 5f       	subi	r16, 0xFF	; 255
     31a:	1f 4f       	sbci	r17, 0xFF	; 255
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     31c:	89 81       	ldd	r24, Y+1	; 0x01
     31e:	88 23       	and	r24, r24
     320:	f9 f6       	brne	.-66     	; 0x2e0 <LCDWriteString+0x12>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	1f 91       	pop	r17
     328:	0f 91       	pop	r16
     32a:	08 95       	ret

0000032c <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	00 d0       	rcall	.+0      	; 0x33a <LCDWriteInt+0xe>
     33a:	00 d0       	rcall	.+0      	; 0x33c <LCDWriteInt+0x10>
     33c:	0f 92       	push	r0
     33e:	cd b7       	in	r28, 0x3d	; 61
     340:	de b7       	in	r29, 0x3e	; 62
     342:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     344:	fe 01       	movw	r30, r28
     346:	31 96       	adiw	r30, 0x01	; 1
     348:	25 e0       	ldi	r18, 0x05	; 5
     34a:	df 01       	movw	r26, r30
     34c:	1d 92       	st	X+, r1
     34e:	2a 95       	dec	r18
     350:	e9 f7       	brne	.-6      	; 0x34c <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
     352:	00 97       	sbiw	r24, 0x00	; 0
     354:	61 f0       	breq	.+24     	; 0x36e <LCDWriteInt+0x42>
     356:	fe 01       	movw	r30, r28
     358:	36 96       	adiw	r30, 0x06	; 6
	{
	str[i]=val%10;
     35a:	2a e0       	ldi	r18, 0x0A	; 10
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	b9 01       	movw	r22, r18
     360:	0e 94 bd 1a 	call	0x357a	; 0x357a <__divmodhi4>
     364:	82 93       	st	-Z, r24
	val=val/10;
     366:	86 2f       	mov	r24, r22
     368:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     36a:	00 97       	sbiw	r24, 0x00	; 0
     36c:	c1 f7       	brne	.-16     	; 0x35e <LCDWriteInt+0x32>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     36e:	bf ef       	ldi	r27, 0xFF	; 255
     370:	eb 16       	cp	r14, r27
     372:	bf ef       	ldi	r27, 0xFF	; 255
     374:	fb 06       	cpc	r15, r27
     376:	69 f4       	brne	.+26     	; 0x392 <LCDWriteInt+0x66>
		while(str[j]==0) j++;
     378:	29 81       	ldd	r18, Y+1	; 0x01
     37a:	22 23       	and	r18, r18
     37c:	79 f4       	brne	.+30     	; 0x39c <LCDWriteInt+0x70>
     37e:	fe 01       	movw	r30, r28
     380:	32 96       	adiw	r30, 0x02	; 2
     382:	00 e0       	ldi	r16, 0x00	; 0
     384:	10 e0       	ldi	r17, 0x00	; 0
     386:	0f 5f       	subi	r16, 0xFF	; 255
     388:	1f 4f       	sbci	r17, 0xFF	; 255
     38a:	21 91       	ld	r18, Z+
     38c:	22 23       	and	r18, r18
     38e:	d9 f3       	breq	.-10     	; 0x386 <LCDWriteInt+0x5a>
     390:	07 c0       	rjmp	.+14     	; 0x3a0 <LCDWriteInt+0x74>
	else
		j=5-field_length;
     392:	05 e0       	ldi	r16, 0x05	; 5
     394:	10 e0       	ldi	r17, 0x00	; 0
     396:	0e 19       	sub	r16, r14
     398:	1f 09       	sbc	r17, r15
     39a:	02 c0       	rjmp	.+4      	; 0x3a0 <LCDWriteInt+0x74>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
     39c:	00 e0       	ldi	r16, 0x00	; 0
     39e:	10 e0       	ldi	r17, 0x00	; 0
	else
		j=5-field_length;

	if(val<0) LCDData('-');
     3a0:	99 23       	and	r25, r25
     3a2:	24 f4       	brge	.+8      	; 0x3ac <LCDWriteInt+0x80>
     3a4:	8d e2       	ldi	r24, 0x2D	; 45
     3a6:	61 e0       	ldi	r22, 0x01	; 1
     3a8:	0e 94 4b 01 	call	0x296	; 0x296 <LCDByte>
	for(i=j;i<5;i++)
     3ac:	05 30       	cpi	r16, 0x05	; 5
     3ae:	11 05       	cpc	r17, r1
     3b0:	bc f4       	brge	.+46     	; 0x3e0 <LCDWriteInt+0xb4>
	}
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
     3b2:	e1 e0       	ldi	r30, 0x01	; 1
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	ec 0f       	add	r30, r28
     3b8:	fd 1f       	adc	r31, r29
     3ba:	0e 0f       	add	r16, r30
     3bc:	1f 1f       	adc	r17, r31
     3be:	0f 2e       	mov	r0, r31
     3c0:	f6 e0       	ldi	r31, 0x06	; 6
     3c2:	ef 2e       	mov	r14, r31
     3c4:	ff 24       	eor	r15, r15
     3c6:	f0 2d       	mov	r31, r0
     3c8:	ec 0e       	add	r14, r28
     3ca:	fd 1e       	adc	r15, r29
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     3cc:	d8 01       	movw	r26, r16
     3ce:	8d 91       	ld	r24, X+
     3d0:	8d 01       	movw	r16, r26
     3d2:	80 5d       	subi	r24, 0xD0	; 208
     3d4:	61 e0       	ldi	r22, 0x01	; 1
     3d6:	0e 94 4b 01 	call	0x296	; 0x296 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     3da:	0e 15       	cp	r16, r14
     3dc:	1f 05       	cpc	r17, r15
     3de:	b1 f7       	brne	.-20     	; 0x3cc <LCDWriteInt+0xa0>
	{
	LCDData(48+str[i]);
	}
}
     3e0:	0f 90       	pop	r0
     3e2:	0f 90       	pop	r0
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	1f 91       	pop	r17
     3f0:	0f 91       	pop	r16
     3f2:	ff 90       	pop	r15
     3f4:	ef 90       	pop	r14
     3f6:	08 95       	ret

000003f8 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
     3f8:	84 31       	cpi	r24, 0x14	; 20
     3fa:	78 f4       	brcc	.+30     	; 0x41a <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
     3fc:	62 30       	cpi	r22, 0x02	; 2
     3fe:	31 f0       	breq	.+12     	; 0x40c <LCDGotoXY+0x14>
     400:	63 30       	cpi	r22, 0x03	; 3
     402:	31 f0       	breq	.+12     	; 0x410 <LCDGotoXY+0x18>
     404:	61 30       	cpi	r22, 0x01	; 1
     406:	29 f4       	brne	.+10     	; 0x412 <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
     408:	80 64       	ori	r24, 0x40	; 64
			break;
     40a:	03 c0       	rjmp	.+6      	; 0x412 <LCDGotoXY+0x1a>
		case 2:
			x+=0x14;
     40c:	8c 5e       	subi	r24, 0xEC	; 236
			break;
     40e:	01 c0       	rjmp	.+2      	; 0x412 <LCDGotoXY+0x1a>
		case 3:
			x+=0x54;
     410:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
     412:	80 68       	ori	r24, 0x80	; 128
     414:	60 e0       	ldi	r22, 0x00	; 0
     416:	0e 94 4b 01 	call	0x296	; 0x296 <LCDByte>
     41a:	08 95       	ret

0000041c <LCDInit>:
{
	_delay_ms(8);
}

void LCDInit(uint8_t style)
{
     41c:	0f 93       	push	r16
     41e:	1f 93       	push	r17
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	c8 2f       	mov	r28, r24
     426:	8b e4       	ldi	r24, 0x4B	; 75
     428:	9d e1       	ldi	r25, 0x1D	; 29
     42a:	01 97       	sbiw	r24, 0x01	; 1
     42c:	f1 f7       	brne	.-4      	; 0x42a <LCDInit+0xe>
     42e:	00 c0       	rjmp	.+0      	; 0x430 <LCDInit+0x14>
     430:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
     432:	8a b3       	in	r24, 0x1a	; 26
     434:	8c 63       	ori	r24, 0x3C	; 60
     436:	8a bb       	out	0x1a, r24	; 26
	LCD_E_DDR|=(1<<LCD_E_POS);
     438:	d1 9a       	sbi	0x1a, 1	; 26
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     43a:	d0 9a       	sbi	0x1a, 0	; 26

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
     43c:	8b b3       	in	r24, 0x1b	; 27
     43e:	83 7c       	andi	r24, 0xC3	; 195
     440:	8b bb       	out	0x1b, r24	; 27
	CLEAR_E();
     442:	d9 98       	cbi	0x1b, 1	; 27
	CLEAR_RS();
     444:	d8 98       	cbi	0x1b, 0	; 27

	//Set 4-bit mode
	//_delay_us(0.3);	//tAS

	SET_E();
     446:	d9 9a       	sbi	0x1b, 1	; 27
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     448:	db 9a       	sbi	0x1b, 3	; 27
	//_delay_us(1);
	CLEAR_E();
     44a:	d9 98       	cbi	0x1b, 1	; 27
	//_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     44c:	0e 94 44 01 	call	0x288	; 0x288 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     450:	8c 2f       	mov	r24, r28
     452:	8c 60       	ori	r24, 0x0C	; 12
     454:	60 e0       	ldi	r22, 0x00	; 0
     456:	0e 94 4b 01 	call	0x296	; 0x296 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     45a:	88 e2       	ldi	r24, 0x28	; 40
     45c:	60 e0       	ldi	r22, 0x00	; 0
     45e:	0e 94 4b 01 	call	0x296	; 0x296 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
     462:	80 e4       	ldi	r24, 0x40	; 64
     464:	60 e0       	ldi	r22, 0x00	; 0
     466:	0e 94 4b 01 	call	0x296	; 0x296 <LCDByte>
     46a:	c4 e1       	ldi	r28, 0x14	; 20
     46c:	d1 e0       	ldi	r29, 0x01	; 1
void LCDBusyLoop()
{
	_delay_ms(8);
}

void LCDInit(uint8_t style)
     46e:	04 e5       	ldi	r16, 0x54	; 84
     470:	11 e0       	ldi	r17, 0x01	; 1
	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
     472:	89 91       	ld	r24, Y+
     474:	61 e0       	ldi	r22, 0x01	; 1
     476:	0e 94 4b 01 	call	0x296	; 0x296 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
     47a:	c0 17       	cp	r28, r16
     47c:	d1 07       	cpc	r29, r17
     47e:	c9 f7       	brne	.-14     	; 0x472 <LCDInit+0x56>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	60 e0       	ldi	r22, 0x00	; 0
     484:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCDGotoXY>

}
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	08 95       	ret

00000492 <sMOIfaceKEYPAD_checkpress>:

static uint8_t nrf24l01_addr5[NRF24L01_ADDRSIZE] = NRF24L01_ADDRP5;
static uint8_t nrf24l01_addrtx[NRF24L01_ADDRSIZE] = NRF24L01_ADDRTX;

sc_integer sMOIfaceKEYPAD_checkpress() {
	return KEYPAD_Check();
     492:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <KEYPAD_Check>
}
     496:	68 2f       	mov	r22, r24
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	08 95       	ret

000004a0 <sMOIfaceKEYPAD_init>:
void sMOIfaceKEYPAD_init() {
	KEYPAD_Init();
     4a0:	0e 94 3d 01 	call	0x27a	; 0x27a <KEYPAD_Init>
}
     4a4:	08 95       	ret

000004a6 <sMOIfaceLCD_writeString>:
void sMOIfaceLCD_writeString(const sc_string chr) {
	LCDWriteString(chr);
     4a6:	0e 94 67 01 	call	0x2ce	; 0x2ce <LCDWriteString>
}
     4aa:	08 95       	ret

000004ac <sMOIfaceLCD_writeStringXY>:
void sMOIfaceLCD_writeStringXY(const sc_string chr, const sc_integer x, const sc_integer y) {
     4ac:	0f 93       	push	r16
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	ec 01       	movw	r28, r24
     4b4:	84 2f       	mov	r24, r20
     4b6:	60 2f       	mov	r22, r16
	LCDWriteStringXY(x,y,chr);
     4b8:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCDGotoXY>
     4bc:	ce 01       	movw	r24, r28
     4be:	0e 94 67 01 	call	0x2ce	; 0x2ce <LCDWriteString>
}
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	0f 91       	pop	r16
     4c8:	08 95       	ret

000004ca <sMOIfaceLCD_writeNumberXY>:
void sMOIfaceLCD_writeNumberXY(const sc_integer num, const sc_integer x, const sc_integer y, const sc_integer l) {
     4ca:	4f 92       	push	r4
     4cc:	5f 92       	push	r5
     4ce:	6f 92       	push	r6
     4d0:	7f 92       	push	r7
     4d2:	af 92       	push	r10
     4d4:	bf 92       	push	r11
     4d6:	cf 92       	push	r12
     4d8:	df 92       	push	r13
     4da:	ef 92       	push	r14
     4dc:	ff 92       	push	r15
     4de:	2b 01       	movw	r4, r22
     4e0:	3c 01       	movw	r6, r24
     4e2:	82 2f       	mov	r24, r18
     4e4:	6e 2d       	mov	r22, r14
     4e6:	76 01       	movw	r14, r12
     4e8:	65 01       	movw	r12, r10
	LCDWriteIntXY(x,y,num,l);
     4ea:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCDGotoXY>
     4ee:	c2 01       	movw	r24, r4
     4f0:	b6 01       	movw	r22, r12
     4f2:	0e 94 96 01 	call	0x32c	; 0x32c <LCDWriteInt>
}
     4f6:	ff 90       	pop	r15
     4f8:	ef 90       	pop	r14
     4fa:	df 90       	pop	r13
     4fc:	cf 90       	pop	r12
     4fe:	bf 90       	pop	r11
     500:	af 90       	pop	r10
     502:	7f 90       	pop	r7
     504:	6f 90       	pop	r6
     506:	5f 90       	pop	r5
     508:	4f 90       	pop	r4
     50a:	08 95       	ret

0000050c <sMOIfaceLCD_clear>:
void sMOIfaceLCD_clear() {
	LCDClear();
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	60 e0       	ldi	r22, 0x00	; 0
     510:	0e 94 4b 01 	call	0x296	; 0x296 <LCDByte>
     514:	82 e0       	ldi	r24, 0x02	; 2
     516:	60 e0       	ldi	r22, 0x00	; 0
     518:	0e 94 4b 01 	call	0x296	; 0x296 <LCDByte>
}
     51c:	08 95       	ret

0000051e <sMOIfaceLCD_init>:
void sMOIfaceLCD_init() {
	LCDInit(0);
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	0e 94 0e 02 	call	0x41c	; 0x41c <LCDInit>
}
     524:	08 95       	ret

00000526 <sMOIfaceRF_getData>:

sc_string sMOIfaceRF_getData() {
     526:	0f 93       	push	r16
     528:	1f 93       	push	r17
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	0f 92       	push	r0
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
	uint8_t pipe = 0;
     534:	19 82       	std	Y+1, r1	; 0x01
	if (nrf24l01_readready(&pipe)) {
     536:	ce 01       	movw	r24, r28
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	0e 94 8c 06 	call	0xd18	; 0xd18 <nrf24l01_readready>
     53e:	88 23       	and	r24, r24
     540:	99 f0       	breq	.+38     	; 0x568 <sMOIfaceRF_getData+0x42>
		if (pipe==0) {
     542:	89 81       	ldd	r24, Y+1	; 0x01
     544:	88 23       	and	r24, r24
     546:	99 f4       	brne	.+38     	; 0x56e <sMOIfaceRF_getData+0x48>
     548:	e2 e7       	ldi	r30, 0x72	; 114
     54a:	f2 e0       	ldi	r31, 0x02	; 2
}
void sMOIfaceLCD_init() {
	LCDInit(0);
}

sc_string sMOIfaceRF_getData() {
     54c:	cf 01       	movw	r24, r30
     54e:	09 96       	adiw	r24, 0x09	; 9
	uint8_t pipe = 0;
	if (nrf24l01_readready(&pipe)) {
		if (pipe==0) {
		//clear buffer
		for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
     550:	11 92       	st	Z+, r1
     552:	e8 17       	cp	r30, r24
     554:	f9 07       	cpc	r31, r25
     556:	e1 f7       	brne	.-8      	; 0x550 <sMOIfaceRF_getData+0x2a>
		
		//read buffer
		nrf24l01_read(pipe,bufferin);
     558:	02 e7       	ldi	r16, 0x72	; 114
     55a:	12 e0       	ldi	r17, 0x02	; 2
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	b8 01       	movw	r22, r16
     560:	0e 94 9e 06 	call	0xd3c	; 0xd3c <nrf24l01_read>
		return bufferin;
     564:	c8 01       	movw	r24, r16
     566:	05 c0       	rjmp	.+10     	; 0x572 <sMOIfaceRF_getData+0x4c>
		}
	}
	return "";
     568:	84 e5       	ldi	r24, 0x54	; 84
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	02 c0       	rjmp	.+4      	; 0x572 <sMOIfaceRF_getData+0x4c>
     56e:	84 e5       	ldi	r24, 0x54	; 84
     570:	91 e0       	ldi	r25, 0x01	; 1
}
     572:	0f 90       	pop	r0
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	1f 91       	pop	r17
     57a:	0f 91       	pop	r16
     57c:	08 95       	ret

0000057e <sMOIfaceRF_sendMsg>:

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
     582:	9c 01       	movw	r18, r24
     584:	cd e7       	ldi	r28, 0x7D	; 125
     586:	d2 e0       	ldi	r29, 0x02	; 2
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
		if (i<strlen(msg)) bufferout[i]=msg[i];
     58c:	a2 2f       	mov	r26, r18
     58e:	b3 2f       	mov	r27, r19
     590:	fd 01       	movw	r30, r26
     592:	01 90       	ld	r0, Z+
     594:	00 20       	and	r0, r0
     596:	e9 f7       	brne	.-6      	; 0x592 <sMOIfaceRF_sendMsg+0x14>
     598:	31 97       	sbiw	r30, 0x01	; 1
     59a:	ea 1b       	sub	r30, r26
     59c:	fb 0b       	sbc	r31, r27
     59e:	8e 17       	cp	r24, r30
     5a0:	9f 07       	cpc	r25, r31
     5a2:	30 f4       	brcc	.+12     	; 0x5b0 <sMOIfaceRF_sendMsg+0x32>
		}
	}
	return "";
}

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
     5a4:	f9 01       	movw	r30, r18
     5a6:	e8 0f       	add	r30, r24
     5a8:	f9 1f       	adc	r31, r25
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
		if (i<strlen(msg)) bufferout[i]=msg[i];
     5aa:	40 81       	ld	r20, Z
     5ac:	48 83       	st	Y, r20
     5ae:	01 c0       	rjmp	.+2      	; 0x5b2 <sMOIfaceRF_sendMsg+0x34>
		else bufferout[i] = 0;
     5b0:	18 82       	st	Y, r1
     5b2:	01 96       	adiw	r24, 0x01	; 1
     5b4:	21 96       	adiw	r28, 0x01	; 1
	return "";
}

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
     5b6:	89 30       	cpi	r24, 0x09	; 9
     5b8:	91 05       	cpc	r25, r1
     5ba:	41 f7       	brne	.-48     	; 0x58c <sMOIfaceRF_sendMsg+0xe>
		if (i<strlen(msg)) bufferout[i]=msg[i];
		else bufferout[i] = 0;
	}
	
	//Set Address for Data
	nrf24l01_settxaddr(nrf24l01_addrtx);
     5bc:	85 e5       	ldi	r24, 0x55	; 85
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     5c4:	8d e7       	ldi	r24, 0x7D	; 125
     5c6:	92 e0       	ldi	r25, 0x02	; 2
     5c8:	0e 94 c4 06 	call	0xd88	; 0xd88 <nrf24l01_write>
     5cc:	98 2f       	mov	r25, r24
     5ce:	ef ec       	ldi	r30, 0xCF	; 207
     5d0:	f7 e0       	ldi	r31, 0x07	; 7
     5d2:	31 97       	sbiw	r30, 0x01	; 1
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <sMOIfaceRF_sendMsg+0x54>
     5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <sMOIfaceRF_sendMsg+0x5a>
     5d8:	00 00       	nop
		}
	}
	return "";
}

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	91 30       	cpi	r25, 0x01	; 1
     5de:	09 f0       	breq	.+2      	; 0x5e2 <sMOIfaceRF_sendMsg+0x64>
     5e0:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	08 95       	ret

000005e8 <sMOIfaceRF_sendCheck>:

sc_boolean sMOIfaceRF_sendCheck() {
     5e8:	ed e7       	ldi	r30, 0x7D	; 125
     5ea:	f2 e0       	ldi	r31, 0x02	; 2
     5ec:	cf 01       	movw	r24, r30
     5ee:	09 96       	adiw	r24, 0x09	; 9
	//set all buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferout[i] = 1;
     5f0:	21 e0       	ldi	r18, 0x01	; 1
     5f2:	21 93       	st	Z+, r18
     5f4:	e8 17       	cp	r30, r24
     5f6:	f9 07       	cpc	r31, r25
     5f8:	e1 f7       	brne	.-8      	; 0x5f2 <sMOIfaceRF_sendCheck+0xa>
	//Set Address for check
	nrf24l01_settxaddr(nrf24l01_addr5);
     5fa:	8a e5       	ldi	r24, 0x5A	; 90
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     602:	8d e7       	ldi	r24, 0x7D	; 125
     604:	92 e0       	ldi	r25, 0x02	; 2
     606:	0e 94 c4 06 	call	0xd88	; 0xd88 <nrf24l01_write>
     60a:	98 2f       	mov	r25, r24
     60c:	ef ec       	ldi	r30, 0xCF	; 207
     60e:	f7 e0       	ldi	r31, 0x07	; 7
     610:	31 97       	sbiw	r30, 0x01	; 1
     612:	f1 f7       	brne	.-4      	; 0x610 <sMOIfaceRF_sendCheck+0x28>
     614:	00 c0       	rjmp	.+0      	; 0x616 <sMOIfaceRF_sendCheck+0x2e>
     616:	00 00       	nop
	} else {
		return false;
	}
}

sc_boolean sMOIfaceRF_sendCheck() {
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	91 30       	cpi	r25, 0x01	; 1
     61c:	09 f0       	breq	.+2      	; 0x620 <sMOIfaceRF_sendCheck+0x38>
     61e:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     620:	08 95       	ret

00000622 <sMOIfaceRF_getCheck>:

sc_boolean sMOIfaceRF_getCheck() {
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	0f 92       	push	r0
     62c:	cd b7       	in	r28, 0x3d	; 61
     62e:	de b7       	in	r29, 0x3e	; 62
	uint8_t pipe = 0;
     630:	19 82       	std	Y+1, r1	; 0x01
	if (nrf24l01_readready(&pipe)) {
     632:	ce 01       	movw	r24, r28
     634:	01 96       	adiw	r24, 0x01	; 1
     636:	0e 94 8c 06 	call	0xd18	; 0xd18 <nrf24l01_readready>
     63a:	88 23       	and	r24, r24
     63c:	f1 f0       	breq	.+60     	; 0x67a <sMOIfaceRF_getCheck+0x58>
		if (pipe==5) {
     63e:	89 81       	ldd	r24, Y+1	; 0x01
     640:	85 30       	cpi	r24, 0x05	; 5
     642:	e9 f4       	brne	.+58     	; 0x67e <sMOIfaceRF_getCheck+0x5c>
     644:	e2 e7       	ldi	r30, 0x72	; 114
     646:	f2 e0       	ldi	r31, 0x02	; 2
	} else {
		return false;
	}
}

sc_boolean sMOIfaceRF_getCheck() {
     648:	8f 01       	movw	r16, r30
     64a:	07 5f       	subi	r16, 0xF7	; 247
     64c:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t pipe = 0;
	if (nrf24l01_readready(&pipe)) {
		if (pipe==5) {
			//clear buffer
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
     64e:	11 92       	st	Z+, r1
     650:	e0 17       	cp	r30, r16
     652:	f1 07       	cpc	r31, r17
     654:	e1 f7       	brne	.-8      	; 0x64e <sMOIfaceRF_getCheck+0x2c>
			
			//read buffer
			nrf24l01_read(pipe,bufferin);
     656:	85 e0       	ldi	r24, 0x05	; 5
     658:	62 e7       	ldi	r22, 0x72	; 114
     65a:	72 e0       	ldi	r23, 0x02	; 2
     65c:	0e 94 9e 06 	call	0xd3c	; 0xd3c <nrf24l01_read>
			
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) if (bufferin[i]!=1) return false;
     660:	80 91 72 02 	lds	r24, 0x0272
     664:	81 30       	cpi	r24, 0x01	; 1
     666:	69 f4       	brne	.+26     	; 0x682 <sMOIfaceRF_getCheck+0x60>
     668:	e3 e7       	ldi	r30, 0x73	; 115
     66a:	f2 e0       	ldi	r31, 0x02	; 2
     66c:	81 91       	ld	r24, Z+
     66e:	81 30       	cpi	r24, 0x01	; 1
     670:	51 f4       	brne	.+20     	; 0x686 <sMOIfaceRF_getCheck+0x64>
     672:	e0 17       	cp	r30, r16
     674:	f1 07       	cpc	r31, r17
     676:	d1 f7       	brne	.-12     	; 0x66c <sMOIfaceRF_getCheck+0x4a>
     678:	07 c0       	rjmp	.+14     	; 0x688 <sMOIfaceRF_getCheck+0x66>
			return true;
		}
	}
	return false;
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	05 c0       	rjmp	.+10     	; 0x688 <sMOIfaceRF_getCheck+0x66>
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	03 c0       	rjmp	.+6      	; 0x688 <sMOIfaceRF_getCheck+0x66>
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
			
			//read buffer
			nrf24l01_read(pipe,bufferin);
			
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) if (bufferin[i]!=1) return false;
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	01 c0       	rjmp	.+2      	; 0x688 <sMOIfaceRF_getCheck+0x66>
     686:	80 e0       	ldi	r24, 0x00	; 0
			return true;
		}
	}
	return false;
}
     688:	0f 90       	pop	r0
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	1f 91       	pop	r17
     690:	0f 91       	pop	r16
     692:	08 95       	ret

00000694 <sMOIfaceRF_sendData>:

sc_boolean sMOIfaceRF_sendData(const sc_integer cmd, const sc_integer id, const sc_integer dish_id, const sc_integer amount) {
     694:	af 92       	push	r10
     696:	ef 92       	push	r14
     698:	82 2f       	mov	r24, r18
     69a:	ed e7       	ldi	r30, 0x7D	; 125
     69c:	f2 e0       	ldi	r31, 0x02	; 2
     69e:	af 01       	movw	r20, r30
     6a0:	47 5f       	subi	r20, 0xF7	; 247
     6a2:	5f 4f       	sbci	r21, 0xFF	; 255
	
	unsigned char num;
	unsigned char mod;
	//clear buffer
	for(uint8_t i=0; i<sizeof(bufferout); i++) bufferout[i] = 0;
     6a4:	11 92       	st	Z+, r1
     6a6:	e4 17       	cp	r30, r20
     6a8:	f5 07       	cpc	r31, r21
     6aa:	e1 f7       	brne	.-8      	; 0x6a4 <sMOIfaceRF_sendData+0x10>
	
	//Lenh cho data: 1-goi mon, 2-huy mon, 3-thanh toan, 4-goi boi ban
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
     6ac:	60 5d       	subi	r22, 0xD0	; 208
     6ae:	60 93 7d 02 	sts	0x027D, r22
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     6b2:	3a e0       	ldi	r19, 0x0A	; 10
     6b4:	63 2f       	mov	r22, r19
     6b6:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     6ba:	90 5d       	subi	r25, 0xD0	; 208
     6bc:	90 93 7f 02 	sts	0x027F, r25
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     6c0:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     6c4:	90 5d       	subi	r25, 0xD0	; 208
     6c6:	90 93 7e 02 	sts	0x027E, r25
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
		num/=10;
     6ca:	8e 2d       	mov	r24, r14
     6cc:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__udivmodqi4>
		bufferout[3+i]=mod+'0';
     6d0:	90 5d       	subi	r25, 0xD0	; 208
     6d2:	90 93 82 02 	sts	0x0282, r25
	}
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
     6d6:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__udivmodqi4>
		num/=10;
		bufferout[3+i]=mod+'0';
     6da:	90 5d       	subi	r25, 0xD0	; 208
     6dc:	90 93 81 02 	sts	0x0281, r25
	}
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
     6e0:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__udivmodqi4>
		num/=10;
		bufferout[3+i]=mod+'0';
     6e4:	90 5d       	subi	r25, 0xD0	; 208
     6e6:	90 93 80 02 	sts	0x0280, r25
	}
	
	//Chuyen doi so luong mon an
	num=amount;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     6ea:	8a 2d       	mov	r24, r10
     6ec:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__udivmodqi4>
		num/=10;
		bufferout[6+i]=mod+'0';
     6f0:	90 5d       	subi	r25, 0xD0	; 208
     6f2:	90 93 84 02 	sts	0x0284, r25
	}
	
	//Chuyen doi so luong mon an
	num=amount;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     6f6:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__udivmodqi4>
		num/=10;
		bufferout[6+i]=mod+'0';
     6fa:	90 5d       	subi	r25, 0xD0	; 208
     6fc:	90 93 83 02 	sts	0x0283, r25
	}
	
	//Set Address for Data
	nrf24l01_settxaddr(nrf24l01_addrtx);
     700:	85 e5       	ldi	r24, 0x55	; 85
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     708:	8d e7       	ldi	r24, 0x7D	; 125
     70a:	92 e0       	ldi	r25, 0x02	; 2
     70c:	0e 94 c4 06 	call	0xd88	; 0xd88 <nrf24l01_write>
     710:	98 2f       	mov	r25, r24
     712:	ef ec       	ldi	r30, 0xCF	; 207
     714:	f7 e0       	ldi	r31, 0x07	; 7
     716:	31 97       	sbiw	r30, 0x01	; 1
     718:	f1 f7       	brne	.-4      	; 0x716 <sMOIfaceRF_sendData+0x82>
     71a:	00 c0       	rjmp	.+0      	; 0x71c <sMOIfaceRF_sendData+0x88>
     71c:	00 00       	nop
		}
	}
	return false;
}

sc_boolean sMOIfaceRF_sendData(const sc_integer cmd, const sc_integer id, const sc_integer dish_id, const sc_integer amount) {
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	91 30       	cpi	r25, 0x01	; 1
     722:	09 f0       	breq	.+2      	; 0x726 <sMOIfaceRF_sendData+0x92>
     724:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     726:	ef 90       	pop	r14
     728:	af 90       	pop	r10
     72a:	08 95       	ret

0000072c <sMOIfaceRF_sendConf>:

sc_boolean sMOIfaceRF_sendConf(const sc_integer cmd, const sc_integer id) {
     72c:	82 2f       	mov	r24, r18
     72e:	ed e7       	ldi	r30, 0x7D	; 125
     730:	f2 e0       	ldi	r31, 0x02	; 2
     732:	af 01       	movw	r20, r30
     734:	47 5f       	subi	r20, 0xF7	; 247
     736:	5f 4f       	sbci	r21, 0xFF	; 255
	
	unsigned char num;
	unsigned char mod;
	//clear buffer
	for(uint8_t i=0; i<sizeof(bufferout); i++) bufferout[i] = 0;
     738:	11 92       	st	Z+, r1
     73a:	e4 17       	cp	r30, r20
     73c:	f5 07       	cpc	r31, r21
     73e:	e1 f7       	brne	.-8      	; 0x738 <sMOIfaceRF_sendConf+0xc>
	
	//Lenh cho data: 3-thanh toan, 4-goi boi ban
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
     740:	60 5d       	subi	r22, 0xD0	; 208
     742:	60 93 7d 02 	sts	0x027D, r22
	
	//Chuyen doi ma ban an
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     746:	3a e0       	ldi	r19, 0x0A	; 10
     748:	63 2f       	mov	r22, r19
     74a:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     74e:	90 5d       	subi	r25, 0xD0	; 208
     750:	90 93 7f 02 	sts	0x027F, r25
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
	
	//Chuyen doi ma ban an
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     754:	0e 94 b1 1a 	call	0x3562	; 0x3562 <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     758:	90 5d       	subi	r25, 0xD0	; 208
     75a:	90 93 7e 02 	sts	0x027E, r25
	}
	
	//Set Address for Data
	nrf24l01_settxaddr(nrf24l01_addrtx);
     75e:	85 e5       	ldi	r24, 0x55	; 85
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     766:	8d e7       	ldi	r24, 0x7D	; 125
     768:	92 e0       	ldi	r25, 0x02	; 2
     76a:	0e 94 c4 06 	call	0xd88	; 0xd88 <nrf24l01_write>
     76e:	98 2f       	mov	r25, r24
     770:	ef ec       	ldi	r30, 0xCF	; 207
     772:	f7 e0       	ldi	r31, 0x07	; 7
     774:	31 97       	sbiw	r30, 0x01	; 1
     776:	f1 f7       	brne	.-4      	; 0x774 <sMOIfaceRF_sendConf+0x48>
     778:	00 c0       	rjmp	.+0      	; 0x77a <sMOIfaceRF_sendConf+0x4e>
     77a:	00 00       	nop
	} else {
		return false;
	}
}

sc_boolean sMOIfaceRF_sendConf(const sc_integer cmd, const sc_integer id) {
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	91 30       	cpi	r25, 0x01	; 1
     780:	09 f0       	breq	.+2      	; 0x784 <sMOIfaceRF_sendConf+0x58>
     782:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     784:	08 95       	ret

00000786 <sMO_setTimer>:

void sMO_setTimer(const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
	TimerSet(evid,time_ms);
     786:	0e 94 bc 19 	call	0x3378	; 0x3378 <TimerSet>
}
     78a:	08 95       	ret

0000078c <sMO_unsetTimer>:
void sMO_unsetTimer(const sc_eventid evid) {
	TimerUnSet(evid);
     78c:	0e 94 08 1a 	call	0x3410	; 0x3410 <TimerUnSet>
}
     790:	08 95       	ret

00000792 <sMOIfaceRF_init>:

void sMOIfaceRF_init() {
	nrf24l01_init();
     792:	0e 94 1a 07 	call	0xe34	; 0xe34 <nrf24l01_init>
}
     796:	08 95       	ret

00000798 <main>:

int main(void)
{
	uint8_t i;
	DDRC=0x0F;
     798:	8f e0       	ldi	r24, 0x0F	; 15
     79a:	84 bb       	out	0x14, r24	; 20
	PORTC=0x0F;
     79c:	85 bb       	out	0x15, r24	; 21
	l=malloc(sizeof(SMO*)) ;
     79e:	82 e0       	ldi	r24, 0x02	; 2
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <malloc>
     7a6:	80 93 7b 02 	sts	0x027B, r24
     7aa:	90 93 7c 02 	sts	0x027C, r25
	TimerInit();
     7ae:	0e 94 b0 19 	call	0x3360	; 0x3360 <TimerInit>
	sMO_init(l);
     7b2:	80 91 7b 02 	lds	r24, 0x027B
     7b6:	90 91 7c 02 	lds	r25, 0x027C
     7ba:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <sMO_init>
	sMO_enter(l);
     7be:	80 91 7b 02 	lds	r24, 0x027B
     7c2:	90 91 7c 02 	lds	r25, 0x027C
     7c6:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <sMO_enter>
	
	while(1)
	{
		sMO_runCycle(l);
     7ca:	80 91 7b 02 	lds	r24, 0x027B
     7ce:	90 91 7c 02 	lds	r25, 0x027C
     7d2:	0e 94 07 09 	call	0x120e	; 0x120e <sMO_runCycle>
     7d6:	f9 cf       	rjmp	.-14     	; 0x7ca <main+0x32>

000007d8 <__vector_16>:
	}
}

ISR (TIMER0_OVF_vect) {
     7d8:	1f 92       	push	r1
     7da:	0f 92       	push	r0
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	0f 92       	push	r0
     7e0:	0b b6       	in	r0, 0x3b	; 59
     7e2:	0f 92       	push	r0
     7e4:	11 24       	eor	r1, r1
     7e6:	2f 93       	push	r18
     7e8:	3f 93       	push	r19
     7ea:	4f 93       	push	r20
     7ec:	5f 93       	push	r21
     7ee:	6f 93       	push	r22
     7f0:	7f 93       	push	r23
     7f2:	8f 93       	push	r24
     7f4:	9f 93       	push	r25
     7f6:	af 93       	push	r26
     7f8:	bf 93       	push	r27
     7fa:	ef 93       	push	r30
     7fc:	ff 93       	push	r31
	TCNT0=131;
     7fe:	83 e8       	ldi	r24, 0x83	; 131
     800:	82 bf       	out	0x32, r24	; 50
	TimerCheck(l);
     802:	80 91 7b 02 	lds	r24, 0x027B
     806:	90 91 7c 02 	lds	r25, 0x027C
     80a:	0e 94 3e 1a 	call	0x347c	; 0x347c <TimerCheck>
     80e:	ff 91       	pop	r31
     810:	ef 91       	pop	r30
     812:	bf 91       	pop	r27
     814:	af 91       	pop	r26
     816:	9f 91       	pop	r25
     818:	8f 91       	pop	r24
     81a:	7f 91       	pop	r23
     81c:	6f 91       	pop	r22
     81e:	5f 91       	pop	r21
     820:	4f 91       	pop	r20
     822:	3f 91       	pop	r19
     824:	2f 91       	pop	r18
     826:	0f 90       	pop	r0
     828:	0b be       	out	0x3b, r0	; 59
     82a:	0f 90       	pop	r0
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	0f 90       	pop	r0
     830:	1f 90       	pop	r1
     832:	18 95       	reti

00000834 <nrf24l01_readregister>:

/*
 * read one register
 */
uint8_t nrf24l01_readregister(uint8_t reg) {
	nrf24l01_CSNlo; //low CSN
     834:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     836:	8f 71       	andi	r24, 0x1F	; 31
     838:	0e 94 ab 19 	call	0x3356	; 0x3356 <spi_writereadbyte>
    uint8_t result = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
     83c:	8f ef       	ldi	r24, 0xFF	; 255
     83e:	0e 94 ab 19 	call	0x3356	; 0x3356 <spi_writereadbyte>
    nrf24l01_CSNhi; //high CSN
     842:	ae 9a       	sbi	0x15, 6	; 21
    return result;
}
     844:	08 95       	ret

00000846 <nrf24l01_readregisters>:

/*
 * read many registers
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
     846:	ff 92       	push	r15
     848:	0f 93       	push	r16
     84a:	1f 93       	push	r17
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	06 2f       	mov	r16, r22
     852:	f7 2e       	mov	r15, r23
     854:	14 2f       	mov	r17, r20
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
     856:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     858:	8f 71       	andi	r24, 0x1F	; 31
     85a:	0e 94 ab 19 	call	0x3356	; 0x3356 <spi_writereadbyte>
	for(i=0; i<len; i++)
     85e:	11 23       	and	r17, r17
     860:	51 f0       	breq	.+20     	; 0x876 <nrf24l01_readregisters+0x30>
     862:	c0 2f       	mov	r28, r16
     864:	df 2d       	mov	r29, r15
     866:	00 e0       	ldi	r16, 0x00	; 0
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
     868:	8f ef       	ldi	r24, 0xFF	; 255
     86a:	0e 94 ab 19 	call	0x3356	; 0x3356 <spi_writereadbyte>
     86e:	89 93       	st	Y+, r24
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     870:	0f 5f       	subi	r16, 0xFF	; 255
     872:	01 17       	cp	r16, r17
     874:	c9 f7       	brne	.-14     	; 0x868 <nrf24l01_readregisters+0x22>
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
	nrf24l01_CSNhi; //high CSN
     876:	ae 9a       	sbi	0x15, 6	; 21
}
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	1f 91       	pop	r17
     87e:	0f 91       	pop	r16
     880:	ff 90       	pop	r15
     882:	08 95       	ret

00000884 <nrf24l01_writeregister>:

/*
 * write one register
 */
void nrf24l01_writeregister(uint8_t reg, uint8_t value) {
     884:	cf 93       	push	r28
     886:	c6 2f       	mov	r28, r22
	nrf24l01_CSNlo; //low CSN
     888:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     88a:	8f 71       	andi	r24, 0x1F	; 31
     88c:	80 62       	ori	r24, 0x20	; 32
     88e:	0e 94 ab 19 	call	0x3356	; 0x3356 <spi_writereadbyte>
	spi_writereadbyte(value); //write register
     892:	8c 2f       	mov	r24, r28
     894:	0e 94 ab 19 	call	0x3356	; 0x3356 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     898:	ae 9a       	sbi	0x15, 6	; 21
}
     89a:	cf 91       	pop	r28
     89c:	08 95       	ret

0000089e <nrf24l01_writeregisters>:

/*
 * write many registers
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
     89e:	ff 92       	push	r15
     8a0:	0f 93       	push	r16
     8a2:	1f 93       	push	r17
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	06 2f       	mov	r16, r22
     8aa:	f7 2e       	mov	r15, r23
     8ac:	14 2f       	mov	r17, r20
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
     8ae:	ae 98       	cbi	0x15, 6	; 21
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     8b0:	8f 71       	andi	r24, 0x1F	; 31
     8b2:	80 62       	ori	r24, 0x20	; 32
     8b4:	0e 94 ab 19 	call	0x3356	; 0x3356 <spi_writereadbyte>
	for(i=0; i<len; i++)
     8b8:	11 23       	and	r17, r17
     8ba:	49 f0       	breq	.+18     	; 0x8ce <nrf24l01_writeregisters+0x30>
     8bc:	c0 2f       	mov	r28, r16
     8be:	df 2d       	mov	r29, r15
     8c0:	00 e0       	ldi	r16, 0x00	; 0
		 spi_writereadbyte(value[i]); //write register
     8c2:	89 91       	ld	r24, Y+
     8c4:	0e 94 ab 19 	call	0x3356	; 0x3356 <spi_writereadbyte>
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     8c8:	0f 5f       	subi	r16, 0xFF	; 255
     8ca:	01 17       	cp	r16, r17
     8cc:	d1 f7       	brne	.-12     	; 0x8c2 <nrf24l01_writeregisters+0x24>
		 spi_writereadbyte(value[i]); //write register
	nrf24l01_CSNhi; //high CSN
     8ce:	ae 9a       	sbi	0x15, 6	; 21
}
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	ff 90       	pop	r15
     8da:	08 95       	ret

000008dc <nrf24l01_revaddress>:

/*
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	04 96       	adiw	r24, 0x04	; 4
     8e2:	db 01       	movw	r26, r22
     8e4:	a2 0f       	add	r26, r18
     8e6:	b3 1f       	adc	r27, r19
     8e8:	fc 01       	movw	r30, r24
     8ea:	e2 1b       	sub	r30, r18
     8ec:	f3 0b       	sbc	r31, r19
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
     8ee:	40 81       	ld	r20, Z
     8f0:	4c 93       	st	X, r20
     8f2:	2f 5f       	subi	r18, 0xFF	; 255
     8f4:	3f 4f       	sbci	r19, 0xFF	; 255
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
     8f6:	25 30       	cpi	r18, 0x05	; 5
     8f8:	31 05       	cpc	r19, r1
     8fa:	99 f7       	brne	.-26     	; 0x8e2 <nrf24l01_revaddress+0x6>
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
}
     8fc:	08 95       	ret

000008fe <nrf24l01_setrxaddr>:

/*
 * set rx address
 */
void nrf24l01_setrxaddr(uint8_t pipe, uint8_t *addr) {
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	00 d0       	rcall	.+0      	; 0x904 <nrf24l01_setrxaddr+0x6>
     904:	00 d0       	rcall	.+0      	; 0x906 <nrf24l01_setrxaddr+0x8>
     906:	0f 92       	push	r0
     908:	cd b7       	in	r28, 0x3d	; 61
     90a:	de b7       	in	r29, 0x3e	; 62
	if(pipe == 0) {
     90c:	88 23       	and	r24, r24
     90e:	b1 f4       	brne	.+44     	; 0x93c <nrf24l01_setrxaddr+0x3e>
		memcpy(&nrf24l01_addr0, addr, NRF24L01_ADDRSIZE); //cache address
     910:	a9 ed       	ldi	r26, 0xD9	; 217
     912:	b1 e0       	ldi	r27, 0x01	; 1
     914:	fb 01       	movw	r30, r22
     916:	85 e0       	ldi	r24, 0x05	; 5
     918:	01 90       	ld	r0, Z+
     91a:	0d 92       	st	X+, r0
     91c:	81 50       	subi	r24, 0x01	; 1
     91e:	e1 f7       	brne	.-8      	; 0x918 <nrf24l01_setrxaddr+0x1a>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     920:	cb 01       	movw	r24, r22
     922:	be 01       	movw	r22, r28
     924:	6f 5f       	subi	r22, 0xFF	; 255
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 6e 04 	call	0x8dc	; 0x8dc <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE);
     92c:	8a e0       	ldi	r24, 0x0A	; 10
     92e:	be 01       	movw	r22, r28
     930:	6f 5f       	subi	r22, 0xFF	; 255
     932:	7f 4f       	sbci	r23, 0xFF	; 255
     934:	45 e0       	ldi	r20, 0x05	; 5
     936:	0e 94 4f 04 	call	0x89e	; 0x89e <nrf24l01_writeregisters>
     93a:	56 c0       	rjmp	.+172    	; 0x9e8 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 1) {
     93c:	81 30       	cpi	r24, 0x01	; 1
     93e:	b1 f4       	brne	.+44     	; 0x96c <nrf24l01_setrxaddr+0x6e>
		memcpy(&nrf24l01_addr1, addr, NRF24L01_ADDRSIZE); //cache address
     940:	ae ed       	ldi	r26, 0xDE	; 222
     942:	b1 e0       	ldi	r27, 0x01	; 1
     944:	fb 01       	movw	r30, r22
     946:	85 e0       	ldi	r24, 0x05	; 5
     948:	01 90       	ld	r0, Z+
     94a:	0d 92       	st	X+, r0
     94c:	81 50       	subi	r24, 0x01	; 1
     94e:	e1 f7       	brne	.-8      	; 0x948 <nrf24l01_setrxaddr+0x4a>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     950:	cb 01       	movw	r24, r22
     952:	be 01       	movw	r22, r28
     954:	6f 5f       	subi	r22, 0xFF	; 255
     956:	7f 4f       	sbci	r23, 0xFF	; 255
     958:	0e 94 6e 04 	call	0x8dc	; 0x8dc <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P1, addrrev, NRF24L01_ADDRSIZE);
     95c:	8b e0       	ldi	r24, 0x0B	; 11
     95e:	be 01       	movw	r22, r28
     960:	6f 5f       	subi	r22, 0xFF	; 255
     962:	7f 4f       	sbci	r23, 0xFF	; 255
     964:	45 e0       	ldi	r20, 0x05	; 5
     966:	0e 94 4f 04 	call	0x89e	; 0x89e <nrf24l01_writeregisters>
     96a:	3e c0       	rjmp	.+124    	; 0x9e8 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 2) {
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	71 f4       	brne	.+28     	; 0x98c <nrf24l01_setrxaddr+0x8e>
		memcpy(&nrf24l01_addr2, addr, NRF24L01_ADDRSIZE); //cache address
     970:	a3 ee       	ldi	r26, 0xE3	; 227
     972:	b1 e0       	ldi	r27, 0x01	; 1
     974:	fb 01       	movw	r30, r22
     976:	85 e0       	ldi	r24, 0x05	; 5
     978:	01 90       	ld	r0, Z+
     97a:	0d 92       	st	X+, r0
     97c:	81 50       	subi	r24, 0x01	; 1
     97e:	e1 f7       	brne	.-8      	; 0x978 <nrf24l01_setrxaddr+0x7a>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P2, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     980:	8c e0       	ldi	r24, 0x0C	; 12
     982:	fb 01       	movw	r30, r22
     984:	64 81       	ldd	r22, Z+4	; 0x04
     986:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
     98a:	2e c0       	rjmp	.+92     	; 0x9e8 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 3) {
     98c:	83 30       	cpi	r24, 0x03	; 3
     98e:	71 f4       	brne	.+28     	; 0x9ac <nrf24l01_setrxaddr+0xae>
		memcpy(&nrf24l01_addr3, addr, NRF24L01_ADDRSIZE); //cache address
     990:	a8 ee       	ldi	r26, 0xE8	; 232
     992:	b1 e0       	ldi	r27, 0x01	; 1
     994:	fb 01       	movw	r30, r22
     996:	85 e0       	ldi	r24, 0x05	; 5
     998:	01 90       	ld	r0, Z+
     99a:	0d 92       	st	X+, r0
     99c:	81 50       	subi	r24, 0x01	; 1
     99e:	e1 f7       	brne	.-8      	; 0x998 <nrf24l01_setrxaddr+0x9a>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P3, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     9a0:	8d e0       	ldi	r24, 0x0D	; 13
     9a2:	fb 01       	movw	r30, r22
     9a4:	64 81       	ldd	r22, Z+4	; 0x04
     9a6:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
     9aa:	1e c0       	rjmp	.+60     	; 0x9e8 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 4) {
     9ac:	84 30       	cpi	r24, 0x04	; 4
     9ae:	71 f4       	brne	.+28     	; 0x9cc <nrf24l01_setrxaddr+0xce>
		memcpy(&nrf24l01_addr4, addr, NRF24L01_ADDRSIZE); //cache address
     9b0:	ad ee       	ldi	r26, 0xED	; 237
     9b2:	b1 e0       	ldi	r27, 0x01	; 1
     9b4:	fb 01       	movw	r30, r22
     9b6:	85 e0       	ldi	r24, 0x05	; 5
     9b8:	01 90       	ld	r0, Z+
     9ba:	0d 92       	st	X+, r0
     9bc:	81 50       	subi	r24, 0x01	; 1
     9be:	e1 f7       	brne	.-8      	; 0x9b8 <nrf24l01_setrxaddr+0xba>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P4, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     9c0:	8e e0       	ldi	r24, 0x0E	; 14
     9c2:	fb 01       	movw	r30, r22
     9c4:	64 81       	ldd	r22, Z+4	; 0x04
     9c6:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
     9ca:	0e c0       	rjmp	.+28     	; 0x9e8 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 5) {
     9cc:	85 30       	cpi	r24, 0x05	; 5
     9ce:	61 f4       	brne	.+24     	; 0x9e8 <nrf24l01_setrxaddr+0xea>
		memcpy(&nrf24l01_addr5, addr, NRF24L01_ADDRSIZE); //cache address
     9d0:	a2 ef       	ldi	r26, 0xF2	; 242
     9d2:	b1 e0       	ldi	r27, 0x01	; 1
     9d4:	fb 01       	movw	r30, r22
     9d6:	01 90       	ld	r0, Z+
     9d8:	0d 92       	st	X+, r0
     9da:	81 50       	subi	r24, 0x01	; 1
     9dc:	e1 f7       	brne	.-8      	; 0x9d6 <nrf24l01_setrxaddr+0xd8>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P5, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     9de:	8f e0       	ldi	r24, 0x0F	; 15
     9e0:	fb 01       	movw	r30, r22
     9e2:	64 81       	ldd	r22, Z+4	; 0x04
     9e4:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
	}
}
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	08 95       	ret

000009f8 <nrf24l01_settxaddr>:

/*
 * set tx address
 */
void nrf24l01_settxaddr(uint8_t *addr) {
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	00 d0       	rcall	.+0      	; 0x9fe <nrf24l01_settxaddr+0x6>
     9fe:	00 d0       	rcall	.+0      	; 0xa00 <nrf24l01_settxaddr+0x8>
     a00:	0f 92       	push	r0
     a02:	cd b7       	in	r28, 0x3d	; 61
     a04:	de b7       	in	r29, 0x3e	; 62
	memcpy(&nrf24l01_addrtx, addr, NRF24L01_ADDRSIZE); //cache address
     a06:	a7 ef       	ldi	r26, 0xF7	; 247
     a08:	b1 e0       	ldi	r27, 0x01	; 1
     a0a:	e8 2f       	mov	r30, r24
     a0c:	f9 2f       	mov	r31, r25
     a0e:	25 e0       	ldi	r18, 0x05	; 5
     a10:	01 90       	ld	r0, Z+
     a12:	0d 92       	st	X+, r0
     a14:	21 50       	subi	r18, 0x01	; 1
     a16:	e1 f7       	brne	.-8      	; 0xa10 <nrf24l01_settxaddr+0x18>
	uint8_t addrrev[NRF24L01_ADDRSIZE];
	nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     a18:	be 01       	movw	r22, r28
     a1a:	6f 5f       	subi	r22, 0xFF	; 255
     a1c:	7f 4f       	sbci	r23, 0xFF	; 255
     a1e:	0e 94 6e 04 	call	0x8dc	; 0x8dc <nrf24l01_revaddress>
	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE); //set rx address for ack on pipe 0
     a22:	8a e0       	ldi	r24, 0x0A	; 10
     a24:	be 01       	movw	r22, r28
     a26:	6f 5f       	subi	r22, 0xFF	; 255
     a28:	7f 4f       	sbci	r23, 0xFF	; 255
     a2a:	45 e0       	ldi	r20, 0x05	; 5
     a2c:	0e 94 4f 04 	call	0x89e	; 0x89e <nrf24l01_writeregisters>
	nrf24l01_writeregisters(NRF24L01_REG_TX_ADDR, addrrev, NRF24L01_ADDRSIZE); //set tx address
     a30:	80 e1       	ldi	r24, 0x10	; 16
     a32:	be 01       	movw	r22, r28
     a34:	6f 5f       	subi	r22, 0xFF	; 255
     a36:	7f 4f       	sbci	r23, 0xFF	; 255
     a38:	45 e0       	ldi	r20, 0x05	; 5
     a3a:	0e 94 4f 04 	call	0x89e	; 0x89e <nrf24l01_writeregisters>
}
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	08 95       	ret

00000a4e <nrf24l01_flushRXfifo>:

/*
 * flush RX fifo
 */
void nrf24l01_flushRXfifo() {
	nrf24l01_CSNlo; //low CSN
     a4e:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_FLUSH_RX);
     a50:	82 ee       	ldi	r24, 0xE2	; 226
     a52:	0e 94 ab 19 	call	0x3356	; 0x3356 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     a56:	ae 9a       	sbi	0x15, 6	; 21
}
     a58:	08 95       	ret

00000a5a <nrf24l01_flushTXfifo>:

/*
 * flush TX fifo
 */
void nrf24l01_flushTXfifo() {
	nrf24l01_CSNlo; //low CSN
     a5a:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_FLUSH_TX);
     a5c:	81 ee       	ldi	r24, 0xE1	; 225
     a5e:	0e 94 ab 19 	call	0x3356	; 0x3356 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     a62:	ae 9a       	sbi	0x15, 6	; 21
}
     a64:	08 95       	ret

00000a66 <nrf24l01_setRX>:

/*
 * set chip as RX
 */
void nrf24l01_setRX() {
	nrf24l01_setrxaddr(0, nrf24l01_addr0); //restore pipe 0 address
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	69 ed       	ldi	r22, 0xD9	; 217
     a6a:	71 e0       	ldi	r23, 0x01	; 1
     a6c:	0e 94 7f 04 	call	0x8fe	; 0x8fe <nrf24l01_setrxaddr>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PRIM_RX)); //prx mode
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	0e 94 1a 04 	call	0x834	; 0x834 <nrf24l01_readregister>
     a76:	68 2f       	mov	r22, r24
     a78:	61 60       	ori	r22, 0x01	; 1
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	0e 94 1a 04 	call	0x834	; 0x834 <nrf24l01_readregister>
     a86:	68 2f       	mov	r22, r24
     a88:	62 60       	ori	r22, 0x02	; 2
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     a90:	87 e0       	ldi	r24, 0x07	; 7
     a92:	60 e7       	ldi	r22, 0x70	; 112
     a94:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
	nrf24l01_flushRXfifo(); //flush rx fifo
     a98:	0e 94 27 05 	call	0xa4e	; 0xa4e <nrf24l01_flushRXfifo>
	nrf24l01_flushTXfifo(); //flush tx fifo
     a9c:	0e 94 2d 05 	call	0xa5a	; 0xa5a <nrf24l01_flushTXfifo>
	nrf24l01_CEhi; //start listening
     aa0:	af 9a       	sbi	0x15, 7	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aa2:	82 e3       	ldi	r24, 0x32	; 50
     aa4:	8a 95       	dec	r24
     aa6:	f1 f7       	brne	.-4      	; 0xaa4 <nrf24l01_setRX+0x3e>
	_delay_us(150); //wait for the radio to power up
}
     aa8:	08 95       	ret

00000aaa <nrf24l01_setTX>:

/*
 * set chip as TX
 */
void nrf24l01_setTX() {
	nrf24l01_CElo; //stop listening
     aaa:	af 98       	cbi	0x15, 7	; 21
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PRIM_RX)); //ptx mode
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	0e 94 1a 04 	call	0x834	; 0x834 <nrf24l01_readregister>
     ab2:	68 2f       	mov	r22, r24
     ab4:	6e 7f       	andi	r22, 0xFE	; 254
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	0e 94 1a 04 	call	0x834	; 0x834 <nrf24l01_readregister>
     ac2:	68 2f       	mov	r22, r24
     ac4:	62 60       	ori	r22, 0x02	; 2
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     acc:	87 e0       	ldi	r24, 0x07	; 7
     ace:	60 e7       	ldi	r22, 0x70	; 112
     ad0:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
	nrf24l01_flushTXfifo(); //flush tx fifo
     ad4:	0e 94 2d 05 	call	0xa5a	; 0xa5a <nrf24l01_flushTXfifo>
     ad8:	82 e3       	ldi	r24, 0x32	; 50
     ada:	8a 95       	dec	r24
     adc:	f1 f7       	brne	.-4      	; 0xada <nrf24l01_setTX+0x30>
	_delay_us(150); //wait for the radio to power up
}
     ade:	08 95       	ret

00000ae0 <nrf24l01_getstatus>:
/*
 * get status register
 */
uint8_t nrf24l01_getstatus() {
	uint8_t status = 0;
	nrf24l01_CSNlo; //low CSN
     ae0:	ae 98       	cbi	0x15, 6	; 21
	status = spi_writereadbyte(NRF24L01_CMD_NOP); //get status, send NOP request
     ae2:	8f ef       	ldi	r24, 0xFF	; 255
     ae4:	0e 94 ab 19 	call	0x3356	; 0x3356 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     ae8:	ae 9a       	sbi	0x15, 6	; 21
	return status;
}
     aea:	08 95       	ret

00000aec <nrf24l01_printinfo>:

#if NRF24L01_PRINTENABLE == 1
/*
 * print info
 */
void nrf24l01_printinfo(void(*prints)(const char *), void(*printc)(unsigned char data)) {
     aec:	ef 92       	push	r14
     aee:	ff 92       	push	r15
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
     afc:	c4 56       	subi	r28, 0x64	; 100
     afe:	d0 40       	sbci	r29, 0x00	; 0
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	f8 94       	cli
     b04:	de bf       	out	0x3e, r29	; 62
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	cd bf       	out	0x3d, r28	; 61
     b0a:	7c 01       	movw	r14, r24
	char buff[100];
	prints("info\r\n");
     b0c:	8f e5       	ldi	r24, 0x5F	; 95
     b0e:	91 e0       	ldi	r25, 0x01	; 1
     b10:	f7 01       	movw	r30, r14
     b12:	09 95       	icall
	sprintf(buff,"STATUS: %02X\r\n", nrf24l01_getstatus()); prints(buff);
     b14:	0e 94 70 05 	call	0xae0	; 0xae0 <nrf24l01_getstatus>
     b18:	00 d0       	rcall	.+0      	; 0xb1a <nrf24l01_printinfo+0x2e>
     b1a:	00 d0       	rcall	.+0      	; 0xb1c <nrf24l01_printinfo+0x30>
     b1c:	00 d0       	rcall	.+0      	; 0xb1e <nrf24l01_printinfo+0x32>
     b1e:	ed b7       	in	r30, 0x3d	; 61
     b20:	fe b7       	in	r31, 0x3e	; 62
     b22:	31 96       	adiw	r30, 0x01	; 1
     b24:	8e 01       	movw	r16, r28
     b26:	0f 5f       	subi	r16, 0xFF	; 255
     b28:	1f 4f       	sbci	r17, 0xFF	; 255
     b2a:	ad b7       	in	r26, 0x3d	; 61
     b2c:	be b7       	in	r27, 0x3e	; 62
     b2e:	12 96       	adiw	r26, 0x02	; 2
     b30:	1c 93       	st	X, r17
     b32:	0e 93       	st	-X, r16
     b34:	11 97       	sbiw	r26, 0x01	; 1
     b36:	26 e6       	ldi	r18, 0x66	; 102
     b38:	31 e0       	ldi	r19, 0x01	; 1
     b3a:	33 83       	std	Z+3, r19	; 0x03
     b3c:	22 83       	std	Z+2, r18	; 0x02
     b3e:	84 83       	std	Z+4, r24	; 0x04
     b40:	15 82       	std	Z+5, r1	; 0x05
     b42:	0e 94 13 1c 	call	0x3826	; 0x3826 <sprintf>
     b46:	8d b7       	in	r24, 0x3d	; 61
     b48:	9e b7       	in	r25, 0x3e	; 62
     b4a:	06 96       	adiw	r24, 0x06	; 6
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	f8 94       	cli
     b50:	9e bf       	out	0x3e, r25	; 62
     b52:	0f be       	out	0x3f, r0	; 63
     b54:	8d bf       	out	0x3d, r24	; 61
     b56:	c8 01       	movw	r24, r16
     b58:	f7 01       	movw	r30, r14
     b5a:	09 95       	icall
	sprintf(buff,"CONFIG: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_CONFIG)); prints(buff);
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	0e 94 1a 04 	call	0x834	; 0x834 <nrf24l01_readregister>
     b62:	00 d0       	rcall	.+0      	; 0xb64 <nrf24l01_printinfo+0x78>
     b64:	00 d0       	rcall	.+0      	; 0xb66 <nrf24l01_printinfo+0x7a>
     b66:	00 d0       	rcall	.+0      	; 0xb68 <nrf24l01_printinfo+0x7c>
     b68:	ed b7       	in	r30, 0x3d	; 61
     b6a:	fe b7       	in	r31, 0x3e	; 62
     b6c:	31 96       	adiw	r30, 0x01	; 1
     b6e:	ad b7       	in	r26, 0x3d	; 61
     b70:	be b7       	in	r27, 0x3e	; 62
     b72:	12 96       	adiw	r26, 0x02	; 2
     b74:	1c 93       	st	X, r17
     b76:	0e 93       	st	-X, r16
     b78:	11 97       	sbiw	r26, 0x01	; 1
     b7a:	25 e7       	ldi	r18, 0x75	; 117
     b7c:	31 e0       	ldi	r19, 0x01	; 1
     b7e:	33 83       	std	Z+3, r19	; 0x03
     b80:	22 83       	std	Z+2, r18	; 0x02
     b82:	84 83       	std	Z+4, r24	; 0x04
     b84:	15 82       	std	Z+5, r1	; 0x05
     b86:	0e 94 13 1c 	call	0x3826	; 0x3826 <sprintf>
     b8a:	8d b7       	in	r24, 0x3d	; 61
     b8c:	9e b7       	in	r25, 0x3e	; 62
     b8e:	06 96       	adiw	r24, 0x06	; 6
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	f8 94       	cli
     b94:	9e bf       	out	0x3e, r25	; 62
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	8d bf       	out	0x3d, r24	; 61
     b9a:	c8 01       	movw	r24, r16
     b9c:	f7 01       	movw	r30, r14
     b9e:	09 95       	icall
	sprintf(buff,"RF_CH: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_CH)); prints(buff);
     ba0:	85 e0       	ldi	r24, 0x05	; 5
     ba2:	0e 94 1a 04 	call	0x834	; 0x834 <nrf24l01_readregister>
     ba6:	00 d0       	rcall	.+0      	; 0xba8 <nrf24l01_printinfo+0xbc>
     ba8:	00 d0       	rcall	.+0      	; 0xbaa <nrf24l01_printinfo+0xbe>
     baa:	00 d0       	rcall	.+0      	; 0xbac <nrf24l01_printinfo+0xc0>
     bac:	ed b7       	in	r30, 0x3d	; 61
     bae:	fe b7       	in	r31, 0x3e	; 62
     bb0:	31 96       	adiw	r30, 0x01	; 1
     bb2:	ad b7       	in	r26, 0x3d	; 61
     bb4:	be b7       	in	r27, 0x3e	; 62
     bb6:	12 96       	adiw	r26, 0x02	; 2
     bb8:	1c 93       	st	X, r17
     bba:	0e 93       	st	-X, r16
     bbc:	11 97       	sbiw	r26, 0x01	; 1
     bbe:	24 e8       	ldi	r18, 0x84	; 132
     bc0:	31 e0       	ldi	r19, 0x01	; 1
     bc2:	33 83       	std	Z+3, r19	; 0x03
     bc4:	22 83       	std	Z+2, r18	; 0x02
     bc6:	84 83       	std	Z+4, r24	; 0x04
     bc8:	15 82       	std	Z+5, r1	; 0x05
     bca:	0e 94 13 1c 	call	0x3826	; 0x3826 <sprintf>
     bce:	8d b7       	in	r24, 0x3d	; 61
     bd0:	9e b7       	in	r25, 0x3e	; 62
     bd2:	06 96       	adiw	r24, 0x06	; 6
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	f8 94       	cli
     bd8:	9e bf       	out	0x3e, r25	; 62
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	8d bf       	out	0x3d, r24	; 61
     bde:	c8 01       	movw	r24, r16
     be0:	f7 01       	movw	r30, r14
     be2:	09 95       	icall
	sprintf(buff,"RF_SETUP: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_SETUP)); prints(buff);
     be4:	86 e0       	ldi	r24, 0x06	; 6
     be6:	0e 94 1a 04 	call	0x834	; 0x834 <nrf24l01_readregister>
     bea:	00 d0       	rcall	.+0      	; 0xbec <nrf24l01_printinfo+0x100>
     bec:	00 d0       	rcall	.+0      	; 0xbee <nrf24l01_printinfo+0x102>
     bee:	00 d0       	rcall	.+0      	; 0xbf0 <nrf24l01_printinfo+0x104>
     bf0:	ed b7       	in	r30, 0x3d	; 61
     bf2:	fe b7       	in	r31, 0x3e	; 62
     bf4:	31 96       	adiw	r30, 0x01	; 1
     bf6:	ad b7       	in	r26, 0x3d	; 61
     bf8:	be b7       	in	r27, 0x3e	; 62
     bfa:	12 96       	adiw	r26, 0x02	; 2
     bfc:	1c 93       	st	X, r17
     bfe:	0e 93       	st	-X, r16
     c00:	11 97       	sbiw	r26, 0x01	; 1
     c02:	22 e9       	ldi	r18, 0x92	; 146
     c04:	31 e0       	ldi	r19, 0x01	; 1
     c06:	33 83       	std	Z+3, r19	; 0x03
     c08:	22 83       	std	Z+2, r18	; 0x02
     c0a:	84 83       	std	Z+4, r24	; 0x04
     c0c:	15 82       	std	Z+5, r1	; 0x05
     c0e:	0e 94 13 1c 	call	0x3826	; 0x3826 <sprintf>
     c12:	8d b7       	in	r24, 0x3d	; 61
     c14:	9e b7       	in	r25, 0x3e	; 62
     c16:	06 96       	adiw	r24, 0x06	; 6
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	f8 94       	cli
     c1c:	9e bf       	out	0x3e, r25	; 62
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	8d bf       	out	0x3d, r24	; 61
     c22:	c8 01       	movw	r24, r16
     c24:	f7 01       	movw	r30, r14
     c26:	09 95       	icall
	sprintf(buff,"EN_AA: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_AA)); prints(buff);
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	0e 94 1a 04 	call	0x834	; 0x834 <nrf24l01_readregister>
     c2e:	00 d0       	rcall	.+0      	; 0xc30 <nrf24l01_printinfo+0x144>
     c30:	00 d0       	rcall	.+0      	; 0xc32 <nrf24l01_printinfo+0x146>
     c32:	00 d0       	rcall	.+0      	; 0xc34 <nrf24l01_printinfo+0x148>
     c34:	ed b7       	in	r30, 0x3d	; 61
     c36:	fe b7       	in	r31, 0x3e	; 62
     c38:	31 96       	adiw	r30, 0x01	; 1
     c3a:	ad b7       	in	r26, 0x3d	; 61
     c3c:	be b7       	in	r27, 0x3e	; 62
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	1c 93       	st	X, r17
     c42:	0e 93       	st	-X, r16
     c44:	11 97       	sbiw	r26, 0x01	; 1
     c46:	23 ea       	ldi	r18, 0xA3	; 163
     c48:	31 e0       	ldi	r19, 0x01	; 1
     c4a:	33 83       	std	Z+3, r19	; 0x03
     c4c:	22 83       	std	Z+2, r18	; 0x02
     c4e:	84 83       	std	Z+4, r24	; 0x04
     c50:	15 82       	std	Z+5, r1	; 0x05
     c52:	0e 94 13 1c 	call	0x3826	; 0x3826 <sprintf>
     c56:	8d b7       	in	r24, 0x3d	; 61
     c58:	9e b7       	in	r25, 0x3e	; 62
     c5a:	06 96       	adiw	r24, 0x06	; 6
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	9e bf       	out	0x3e, r25	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	8d bf       	out	0x3d, r24	; 61
     c66:	c8 01       	movw	r24, r16
     c68:	f7 01       	movw	r30, r14
     c6a:	09 95       	icall
	sprintf(buff,"EN_RXADDR: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_RXADDR)); prints(buff);
     c6c:	82 e0       	ldi	r24, 0x02	; 2
     c6e:	0e 94 1a 04 	call	0x834	; 0x834 <nrf24l01_readregister>
     c72:	00 d0       	rcall	.+0      	; 0xc74 <nrf24l01_printinfo+0x188>
     c74:	00 d0       	rcall	.+0      	; 0xc76 <nrf24l01_printinfo+0x18a>
     c76:	00 d0       	rcall	.+0      	; 0xc78 <nrf24l01_printinfo+0x18c>
     c78:	ed b7       	in	r30, 0x3d	; 61
     c7a:	fe b7       	in	r31, 0x3e	; 62
     c7c:	31 96       	adiw	r30, 0x01	; 1
     c7e:	ad b7       	in	r26, 0x3d	; 61
     c80:	be b7       	in	r27, 0x3e	; 62
     c82:	12 96       	adiw	r26, 0x02	; 2
     c84:	1c 93       	st	X, r17
     c86:	0e 93       	st	-X, r16
     c88:	11 97       	sbiw	r26, 0x01	; 1
     c8a:	21 eb       	ldi	r18, 0xB1	; 177
     c8c:	31 e0       	ldi	r19, 0x01	; 1
     c8e:	33 83       	std	Z+3, r19	; 0x03
     c90:	22 83       	std	Z+2, r18	; 0x02
     c92:	84 83       	std	Z+4, r24	; 0x04
     c94:	15 82       	std	Z+5, r1	; 0x05
     c96:	0e 94 13 1c 	call	0x3826	; 0x3826 <sprintf>
     c9a:	8d b7       	in	r24, 0x3d	; 61
     c9c:	9e b7       	in	r25, 0x3e	; 62
     c9e:	06 96       	adiw	r24, 0x06	; 6
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	f8 94       	cli
     ca4:	9e bf       	out	0x3e, r25	; 62
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	8d bf       	out	0x3d, r24	; 61
     caa:	c8 01       	movw	r24, r16
     cac:	f7 01       	movw	r30, r14
     cae:	09 95       	icall
	sprintf(buff,"OBSERVE_TX: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_OBSERVE_TX)); prints(buff);
     cb0:	88 e0       	ldi	r24, 0x08	; 8
     cb2:	0e 94 1a 04 	call	0x834	; 0x834 <nrf24l01_readregister>
     cb6:	00 d0       	rcall	.+0      	; 0xcb8 <nrf24l01_printinfo+0x1cc>
     cb8:	00 d0       	rcall	.+0      	; 0xcba <nrf24l01_printinfo+0x1ce>
     cba:	00 d0       	rcall	.+0      	; 0xcbc <nrf24l01_printinfo+0x1d0>
     cbc:	ed b7       	in	r30, 0x3d	; 61
     cbe:	fe b7       	in	r31, 0x3e	; 62
     cc0:	31 96       	adiw	r30, 0x01	; 1
     cc2:	ad b7       	in	r26, 0x3d	; 61
     cc4:	be b7       	in	r27, 0x3e	; 62
     cc6:	12 96       	adiw	r26, 0x02	; 2
     cc8:	1c 93       	st	X, r17
     cca:	0e 93       	st	-X, r16
     ccc:	11 97       	sbiw	r26, 0x01	; 1
     cce:	23 ec       	ldi	r18, 0xC3	; 195
     cd0:	31 e0       	ldi	r19, 0x01	; 1
     cd2:	33 83       	std	Z+3, r19	; 0x03
     cd4:	22 83       	std	Z+2, r18	; 0x02
     cd6:	84 83       	std	Z+4, r24	; 0x04
     cd8:	15 82       	std	Z+5, r1	; 0x05
     cda:	0e 94 13 1c 	call	0x3826	; 0x3826 <sprintf>
     cde:	8d b7       	in	r24, 0x3d	; 61
     ce0:	9e b7       	in	r25, 0x3e	; 62
     ce2:	06 96       	adiw	r24, 0x06	; 6
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	9e bf       	out	0x3e, r25	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	8d bf       	out	0x3d, r24	; 61
     cee:	c8 01       	movw	r24, r16
     cf0:	f7 01       	movw	r30, r14
     cf2:	09 95       	icall
	prints("\r\n");
     cf4:	86 ed       	ldi	r24, 0xD6	; 214
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	f7 01       	movw	r30, r14
     cfa:	09 95       	icall
}
     cfc:	cc 59       	subi	r28, 0x9C	; 156
     cfe:	df 4f       	sbci	r29, 0xFF	; 255
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	f8 94       	cli
     d04:	de bf       	out	0x3e, r29	; 62
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	cd bf       	out	0x3d, r28	; 61
     d0a:	df 91       	pop	r29
     d0c:	cf 91       	pop	r28
     d0e:	1f 91       	pop	r17
     d10:	0f 91       	pop	r16
     d12:	ff 90       	pop	r15
     d14:	ef 90       	pop	r14
     d16:	08 95       	ret

00000d18 <nrf24l01_readready>:
}

/*
 * check if there is data ready
 */
uint8_t nrf24l01_readready(uint8_t* pipe) {
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29
     d1c:	ec 01       	movw	r28, r24
    uint8_t status = nrf24l01_getstatus();
     d1e:	0e 94 70 05 	call	0xae0	; 0xae0 <nrf24l01_getstatus>
    uint8_t ret = status & (1<<NRF24L01_REG_RX_DR);
    if(ret) {
     d22:	98 2f       	mov	r25, r24
     d24:	90 74       	andi	r25, 0x40	; 64
     d26:	86 ff       	sbrs	r24, 6
     d28:	05 c0       	rjmp	.+10     	; 0xd34 <nrf24l01_readready+0x1c>
		//get the pipe number
		if(pipe)
     d2a:	20 97       	sbiw	r28, 0x00	; 0
     d2c:	19 f0       	breq	.+6      	; 0xd34 <nrf24l01_readready+0x1c>
			*pipe = (status >> NRF24L01_REG_RX_P_NO) & 0b111;
     d2e:	86 95       	lsr	r24
     d30:	87 70       	andi	r24, 0x07	; 7
     d32:	88 83       	st	Y, r24
    }
    return ret;
}
     d34:	89 2f       	mov	r24, r25
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	08 95       	ret

00000d3c <nrf24l01_read>:

/*
 * get data
 */
void nrf24l01_read(uint8_t pipe,uint8_t *data) {
     d3c:	0f 93       	push	r16
     d3e:	1f 93       	push	r17
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	06 2f       	mov	r16, r22
     d46:	17 2f       	mov	r17, r23
	uint8_t i = 0;
	//read rx register
	nrf24l01_CSNlo; //low CSN
     d48:	ae 98       	cbi	0x15, 6	; 21
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
     d4a:	81 e6       	ldi	r24, 0x61	; 97
     d4c:	0e 94 ab 19 	call	0x3356	; 0x3356 <spi_writereadbyte>
     d50:	c0 2f       	mov	r28, r16
     d52:	d1 2f       	mov	r29, r17
	//Thay doi lai command, lay PAYLOAD va write ACK
	//spi_writereadbyte(NRF24L01_CMD_W_ACK_PAYLOAD | pipe);
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     d54:	10 e0       	ldi	r17, 0x00	; 0
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
     d56:	8f ef       	ldi	r24, 0xFF	; 255
     d58:	0e 94 ab 19 	call	0x3356	; 0x3356 <spi_writereadbyte>
     d5c:	89 93       	st	Y+, r24
	//read rx register
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
	//Thay doi lai command, lay PAYLOAD va write ACK
	//spi_writereadbyte(NRF24L01_CMD_W_ACK_PAYLOAD | pipe);
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     d5e:	1f 5f       	subi	r17, 0xFF	; 255
     d60:	19 30       	cpi	r17, 0x09	; 9
     d62:	c9 f7       	brne	.-14     	; 0xd56 <nrf24l01_read+0x1a>
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
    nrf24l01_CSNhi; //high CSN
     d64:	ae 9a       	sbi	0x15, 6	; 21
    //reset register
    nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR));
     d66:	87 e0       	ldi	r24, 0x07	; 7
     d68:	60 e4       	ldi	r22, 0x40	; 64
     d6a:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
    //handle ack payload receipt
	if (nrf24l01_getstatus() & (1<<NRF24L01_REG_TX_DS))
     d6e:	0e 94 70 05 	call	0xae0	; 0xae0 <nrf24l01_getstatus>
     d72:	85 ff       	sbrs	r24, 5
     d74:	04 c0       	rjmp	.+8      	; 0xd7e <nrf24l01_read+0x42>
		nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_TX_DS));
     d76:	87 e0       	ldi	r24, 0x07	; 7
     d78:	60 e2       	ldi	r22, 0x20	; 32
     d7a:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
}
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	1f 91       	pop	r17
     d84:	0f 91       	pop	r16
     d86:	08 95       	ret

00000d88 <nrf24l01_write>:

/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
     d88:	0f 93       	push	r16
     d8a:	1f 93       	push	r17
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	08 2f       	mov	r16, r24
     d92:	19 2f       	mov	r17, r25
	uint8_t i = 0;
	uint8_t ret = 0;

	//set tx mode
	nrf24l01_setTX();
     d94:	0e 94 55 05 	call	0xaaa	; 0xaaa <nrf24l01_setTX>

	//write data
	nrf24l01_CSNlo; //low CSN
     d98:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
     d9a:	80 ea       	ldi	r24, 0xA0	; 160
     d9c:	0e 94 ab 19 	call	0x3356	; 0x3356 <spi_writereadbyte>
     da0:	c0 2f       	mov	r28, r16
     da2:	d1 2f       	mov	r29, r17
     da4:	19 e0       	ldi	r17, 0x09	; 9
	for (i=0; i<NRF24L01_PAYLOAD; i++)
		spi_writereadbyte(data[i]);
     da6:	89 91       	ld	r24, Y+
     da8:	0e 94 ab 19 	call	0x3356	; 0x3356 <spi_writereadbyte>
     dac:	11 50       	subi	r17, 0x01	; 1
	nrf24l01_setTX();

	//write data
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
	for (i=0; i<NRF24L01_PAYLOAD; i++)
     dae:	d9 f7       	brne	.-10     	; 0xda6 <nrf24l01_write+0x1e>
		spi_writereadbyte(data[i]);
	nrf24l01_CSNhi; //high CSN
     db0:	ae 9a       	sbi	0x15, 6	; 21

	//start transmission
	nrf24l01_CEhi; //high CE
     db2:	af 9a       	sbi	0x15, 7	; 21
     db4:	85 e0       	ldi	r24, 0x05	; 5
     db6:	8a 95       	dec	r24
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <nrf24l01_write+0x2e>
	_delay_us(15);
	nrf24l01_CElo; //low CE
     dba:	af 98       	cbi	0x15, 7	; 21
     dbc:	83 e0       	ldi	r24, 0x03	; 3
     dbe:	8a 95       	dec	r24
     dc0:	f1 f7       	brne	.-4      	; 0xdbe <nrf24l01_write+0x36>
     dc2:	00 00       	nop

	//stop if max_retries reached or send is ok
	do {
		_delay_us(10);
	}
	while( !(nrf24l01_getstatus() & (1<<NRF24L01_REG_MAX_RT | 1<<NRF24L01_REG_TX_DS)) );
     dc4:	0e 94 70 05 	call	0xae0	; 0xae0 <nrf24l01_getstatus>
     dc8:	80 73       	andi	r24, 0x30	; 48
     dca:	c1 f3       	breq	.-16     	; 0xdbc <nrf24l01_write+0x34>

	if(nrf24l01_getstatus() & 1<<NRF24L01_REG_TX_DS)
     dcc:	0e 94 70 05 	call	0xae0	; 0xae0 <nrf24l01_getstatus>
     dd0:	c8 2f       	mov	r28, r24
		ret = 1;

	//reset PLOS_CNT
	nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH);
     dd2:	85 e0       	ldi	r24, 0x05	; 5
     dd4:	6c e4       	ldi	r22, 0x4C	; 76
     dd6:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>

	//power down
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PWR_UP));
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	0e 94 1a 04 	call	0x834	; 0x834 <nrf24l01_readregister>
     de0:	68 2f       	mov	r22, r24
     de2:	6d 7f       	andi	r22, 0xFD	; 253
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>

	//set rx mode
	nrf24l01_setRX();
     dea:	0e 94 33 05 	call	0xa66	; 0xa66 <nrf24l01_setRX>
/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
	uint8_t i = 0;
	uint8_t ret = 0;
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	c5 ff       	sbrs	r28, 5
     df2:	80 e0       	ldi	r24, 0x00	; 0

	//set rx mode
	nrf24l01_setRX();

	return ret;
}
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	08 95       	ret

00000dfe <nrf24l01_setpalevel>:

/*
 * set power level
 */
void nrf24l01_setpalevel() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP);
     dfe:	86 e0       	ldi	r24, 0x06	; 6
     e00:	0e 94 1a 04 	call	0x834	; 0x834 <nrf24l01_readregister>
  setup &= ~((1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH));

  if (NRF24L01_RF24_PA == NRF24L01_RF24_PA_MAX) {
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
     e04:	68 2f       	mov	r22, r24
     e06:	66 60       	ori	r22, 0x06	; 6
  } else {
	  //default is max power
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     e08:	86 e0       	ldi	r24, 0x06	; 6
     e0a:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
}
     e0e:	08 95       	ret

00000e10 <nrf24l01_setdatarate>:

/*
 * set datarate
 */
void nrf24l01_setdatarate() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP) ;
     e10:	86 e0       	ldi	r24, 0x06	; 6
     e12:	0e 94 1a 04 	call	0x834	; 0x834 <nrf24l01_readregister>

  setup &= ~((1<<NRF24L01_REG_RF_DR_LOW) | (1<<NRF24L01_REG_RF_DR_HIGH));
     e16:	68 2f       	mov	r22, r24
     e18:	67 7d       	andi	r22, 0xD7	; 215
    } else {
    	//default is 1Mbps
    }
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     e1a:	86 e0       	ldi	r24, 0x06	; 6
     e1c:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
}
     e20:	08 95       	ret

00000e22 <nrf24l01_setcrclength>:

/*
 * set crc length
 */
void nrf24l01_setcrclength() {
  uint8_t config = nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~((1<<NRF24L01_REG_CRCO) | (1<<NRF24L01_REG_EN_CRC));
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	0e 94 1a 04 	call	0x834	; 0x834 <nrf24l01_readregister>
	  //nothing
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_8) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_16) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
	  config |= (1<<NRF24L01_REG_CRCO);
     e28:	68 2f       	mov	r22, r24
     e2a:	6c 60       	ori	r22, 0x0C	; 12
  } else {
	  //default is disabled
  }

  nrf24l01_writeregister(NRF24L01_REG_CONFIG, config);
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
}
     e32:	08 95       	ret

00000e34 <nrf24l01_init>:
/*
 * init nrf24l01
 */
void nrf24l01_init() {
	//setup port
	NRF24L01_DDR |= (1<<NRF24L01_CSN); //output
     e34:	a6 9a       	sbi	0x14, 6	; 20
	NRF24L01_DDR |= (1<<NRF24L01_CE); //output
     e36:	a7 9a       	sbi	0x14, 7	; 20

    spi_init(); //init spi
     e38:	0e 94 a0 19 	call	0x3340	; 0x3340 <spi_init>

    nrf24l01_CElo; //low CE
     e3c:	af 98       	cbi	0x15, 7	; 21
    nrf24l01_CSNhi; //high CSN
     e3e:	ae 9a       	sbi	0x15, 6	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e40:	81 ee       	ldi	r24, 0xE1	; 225
     e42:	94 e0       	ldi	r25, 0x04	; 4
     e44:	01 97       	sbiw	r24, 0x01	; 1
     e46:	f1 f7       	brne	.-4      	; 0xe44 <nrf24l01_init+0x10>
     e48:	00 c0       	rjmp	.+0      	; 0xe4a <nrf24l01_init+0x16>
     e4a:	00 00       	nop

    _delay_ms(5); //wait for the radio to init

    nrf24l01_setpalevel(); //set power level
     e4c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <nrf24l01_setpalevel>
    nrf24l01_setdatarate(); //set data rate
     e50:	0e 94 08 07 	call	0xe10	; 0xe10 <nrf24l01_setdatarate>
    nrf24l01_setcrclength(); //set crc length
     e54:	0e 94 11 07 	call	0xe22	; 0xe22 <nrf24l01_setcrclength>
    nrf24l01_writeregister(NRF24L01_REG_SETUP_RETR, NRF24L01_RETR); // set retries
     e58:	84 e0       	ldi	r24, 0x04	; 4
     e5a:	67 e4       	ldi	r22, 0x47	; 71
     e5c:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_DYNPD, 0); //disable dynamic payloads
     e60:	8c e1       	ldi	r24, 0x1C	; 28
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH); //set RF channel
     e68:	85 e0       	ldi	r24, 0x05	; 5
     e6a:	6c e4       	ldi	r22, 0x4C	; 76
     e6c:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>

	//payload size
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P0, NRF24L01_PAYLOAD);
     e70:	81 e1       	ldi	r24, 0x11	; 17
     e72:	69 e0       	ldi	r22, 0x09	; 9
     e74:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P1, NRF24L01_PAYLOAD);
     e78:	82 e1       	ldi	r24, 0x12	; 18
     e7a:	69 e0       	ldi	r22, 0x09	; 9
     e7c:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P2, NRF24L01_PAYLOAD);
     e80:	83 e1       	ldi	r24, 0x13	; 19
     e82:	69 e0       	ldi	r22, 0x09	; 9
     e84:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P3, NRF24L01_PAYLOAD);
     e88:	84 e1       	ldi	r24, 0x14	; 20
     e8a:	69 e0       	ldi	r22, 0x09	; 9
     e8c:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P4, NRF24L01_PAYLOAD);
     e90:	85 e1       	ldi	r24, 0x15	; 21
     e92:	69 e0       	ldi	r22, 0x09	; 9
     e94:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P5, NRF24L01_PAYLOAD);
     e98:	86 e1       	ldi	r24, 0x16	; 22
     e9a:	69 e0       	ldi	r22, 0x09	; 9
     e9c:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
	#endif

	//enable pipe
	nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, 0);
     ea0:	82 e0       	ldi	r24, 0x02	; 2
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P0));
     ea8:	82 e0       	ldi	r24, 0x02	; 2
     eaa:	0e 94 1a 04 	call	0x834	; 0x834 <nrf24l01_readregister>
     eae:	68 2f       	mov	r22, r24
     eb0:	61 60       	ori	r22, 0x01	; 1
     eb2:	82 e0       	ldi	r24, 0x02	; 2
     eb4:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P1));
     eb8:	82 e0       	ldi	r24, 0x02	; 2
     eba:	0e 94 1a 04 	call	0x834	; 0x834 <nrf24l01_readregister>
     ebe:	68 2f       	mov	r22, r24
     ec0:	62 60       	ori	r22, 0x02	; 2
     ec2:	82 e0       	ldi	r24, 0x02	; 2
     ec4:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P2));
     ec8:	82 e0       	ldi	r24, 0x02	; 2
     eca:	0e 94 1a 04 	call	0x834	; 0x834 <nrf24l01_readregister>
     ece:	68 2f       	mov	r22, r24
     ed0:	64 60       	ori	r22, 0x04	; 4
     ed2:	82 e0       	ldi	r24, 0x02	; 2
     ed4:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P3));
     ed8:	82 e0       	ldi	r24, 0x02	; 2
     eda:	0e 94 1a 04 	call	0x834	; 0x834 <nrf24l01_readregister>
     ede:	68 2f       	mov	r22, r24
     ee0:	68 60       	ori	r22, 0x08	; 8
     ee2:	82 e0       	ldi	r24, 0x02	; 2
     ee4:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P4));
     ee8:	82 e0       	ldi	r24, 0x02	; 2
     eea:	0e 94 1a 04 	call	0x834	; 0x834 <nrf24l01_readregister>
     eee:	68 2f       	mov	r22, r24
     ef0:	60 61       	ori	r22, 0x10	; 16
     ef2:	82 e0       	ldi	r24, 0x02	; 2
     ef4:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P5));
     ef8:	82 e0       	ldi	r24, 0x02	; 2
     efa:	0e 94 1a 04 	call	0x834	; 0x834 <nrf24l01_readregister>
     efe:	68 2f       	mov	r22, r24
     f00:	60 62       	ori	r22, 0x20	; 32
     f02:	82 e0       	ldi	r24, 0x02	; 2
     f04:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
	#endif

	//auto ack
	#if NRF24L01_ACK == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P0));
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	0e 94 1a 04 	call	0x834	; 0x834 <nrf24l01_readregister>
     f0e:	68 2f       	mov	r22, r24
     f10:	61 60       	ori	r22, 0x01	; 1
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P1));
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	0e 94 1a 04 	call	0x834	; 0x834 <nrf24l01_readregister>
     f1e:	68 2f       	mov	r22, r24
     f20:	62 60       	ori	r22, 0x02	; 2
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P2));
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	0e 94 1a 04 	call	0x834	; 0x834 <nrf24l01_readregister>
     f2e:	68 2f       	mov	r22, r24
     f30:	64 60       	ori	r22, 0x04	; 4
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P3));
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	0e 94 1a 04 	call	0x834	; 0x834 <nrf24l01_readregister>
     f3e:	68 2f       	mov	r22, r24
     f40:	68 60       	ori	r22, 0x08	; 8
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P4));
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	0e 94 1a 04 	call	0x834	; 0x834 <nrf24l01_readregister>
     f4e:	68 2f       	mov	r22, r24
     f50:	60 61       	ori	r22, 0x10	; 16
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P5));
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	0e 94 1a 04 	call	0x834	; 0x834 <nrf24l01_readregister>
     f5e:	68 2f       	mov	r22, r24
     f60:	60 62       	ori	r22, 0x20	; 32
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	0e 94 42 04 	call	0x884	; 0x884 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P4));
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P5));
	#endif

	//rx address
	nrf24l01_setrxaddr(0, nrf24l01_addr0);
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	69 ed       	ldi	r22, 0xD9	; 217
     f6c:	71 e0       	ldi	r23, 0x01	; 1
     f6e:	0e 94 7f 04 	call	0x8fe	; 0x8fe <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(1, nrf24l01_addr1);
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	6e ed       	ldi	r22, 0xDE	; 222
     f76:	71 e0       	ldi	r23, 0x01	; 1
     f78:	0e 94 7f 04 	call	0x8fe	; 0x8fe <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(2, nrf24l01_addr2);
     f7c:	82 e0       	ldi	r24, 0x02	; 2
     f7e:	63 ee       	ldi	r22, 0xE3	; 227
     f80:	71 e0       	ldi	r23, 0x01	; 1
     f82:	0e 94 7f 04 	call	0x8fe	; 0x8fe <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(3, nrf24l01_addr3);
     f86:	83 e0       	ldi	r24, 0x03	; 3
     f88:	68 ee       	ldi	r22, 0xE8	; 232
     f8a:	71 e0       	ldi	r23, 0x01	; 1
     f8c:	0e 94 7f 04 	call	0x8fe	; 0x8fe <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(4, nrf24l01_addr4);
     f90:	84 e0       	ldi	r24, 0x04	; 4
     f92:	6d ee       	ldi	r22, 0xED	; 237
     f94:	71 e0       	ldi	r23, 0x01	; 1
     f96:	0e 94 7f 04 	call	0x8fe	; 0x8fe <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(5, nrf24l01_addr5);
     f9a:	85 e0       	ldi	r24, 0x05	; 5
     f9c:	62 ef       	ldi	r22, 0xF2	; 242
     f9e:	71 e0       	ldi	r23, 0x01	; 1
     fa0:	0e 94 7f 04 	call	0x8fe	; 0x8fe <nrf24l01_setrxaddr>

	//tx address
	nrf24l01_settxaddr(nrf24l01_addrtx);
     fa4:	87 ef       	ldi	r24, 0xF7	; 247
     fa6:	91 e0       	ldi	r25, 0x01	; 1
     fa8:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <nrf24l01_settxaddr>

	//set rx mode
	nrf24l01_setRX();
     fac:	0e 94 33 05 	call	0xa66	; 0xa66 <nrf24l01_setRX>
}
     fb0:	08 95       	ret

00000fb2 <sMO_init>:
static void clearInEvents(SMO* handle);
static void clearOutEvents(SMO* handle);


void sMO_init(SMO* handle)
{
     fb2:	fc 01       	movw	r30, r24
	int i;

	for (i = 0; i < SMO_MAX_ORTHOGONAL_STATES; ++i)
		handle->stateConfVector[i] = SMO_last_state;
     fb4:	86 e2       	ldi	r24, 0x26	; 38
     fb6:	80 83       	st	Z, r24
     fb8:	81 83       	std	Z+1, r24	; 0x01
	
	
	handle->stateConfVectorPosition = 0;
     fba:	13 82       	std	Z+3, r1	; 0x03
     fbc:	12 82       	std	Z+2, r1	; 0x02

	// TODO: initialize all events ...
	// TODO: initialize all variables ... (set default values - here or inenter sequence ?!?)

}
     fbe:	08 95       	ret

00000fc0 <sMO_enter>:

void sMO_enter(SMO* handle)
{
     fc0:	1f 93       	push	r17
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	ec 01       	movw	r28, r24
	sMO_entryaction(handle);
	/* Default enter sequence for region main region */
	/* Default react sequence for initial entry  */
	/* Default enter sequence for state on */
	/* Entry action for state 'on'. */
	handle->iface.lightOn = bool_true;
     fc8:	11 e0       	ldi	r17, 0x01	; 1
     fca:	1d a7       	lds	r17, 0x7d
	/* Default enter sequence for region r1 */
	/* Default react sequence for initial entry  */
	/* Default enter sequence for state Init */
	/* Entry action for state 'Init'. */
	sMO_setTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) , 3 * 1000, bool_false);
     fcc:	cc 96       	adiw	r24, 0x3c	; 60
     fce:	48 eb       	ldi	r20, 0xB8	; 184
     fd0:	5b e0       	ldi	r21, 0x0B	; 11
     fd2:	60 e0       	ldi	r22, 0x00	; 0
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	0e 94 c3 03 	call	0x786	; 0x786 <sMO_setTimer>
	handle->iface.tableId = 1;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	a0 e0       	ldi	r26, 0x00	; 0
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	8a ab       	sts	0x5a, r24
     fe6:	9b ab       	sts	0x5b, r25
     fe8:	ac ab       	sts	0x5c, r26
     fea:	bd ab       	sts	0x5d, r27
	sMOIfaceLCD_init();
     fec:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_init>
	sMOIfaceKEYPAD_init();
     ff0:	0e 94 50 02 	call	0x4a0	; 0x4a0 <sMOIfaceKEYPAD_init>
	sMOIfaceRF_init();
     ff4:	0e 94 c9 03 	call	0x792	; 0x792 <sMOIfaceRF_init>
	sMOIfaceLCD_clear();
     ff8:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
	sMOIfaceLCD_writeString("Waitting...");
     ffc:	8c ef       	ldi	r24, 0xFC	; 252
     ffe:	91 e0       	ldi	r25, 0x01	; 1
    1000:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
	handle->stateConfVector[0] = SMO_main_region_on_r1_Init;
    1004:	18 83       	st	Y, r17
	handle->stateConfVectorPosition = 0;
    1006:	1b 82       	std	Y+3, r1	; 0x03
    1008:	1a 82       	std	Y+2, r1	; 0x02
}
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	1f 91       	pop	r17
    1010:	08 95       	ret

00001012 <sMO_exit>:

void sMO_exit(SMO* handle)
{
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	ec 01       	movw	r28, r24
	/* Default exit sequence for statechart SMO */
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of main region) at position 0... */
	switch(handle->stateConfVector[ 0 ]) {
    1018:	88 81       	ld	r24, Y
    101a:	83 30       	cpi	r24, 0x03	; 3
    101c:	69 f0       	breq	.+26     	; 0x1038 <sMO_exit+0x26>
    101e:	84 30       	cpi	r24, 0x04	; 4
    1020:	81 f0       	breq	.+32     	; 0x1042 <sMO_exit+0x30>
    1022:	81 30       	cpi	r24, 0x01	; 1
    1024:	91 f4       	brne	.+36     	; 0x104a <sMO_exit+0x38>
		case SMO_main_region_on_r1_Init : {
			/* Default exit sequence for state Init */
			handle->stateConfVector[0] = SMO_last_state;
    1026:	86 e2       	ldi	r24, 0x26	; 38
    1028:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    102a:	1b 82       	std	Y+3, r1	; 0x03
    102c:	1a 82       	std	Y+2, r1	; 0x02
			/* Exit action for state 'Init'. */
			sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) );		
    102e:	ce 01       	movw	r24, r28
    1030:	cc 96       	adiw	r24, 0x3c	; 60
    1032:	0e 94 c6 03 	call	0x78c	; 0x78c <sMO_unsetTimer>
			break;
    1036:	09 c0       	rjmp	.+18     	; 0x104a <sMO_exit+0x38>
		}
		case SMO_main_region_on_r1_Running_keypad_CheckKey : {
			/* Default exit sequence for state CheckKey */
			handle->stateConfVector[0] = SMO_last_state;
    1038:	86 e2       	ldi	r24, 0x26	; 38
    103a:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    103c:	1b 82       	std	Y+3, r1	; 0x03
    103e:	1a 82       	std	Y+2, r1	; 0x02
			break;
    1040:	04 c0       	rjmp	.+8      	; 0x104a <sMO_exit+0x38>
		}
		case SMO_main_region_on_r1_Running_keypad_CheckKeyDown : {
			/* Default exit sequence for state CheckKeyDown */
			handle->stateConfVector[0] = SMO_last_state;
    1042:	86 e2       	ldi	r24, 0x26	; 38
    1044:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    1046:	1b 82       	std	Y+3, r1	; 0x03
    1048:	1a 82       	std	Y+2, r1	; 0x02
			break;
		}
		default: break;
	}
	/* Handle exit of all possible states (of main region) at position 1... */
	switch(handle->stateConfVector[ 1 ]) {
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	05 97       	sbiw	r24, 0x05	; 5
    1050:	81 32       	cpi	r24, 0x21	; 33
    1052:	91 05       	cpc	r25, r1
    1054:	08 f0       	brcs	.+2      	; 0x1058 <sMO_exit+0x46>
    1056:	d8 c0       	rjmp	.+432    	; 0x1208 <__stack+0x109>
    1058:	8a 5b       	subi	r24, 0xBA	; 186
    105a:	9f 4f       	sbci	r25, 0xFF	; 255
    105c:	fc 01       	movw	r30, r24
    105e:	ee 0f       	add	r30, r30
    1060:	ff 1f       	adc	r31, r31
    1062:	05 90       	lpm	r0, Z+
    1064:	f4 91       	lpm	r31, Z
    1066:	e0 2d       	mov	r30, r0
    1068:	09 94       	ijmp
		case SMO_main_region_on_r1_Running_running_main_ShowMenu : {
			/* Default exit sequence for state ShowMenu */
			handle->stateConfVector[1] = SMO_last_state;
    106a:	86 e2       	ldi	r24, 0x26	; 38
    106c:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	9b 83       	std	Y+3, r25	; 0x03
    1074:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1076:	c8 c0       	rjmp	.+400    	; 0x1208 <__stack+0x109>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
			/* Default exit sequence for state ShowCode */
			handle->stateConfVector[1] = SMO_last_state;
    1078:	86 e2       	ldi	r24, 0x26	; 38
    107a:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	9b 83       	std	Y+3, r25	; 0x03
    1082:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1084:	c1 c0       	rjmp	.+386    	; 0x1208 <__stack+0x109>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
			/* Default exit sequence for state EnterCode */
			handle->stateConfVector[1] = SMO_last_state;
    1086:	86 e2       	ldi	r24, 0x26	; 38
    1088:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	9b 83       	std	Y+3, r25	; 0x03
    1090:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1092:	ba c0       	rjmp	.+372    	; 0x1208 <__stack+0x109>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
			/* Default exit sequence for state CheckKeyPress1 */
			handle->stateConfVector[1] = SMO_last_state;
    1094:	86 e2       	ldi	r24, 0x26	; 38
    1096:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	9b 83       	std	Y+3, r25	; 0x03
    109e:	8a 83       	std	Y+2, r24	; 0x02
			break;
    10a0:	b3 c0       	rjmp	.+358    	; 0x1208 <__stack+0x109>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
			/* Default exit sequence for state CheckCode0 */
			handle->stateConfVector[1] = SMO_last_state;
    10a2:	86 e2       	ldi	r24, 0x26	; 38
    10a4:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	9b 83       	std	Y+3, r25	; 0x03
    10ac:	8a 83       	std	Y+2, r24	; 0x02
			break;
    10ae:	ac c0       	rjmp	.+344    	; 0x1208 <__stack+0x109>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
			/* Default exit sequence for state ShowAmount */
			handle->stateConfVector[1] = SMO_last_state;
    10b0:	86 e2       	ldi	r24, 0x26	; 38
    10b2:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	9b 83       	std	Y+3, r25	; 0x03
    10ba:	8a 83       	std	Y+2, r24	; 0x02
			break;
    10bc:	a5 c0       	rjmp	.+330    	; 0x1208 <__stack+0x109>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
			/* Default exit sequence for state CheckKeyPress2 */
			handle->stateConfVector[1] = SMO_last_state;
    10be:	86 e2       	ldi	r24, 0x26	; 38
    10c0:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	9b 83       	std	Y+3, r25	; 0x03
    10c8:	8a 83       	std	Y+2, r24	; 0x02
			break;
    10ca:	9e c0       	rjmp	.+316    	; 0x1208 <__stack+0x109>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
			/* Default exit sequence for state EnterAmount */
			handle->stateConfVector[1] = SMO_last_state;
    10cc:	86 e2       	ldi	r24, 0x26	; 38
    10ce:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	9b 83       	std	Y+3, r25	; 0x03
    10d6:	8a 83       	std	Y+2, r24	; 0x02
			break;
    10d8:	97 c0       	rjmp	.+302    	; 0x1208 <__stack+0x109>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
			/* Default exit sequence for final state. */
			handle->stateConfVector[1] = SMO_last_state;
    10da:	86 e2       	ldi	r24, 0x26	; 38
    10dc:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	9b 83       	std	Y+3, r25	; 0x03
    10e4:	8a 83       	std	Y+2, r24	; 0x02
			break;
    10e6:	90 c0       	rjmp	.+288    	; 0x1208 <__stack+0x109>
		}
		case SMO_main_region_on_r1_Running_running_main_MenuA : {
			/* Default exit sequence for state MenuA */
			handle->stateConfVector[1] = SMO_last_state;
    10e8:	86 e2       	ldi	r24, 0x26	; 38
    10ea:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	9b 83       	std	Y+3, r25	; 0x03
    10f2:	8a 83       	std	Y+2, r24	; 0x02
			break;
    10f4:	89 c0       	rjmp	.+274    	; 0x1208 <__stack+0x109>
		}
		case SMO_main_region_on_r1_Running_running_main_CheckKeyPress : {
			/* Default exit sequence for state CheckKeyPress */
			handle->stateConfVector[1] = SMO_last_state;
    10f6:	86 e2       	ldi	r24, 0x26	; 38
    10f8:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	9b 83       	std	Y+3, r25	; 0x03
    1100:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1102:	82 c0       	rjmp	.+260    	; 0x1208 <__stack+0x109>
		}
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
			/* Default exit sequence for state Send */
			handle->stateConfVector[1] = SMO_last_state;
    1104:	86 e2       	ldi	r24, 0x26	; 38
    1106:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	9b 83       	std	Y+3, r25	; 0x03
    110e:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1110:	7b c0       	rjmp	.+246    	; 0x1208 <__stack+0x109>
		}
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
			/* Default exit sequence for state Check */
			handle->stateConfVector[1] = SMO_last_state;
    1112:	86 e2       	ldi	r24, 0x26	; 38
    1114:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	9b 83       	std	Y+3, r25	; 0x03
    111c:	8a 83       	std	Y+2, r24	; 0x02
			break;
    111e:	74 c0       	rjmp	.+232    	; 0x1208 <__stack+0x109>
		}
		case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
			/* Default exit sequence for final state. */
			handle->stateConfVector[1] = SMO_last_state;
    1120:	86 e2       	ldi	r24, 0x26	; 38
    1122:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	9b 83       	std	Y+3, r25	; 0x03
    112a:	8a 83       	std	Y+2, r24	; 0x02
			break;
    112c:	6d c0       	rjmp	.+218    	; 0x1208 <__stack+0x109>
		}
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail1 : {
			/* Default exit sequence for state SendFail1 */
			handle->stateConfVector[1] = SMO_last_state;
    112e:	86 e2       	ldi	r24, 0x26	; 38
    1130:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	9b 83       	std	Y+3, r25	; 0x03
    1138:	8a 83       	std	Y+2, r24	; 0x02
			/* Exit action for state 'SendFail1'. */
			sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail1_time_event_0_raised) );		
    113a:	ce 01       	movw	r24, r28
    113c:	cd 96       	adiw	r24, 0x3d	; 61
    113e:	0e 94 c6 03 	call	0x78c	; 0x78c <sMO_unsetTimer>
			break;
    1142:	62 c0       	rjmp	.+196    	; 0x1208 <__stack+0x109>
		}
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult : {
			/* Default exit sequence for state ResetResult */
			handle->stateConfVector[1] = SMO_last_state;
    1144:	86 e2       	ldi	r24, 0x26	; 38
    1146:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	9b 83       	std	Y+3, r25	; 0x03
    114e:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1150:	5b c0       	rjmp	.+182    	; 0x1208 <__stack+0x109>
		}
		case SMO_main_region_on_r1_Running_running_main_MenuB : {
			/* Default exit sequence for state MenuB */
			handle->stateConfVector[1] = SMO_last_state;
    1152:	86 e2       	ldi	r24, 0x26	; 38
    1154:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	9b 83       	std	Y+3, r25	; 0x03
    115c:	8a 83       	std	Y+2, r24	; 0x02
			break;
    115e:	54 c0       	rjmp	.+168    	; 0x1208 <__stack+0x109>
		}
		case SMO_main_region_on_r1_Running_running_main_MenuC : {
			/* Default exit sequence for state MenuC */
			handle->stateConfVector[1] = SMO_last_state;
    1160:	86 e2       	ldi	r24, 0x26	; 38
    1162:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	9b 83       	std	Y+3, r25	; 0x03
    116a:	8a 83       	std	Y+2, r24	; 0x02
			break;
    116c:	4d c0       	rjmp	.+154    	; 0x1208 <__stack+0x109>
		}
		case SMO_main_region_on_r1_Running_running_main_MenuD : {
			/* Default exit sequence for state MenuD */
			handle->stateConfVector[1] = SMO_last_state;
    116e:	86 e2       	ldi	r24, 0x26	; 38
    1170:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	9b 83       	std	Y+3, r25	; 0x03
    1178:	8a 83       	std	Y+2, r24	; 0x02
			break;
    117a:	46 c0       	rjmp	.+140    	; 0x1208 <__stack+0x109>
		}
		case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation : {
			/* Default exit sequence for state RequestConfirmation */
			handle->stateConfVector[1] = SMO_last_state;
    117c:	86 e2       	ldi	r24, 0x26	; 38
    117e:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	9b 83       	std	Y+3, r25	; 0x03
    1186:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1188:	3f c0       	rjmp	.+126    	; 0x1208 <__stack+0x109>
		}
		case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_Confirm : {
			/* Default exit sequence for state Confirm */
			handle->stateConfVector[1] = SMO_last_state;
    118a:	86 e2       	ldi	r24, 0x26	; 38
    118c:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	9b 83       	std	Y+3, r25	; 0x03
    1194:	8a 83       	std	Y+2, r24	; 0x02
			/* Exit action for state 'Confirm'. */
			sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Confirm_time_event_0_raised) );		
    1196:	ce 01       	movw	r24, r28
    1198:	ce 96       	adiw	r24, 0x3e	; 62
    119a:	0e 94 c6 03 	call	0x78c	; 0x78c <sMO_unsetTimer>
			break;
    119e:	34 c0       	rjmp	.+104    	; 0x1208 <__stack+0x109>
		}
		case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress : {
			/* Default exit sequence for state CheckKeyPress */
			handle->stateConfVector[1] = SMO_last_state;
    11a0:	86 e2       	ldi	r24, 0x26	; 38
    11a2:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	9b 83       	std	Y+3, r25	; 0x03
    11aa:	8a 83       	std	Y+2, r24	; 0x02
			break;
    11ac:	2d c0       	rjmp	.+90     	; 0x1208 <__stack+0x109>
		}
		case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_ : {
			/* Default exit sequence for final state. */
			handle->stateConfVector[1] = SMO_last_state;
    11ae:	86 e2       	ldi	r24, 0x26	; 38
    11b0:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	9b 83       	std	Y+3, r25	; 0x03
    11b8:	8a 83       	std	Y+2, r24	; 0x02
			break;
    11ba:	26 c0       	rjmp	.+76     	; 0x1208 <__stack+0x109>
		}
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Send : {
			/* Default exit sequence for state Send */
			handle->stateConfVector[1] = SMO_last_state;
    11bc:	86 e2       	ldi	r24, 0x26	; 38
    11be:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	9b 83       	std	Y+3, r25	; 0x03
    11c6:	8a 83       	std	Y+2, r24	; 0x02
			break;
    11c8:	1f c0       	rjmp	.+62     	; 0x1208 <__stack+0x109>
		}
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Check : {
			/* Default exit sequence for state Check */
			handle->stateConfVector[1] = SMO_last_state;
    11ca:	86 e2       	ldi	r24, 0x26	; 38
    11cc:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	9b 83       	std	Y+3, r25	; 0x03
    11d4:	8a 83       	std	Y+2, r24	; 0x02
			break;
    11d6:	18 c0       	rjmp	.+48     	; 0x1208 <__stack+0x109>
		}
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_ : {
			/* Default exit sequence for final state. */
			handle->stateConfVector[1] = SMO_last_state;
    11d8:	86 e2       	ldi	r24, 0x26	; 38
    11da:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	9b 83       	std	Y+3, r25	; 0x03
    11e2:	8a 83       	std	Y+2, r24	; 0x02
			break;
    11e4:	11 c0       	rjmp	.+34     	; 0x1208 <__stack+0x109>
		}
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2 : {
			/* Default exit sequence for state SendFail2 */
			handle->stateConfVector[1] = SMO_last_state;
    11e6:	86 e2       	ldi	r24, 0x26	; 38
    11e8:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	9b 83       	std	Y+3, r25	; 0x03
    11f0:	8a 83       	std	Y+2, r24	; 0x02
			/* Exit action for state 'SendFail2'. */
			sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail2_time_event_0_raised) );		
    11f2:	ce 01       	movw	r24, r28
    11f4:	cf 96       	adiw	r24, 0x3f	; 63
    11f6:	0e 94 c6 03 	call	0x78c	; 0x78c <sMO_unsetTimer>
			break;
    11fa:	06 c0       	rjmp	.+12     	; 0x1208 <__stack+0x109>
		}
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult : {
			/* Default exit sequence for state ResetResult */
			handle->stateConfVector[1] = SMO_last_state;
    11fc:	86 e2       	ldi	r24, 0x26	; 38
    11fe:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	9b 83       	std	Y+3, r25	; 0x03
    1206:	8a 83       	std	Y+2, r24	; 0x02
			break;
		}
		default: break;
	}
	sMO_exitaction(handle);
}
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	08 95       	ret

0000120e <sMO_runCycle>:
}

static void clearOutEvents(SMO* handle) {
}

void sMO_runCycle(SMO* handle) {
    120e:	2f 92       	push	r2
    1210:	3f 92       	push	r3
    1212:	4f 92       	push	r4
    1214:	5f 92       	push	r5
    1216:	6f 92       	push	r6
    1218:	7f 92       	push	r7
    121a:	8f 92       	push	r8
    121c:	9f 92       	push	r9
    121e:	af 92       	push	r10
    1220:	bf 92       	push	r11
    1222:	cf 92       	push	r12
    1224:	df 92       	push	r13
    1226:	ef 92       	push	r14
    1228:	ff 92       	push	r15
    122a:	0f 93       	push	r16
    122c:	1f 93       	push	r17
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	ec 01       	movw	r28, r24
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
    1234:	1b 82       	std	Y+3, r1	; 0x03
    1236:	1a 82       	std	Y+2, r1	; 0x02
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	90 e0       	ldi	r25, 0x00	; 0
		handle->stateConfVectorPosition = 1;
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state ResetResult */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    123c:	01 e0       	ldi	r16, 0x01	; 1
    123e:	10 e0       	ldi	r17, 0x00	; 0
			/* Default enter sequence for state null */
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_;
    1240:	0f 2e       	mov	r0, r31
    1242:	f3 e2       	ldi	r31, 0x23	; 35
    1244:	3f 2e       	mov	r3, r31
    1246:	f0 2d       	mov	r31, r0
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
			/* Default enter sequence for state CheckKeyPress */
			/* Entry action for state 'CheckKeyPress'. */
			handle->ifaceKEYPAD.lastkey = 0;
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress;
    1248:	0f 2e       	mov	r0, r31
    124a:	fe e1       	ldi	r31, 0x1E	; 30
    124c:	2f 2e       	mov	r2, r31
    124e:	f0 2d       	mov	r31, r0
					/* Default exit sequence for state CheckKeyPress */
					handle->stateConfVector[1] = SMO_last_state;
					handle->stateConfVectorPosition = 1;
					/* Default enter sequence for state MenuD */
					/* Entry action for state 'MenuD'. */
					handle->iface.menuId = 4;
    1250:	cc 24       	eor	r12, r12
    1252:	dd 24       	eor	r13, r13
    1254:	76 01       	movw	r14, r12
    1256:	68 94       	set
    1258:	c2 f8       	bld	r12, 2
				/* Default exit sequence for state CheckKeyPress */
				handle->stateConfVector[1] = SMO_last_state;
				handle->stateConfVectorPosition = 1;
				/* Default enter sequence for state MenuC */
				/* Entry action for state 'MenuC'. */
				handle->iface.menuId = 3;
    125a:	0f 2e       	mov	r0, r31
    125c:	f3 e0       	ldi	r31, 0x03	; 3
    125e:	4f 2e       	mov	r4, r31
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	5f 2e       	mov	r5, r31
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	6f 2e       	mov	r6, r31
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	7f 2e       	mov	r7, r31
    126c:	f0 2d       	mov	r31, r0
		/* Default exit sequence for state CheckKeyPress */
		handle->stateConfVector[1] = SMO_last_state;
		handle->stateConfVectorPosition = 1;
		/* Default enter sequence for state MenuA */
		/* Entry action for state 'MenuA'. */
		handle->iface.menuId = 1;
    126e:	88 24       	eor	r8, r8
    1270:	99 24       	eor	r9, r9
    1272:	54 01       	movw	r10, r8
    1274:	83 94       	inc	r8
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
			
		switch (handle->stateConfVector[handle->stateConfVectorPosition]) {
    1276:	8c 0f       	add	r24, r28
    1278:	9d 1f       	adc	r25, r29
    127a:	dc 01       	movw	r26, r24
    127c:	ec 91       	ld	r30, X
    127e:	8e 2f       	mov	r24, r30
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	fc 01       	movw	r30, r24
    1284:	31 97       	sbiw	r30, 0x01	; 1
    1286:	e5 32       	cpi	r30, 0x25	; 37
    1288:	f1 05       	cpc	r31, r1
    128a:	10 f0       	brcs	.+4      	; 0x1290 <sMO_runCycle+0x82>
    128c:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <sMO_runCycle+0x1c8c>
    1290:	e9 59       	subi	r30, 0x99	; 153
    1292:	ff 4f       	sbci	r31, 0xFF	; 255
    1294:	ee 0f       	add	r30, r30
    1296:	ff 1f       	adc	r31, r31
    1298:	05 90       	lpm	r0, Z+
    129a:	f4 91       	lpm	r31, Z
    129c:	e0 2d       	mov	r30, r0
    129e:	09 94       	ijmp
}

/* The reactions of state Init. */
static void sMO_react_main_region_on_r1_Init(SMO* handle) {
	/* The reactions of state Init. */
	if (handle->timeEvents.Init_time_event_0_raised) { 
    12a0:	8c ad       	sts	0x6c, r24
    12a2:	88 23       	and	r24, r24
    12a4:	11 f4       	brne	.+4      	; 0x12aa <sMO_runCycle+0x9c>
    12a6:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <sMO_runCycle+0x1c8c>
		/* Default exit sequence for state Init */
		handle->stateConfVector[0] = SMO_last_state;
    12aa:	86 e2       	ldi	r24, 0x26	; 38
    12ac:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    12ae:	1b 82       	std	Y+3, r1	; 0x03
    12b0:	1a 82       	std	Y+2, r1	; 0x02
		/* Exit action for state 'Init'. */
		sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) );		
    12b2:	ce 01       	movw	r24, r28
    12b4:	cc 96       	adiw	r24, 0x3c	; 60
    12b6:	0e 94 c6 03 	call	0x78c	; 0x78c <sMO_unsetTimer>
		/* Default enter sequence for state Running */
		/* Default enter sequence for region keypad */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    12ba:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceKEYPAD_checkpress>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	8c 83       	std	Y+4, r24	; 0x04
    12c4:	9d 83       	std	Y+5, r25	; 0x05
    12c6:	ae 83       	std	Y+6, r26	; 0x06
    12c8:	bf 83       	std	Y+7, r27	; 0x07
		handle->ifaceKEYPAD.key_down = bool_false;
    12ca:	1c 86       	std	Y+12, r1	; 0x0c
		handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKey;
    12cc:	83 e0       	ldi	r24, 0x03	; 3
    12ce:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    12d0:	1b 82       	std	Y+3, r1	; 0x03
    12d2:	1a 82       	std	Y+2, r1	; 0x02
		/* Default enter sequence for region running main */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    12d4:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    12d8:	88 e0       	ldi	r24, 0x08	; 8
    12da:	92 e0       	ldi	r25, 0x02	; 2
    12dc:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    12e0:	87 e1       	ldi	r24, 0x17	; 23
    12e2:	92 e0       	ldi	r25, 0x02	; 2
    12e4:	40 e0       	ldi	r20, 0x00	; 0
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	ba 01       	movw	r22, r20
    12ea:	01 e0       	ldi	r16, 0x01	; 1
    12ec:	10 e0       	ldi	r17, 0x00	; 0
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    12f6:	1e a6       	lds	r17, 0xbe
    12f8:	1f a6       	lds	r17, 0xbf
    12fa:	18 aa       	sts	0x98, r17
    12fc:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    12fe:	85 e0       	ldi	r24, 0x05	; 5
    1300:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	9b 83       	std	Y+3, r25	; 0x03
    1308:	8a 83       	std	Y+2, r24	; 0x02
    130a:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <sMO_runCycle+0x1cde>
}

/* The reactions of state CheckKey. */
static void sMO_react_main_region_on_r1_Running_keypad_CheckKey(SMO* handle) {
	/* The reactions of state CheckKey. */
	if (handle->ifaceKEYPAD.key != 0) { 
    130e:	8c 81       	ldd	r24, Y+4	; 0x04
    1310:	9d 81       	ldd	r25, Y+5	; 0x05
    1312:	ae 81       	ldd	r26, Y+6	; 0x06
    1314:	bf 81       	ldd	r27, Y+7	; 0x07
    1316:	00 97       	sbiw	r24, 0x00	; 0
    1318:	a1 05       	cpc	r26, r1
    131a:	b1 05       	cpc	r27, r1
    131c:	c1 f0       	breq	.+48     	; 0x134e <sMO_runCycle+0x140>
		/* Default exit sequence for state CheckKey */
		handle->stateConfVector[0] = SMO_last_state;
    131e:	26 e2       	ldi	r18, 0x26	; 38
    1320:	28 83       	st	Y, r18
		handle->stateConfVectorPosition = 0;
    1322:	1b 82       	std	Y+3, r1	; 0x03
    1324:	1a 82       	std	Y+2, r1	; 0x02
		handle->ifaceKEYPAD.lastkey = handle->ifaceKEYPAD.key;
    1326:	88 87       	std	Y+8, r24	; 0x08
    1328:	99 87       	std	Y+9, r25	; 0x09
    132a:	aa 87       	std	Y+10, r26	; 0x0a
    132c:	bb 87       	std	Y+11, r27	; 0x0b
		/* Default enter sequence for state CheckKeyDown */
		/* Entry action for state 'CheckKeyDown'. */
		handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    132e:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceKEYPAD_checkpress>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	8c 83       	std	Y+4, r24	; 0x04
    1338:	9d 83       	std	Y+5, r25	; 0x05
    133a:	ae 83       	std	Y+6, r26	; 0x06
    133c:	bf 83       	std	Y+7, r27	; 0x07
		handle->ifaceKEYPAD.key_down = bool_true;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	8c 87       	std	Y+12, r24	; 0x0c
		handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKeyDown;
    1342:	84 e0       	ldi	r24, 0x04	; 4
    1344:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    1346:	1b 82       	std	Y+3, r1	; 0x03
    1348:	1a 82       	std	Y+2, r1	; 0x02
    134a:	0c 94 6f 17 	jmp	0x2ede	; 0x2ede <sMO_runCycle+0x1cd0>
	}  else {
		if (handle->ifaceKEYPAD.key == 0) { 
			/* Default enter sequence for state CheckKey */
			/* Entry action for state 'CheckKey'. */
			handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    134e:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceKEYPAD_checkpress>
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22
    1356:	8c 83       	std	Y+4, r24	; 0x04
    1358:	9d 83       	std	Y+5, r25	; 0x05
    135a:	ae 83       	std	Y+6, r26	; 0x06
    135c:	bf 83       	std	Y+7, r27	; 0x07
			handle->ifaceKEYPAD.key_down = bool_false;
    135e:	1c 86       	std	Y+12, r1	; 0x0c
			handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKey;
    1360:	83 e0       	ldi	r24, 0x03	; 3
    1362:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    1364:	1b 82       	std	Y+3, r1	; 0x03
    1366:	1a 82       	std	Y+2, r1	; 0x02
    1368:	0c 94 6f 17 	jmp	0x2ede	; 0x2ede <sMO_runCycle+0x1cd0>
}

/* The reactions of state CheckKeyDown. */
static void sMO_react_main_region_on_r1_Running_keypad_CheckKeyDown(SMO* handle) {
	/* The reactions of state CheckKeyDown. */
	if (handle->ifaceKEYPAD.key == 0) { 
    136c:	8c 81       	ldd	r24, Y+4	; 0x04
    136e:	9d 81       	ldd	r25, Y+5	; 0x05
    1370:	ae 81       	ldd	r26, Y+6	; 0x06
    1372:	bf 81       	ldd	r27, Y+7	; 0x07
    1374:	00 97       	sbiw	r24, 0x00	; 0
    1376:	a1 05       	cpc	r26, r1
    1378:	b1 05       	cpc	r27, r1
    137a:	a9 f4       	brne	.+42     	; 0x13a6 <sMO_runCycle+0x198>
		/* Default exit sequence for state CheckKeyDown */
		handle->stateConfVector[0] = SMO_last_state;
    137c:	86 e2       	ldi	r24, 0x26	; 38
    137e:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    1380:	1b 82       	std	Y+3, r1	; 0x03
    1382:	1a 82       	std	Y+2, r1	; 0x02
		handle->ifaceKEYPAD.key_pressed_raised = bool_true;
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	8d 87       	std	Y+13, r24	; 0x0d
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    1388:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceKEYPAD_checkpress>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	8c 83       	std	Y+4, r24	; 0x04
    1392:	9d 83       	std	Y+5, r25	; 0x05
    1394:	ae 83       	std	Y+6, r26	; 0x06
    1396:	bf 83       	std	Y+7, r27	; 0x07
		handle->ifaceKEYPAD.key_down = bool_false;
    1398:	1c 86       	std	Y+12, r1	; 0x0c
		handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKey;
    139a:	83 e0       	ldi	r24, 0x03	; 3
    139c:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    139e:	1b 82       	std	Y+3, r1	; 0x03
    13a0:	1a 82       	std	Y+2, r1	; 0x02
    13a2:	0c 94 6f 17 	jmp	0x2ede	; 0x2ede <sMO_runCycle+0x1cd0>
	}  else {
		if (handle->ifaceKEYPAD.key != 0) { 
			/* Default enter sequence for state CheckKeyDown */
			/* Entry action for state 'CheckKeyDown'. */
			handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    13a6:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceKEYPAD_checkpress>
    13aa:	dc 01       	movw	r26, r24
    13ac:	cb 01       	movw	r24, r22
    13ae:	8c 83       	std	Y+4, r24	; 0x04
    13b0:	9d 83       	std	Y+5, r25	; 0x05
    13b2:	ae 83       	std	Y+6, r26	; 0x06
    13b4:	bf 83       	std	Y+7, r27	; 0x07
			handle->ifaceKEYPAD.key_down = bool_true;
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	8c 87       	std	Y+12, r24	; 0x0c
			handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKeyDown;
    13ba:	84 e0       	ldi	r24, 0x04	; 4
    13bc:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    13be:	1b 82       	std	Y+3, r1	; 0x03
    13c0:	1a 82       	std	Y+2, r1	; 0x02
    13c2:	0c 94 6f 17 	jmp	0x2ede	; 0x2ede <sMO_runCycle+0x1cd0>
static void sMO_react_main_region_on_r1_Running_running_main_ShowMenu(SMO* handle) {
	/* The reactions of state ShowMenu. */
	if (bool_true) { 
		/* Default exit sequence for state ShowMenu */
		handle->stateConfVector[1] = SMO_last_state;
		handle->stateConfVectorPosition = 1;
    13c6:	1b 83       	std	Y+3, r17	; 0x03
    13c8:	0a 83       	std	Y+2, r16	; 0x02
		/* Default enter sequence for state CheckKeyPress */
		/* Entry action for state 'CheckKeyPress'. */
		handle->ifaceKEYPAD.lastkey = 0;
    13ca:	18 86       	std	Y+8, r1	; 0x08
    13cc:	19 86       	std	Y+9, r1	; 0x09
    13ce:	1a 86       	std	Y+10, r1	; 0x0a
    13d0:	1b 86       	std	Y+11, r1	; 0x0b
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_CheckKeyPress;
    13d2:	81 e1       	ldi	r24, 0x11	; 17
    13d4:	89 83       	std	Y+1, r24	; 0x01
    13d6:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <sMO_runCycle+0x1c8c>
}

/* The reactions of state ShowCode. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode(SMO* handle) {
	/* The reactions of state ShowCode. */
	if (handle->iface.menuId == 0) { 
    13da:	8e a5       	lds	r24, 0x6e
    13dc:	9f a5       	lds	r25, 0x6f
    13de:	a8 a9       	sts	0x48, r26
    13e0:	b9 a9       	sts	0x49, r27
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	a1 05       	cpc	r26, r1
    13e6:	b1 05       	cpc	r27, r1
    13e8:	09 f0       	breq	.+2      	; 0x13ec <sMO_runCycle+0x1de>
    13ea:	6a c0       	rjmp	.+212    	; 0x14c0 <sMO_runCycle+0x2b2>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
    13ee:	8a 30       	cpi	r24, 0x0A	; 10
    13f0:	41 f1       	breq	.+80     	; 0x1442 <sMO_runCycle+0x234>
    13f2:	8b 30       	cpi	r24, 0x0B	; 11
    13f4:	40 f4       	brcc	.+16     	; 0x1406 <sMO_runCycle+0x1f8>
    13f6:	88 30       	cpi	r24, 0x08	; 8
    13f8:	b1 f0       	breq	.+44     	; 0x1426 <sMO_runCycle+0x218>
    13fa:	89 30       	cpi	r24, 0x09	; 9
    13fc:	d8 f4       	brcc	.+54     	; 0x1434 <sMO_runCycle+0x226>
    13fe:	87 30       	cpi	r24, 0x07	; 7
    1400:	09 f0       	breq	.+2      	; 0x1404 <sMO_runCycle+0x1f6>
    1402:	41 c0       	rjmp	.+130    	; 0x1486 <sMO_runCycle+0x278>
    1404:	09 c0       	rjmp	.+18     	; 0x1418 <sMO_runCycle+0x20a>
    1406:	8c 30       	cpi	r24, 0x0C	; 12
    1408:	51 f1       	breq	.+84     	; 0x145e <sMO_runCycle+0x250>
    140a:	8c 30       	cpi	r24, 0x0C	; 12
    140c:	08 f1       	brcs	.+66     	; 0x1450 <sMO_runCycle+0x242>
    140e:	8e 30       	cpi	r24, 0x0E	; 14
    1410:	69 f1       	breq	.+90     	; 0x146c <sMO_runCycle+0x25e>
    1412:	8f 30       	cpi	r24, 0x0F	; 15
    1414:	c1 f5       	brne	.+112    	; 0x1486 <sMO_runCycle+0x278>
    1416:	31 c0       	rjmp	.+98     	; 0x147a <sMO_runCycle+0x26c>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1418:	86 e2       	ldi	r24, 0x26	; 38
    141a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	9b 83       	std	Y+3, r25	; 0x03
    1422:	8a 83       	std	Y+2, r24	; 0x02
    1424:	30 c0       	rjmp	.+96     	; 0x1486 <sMO_runCycle+0x278>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1426:	86 e2       	ldi	r24, 0x26	; 38
    1428:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	9b 83       	std	Y+3, r25	; 0x03
    1430:	8a 83       	std	Y+2, r24	; 0x02
    1432:	29 c0       	rjmp	.+82     	; 0x1486 <sMO_runCycle+0x278>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1434:	86 e2       	ldi	r24, 0x26	; 38
    1436:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	9b 83       	std	Y+3, r25	; 0x03
    143e:	8a 83       	std	Y+2, r24	; 0x02
    1440:	22 c0       	rjmp	.+68     	; 0x1486 <sMO_runCycle+0x278>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1442:	86 e2       	ldi	r24, 0x26	; 38
    1444:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	9b 83       	std	Y+3, r25	; 0x03
    144c:	8a 83       	std	Y+2, r24	; 0x02
    144e:	1b c0       	rjmp	.+54     	; 0x1486 <sMO_runCycle+0x278>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1450:	86 e2       	ldi	r24, 0x26	; 38
    1452:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	9b 83       	std	Y+3, r25	; 0x03
    145a:	8a 83       	std	Y+2, r24	; 0x02
    145c:	14 c0       	rjmp	.+40     	; 0x1486 <sMO_runCycle+0x278>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    145e:	86 e2       	ldi	r24, 0x26	; 38
    1460:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	9b 83       	std	Y+3, r25	; 0x03
    1468:	8a 83       	std	Y+2, r24	; 0x02
    146a:	0d c0       	rjmp	.+26     	; 0x1486 <sMO_runCycle+0x278>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    146c:	86 e2       	ldi	r24, 0x26	; 38
    146e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	9b 83       	std	Y+3, r25	; 0x03
    1476:	8a 83       	std	Y+2, r24	; 0x02
    1478:	06 c0       	rjmp	.+12     	; 0x1486 <sMO_runCycle+0x278>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    147a:	86 e2       	ldi	r24, 0x26	; 38
    147c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	9b 83       	std	Y+3, r25	; 0x03
    1484:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1486:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    148a:	88 e0       	ldi	r24, 0x08	; 8
    148c:	92 e0       	ldi	r25, 0x02	; 2
    148e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    1492:	87 e1       	ldi	r24, 0x17	; 23
    1494:	92 e0       	ldi	r25, 0x02	; 2
    1496:	40 e0       	ldi	r20, 0x00	; 0
    1498:	50 e0       	ldi	r21, 0x00	; 0
    149a:	ba 01       	movw	r22, r20
    149c:	01 e0       	ldi	r16, 0x01	; 1
    149e:	10 e0       	ldi	r17, 0x00	; 0
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    14a8:	1e a6       	lds	r17, 0xbe
    14aa:	1f a6       	lds	r17, 0xbf
    14ac:	18 aa       	sts	0x98, r17
    14ae:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    14b0:	85 e0       	ldi	r24, 0x05	; 5
    14b2:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	9b 83       	std	Y+3, r25	; 0x03
    14ba:	8a 83       	std	Y+2, r24	; 0x02
    14bc:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <sMO_runCycle+0x1cde>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state ShowCode */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    14c0:	1b 83       	std	Y+3, r17	; 0x03
    14c2:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress1 */
			/* Entry action for state 'CheckKeyPress1'. */
			handle->ifaceKEYPAD.lastkey = 0;
    14c4:	18 86       	std	Y+8, r1	; 0x08
    14c6:	19 86       	std	Y+9, r1	; 0x09
    14c8:	1a 86       	std	Y+10, r1	; 0x0a
    14ca:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1;
    14cc:	89 e0       	ldi	r24, 0x09	; 9
    14ce:	89 83       	std	Y+1, r24	; 0x01
    14d0:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <sMO_runCycle+0x1c8c>
}

/* The reactions of state EnterCode. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode(SMO* handle) {
	/* The reactions of state EnterCode. */
	if (handle->iface.menuId == 0) { 
    14d4:	8e a5       	lds	r24, 0x6e
    14d6:	9f a5       	lds	r25, 0x6f
    14d8:	a8 a9       	sts	0x48, r26
    14da:	b9 a9       	sts	0x49, r27
    14dc:	00 97       	sbiw	r24, 0x00	; 0
    14de:	a1 05       	cpc	r26, r1
    14e0:	b1 05       	cpc	r27, r1
    14e2:	09 f0       	breq	.+2      	; 0x14e6 <sMO_runCycle+0x2d8>
    14e4:	6a c0       	rjmp	.+212    	; 0x15ba <sMO_runCycle+0x3ac>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	8a 30       	cpi	r24, 0x0A	; 10
    14ea:	41 f1       	breq	.+80     	; 0x153c <sMO_runCycle+0x32e>
    14ec:	8b 30       	cpi	r24, 0x0B	; 11
    14ee:	40 f4       	brcc	.+16     	; 0x1500 <sMO_runCycle+0x2f2>
    14f0:	88 30       	cpi	r24, 0x08	; 8
    14f2:	b1 f0       	breq	.+44     	; 0x1520 <sMO_runCycle+0x312>
    14f4:	89 30       	cpi	r24, 0x09	; 9
    14f6:	d8 f4       	brcc	.+54     	; 0x152e <sMO_runCycle+0x320>
    14f8:	87 30       	cpi	r24, 0x07	; 7
    14fa:	09 f0       	breq	.+2      	; 0x14fe <sMO_runCycle+0x2f0>
    14fc:	41 c0       	rjmp	.+130    	; 0x1580 <sMO_runCycle+0x372>
    14fe:	09 c0       	rjmp	.+18     	; 0x1512 <sMO_runCycle+0x304>
    1500:	8c 30       	cpi	r24, 0x0C	; 12
    1502:	51 f1       	breq	.+84     	; 0x1558 <sMO_runCycle+0x34a>
    1504:	8c 30       	cpi	r24, 0x0C	; 12
    1506:	08 f1       	brcs	.+66     	; 0x154a <sMO_runCycle+0x33c>
    1508:	8e 30       	cpi	r24, 0x0E	; 14
    150a:	69 f1       	breq	.+90     	; 0x1566 <sMO_runCycle+0x358>
    150c:	8f 30       	cpi	r24, 0x0F	; 15
    150e:	c1 f5       	brne	.+112    	; 0x1580 <sMO_runCycle+0x372>
    1510:	31 c0       	rjmp	.+98     	; 0x1574 <sMO_runCycle+0x366>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1512:	86 e2       	ldi	r24, 0x26	; 38
    1514:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	9b 83       	std	Y+3, r25	; 0x03
    151c:	8a 83       	std	Y+2, r24	; 0x02
    151e:	30 c0       	rjmp	.+96     	; 0x1580 <sMO_runCycle+0x372>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1520:	86 e2       	ldi	r24, 0x26	; 38
    1522:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	9b 83       	std	Y+3, r25	; 0x03
    152a:	8a 83       	std	Y+2, r24	; 0x02
    152c:	29 c0       	rjmp	.+82     	; 0x1580 <sMO_runCycle+0x372>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    152e:	86 e2       	ldi	r24, 0x26	; 38
    1530:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	9b 83       	std	Y+3, r25	; 0x03
    1538:	8a 83       	std	Y+2, r24	; 0x02
    153a:	22 c0       	rjmp	.+68     	; 0x1580 <sMO_runCycle+0x372>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    153c:	86 e2       	ldi	r24, 0x26	; 38
    153e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	9b 83       	std	Y+3, r25	; 0x03
    1546:	8a 83       	std	Y+2, r24	; 0x02
    1548:	1b c0       	rjmp	.+54     	; 0x1580 <sMO_runCycle+0x372>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    154a:	86 e2       	ldi	r24, 0x26	; 38
    154c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	9b 83       	std	Y+3, r25	; 0x03
    1554:	8a 83       	std	Y+2, r24	; 0x02
    1556:	14 c0       	rjmp	.+40     	; 0x1580 <sMO_runCycle+0x372>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1558:	86 e2       	ldi	r24, 0x26	; 38
    155a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	9b 83       	std	Y+3, r25	; 0x03
    1562:	8a 83       	std	Y+2, r24	; 0x02
    1564:	0d c0       	rjmp	.+26     	; 0x1580 <sMO_runCycle+0x372>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1566:	86 e2       	ldi	r24, 0x26	; 38
    1568:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	9b 83       	std	Y+3, r25	; 0x03
    1570:	8a 83       	std	Y+2, r24	; 0x02
    1572:	06 c0       	rjmp	.+12     	; 0x1580 <sMO_runCycle+0x372>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1574:	86 e2       	ldi	r24, 0x26	; 38
    1576:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	9b 83       	std	Y+3, r25	; 0x03
    157e:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1580:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    1584:	88 e0       	ldi	r24, 0x08	; 8
    1586:	92 e0       	ldi	r25, 0x02	; 2
    1588:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    158c:	87 e1       	ldi	r24, 0x17	; 23
    158e:	92 e0       	ldi	r25, 0x02	; 2
    1590:	40 e0       	ldi	r20, 0x00	; 0
    1592:	50 e0       	ldi	r21, 0x00	; 0
    1594:	ba 01       	movw	r22, r20
    1596:	01 e0       	ldi	r16, 0x01	; 1
    1598:	10 e0       	ldi	r17, 0x00	; 0
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    15a2:	1e a6       	lds	r17, 0xbe
    15a4:	1f a6       	lds	r17, 0xbf
    15a6:	18 aa       	sts	0x98, r17
    15a8:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    15aa:	85 e0       	ldi	r24, 0x05	; 5
    15ac:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	9b 83       	std	Y+3, r25	; 0x03
    15b4:	8a 83       	std	Y+2, r24	; 0x02
    15b6:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <sMO_runCycle+0x1cde>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state EnterCode */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    15ba:	1b 83       	std	Y+3, r17	; 0x03
    15bc:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress1 */
			/* Entry action for state 'CheckKeyPress1'. */
			handle->ifaceKEYPAD.lastkey = 0;
    15be:	18 86       	std	Y+8, r1	; 0x08
    15c0:	19 86       	std	Y+9, r1	; 0x09
    15c2:	1a 86       	std	Y+10, r1	; 0x0a
    15c4:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1;
    15c6:	89 e0       	ldi	r24, 0x09	; 9
    15c8:	89 83       	std	Y+1, r24	; 0x01
    15ca:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <sMO_runCycle+0x1c8c>
}

/* The reactions of state CheckKeyPress1. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1(SMO* handle) {
	/* The reactions of state CheckKeyPress1. */
	if (handle->iface.menuId == 0) { 
    15ce:	8e a5       	lds	r24, 0x6e
    15d0:	9f a5       	lds	r25, 0x6f
    15d2:	a8 a9       	sts	0x48, r26
    15d4:	b9 a9       	sts	0x49, r27
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	a1 05       	cpc	r26, r1
    15da:	b1 05       	cpc	r27, r1
    15dc:	09 f0       	breq	.+2      	; 0x15e0 <sMO_runCycle+0x3d2>
    15de:	6a c0       	rjmp	.+212    	; 0x16b4 <sMO_runCycle+0x4a6>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	8a 30       	cpi	r24, 0x0A	; 10
    15e4:	41 f1       	breq	.+80     	; 0x1636 <sMO_runCycle+0x428>
    15e6:	8b 30       	cpi	r24, 0x0B	; 11
    15e8:	40 f4       	brcc	.+16     	; 0x15fa <sMO_runCycle+0x3ec>
    15ea:	88 30       	cpi	r24, 0x08	; 8
    15ec:	b1 f0       	breq	.+44     	; 0x161a <sMO_runCycle+0x40c>
    15ee:	89 30       	cpi	r24, 0x09	; 9
    15f0:	d8 f4       	brcc	.+54     	; 0x1628 <sMO_runCycle+0x41a>
    15f2:	87 30       	cpi	r24, 0x07	; 7
    15f4:	09 f0       	breq	.+2      	; 0x15f8 <sMO_runCycle+0x3ea>
    15f6:	41 c0       	rjmp	.+130    	; 0x167a <sMO_runCycle+0x46c>
    15f8:	09 c0       	rjmp	.+18     	; 0x160c <sMO_runCycle+0x3fe>
    15fa:	8c 30       	cpi	r24, 0x0C	; 12
    15fc:	51 f1       	breq	.+84     	; 0x1652 <sMO_runCycle+0x444>
    15fe:	8c 30       	cpi	r24, 0x0C	; 12
    1600:	08 f1       	brcs	.+66     	; 0x1644 <sMO_runCycle+0x436>
    1602:	8e 30       	cpi	r24, 0x0E	; 14
    1604:	69 f1       	breq	.+90     	; 0x1660 <sMO_runCycle+0x452>
    1606:	8f 30       	cpi	r24, 0x0F	; 15
    1608:	c1 f5       	brne	.+112    	; 0x167a <sMO_runCycle+0x46c>
    160a:	31 c0       	rjmp	.+98     	; 0x166e <sMO_runCycle+0x460>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    160c:	86 e2       	ldi	r24, 0x26	; 38
    160e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	9b 83       	std	Y+3, r25	; 0x03
    1616:	8a 83       	std	Y+2, r24	; 0x02
    1618:	30 c0       	rjmp	.+96     	; 0x167a <sMO_runCycle+0x46c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    161a:	86 e2       	ldi	r24, 0x26	; 38
    161c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	9b 83       	std	Y+3, r25	; 0x03
    1624:	8a 83       	std	Y+2, r24	; 0x02
    1626:	29 c0       	rjmp	.+82     	; 0x167a <sMO_runCycle+0x46c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1628:	86 e2       	ldi	r24, 0x26	; 38
    162a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	9b 83       	std	Y+3, r25	; 0x03
    1632:	8a 83       	std	Y+2, r24	; 0x02
    1634:	22 c0       	rjmp	.+68     	; 0x167a <sMO_runCycle+0x46c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1636:	86 e2       	ldi	r24, 0x26	; 38
    1638:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	9b 83       	std	Y+3, r25	; 0x03
    1640:	8a 83       	std	Y+2, r24	; 0x02
    1642:	1b c0       	rjmp	.+54     	; 0x167a <sMO_runCycle+0x46c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1644:	86 e2       	ldi	r24, 0x26	; 38
    1646:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	9b 83       	std	Y+3, r25	; 0x03
    164e:	8a 83       	std	Y+2, r24	; 0x02
    1650:	14 c0       	rjmp	.+40     	; 0x167a <sMO_runCycle+0x46c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1652:	86 e2       	ldi	r24, 0x26	; 38
    1654:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	9b 83       	std	Y+3, r25	; 0x03
    165c:	8a 83       	std	Y+2, r24	; 0x02
    165e:	0d c0       	rjmp	.+26     	; 0x167a <sMO_runCycle+0x46c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1660:	86 e2       	ldi	r24, 0x26	; 38
    1662:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	9b 83       	std	Y+3, r25	; 0x03
    166a:	8a 83       	std	Y+2, r24	; 0x02
    166c:	06 c0       	rjmp	.+12     	; 0x167a <sMO_runCycle+0x46c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    166e:	86 e2       	ldi	r24, 0x26	; 38
    1670:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	9b 83       	std	Y+3, r25	; 0x03
    1678:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    167a:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    167e:	88 e0       	ldi	r24, 0x08	; 8
    1680:	92 e0       	ldi	r25, 0x02	; 2
    1682:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    1686:	87 e1       	ldi	r24, 0x17	; 23
    1688:	92 e0       	ldi	r25, 0x02	; 2
    168a:	40 e0       	ldi	r20, 0x00	; 0
    168c:	50 e0       	ldi	r21, 0x00	; 0
    168e:	ba 01       	movw	r22, r20
    1690:	01 e0       	ldi	r16, 0x01	; 1
    1692:	10 e0       	ldi	r17, 0x00	; 0
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    169c:	1e a6       	lds	r17, 0xbe
    169e:	1f a6       	lds	r17, 0xbf
    16a0:	18 aa       	sts	0x98, r17
    16a2:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    16a4:	85 e0       	ldi	r24, 0x05	; 5
    16a6:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	9b 83       	std	Y+3, r25	; 0x03
    16ae:	8a 83       	std	Y+2, r24	; 0x02
    16b0:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <sMO_runCycle+0x1cde>
	}  else {
		if (handle->ifaceDISH.pos < 3 && handle->ifaceKEYPAD.lastkey <= 9 && handle->ifaceKEYPAD.lastkey >= 1 && handle->ifaceKEYPAD.key_pressed_raised) { 
    16b4:	89 a5       	lds	r24, 0x69
    16b6:	9a a5       	lds	r25, 0x6a
    16b8:	ab a5       	lds	r26, 0x6b
    16ba:	bc a5       	lds	r27, 0x6c
    16bc:	83 30       	cpi	r24, 0x03	; 3
    16be:	91 05       	cpc	r25, r1
    16c0:	a1 05       	cpc	r26, r1
    16c2:	b1 05       	cpc	r27, r1
    16c4:	0c f0       	brlt	.+2      	; 0x16c8 <sMO_runCycle+0x4ba>
    16c6:	6a c0       	rjmp	.+212    	; 0x179c <sMO_runCycle+0x58e>
    16c8:	48 85       	ldd	r20, Y+8	; 0x08
    16ca:	59 85       	ldd	r21, Y+9	; 0x09
    16cc:	6a 85       	ldd	r22, Y+10	; 0x0a
    16ce:	7b 85       	ldd	r23, Y+11	; 0x0b
    16d0:	4a 30       	cpi	r20, 0x0A	; 10
    16d2:	51 05       	cpc	r21, r1
    16d4:	61 05       	cpc	r22, r1
    16d6:	71 05       	cpc	r23, r1
    16d8:	0c f0       	brlt	.+2      	; 0x16dc <sMO_runCycle+0x4ce>
    16da:	4e c0       	rjmp	.+156    	; 0x1778 <sMO_runCycle+0x56a>
    16dc:	14 16       	cp	r1, r20
    16de:	15 06       	cpc	r1, r21
    16e0:	16 06       	cpc	r1, r22
    16e2:	17 06       	cpc	r1, r23
    16e4:	0c f0       	brlt	.+2      	; 0x16e8 <sMO_runCycle+0x4da>
    16e6:	48 c0       	rjmp	.+144    	; 0x1778 <sMO_runCycle+0x56a>
    16e8:	2d 85       	ldd	r18, Y+13	; 0x0d
    16ea:	22 23       	and	r18, r18
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <sMO_runCycle+0x4e2>
    16ee:	44 c0       	rjmp	.+136    	; 0x1778 <sMO_runCycle+0x56a>
    16f0:	6a 01       	movw	r12, r20
    16f2:	7b 01       	movw	r14, r22
			/* Default exit sequence for state CheckKeyPress1 */
			handle->stateConfVector[1] = SMO_last_state;
    16f4:	26 e2       	ldi	r18, 0x26	; 38
    16f6:	29 83       	std	Y+1, r18	; 0x01
			handle->stateConfVectorPosition = 1;
    16f8:	88 24       	eor	r8, r8
    16fa:	99 24       	eor	r9, r9
    16fc:	83 94       	inc	r8
    16fe:	9b 82       	std	Y+3, r9	; 0x03
    1700:	8a 82       	std	Y+2, r8	; 0x02
			/* Default enter sequence for state EnterCode */
			/* Entry action for state 'EnterCode'. */
			sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    1702:	9c 01       	movw	r18, r24
    1704:	ad 01       	movw	r20, r26
    1706:	22 0f       	add	r18, r18
    1708:	33 1f       	adc	r19, r19
    170a:	44 1f       	adc	r20, r20
    170c:	55 1f       	adc	r21, r21
    170e:	c7 01       	movw	r24, r14
    1710:	b6 01       	movw	r22, r12
    1712:	ee 24       	eor	r14, r14
    1714:	ff 24       	eor	r15, r15
    1716:	87 01       	movw	r16, r14
    1718:	e3 94       	inc	r14
    171a:	aa 24       	eor	r10, r10
    171c:	bb 24       	eor	r11, r11
    171e:	65 01       	movw	r12, r10
    1720:	a3 94       	inc	r10
    1722:	0e 94 65 02 	call	0x4ca	; 0x4ca <sMOIfaceLCD_writeNumberXY>
			handle->ifaceDISH.pos += 1;
    1726:	89 a5       	lds	r24, 0x69
    1728:	9a a5       	lds	r25, 0x6a
    172a:	ab a5       	lds	r26, 0x6b
    172c:	bc a5       	lds	r27, 0x6c
    172e:	01 96       	adiw	r24, 0x01	; 1
    1730:	a1 1d       	adc	r26, r1
    1732:	b1 1d       	adc	r27, r1
    1734:	89 a7       	lds	r24, 0x79
    1736:	9a a7       	lds	r25, 0x7a
    1738:	ab a7       	lds	r26, 0x7b
    173a:	bc a7       	lds	r27, 0x7c
			handle->ifaceDISH.ID = handle->ifaceDISH.ID * 10 + handle->ifaceKEYPAD.lastkey;
    173c:	69 a1       	lds	r22, 0x49
    173e:	7a a1       	lds	r23, 0x4a
    1740:	8b a1       	lds	r24, 0x4b
    1742:	9c a1       	lds	r25, 0x4c
    1744:	2a e0       	ldi	r18, 0x0A	; 10
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	40 e0       	ldi	r20, 0x00	; 0
    174a:	50 e0       	ldi	r21, 0x00	; 0
    174c:	0e 94 92 1a 	call	0x3524	; 0x3524 <__mulsi3>
    1750:	ab 01       	movw	r20, r22
    1752:	bc 01       	movw	r22, r24
    1754:	88 85       	ldd	r24, Y+8	; 0x08
    1756:	99 85       	ldd	r25, Y+9	; 0x09
    1758:	aa 85       	ldd	r26, Y+10	; 0x0a
    175a:	bb 85       	ldd	r27, Y+11	; 0x0b
    175c:	84 0f       	add	r24, r20
    175e:	95 1f       	adc	r25, r21
    1760:	a6 1f       	adc	r26, r22
    1762:	b7 1f       	adc	r27, r23
    1764:	89 a3       	lds	r24, 0x59
    1766:	9a a3       	lds	r25, 0x5a
    1768:	ab a3       	lds	r26, 0x5b
    176a:	bc a3       	lds	r27, 0x5c
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode;
    176c:	88 e0       	ldi	r24, 0x08	; 8
    176e:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1770:	9b 82       	std	Y+3, r9	; 0x03
    1772:	8a 82       	std	Y+2, r8	; 0x02
    1774:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <sMO_runCycle+0x1cde>
		}  else {
			if (handle->ifaceDISH.pos < 3 && handle->ifaceKEYPAD.lastkey == 10 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1778:	4a 30       	cpi	r20, 0x0A	; 10
    177a:	51 05       	cpc	r21, r1
    177c:	61 05       	cpc	r22, r1
    177e:	71 05       	cpc	r23, r1
    1780:	69 f4       	brne	.+26     	; 0x179c <sMO_runCycle+0x58e>
    1782:	8d 85       	ldd	r24, Y+13	; 0x0d
    1784:	88 23       	and	r24, r24
    1786:	51 f0       	breq	.+20     	; 0x179c <sMO_runCycle+0x58e>
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
				handle->stateConfVectorPosition = 1;
    1788:	1b 83       	std	Y+3, r17	; 0x03
    178a:	0a 83       	std	Y+2, r16	; 0x02
				/* Default enter sequence for state CheckCode0 */
				/* Entry action for state 'CheckCode0'. */
				handle->ifaceKEYPAD.lastkey = 0;
    178c:	18 86       	std	Y+8, r1	; 0x08
    178e:	19 86       	std	Y+9, r1	; 0x09
    1790:	1a 86       	std	Y+10, r1	; 0x0a
    1792:	1b 86       	std	Y+11, r1	; 0x0b
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0;
    1794:	8a e0       	ldi	r24, 0x0A	; 10
    1796:	89 83       	std	Y+1, r24	; 0x01
    1798:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <sMO_runCycle+0x1c8c>
				handle->stateConfVectorPosition = 1;
			}  else {
				if (handle->ifaceKEYPAD.lastkey == 11 && handle->ifaceKEYPAD.key_pressed_raised) { 
    179c:	88 85       	ldd	r24, Y+8	; 0x08
    179e:	99 85       	ldd	r25, Y+9	; 0x09
    17a0:	aa 85       	ldd	r26, Y+10	; 0x0a
    17a2:	bb 85       	ldd	r27, Y+11	; 0x0b
    17a4:	8b 30       	cpi	r24, 0x0B	; 11
    17a6:	91 05       	cpc	r25, r1
    17a8:	a1 05       	cpc	r26, r1
    17aa:	b1 05       	cpc	r27, r1
    17ac:	49 f5       	brne	.+82     	; 0x1800 <sMO_runCycle+0x5f2>
    17ae:	2d 85       	ldd	r18, Y+13	; 0x0d
    17b0:	22 23       	and	r18, r18
    17b2:	31 f1       	breq	.+76     	; 0x1800 <sMO_runCycle+0x5f2>
					/* Default exit sequence for state CheckKeyPress1 */
					handle->stateConfVector[1] = SMO_last_state;
    17b4:	86 e2       	ldi	r24, 0x26	; 38
    17b6:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    17b8:	ee 24       	eor	r14, r14
    17ba:	ff 24       	eor	r15, r15
    17bc:	e3 94       	inc	r14
    17be:	fb 82       	std	Y+3, r15	; 0x03
    17c0:	ea 82       	std	Y+2, r14	; 0x02
					/* Default enter sequence for state ShowCode */
					/* Entry action for state 'ShowCode'. */
					sMOIfaceLCD_clear();
    17c2:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
					sMOIfaceLCD_writeString("Dish Code:");
    17c6:	85 e2       	ldi	r24, 0x25	; 37
    17c8:	92 e0       	ldi	r25, 0x02	; 2
    17ca:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
					sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    17ce:	80 e3       	ldi	r24, 0x30	; 48
    17d0:	92 e0       	ldi	r25, 0x02	; 2
    17d2:	40 e0       	ldi	r20, 0x00	; 0
    17d4:	50 e0       	ldi	r21, 0x00	; 0
    17d6:	ba 01       	movw	r22, r20
    17d8:	01 e0       	ldi	r16, 0x01	; 1
    17da:	10 e0       	ldi	r17, 0x00	; 0
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
					handle->ifaceDISH.pos = 0;
    17e4:	19 a6       	lds	r17, 0xb9
    17e6:	1a a6       	lds	r17, 0xba
    17e8:	1b a6       	lds	r17, 0xbb
    17ea:	1c a6       	lds	r17, 0xbc
					handle->ifaceDISH.ID = 0;
    17ec:	19 a2       	lds	r17, 0x99
    17ee:	1a a2       	lds	r17, 0x9a
    17f0:	1b a2       	lds	r17, 0x9b
    17f2:	1c a2       	lds	r17, 0x9c
					handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    17f4:	87 e0       	ldi	r24, 0x07	; 7
    17f6:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    17f8:	fb 82       	std	Y+3, r15	; 0x03
    17fa:	ea 82       	std	Y+2, r14	; 0x02
    17fc:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <sMO_runCycle+0x1cde>
				}  else {
					if (handle->ifaceKEYPAD.lastkey == 12 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1800:	8c 30       	cpi	r24, 0x0C	; 12
    1802:	91 05       	cpc	r25, r1
    1804:	a1 05       	cpc	r26, r1
    1806:	b1 05       	cpc	r27, r1
    1808:	49 f5       	brne	.+82     	; 0x185c <sMO_runCycle+0x64e>
    180a:	2d 85       	ldd	r18, Y+13	; 0x0d
    180c:	22 23       	and	r18, r18
    180e:	31 f1       	breq	.+76     	; 0x185c <sMO_runCycle+0x64e>
						/* Default exit sequence for state CheckKeyPress1 */
						handle->stateConfVector[1] = SMO_last_state;
    1810:	86 e2       	ldi	r24, 0x26	; 38
    1812:	89 83       	std	Y+1, r24	; 0x01
						handle->stateConfVectorPosition = 1;
    1814:	ee 24       	eor	r14, r14
    1816:	ff 24       	eor	r15, r15
    1818:	e3 94       	inc	r14
    181a:	fb 82       	std	Y+3, r15	; 0x03
    181c:	ea 82       	std	Y+2, r14	; 0x02
						/* Default enter sequence for state ShowAmount */
						/* Entry action for state 'ShowAmount'. */
						sMOIfaceLCD_clear();
    181e:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
						sMOIfaceLCD_writeString("Amount:");
    1822:	86 e3       	ldi	r24, 0x36	; 54
    1824:	92 e0       	ldi	r25, 0x02	; 2
    1826:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
						sMOIfaceLCD_writeStringXY("_ _", 0, 1);
    182a:	8e e3       	ldi	r24, 0x3E	; 62
    182c:	92 e0       	ldi	r25, 0x02	; 2
    182e:	40 e0       	ldi	r20, 0x00	; 0
    1830:	50 e0       	ldi	r21, 0x00	; 0
    1832:	ba 01       	movw	r22, r20
    1834:	01 e0       	ldi	r16, 0x01	; 1
    1836:	10 e0       	ldi	r17, 0x00	; 0
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
						handle->ifaceDISH.pos = 0;
    1840:	19 a6       	lds	r17, 0xb9
    1842:	1a a6       	lds	r17, 0xba
    1844:	1b a6       	lds	r17, 0xbb
    1846:	1c a6       	lds	r17, 0xbc
						handle->ifaceDISH.amount = 0;
    1848:	1d a2       	lds	r17, 0x9d
    184a:	1e a2       	lds	r17, 0x9e
    184c:	1f a2       	lds	r17, 0x9f
    184e:	18 a6       	lds	r17, 0xb8
						handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount;
    1850:	8b e0       	ldi	r24, 0x0B	; 11
    1852:	89 83       	std	Y+1, r24	; 0x01
						handle->stateConfVectorPosition = 1;
    1854:	fb 82       	std	Y+3, r15	; 0x03
    1856:	ea 82       	std	Y+2, r14	; 0x02
    1858:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <sMO_runCycle+0x1cde>
					}  else {
						if (handle->ifaceKEYPAD.lastkey == 16 && handle->ifaceKEYPAD.key_pressed_raised) { 
    185c:	80 31       	cpi	r24, 0x10	; 16
    185e:	91 05       	cpc	r25, r1
    1860:	a1 05       	cpc	r26, r1
    1862:	b1 05       	cpc	r27, r1
    1864:	11 f0       	breq	.+4      	; 0x186a <sMO_runCycle+0x65c>
    1866:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <sMO_runCycle+0x1c8c>
    186a:	8d 85       	ldd	r24, Y+13	; 0x0d
    186c:	88 23       	and	r24, r24
    186e:	11 f4       	brne	.+4      	; 0x1874 <sMO_runCycle+0x666>
    1870:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <sMO_runCycle+0x1c8c>
							/* Default exit sequence for state CheckKeyPress1 */
							handle->stateConfVector[1] = SMO_last_state;
							handle->stateConfVectorPosition = 1;
    1874:	1b 83       	std	Y+3, r17	; 0x03
    1876:	0a 83       	std	Y+2, r16	; 0x02
							handle->iface.menuId = 0;
    1878:	1e a6       	lds	r17, 0xbe
    187a:	1f a6       	lds	r17, 0xbf
    187c:	18 aa       	sts	0x98, r17
    187e:	19 aa       	sts	0x99, r17
							/* Default enter sequence for state null */
							handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_;
    1880:	8f e0       	ldi	r24, 0x0F	; 15
    1882:	89 83       	std	Y+1, r24	; 0x01
    1884:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <sMO_runCycle+0x1c8c>
}

/* The reactions of state CheckCode0. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0(SMO* handle) {
	/* The reactions of state CheckCode0. */
	if (handle->iface.menuId == 0) { 
    1888:	8e a5       	lds	r24, 0x6e
    188a:	9f a5       	lds	r25, 0x6f
    188c:	a8 a9       	sts	0x48, r26
    188e:	b9 a9       	sts	0x49, r27
    1890:	00 97       	sbiw	r24, 0x00	; 0
    1892:	a1 05       	cpc	r26, r1
    1894:	b1 05       	cpc	r27, r1
    1896:	09 f0       	breq	.+2      	; 0x189a <sMO_runCycle+0x68c>
    1898:	6a c0       	rjmp	.+212    	; 0x196e <sMO_runCycle+0x760>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	8a 30       	cpi	r24, 0x0A	; 10
    189e:	41 f1       	breq	.+80     	; 0x18f0 <sMO_runCycle+0x6e2>
    18a0:	8b 30       	cpi	r24, 0x0B	; 11
    18a2:	40 f4       	brcc	.+16     	; 0x18b4 <sMO_runCycle+0x6a6>
    18a4:	88 30       	cpi	r24, 0x08	; 8
    18a6:	b1 f0       	breq	.+44     	; 0x18d4 <sMO_runCycle+0x6c6>
    18a8:	89 30       	cpi	r24, 0x09	; 9
    18aa:	d8 f4       	brcc	.+54     	; 0x18e2 <sMO_runCycle+0x6d4>
    18ac:	87 30       	cpi	r24, 0x07	; 7
    18ae:	09 f0       	breq	.+2      	; 0x18b2 <sMO_runCycle+0x6a4>
    18b0:	41 c0       	rjmp	.+130    	; 0x1934 <sMO_runCycle+0x726>
    18b2:	09 c0       	rjmp	.+18     	; 0x18c6 <sMO_runCycle+0x6b8>
    18b4:	8c 30       	cpi	r24, 0x0C	; 12
    18b6:	51 f1       	breq	.+84     	; 0x190c <sMO_runCycle+0x6fe>
    18b8:	8c 30       	cpi	r24, 0x0C	; 12
    18ba:	08 f1       	brcs	.+66     	; 0x18fe <sMO_runCycle+0x6f0>
    18bc:	8e 30       	cpi	r24, 0x0E	; 14
    18be:	69 f1       	breq	.+90     	; 0x191a <sMO_runCycle+0x70c>
    18c0:	8f 30       	cpi	r24, 0x0F	; 15
    18c2:	c1 f5       	brne	.+112    	; 0x1934 <sMO_runCycle+0x726>
    18c4:	31 c0       	rjmp	.+98     	; 0x1928 <sMO_runCycle+0x71a>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    18c6:	86 e2       	ldi	r24, 0x26	; 38
    18c8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	9b 83       	std	Y+3, r25	; 0x03
    18d0:	8a 83       	std	Y+2, r24	; 0x02
    18d2:	30 c0       	rjmp	.+96     	; 0x1934 <sMO_runCycle+0x726>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    18d4:	86 e2       	ldi	r24, 0x26	; 38
    18d6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	9b 83       	std	Y+3, r25	; 0x03
    18de:	8a 83       	std	Y+2, r24	; 0x02
    18e0:	29 c0       	rjmp	.+82     	; 0x1934 <sMO_runCycle+0x726>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    18e2:	86 e2       	ldi	r24, 0x26	; 38
    18e4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	9b 83       	std	Y+3, r25	; 0x03
    18ec:	8a 83       	std	Y+2, r24	; 0x02
    18ee:	22 c0       	rjmp	.+68     	; 0x1934 <sMO_runCycle+0x726>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    18f0:	86 e2       	ldi	r24, 0x26	; 38
    18f2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	9b 83       	std	Y+3, r25	; 0x03
    18fa:	8a 83       	std	Y+2, r24	; 0x02
    18fc:	1b c0       	rjmp	.+54     	; 0x1934 <sMO_runCycle+0x726>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    18fe:	86 e2       	ldi	r24, 0x26	; 38
    1900:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	9b 83       	std	Y+3, r25	; 0x03
    1908:	8a 83       	std	Y+2, r24	; 0x02
    190a:	14 c0       	rjmp	.+40     	; 0x1934 <sMO_runCycle+0x726>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    190c:	86 e2       	ldi	r24, 0x26	; 38
    190e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	9b 83       	std	Y+3, r25	; 0x03
    1916:	8a 83       	std	Y+2, r24	; 0x02
    1918:	0d c0       	rjmp	.+26     	; 0x1934 <sMO_runCycle+0x726>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    191a:	86 e2       	ldi	r24, 0x26	; 38
    191c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	9b 83       	std	Y+3, r25	; 0x03
    1924:	8a 83       	std	Y+2, r24	; 0x02
    1926:	06 c0       	rjmp	.+12     	; 0x1934 <sMO_runCycle+0x726>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1928:	86 e2       	ldi	r24, 0x26	; 38
    192a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	9b 83       	std	Y+3, r25	; 0x03
    1932:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1934:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    1938:	88 e0       	ldi	r24, 0x08	; 8
    193a:	92 e0       	ldi	r25, 0x02	; 2
    193c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    1940:	87 e1       	ldi	r24, 0x17	; 23
    1942:	92 e0       	ldi	r25, 0x02	; 2
    1944:	40 e0       	ldi	r20, 0x00	; 0
    1946:	50 e0       	ldi	r21, 0x00	; 0
    1948:	ba 01       	movw	r22, r20
    194a:	01 e0       	ldi	r16, 0x01	; 1
    194c:	10 e0       	ldi	r17, 0x00	; 0
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1956:	1e a6       	lds	r17, 0xbe
    1958:	1f a6       	lds	r17, 0xbf
    195a:	18 aa       	sts	0x98, r17
    195c:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    195e:	85 e0       	ldi	r24, 0x05	; 5
    1960:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	9b 83       	std	Y+3, r25	; 0x03
    1968:	8a 83       	std	Y+2, r24	; 0x02
    196a:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <sMO_runCycle+0x1cde>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state CheckCode0 */
			handle->stateConfVector[1] = SMO_last_state;
    196e:	86 e2       	ldi	r24, 0x26	; 38
    1970:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1972:	88 24       	eor	r8, r8
    1974:	99 24       	eor	r9, r9
    1976:	83 94       	inc	r8
    1978:	9b 82       	std	Y+3, r9	; 0x03
    197a:	8a 82       	std	Y+2, r8	; 0x02
			/* Default enter sequence for state EnterCode */
			/* Entry action for state 'EnterCode'. */
			sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    197c:	c8 84       	ldd	r12, Y+8	; 0x08
    197e:	d9 84       	ldd	r13, Y+9	; 0x09
    1980:	ea 84       	ldd	r14, Y+10	; 0x0a
    1982:	fb 84       	ldd	r15, Y+11	; 0x0b
    1984:	89 a5       	lds	r24, 0x69
    1986:	9a a5       	lds	r25, 0x6a
    1988:	ab a5       	lds	r26, 0x6b
    198a:	bc a5       	lds	r27, 0x6c
    198c:	9c 01       	movw	r18, r24
    198e:	ad 01       	movw	r20, r26
    1990:	22 0f       	add	r18, r18
    1992:	33 1f       	adc	r19, r19
    1994:	44 1f       	adc	r20, r20
    1996:	55 1f       	adc	r21, r21
    1998:	c7 01       	movw	r24, r14
    199a:	b6 01       	movw	r22, r12
    199c:	ee 24       	eor	r14, r14
    199e:	ff 24       	eor	r15, r15
    19a0:	87 01       	movw	r16, r14
    19a2:	e3 94       	inc	r14
    19a4:	aa 24       	eor	r10, r10
    19a6:	bb 24       	eor	r11, r11
    19a8:	65 01       	movw	r12, r10
    19aa:	a3 94       	inc	r10
    19ac:	0e 94 65 02 	call	0x4ca	; 0x4ca <sMOIfaceLCD_writeNumberXY>
			handle->ifaceDISH.pos += 1;
    19b0:	89 a5       	lds	r24, 0x69
    19b2:	9a a5       	lds	r25, 0x6a
    19b4:	ab a5       	lds	r26, 0x6b
    19b6:	bc a5       	lds	r27, 0x6c
    19b8:	01 96       	adiw	r24, 0x01	; 1
    19ba:	a1 1d       	adc	r26, r1
    19bc:	b1 1d       	adc	r27, r1
    19be:	89 a7       	lds	r24, 0x79
    19c0:	9a a7       	lds	r25, 0x7a
    19c2:	ab a7       	lds	r26, 0x7b
    19c4:	bc a7       	lds	r27, 0x7c
			handle->ifaceDISH.ID = handle->ifaceDISH.ID * 10 + handle->ifaceKEYPAD.lastkey;
    19c6:	69 a1       	lds	r22, 0x49
    19c8:	7a a1       	lds	r23, 0x4a
    19ca:	8b a1       	lds	r24, 0x4b
    19cc:	9c a1       	lds	r25, 0x4c
    19ce:	2a e0       	ldi	r18, 0x0A	; 10
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	40 e0       	ldi	r20, 0x00	; 0
    19d4:	50 e0       	ldi	r21, 0x00	; 0
    19d6:	0e 94 92 1a 	call	0x3524	; 0x3524 <__mulsi3>
    19da:	ab 01       	movw	r20, r22
    19dc:	bc 01       	movw	r22, r24
    19de:	88 85       	ldd	r24, Y+8	; 0x08
    19e0:	99 85       	ldd	r25, Y+9	; 0x09
    19e2:	aa 85       	ldd	r26, Y+10	; 0x0a
    19e4:	bb 85       	ldd	r27, Y+11	; 0x0b
    19e6:	84 0f       	add	r24, r20
    19e8:	95 1f       	adc	r25, r21
    19ea:	a6 1f       	adc	r26, r22
    19ec:	b7 1f       	adc	r27, r23
    19ee:	89 a3       	lds	r24, 0x59
    19f0:	9a a3       	lds	r25, 0x5a
    19f2:	ab a3       	lds	r26, 0x5b
    19f4:	bc a3       	lds	r27, 0x5c
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode;
    19f6:	88 e0       	ldi	r24, 0x08	; 8
    19f8:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    19fa:	9b 82       	std	Y+3, r9	; 0x03
    19fc:	8a 82       	std	Y+2, r8	; 0x02
    19fe:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <sMO_runCycle+0x1cde>
}

/* The reactions of state ShowAmount. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount(SMO* handle) {
	/* The reactions of state ShowAmount. */
	if (handle->iface.menuId == 0) { 
    1a02:	8e a5       	lds	r24, 0x6e
    1a04:	9f a5       	lds	r25, 0x6f
    1a06:	a8 a9       	sts	0x48, r26
    1a08:	b9 a9       	sts	0x49, r27
    1a0a:	00 97       	sbiw	r24, 0x00	; 0
    1a0c:	a1 05       	cpc	r26, r1
    1a0e:	b1 05       	cpc	r27, r1
    1a10:	09 f0       	breq	.+2      	; 0x1a14 <sMO_runCycle+0x806>
    1a12:	6a c0       	rjmp	.+212    	; 0x1ae8 <sMO_runCycle+0x8da>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	8a 30       	cpi	r24, 0x0A	; 10
    1a18:	41 f1       	breq	.+80     	; 0x1a6a <sMO_runCycle+0x85c>
    1a1a:	8b 30       	cpi	r24, 0x0B	; 11
    1a1c:	40 f4       	brcc	.+16     	; 0x1a2e <sMO_runCycle+0x820>
    1a1e:	88 30       	cpi	r24, 0x08	; 8
    1a20:	b1 f0       	breq	.+44     	; 0x1a4e <sMO_runCycle+0x840>
    1a22:	89 30       	cpi	r24, 0x09	; 9
    1a24:	d8 f4       	brcc	.+54     	; 0x1a5c <sMO_runCycle+0x84e>
    1a26:	87 30       	cpi	r24, 0x07	; 7
    1a28:	09 f0       	breq	.+2      	; 0x1a2c <sMO_runCycle+0x81e>
    1a2a:	41 c0       	rjmp	.+130    	; 0x1aae <sMO_runCycle+0x8a0>
    1a2c:	09 c0       	rjmp	.+18     	; 0x1a40 <sMO_runCycle+0x832>
    1a2e:	8c 30       	cpi	r24, 0x0C	; 12
    1a30:	51 f1       	breq	.+84     	; 0x1a86 <sMO_runCycle+0x878>
    1a32:	8c 30       	cpi	r24, 0x0C	; 12
    1a34:	08 f1       	brcs	.+66     	; 0x1a78 <sMO_runCycle+0x86a>
    1a36:	8e 30       	cpi	r24, 0x0E	; 14
    1a38:	69 f1       	breq	.+90     	; 0x1a94 <sMO_runCycle+0x886>
    1a3a:	8f 30       	cpi	r24, 0x0F	; 15
    1a3c:	c1 f5       	brne	.+112    	; 0x1aae <sMO_runCycle+0x8a0>
    1a3e:	31 c0       	rjmp	.+98     	; 0x1aa2 <sMO_runCycle+0x894>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1a40:	86 e2       	ldi	r24, 0x26	; 38
    1a42:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	9b 83       	std	Y+3, r25	; 0x03
    1a4a:	8a 83       	std	Y+2, r24	; 0x02
    1a4c:	30 c0       	rjmp	.+96     	; 0x1aae <sMO_runCycle+0x8a0>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1a4e:	86 e2       	ldi	r24, 0x26	; 38
    1a50:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	9b 83       	std	Y+3, r25	; 0x03
    1a58:	8a 83       	std	Y+2, r24	; 0x02
    1a5a:	29 c0       	rjmp	.+82     	; 0x1aae <sMO_runCycle+0x8a0>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1a5c:	86 e2       	ldi	r24, 0x26	; 38
    1a5e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	9b 83       	std	Y+3, r25	; 0x03
    1a66:	8a 83       	std	Y+2, r24	; 0x02
    1a68:	22 c0       	rjmp	.+68     	; 0x1aae <sMO_runCycle+0x8a0>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1a6a:	86 e2       	ldi	r24, 0x26	; 38
    1a6c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	9b 83       	std	Y+3, r25	; 0x03
    1a74:	8a 83       	std	Y+2, r24	; 0x02
    1a76:	1b c0       	rjmp	.+54     	; 0x1aae <sMO_runCycle+0x8a0>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1a78:	86 e2       	ldi	r24, 0x26	; 38
    1a7a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	9b 83       	std	Y+3, r25	; 0x03
    1a82:	8a 83       	std	Y+2, r24	; 0x02
    1a84:	14 c0       	rjmp	.+40     	; 0x1aae <sMO_runCycle+0x8a0>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1a86:	86 e2       	ldi	r24, 0x26	; 38
    1a88:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	9b 83       	std	Y+3, r25	; 0x03
    1a90:	8a 83       	std	Y+2, r24	; 0x02
    1a92:	0d c0       	rjmp	.+26     	; 0x1aae <sMO_runCycle+0x8a0>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1a94:	86 e2       	ldi	r24, 0x26	; 38
    1a96:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	9b 83       	std	Y+3, r25	; 0x03
    1a9e:	8a 83       	std	Y+2, r24	; 0x02
    1aa0:	06 c0       	rjmp	.+12     	; 0x1aae <sMO_runCycle+0x8a0>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1aa2:	86 e2       	ldi	r24, 0x26	; 38
    1aa4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	9b 83       	std	Y+3, r25	; 0x03
    1aac:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1aae:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    1ab2:	88 e0       	ldi	r24, 0x08	; 8
    1ab4:	92 e0       	ldi	r25, 0x02	; 2
    1ab6:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    1aba:	87 e1       	ldi	r24, 0x17	; 23
    1abc:	92 e0       	ldi	r25, 0x02	; 2
    1abe:	40 e0       	ldi	r20, 0x00	; 0
    1ac0:	50 e0       	ldi	r21, 0x00	; 0
    1ac2:	ba 01       	movw	r22, r20
    1ac4:	01 e0       	ldi	r16, 0x01	; 1
    1ac6:	10 e0       	ldi	r17, 0x00	; 0
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1ad0:	1e a6       	lds	r17, 0xbe
    1ad2:	1f a6       	lds	r17, 0xbf
    1ad4:	18 aa       	sts	0x98, r17
    1ad6:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1ad8:	85 e0       	ldi	r24, 0x05	; 5
    1ada:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	9b 83       	std	Y+3, r25	; 0x03
    1ae2:	8a 83       	std	Y+2, r24	; 0x02
    1ae4:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <sMO_runCycle+0x1cde>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state ShowAmount */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    1ae8:	1b 83       	std	Y+3, r17	; 0x03
    1aea:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress2 */
			/* Entry action for state 'CheckKeyPress2'. */
			handle->ifaceKEYPAD.lastkey = 0;
    1aec:	18 86       	std	Y+8, r1	; 0x08
    1aee:	19 86       	std	Y+9, r1	; 0x09
    1af0:	1a 86       	std	Y+10, r1	; 0x0a
    1af2:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2;
    1af4:	8c e0       	ldi	r24, 0x0C	; 12
    1af6:	89 83       	std	Y+1, r24	; 0x01
    1af8:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <sMO_runCycle+0x1c8c>
}

/* The reactions of state CheckKeyPress2. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2(SMO* handle) {
	/* The reactions of state CheckKeyPress2. */
	if (handle->iface.menuId == 0) { 
    1afc:	8e a5       	lds	r24, 0x6e
    1afe:	9f a5       	lds	r25, 0x6f
    1b00:	a8 a9       	sts	0x48, r26
    1b02:	b9 a9       	sts	0x49, r27
    1b04:	00 97       	sbiw	r24, 0x00	; 0
    1b06:	a1 05       	cpc	r26, r1
    1b08:	b1 05       	cpc	r27, r1
    1b0a:	09 f0       	breq	.+2      	; 0x1b0e <sMO_runCycle+0x900>
    1b0c:	6a c0       	rjmp	.+212    	; 0x1be2 <sMO_runCycle+0x9d4>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	8a 30       	cpi	r24, 0x0A	; 10
    1b12:	41 f1       	breq	.+80     	; 0x1b64 <sMO_runCycle+0x956>
    1b14:	8b 30       	cpi	r24, 0x0B	; 11
    1b16:	40 f4       	brcc	.+16     	; 0x1b28 <sMO_runCycle+0x91a>
    1b18:	88 30       	cpi	r24, 0x08	; 8
    1b1a:	b1 f0       	breq	.+44     	; 0x1b48 <sMO_runCycle+0x93a>
    1b1c:	89 30       	cpi	r24, 0x09	; 9
    1b1e:	d8 f4       	brcc	.+54     	; 0x1b56 <sMO_runCycle+0x948>
    1b20:	87 30       	cpi	r24, 0x07	; 7
    1b22:	09 f0       	breq	.+2      	; 0x1b26 <sMO_runCycle+0x918>
    1b24:	41 c0       	rjmp	.+130    	; 0x1ba8 <sMO_runCycle+0x99a>
    1b26:	09 c0       	rjmp	.+18     	; 0x1b3a <sMO_runCycle+0x92c>
    1b28:	8c 30       	cpi	r24, 0x0C	; 12
    1b2a:	51 f1       	breq	.+84     	; 0x1b80 <sMO_runCycle+0x972>
    1b2c:	8c 30       	cpi	r24, 0x0C	; 12
    1b2e:	08 f1       	brcs	.+66     	; 0x1b72 <sMO_runCycle+0x964>
    1b30:	8e 30       	cpi	r24, 0x0E	; 14
    1b32:	69 f1       	breq	.+90     	; 0x1b8e <sMO_runCycle+0x980>
    1b34:	8f 30       	cpi	r24, 0x0F	; 15
    1b36:	c1 f5       	brne	.+112    	; 0x1ba8 <sMO_runCycle+0x99a>
    1b38:	31 c0       	rjmp	.+98     	; 0x1b9c <sMO_runCycle+0x98e>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1b3a:	86 e2       	ldi	r24, 0x26	; 38
    1b3c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	9b 83       	std	Y+3, r25	; 0x03
    1b44:	8a 83       	std	Y+2, r24	; 0x02
    1b46:	30 c0       	rjmp	.+96     	; 0x1ba8 <sMO_runCycle+0x99a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1b48:	86 e2       	ldi	r24, 0x26	; 38
    1b4a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	9b 83       	std	Y+3, r25	; 0x03
    1b52:	8a 83       	std	Y+2, r24	; 0x02
    1b54:	29 c0       	rjmp	.+82     	; 0x1ba8 <sMO_runCycle+0x99a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1b56:	86 e2       	ldi	r24, 0x26	; 38
    1b58:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	9b 83       	std	Y+3, r25	; 0x03
    1b60:	8a 83       	std	Y+2, r24	; 0x02
    1b62:	22 c0       	rjmp	.+68     	; 0x1ba8 <sMO_runCycle+0x99a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1b64:	86 e2       	ldi	r24, 0x26	; 38
    1b66:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	9b 83       	std	Y+3, r25	; 0x03
    1b6e:	8a 83       	std	Y+2, r24	; 0x02
    1b70:	1b c0       	rjmp	.+54     	; 0x1ba8 <sMO_runCycle+0x99a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1b72:	86 e2       	ldi	r24, 0x26	; 38
    1b74:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	9b 83       	std	Y+3, r25	; 0x03
    1b7c:	8a 83       	std	Y+2, r24	; 0x02
    1b7e:	14 c0       	rjmp	.+40     	; 0x1ba8 <sMO_runCycle+0x99a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1b80:	86 e2       	ldi	r24, 0x26	; 38
    1b82:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	9b 83       	std	Y+3, r25	; 0x03
    1b8a:	8a 83       	std	Y+2, r24	; 0x02
    1b8c:	0d c0       	rjmp	.+26     	; 0x1ba8 <sMO_runCycle+0x99a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1b8e:	86 e2       	ldi	r24, 0x26	; 38
    1b90:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	9b 83       	std	Y+3, r25	; 0x03
    1b98:	8a 83       	std	Y+2, r24	; 0x02
    1b9a:	06 c0       	rjmp	.+12     	; 0x1ba8 <sMO_runCycle+0x99a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1b9c:	86 e2       	ldi	r24, 0x26	; 38
    1b9e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	9b 83       	std	Y+3, r25	; 0x03
    1ba6:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1ba8:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    1bac:	88 e0       	ldi	r24, 0x08	; 8
    1bae:	92 e0       	ldi	r25, 0x02	; 2
    1bb0:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    1bb4:	87 e1       	ldi	r24, 0x17	; 23
    1bb6:	92 e0       	ldi	r25, 0x02	; 2
    1bb8:	40 e0       	ldi	r20, 0x00	; 0
    1bba:	50 e0       	ldi	r21, 0x00	; 0
    1bbc:	ba 01       	movw	r22, r20
    1bbe:	01 e0       	ldi	r16, 0x01	; 1
    1bc0:	10 e0       	ldi	r17, 0x00	; 0
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1bca:	1e a6       	lds	r17, 0xbe
    1bcc:	1f a6       	lds	r17, 0xbf
    1bce:	18 aa       	sts	0x98, r17
    1bd0:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1bd2:	85 e0       	ldi	r24, 0x05	; 5
    1bd4:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	9b 83       	std	Y+3, r25	; 0x03
    1bdc:	8a 83       	std	Y+2, r24	; 0x02
    1bde:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <sMO_runCycle+0x1cde>
	}  else {
		if (handle->ifaceDISH.pos < 2 && handle->ifaceKEYPAD.lastkey == 10 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1be2:	89 a5       	lds	r24, 0x69
    1be4:	9a a5       	lds	r25, 0x6a
    1be6:	ab a5       	lds	r26, 0x6b
    1be8:	bc a5       	lds	r27, 0x6c
    1bea:	82 30       	cpi	r24, 0x02	; 2
    1bec:	91 05       	cpc	r25, r1
    1bee:	a1 05       	cpc	r26, r1
    1bf0:	b1 05       	cpc	r27, r1
    1bf2:	0c f0       	brlt	.+2      	; 0x1bf6 <sMO_runCycle+0x9e8>
    1bf4:	6a c0       	rjmp	.+212    	; 0x1cca <sMO_runCycle+0xabc>
    1bf6:	48 85       	ldd	r20, Y+8	; 0x08
    1bf8:	59 85       	ldd	r21, Y+9	; 0x09
    1bfa:	6a 85       	ldd	r22, Y+10	; 0x0a
    1bfc:	7b 85       	ldd	r23, Y+11	; 0x0b
    1bfe:	4a 30       	cpi	r20, 0x0A	; 10
    1c00:	51 05       	cpc	r21, r1
    1c02:	61 05       	cpc	r22, r1
    1c04:	71 05       	cpc	r23, r1
    1c06:	69 f4       	brne	.+26     	; 0x1c22 <sMO_runCycle+0xa14>
    1c08:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c0a:	22 23       	and	r18, r18
    1c0c:	51 f0       	breq	.+20     	; 0x1c22 <sMO_runCycle+0xa14>
			/* Default exit sequence for state CheckKeyPress2 */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    1c0e:	1b 83       	std	Y+3, r17	; 0x03
    1c10:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckAmount0 */
			/* Entry action for state 'CheckAmount0'. */
			handle->ifaceKEYPAD.lastkey = 0;
    1c12:	18 86       	std	Y+8, r1	; 0x08
    1c14:	19 86       	std	Y+9, r1	; 0x09
    1c16:	1a 86       	std	Y+10, r1	; 0x0a
    1c18:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0;
    1c1a:	8d e0       	ldi	r24, 0x0D	; 13
    1c1c:	89 83       	std	Y+1, r24	; 0x01
    1c1e:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <sMO_runCycle+0x1c8c>
			handle->stateConfVectorPosition = 1;
		}  else {
			if (handle->ifaceDISH.pos < 2 && handle->ifaceKEYPAD.lastkey <= 9 && handle->ifaceKEYPAD.lastkey >= 1 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1c22:	4a 30       	cpi	r20, 0x0A	; 10
    1c24:	51 05       	cpc	r21, r1
    1c26:	61 05       	cpc	r22, r1
    1c28:	71 05       	cpc	r23, r1
    1c2a:	0c f0       	brlt	.+2      	; 0x1c2e <sMO_runCycle+0xa20>
    1c2c:	4e c0       	rjmp	.+156    	; 0x1cca <sMO_runCycle+0xabc>
    1c2e:	14 16       	cp	r1, r20
    1c30:	15 06       	cpc	r1, r21
    1c32:	16 06       	cpc	r1, r22
    1c34:	17 06       	cpc	r1, r23
    1c36:	0c f0       	brlt	.+2      	; 0x1c3a <sMO_runCycle+0xa2c>
    1c38:	48 c0       	rjmp	.+144    	; 0x1cca <sMO_runCycle+0xabc>
    1c3a:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c3c:	22 23       	and	r18, r18
    1c3e:	09 f4       	brne	.+2      	; 0x1c42 <sMO_runCycle+0xa34>
    1c40:	44 c0       	rjmp	.+136    	; 0x1cca <sMO_runCycle+0xabc>
    1c42:	6a 01       	movw	r12, r20
    1c44:	7b 01       	movw	r14, r22
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1c46:	26 e2       	ldi	r18, 0x26	; 38
    1c48:	29 83       	std	Y+1, r18	; 0x01
				handle->stateConfVectorPosition = 1;
    1c4a:	88 24       	eor	r8, r8
    1c4c:	99 24       	eor	r9, r9
    1c4e:	83 94       	inc	r8
    1c50:	9b 82       	std	Y+3, r9	; 0x03
    1c52:	8a 82       	std	Y+2, r8	; 0x02
				/* Default enter sequence for state EnterAmount */
				/* Entry action for state 'EnterAmount'. */
				sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    1c54:	9c 01       	movw	r18, r24
    1c56:	ad 01       	movw	r20, r26
    1c58:	22 0f       	add	r18, r18
    1c5a:	33 1f       	adc	r19, r19
    1c5c:	44 1f       	adc	r20, r20
    1c5e:	55 1f       	adc	r21, r21
    1c60:	c7 01       	movw	r24, r14
    1c62:	b6 01       	movw	r22, r12
    1c64:	ee 24       	eor	r14, r14
    1c66:	ff 24       	eor	r15, r15
    1c68:	87 01       	movw	r16, r14
    1c6a:	e3 94       	inc	r14
    1c6c:	aa 24       	eor	r10, r10
    1c6e:	bb 24       	eor	r11, r11
    1c70:	65 01       	movw	r12, r10
    1c72:	a3 94       	inc	r10
    1c74:	0e 94 65 02 	call	0x4ca	; 0x4ca <sMOIfaceLCD_writeNumberXY>
				handle->ifaceDISH.pos += 1;
    1c78:	89 a5       	lds	r24, 0x69
    1c7a:	9a a5       	lds	r25, 0x6a
    1c7c:	ab a5       	lds	r26, 0x6b
    1c7e:	bc a5       	lds	r27, 0x6c
    1c80:	01 96       	adiw	r24, 0x01	; 1
    1c82:	a1 1d       	adc	r26, r1
    1c84:	b1 1d       	adc	r27, r1
    1c86:	89 a7       	lds	r24, 0x79
    1c88:	9a a7       	lds	r25, 0x7a
    1c8a:	ab a7       	lds	r26, 0x7b
    1c8c:	bc a7       	lds	r27, 0x7c
				handle->ifaceDISH.amount = handle->ifaceDISH.amount * 10 + handle->ifaceKEYPAD.lastkey;
    1c8e:	6d a1       	lds	r22, 0x4d
    1c90:	7e a1       	lds	r23, 0x4e
    1c92:	8f a1       	lds	r24, 0x4f
    1c94:	98 a5       	lds	r25, 0x68
    1c96:	2a e0       	ldi	r18, 0x0A	; 10
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	40 e0       	ldi	r20, 0x00	; 0
    1c9c:	50 e0       	ldi	r21, 0x00	; 0
    1c9e:	0e 94 92 1a 	call	0x3524	; 0x3524 <__mulsi3>
    1ca2:	ab 01       	movw	r20, r22
    1ca4:	bc 01       	movw	r22, r24
    1ca6:	88 85       	ldd	r24, Y+8	; 0x08
    1ca8:	99 85       	ldd	r25, Y+9	; 0x09
    1caa:	aa 85       	ldd	r26, Y+10	; 0x0a
    1cac:	bb 85       	ldd	r27, Y+11	; 0x0b
    1cae:	84 0f       	add	r24, r20
    1cb0:	95 1f       	adc	r25, r21
    1cb2:	a6 1f       	adc	r26, r22
    1cb4:	b7 1f       	adc	r27, r23
    1cb6:	8d a3       	lds	r24, 0x5d
    1cb8:	9e a3       	lds	r25, 0x5e
    1cba:	af a3       	lds	r26, 0x5f
    1cbc:	b8 a7       	lds	r27, 0x78
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount;
    1cbe:	8e e0       	ldi	r24, 0x0E	; 14
    1cc0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1cc2:	9b 82       	std	Y+3, r9	; 0x03
    1cc4:	8a 82       	std	Y+2, r8	; 0x02
    1cc6:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <sMO_runCycle+0x1cde>
			}  else {
				if (handle->ifaceKEYPAD.lastkey == 11 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1cca:	88 85       	ldd	r24, Y+8	; 0x08
    1ccc:	99 85       	ldd	r25, Y+9	; 0x09
    1cce:	aa 85       	ldd	r26, Y+10	; 0x0a
    1cd0:	bb 85       	ldd	r27, Y+11	; 0x0b
    1cd2:	8b 30       	cpi	r24, 0x0B	; 11
    1cd4:	91 05       	cpc	r25, r1
    1cd6:	a1 05       	cpc	r26, r1
    1cd8:	b1 05       	cpc	r27, r1
    1cda:	49 f5       	brne	.+82     	; 0x1d2e <sMO_runCycle+0xb20>
    1cdc:	2d 85       	ldd	r18, Y+13	; 0x0d
    1cde:	22 23       	and	r18, r18
    1ce0:	31 f1       	breq	.+76     	; 0x1d2e <sMO_runCycle+0xb20>
					/* Default exit sequence for state CheckKeyPress2 */
					handle->stateConfVector[1] = SMO_last_state;
    1ce2:	86 e2       	ldi	r24, 0x26	; 38
    1ce4:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    1ce6:	ee 24       	eor	r14, r14
    1ce8:	ff 24       	eor	r15, r15
    1cea:	e3 94       	inc	r14
    1cec:	fb 82       	std	Y+3, r15	; 0x03
    1cee:	ea 82       	std	Y+2, r14	; 0x02
					/* Default enter sequence for state ShowAmount */
					/* Entry action for state 'ShowAmount'. */
					sMOIfaceLCD_clear();
    1cf0:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
					sMOIfaceLCD_writeString("Amount:");
    1cf4:	86 e3       	ldi	r24, 0x36	; 54
    1cf6:	92 e0       	ldi	r25, 0x02	; 2
    1cf8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
					sMOIfaceLCD_writeStringXY("_ _", 0, 1);
    1cfc:	8e e3       	ldi	r24, 0x3E	; 62
    1cfe:	92 e0       	ldi	r25, 0x02	; 2
    1d00:	40 e0       	ldi	r20, 0x00	; 0
    1d02:	50 e0       	ldi	r21, 0x00	; 0
    1d04:	ba 01       	movw	r22, r20
    1d06:	01 e0       	ldi	r16, 0x01	; 1
    1d08:	10 e0       	ldi	r17, 0x00	; 0
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
					handle->ifaceDISH.pos = 0;
    1d12:	19 a6       	lds	r17, 0xb9
    1d14:	1a a6       	lds	r17, 0xba
    1d16:	1b a6       	lds	r17, 0xbb
    1d18:	1c a6       	lds	r17, 0xbc
					handle->ifaceDISH.amount = 0;
    1d1a:	1d a2       	lds	r17, 0x9d
    1d1c:	1e a2       	lds	r17, 0x9e
    1d1e:	1f a2       	lds	r17, 0x9f
    1d20:	18 a6       	lds	r17, 0xb8
					handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount;
    1d22:	8b e0       	ldi	r24, 0x0B	; 11
    1d24:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    1d26:	fb 82       	std	Y+3, r15	; 0x03
    1d28:	ea 82       	std	Y+2, r14	; 0x02
    1d2a:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <sMO_runCycle+0x1cde>
				}  else {
					if (handle->ifaceKEYPAD.lastkey == 12 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1d2e:	8c 30       	cpi	r24, 0x0C	; 12
    1d30:	91 05       	cpc	r25, r1
    1d32:	a1 05       	cpc	r26, r1
    1d34:	b1 05       	cpc	r27, r1
    1d36:	09 f0       	breq	.+2      	; 0x1d3a <sMO_runCycle+0xb2c>
    1d38:	77 c0       	rjmp	.+238    	; 0x1e28 <sMO_runCycle+0xc1a>
    1d3a:	2d 85       	ldd	r18, Y+13	; 0x0d
    1d3c:	22 23       	and	r18, r18
    1d3e:	09 f4       	brne	.+2      	; 0x1d42 <sMO_runCycle+0xb34>
    1d40:	73 c0       	rjmp	.+230    	; 0x1e28 <sMO_runCycle+0xc1a>
						/* Default exit sequence for state EnterData */
						/* Default exit sequence for region r1 */
						/* Handle exit of all possible states (of r1) at position 1... */
						switch(handle->stateConfVector[ 1 ]) {
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	8a 30       	cpi	r24, 0x0A	; 10
    1d46:	41 f1       	breq	.+80     	; 0x1d98 <sMO_runCycle+0xb8a>
    1d48:	8b 30       	cpi	r24, 0x0B	; 11
    1d4a:	40 f4       	brcc	.+16     	; 0x1d5c <sMO_runCycle+0xb4e>
    1d4c:	88 30       	cpi	r24, 0x08	; 8
    1d4e:	b1 f0       	breq	.+44     	; 0x1d7c <sMO_runCycle+0xb6e>
    1d50:	89 30       	cpi	r24, 0x09	; 9
    1d52:	d8 f4       	brcc	.+54     	; 0x1d8a <sMO_runCycle+0xb7c>
    1d54:	87 30       	cpi	r24, 0x07	; 7
    1d56:	09 f0       	breq	.+2      	; 0x1d5a <sMO_runCycle+0xb4c>
    1d58:	41 c0       	rjmp	.+130    	; 0x1ddc <sMO_runCycle+0xbce>
    1d5a:	09 c0       	rjmp	.+18     	; 0x1d6e <sMO_runCycle+0xb60>
    1d5c:	8c 30       	cpi	r24, 0x0C	; 12
    1d5e:	51 f1       	breq	.+84     	; 0x1db4 <sMO_runCycle+0xba6>
    1d60:	8c 30       	cpi	r24, 0x0C	; 12
    1d62:	08 f1       	brcs	.+66     	; 0x1da6 <sMO_runCycle+0xb98>
    1d64:	8e 30       	cpi	r24, 0x0E	; 14
    1d66:	69 f1       	breq	.+90     	; 0x1dc2 <sMO_runCycle+0xbb4>
    1d68:	8f 30       	cpi	r24, 0x0F	; 15
    1d6a:	c1 f5       	brne	.+112    	; 0x1ddc <sMO_runCycle+0xbce>
    1d6c:	31 c0       	rjmp	.+98     	; 0x1dd0 <sMO_runCycle+0xbc2>
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
								/* Default exit sequence for state ShowCode */
								handle->stateConfVector[1] = SMO_last_state;
    1d6e:	86 e2       	ldi	r24, 0x26	; 38
    1d70:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	9b 83       	std	Y+3, r25	; 0x03
    1d78:	8a 83       	std	Y+2, r24	; 0x02
    1d7a:	30 c0       	rjmp	.+96     	; 0x1ddc <sMO_runCycle+0xbce>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
								/* Default exit sequence for state EnterCode */
								handle->stateConfVector[1] = SMO_last_state;
    1d7c:	86 e2       	ldi	r24, 0x26	; 38
    1d7e:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	9b 83       	std	Y+3, r25	; 0x03
    1d86:	8a 83       	std	Y+2, r24	; 0x02
    1d88:	29 c0       	rjmp	.+82     	; 0x1ddc <sMO_runCycle+0xbce>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
								/* Default exit sequence for state CheckKeyPress1 */
								handle->stateConfVector[1] = SMO_last_state;
    1d8a:	86 e2       	ldi	r24, 0x26	; 38
    1d8c:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	9b 83       	std	Y+3, r25	; 0x03
    1d94:	8a 83       	std	Y+2, r24	; 0x02
    1d96:	22 c0       	rjmp	.+68     	; 0x1ddc <sMO_runCycle+0xbce>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
								/* Default exit sequence for state CheckCode0 */
								handle->stateConfVector[1] = SMO_last_state;
    1d98:	86 e2       	ldi	r24, 0x26	; 38
    1d9a:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	9b 83       	std	Y+3, r25	; 0x03
    1da2:	8a 83       	std	Y+2, r24	; 0x02
    1da4:	1b c0       	rjmp	.+54     	; 0x1ddc <sMO_runCycle+0xbce>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
								/* Default exit sequence for state ShowAmount */
								handle->stateConfVector[1] = SMO_last_state;
    1da6:	86 e2       	ldi	r24, 0x26	; 38
    1da8:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	9b 83       	std	Y+3, r25	; 0x03
    1db0:	8a 83       	std	Y+2, r24	; 0x02
    1db2:	14 c0       	rjmp	.+40     	; 0x1ddc <sMO_runCycle+0xbce>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
								/* Default exit sequence for state CheckKeyPress2 */
								handle->stateConfVector[1] = SMO_last_state;
    1db4:	86 e2       	ldi	r24, 0x26	; 38
    1db6:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	9b 83       	std	Y+3, r25	; 0x03
    1dbe:	8a 83       	std	Y+2, r24	; 0x02
    1dc0:	0d c0       	rjmp	.+26     	; 0x1ddc <sMO_runCycle+0xbce>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
								/* Default exit sequence for state EnterAmount */
								handle->stateConfVector[1] = SMO_last_state;
    1dc2:	86 e2       	ldi	r24, 0x26	; 38
    1dc4:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	9b 83       	std	Y+3, r25	; 0x03
    1dcc:	8a 83       	std	Y+2, r24	; 0x02
    1dce:	06 c0       	rjmp	.+12     	; 0x1ddc <sMO_runCycle+0xbce>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
								/* Default exit sequence for final state. */
								handle->stateConfVector[1] = SMO_last_state;
    1dd0:	86 e2       	ldi	r24, 0x26	; 38
    1dd2:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	9b 83       	std	Y+3, r25	; 0x03
    1dda:	8a 83       	std	Y+2, r24	; 0x02
								break;
							}
							default: break;
						}
						handle->ifaceRF.result = bool_false;
    1ddc:	1f 8a       	std	Y+23, r1	; 0x17
						/* Default enter sequence for state SendData */
						/* Default enter sequence for region r1 */
						/* Default react sequence for initial entry  */
						/* Default enter sequence for state Send */
						/* Entry action for state 'Send'. */
						handle->ifaceRF.retry += 1;
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	a0 e0       	ldi	r26, 0x00	; 0
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	88 8f       	std	Y+24, r24	; 0x18
    1de8:	99 8f       	std	Y+25, r25	; 0x19
    1dea:	aa 8f       	std	Y+26, r26	; 0x1a
    1dec:	bb 8f       	std	Y+27, r27	; 0x1b
						handle->ifaceRF.result = sMOIfaceRF_sendData(handle->iface.menuId, handle->iface.tableId, handle->ifaceDISH.ID, handle->ifaceDISH.amount);
    1dee:	6e a5       	lds	r22, 0x6e
    1df0:	7f a5       	lds	r23, 0x6f
    1df2:	88 a9       	sts	0x48, r24
    1df4:	99 a9       	sts	0x49, r25
    1df6:	2a a9       	sts	0x4a, r18
    1df8:	3b a9       	sts	0x4b, r19
    1dfa:	4c a9       	sts	0x4c, r20
    1dfc:	5d a9       	sts	0x4d, r21
    1dfe:	e9 a0       	lds	r30, 0x89
    1e00:	fa a0       	lds	r31, 0x8a
    1e02:	0b a1       	lds	r16, 0x4b
    1e04:	1c a1       	lds	r17, 0x4c
    1e06:	8d a0       	lds	r24, 0x8d
    1e08:	9e a0       	lds	r25, 0x8e
    1e0a:	af a0       	lds	r26, 0x8f
    1e0c:	b8 a4       	lds	r27, 0xa8
    1e0e:	65 01       	movw	r12, r10
    1e10:	54 01       	movw	r10, r8
    1e12:	0e 94 4a 03 	call	0x694	; 0x694 <sMOIfaceRF_sendData>
    1e16:	8f 8b       	std	Y+23, r24	; 0x17
						handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_Send;
    1e18:	83 e1       	ldi	r24, 0x13	; 19
    1e1a:	89 83       	std	Y+1, r24	; 0x01
						handle->stateConfVectorPosition = 1;
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	9b 83       	std	Y+3, r25	; 0x03
    1e22:	8a 83       	std	Y+2, r24	; 0x02
    1e24:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <sMO_runCycle+0x1cde>
					}  else {
						if (handle->ifaceKEYPAD.lastkey == 16 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1e28:	80 31       	cpi	r24, 0x10	; 16
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	a1 05       	cpc	r26, r1
    1e2e:	b1 05       	cpc	r27, r1
    1e30:	11 f0       	breq	.+4      	; 0x1e36 <sMO_runCycle+0xc28>
    1e32:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <sMO_runCycle+0x1c8c>
    1e36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e38:	88 23       	and	r24, r24
    1e3a:	11 f4       	brne	.+4      	; 0x1e40 <sMO_runCycle+0xc32>
    1e3c:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <sMO_runCycle+0x1c8c>
							/* Default exit sequence for state CheckKeyPress2 */
							handle->stateConfVector[1] = SMO_last_state;
							handle->stateConfVectorPosition = 1;
    1e40:	1b 83       	std	Y+3, r17	; 0x03
    1e42:	0a 83       	std	Y+2, r16	; 0x02
							handle->iface.menuId = 0;
    1e44:	1e a6       	lds	r17, 0xbe
    1e46:	1f a6       	lds	r17, 0xbf
    1e48:	18 aa       	sts	0x98, r17
    1e4a:	19 aa       	sts	0x99, r17
							/* Default enter sequence for state null */
							handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_;
    1e4c:	8f e0       	ldi	r24, 0x0F	; 15
    1e4e:	89 83       	std	Y+1, r24	; 0x01
    1e50:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <sMO_runCycle+0x1c8c>
}

/* The reactions of state CheckAmount0. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0(SMO* handle) {
	/* The reactions of state CheckAmount0. */
	if (handle->iface.menuId == 0) { 
    1e54:	8e a5       	lds	r24, 0x6e
    1e56:	9f a5       	lds	r25, 0x6f
    1e58:	a8 a9       	sts	0x48, r26
    1e5a:	b9 a9       	sts	0x49, r27
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	a1 05       	cpc	r26, r1
    1e60:	b1 05       	cpc	r27, r1
    1e62:	09 f0       	breq	.+2      	; 0x1e66 <sMO_runCycle+0xc58>
    1e64:	69 c0       	rjmp	.+210    	; 0x1f38 <sMO_runCycle+0xd2a>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	8a 30       	cpi	r24, 0x0A	; 10
    1e6a:	41 f1       	breq	.+80     	; 0x1ebc <sMO_runCycle+0xcae>
    1e6c:	8b 30       	cpi	r24, 0x0B	; 11
    1e6e:	40 f4       	brcc	.+16     	; 0x1e80 <sMO_runCycle+0xc72>
    1e70:	88 30       	cpi	r24, 0x08	; 8
    1e72:	b1 f0       	breq	.+44     	; 0x1ea0 <sMO_runCycle+0xc92>
    1e74:	89 30       	cpi	r24, 0x09	; 9
    1e76:	d8 f4       	brcc	.+54     	; 0x1eae <sMO_runCycle+0xca0>
    1e78:	87 30       	cpi	r24, 0x07	; 7
    1e7a:	09 f0       	breq	.+2      	; 0x1e7e <sMO_runCycle+0xc70>
    1e7c:	41 c0       	rjmp	.+130    	; 0x1f00 <sMO_runCycle+0xcf2>
    1e7e:	09 c0       	rjmp	.+18     	; 0x1e92 <sMO_runCycle+0xc84>
    1e80:	8c 30       	cpi	r24, 0x0C	; 12
    1e82:	51 f1       	breq	.+84     	; 0x1ed8 <sMO_runCycle+0xcca>
    1e84:	8c 30       	cpi	r24, 0x0C	; 12
    1e86:	08 f1       	brcs	.+66     	; 0x1eca <sMO_runCycle+0xcbc>
    1e88:	8e 30       	cpi	r24, 0x0E	; 14
    1e8a:	69 f1       	breq	.+90     	; 0x1ee6 <sMO_runCycle+0xcd8>
    1e8c:	8f 30       	cpi	r24, 0x0F	; 15
    1e8e:	c1 f5       	brne	.+112    	; 0x1f00 <sMO_runCycle+0xcf2>
    1e90:	31 c0       	rjmp	.+98     	; 0x1ef4 <sMO_runCycle+0xce6>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1e92:	86 e2       	ldi	r24, 0x26	; 38
    1e94:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	9b 83       	std	Y+3, r25	; 0x03
    1e9c:	8a 83       	std	Y+2, r24	; 0x02
    1e9e:	30 c0       	rjmp	.+96     	; 0x1f00 <sMO_runCycle+0xcf2>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1ea0:	86 e2       	ldi	r24, 0x26	; 38
    1ea2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	9b 83       	std	Y+3, r25	; 0x03
    1eaa:	8a 83       	std	Y+2, r24	; 0x02
    1eac:	29 c0       	rjmp	.+82     	; 0x1f00 <sMO_runCycle+0xcf2>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1eae:	86 e2       	ldi	r24, 0x26	; 38
    1eb0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	9b 83       	std	Y+3, r25	; 0x03
    1eb8:	8a 83       	std	Y+2, r24	; 0x02
    1eba:	22 c0       	rjmp	.+68     	; 0x1f00 <sMO_runCycle+0xcf2>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1ebc:	86 e2       	ldi	r24, 0x26	; 38
    1ebe:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	9b 83       	std	Y+3, r25	; 0x03
    1ec6:	8a 83       	std	Y+2, r24	; 0x02
    1ec8:	1b c0       	rjmp	.+54     	; 0x1f00 <sMO_runCycle+0xcf2>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1eca:	86 e2       	ldi	r24, 0x26	; 38
    1ecc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	9b 83       	std	Y+3, r25	; 0x03
    1ed4:	8a 83       	std	Y+2, r24	; 0x02
    1ed6:	14 c0       	rjmp	.+40     	; 0x1f00 <sMO_runCycle+0xcf2>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1ed8:	86 e2       	ldi	r24, 0x26	; 38
    1eda:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	9b 83       	std	Y+3, r25	; 0x03
    1ee2:	8a 83       	std	Y+2, r24	; 0x02
    1ee4:	0d c0       	rjmp	.+26     	; 0x1f00 <sMO_runCycle+0xcf2>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1ee6:	86 e2       	ldi	r24, 0x26	; 38
    1ee8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	9b 83       	std	Y+3, r25	; 0x03
    1ef0:	8a 83       	std	Y+2, r24	; 0x02
    1ef2:	06 c0       	rjmp	.+12     	; 0x1f00 <sMO_runCycle+0xcf2>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1ef4:	86 e2       	ldi	r24, 0x26	; 38
    1ef6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	9b 83       	std	Y+3, r25	; 0x03
    1efe:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1f00:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    1f04:	88 e0       	ldi	r24, 0x08	; 8
    1f06:	92 e0       	ldi	r25, 0x02	; 2
    1f08:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    1f0c:	87 e1       	ldi	r24, 0x17	; 23
    1f0e:	92 e0       	ldi	r25, 0x02	; 2
    1f10:	40 e0       	ldi	r20, 0x00	; 0
    1f12:	50 e0       	ldi	r21, 0x00	; 0
    1f14:	ba 01       	movw	r22, r20
    1f16:	01 e0       	ldi	r16, 0x01	; 1
    1f18:	10 e0       	ldi	r17, 0x00	; 0
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1f22:	1e a6       	lds	r17, 0xbe
    1f24:	1f a6       	lds	r17, 0xbf
    1f26:	18 aa       	sts	0x98, r17
    1f28:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1f2a:	85 e0       	ldi	r24, 0x05	; 5
    1f2c:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	9b 83       	std	Y+3, r25	; 0x03
    1f34:	8a 83       	std	Y+2, r24	; 0x02
    1f36:	da c7       	rjmp	.+4020   	; 0x2eec <sMO_runCycle+0x1cde>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state CheckAmount0 */
			handle->stateConfVector[1] = SMO_last_state;
    1f38:	86 e2       	ldi	r24, 0x26	; 38
    1f3a:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1f3c:	88 24       	eor	r8, r8
    1f3e:	99 24       	eor	r9, r9
    1f40:	83 94       	inc	r8
    1f42:	9b 82       	std	Y+3, r9	; 0x03
    1f44:	8a 82       	std	Y+2, r8	; 0x02
			/* Default enter sequence for state EnterAmount */
			/* Entry action for state 'EnterAmount'. */
			sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    1f46:	c8 84       	ldd	r12, Y+8	; 0x08
    1f48:	d9 84       	ldd	r13, Y+9	; 0x09
    1f4a:	ea 84       	ldd	r14, Y+10	; 0x0a
    1f4c:	fb 84       	ldd	r15, Y+11	; 0x0b
    1f4e:	89 a5       	lds	r24, 0x69
    1f50:	9a a5       	lds	r25, 0x6a
    1f52:	ab a5       	lds	r26, 0x6b
    1f54:	bc a5       	lds	r27, 0x6c
    1f56:	9c 01       	movw	r18, r24
    1f58:	ad 01       	movw	r20, r26
    1f5a:	22 0f       	add	r18, r18
    1f5c:	33 1f       	adc	r19, r19
    1f5e:	44 1f       	adc	r20, r20
    1f60:	55 1f       	adc	r21, r21
    1f62:	c7 01       	movw	r24, r14
    1f64:	b6 01       	movw	r22, r12
    1f66:	ee 24       	eor	r14, r14
    1f68:	ff 24       	eor	r15, r15
    1f6a:	87 01       	movw	r16, r14
    1f6c:	e3 94       	inc	r14
    1f6e:	aa 24       	eor	r10, r10
    1f70:	bb 24       	eor	r11, r11
    1f72:	65 01       	movw	r12, r10
    1f74:	a3 94       	inc	r10
    1f76:	0e 94 65 02 	call	0x4ca	; 0x4ca <sMOIfaceLCD_writeNumberXY>
			handle->ifaceDISH.pos += 1;
    1f7a:	89 a5       	lds	r24, 0x69
    1f7c:	9a a5       	lds	r25, 0x6a
    1f7e:	ab a5       	lds	r26, 0x6b
    1f80:	bc a5       	lds	r27, 0x6c
    1f82:	01 96       	adiw	r24, 0x01	; 1
    1f84:	a1 1d       	adc	r26, r1
    1f86:	b1 1d       	adc	r27, r1
    1f88:	89 a7       	lds	r24, 0x79
    1f8a:	9a a7       	lds	r25, 0x7a
    1f8c:	ab a7       	lds	r26, 0x7b
    1f8e:	bc a7       	lds	r27, 0x7c
			handle->ifaceDISH.amount = handle->ifaceDISH.amount * 10 + handle->ifaceKEYPAD.lastkey;
    1f90:	6d a1       	lds	r22, 0x4d
    1f92:	7e a1       	lds	r23, 0x4e
    1f94:	8f a1       	lds	r24, 0x4f
    1f96:	98 a5       	lds	r25, 0x68
    1f98:	2a e0       	ldi	r18, 0x0A	; 10
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e0       	ldi	r20, 0x00	; 0
    1f9e:	50 e0       	ldi	r21, 0x00	; 0
    1fa0:	0e 94 92 1a 	call	0x3524	; 0x3524 <__mulsi3>
    1fa4:	ab 01       	movw	r20, r22
    1fa6:	bc 01       	movw	r22, r24
    1fa8:	88 85       	ldd	r24, Y+8	; 0x08
    1faa:	99 85       	ldd	r25, Y+9	; 0x09
    1fac:	aa 85       	ldd	r26, Y+10	; 0x0a
    1fae:	bb 85       	ldd	r27, Y+11	; 0x0b
    1fb0:	84 0f       	add	r24, r20
    1fb2:	95 1f       	adc	r25, r21
    1fb4:	a6 1f       	adc	r26, r22
    1fb6:	b7 1f       	adc	r27, r23
    1fb8:	8d a3       	lds	r24, 0x5d
    1fba:	9e a3       	lds	r25, 0x5e
    1fbc:	af a3       	lds	r26, 0x5f
    1fbe:	b8 a7       	lds	r27, 0x78
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount;
    1fc0:	8e e0       	ldi	r24, 0x0E	; 14
    1fc2:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1fc4:	9b 82       	std	Y+3, r9	; 0x03
    1fc6:	8a 82       	std	Y+2, r8	; 0x02
    1fc8:	91 c7       	rjmp	.+3874   	; 0x2eec <sMO_runCycle+0x1cde>
}

/* The reactions of state EnterAmount. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount(SMO* handle) {
	/* The reactions of state EnterAmount. */
	if (handle->iface.menuId == 0) { 
    1fca:	8e a5       	lds	r24, 0x6e
    1fcc:	9f a5       	lds	r25, 0x6f
    1fce:	a8 a9       	sts	0x48, r26
    1fd0:	b9 a9       	sts	0x49, r27
    1fd2:	00 97       	sbiw	r24, 0x00	; 0
    1fd4:	a1 05       	cpc	r26, r1
    1fd6:	b1 05       	cpc	r27, r1
    1fd8:	09 f0       	breq	.+2      	; 0x1fdc <sMO_runCycle+0xdce>
    1fda:	69 c0       	rjmp	.+210    	; 0x20ae <sMO_runCycle+0xea0>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	8a 30       	cpi	r24, 0x0A	; 10
    1fe0:	41 f1       	breq	.+80     	; 0x2032 <sMO_runCycle+0xe24>
    1fe2:	8b 30       	cpi	r24, 0x0B	; 11
    1fe4:	40 f4       	brcc	.+16     	; 0x1ff6 <sMO_runCycle+0xde8>
    1fe6:	88 30       	cpi	r24, 0x08	; 8
    1fe8:	b1 f0       	breq	.+44     	; 0x2016 <sMO_runCycle+0xe08>
    1fea:	89 30       	cpi	r24, 0x09	; 9
    1fec:	d8 f4       	brcc	.+54     	; 0x2024 <sMO_runCycle+0xe16>
    1fee:	87 30       	cpi	r24, 0x07	; 7
    1ff0:	09 f0       	breq	.+2      	; 0x1ff4 <sMO_runCycle+0xde6>
    1ff2:	41 c0       	rjmp	.+130    	; 0x2076 <sMO_runCycle+0xe68>
    1ff4:	09 c0       	rjmp	.+18     	; 0x2008 <sMO_runCycle+0xdfa>
    1ff6:	8c 30       	cpi	r24, 0x0C	; 12
    1ff8:	51 f1       	breq	.+84     	; 0x204e <sMO_runCycle+0xe40>
    1ffa:	8c 30       	cpi	r24, 0x0C	; 12
    1ffc:	08 f1       	brcs	.+66     	; 0x2040 <sMO_runCycle+0xe32>
    1ffe:	8e 30       	cpi	r24, 0x0E	; 14
    2000:	69 f1       	breq	.+90     	; 0x205c <sMO_runCycle+0xe4e>
    2002:	8f 30       	cpi	r24, 0x0F	; 15
    2004:	c1 f5       	brne	.+112    	; 0x2076 <sMO_runCycle+0xe68>
    2006:	31 c0       	rjmp	.+98     	; 0x206a <sMO_runCycle+0xe5c>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    2008:	86 e2       	ldi	r24, 0x26	; 38
    200a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	9b 83       	std	Y+3, r25	; 0x03
    2012:	8a 83       	std	Y+2, r24	; 0x02
    2014:	30 c0       	rjmp	.+96     	; 0x2076 <sMO_runCycle+0xe68>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    2016:	86 e2       	ldi	r24, 0x26	; 38
    2018:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	9b 83       	std	Y+3, r25	; 0x03
    2020:	8a 83       	std	Y+2, r24	; 0x02
    2022:	29 c0       	rjmp	.+82     	; 0x2076 <sMO_runCycle+0xe68>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    2024:	86 e2       	ldi	r24, 0x26	; 38
    2026:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	9b 83       	std	Y+3, r25	; 0x03
    202e:	8a 83       	std	Y+2, r24	; 0x02
    2030:	22 c0       	rjmp	.+68     	; 0x2076 <sMO_runCycle+0xe68>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    2032:	86 e2       	ldi	r24, 0x26	; 38
    2034:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	9b 83       	std	Y+3, r25	; 0x03
    203c:	8a 83       	std	Y+2, r24	; 0x02
    203e:	1b c0       	rjmp	.+54     	; 0x2076 <sMO_runCycle+0xe68>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    2040:	86 e2       	ldi	r24, 0x26	; 38
    2042:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9b 83       	std	Y+3, r25	; 0x03
    204a:	8a 83       	std	Y+2, r24	; 0x02
    204c:	14 c0       	rjmp	.+40     	; 0x2076 <sMO_runCycle+0xe68>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    204e:	86 e2       	ldi	r24, 0x26	; 38
    2050:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	9b 83       	std	Y+3, r25	; 0x03
    2058:	8a 83       	std	Y+2, r24	; 0x02
    205a:	0d c0       	rjmp	.+26     	; 0x2076 <sMO_runCycle+0xe68>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    205c:	86 e2       	ldi	r24, 0x26	; 38
    205e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	9b 83       	std	Y+3, r25	; 0x03
    2066:	8a 83       	std	Y+2, r24	; 0x02
    2068:	06 c0       	rjmp	.+12     	; 0x2076 <sMO_runCycle+0xe68>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    206a:	86 e2       	ldi	r24, 0x26	; 38
    206c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	9b 83       	std	Y+3, r25	; 0x03
    2074:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    2076:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    207a:	88 e0       	ldi	r24, 0x08	; 8
    207c:	92 e0       	ldi	r25, 0x02	; 2
    207e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    2082:	87 e1       	ldi	r24, 0x17	; 23
    2084:	92 e0       	ldi	r25, 0x02	; 2
    2086:	40 e0       	ldi	r20, 0x00	; 0
    2088:	50 e0       	ldi	r21, 0x00	; 0
    208a:	ba 01       	movw	r22, r20
    208c:	01 e0       	ldi	r16, 0x01	; 1
    208e:	10 e0       	ldi	r17, 0x00	; 0
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    2098:	1e a6       	lds	r17, 0xbe
    209a:	1f a6       	lds	r17, 0xbf
    209c:	18 aa       	sts	0x98, r17
    209e:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    20a0:	85 e0       	ldi	r24, 0x05	; 5
    20a2:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	9b 83       	std	Y+3, r25	; 0x03
    20aa:	8a 83       	std	Y+2, r24	; 0x02
    20ac:	1f c7       	rjmp	.+3646   	; 0x2eec <sMO_runCycle+0x1cde>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state EnterAmount */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    20ae:	1b 83       	std	Y+3, r17	; 0x03
    20b0:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress2 */
			/* Entry action for state 'CheckKeyPress2'. */
			handle->ifaceKEYPAD.lastkey = 0;
    20b2:	18 86       	std	Y+8, r1	; 0x08
    20b4:	19 86       	std	Y+9, r1	; 0x09
    20b6:	1a 86       	std	Y+10, r1	; 0x0a
    20b8:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2;
    20ba:	8c e0       	ldi	r24, 0x0C	; 12
    20bc:	89 83       	std	Y+1, r24	; 0x01
    20be:	ed c6       	rjmp	.+3546   	; 0x2e9a <sMO_runCycle+0x1c8c>
}

/* The reactions of state null. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1__final_0(SMO* handle) {
	/* The reactions of state null. */
	if (handle->iface.menuId == 0) { 
    20c0:	8e a5       	lds	r24, 0x6e
    20c2:	9f a5       	lds	r25, 0x6f
    20c4:	a8 a9       	sts	0x48, r26
    20c6:	b9 a9       	sts	0x49, r27
    20c8:	00 97       	sbiw	r24, 0x00	; 0
    20ca:	a1 05       	cpc	r26, r1
    20cc:	b1 05       	cpc	r27, r1
    20ce:	09 f0       	breq	.+2      	; 0x20d2 <sMO_runCycle+0xec4>
    20d0:	e4 c6       	rjmp	.+3528   	; 0x2e9a <sMO_runCycle+0x1c8c>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    20d2:	89 81       	ldd	r24, Y+1	; 0x01
    20d4:	8a 30       	cpi	r24, 0x0A	; 10
    20d6:	41 f1       	breq	.+80     	; 0x2128 <sMO_runCycle+0xf1a>
    20d8:	8b 30       	cpi	r24, 0x0B	; 11
    20da:	40 f4       	brcc	.+16     	; 0x20ec <sMO_runCycle+0xede>
    20dc:	88 30       	cpi	r24, 0x08	; 8
    20de:	b1 f0       	breq	.+44     	; 0x210c <sMO_runCycle+0xefe>
    20e0:	89 30       	cpi	r24, 0x09	; 9
    20e2:	d8 f4       	brcc	.+54     	; 0x211a <sMO_runCycle+0xf0c>
    20e4:	87 30       	cpi	r24, 0x07	; 7
    20e6:	09 f0       	breq	.+2      	; 0x20ea <sMO_runCycle+0xedc>
    20e8:	41 c0       	rjmp	.+130    	; 0x216c <sMO_runCycle+0xf5e>
    20ea:	09 c0       	rjmp	.+18     	; 0x20fe <sMO_runCycle+0xef0>
    20ec:	8c 30       	cpi	r24, 0x0C	; 12
    20ee:	51 f1       	breq	.+84     	; 0x2144 <sMO_runCycle+0xf36>
    20f0:	8c 30       	cpi	r24, 0x0C	; 12
    20f2:	08 f1       	brcs	.+66     	; 0x2136 <sMO_runCycle+0xf28>
    20f4:	8e 30       	cpi	r24, 0x0E	; 14
    20f6:	69 f1       	breq	.+90     	; 0x2152 <sMO_runCycle+0xf44>
    20f8:	8f 30       	cpi	r24, 0x0F	; 15
    20fa:	c1 f5       	brne	.+112    	; 0x216c <sMO_runCycle+0xf5e>
    20fc:	31 c0       	rjmp	.+98     	; 0x2160 <sMO_runCycle+0xf52>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    20fe:	86 e2       	ldi	r24, 0x26	; 38
    2100:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	9b 83       	std	Y+3, r25	; 0x03
    2108:	8a 83       	std	Y+2, r24	; 0x02
    210a:	30 c0       	rjmp	.+96     	; 0x216c <sMO_runCycle+0xf5e>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    210c:	86 e2       	ldi	r24, 0x26	; 38
    210e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	9b 83       	std	Y+3, r25	; 0x03
    2116:	8a 83       	std	Y+2, r24	; 0x02
    2118:	29 c0       	rjmp	.+82     	; 0x216c <sMO_runCycle+0xf5e>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    211a:	86 e2       	ldi	r24, 0x26	; 38
    211c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	9b 83       	std	Y+3, r25	; 0x03
    2124:	8a 83       	std	Y+2, r24	; 0x02
    2126:	22 c0       	rjmp	.+68     	; 0x216c <sMO_runCycle+0xf5e>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    2128:	86 e2       	ldi	r24, 0x26	; 38
    212a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	9b 83       	std	Y+3, r25	; 0x03
    2132:	8a 83       	std	Y+2, r24	; 0x02
    2134:	1b c0       	rjmp	.+54     	; 0x216c <sMO_runCycle+0xf5e>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    2136:	86 e2       	ldi	r24, 0x26	; 38
    2138:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	9b 83       	std	Y+3, r25	; 0x03
    2140:	8a 83       	std	Y+2, r24	; 0x02
    2142:	14 c0       	rjmp	.+40     	; 0x216c <sMO_runCycle+0xf5e>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    2144:	86 e2       	ldi	r24, 0x26	; 38
    2146:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	9b 83       	std	Y+3, r25	; 0x03
    214e:	8a 83       	std	Y+2, r24	; 0x02
    2150:	0d c0       	rjmp	.+26     	; 0x216c <sMO_runCycle+0xf5e>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    2152:	86 e2       	ldi	r24, 0x26	; 38
    2154:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	9b 83       	std	Y+3, r25	; 0x03
    215c:	8a 83       	std	Y+2, r24	; 0x02
    215e:	06 c0       	rjmp	.+12     	; 0x216c <sMO_runCycle+0xf5e>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2160:	86 e2       	ldi	r24, 0x26	; 38
    2162:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	9b 83       	std	Y+3, r25	; 0x03
    216a:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    216c:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    2170:	88 e0       	ldi	r24, 0x08	; 8
    2172:	92 e0       	ldi	r25, 0x02	; 2
    2174:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    2178:	87 e1       	ldi	r24, 0x17	; 23
    217a:	92 e0       	ldi	r25, 0x02	; 2
    217c:	40 e0       	ldi	r20, 0x00	; 0
    217e:	50 e0       	ldi	r21, 0x00	; 0
    2180:	ba 01       	movw	r22, r20
    2182:	01 e0       	ldi	r16, 0x01	; 1
    2184:	10 e0       	ldi	r17, 0x00	; 0
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    218e:	1e a6       	lds	r17, 0xbe
    2190:	1f a6       	lds	r17, 0xbf
    2192:	18 aa       	sts	0x98, r17
    2194:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    2196:	85 e0       	ldi	r24, 0x05	; 5
    2198:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	9b 83       	std	Y+3, r25	; 0x03
    21a0:	8a 83       	std	Y+2, r24	; 0x02
    21a2:	a4 c6       	rjmp	.+3400   	; 0x2eec <sMO_runCycle+0x1cde>
/* The reactions of state MenuA. */
static void sMO_react_main_region_on_r1_Running_running_main_MenuA(SMO* handle) {
	/* The reactions of state MenuA. */
	if (bool_true) { 
		/* Default exit sequence for state MenuA */
		handle->stateConfVector[1] = SMO_last_state;
    21a4:	86 e2       	ldi	r24, 0x26	; 38
    21a6:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    21a8:	ee 24       	eor	r14, r14
    21aa:	ff 24       	eor	r15, r15
    21ac:	e3 94       	inc	r14
    21ae:	fb 82       	std	Y+3, r15	; 0x03
    21b0:	ea 82       	std	Y+2, r14	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    21b2:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Dish Code:");
    21b6:	85 e2       	ldi	r24, 0x25	; 37
    21b8:	92 e0       	ldi	r25, 0x02	; 2
    21ba:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    21be:	80 e3       	ldi	r24, 0x30	; 48
    21c0:	92 e0       	ldi	r25, 0x02	; 2
    21c2:	40 e0       	ldi	r20, 0x00	; 0
    21c4:	50 e0       	ldi	r21, 0x00	; 0
    21c6:	ba 01       	movw	r22, r20
    21c8:	01 e0       	ldi	r16, 0x01	; 1
    21ca:	10 e0       	ldi	r17, 0x00	; 0
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    21d4:	19 a6       	lds	r17, 0xb9
    21d6:	1a a6       	lds	r17, 0xba
    21d8:	1b a6       	lds	r17, 0xbb
    21da:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    21dc:	19 a2       	lds	r17, 0x99
    21de:	1a a2       	lds	r17, 0x9a
    21e0:	1b a2       	lds	r17, 0x9b
    21e2:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    21e4:	87 e0       	ldi	r24, 0x07	; 7
    21e6:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    21e8:	fb 82       	std	Y+3, r15	; 0x03
    21ea:	ea 82       	std	Y+2, r14	; 0x02
    21ec:	7f c6       	rjmp	.+3326   	; 0x2eec <sMO_runCycle+0x1cde>
}

/* The reactions of state CheckKeyPress. */
static void sMO_react_main_region_on_r1_Running_running_main_CheckKeyPress(SMO* handle) {
	/* The reactions of state CheckKeyPress. */
	if (handle->ifaceKEYPAD.lastkey == 13 && handle->ifaceKEYPAD.key_pressed_raised) { 
    21ee:	88 85       	ldd	r24, Y+8	; 0x08
    21f0:	99 85       	ldd	r25, Y+9	; 0x09
    21f2:	aa 85       	ldd	r26, Y+10	; 0x0a
    21f4:	bb 85       	ldd	r27, Y+11	; 0x0b
    21f6:	8d 30       	cpi	r24, 0x0D	; 13
    21f8:	91 05       	cpc	r25, r1
    21fa:	a1 05       	cpc	r26, r1
    21fc:	b1 05       	cpc	r27, r1
    21fe:	61 f4       	brne	.+24     	; 0x2218 <sMO_runCycle+0x100a>
    2200:	2d 85       	ldd	r18, Y+13	; 0x0d
    2202:	22 23       	and	r18, r18
    2204:	49 f0       	breq	.+18     	; 0x2218 <sMO_runCycle+0x100a>
		/* Default exit sequence for state CheckKeyPress */
		handle->stateConfVector[1] = SMO_last_state;
		handle->stateConfVectorPosition = 1;
    2206:	1b 83       	std	Y+3, r17	; 0x03
    2208:	0a 83       	std	Y+2, r16	; 0x02
		/* Default enter sequence for state MenuA */
		/* Entry action for state 'MenuA'. */
		handle->iface.menuId = 1;
    220a:	8e a6       	lds	r24, 0xbe
    220c:	9f a6       	lds	r25, 0xbf
    220e:	a8 aa       	sts	0x98, r26
    2210:	b9 aa       	sts	0x99, r27
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_MenuA;
    2212:	b0 e1       	ldi	r27, 0x10	; 16
    2214:	b9 83       	std	Y+1, r27	; 0x01
    2216:	41 c6       	rjmp	.+3202   	; 0x2e9a <sMO_runCycle+0x1c8c>
		handle->stateConfVectorPosition = 1;
	}  else {
		if (handle->ifaceKEYPAD.lastkey == 14 && handle->ifaceKEYPAD.key_pressed_raised) { 
    2218:	8e 30       	cpi	r24, 0x0E	; 14
    221a:	91 05       	cpc	r25, r1
    221c:	a1 05       	cpc	r26, r1
    221e:	b1 05       	cpc	r27, r1
    2220:	81 f4       	brne	.+32     	; 0x2242 <sMO_runCycle+0x1034>
    2222:	2d 85       	ldd	r18, Y+13	; 0x0d
    2224:	22 23       	and	r18, r18
    2226:	69 f0       	breq	.+26     	; 0x2242 <sMO_runCycle+0x1034>
			/* Default exit sequence for state CheckKeyPress */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    2228:	1b 83       	std	Y+3, r17	; 0x03
    222a:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state MenuB */
			/* Entry action for state 'MenuB'. */
			handle->iface.menuId = 2;
    222c:	82 e0       	ldi	r24, 0x02	; 2
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	a0 e0       	ldi	r26, 0x00	; 0
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	8e a7       	lds	r24, 0x7e
    2236:	9f a7       	lds	r25, 0x7f
    2238:	a8 ab       	sts	0x58, r26
    223a:	b9 ab       	sts	0x59, r27
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_MenuB;
    223c:	98 e1       	ldi	r25, 0x18	; 24
    223e:	99 83       	std	Y+1, r25	; 0x01
    2240:	2c c6       	rjmp	.+3160   	; 0x2e9a <sMO_runCycle+0x1c8c>
			handle->stateConfVectorPosition = 1;
		}  else {
			if (handle->ifaceKEYPAD.lastkey == 15 && handle->ifaceKEYPAD.key_pressed_raised) { 
    2242:	8f 30       	cpi	r24, 0x0F	; 15
    2244:	91 05       	cpc	r25, r1
    2246:	a1 05       	cpc	r26, r1
    2248:	b1 05       	cpc	r27, r1
    224a:	61 f4       	brne	.+24     	; 0x2264 <sMO_runCycle+0x1056>
    224c:	2d 85       	ldd	r18, Y+13	; 0x0d
    224e:	22 23       	and	r18, r18
    2250:	49 f0       	breq	.+18     	; 0x2264 <sMO_runCycle+0x1056>
				/* Default exit sequence for state CheckKeyPress */
				handle->stateConfVector[1] = SMO_last_state;
				handle->stateConfVectorPosition = 1;
    2252:	1b 83       	std	Y+3, r17	; 0x03
    2254:	0a 83       	std	Y+2, r16	; 0x02
				/* Default enter sequence for state MenuC */
				/* Entry action for state 'MenuC'. */
				handle->iface.menuId = 3;
    2256:	4e a6       	lds	r20, 0xbe
    2258:	5f a6       	lds	r21, 0xbf
    225a:	68 aa       	sts	0x98, r22
    225c:	79 aa       	sts	0x99, r23
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_MenuC;
    225e:	a9 e1       	ldi	r26, 0x19	; 25
    2260:	a9 83       	std	Y+1, r26	; 0x01
    2262:	1b c6       	rjmp	.+3126   	; 0x2e9a <sMO_runCycle+0x1c8c>
				handle->stateConfVectorPosition = 1;
			}  else {
				if (handle->ifaceKEYPAD.lastkey == 16 && handle->ifaceKEYPAD.key_pressed_raised) { 
    2264:	80 31       	cpi	r24, 0x10	; 16
    2266:	91 05       	cpc	r25, r1
    2268:	a1 05       	cpc	r26, r1
    226a:	b1 05       	cpc	r27, r1
    226c:	09 f0       	breq	.+2      	; 0x2270 <sMO_runCycle+0x1062>
    226e:	15 c6       	rjmp	.+3114   	; 0x2e9a <sMO_runCycle+0x1c8c>
    2270:	8d 85       	ldd	r24, Y+13	; 0x0d
    2272:	88 23       	and	r24, r24
    2274:	09 f4       	brne	.+2      	; 0x2278 <sMO_runCycle+0x106a>
    2276:	11 c6       	rjmp	.+3106   	; 0x2e9a <sMO_runCycle+0x1c8c>
					/* Default exit sequence for state CheckKeyPress */
					handle->stateConfVector[1] = SMO_last_state;
					handle->stateConfVectorPosition = 1;
    2278:	1b 83       	std	Y+3, r17	; 0x03
    227a:	0a 83       	std	Y+2, r16	; 0x02
					/* Default enter sequence for state MenuD */
					/* Entry action for state 'MenuD'. */
					handle->iface.menuId = 4;
    227c:	ce a6       	lds	r28, 0xbe
    227e:	df a6       	lds	r29, 0xbf
    2280:	e8 aa       	sts	0x98, r30
    2282:	f9 aa       	sts	0x99, r31
					handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_MenuD;
    2284:	ba e1       	ldi	r27, 0x1A	; 26
    2286:	b9 83       	std	Y+1, r27	; 0x01
    2288:	08 c6       	rjmp	.+3088   	; 0x2e9a <sMO_runCycle+0x1c8c>
}

/* The reactions of state Send. */
static void sMO_react_main_region_on_r1_Running_running_main_SendData_r1_Send(SMO* handle) {
	/* The reactions of state Send. */
	if (handle->ifaceRF.result == bool_true) { 
    228a:	8f 89       	ldd	r24, Y+23	; 0x17
    228c:	88 23       	and	r24, r24
    228e:	09 f4       	brne	.+2      	; 0x2292 <sMO_runCycle+0x1084>
    2290:	55 c0       	rjmp	.+170    	; 0x233c <sMO_runCycle+0x112e>
		/* Default exit sequence for state SendData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	85 31       	cpi	r24, 0x15	; 21
    2296:	d1 f0       	breq	.+52     	; 0x22cc <sMO_runCycle+0x10be>
    2298:	86 31       	cpi	r24, 0x16	; 22
    229a:	28 f4       	brcc	.+10     	; 0x22a6 <sMO_runCycle+0x1098>
    229c:	83 31       	cpi	r24, 0x13	; 19
    229e:	41 f0       	breq	.+16     	; 0x22b0 <sMO_runCycle+0x10a2>
    22a0:	84 31       	cpi	r24, 0x14	; 20
    22a2:	61 f5       	brne	.+88     	; 0x22fc <sMO_runCycle+0x10ee>
    22a4:	0c c0       	rjmp	.+24     	; 0x22be <sMO_runCycle+0x10b0>
    22a6:	86 31       	cpi	r24, 0x16	; 22
    22a8:	c1 f0       	breq	.+48     	; 0x22da <sMO_runCycle+0x10cc>
    22aa:	87 31       	cpi	r24, 0x17	; 23
    22ac:	39 f5       	brne	.+78     	; 0x22fc <sMO_runCycle+0x10ee>
    22ae:	20 c0       	rjmp	.+64     	; 0x22f0 <sMO_runCycle+0x10e2>
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    22b0:	86 e2       	ldi	r24, 0x26	; 38
    22b2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	9b 83       	std	Y+3, r25	; 0x03
    22ba:	8a 83       	std	Y+2, r24	; 0x02
    22bc:	1f c0       	rjmp	.+62     	; 0x22fc <sMO_runCycle+0x10ee>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    22be:	86 e2       	ldi	r24, 0x26	; 38
    22c0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	9b 83       	std	Y+3, r25	; 0x03
    22c8:	8a 83       	std	Y+2, r24	; 0x02
    22ca:	18 c0       	rjmp	.+48     	; 0x22fc <sMO_runCycle+0x10ee>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    22cc:	86 e2       	ldi	r24, 0x26	; 38
    22ce:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	9b 83       	std	Y+3, r25	; 0x03
    22d6:	8a 83       	std	Y+2, r24	; 0x02
    22d8:	11 c0       	rjmp	.+34     	; 0x22fc <sMO_runCycle+0x10ee>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail1 : {
				/* Default exit sequence for state SendFail1 */
				handle->stateConfVector[1] = SMO_last_state;
    22da:	86 e2       	ldi	r24, 0x26	; 38
    22dc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	9b 83       	std	Y+3, r25	; 0x03
    22e4:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail1'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail1_time_event_0_raised) );		
    22e6:	ce 01       	movw	r24, r28
    22e8:	cd 96       	adiw	r24, 0x3d	; 61
    22ea:	0e 94 c6 03 	call	0x78c	; 0x78c <sMO_unsetTimer>
    22ee:	06 c0       	rjmp	.+12     	; 0x22fc <sMO_runCycle+0x10ee>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    22f0:	86 e2       	ldi	r24, 0x26	; 38
    22f2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	9b 83       	std	Y+3, r25	; 0x03
    22fa:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    22fc:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Dish Code:");
    2300:	85 e2       	ldi	r24, 0x25	; 37
    2302:	92 e0       	ldi	r25, 0x02	; 2
    2304:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    2308:	80 e3       	ldi	r24, 0x30	; 48
    230a:	92 e0       	ldi	r25, 0x02	; 2
    230c:	40 e0       	ldi	r20, 0x00	; 0
    230e:	50 e0       	ldi	r21, 0x00	; 0
    2310:	ba 01       	movw	r22, r20
    2312:	01 e0       	ldi	r16, 0x01	; 1
    2314:	10 e0       	ldi	r17, 0x00	; 0
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    231e:	19 a6       	lds	r17, 0xb9
    2320:	1a a6       	lds	r17, 0xba
    2322:	1b a6       	lds	r17, 0xbb
    2324:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    2326:	19 a2       	lds	r17, 0x99
    2328:	1a a2       	lds	r17, 0x9a
    232a:	1b a2       	lds	r17, 0x9b
    232c:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    232e:	87 e0       	ldi	r24, 0x07	; 7
    2330:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	9b 83       	std	Y+3, r25	; 0x03
    2338:	8a 83       	std	Y+2, r24	; 0x02
    233a:	d8 c5       	rjmp	.+2992   	; 0x2eec <sMO_runCycle+0x1cde>
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_Check;
			handle->stateConfVectorPosition = 1;
		}  else {
			if (handle->ifaceRF.result == bool_false) { 
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    233c:	86 e2       	ldi	r24, 0x26	; 38
    233e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2340:	01 e0       	ldi	r16, 0x01	; 1
    2342:	10 e0       	ldi	r17, 0x00	; 0
    2344:	1b 83       	std	Y+3, r17	; 0x03
    2346:	0a 83       	std	Y+2, r16	; 0x02
				/* Default enter sequence for state SendFail1 */
				/* Entry action for state 'SendFail1'. */
				sMO_setTimer( (sc_eventid) &(handle->timeEvents.SendFail1_time_event_0_raised) , 2 * 1000, bool_false);
    2348:	ce 01       	movw	r24, r28
    234a:	cd 96       	adiw	r24, 0x3d	; 61
    234c:	40 ed       	ldi	r20, 0xD0	; 208
    234e:	57 e0       	ldi	r21, 0x07	; 7
    2350:	60 e0       	ldi	r22, 0x00	; 0
    2352:	70 e0       	ldi	r23, 0x00	; 0
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	0e 94 c3 03 	call	0x786	; 0x786 <sMO_setTimer>
				sMOIfaceLCD_clear();
    235a:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
				sMOIfaceLCD_writeString("Send fail");
    235e:	82 e4       	ldi	r24, 0x42	; 66
    2360:	92 e0       	ldi	r25, 0x02	; 2
    2362:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail1;
    2366:	86 e1       	ldi	r24, 0x16	; 22
    2368:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    236a:	1b 83       	std	Y+3, r17	; 0x03
    236c:	0a 83       	std	Y+2, r16	; 0x02
    236e:	be c5       	rjmp	.+2940   	; 0x2eec <sMO_runCycle+0x1cde>
}

/* The reactions of state Check. */
static void sMO_react_main_region_on_r1_Running_running_main_SendData_r1_Check(SMO* handle) {
	/* The reactions of state Check. */
	if (handle->ifaceRF.result == bool_true) { 
    2370:	8f 89       	ldd	r24, Y+23	; 0x17
    2372:	88 23       	and	r24, r24
    2374:	09 f4       	brne	.+2      	; 0x2378 <sMO_runCycle+0x116a>
    2376:	55 c0       	rjmp	.+170    	; 0x2422 <sMO_runCycle+0x1214>
		/* Default exit sequence for state SendData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	85 31       	cpi	r24, 0x15	; 21
    237c:	d1 f0       	breq	.+52     	; 0x23b2 <sMO_runCycle+0x11a4>
    237e:	86 31       	cpi	r24, 0x16	; 22
    2380:	28 f4       	brcc	.+10     	; 0x238c <sMO_runCycle+0x117e>
    2382:	83 31       	cpi	r24, 0x13	; 19
    2384:	41 f0       	breq	.+16     	; 0x2396 <sMO_runCycle+0x1188>
    2386:	84 31       	cpi	r24, 0x14	; 20
    2388:	61 f5       	brne	.+88     	; 0x23e2 <sMO_runCycle+0x11d4>
    238a:	0c c0       	rjmp	.+24     	; 0x23a4 <sMO_runCycle+0x1196>
    238c:	86 31       	cpi	r24, 0x16	; 22
    238e:	c1 f0       	breq	.+48     	; 0x23c0 <sMO_runCycle+0x11b2>
    2390:	87 31       	cpi	r24, 0x17	; 23
    2392:	39 f5       	brne	.+78     	; 0x23e2 <sMO_runCycle+0x11d4>
    2394:	20 c0       	rjmp	.+64     	; 0x23d6 <sMO_runCycle+0x11c8>
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    2396:	86 e2       	ldi	r24, 0x26	; 38
    2398:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	9b 83       	std	Y+3, r25	; 0x03
    23a0:	8a 83       	std	Y+2, r24	; 0x02
    23a2:	1f c0       	rjmp	.+62     	; 0x23e2 <sMO_runCycle+0x11d4>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    23a4:	86 e2       	ldi	r24, 0x26	; 38
    23a6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	9b 83       	std	Y+3, r25	; 0x03
    23ae:	8a 83       	std	Y+2, r24	; 0x02
    23b0:	18 c0       	rjmp	.+48     	; 0x23e2 <sMO_runCycle+0x11d4>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    23b2:	86 e2       	ldi	r24, 0x26	; 38
    23b4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	9b 83       	std	Y+3, r25	; 0x03
    23bc:	8a 83       	std	Y+2, r24	; 0x02
    23be:	11 c0       	rjmp	.+34     	; 0x23e2 <sMO_runCycle+0x11d4>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail1 : {
				/* Default exit sequence for state SendFail1 */
				handle->stateConfVector[1] = SMO_last_state;
    23c0:	86 e2       	ldi	r24, 0x26	; 38
    23c2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	9b 83       	std	Y+3, r25	; 0x03
    23ca:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail1'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail1_time_event_0_raised) );		
    23cc:	ce 01       	movw	r24, r28
    23ce:	cd 96       	adiw	r24, 0x3d	; 61
    23d0:	0e 94 c6 03 	call	0x78c	; 0x78c <sMO_unsetTimer>
    23d4:	06 c0       	rjmp	.+12     	; 0x23e2 <sMO_runCycle+0x11d4>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    23d6:	86 e2       	ldi	r24, 0x26	; 38
    23d8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	9b 83       	std	Y+3, r25	; 0x03
    23e0:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    23e2:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Dish Code:");
    23e6:	85 e2       	ldi	r24, 0x25	; 37
    23e8:	92 e0       	ldi	r25, 0x02	; 2
    23ea:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    23ee:	80 e3       	ldi	r24, 0x30	; 48
    23f0:	92 e0       	ldi	r25, 0x02	; 2
    23f2:	40 e0       	ldi	r20, 0x00	; 0
    23f4:	50 e0       	ldi	r21, 0x00	; 0
    23f6:	ba 01       	movw	r22, r20
    23f8:	01 e0       	ldi	r16, 0x01	; 1
    23fa:	10 e0       	ldi	r17, 0x00	; 0
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    2404:	19 a6       	lds	r17, 0xb9
    2406:	1a a6       	lds	r17, 0xba
    2408:	1b a6       	lds	r17, 0xbb
    240a:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    240c:	19 a2       	lds	r17, 0x99
    240e:	1a a2       	lds	r17, 0x9a
    2410:	1b a2       	lds	r17, 0x9b
    2412:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    2414:	87 e0       	ldi	r24, 0x07	; 7
    2416:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	9b 83       	std	Y+3, r25	; 0x03
    241e:	8a 83       	std	Y+2, r24	; 0x02
    2420:	65 c5       	rjmp	.+2762   	; 0x2eec <sMO_runCycle+0x1cde>
	}  else {
		if (handle->ifaceRF.result == bool_false) { 
			/* Default exit sequence for state Check */
			handle->stateConfVector[1] = SMO_last_state;
    2422:	86 e2       	ldi	r24, 0x26	; 38
    2424:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    2426:	44 24       	eor	r4, r4
    2428:	55 24       	eor	r5, r5
    242a:	43 94       	inc	r4
    242c:	5b 82       	std	Y+3, r5	; 0x03
    242e:	4a 82       	std	Y+2, r4	; 0x02
			/* Default enter sequence for state Send */
			/* Entry action for state 'Send'. */
			handle->ifaceRF.retry += 1;
    2430:	88 8d       	ldd	r24, Y+24	; 0x18
    2432:	99 8d       	ldd	r25, Y+25	; 0x19
    2434:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2436:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2438:	01 96       	adiw	r24, 0x01	; 1
    243a:	a1 1d       	adc	r26, r1
    243c:	b1 1d       	adc	r27, r1
    243e:	88 8f       	std	Y+24, r24	; 0x18
    2440:	99 8f       	std	Y+25, r25	; 0x19
    2442:	aa 8f       	std	Y+26, r26	; 0x1a
    2444:	bb 8f       	std	Y+27, r27	; 0x1b
			handle->ifaceRF.result = sMOIfaceRF_sendData(handle->iface.menuId, handle->iface.tableId, handle->ifaceDISH.ID, handle->ifaceDISH.amount);
    2446:	6e a5       	lds	r22, 0x6e
    2448:	7f a5       	lds	r23, 0x6f
    244a:	88 a9       	sts	0x48, r24
    244c:	99 a9       	sts	0x49, r25
    244e:	2a a9       	sts	0x4a, r18
    2450:	3b a9       	sts	0x4b, r19
    2452:	4c a9       	sts	0x4c, r20
    2454:	5d a9       	sts	0x4d, r21
    2456:	e9 a0       	lds	r30, 0x89
    2458:	fa a0       	lds	r31, 0x8a
    245a:	0b a1       	lds	r16, 0x4b
    245c:	1c a1       	lds	r17, 0x4c
    245e:	8d a0       	lds	r24, 0x8d
    2460:	9e a0       	lds	r25, 0x8e
    2462:	af a0       	lds	r26, 0x8f
    2464:	b8 a4       	lds	r27, 0xa8
    2466:	65 01       	movw	r12, r10
    2468:	54 01       	movw	r10, r8
    246a:	0e 94 4a 03 	call	0x694	; 0x694 <sMOIfaceRF_sendData>
    246e:	8f 8b       	std	Y+23, r24	; 0x17
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_Send;
    2470:	83 e1       	ldi	r24, 0x13	; 19
    2472:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    2474:	5b 82       	std	Y+3, r5	; 0x03
    2476:	4a 82       	std	Y+2, r4	; 0x02
    2478:	39 c5       	rjmp	.+2674   	; 0x2eec <sMO_runCycle+0x1cde>
}

/* The reactions of state null. */
static void sMO_react_main_region_on_r1_Running_running_main_SendData_r1__final_0(SMO* handle) {
	/* The reactions of state null. */
	if (handle->ifaceRF.result == bool_true) { 
    247a:	8f 89       	ldd	r24, Y+23	; 0x17
    247c:	88 23       	and	r24, r24
    247e:	09 f4       	brne	.+2      	; 0x2482 <sMO_runCycle+0x1274>
    2480:	0c c5       	rjmp	.+2584   	; 0x2e9a <sMO_runCycle+0x1c8c>
		/* Default exit sequence for state SendData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	85 31       	cpi	r24, 0x15	; 21
    2486:	d1 f0       	breq	.+52     	; 0x24bc <sMO_runCycle+0x12ae>
    2488:	86 31       	cpi	r24, 0x16	; 22
    248a:	28 f4       	brcc	.+10     	; 0x2496 <sMO_runCycle+0x1288>
    248c:	83 31       	cpi	r24, 0x13	; 19
    248e:	41 f0       	breq	.+16     	; 0x24a0 <sMO_runCycle+0x1292>
    2490:	84 31       	cpi	r24, 0x14	; 20
    2492:	61 f5       	brne	.+88     	; 0x24ec <sMO_runCycle+0x12de>
    2494:	0c c0       	rjmp	.+24     	; 0x24ae <sMO_runCycle+0x12a0>
    2496:	86 31       	cpi	r24, 0x16	; 22
    2498:	c1 f0       	breq	.+48     	; 0x24ca <sMO_runCycle+0x12bc>
    249a:	87 31       	cpi	r24, 0x17	; 23
    249c:	39 f5       	brne	.+78     	; 0x24ec <sMO_runCycle+0x12de>
    249e:	20 c0       	rjmp	.+64     	; 0x24e0 <sMO_runCycle+0x12d2>
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    24a0:	86 e2       	ldi	r24, 0x26	; 38
    24a2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	9b 83       	std	Y+3, r25	; 0x03
    24aa:	8a 83       	std	Y+2, r24	; 0x02
    24ac:	1f c0       	rjmp	.+62     	; 0x24ec <sMO_runCycle+0x12de>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    24ae:	86 e2       	ldi	r24, 0x26	; 38
    24b0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	9b 83       	std	Y+3, r25	; 0x03
    24b8:	8a 83       	std	Y+2, r24	; 0x02
    24ba:	18 c0       	rjmp	.+48     	; 0x24ec <sMO_runCycle+0x12de>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    24bc:	86 e2       	ldi	r24, 0x26	; 38
    24be:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	9b 83       	std	Y+3, r25	; 0x03
    24c6:	8a 83       	std	Y+2, r24	; 0x02
    24c8:	11 c0       	rjmp	.+34     	; 0x24ec <sMO_runCycle+0x12de>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail1 : {
				/* Default exit sequence for state SendFail1 */
				handle->stateConfVector[1] = SMO_last_state;
    24ca:	86 e2       	ldi	r24, 0x26	; 38
    24cc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	9b 83       	std	Y+3, r25	; 0x03
    24d4:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail1'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail1_time_event_0_raised) );		
    24d6:	ce 01       	movw	r24, r28
    24d8:	cd 96       	adiw	r24, 0x3d	; 61
    24da:	0e 94 c6 03 	call	0x78c	; 0x78c <sMO_unsetTimer>
    24de:	06 c0       	rjmp	.+12     	; 0x24ec <sMO_runCycle+0x12de>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    24e0:	86 e2       	ldi	r24, 0x26	; 38
    24e2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	9b 83       	std	Y+3, r25	; 0x03
    24ea:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    24ec:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Dish Code:");
    24f0:	85 e2       	ldi	r24, 0x25	; 37
    24f2:	92 e0       	ldi	r25, 0x02	; 2
    24f4:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    24f8:	80 e3       	ldi	r24, 0x30	; 48
    24fa:	92 e0       	ldi	r25, 0x02	; 2
    24fc:	40 e0       	ldi	r20, 0x00	; 0
    24fe:	50 e0       	ldi	r21, 0x00	; 0
    2500:	ba 01       	movw	r22, r20
    2502:	01 e0       	ldi	r16, 0x01	; 1
    2504:	10 e0       	ldi	r17, 0x00	; 0
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    250e:	19 a6       	lds	r17, 0xb9
    2510:	1a a6       	lds	r17, 0xba
    2512:	1b a6       	lds	r17, 0xbb
    2514:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    2516:	19 a2       	lds	r17, 0x99
    2518:	1a a2       	lds	r17, 0x9a
    251a:	1b a2       	lds	r17, 0x9b
    251c:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    251e:	87 e0       	ldi	r24, 0x07	; 7
    2520:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	9b 83       	std	Y+3, r25	; 0x03
    2528:	8a 83       	std	Y+2, r24	; 0x02
    252a:	e0 c4       	rjmp	.+2496   	; 0x2eec <sMO_runCycle+0x1cde>
}

/* The reactions of state SendFail1. */
static void sMO_react_main_region_on_r1_Running_running_main_SendData_r1_SendFail1(SMO* handle) {
	/* The reactions of state SendFail1. */
	if (handle->ifaceRF.result == bool_true) { 
    252c:	8f 89       	ldd	r24, Y+23	; 0x17
    252e:	88 23       	and	r24, r24
    2530:	09 f4       	brne	.+2      	; 0x2534 <sMO_runCycle+0x1326>
    2532:	55 c0       	rjmp	.+170    	; 0x25de <sMO_runCycle+0x13d0>
		/* Default exit sequence for state SendData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2534:	89 81       	ldd	r24, Y+1	; 0x01
    2536:	85 31       	cpi	r24, 0x15	; 21
    2538:	d1 f0       	breq	.+52     	; 0x256e <sMO_runCycle+0x1360>
    253a:	86 31       	cpi	r24, 0x16	; 22
    253c:	28 f4       	brcc	.+10     	; 0x2548 <sMO_runCycle+0x133a>
    253e:	83 31       	cpi	r24, 0x13	; 19
    2540:	41 f0       	breq	.+16     	; 0x2552 <sMO_runCycle+0x1344>
    2542:	84 31       	cpi	r24, 0x14	; 20
    2544:	61 f5       	brne	.+88     	; 0x259e <sMO_runCycle+0x1390>
    2546:	0c c0       	rjmp	.+24     	; 0x2560 <sMO_runCycle+0x1352>
    2548:	86 31       	cpi	r24, 0x16	; 22
    254a:	c1 f0       	breq	.+48     	; 0x257c <sMO_runCycle+0x136e>
    254c:	87 31       	cpi	r24, 0x17	; 23
    254e:	39 f5       	brne	.+78     	; 0x259e <sMO_runCycle+0x1390>
    2550:	20 c0       	rjmp	.+64     	; 0x2592 <sMO_runCycle+0x1384>
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    2552:	86 e2       	ldi	r24, 0x26	; 38
    2554:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	9b 83       	std	Y+3, r25	; 0x03
    255c:	8a 83       	std	Y+2, r24	; 0x02
    255e:	1f c0       	rjmp	.+62     	; 0x259e <sMO_runCycle+0x1390>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    2560:	86 e2       	ldi	r24, 0x26	; 38
    2562:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	9b 83       	std	Y+3, r25	; 0x03
    256a:	8a 83       	std	Y+2, r24	; 0x02
    256c:	18 c0       	rjmp	.+48     	; 0x259e <sMO_runCycle+0x1390>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    256e:	86 e2       	ldi	r24, 0x26	; 38
    2570:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	9b 83       	std	Y+3, r25	; 0x03
    2578:	8a 83       	std	Y+2, r24	; 0x02
    257a:	11 c0       	rjmp	.+34     	; 0x259e <sMO_runCycle+0x1390>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail1 : {
				/* Default exit sequence for state SendFail1 */
				handle->stateConfVector[1] = SMO_last_state;
    257c:	86 e2       	ldi	r24, 0x26	; 38
    257e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	9b 83       	std	Y+3, r25	; 0x03
    2586:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail1'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail1_time_event_0_raised) );		
    2588:	ce 01       	movw	r24, r28
    258a:	cd 96       	adiw	r24, 0x3d	; 61
    258c:	0e 94 c6 03 	call	0x78c	; 0x78c <sMO_unsetTimer>
    2590:	06 c0       	rjmp	.+12     	; 0x259e <sMO_runCycle+0x1390>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    2592:	86 e2       	ldi	r24, 0x26	; 38
    2594:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	9b 83       	std	Y+3, r25	; 0x03
    259c:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    259e:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Dish Code:");
    25a2:	85 e2       	ldi	r24, 0x25	; 37
    25a4:	92 e0       	ldi	r25, 0x02	; 2
    25a6:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    25aa:	80 e3       	ldi	r24, 0x30	; 48
    25ac:	92 e0       	ldi	r25, 0x02	; 2
    25ae:	40 e0       	ldi	r20, 0x00	; 0
    25b0:	50 e0       	ldi	r21, 0x00	; 0
    25b2:	ba 01       	movw	r22, r20
    25b4:	01 e0       	ldi	r16, 0x01	; 1
    25b6:	10 e0       	ldi	r17, 0x00	; 0
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    25c0:	19 a6       	lds	r17, 0xb9
    25c2:	1a a6       	lds	r17, 0xba
    25c4:	1b a6       	lds	r17, 0xbb
    25c6:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    25c8:	19 a2       	lds	r17, 0x99
    25ca:	1a a2       	lds	r17, 0x9a
    25cc:	1b a2       	lds	r17, 0x9b
    25ce:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    25d0:	87 e0       	ldi	r24, 0x07	; 7
    25d2:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	9b 83       	std	Y+3, r25	; 0x03
    25da:	8a 83       	std	Y+2, r24	; 0x02
    25dc:	87 c4       	rjmp	.+2318   	; 0x2eec <sMO_runCycle+0x1cde>
	}  else {
		if (handle->timeEvents.SendFail1_time_event_0_raised) { 
    25de:	8d ad       	sts	0x6d, r24
    25e0:	88 23       	and	r24, r24
    25e2:	09 f4       	brne	.+2      	; 0x25e6 <sMO_runCycle+0x13d8>
    25e4:	5a c4       	rjmp	.+2228   	; 0x2e9a <sMO_runCycle+0x1c8c>
			/* Default exit sequence for state SendFail1 */
			handle->stateConfVector[1] = SMO_last_state;
    25e6:	86 e2       	ldi	r24, 0x26	; 38
    25e8:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    25ea:	01 e0       	ldi	r16, 0x01	; 1
    25ec:	10 e0       	ldi	r17, 0x00	; 0
    25ee:	1b 83       	std	Y+3, r17	; 0x03
    25f0:	0a 83       	std	Y+2, r16	; 0x02
			/* Exit action for state 'SendFail1'. */
			sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail1_time_event_0_raised) );		
    25f2:	ce 01       	movw	r24, r28
    25f4:	cd 96       	adiw	r24, 0x3d	; 61
    25f6:	0e 94 c6 03 	call	0x78c	; 0x78c <sMO_unsetTimer>
			/* Default enter sequence for state ResetResult */
			/* Entry action for state 'ResetResult'. */
			handle->ifaceRF.result = bool_true;
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	8f 8b       	std	Y+23, r24	; 0x17
			handle->ifaceRF.retry = 0;
    25fe:	18 8e       	std	Y+24, r1	; 0x18
    2600:	19 8e       	std	Y+25, r1	; 0x19
    2602:	1a 8e       	std	Y+26, r1	; 0x1a
    2604:	1b 8e       	std	Y+27, r1	; 0x1b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult;
    2606:	87 e1       	ldi	r24, 0x17	; 23
    2608:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    260a:	1b 83       	std	Y+3, r17	; 0x03
    260c:	0a 83       	std	Y+2, r16	; 0x02
    260e:	6e c4       	rjmp	.+2268   	; 0x2eec <sMO_runCycle+0x1cde>
}

/* The reactions of state ResetResult. */
static void sMO_react_main_region_on_r1_Running_running_main_SendData_r1_ResetResult(SMO* handle) {
	/* The reactions of state ResetResult. */
	if (handle->ifaceRF.result == bool_true) { 
    2610:	8f 89       	ldd	r24, Y+23	; 0x17
    2612:	88 23       	and	r24, r24
    2614:	09 f4       	brne	.+2      	; 0x2618 <sMO_runCycle+0x140a>
    2616:	55 c0       	rjmp	.+170    	; 0x26c2 <sMO_runCycle+0x14b4>
		/* Default exit sequence for state SendData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	85 31       	cpi	r24, 0x15	; 21
    261c:	d1 f0       	breq	.+52     	; 0x2652 <sMO_runCycle+0x1444>
    261e:	86 31       	cpi	r24, 0x16	; 22
    2620:	28 f4       	brcc	.+10     	; 0x262c <sMO_runCycle+0x141e>
    2622:	83 31       	cpi	r24, 0x13	; 19
    2624:	41 f0       	breq	.+16     	; 0x2636 <sMO_runCycle+0x1428>
    2626:	84 31       	cpi	r24, 0x14	; 20
    2628:	61 f5       	brne	.+88     	; 0x2682 <sMO_runCycle+0x1474>
    262a:	0c c0       	rjmp	.+24     	; 0x2644 <sMO_runCycle+0x1436>
    262c:	86 31       	cpi	r24, 0x16	; 22
    262e:	c1 f0       	breq	.+48     	; 0x2660 <sMO_runCycle+0x1452>
    2630:	87 31       	cpi	r24, 0x17	; 23
    2632:	39 f5       	brne	.+78     	; 0x2682 <sMO_runCycle+0x1474>
    2634:	20 c0       	rjmp	.+64     	; 0x2676 <sMO_runCycle+0x1468>
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    2636:	86 e2       	ldi	r24, 0x26	; 38
    2638:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	9b 83       	std	Y+3, r25	; 0x03
    2640:	8a 83       	std	Y+2, r24	; 0x02
    2642:	1f c0       	rjmp	.+62     	; 0x2682 <sMO_runCycle+0x1474>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    2644:	86 e2       	ldi	r24, 0x26	; 38
    2646:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	9b 83       	std	Y+3, r25	; 0x03
    264e:	8a 83       	std	Y+2, r24	; 0x02
    2650:	18 c0       	rjmp	.+48     	; 0x2682 <sMO_runCycle+0x1474>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2652:	86 e2       	ldi	r24, 0x26	; 38
    2654:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	9b 83       	std	Y+3, r25	; 0x03
    265c:	8a 83       	std	Y+2, r24	; 0x02
    265e:	11 c0       	rjmp	.+34     	; 0x2682 <sMO_runCycle+0x1474>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail1 : {
				/* Default exit sequence for state SendFail1 */
				handle->stateConfVector[1] = SMO_last_state;
    2660:	86 e2       	ldi	r24, 0x26	; 38
    2662:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	9b 83       	std	Y+3, r25	; 0x03
    266a:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail1'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail1_time_event_0_raised) );		
    266c:	ce 01       	movw	r24, r28
    266e:	cd 96       	adiw	r24, 0x3d	; 61
    2670:	0e 94 c6 03 	call	0x78c	; 0x78c <sMO_unsetTimer>
    2674:	06 c0       	rjmp	.+12     	; 0x2682 <sMO_runCycle+0x1474>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    2676:	86 e2       	ldi	r24, 0x26	; 38
    2678:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	9b 83       	std	Y+3, r25	; 0x03
    2680:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    2682:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Dish Code:");
    2686:	85 e2       	ldi	r24, 0x25	; 37
    2688:	92 e0       	ldi	r25, 0x02	; 2
    268a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    268e:	80 e3       	ldi	r24, 0x30	; 48
    2690:	92 e0       	ldi	r25, 0x02	; 2
    2692:	40 e0       	ldi	r20, 0x00	; 0
    2694:	50 e0       	ldi	r21, 0x00	; 0
    2696:	ba 01       	movw	r22, r20
    2698:	01 e0       	ldi	r16, 0x01	; 1
    269a:	10 e0       	ldi	r17, 0x00	; 0
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    26a4:	19 a6       	lds	r17, 0xb9
    26a6:	1a a6       	lds	r17, 0xba
    26a8:	1b a6       	lds	r17, 0xbb
    26aa:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    26ac:	19 a2       	lds	r17, 0x99
    26ae:	1a a2       	lds	r17, 0x9a
    26b0:	1b a2       	lds	r17, 0x9b
    26b2:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    26b4:	87 e0       	ldi	r24, 0x07	; 7
    26b6:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	9b 83       	std	Y+3, r25	; 0x03
    26be:	8a 83       	std	Y+2, r24	; 0x02
    26c0:	15 c4       	rjmp	.+2090   	; 0x2eec <sMO_runCycle+0x1cde>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state ResetResult */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    26c2:	1b 83       	std	Y+3, r17	; 0x03
    26c4:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state null */
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1__final_;
    26c6:	85 e1       	ldi	r24, 0x15	; 21
    26c8:	89 83       	std	Y+1, r24	; 0x01
    26ca:	e7 c3       	rjmp	.+1998   	; 0x2e9a <sMO_runCycle+0x1c8c>
/* The reactions of state MenuB. */
static void sMO_react_main_region_on_r1_Running_running_main_MenuB(SMO* handle) {
	/* The reactions of state MenuB. */
	if (bool_true) { 
		/* Default exit sequence for state MenuB */
		handle->stateConfVector[1] = SMO_last_state;
    26cc:	86 e2       	ldi	r24, 0x26	; 38
    26ce:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    26d0:	ee 24       	eor	r14, r14
    26d2:	ff 24       	eor	r15, r15
    26d4:	e3 94       	inc	r14
    26d6:	fb 82       	std	Y+3, r15	; 0x03
    26d8:	ea 82       	std	Y+2, r14	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    26da:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Dish Code:");
    26de:	85 e2       	ldi	r24, 0x25	; 37
    26e0:	92 e0       	ldi	r25, 0x02	; 2
    26e2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    26e6:	80 e3       	ldi	r24, 0x30	; 48
    26e8:	92 e0       	ldi	r25, 0x02	; 2
    26ea:	40 e0       	ldi	r20, 0x00	; 0
    26ec:	50 e0       	ldi	r21, 0x00	; 0
    26ee:	ba 01       	movw	r22, r20
    26f0:	01 e0       	ldi	r16, 0x01	; 1
    26f2:	10 e0       	ldi	r17, 0x00	; 0
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    26fc:	19 a6       	lds	r17, 0xb9
    26fe:	1a a6       	lds	r17, 0xba
    2700:	1b a6       	lds	r17, 0xbb
    2702:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    2704:	19 a2       	lds	r17, 0x99
    2706:	1a a2       	lds	r17, 0x9a
    2708:	1b a2       	lds	r17, 0x9b
    270a:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    270c:	87 e0       	ldi	r24, 0x07	; 7
    270e:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2710:	fb 82       	std	Y+3, r15	; 0x03
    2712:	ea 82       	std	Y+2, r14	; 0x02
    2714:	eb c3       	rjmp	.+2006   	; 0x2eec <sMO_runCycle+0x1cde>
/* The reactions of state MenuC. */
static void sMO_react_main_region_on_r1_Running_running_main_MenuC(SMO* handle) {
	/* The reactions of state MenuC. */
	if (bool_true) { 
		/* Default exit sequence for state MenuC */
		handle->stateConfVector[1] = SMO_last_state;
    2716:	86 e2       	ldi	r24, 0x26	; 38
    2718:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    271a:	ee 24       	eor	r14, r14
    271c:	ff 24       	eor	r15, r15
    271e:	e3 94       	inc	r14
    2720:	fb 82       	std	Y+3, r15	; 0x03
    2722:	ea 82       	std	Y+2, r14	; 0x02
		/* Default enter sequence for state ConfirmRequest */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state RequestConfirmation */
		/* Entry action for state 'RequestConfirmation'. */
		sMOIfaceLCD_clear();
    2724:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Proceed?");
    2728:	8c e4       	ldi	r24, 0x4C	; 76
    272a:	92 e0       	ldi	r25, 0x02	; 2
    272c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("*-No  #-Yes", 0, 1);
    2730:	85 e5       	ldi	r24, 0x55	; 85
    2732:	92 e0       	ldi	r25, 0x02	; 2
    2734:	40 e0       	ldi	r20, 0x00	; 0
    2736:	50 e0       	ldi	r21, 0x00	; 0
    2738:	ba 01       	movw	r22, r20
    273a:	01 e0       	ldi	r16, 0x01	; 1
    273c:	10 e0       	ldi	r17, 0x00	; 0
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation;
    2746:	8c e1       	ldi	r24, 0x1C	; 28
    2748:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    274a:	fb 82       	std	Y+3, r15	; 0x03
    274c:	ea 82       	std	Y+2, r14	; 0x02
    274e:	ce c3       	rjmp	.+1948   	; 0x2eec <sMO_runCycle+0x1cde>
/* The reactions of state MenuD. */
static void sMO_react_main_region_on_r1_Running_running_main_MenuD(SMO* handle) {
	/* The reactions of state MenuD. */
	if (bool_true) { 
		/* Default exit sequence for state MenuD */
		handle->stateConfVector[1] = SMO_last_state;
    2750:	86 e2       	ldi	r24, 0x26	; 38
    2752:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2754:	ee 24       	eor	r14, r14
    2756:	ff 24       	eor	r15, r15
    2758:	e3 94       	inc	r14
    275a:	fb 82       	std	Y+3, r15	; 0x03
    275c:	ea 82       	std	Y+2, r14	; 0x02
		/* Default enter sequence for state ConfirmRequest */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state RequestConfirmation */
		/* Entry action for state 'RequestConfirmation'. */
		sMOIfaceLCD_clear();
    275e:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Proceed?");
    2762:	8c e4       	ldi	r24, 0x4C	; 76
    2764:	92 e0       	ldi	r25, 0x02	; 2
    2766:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("*-No  #-Yes", 0, 1);
    276a:	85 e5       	ldi	r24, 0x55	; 85
    276c:	92 e0       	ldi	r25, 0x02	; 2
    276e:	40 e0       	ldi	r20, 0x00	; 0
    2770:	50 e0       	ldi	r21, 0x00	; 0
    2772:	ba 01       	movw	r22, r20
    2774:	01 e0       	ldi	r16, 0x01	; 1
    2776:	10 e0       	ldi	r17, 0x00	; 0
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation;
    2780:	8c e1       	ldi	r24, 0x1C	; 28
    2782:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2784:	fb 82       	std	Y+3, r15	; 0x03
    2786:	ea 82       	std	Y+2, r14	; 0x02
    2788:	b1 c3       	rjmp	.+1890   	; 0x2eec <sMO_runCycle+0x1cde>
}

/* The reactions of state RequestConfirmation. */
static void sMO_react_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation(SMO* handle) {
	/* The reactions of state RequestConfirmation. */
	if (handle->iface.menuId == 0) { 
    278a:	8e a5       	lds	r24, 0x6e
    278c:	9f a5       	lds	r25, 0x6f
    278e:	a8 a9       	sts	0x48, r26
    2790:	b9 a9       	sts	0x49, r27
    2792:	00 97       	sbiw	r24, 0x00	; 0
    2794:	a1 05       	cpc	r26, r1
    2796:	b1 05       	cpc	r27, r1
    2798:	09 f0       	breq	.+2      	; 0x279c <sMO_runCycle+0x158e>
    279a:	48 c0       	rjmp	.+144    	; 0x282c <sMO_runCycle+0x161e>
		/* Default exit sequence for state ConfirmRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	8d 31       	cpi	r24, 0x1D	; 29
    27a0:	89 f0       	breq	.+34     	; 0x27c4 <sMO_runCycle+0x15b6>
    27a2:	8e 31       	cpi	r24, 0x1E	; 30
    27a4:	18 f4       	brcc	.+6      	; 0x27ac <sMO_runCycle+0x159e>
    27a6:	8c 31       	cpi	r24, 0x1C	; 28
    27a8:	29 f5       	brne	.+74     	; 0x27f4 <sMO_runCycle+0x15e6>
    27aa:	05 c0       	rjmp	.+10     	; 0x27b6 <sMO_runCycle+0x15a8>
    27ac:	8e 31       	cpi	r24, 0x1E	; 30
    27ae:	a9 f0       	breq	.+42     	; 0x27da <sMO_runCycle+0x15cc>
    27b0:	8f 31       	cpi	r24, 0x1F	; 31
    27b2:	01 f5       	brne	.+64     	; 0x27f4 <sMO_runCycle+0x15e6>
    27b4:	19 c0       	rjmp	.+50     	; 0x27e8 <sMO_runCycle+0x15da>
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation : {
				/* Default exit sequence for state RequestConfirmation */
				handle->stateConfVector[1] = SMO_last_state;
    27b6:	86 e2       	ldi	r24, 0x26	; 38
    27b8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	9b 83       	std	Y+3, r25	; 0x03
    27c0:	8a 83       	std	Y+2, r24	; 0x02
    27c2:	18 c0       	rjmp	.+48     	; 0x27f4 <sMO_runCycle+0x15e6>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_Confirm : {
				/* Default exit sequence for state Confirm */
				handle->stateConfVector[1] = SMO_last_state;
    27c4:	86 e2       	ldi	r24, 0x26	; 38
    27c6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	9b 83       	std	Y+3, r25	; 0x03
    27ce:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'Confirm'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Confirm_time_event_0_raised) );		
    27d0:	ce 01       	movw	r24, r28
    27d2:	ce 96       	adiw	r24, 0x3e	; 62
    27d4:	0e 94 c6 03 	call	0x78c	; 0x78c <sMO_unsetTimer>
    27d8:	0d c0       	rjmp	.+26     	; 0x27f4 <sMO_runCycle+0x15e6>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress : {
				/* Default exit sequence for state CheckKeyPress */
				handle->stateConfVector[1] = SMO_last_state;
    27da:	86 e2       	ldi	r24, 0x26	; 38
    27dc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	9b 83       	std	Y+3, r25	; 0x03
    27e4:	8a 83       	std	Y+2, r24	; 0x02
    27e6:	06 c0       	rjmp	.+12     	; 0x27f4 <sMO_runCycle+0x15e6>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    27e8:	86 e2       	ldi	r24, 0x26	; 38
    27ea:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	9b 83       	std	Y+3, r25	; 0x03
    27f2:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    27f4:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    27f8:	88 e0       	ldi	r24, 0x08	; 8
    27fa:	92 e0       	ldi	r25, 0x02	; 2
    27fc:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    2800:	87 e1       	ldi	r24, 0x17	; 23
    2802:	92 e0       	ldi	r25, 0x02	; 2
    2804:	40 e0       	ldi	r20, 0x00	; 0
    2806:	50 e0       	ldi	r21, 0x00	; 0
    2808:	ba 01       	movw	r22, r20
    280a:	01 e0       	ldi	r16, 0x01	; 1
    280c:	10 e0       	ldi	r17, 0x00	; 0
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    2816:	1e a6       	lds	r17, 0xbe
    2818:	1f a6       	lds	r17, 0xbf
    281a:	18 aa       	sts	0x98, r17
    281c:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    281e:	85 e0       	ldi	r24, 0x05	; 5
    2820:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	9b 83       	std	Y+3, r25	; 0x03
    2828:	8a 83       	std	Y+2, r24	; 0x02
    282a:	60 c3       	rjmp	.+1728   	; 0x2eec <sMO_runCycle+0x1cde>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state RequestConfirmation */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    282c:	1b 83       	std	Y+3, r17	; 0x03
    282e:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress */
			/* Entry action for state 'CheckKeyPress'. */
			handle->ifaceKEYPAD.lastkey = 0;
    2830:	18 86       	std	Y+8, r1	; 0x08
    2832:	19 86       	std	Y+9, r1	; 0x09
    2834:	1a 86       	std	Y+10, r1	; 0x0a
    2836:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress;
    2838:	29 82       	std	Y+1, r2	; 0x01
    283a:	2f c3       	rjmp	.+1630   	; 0x2e9a <sMO_runCycle+0x1c8c>
}

/* The reactions of state Confirm. */
static void sMO_react_main_region_on_r1_Running_running_main_ConfirmRequest_r1_Confirm(SMO* handle) {
	/* The reactions of state Confirm. */
	if (handle->iface.menuId == 0) { 
    283c:	8e a5       	lds	r24, 0x6e
    283e:	9f a5       	lds	r25, 0x6f
    2840:	a8 a9       	sts	0x48, r26
    2842:	b9 a9       	sts	0x49, r27
    2844:	00 97       	sbiw	r24, 0x00	; 0
    2846:	a1 05       	cpc	r26, r1
    2848:	b1 05       	cpc	r27, r1
    284a:	09 f0       	breq	.+2      	; 0x284e <sMO_runCycle+0x1640>
    284c:	48 c0       	rjmp	.+144    	; 0x28de <sMO_runCycle+0x16d0>
		/* Default exit sequence for state ConfirmRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    284e:	89 81       	ldd	r24, Y+1	; 0x01
    2850:	8d 31       	cpi	r24, 0x1D	; 29
    2852:	89 f0       	breq	.+34     	; 0x2876 <sMO_runCycle+0x1668>
    2854:	8e 31       	cpi	r24, 0x1E	; 30
    2856:	18 f4       	brcc	.+6      	; 0x285e <sMO_runCycle+0x1650>
    2858:	8c 31       	cpi	r24, 0x1C	; 28
    285a:	29 f5       	brne	.+74     	; 0x28a6 <sMO_runCycle+0x1698>
    285c:	05 c0       	rjmp	.+10     	; 0x2868 <sMO_runCycle+0x165a>
    285e:	8e 31       	cpi	r24, 0x1E	; 30
    2860:	a9 f0       	breq	.+42     	; 0x288c <sMO_runCycle+0x167e>
    2862:	8f 31       	cpi	r24, 0x1F	; 31
    2864:	01 f5       	brne	.+64     	; 0x28a6 <sMO_runCycle+0x1698>
    2866:	19 c0       	rjmp	.+50     	; 0x289a <sMO_runCycle+0x168c>
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation : {
				/* Default exit sequence for state RequestConfirmation */
				handle->stateConfVector[1] = SMO_last_state;
    2868:	86 e2       	ldi	r24, 0x26	; 38
    286a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	9b 83       	std	Y+3, r25	; 0x03
    2872:	8a 83       	std	Y+2, r24	; 0x02
    2874:	18 c0       	rjmp	.+48     	; 0x28a6 <sMO_runCycle+0x1698>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_Confirm : {
				/* Default exit sequence for state Confirm */
				handle->stateConfVector[1] = SMO_last_state;
    2876:	86 e2       	ldi	r24, 0x26	; 38
    2878:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    287a:	81 e0       	ldi	r24, 0x01	; 1
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	9b 83       	std	Y+3, r25	; 0x03
    2880:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'Confirm'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Confirm_time_event_0_raised) );		
    2882:	ce 01       	movw	r24, r28
    2884:	ce 96       	adiw	r24, 0x3e	; 62
    2886:	0e 94 c6 03 	call	0x78c	; 0x78c <sMO_unsetTimer>
    288a:	0d c0       	rjmp	.+26     	; 0x28a6 <sMO_runCycle+0x1698>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress : {
				/* Default exit sequence for state CheckKeyPress */
				handle->stateConfVector[1] = SMO_last_state;
    288c:	86 e2       	ldi	r24, 0x26	; 38
    288e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	9b 83       	std	Y+3, r25	; 0x03
    2896:	8a 83       	std	Y+2, r24	; 0x02
    2898:	06 c0       	rjmp	.+12     	; 0x28a6 <sMO_runCycle+0x1698>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    289a:	86 e2       	ldi	r24, 0x26	; 38
    289c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	9b 83       	std	Y+3, r25	; 0x03
    28a4:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    28a6:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    28aa:	88 e0       	ldi	r24, 0x08	; 8
    28ac:	92 e0       	ldi	r25, 0x02	; 2
    28ae:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    28b2:	87 e1       	ldi	r24, 0x17	; 23
    28b4:	92 e0       	ldi	r25, 0x02	; 2
    28b6:	40 e0       	ldi	r20, 0x00	; 0
    28b8:	50 e0       	ldi	r21, 0x00	; 0
    28ba:	ba 01       	movw	r22, r20
    28bc:	01 e0       	ldi	r16, 0x01	; 1
    28be:	10 e0       	ldi	r17, 0x00	; 0
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    28c8:	1e a6       	lds	r17, 0xbe
    28ca:	1f a6       	lds	r17, 0xbf
    28cc:	18 aa       	sts	0x98, r17
    28ce:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    28d0:	85 e0       	ldi	r24, 0x05	; 5
    28d2:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	9b 83       	std	Y+3, r25	; 0x03
    28da:	8a 83       	std	Y+2, r24	; 0x02
    28dc:	07 c3       	rjmp	.+1550   	; 0x2eec <sMO_runCycle+0x1cde>
	}  else {
		if (handle->timeEvents.Confirm_time_event_0_raised) { 
    28de:	8e ad       	sts	0x6e, r24
    28e0:	88 23       	and	r24, r24
    28e2:	09 f4       	brne	.+2      	; 0x28e6 <sMO_runCycle+0x16d8>
    28e4:	da c2       	rjmp	.+1460   	; 0x2e9a <sMO_runCycle+0x1c8c>
			/* Default exit sequence for state Confirm */
			handle->stateConfVector[1] = SMO_last_state;
    28e6:	86 e2       	ldi	r24, 0x26	; 38
    28e8:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    28ea:	01 e0       	ldi	r16, 0x01	; 1
    28ec:	10 e0       	ldi	r17, 0x00	; 0
    28ee:	1b 83       	std	Y+3, r17	; 0x03
    28f0:	0a 83       	std	Y+2, r16	; 0x02
			/* Exit action for state 'Confirm'. */
			sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Confirm_time_event_0_raised) );		
    28f2:	ce 01       	movw	r24, r28
    28f4:	ce 96       	adiw	r24, 0x3e	; 62
    28f6:	0e 94 c6 03 	call	0x78c	; 0x78c <sMO_unsetTimer>
			/* Default enter sequence for state CheckKeyPress */
			/* Entry action for state 'CheckKeyPress'. */
			handle->ifaceKEYPAD.lastkey = 0;
    28fa:	18 86       	std	Y+8, r1	; 0x08
    28fc:	19 86       	std	Y+9, r1	; 0x09
    28fe:	1a 86       	std	Y+10, r1	; 0x0a
    2900:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress;
    2902:	8e e1       	ldi	r24, 0x1E	; 30
    2904:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    2906:	1b 83       	std	Y+3, r17	; 0x03
    2908:	0a 83       	std	Y+2, r16	; 0x02
    290a:	f0 c2       	rjmp	.+1504   	; 0x2eec <sMO_runCycle+0x1cde>
}

/* The reactions of state CheckKeyPress. */
static void sMO_react_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress(SMO* handle) {
	/* The reactions of state CheckKeyPress. */
	if (handle->iface.menuId == 0) { 
    290c:	8e a5       	lds	r24, 0x6e
    290e:	9f a5       	lds	r25, 0x6f
    2910:	a8 a9       	sts	0x48, r26
    2912:	b9 a9       	sts	0x49, r27
    2914:	00 97       	sbiw	r24, 0x00	; 0
    2916:	a1 05       	cpc	r26, r1
    2918:	b1 05       	cpc	r27, r1
    291a:	09 f0       	breq	.+2      	; 0x291e <sMO_runCycle+0x1710>
    291c:	48 c0       	rjmp	.+144    	; 0x29ae <sMO_runCycle+0x17a0>
		/* Default exit sequence for state ConfirmRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    291e:	89 81       	ldd	r24, Y+1	; 0x01
    2920:	8d 31       	cpi	r24, 0x1D	; 29
    2922:	89 f0       	breq	.+34     	; 0x2946 <sMO_runCycle+0x1738>
    2924:	8e 31       	cpi	r24, 0x1E	; 30
    2926:	18 f4       	brcc	.+6      	; 0x292e <sMO_runCycle+0x1720>
    2928:	8c 31       	cpi	r24, 0x1C	; 28
    292a:	29 f5       	brne	.+74     	; 0x2976 <sMO_runCycle+0x1768>
    292c:	05 c0       	rjmp	.+10     	; 0x2938 <sMO_runCycle+0x172a>
    292e:	8e 31       	cpi	r24, 0x1E	; 30
    2930:	a9 f0       	breq	.+42     	; 0x295c <sMO_runCycle+0x174e>
    2932:	8f 31       	cpi	r24, 0x1F	; 31
    2934:	01 f5       	brne	.+64     	; 0x2976 <sMO_runCycle+0x1768>
    2936:	19 c0       	rjmp	.+50     	; 0x296a <sMO_runCycle+0x175c>
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation : {
				/* Default exit sequence for state RequestConfirmation */
				handle->stateConfVector[1] = SMO_last_state;
    2938:	86 e2       	ldi	r24, 0x26	; 38
    293a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	9b 83       	std	Y+3, r25	; 0x03
    2942:	8a 83       	std	Y+2, r24	; 0x02
    2944:	18 c0       	rjmp	.+48     	; 0x2976 <sMO_runCycle+0x1768>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_Confirm : {
				/* Default exit sequence for state Confirm */
				handle->stateConfVector[1] = SMO_last_state;
    2946:	86 e2       	ldi	r24, 0x26	; 38
    2948:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	9b 83       	std	Y+3, r25	; 0x03
    2950:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'Confirm'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Confirm_time_event_0_raised) );		
    2952:	ce 01       	movw	r24, r28
    2954:	ce 96       	adiw	r24, 0x3e	; 62
    2956:	0e 94 c6 03 	call	0x78c	; 0x78c <sMO_unsetTimer>
    295a:	0d c0       	rjmp	.+26     	; 0x2976 <sMO_runCycle+0x1768>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress : {
				/* Default exit sequence for state CheckKeyPress */
				handle->stateConfVector[1] = SMO_last_state;
    295c:	86 e2       	ldi	r24, 0x26	; 38
    295e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	9b 83       	std	Y+3, r25	; 0x03
    2966:	8a 83       	std	Y+2, r24	; 0x02
    2968:	06 c0       	rjmp	.+12     	; 0x2976 <sMO_runCycle+0x1768>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    296a:	86 e2       	ldi	r24, 0x26	; 38
    296c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	9b 83       	std	Y+3, r25	; 0x03
    2974:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    2976:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    297a:	88 e0       	ldi	r24, 0x08	; 8
    297c:	92 e0       	ldi	r25, 0x02	; 2
    297e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    2982:	87 e1       	ldi	r24, 0x17	; 23
    2984:	92 e0       	ldi	r25, 0x02	; 2
    2986:	40 e0       	ldi	r20, 0x00	; 0
    2988:	50 e0       	ldi	r21, 0x00	; 0
    298a:	ba 01       	movw	r22, r20
    298c:	01 e0       	ldi	r16, 0x01	; 1
    298e:	10 e0       	ldi	r17, 0x00	; 0
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    2998:	1e a6       	lds	r17, 0xbe
    299a:	1f a6       	lds	r17, 0xbf
    299c:	18 aa       	sts	0x98, r17
    299e:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    29a0:	85 e0       	ldi	r24, 0x05	; 5
    29a2:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	9b 83       	std	Y+3, r25	; 0x03
    29aa:	8a 83       	std	Y+2, r24	; 0x02
    29ac:	9f c2       	rjmp	.+1342   	; 0x2eec <sMO_runCycle+0x1cde>
	}  else {
		if (handle->ifaceKEYPAD.lastkey == 12 && handle->ifaceKEYPAD.key_pressed_raised) { 
    29ae:	88 85       	ldd	r24, Y+8	; 0x08
    29b0:	99 85       	ldd	r25, Y+9	; 0x09
    29b2:	aa 85       	ldd	r26, Y+10	; 0x0a
    29b4:	bb 85       	ldd	r27, Y+11	; 0x0b
    29b6:	8c 30       	cpi	r24, 0x0C	; 12
    29b8:	91 05       	cpc	r25, r1
    29ba:	a1 05       	cpc	r26, r1
    29bc:	b1 05       	cpc	r27, r1
    29be:	e9 f4       	brne	.+58     	; 0x29fa <sMO_runCycle+0x17ec>
    29c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c2:	88 23       	and	r24, r24
    29c4:	21 f1       	breq	.+72     	; 0x2a0e <sMO_runCycle+0x1800>
			/* Default exit sequence for state CheckKeyPress */
			handle->stateConfVector[1] = SMO_last_state;
    29c6:	86 e2       	ldi	r24, 0x26	; 38
    29c8:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    29ca:	01 e0       	ldi	r16, 0x01	; 1
    29cc:	10 e0       	ldi	r17, 0x00	; 0
    29ce:	1b 83       	std	Y+3, r17	; 0x03
    29d0:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state Confirm */
			/* Entry action for state 'Confirm'. */
			sMO_setTimer( (sc_eventid) &(handle->timeEvents.Confirm_time_event_0_raised) , 3 * 1000, bool_false);
    29d2:	ce 01       	movw	r24, r28
    29d4:	ce 96       	adiw	r24, 0x3e	; 62
    29d6:	48 eb       	ldi	r20, 0xB8	; 184
    29d8:	5b e0       	ldi	r21, 0x0B	; 11
    29da:	60 e0       	ldi	r22, 0x00	; 0
    29dc:	70 e0       	ldi	r23, 0x00	; 0
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	0e 94 c3 03 	call	0x786	; 0x786 <sMO_setTimer>
			sMOIfaceLCD_clear();
    29e4:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
			sMOIfaceLCD_writeString("Sending");
    29e8:	81 e6       	ldi	r24, 0x61	; 97
    29ea:	92 e0       	ldi	r25, 0x02	; 2
    29ec:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_Confirm;
    29f0:	8d e1       	ldi	r24, 0x1D	; 29
    29f2:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    29f4:	1b 83       	std	Y+3, r17	; 0x03
    29f6:	0a 83       	std	Y+2, r16	; 0x02
    29f8:	79 c2       	rjmp	.+1266   	; 0x2eec <sMO_runCycle+0x1cde>
		}  else {
			if (handle->ifaceKEYPAD.lastkey == 12 || handle->ifaceKEYPAD.lastkey == 11 && handle->ifaceKEYPAD.key_pressed_raised) { 
    29fa:	8b 30       	cpi	r24, 0x0B	; 11
    29fc:	91 05       	cpc	r25, r1
    29fe:	a1 05       	cpc	r26, r1
    2a00:	b1 05       	cpc	r27, r1
    2a02:	09 f0       	breq	.+2      	; 0x2a06 <sMO_runCycle+0x17f8>
    2a04:	4a c2       	rjmp	.+1172   	; 0x2e9a <sMO_runCycle+0x1c8c>
    2a06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a08:	88 23       	and	r24, r24
    2a0a:	09 f4       	brne	.+2      	; 0x2a0e <sMO_runCycle+0x1800>
    2a0c:	46 c2       	rjmp	.+1164   	; 0x2e9a <sMO_runCycle+0x1c8c>
				/* Default exit sequence for state CheckKeyPress */
				handle->stateConfVector[1] = SMO_last_state;
				handle->stateConfVectorPosition = 1;
    2a0e:	1b 83       	std	Y+3, r17	; 0x03
    2a10:	0a 83       	std	Y+2, r16	; 0x02
				handle->iface.menuId = 0;
    2a12:	1e a6       	lds	r17, 0xbe
    2a14:	1f a6       	lds	r17, 0xbf
    2a16:	18 aa       	sts	0x98, r17
    2a18:	19 aa       	sts	0x99, r17
				/* Default enter sequence for state null */
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_;
    2a1a:	9f e1       	ldi	r25, 0x1F	; 31
    2a1c:	99 83       	std	Y+1, r25	; 0x01
    2a1e:	3d c2       	rjmp	.+1146   	; 0x2e9a <sMO_runCycle+0x1c8c>
}

/* The reactions of state null. */
static void sMO_react_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_0(SMO* handle) {
	/* The reactions of state null. */
	if (handle->iface.menuId == 0) { 
    2a20:	8e a5       	lds	r24, 0x6e
    2a22:	9f a5       	lds	r25, 0x6f
    2a24:	a8 a9       	sts	0x48, r26
    2a26:	b9 a9       	sts	0x49, r27
    2a28:	00 97       	sbiw	r24, 0x00	; 0
    2a2a:	a1 05       	cpc	r26, r1
    2a2c:	b1 05       	cpc	r27, r1
    2a2e:	09 f0       	breq	.+2      	; 0x2a32 <sMO_runCycle+0x1824>
    2a30:	34 c2       	rjmp	.+1128   	; 0x2e9a <sMO_runCycle+0x1c8c>
		/* Default exit sequence for state ConfirmRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2a32:	89 81       	ldd	r24, Y+1	; 0x01
    2a34:	8d 31       	cpi	r24, 0x1D	; 29
    2a36:	89 f0       	breq	.+34     	; 0x2a5a <sMO_runCycle+0x184c>
    2a38:	8e 31       	cpi	r24, 0x1E	; 30
    2a3a:	18 f4       	brcc	.+6      	; 0x2a42 <sMO_runCycle+0x1834>
    2a3c:	8c 31       	cpi	r24, 0x1C	; 28
    2a3e:	29 f5       	brne	.+74     	; 0x2a8a <sMO_runCycle+0x187c>
    2a40:	05 c0       	rjmp	.+10     	; 0x2a4c <sMO_runCycle+0x183e>
    2a42:	8e 31       	cpi	r24, 0x1E	; 30
    2a44:	a9 f0       	breq	.+42     	; 0x2a70 <sMO_runCycle+0x1862>
    2a46:	8f 31       	cpi	r24, 0x1F	; 31
    2a48:	01 f5       	brne	.+64     	; 0x2a8a <sMO_runCycle+0x187c>
    2a4a:	19 c0       	rjmp	.+50     	; 0x2a7e <sMO_runCycle+0x1870>
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation : {
				/* Default exit sequence for state RequestConfirmation */
				handle->stateConfVector[1] = SMO_last_state;
    2a4c:	86 e2       	ldi	r24, 0x26	; 38
    2a4e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	9b 83       	std	Y+3, r25	; 0x03
    2a56:	8a 83       	std	Y+2, r24	; 0x02
    2a58:	18 c0       	rjmp	.+48     	; 0x2a8a <sMO_runCycle+0x187c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_Confirm : {
				/* Default exit sequence for state Confirm */
				handle->stateConfVector[1] = SMO_last_state;
    2a5a:	86 e2       	ldi	r24, 0x26	; 38
    2a5c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	9b 83       	std	Y+3, r25	; 0x03
    2a64:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'Confirm'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Confirm_time_event_0_raised) );		
    2a66:	ce 01       	movw	r24, r28
    2a68:	ce 96       	adiw	r24, 0x3e	; 62
    2a6a:	0e 94 c6 03 	call	0x78c	; 0x78c <sMO_unsetTimer>
    2a6e:	0d c0       	rjmp	.+26     	; 0x2a8a <sMO_runCycle+0x187c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress : {
				/* Default exit sequence for state CheckKeyPress */
				handle->stateConfVector[1] = SMO_last_state;
    2a70:	86 e2       	ldi	r24, 0x26	; 38
    2a72:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	9b 83       	std	Y+3, r25	; 0x03
    2a7a:	8a 83       	std	Y+2, r24	; 0x02
    2a7c:	06 c0       	rjmp	.+12     	; 0x2a8a <sMO_runCycle+0x187c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2a7e:	86 e2       	ldi	r24, 0x26	; 38
    2a80:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	9b 83       	std	Y+3, r25	; 0x03
    2a88:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    2a8a:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    2a8e:	88 e0       	ldi	r24, 0x08	; 8
    2a90:	92 e0       	ldi	r25, 0x02	; 2
    2a92:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    2a96:	87 e1       	ldi	r24, 0x17	; 23
    2a98:	92 e0       	ldi	r25, 0x02	; 2
    2a9a:	40 e0       	ldi	r20, 0x00	; 0
    2a9c:	50 e0       	ldi	r21, 0x00	; 0
    2a9e:	ba 01       	movw	r22, r20
    2aa0:	01 e0       	ldi	r16, 0x01	; 1
    2aa2:	10 e0       	ldi	r17, 0x00	; 0
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    2aac:	1e a6       	lds	r17, 0xbe
    2aae:	1f a6       	lds	r17, 0xbf
    2ab0:	18 aa       	sts	0x98, r17
    2ab2:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    2ab4:	85 e0       	ldi	r24, 0x05	; 5
    2ab6:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	9b 83       	std	Y+3, r25	; 0x03
    2abe:	8a 83       	std	Y+2, r24	; 0x02
    2ac0:	15 c2       	rjmp	.+1066   	; 0x2eec <sMO_runCycle+0x1cde>
}

/* The reactions of state Send. */
static void sMO_react_main_region_on_r1_Running_running_main_SendRequest_r1_Send(SMO* handle) {
	/* The reactions of state Send. */
	if (handle->ifaceRF.result == bool_true) { 
    2ac2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac4:	88 23       	and	r24, r24
    2ac6:	09 f4       	brne	.+2      	; 0x2aca <sMO_runCycle+0x18bc>
    2ac8:	4d c0       	rjmp	.+154    	; 0x2b64 <sMO_runCycle+0x1956>
		/* Default exit sequence for state SendRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2aca:	89 81       	ldd	r24, Y+1	; 0x01
    2acc:	83 32       	cpi	r24, 0x23	; 35
    2ace:	d1 f0       	breq	.+52     	; 0x2b04 <sMO_runCycle+0x18f6>
    2ad0:	84 32       	cpi	r24, 0x24	; 36
    2ad2:	28 f4       	brcc	.+10     	; 0x2ade <sMO_runCycle+0x18d0>
    2ad4:	81 32       	cpi	r24, 0x21	; 33
    2ad6:	41 f0       	breq	.+16     	; 0x2ae8 <sMO_runCycle+0x18da>
    2ad8:	82 32       	cpi	r24, 0x22	; 34
    2ada:	61 f5       	brne	.+88     	; 0x2b34 <sMO_runCycle+0x1926>
    2adc:	0c c0       	rjmp	.+24     	; 0x2af6 <sMO_runCycle+0x18e8>
    2ade:	84 32       	cpi	r24, 0x24	; 36
    2ae0:	c1 f0       	breq	.+48     	; 0x2b12 <sMO_runCycle+0x1904>
    2ae2:	85 32       	cpi	r24, 0x25	; 37
    2ae4:	39 f5       	brne	.+78     	; 0x2b34 <sMO_runCycle+0x1926>
    2ae6:	20 c0       	rjmp	.+64     	; 0x2b28 <sMO_runCycle+0x191a>
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    2ae8:	86 e2       	ldi	r24, 0x26	; 38
    2aea:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	9b 83       	std	Y+3, r25	; 0x03
    2af2:	8a 83       	std	Y+2, r24	; 0x02
    2af4:	1f c0       	rjmp	.+62     	; 0x2b34 <sMO_runCycle+0x1926>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    2af6:	86 e2       	ldi	r24, 0x26	; 38
    2af8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	9b 83       	std	Y+3, r25	; 0x03
    2b00:	8a 83       	std	Y+2, r24	; 0x02
    2b02:	18 c0       	rjmp	.+48     	; 0x2b34 <sMO_runCycle+0x1926>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2b04:	86 e2       	ldi	r24, 0x26	; 38
    2b06:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	9b 83       	std	Y+3, r25	; 0x03
    2b0e:	8a 83       	std	Y+2, r24	; 0x02
    2b10:	11 c0       	rjmp	.+34     	; 0x2b34 <sMO_runCycle+0x1926>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2 : {
				/* Default exit sequence for state SendFail2 */
				handle->stateConfVector[1] = SMO_last_state;
    2b12:	86 e2       	ldi	r24, 0x26	; 38
    2b14:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	9b 83       	std	Y+3, r25	; 0x03
    2b1c:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail2'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail2_time_event_0_raised) );		
    2b1e:	ce 01       	movw	r24, r28
    2b20:	cf 96       	adiw	r24, 0x3f	; 63
    2b22:	0e 94 c6 03 	call	0x78c	; 0x78c <sMO_unsetTimer>
    2b26:	06 c0       	rjmp	.+12     	; 0x2b34 <sMO_runCycle+0x1926>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    2b28:	86 e2       	ldi	r24, 0x26	; 38
    2b2a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	9b 83       	std	Y+3, r25	; 0x03
    2b32:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state ConfirmRequest */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state RequestConfirmation */
		/* Entry action for state 'RequestConfirmation'. */
		sMOIfaceLCD_clear();
    2b34:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Proceed?");
    2b38:	8c e4       	ldi	r24, 0x4C	; 76
    2b3a:	92 e0       	ldi	r25, 0x02	; 2
    2b3c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("*-No  #-Yes", 0, 1);
    2b40:	85 e5       	ldi	r24, 0x55	; 85
    2b42:	92 e0       	ldi	r25, 0x02	; 2
    2b44:	40 e0       	ldi	r20, 0x00	; 0
    2b46:	50 e0       	ldi	r21, 0x00	; 0
    2b48:	ba 01       	movw	r22, r20
    2b4a:	01 e0       	ldi	r16, 0x01	; 1
    2b4c:	10 e0       	ldi	r17, 0x00	; 0
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation;
    2b56:	8c e1       	ldi	r24, 0x1C	; 28
    2b58:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	9b 83       	std	Y+3, r25	; 0x03
    2b60:	8a 83       	std	Y+2, r24	; 0x02
    2b62:	c4 c1       	rjmp	.+904    	; 0x2eec <sMO_runCycle+0x1cde>
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Check;
			handle->stateConfVectorPosition = 1;
		}  else {
			if (handle->ifaceRF.result == bool_false) { 
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    2b64:	86 e2       	ldi	r24, 0x26	; 38
    2b66:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2b68:	01 e0       	ldi	r16, 0x01	; 1
    2b6a:	10 e0       	ldi	r17, 0x00	; 0
    2b6c:	1b 83       	std	Y+3, r17	; 0x03
    2b6e:	0a 83       	std	Y+2, r16	; 0x02
				/* Default enter sequence for state SendFail2 */
				/* Entry action for state 'SendFail2'. */
				sMO_setTimer( (sc_eventid) &(handle->timeEvents.SendFail2_time_event_0_raised) , 2 * 1000, bool_false);
    2b70:	ce 01       	movw	r24, r28
    2b72:	cf 96       	adiw	r24, 0x3f	; 63
    2b74:	40 ed       	ldi	r20, 0xD0	; 208
    2b76:	57 e0       	ldi	r21, 0x07	; 7
    2b78:	60 e0       	ldi	r22, 0x00	; 0
    2b7a:	70 e0       	ldi	r23, 0x00	; 0
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	0e 94 c3 03 	call	0x786	; 0x786 <sMO_setTimer>
				sMOIfaceLCD_clear();
    2b82:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
				sMOIfaceLCD_writeString("Send fail");
    2b86:	82 e4       	ldi	r24, 0x42	; 66
    2b88:	92 e0       	ldi	r25, 0x02	; 2
    2b8a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2;
    2b8e:	84 e2       	ldi	r24, 0x24	; 36
    2b90:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2b92:	1b 83       	std	Y+3, r17	; 0x03
    2b94:	0a 83       	std	Y+2, r16	; 0x02
    2b96:	aa c1       	rjmp	.+852    	; 0x2eec <sMO_runCycle+0x1cde>
}

/* The reactions of state Check. */
static void sMO_react_main_region_on_r1_Running_running_main_SendRequest_r1_Check(SMO* handle) {
	/* The reactions of state Check. */
	if (handle->ifaceRF.result == bool_true) { 
    2b98:	8f 89       	ldd	r24, Y+23	; 0x17
    2b9a:	88 23       	and	r24, r24
    2b9c:	09 f4       	brne	.+2      	; 0x2ba0 <sMO_runCycle+0x1992>
    2b9e:	4d c0       	rjmp	.+154    	; 0x2c3a <sMO_runCycle+0x1a2c>
		/* Default exit sequence for state SendRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2ba0:	89 81       	ldd	r24, Y+1	; 0x01
    2ba2:	83 32       	cpi	r24, 0x23	; 35
    2ba4:	d1 f0       	breq	.+52     	; 0x2bda <sMO_runCycle+0x19cc>
    2ba6:	84 32       	cpi	r24, 0x24	; 36
    2ba8:	28 f4       	brcc	.+10     	; 0x2bb4 <sMO_runCycle+0x19a6>
    2baa:	81 32       	cpi	r24, 0x21	; 33
    2bac:	41 f0       	breq	.+16     	; 0x2bbe <sMO_runCycle+0x19b0>
    2bae:	82 32       	cpi	r24, 0x22	; 34
    2bb0:	61 f5       	brne	.+88     	; 0x2c0a <sMO_runCycle+0x19fc>
    2bb2:	0c c0       	rjmp	.+24     	; 0x2bcc <sMO_runCycle+0x19be>
    2bb4:	84 32       	cpi	r24, 0x24	; 36
    2bb6:	c1 f0       	breq	.+48     	; 0x2be8 <sMO_runCycle+0x19da>
    2bb8:	85 32       	cpi	r24, 0x25	; 37
    2bba:	39 f5       	brne	.+78     	; 0x2c0a <sMO_runCycle+0x19fc>
    2bbc:	20 c0       	rjmp	.+64     	; 0x2bfe <sMO_runCycle+0x19f0>
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    2bbe:	86 e2       	ldi	r24, 0x26	; 38
    2bc0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	9b 83       	std	Y+3, r25	; 0x03
    2bc8:	8a 83       	std	Y+2, r24	; 0x02
    2bca:	1f c0       	rjmp	.+62     	; 0x2c0a <sMO_runCycle+0x19fc>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    2bcc:	86 e2       	ldi	r24, 0x26	; 38
    2bce:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	9b 83       	std	Y+3, r25	; 0x03
    2bd6:	8a 83       	std	Y+2, r24	; 0x02
    2bd8:	18 c0       	rjmp	.+48     	; 0x2c0a <sMO_runCycle+0x19fc>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2bda:	86 e2       	ldi	r24, 0x26	; 38
    2bdc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2bde:	81 e0       	ldi	r24, 0x01	; 1
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	9b 83       	std	Y+3, r25	; 0x03
    2be4:	8a 83       	std	Y+2, r24	; 0x02
    2be6:	11 c0       	rjmp	.+34     	; 0x2c0a <sMO_runCycle+0x19fc>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2 : {
				/* Default exit sequence for state SendFail2 */
				handle->stateConfVector[1] = SMO_last_state;
    2be8:	86 e2       	ldi	r24, 0x26	; 38
    2bea:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	9b 83       	std	Y+3, r25	; 0x03
    2bf2:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail2'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail2_time_event_0_raised) );		
    2bf4:	ce 01       	movw	r24, r28
    2bf6:	cf 96       	adiw	r24, 0x3f	; 63
    2bf8:	0e 94 c6 03 	call	0x78c	; 0x78c <sMO_unsetTimer>
    2bfc:	06 c0       	rjmp	.+12     	; 0x2c0a <sMO_runCycle+0x19fc>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    2bfe:	86 e2       	ldi	r24, 0x26	; 38
    2c00:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	9b 83       	std	Y+3, r25	; 0x03
    2c08:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state ConfirmRequest */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state RequestConfirmation */
		/* Entry action for state 'RequestConfirmation'. */
		sMOIfaceLCD_clear();
    2c0a:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Proceed?");
    2c0e:	8c e4       	ldi	r24, 0x4C	; 76
    2c10:	92 e0       	ldi	r25, 0x02	; 2
    2c12:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("*-No  #-Yes", 0, 1);
    2c16:	85 e5       	ldi	r24, 0x55	; 85
    2c18:	92 e0       	ldi	r25, 0x02	; 2
    2c1a:	40 e0       	ldi	r20, 0x00	; 0
    2c1c:	50 e0       	ldi	r21, 0x00	; 0
    2c1e:	ba 01       	movw	r22, r20
    2c20:	01 e0       	ldi	r16, 0x01	; 1
    2c22:	10 e0       	ldi	r17, 0x00	; 0
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation;
    2c2c:	8c e1       	ldi	r24, 0x1C	; 28
    2c2e:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	9b 83       	std	Y+3, r25	; 0x03
    2c36:	8a 83       	std	Y+2, r24	; 0x02
    2c38:	59 c1       	rjmp	.+690    	; 0x2eec <sMO_runCycle+0x1cde>
	}  else {
		if (handle->ifaceRF.result == bool_false) { 
			/* Default exit sequence for state Check */
			handle->stateConfVector[1] = SMO_last_state;
    2c3a:	86 e2       	ldi	r24, 0x26	; 38
    2c3c:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    2c3e:	01 e0       	ldi	r16, 0x01	; 1
    2c40:	10 e0       	ldi	r17, 0x00	; 0
    2c42:	1b 83       	std	Y+3, r17	; 0x03
    2c44:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state Send */
			/* Entry action for state 'Send'. */
			handle->ifaceRF.retry += 1;
    2c46:	88 8d       	ldd	r24, Y+24	; 0x18
    2c48:	99 8d       	ldd	r25, Y+25	; 0x19
    2c4a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2c4c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2c4e:	01 96       	adiw	r24, 0x01	; 1
    2c50:	a1 1d       	adc	r26, r1
    2c52:	b1 1d       	adc	r27, r1
    2c54:	88 8f       	std	Y+24, r24	; 0x18
    2c56:	99 8f       	std	Y+25, r25	; 0x19
    2c58:	aa 8f       	std	Y+26, r26	; 0x1a
    2c5a:	bb 8f       	std	Y+27, r27	; 0x1b
			handle->ifaceRF.result = sMOIfaceRF_sendConf(handle->iface.menuId, handle->iface.tableId);
    2c5c:	6e a5       	lds	r22, 0x6e
    2c5e:	7f a5       	lds	r23, 0x6f
    2c60:	88 a9       	sts	0x48, r24
    2c62:	99 a9       	sts	0x49, r25
    2c64:	2a a9       	sts	0x4a, r18
    2c66:	3b a9       	sts	0x4b, r19
    2c68:	4c a9       	sts	0x4c, r20
    2c6a:	5d a9       	sts	0x4d, r21
    2c6c:	0e 94 96 03 	call	0x72c	; 0x72c <sMOIfaceRF_sendConf>
    2c70:	8f 8b       	std	Y+23, r24	; 0x17
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Send;
    2c72:	81 e2       	ldi	r24, 0x21	; 33
    2c74:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    2c76:	1b 83       	std	Y+3, r17	; 0x03
    2c78:	0a 83       	std	Y+2, r16	; 0x02
    2c7a:	38 c1       	rjmp	.+624    	; 0x2eec <sMO_runCycle+0x1cde>
}

/* The reactions of state null. */
static void sMO_react_main_region_on_r1_Running_running_main_SendRequest_r1__final_0(SMO* handle) {
	/* The reactions of state null. */
	if (handle->ifaceRF.result == bool_true) { 
    2c7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c7e:	88 23       	and	r24, r24
    2c80:	09 f4       	brne	.+2      	; 0x2c84 <sMO_runCycle+0x1a76>
    2c82:	0b c1       	rjmp	.+534    	; 0x2e9a <sMO_runCycle+0x1c8c>
		/* Default exit sequence for state SendRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	83 32       	cpi	r24, 0x23	; 35
    2c88:	d1 f0       	breq	.+52     	; 0x2cbe <sMO_runCycle+0x1ab0>
    2c8a:	84 32       	cpi	r24, 0x24	; 36
    2c8c:	28 f4       	brcc	.+10     	; 0x2c98 <sMO_runCycle+0x1a8a>
    2c8e:	81 32       	cpi	r24, 0x21	; 33
    2c90:	41 f0       	breq	.+16     	; 0x2ca2 <sMO_runCycle+0x1a94>
    2c92:	82 32       	cpi	r24, 0x22	; 34
    2c94:	61 f5       	brne	.+88     	; 0x2cee <sMO_runCycle+0x1ae0>
    2c96:	0c c0       	rjmp	.+24     	; 0x2cb0 <sMO_runCycle+0x1aa2>
    2c98:	84 32       	cpi	r24, 0x24	; 36
    2c9a:	c1 f0       	breq	.+48     	; 0x2ccc <sMO_runCycle+0x1abe>
    2c9c:	85 32       	cpi	r24, 0x25	; 37
    2c9e:	39 f5       	brne	.+78     	; 0x2cee <sMO_runCycle+0x1ae0>
    2ca0:	20 c0       	rjmp	.+64     	; 0x2ce2 <sMO_runCycle+0x1ad4>
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    2ca2:	86 e2       	ldi	r24, 0x26	; 38
    2ca4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	9b 83       	std	Y+3, r25	; 0x03
    2cac:	8a 83       	std	Y+2, r24	; 0x02
    2cae:	1f c0       	rjmp	.+62     	; 0x2cee <sMO_runCycle+0x1ae0>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    2cb0:	86 e2       	ldi	r24, 0x26	; 38
    2cb2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	9b 83       	std	Y+3, r25	; 0x03
    2cba:	8a 83       	std	Y+2, r24	; 0x02
    2cbc:	18 c0       	rjmp	.+48     	; 0x2cee <sMO_runCycle+0x1ae0>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2cbe:	86 e2       	ldi	r24, 0x26	; 38
    2cc0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	9b 83       	std	Y+3, r25	; 0x03
    2cc8:	8a 83       	std	Y+2, r24	; 0x02
    2cca:	11 c0       	rjmp	.+34     	; 0x2cee <sMO_runCycle+0x1ae0>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2 : {
				/* Default exit sequence for state SendFail2 */
				handle->stateConfVector[1] = SMO_last_state;
    2ccc:	86 e2       	ldi	r24, 0x26	; 38
    2cce:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	9b 83       	std	Y+3, r25	; 0x03
    2cd6:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail2'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail2_time_event_0_raised) );		
    2cd8:	ce 01       	movw	r24, r28
    2cda:	cf 96       	adiw	r24, 0x3f	; 63
    2cdc:	0e 94 c6 03 	call	0x78c	; 0x78c <sMO_unsetTimer>
    2ce0:	06 c0       	rjmp	.+12     	; 0x2cee <sMO_runCycle+0x1ae0>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    2ce2:	86 e2       	ldi	r24, 0x26	; 38
    2ce4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	9b 83       	std	Y+3, r25	; 0x03
    2cec:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state ConfirmRequest */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state RequestConfirmation */
		/* Entry action for state 'RequestConfirmation'. */
		sMOIfaceLCD_clear();
    2cee:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Proceed?");
    2cf2:	8c e4       	ldi	r24, 0x4C	; 76
    2cf4:	92 e0       	ldi	r25, 0x02	; 2
    2cf6:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("*-No  #-Yes", 0, 1);
    2cfa:	85 e5       	ldi	r24, 0x55	; 85
    2cfc:	92 e0       	ldi	r25, 0x02	; 2
    2cfe:	40 e0       	ldi	r20, 0x00	; 0
    2d00:	50 e0       	ldi	r21, 0x00	; 0
    2d02:	ba 01       	movw	r22, r20
    2d04:	01 e0       	ldi	r16, 0x01	; 1
    2d06:	10 e0       	ldi	r17, 0x00	; 0
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation;
    2d10:	8c e1       	ldi	r24, 0x1C	; 28
    2d12:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2d14:	81 e0       	ldi	r24, 0x01	; 1
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	9b 83       	std	Y+3, r25	; 0x03
    2d1a:	8a 83       	std	Y+2, r24	; 0x02
    2d1c:	e7 c0       	rjmp	.+462    	; 0x2eec <sMO_runCycle+0x1cde>
}

/* The reactions of state SendFail2. */
static void sMO_react_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2(SMO* handle) {
	/* The reactions of state SendFail2. */
	if (handle->ifaceRF.result == bool_true) { 
    2d1e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d20:	88 23       	and	r24, r24
    2d22:	09 f4       	brne	.+2      	; 0x2d26 <sMO_runCycle+0x1b18>
    2d24:	4d c0       	rjmp	.+154    	; 0x2dc0 <sMO_runCycle+0x1bb2>
		/* Default exit sequence for state SendRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2d26:	89 81       	ldd	r24, Y+1	; 0x01
    2d28:	83 32       	cpi	r24, 0x23	; 35
    2d2a:	d1 f0       	breq	.+52     	; 0x2d60 <sMO_runCycle+0x1b52>
    2d2c:	84 32       	cpi	r24, 0x24	; 36
    2d2e:	28 f4       	brcc	.+10     	; 0x2d3a <sMO_runCycle+0x1b2c>
    2d30:	81 32       	cpi	r24, 0x21	; 33
    2d32:	41 f0       	breq	.+16     	; 0x2d44 <sMO_runCycle+0x1b36>
    2d34:	82 32       	cpi	r24, 0x22	; 34
    2d36:	61 f5       	brne	.+88     	; 0x2d90 <sMO_runCycle+0x1b82>
    2d38:	0c c0       	rjmp	.+24     	; 0x2d52 <sMO_runCycle+0x1b44>
    2d3a:	84 32       	cpi	r24, 0x24	; 36
    2d3c:	c1 f0       	breq	.+48     	; 0x2d6e <sMO_runCycle+0x1b60>
    2d3e:	85 32       	cpi	r24, 0x25	; 37
    2d40:	39 f5       	brne	.+78     	; 0x2d90 <sMO_runCycle+0x1b82>
    2d42:	20 c0       	rjmp	.+64     	; 0x2d84 <sMO_runCycle+0x1b76>
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    2d44:	86 e2       	ldi	r24, 0x26	; 38
    2d46:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	9b 83       	std	Y+3, r25	; 0x03
    2d4e:	8a 83       	std	Y+2, r24	; 0x02
    2d50:	1f c0       	rjmp	.+62     	; 0x2d90 <sMO_runCycle+0x1b82>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    2d52:	86 e2       	ldi	r24, 0x26	; 38
    2d54:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	9b 83       	std	Y+3, r25	; 0x03
    2d5c:	8a 83       	std	Y+2, r24	; 0x02
    2d5e:	18 c0       	rjmp	.+48     	; 0x2d90 <sMO_runCycle+0x1b82>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2d60:	86 e2       	ldi	r24, 0x26	; 38
    2d62:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	9b 83       	std	Y+3, r25	; 0x03
    2d6a:	8a 83       	std	Y+2, r24	; 0x02
    2d6c:	11 c0       	rjmp	.+34     	; 0x2d90 <sMO_runCycle+0x1b82>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2 : {
				/* Default exit sequence for state SendFail2 */
				handle->stateConfVector[1] = SMO_last_state;
    2d6e:	86 e2       	ldi	r24, 0x26	; 38
    2d70:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2d72:	81 e0       	ldi	r24, 0x01	; 1
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	9b 83       	std	Y+3, r25	; 0x03
    2d78:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail2'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail2_time_event_0_raised) );		
    2d7a:	ce 01       	movw	r24, r28
    2d7c:	cf 96       	adiw	r24, 0x3f	; 63
    2d7e:	0e 94 c6 03 	call	0x78c	; 0x78c <sMO_unsetTimer>
    2d82:	06 c0       	rjmp	.+12     	; 0x2d90 <sMO_runCycle+0x1b82>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    2d84:	86 e2       	ldi	r24, 0x26	; 38
    2d86:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	9b 83       	std	Y+3, r25	; 0x03
    2d8e:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state ConfirmRequest */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state RequestConfirmation */
		/* Entry action for state 'RequestConfirmation'. */
		sMOIfaceLCD_clear();
    2d90:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Proceed?");
    2d94:	8c e4       	ldi	r24, 0x4C	; 76
    2d96:	92 e0       	ldi	r25, 0x02	; 2
    2d98:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("*-No  #-Yes", 0, 1);
    2d9c:	85 e5       	ldi	r24, 0x55	; 85
    2d9e:	92 e0       	ldi	r25, 0x02	; 2
    2da0:	40 e0       	ldi	r20, 0x00	; 0
    2da2:	50 e0       	ldi	r21, 0x00	; 0
    2da4:	ba 01       	movw	r22, r20
    2da6:	01 e0       	ldi	r16, 0x01	; 1
    2da8:	10 e0       	ldi	r17, 0x00	; 0
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation;
    2db2:	8c e1       	ldi	r24, 0x1C	; 28
    2db4:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2db6:	81 e0       	ldi	r24, 0x01	; 1
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	9b 83       	std	Y+3, r25	; 0x03
    2dbc:	8a 83       	std	Y+2, r24	; 0x02
    2dbe:	96 c0       	rjmp	.+300    	; 0x2eec <sMO_runCycle+0x1cde>
	}  else {
		if (handle->timeEvents.SendFail2_time_event_0_raised) { 
    2dc0:	8f ad       	sts	0x6f, r24
    2dc2:	88 23       	and	r24, r24
    2dc4:	09 f4       	brne	.+2      	; 0x2dc8 <sMO_runCycle+0x1bba>
    2dc6:	69 c0       	rjmp	.+210    	; 0x2e9a <sMO_runCycle+0x1c8c>
			/* Default exit sequence for state SendFail2 */
			handle->stateConfVector[1] = SMO_last_state;
    2dc8:	86 e2       	ldi	r24, 0x26	; 38
    2dca:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    2dcc:	01 e0       	ldi	r16, 0x01	; 1
    2dce:	10 e0       	ldi	r17, 0x00	; 0
    2dd0:	1b 83       	std	Y+3, r17	; 0x03
    2dd2:	0a 83       	std	Y+2, r16	; 0x02
			/* Exit action for state 'SendFail2'. */
			sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail2_time_event_0_raised) );		
    2dd4:	ce 01       	movw	r24, r28
    2dd6:	cf 96       	adiw	r24, 0x3f	; 63
    2dd8:	0e 94 c6 03 	call	0x78c	; 0x78c <sMO_unsetTimer>
			/* Default enter sequence for state ResetResult */
			/* Entry action for state 'ResetResult'. */
			handle->ifaceRF.result = bool_true;
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	8f 8b       	std	Y+23, r24	; 0x17
			handle->ifaceRF.retry = 0;
    2de0:	18 8e       	std	Y+24, r1	; 0x18
    2de2:	19 8e       	std	Y+25, r1	; 0x19
    2de4:	1a 8e       	std	Y+26, r1	; 0x1a
    2de6:	1b 8e       	std	Y+27, r1	; 0x1b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult;
    2de8:	85 e2       	ldi	r24, 0x25	; 37
    2dea:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    2dec:	1b 83       	std	Y+3, r17	; 0x03
    2dee:	0a 83       	std	Y+2, r16	; 0x02
    2df0:	7d c0       	rjmp	.+250    	; 0x2eec <sMO_runCycle+0x1cde>
}

/* The reactions of state ResetResult. */
static void sMO_react_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult(SMO* handle) {
	/* The reactions of state ResetResult. */
	if (handle->ifaceRF.result == bool_true) { 
    2df2:	8f 89       	ldd	r24, Y+23	; 0x17
    2df4:	88 23       	and	r24, r24
    2df6:	09 f4       	brne	.+2      	; 0x2dfa <sMO_runCycle+0x1bec>
    2df8:	4d c0       	rjmp	.+154    	; 0x2e94 <sMO_runCycle+0x1c86>
		/* Default exit sequence for state SendRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2dfa:	89 81       	ldd	r24, Y+1	; 0x01
    2dfc:	83 32       	cpi	r24, 0x23	; 35
    2dfe:	d1 f0       	breq	.+52     	; 0x2e34 <sMO_runCycle+0x1c26>
    2e00:	84 32       	cpi	r24, 0x24	; 36
    2e02:	28 f4       	brcc	.+10     	; 0x2e0e <sMO_runCycle+0x1c00>
    2e04:	81 32       	cpi	r24, 0x21	; 33
    2e06:	41 f0       	breq	.+16     	; 0x2e18 <sMO_runCycle+0x1c0a>
    2e08:	82 32       	cpi	r24, 0x22	; 34
    2e0a:	61 f5       	brne	.+88     	; 0x2e64 <sMO_runCycle+0x1c56>
    2e0c:	0c c0       	rjmp	.+24     	; 0x2e26 <sMO_runCycle+0x1c18>
    2e0e:	84 32       	cpi	r24, 0x24	; 36
    2e10:	c1 f0       	breq	.+48     	; 0x2e42 <sMO_runCycle+0x1c34>
    2e12:	85 32       	cpi	r24, 0x25	; 37
    2e14:	39 f5       	brne	.+78     	; 0x2e64 <sMO_runCycle+0x1c56>
    2e16:	20 c0       	rjmp	.+64     	; 0x2e58 <sMO_runCycle+0x1c4a>
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    2e18:	86 e2       	ldi	r24, 0x26	; 38
    2e1a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	9b 83       	std	Y+3, r25	; 0x03
    2e22:	8a 83       	std	Y+2, r24	; 0x02
    2e24:	1f c0       	rjmp	.+62     	; 0x2e64 <sMO_runCycle+0x1c56>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    2e26:	86 e2       	ldi	r24, 0x26	; 38
    2e28:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	9b 83       	std	Y+3, r25	; 0x03
    2e30:	8a 83       	std	Y+2, r24	; 0x02
    2e32:	18 c0       	rjmp	.+48     	; 0x2e64 <sMO_runCycle+0x1c56>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2e34:	86 e2       	ldi	r24, 0x26	; 38
    2e36:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	9b 83       	std	Y+3, r25	; 0x03
    2e3e:	8a 83       	std	Y+2, r24	; 0x02
    2e40:	11 c0       	rjmp	.+34     	; 0x2e64 <sMO_runCycle+0x1c56>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2 : {
				/* Default exit sequence for state SendFail2 */
				handle->stateConfVector[1] = SMO_last_state;
    2e42:	86 e2       	ldi	r24, 0x26	; 38
    2e44:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	9b 83       	std	Y+3, r25	; 0x03
    2e4c:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail2'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail2_time_event_0_raised) );		
    2e4e:	ce 01       	movw	r24, r28
    2e50:	cf 96       	adiw	r24, 0x3f	; 63
    2e52:	0e 94 c6 03 	call	0x78c	; 0x78c <sMO_unsetTimer>
    2e56:	06 c0       	rjmp	.+12     	; 0x2e64 <sMO_runCycle+0x1c56>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    2e58:	86 e2       	ldi	r24, 0x26	; 38
    2e5a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	9b 83       	std	Y+3, r25	; 0x03
    2e62:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state ConfirmRequest */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state RequestConfirmation */
		/* Entry action for state 'RequestConfirmation'. */
		sMOIfaceLCD_clear();
    2e64:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Proceed?");
    2e68:	8c e4       	ldi	r24, 0x4C	; 76
    2e6a:	92 e0       	ldi	r25, 0x02	; 2
    2e6c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("*-No  #-Yes", 0, 1);
    2e70:	85 e5       	ldi	r24, 0x55	; 85
    2e72:	92 e0       	ldi	r25, 0x02	; 2
    2e74:	40 e0       	ldi	r20, 0x00	; 0
    2e76:	50 e0       	ldi	r21, 0x00	; 0
    2e78:	ba 01       	movw	r22, r20
    2e7a:	01 e0       	ldi	r16, 0x01	; 1
    2e7c:	10 e0       	ldi	r17, 0x00	; 0
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation;
    2e86:	8c e1       	ldi	r24, 0x1C	; 28
    2e88:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	9b 83       	std	Y+3, r25	; 0x03
    2e90:	8a 83       	std	Y+2, r24	; 0x02
    2e92:	2c c0       	rjmp	.+88     	; 0x2eec <sMO_runCycle+0x1cde>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state ResetResult */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    2e94:	1b 83       	std	Y+3, r17	; 0x03
    2e96:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state null */
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_;
    2e98:	39 82       	std	Y+1, r3	; 0x01
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
    2e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e9e:	01 96       	adiw	r24, 0x01	; 1
    2ea0:	9b 83       	std	Y+3, r25	; 0x03
    2ea2:	8a 83       	std	Y+2, r24	; 0x02

void sMO_runCycle(SMO* handle) {
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
    2ea4:	82 30       	cpi	r24, 0x02	; 2
    2ea6:	91 05       	cpc	r25, r1
    2ea8:	10 f4       	brcc	.+4      	; 0x2eae <sMO_runCycle+0x1ca0>
    2eaa:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <sMO_runCycle+0x68>
	}
	sMO_exitaction(handle);
}

static void clearInEvents(SMO* handle) {
	handle->ifaceKEYPAD.key_pressed_raised = bool_false;
    2eae:	1d 86       	std	Y+13, r1	; 0x0d
	handle->ifaceUART.DataRecieved_raised = bool_false;
    2eb0:	1a 8a       	std	Y+18, r1	; 0x12
	handle->ifaceRF.DataRecieved_raised = bool_false;
    2eb2:	18 a2       	lds	r17, 0x98
	handle->iface.switchOff_raised = bool_false;
    2eb4:	1a ae       	sts	0xba, r17
	handle->iface.switchOn_raised = bool_false;
    2eb6:	1b ae       	sts	0xbb, r17
			break;
		}
	}
	
	clearInEvents(handle);
}
    2eb8:	df 91       	pop	r29
    2eba:	cf 91       	pop	r28
    2ebc:	1f 91       	pop	r17
    2ebe:	0f 91       	pop	r16
    2ec0:	ff 90       	pop	r15
    2ec2:	ef 90       	pop	r14
    2ec4:	df 90       	pop	r13
    2ec6:	cf 90       	pop	r12
    2ec8:	bf 90       	pop	r11
    2eca:	af 90       	pop	r10
    2ecc:	9f 90       	pop	r9
    2ece:	8f 90       	pop	r8
    2ed0:	7f 90       	pop	r7
    2ed2:	6f 90       	pop	r6
    2ed4:	5f 90       	pop	r5
    2ed6:	4f 90       	pop	r4
    2ed8:	3f 90       	pop	r3
    2eda:	2f 90       	pop	r2
    2edc:	08 95       	ret
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
    2ede:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ee2:	01 96       	adiw	r24, 0x01	; 1
    2ee4:	9b 83       	std	Y+3, r25	; 0x03
    2ee6:	8a 83       	std	Y+2, r24	; 0x02
    2ee8:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <sMO_runCycle+0x68>
    2eec:	8a 81       	ldd	r24, Y+2	; 0x02
    2eee:	9b 81       	ldd	r25, Y+3	; 0x03
    2ef0:	01 96       	adiw	r24, 0x01	; 1
    2ef2:	9b 83       	std	Y+3, r25	; 0x03
    2ef4:	8a 83       	std	Y+2, r24	; 0x02
    2ef6:	db cf       	rjmp	.-74     	; 0x2eae <sMO_runCycle+0x1ca0>

00002ef8 <sMO_raiseTimeEvent>:
	
	clearInEvents(handle);
}

void sMO_raiseTimeEvent(SMO* handle, sc_eventid evid) {
	if ( ((intptr_t)evid) >= ((intptr_t)&(handle->timeEvents))
    2ef8:	cc 96       	adiw	r24, 0x3c	; 60
    2efa:	68 17       	cp	r22, r24
    2efc:	79 07       	cpc	r23, r25
    2efe:	3c f0       	brlt	.+14     	; 0x2f0e <sMO_raiseTimeEvent+0x16>
		&&  ((intptr_t)evid) < ((intptr_t)&(handle->timeEvents)) + sizeof(SMOTimeEvents)) {
    2f00:	04 96       	adiw	r24, 0x04	; 4
    2f02:	68 17       	cp	r22, r24
    2f04:	79 07       	cpc	r23, r25
    2f06:	18 f4       	brcc	.+6      	; 0x2f0e <sMO_raiseTimeEvent+0x16>
		*(sc_boolean*)evid = bool_true;
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	fb 01       	movw	r30, r22
    2f0c:	80 83       	st	Z, r24
    2f0e:	08 95       	ret

00002f10 <sMO_isActive>:
	}		
}

sc_boolean sMO_isActive(SMO* handle, SMOStates state) {
    2f10:	dc 01       	movw	r26, r24
	switch (state) {
    2f12:	e6 2f       	mov	r30, r22
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	e6 32       	cpi	r30, 0x26	; 38
    2f18:	f1 05       	cpc	r31, r1
    2f1a:	08 f0       	brcs	.+2      	; 0x2f1e <sMO_isActive+0xe>
    2f1c:	51 c1       	rjmp	.+674    	; 0x31c0 <sMO_isActive+0x2b0>
    2f1e:	e4 57       	subi	r30, 0x74	; 116
    2f20:	ff 4f       	sbci	r31, 0xFF	; 255
    2f22:	ee 0f       	add	r30, r30
    2f24:	ff 1f       	adc	r31, r31
    2f26:	05 90       	lpm	r0, Z+
    2f28:	f4 91       	lpm	r31, Z
    2f2a:	e0 2d       	mov	r30, r0
    2f2c:	09 94       	ijmp
		case SMO_main_region_on : 
			return (sc_boolean) (handle->stateConfVector[0] >= SMO_main_region_on
    2f2e:	81 e0       	ldi	r24, 0x01	; 1
    2f30:	9c 91       	ld	r25, X
    2f32:	96 32       	cpi	r25, 0x26	; 38
    2f34:	08 f4       	brcc	.+2      	; 0x2f38 <sMO_isActive+0x28>
    2f36:	45 c1       	rjmp	.+650    	; 0x31c2 <sMO_isActive+0x2b2>
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	08 95       	ret
				&& handle->stateConfVector[0] <= SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult);
		case SMO_main_region_on_r1_Init : 
			return (sc_boolean) (handle->stateConfVector[0] == SMO_main_region_on_r1_Init
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	9c 91       	ld	r25, X
    2f40:	91 30       	cpi	r25, 0x01	; 1
    2f42:	09 f4       	brne	.+2      	; 0x2f46 <sMO_isActive+0x36>
    2f44:	3e c1       	rjmp	.+636    	; 0x31c2 <sMO_isActive+0x2b2>
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running : 
			return (sc_boolean) (handle->stateConfVector[0] >= SMO_main_region_on_r1_Running
    2f4a:	9c 91       	ld	r25, X
    2f4c:	92 50       	subi	r25, 0x02	; 2
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	94 32       	cpi	r25, 0x24	; 36
    2f52:	08 f4       	brcc	.+2      	; 0x2f56 <sMO_isActive+0x46>
    2f54:	36 c1       	rjmp	.+620    	; 0x31c2 <sMO_isActive+0x2b2>
    2f56:	80 e0       	ldi	r24, 0x00	; 0
    2f58:	08 95       	ret
				&& handle->stateConfVector[0] <= SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult);
		case SMO_main_region_on_r1_Running_keypad_CheckKey : 
			return (sc_boolean) (handle->stateConfVector[0] == SMO_main_region_on_r1_Running_keypad_CheckKey
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	9c 91       	ld	r25, X
    2f5e:	93 30       	cpi	r25, 0x03	; 3
    2f60:	09 f4       	brne	.+2      	; 0x2f64 <sMO_isActive+0x54>
    2f62:	2f c1       	rjmp	.+606    	; 0x31c2 <sMO_isActive+0x2b2>
    2f64:	80 e0       	ldi	r24, 0x00	; 0
    2f66:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_keypad_CheckKeyDown : 
			return (sc_boolean) (handle->stateConfVector[0] == SMO_main_region_on_r1_Running_keypad_CheckKeyDown
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	9c 91       	ld	r25, X
    2f6c:	94 30       	cpi	r25, 0x04	; 4
    2f6e:	09 f4       	brne	.+2      	; 0x2f72 <sMO_isActive+0x62>
    2f70:	28 c1       	rjmp	.+592    	; 0x31c2 <sMO_isActive+0x2b2>
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_ShowMenu : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_ShowMenu
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	11 96       	adiw	r26, 0x01	; 1
    2f7a:	9c 91       	ld	r25, X
    2f7c:	11 97       	sbiw	r26, 0x01	; 1
    2f7e:	95 30       	cpi	r25, 0x05	; 5
    2f80:	09 f4       	brne	.+2      	; 0x2f84 <sMO_isActive+0x74>
    2f82:	1f c1       	rjmp	.+574    	; 0x31c2 <sMO_isActive+0x2b2>
    2f84:	80 e0       	ldi	r24, 0x00	; 0
    2f86:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData : 
			return (sc_boolean) (handle->stateConfVector[1] >= SMO_main_region_on_r1_Running_running_main_EnterData
    2f88:	11 96       	adiw	r26, 0x01	; 1
    2f8a:	9c 91       	ld	r25, X
    2f8c:	11 97       	sbiw	r26, 0x01	; 1
    2f8e:	96 50       	subi	r25, 0x06	; 6
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	9a 30       	cpi	r25, 0x0A	; 10
    2f94:	08 f4       	brcc	.+2      	; 0x2f98 <sMO_isActive+0x88>
    2f96:	15 c1       	rjmp	.+554    	; 0x31c2 <sMO_isActive+0x2b2>
    2f98:	80 e0       	ldi	r24, 0x00	; 0
    2f9a:	08 95       	ret
				&& handle->stateConfVector[1] <= SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	11 96       	adiw	r26, 0x01	; 1
    2fa0:	9c 91       	ld	r25, X
    2fa2:	11 97       	sbiw	r26, 0x01	; 1
    2fa4:	97 30       	cpi	r25, 0x07	; 7
    2fa6:	09 f4       	brne	.+2      	; 0x2faa <sMO_isActive+0x9a>
    2fa8:	0c c1       	rjmp	.+536    	; 0x31c2 <sMO_isActive+0x2b2>
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	11 96       	adiw	r26, 0x01	; 1
    2fb2:	9c 91       	ld	r25, X
    2fb4:	11 97       	sbiw	r26, 0x01	; 1
    2fb6:	98 30       	cpi	r25, 0x08	; 8
    2fb8:	09 f4       	brne	.+2      	; 0x2fbc <sMO_isActive+0xac>
    2fba:	03 c1       	rjmp	.+518    	; 0x31c2 <sMO_isActive+0x2b2>
    2fbc:	80 e0       	ldi	r24, 0x00	; 0
    2fbe:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	11 96       	adiw	r26, 0x01	; 1
    2fc4:	9c 91       	ld	r25, X
    2fc6:	11 97       	sbiw	r26, 0x01	; 1
    2fc8:	99 30       	cpi	r25, 0x09	; 9
    2fca:	09 f4       	brne	.+2      	; 0x2fce <sMO_isActive+0xbe>
    2fcc:	fa c0       	rjmp	.+500    	; 0x31c2 <sMO_isActive+0x2b2>
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0
    2fd2:	81 e0       	ldi	r24, 0x01	; 1
    2fd4:	11 96       	adiw	r26, 0x01	; 1
    2fd6:	9c 91       	ld	r25, X
    2fd8:	11 97       	sbiw	r26, 0x01	; 1
    2fda:	9a 30       	cpi	r25, 0x0A	; 10
    2fdc:	09 f4       	brne	.+2      	; 0x2fe0 <sMO_isActive+0xd0>
    2fde:	f1 c0       	rjmp	.+482    	; 0x31c2 <sMO_isActive+0x2b2>
    2fe0:	80 e0       	ldi	r24, 0x00	; 0
    2fe2:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	11 96       	adiw	r26, 0x01	; 1
    2fe8:	9c 91       	ld	r25, X
    2fea:	11 97       	sbiw	r26, 0x01	; 1
    2fec:	9b 30       	cpi	r25, 0x0B	; 11
    2fee:	09 f4       	brne	.+2      	; 0x2ff2 <sMO_isActive+0xe2>
    2ff0:	e8 c0       	rjmp	.+464    	; 0x31c2 <sMO_isActive+0x2b2>
    2ff2:	80 e0       	ldi	r24, 0x00	; 0
    2ff4:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2
    2ff6:	81 e0       	ldi	r24, 0x01	; 1
    2ff8:	11 96       	adiw	r26, 0x01	; 1
    2ffa:	9c 91       	ld	r25, X
    2ffc:	11 97       	sbiw	r26, 0x01	; 1
    2ffe:	9c 30       	cpi	r25, 0x0C	; 12
    3000:	09 f4       	brne	.+2      	; 0x3004 <sMO_isActive+0xf4>
    3002:	df c0       	rjmp	.+446    	; 0x31c2 <sMO_isActive+0x2b2>
    3004:	80 e0       	ldi	r24, 0x00	; 0
    3006:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	11 96       	adiw	r26, 0x01	; 1
    300c:	9c 91       	ld	r25, X
    300e:	11 97       	sbiw	r26, 0x01	; 1
    3010:	9d 30       	cpi	r25, 0x0D	; 13
    3012:	09 f4       	brne	.+2      	; 0x3016 <sMO_isActive+0x106>
    3014:	d6 c0       	rjmp	.+428    	; 0x31c2 <sMO_isActive+0x2b2>
    3016:	80 e0       	ldi	r24, 0x00	; 0
    3018:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	11 96       	adiw	r26, 0x01	; 1
    301e:	9c 91       	ld	r25, X
    3020:	11 97       	sbiw	r26, 0x01	; 1
    3022:	9e 30       	cpi	r25, 0x0E	; 14
    3024:	09 f4       	brne	.+2      	; 0x3028 <sMO_isActive+0x118>
    3026:	cd c0       	rjmp	.+410    	; 0x31c2 <sMO_isActive+0x2b2>
    3028:	80 e0       	ldi	r24, 0x00	; 0
    302a:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_
    302c:	81 e0       	ldi	r24, 0x01	; 1
    302e:	11 96       	adiw	r26, 0x01	; 1
    3030:	9c 91       	ld	r25, X
    3032:	11 97       	sbiw	r26, 0x01	; 1
    3034:	9f 30       	cpi	r25, 0x0F	; 15
    3036:	09 f4       	brne	.+2      	; 0x303a <sMO_isActive+0x12a>
    3038:	c4 c0       	rjmp	.+392    	; 0x31c2 <sMO_isActive+0x2b2>
    303a:	80 e0       	ldi	r24, 0x00	; 0
    303c:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_MenuA : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_MenuA
    303e:	81 e0       	ldi	r24, 0x01	; 1
    3040:	11 96       	adiw	r26, 0x01	; 1
    3042:	9c 91       	ld	r25, X
    3044:	11 97       	sbiw	r26, 0x01	; 1
    3046:	90 31       	cpi	r25, 0x10	; 16
    3048:	09 f4       	brne	.+2      	; 0x304c <sMO_isActive+0x13c>
    304a:	bb c0       	rjmp	.+374    	; 0x31c2 <sMO_isActive+0x2b2>
    304c:	80 e0       	ldi	r24, 0x00	; 0
    304e:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_CheckKeyPress : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_CheckKeyPress
    3050:	81 e0       	ldi	r24, 0x01	; 1
    3052:	11 96       	adiw	r26, 0x01	; 1
    3054:	9c 91       	ld	r25, X
    3056:	11 97       	sbiw	r26, 0x01	; 1
    3058:	91 31       	cpi	r25, 0x11	; 17
    305a:	09 f4       	brne	.+2      	; 0x305e <sMO_isActive+0x14e>
    305c:	b2 c0       	rjmp	.+356    	; 0x31c2 <sMO_isActive+0x2b2>
    305e:	80 e0       	ldi	r24, 0x00	; 0
    3060:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendData : 
			return (sc_boolean) (handle->stateConfVector[1] >= SMO_main_region_on_r1_Running_running_main_SendData
    3062:	11 96       	adiw	r26, 0x01	; 1
    3064:	9c 91       	ld	r25, X
    3066:	11 97       	sbiw	r26, 0x01	; 1
    3068:	92 51       	subi	r25, 0x12	; 18
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	96 30       	cpi	r25, 0x06	; 6
    306e:	08 f4       	brcc	.+2      	; 0x3072 <sMO_isActive+0x162>
    3070:	a8 c0       	rjmp	.+336    	; 0x31c2 <sMO_isActive+0x2b2>
    3072:	80 e0       	ldi	r24, 0x00	; 0
    3074:	08 95       	ret
				&& handle->stateConfVector[1] <= SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult);
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendData_r1_Send
    3076:	81 e0       	ldi	r24, 0x01	; 1
    3078:	11 96       	adiw	r26, 0x01	; 1
    307a:	9c 91       	ld	r25, X
    307c:	11 97       	sbiw	r26, 0x01	; 1
    307e:	93 31       	cpi	r25, 0x13	; 19
    3080:	09 f4       	brne	.+2      	; 0x3084 <sMO_isActive+0x174>
    3082:	9f c0       	rjmp	.+318    	; 0x31c2 <sMO_isActive+0x2b2>
    3084:	80 e0       	ldi	r24, 0x00	; 0
    3086:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendData_r1_Check
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	11 96       	adiw	r26, 0x01	; 1
    308c:	9c 91       	ld	r25, X
    308e:	11 97       	sbiw	r26, 0x01	; 1
    3090:	94 31       	cpi	r25, 0x14	; 20
    3092:	09 f4       	brne	.+2      	; 0x3096 <sMO_isActive+0x186>
    3094:	96 c0       	rjmp	.+300    	; 0x31c2 <sMO_isActive+0x2b2>
    3096:	80 e0       	ldi	r24, 0x00	; 0
    3098:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendData_r1__final_
    309a:	81 e0       	ldi	r24, 0x01	; 1
    309c:	11 96       	adiw	r26, 0x01	; 1
    309e:	9c 91       	ld	r25, X
    30a0:	11 97       	sbiw	r26, 0x01	; 1
    30a2:	95 31       	cpi	r25, 0x15	; 21
    30a4:	09 f4       	brne	.+2      	; 0x30a8 <sMO_isActive+0x198>
    30a6:	8d c0       	rjmp	.+282    	; 0x31c2 <sMO_isActive+0x2b2>
    30a8:	80 e0       	ldi	r24, 0x00	; 0
    30aa:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail1 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail1
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	11 96       	adiw	r26, 0x01	; 1
    30b0:	9c 91       	ld	r25, X
    30b2:	11 97       	sbiw	r26, 0x01	; 1
    30b4:	96 31       	cpi	r25, 0x16	; 22
    30b6:	09 f4       	brne	.+2      	; 0x30ba <sMO_isActive+0x1aa>
    30b8:	84 c0       	rjmp	.+264    	; 0x31c2 <sMO_isActive+0x2b2>
    30ba:	80 e0       	ldi	r24, 0x00	; 0
    30bc:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult
    30be:	81 e0       	ldi	r24, 0x01	; 1
    30c0:	11 96       	adiw	r26, 0x01	; 1
    30c2:	9c 91       	ld	r25, X
    30c4:	11 97       	sbiw	r26, 0x01	; 1
    30c6:	97 31       	cpi	r25, 0x17	; 23
    30c8:	09 f4       	brne	.+2      	; 0x30cc <sMO_isActive+0x1bc>
    30ca:	7b c0       	rjmp	.+246    	; 0x31c2 <sMO_isActive+0x2b2>
    30cc:	80 e0       	ldi	r24, 0x00	; 0
    30ce:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_MenuB : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_MenuB
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	11 96       	adiw	r26, 0x01	; 1
    30d4:	9c 91       	ld	r25, X
    30d6:	11 97       	sbiw	r26, 0x01	; 1
    30d8:	98 31       	cpi	r25, 0x18	; 24
    30da:	09 f4       	brne	.+2      	; 0x30de <sMO_isActive+0x1ce>
    30dc:	72 c0       	rjmp	.+228    	; 0x31c2 <sMO_isActive+0x2b2>
    30de:	80 e0       	ldi	r24, 0x00	; 0
    30e0:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_MenuC : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_MenuC
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	11 96       	adiw	r26, 0x01	; 1
    30e6:	9c 91       	ld	r25, X
    30e8:	11 97       	sbiw	r26, 0x01	; 1
    30ea:	99 31       	cpi	r25, 0x19	; 25
    30ec:	09 f4       	brne	.+2      	; 0x30f0 <sMO_isActive+0x1e0>
    30ee:	69 c0       	rjmp	.+210    	; 0x31c2 <sMO_isActive+0x2b2>
    30f0:	80 e0       	ldi	r24, 0x00	; 0
    30f2:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_MenuD : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_MenuD
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	11 96       	adiw	r26, 0x01	; 1
    30f8:	9c 91       	ld	r25, X
    30fa:	11 97       	sbiw	r26, 0x01	; 1
    30fc:	9a 31       	cpi	r25, 0x1A	; 26
    30fe:	09 f4       	brne	.+2      	; 0x3102 <sMO_isActive+0x1f2>
    3100:	60 c0       	rjmp	.+192    	; 0x31c2 <sMO_isActive+0x2b2>
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_ConfirmRequest : 
			return (sc_boolean) (handle->stateConfVector[1] >= SMO_main_region_on_r1_Running_running_main_ConfirmRequest
    3106:	11 96       	adiw	r26, 0x01	; 1
    3108:	9c 91       	ld	r25, X
    310a:	11 97       	sbiw	r26, 0x01	; 1
    310c:	9b 51       	subi	r25, 0x1B	; 27
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	95 30       	cpi	r25, 0x05	; 5
    3112:	08 f4       	brcc	.+2      	; 0x3116 <sMO_isActive+0x206>
    3114:	56 c0       	rjmp	.+172    	; 0x31c2 <sMO_isActive+0x2b2>
    3116:	80 e0       	ldi	r24, 0x00	; 0
    3118:	08 95       	ret
				&& handle->stateConfVector[1] <= SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_);
		case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation
    311a:	81 e0       	ldi	r24, 0x01	; 1
    311c:	11 96       	adiw	r26, 0x01	; 1
    311e:	9c 91       	ld	r25, X
    3120:	11 97       	sbiw	r26, 0x01	; 1
    3122:	9c 31       	cpi	r25, 0x1C	; 28
    3124:	09 f4       	brne	.+2      	; 0x3128 <sMO_isActive+0x218>
    3126:	4d c0       	rjmp	.+154    	; 0x31c2 <sMO_isActive+0x2b2>
    3128:	80 e0       	ldi	r24, 0x00	; 0
    312a:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_Confirm : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_Confirm
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	11 96       	adiw	r26, 0x01	; 1
    3130:	9c 91       	ld	r25, X
    3132:	11 97       	sbiw	r26, 0x01	; 1
    3134:	9d 31       	cpi	r25, 0x1D	; 29
    3136:	09 f4       	brne	.+2      	; 0x313a <sMO_isActive+0x22a>
    3138:	44 c0       	rjmp	.+136    	; 0x31c2 <sMO_isActive+0x2b2>
    313a:	80 e0       	ldi	r24, 0x00	; 0
    313c:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress
    313e:	81 e0       	ldi	r24, 0x01	; 1
    3140:	11 96       	adiw	r26, 0x01	; 1
    3142:	9c 91       	ld	r25, X
    3144:	11 97       	sbiw	r26, 0x01	; 1
    3146:	9e 31       	cpi	r25, 0x1E	; 30
    3148:	e1 f1       	breq	.+120    	; 0x31c2 <sMO_isActive+0x2b2>
    314a:	80 e0       	ldi	r24, 0x00	; 0
    314c:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_ : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_
    314e:	81 e0       	ldi	r24, 0x01	; 1
    3150:	11 96       	adiw	r26, 0x01	; 1
    3152:	9c 91       	ld	r25, X
    3154:	11 97       	sbiw	r26, 0x01	; 1
    3156:	9f 31       	cpi	r25, 0x1F	; 31
    3158:	a1 f1       	breq	.+104    	; 0x31c2 <sMO_isActive+0x2b2>
    315a:	80 e0       	ldi	r24, 0x00	; 0
    315c:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendRequest : 
			return (sc_boolean) (handle->stateConfVector[1] >= SMO_main_region_on_r1_Running_running_main_SendRequest
    315e:	11 96       	adiw	r26, 0x01	; 1
    3160:	9c 91       	ld	r25, X
    3162:	11 97       	sbiw	r26, 0x01	; 1
    3164:	90 52       	subi	r25, 0x20	; 32
    3166:	81 e0       	ldi	r24, 0x01	; 1
    3168:	96 30       	cpi	r25, 0x06	; 6
    316a:	58 f1       	brcs	.+86     	; 0x31c2 <sMO_isActive+0x2b2>
    316c:	80 e0       	ldi	r24, 0x00	; 0
    316e:	08 95       	ret
				&& handle->stateConfVector[1] <= SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult);
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Send : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Send
    3170:	81 e0       	ldi	r24, 0x01	; 1
    3172:	11 96       	adiw	r26, 0x01	; 1
    3174:	9c 91       	ld	r25, X
    3176:	11 97       	sbiw	r26, 0x01	; 1
    3178:	91 32       	cpi	r25, 0x21	; 33
    317a:	19 f1       	breq	.+70     	; 0x31c2 <sMO_isActive+0x2b2>
    317c:	80 e0       	ldi	r24, 0x00	; 0
    317e:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Check : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Check
    3180:	81 e0       	ldi	r24, 0x01	; 1
    3182:	11 96       	adiw	r26, 0x01	; 1
    3184:	9c 91       	ld	r25, X
    3186:	11 97       	sbiw	r26, 0x01	; 1
    3188:	92 32       	cpi	r25, 0x22	; 34
    318a:	d9 f0       	breq	.+54     	; 0x31c2 <sMO_isActive+0x2b2>
    318c:	80 e0       	ldi	r24, 0x00	; 0
    318e:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_ : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_
    3190:	81 e0       	ldi	r24, 0x01	; 1
    3192:	11 96       	adiw	r26, 0x01	; 1
    3194:	9c 91       	ld	r25, X
    3196:	11 97       	sbiw	r26, 0x01	; 1
    3198:	93 32       	cpi	r25, 0x23	; 35
    319a:	99 f0       	breq	.+38     	; 0x31c2 <sMO_isActive+0x2b2>
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	11 96       	adiw	r26, 0x01	; 1
    31a4:	9c 91       	ld	r25, X
    31a6:	11 97       	sbiw	r26, 0x01	; 1
    31a8:	94 32       	cpi	r25, 0x24	; 36
    31aa:	59 f0       	breq	.+22     	; 0x31c2 <sMO_isActive+0x2b2>
    31ac:	80 e0       	ldi	r24, 0x00	; 0
    31ae:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult
    31b0:	81 e0       	ldi	r24, 0x01	; 1
    31b2:	11 96       	adiw	r26, 0x01	; 1
    31b4:	9c 91       	ld	r25, X
    31b6:	11 97       	sbiw	r26, 0x01	; 1
    31b8:	95 32       	cpi	r25, 0x25	; 37
    31ba:	19 f0       	breq	.+6      	; 0x31c2 <sMO_isActive+0x2b2>
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	08 95       	ret
			);
		default: return bool_false;
    31c0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    31c2:	08 95       	ret

000031c4 <sMOIfaceKEYPAD_raise_key_pressed>:



void sMOIfaceKEYPAD_raise_key_pressed(SMO* handle) {
	handle->ifaceKEYPAD.key_pressed_raised = bool_true;
    31c4:	21 e0       	ldi	r18, 0x01	; 1
    31c6:	fc 01       	movw	r30, r24
    31c8:	25 87       	std	Z+13, r18	; 0x0d
}
    31ca:	08 95       	ret

000031cc <sMOIfaceKEYPAD_get_key>:


sc_integer sMOIfaceKEYPAD_get_key(SMO* handle) {
    31cc:	fc 01       	movw	r30, r24
	return handle->ifaceKEYPAD.key;
    31ce:	64 81       	ldd	r22, Z+4	; 0x04
    31d0:	75 81       	ldd	r23, Z+5	; 0x05
}
    31d2:	86 81       	ldd	r24, Z+6	; 0x06
    31d4:	97 81       	ldd	r25, Z+7	; 0x07
    31d6:	08 95       	ret

000031d8 <sMOIfaceKEYPAD_set_key>:
void sMOIfaceKEYPAD_set_key(SMO* handle, sc_integer value) {
	handle->ifaceKEYPAD.key = value;
    31d8:	fc 01       	movw	r30, r24
    31da:	44 83       	std	Z+4, r20	; 0x04
    31dc:	55 83       	std	Z+5, r21	; 0x05
    31de:	66 83       	std	Z+6, r22	; 0x06
    31e0:	77 83       	std	Z+7, r23	; 0x07
}
    31e2:	08 95       	ret

000031e4 <sMOIfaceKEYPAD_get_lastkey>:
sc_integer sMOIfaceKEYPAD_get_lastkey(SMO* handle) {
    31e4:	fc 01       	movw	r30, r24
	return handle->ifaceKEYPAD.lastkey;
    31e6:	60 85       	ldd	r22, Z+8	; 0x08
    31e8:	71 85       	ldd	r23, Z+9	; 0x09
}
    31ea:	82 85       	ldd	r24, Z+10	; 0x0a
    31ec:	93 85       	ldd	r25, Z+11	; 0x0b
    31ee:	08 95       	ret

000031f0 <sMOIfaceKEYPAD_set_lastkey>:
void sMOIfaceKEYPAD_set_lastkey(SMO* handle, sc_integer value) {
	handle->ifaceKEYPAD.lastkey = value;
    31f0:	fc 01       	movw	r30, r24
    31f2:	40 87       	std	Z+8, r20	; 0x08
    31f4:	51 87       	std	Z+9, r21	; 0x09
    31f6:	62 87       	std	Z+10, r22	; 0x0a
    31f8:	73 87       	std	Z+11, r23	; 0x0b
}
    31fa:	08 95       	ret

000031fc <sMOIfaceKEYPAD_get_key_down>:
sc_boolean sMOIfaceKEYPAD_get_key_down(SMO* handle) {
	return handle->ifaceKEYPAD.key_down;
}
    31fc:	fc 01       	movw	r30, r24
    31fe:	84 85       	ldd	r24, Z+12	; 0x0c
    3200:	08 95       	ret

00003202 <sMOIfaceKEYPAD_set_key_down>:
void sMOIfaceKEYPAD_set_key_down(SMO* handle, sc_boolean value) {
	handle->ifaceKEYPAD.key_down = value;
    3202:	fc 01       	movw	r30, r24
    3204:	64 87       	std	Z+12, r22	; 0x0c
}
    3206:	08 95       	ret

00003208 <sMOIfaceUART_raise_dataRecieved>:
void sMOIfaceUART_raise_dataRecieved(SMO* handle) {
	handle->ifaceUART.DataRecieved_raised = bool_true;
    3208:	21 e0       	ldi	r18, 0x01	; 1
    320a:	fc 01       	movw	r30, r24
    320c:	22 8b       	std	Z+18, r18	; 0x12
}
    320e:	08 95       	ret

00003210 <sMOIfaceUART_get_data>:


sc_string sMOIfaceUART_get_data(SMO* handle) {
    3210:	fc 01       	movw	r30, r24
	return handle->ifaceUART.data;
}
    3212:	86 85       	ldd	r24, Z+14	; 0x0e
    3214:	97 85       	ldd	r25, Z+15	; 0x0f
    3216:	08 95       	ret

00003218 <sMOIfaceUART_set_data>:
void sMOIfaceUART_set_data(SMO* handle, sc_string value) {
	handle->ifaceUART.data = value;
    3218:	fc 01       	movw	r30, r24
    321a:	77 87       	std	Z+15, r23	; 0x0f
    321c:	66 87       	std	Z+14, r22	; 0x0e
}
    321e:	08 95       	ret

00003220 <sMOIfaceUART_get_lastdata>:
sc_string sMOIfaceUART_get_lastdata(SMO* handle) {
    3220:	fc 01       	movw	r30, r24
	return handle->ifaceUART.lastdata;
}
    3222:	80 89       	ldd	r24, Z+16	; 0x10
    3224:	91 89       	ldd	r25, Z+17	; 0x11
    3226:	08 95       	ret

00003228 <sMOIfaceUART_set_lastdata>:
void sMOIfaceUART_set_lastdata(SMO* handle, sc_string value) {
	handle->ifaceUART.lastdata = value;
    3228:	fc 01       	movw	r30, r24
    322a:	71 8b       	std	Z+17, r23	; 0x11
    322c:	60 8b       	std	Z+16, r22	; 0x10
}
    322e:	08 95       	ret

00003230 <sMOIfaceRF_raise_dataRecieved>:
void sMOIfaceRF_raise_dataRecieved(SMO* handle) {
	handle->ifaceRF.DataRecieved_raised = bool_true;
    3230:	21 e0       	ldi	r18, 0x01	; 1
    3232:	fc 01       	movw	r30, r24
    3234:	20 a3       	lds	r18, 0x50
}
    3236:	08 95       	ret

00003238 <sMOIfaceRF_get_data>:


sc_string sMOIfaceRF_get_data(SMO* handle) {
    3238:	fc 01       	movw	r30, r24
	return handle->ifaceRF.data;
}
    323a:	83 89       	ldd	r24, Z+19	; 0x13
    323c:	94 89       	ldd	r25, Z+20	; 0x14
    323e:	08 95       	ret

00003240 <sMOIfaceRF_set_data>:
void sMOIfaceRF_set_data(SMO* handle, sc_string value) {
	handle->ifaceRF.data = value;
    3240:	fc 01       	movw	r30, r24
    3242:	74 8b       	std	Z+20, r23	; 0x14
    3244:	63 8b       	std	Z+19, r22	; 0x13
}
    3246:	08 95       	ret

00003248 <sMOIfaceRF_get_lastdata>:
sc_string sMOIfaceRF_get_lastdata(SMO* handle) {
    3248:	fc 01       	movw	r30, r24
	return handle->ifaceRF.lastdata;
}
    324a:	85 89       	ldd	r24, Z+21	; 0x15
    324c:	96 89       	ldd	r25, Z+22	; 0x16
    324e:	08 95       	ret

00003250 <sMOIfaceRF_set_lastdata>:
void sMOIfaceRF_set_lastdata(SMO* handle, sc_string value) {
	handle->ifaceRF.lastdata = value;
    3250:	fc 01       	movw	r30, r24
    3252:	76 8b       	std	Z+22, r23	; 0x16
    3254:	65 8b       	std	Z+21, r22	; 0x15
}
    3256:	08 95       	ret

00003258 <sMOIfaceRF_get_result>:
sc_boolean sMOIfaceRF_get_result(SMO* handle) {
	return handle->ifaceRF.result;
}
    3258:	fc 01       	movw	r30, r24
    325a:	87 89       	ldd	r24, Z+23	; 0x17
    325c:	08 95       	ret

0000325e <sMOIfaceRF_set_result>:
void sMOIfaceRF_set_result(SMO* handle, sc_boolean value) {
	handle->ifaceRF.result = value;
    325e:	fc 01       	movw	r30, r24
    3260:	67 8b       	std	Z+23, r22	; 0x17
}
    3262:	08 95       	ret

00003264 <sMOIfaceRF_get_retry>:
sc_integer sMOIfaceRF_get_retry(SMO* handle) {
    3264:	fc 01       	movw	r30, r24
	return handle->ifaceRF.retry;
    3266:	60 8d       	ldd	r22, Z+24	; 0x18
    3268:	71 8d       	ldd	r23, Z+25	; 0x19
}
    326a:	82 8d       	ldd	r24, Z+26	; 0x1a
    326c:	93 8d       	ldd	r25, Z+27	; 0x1b
    326e:	08 95       	ret

00003270 <sMOIfaceRF_set_retry>:
void sMOIfaceRF_set_retry(SMO* handle, sc_integer value) {
	handle->ifaceRF.retry = value;
    3270:	fc 01       	movw	r30, r24
    3272:	40 8f       	std	Z+24, r20	; 0x18
    3274:	51 8f       	std	Z+25, r21	; 0x19
    3276:	62 8f       	std	Z+26, r22	; 0x1a
    3278:	73 8f       	std	Z+27, r23	; 0x1b
}
    327a:	08 95       	ret

0000327c <sMOIfaceRF_get_iD>:
sc_integer sMOIfaceRF_get_iD(SMO* handle) {
    327c:	fc 01       	movw	r30, r24
	return handle->ifaceRF.ID;
    327e:	64 8d       	ldd	r22, Z+28	; 0x1c
    3280:	75 8d       	ldd	r23, Z+29	; 0x1d
}
    3282:	86 8d       	ldd	r24, Z+30	; 0x1e
    3284:	97 8d       	ldd	r25, Z+31	; 0x1f
    3286:	08 95       	ret

00003288 <sMOIfaceRF_set_iD>:
void sMOIfaceRF_set_iD(SMO* handle, sc_integer value) {
	handle->ifaceRF.ID = value;
    3288:	fc 01       	movw	r30, r24
    328a:	44 8f       	std	Z+28, r20	; 0x1c
    328c:	55 8f       	std	Z+29, r21	; 0x1d
    328e:	66 8f       	std	Z+30, r22	; 0x1e
    3290:	77 8f       	std	Z+31, r23	; 0x1f
}
    3292:	08 95       	ret

00003294 <sMOIfaceDISH_get_iD>:


sc_integer sMOIfaceDISH_get_iD(SMO* handle) {
    3294:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.ID;
    3296:	61 a1       	lds	r22, 0x41
    3298:	72 a1       	lds	r23, 0x42
}
    329a:	83 a1       	lds	r24, 0x43
    329c:	94 a1       	lds	r25, 0x44
    329e:	08 95       	ret

000032a0 <sMOIfaceDISH_set_iD>:
void sMOIfaceDISH_set_iD(SMO* handle, sc_integer value) {
	handle->ifaceDISH.ID = value;
    32a0:	fc 01       	movw	r30, r24
    32a2:	41 a3       	lds	r20, 0x51
    32a4:	52 a3       	lds	r21, 0x52
    32a6:	63 a3       	lds	r22, 0x53
    32a8:	74 a3       	lds	r23, 0x54
}
    32aa:	08 95       	ret

000032ac <sMOIfaceDISH_get_amount>:
sc_integer sMOIfaceDISH_get_amount(SMO* handle) {
    32ac:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.amount;
    32ae:	65 a1       	lds	r22, 0x45
    32b0:	76 a1       	lds	r23, 0x46
}
    32b2:	87 a1       	lds	r24, 0x47
    32b4:	90 a5       	lds	r25, 0x60
    32b6:	08 95       	ret

000032b8 <sMOIfaceDISH_set_amount>:
void sMOIfaceDISH_set_amount(SMO* handle, sc_integer value) {
	handle->ifaceDISH.amount = value;
    32b8:	fc 01       	movw	r30, r24
    32ba:	45 a3       	lds	r20, 0x55
    32bc:	56 a3       	lds	r21, 0x56
    32be:	67 a3       	lds	r22, 0x57
    32c0:	70 a7       	lds	r23, 0x70
}
    32c2:	08 95       	ret

000032c4 <sMOIfaceDISH_get_pos>:
sc_integer sMOIfaceDISH_get_pos(SMO* handle) {
    32c4:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.pos;
    32c6:	61 a5       	lds	r22, 0x61
    32c8:	72 a5       	lds	r23, 0x62
}
    32ca:	83 a5       	lds	r24, 0x63
    32cc:	94 a5       	lds	r25, 0x64
    32ce:	08 95       	ret

000032d0 <sMOIfaceDISH_set_pos>:
void sMOIfaceDISH_set_pos(SMO* handle, sc_integer value) {
	handle->ifaceDISH.pos = value;
    32d0:	fc 01       	movw	r30, r24
    32d2:	41 a7       	lds	r20, 0x71
    32d4:	52 a7       	lds	r21, 0x72
    32d6:	63 a7       	lds	r22, 0x73
    32d8:	74 a7       	lds	r23, 0x74
}
    32da:	08 95       	ret

000032dc <sMOIface_raise_switchOff>:
void sMOIface_raise_switchOff(SMO* handle) {
	handle->iface.switchOff_raised = bool_true;
    32dc:	21 e0       	ldi	r18, 0x01	; 1
    32de:	fc 01       	movw	r30, r24
    32e0:	22 af       	sts	0x72, r18
}
    32e2:	08 95       	ret

000032e4 <sMOIface_raise_switchOn>:
void sMOIface_raise_switchOn(SMO* handle) {
	handle->iface.switchOn_raised = bool_true;
    32e4:	21 e0       	ldi	r18, 0x01	; 1
    32e6:	fc 01       	movw	r30, r24
    32e8:	23 af       	sts	0x73, r18
}
    32ea:	08 95       	ret

000032ec <sMOIface_get_lightOn>:


sc_boolean sMOIface_get_lightOn(SMO* handle) {
	return handle->iface.lightOn;
}
    32ec:	fc 01       	movw	r30, r24
    32ee:	85 a5       	lds	r24, 0x65
    32f0:	08 95       	ret

000032f2 <sMOIface_set_lightOn>:
void sMOIface_set_lightOn(SMO* handle, sc_boolean value) {
	handle->iface.lightOn = value;
    32f2:	fc 01       	movw	r30, r24
    32f4:	65 a7       	lds	r22, 0x75
}
    32f6:	08 95       	ret

000032f8 <sMOIface_get_menuId>:
sc_integer sMOIface_get_menuId(SMO* handle) {
    32f8:	fc 01       	movw	r30, r24
	return handle->iface.menuId;
    32fa:	66 a5       	lds	r22, 0x66
    32fc:	77 a5       	lds	r23, 0x67
}
    32fe:	80 a9       	sts	0x40, r24
    3300:	91 a9       	sts	0x41, r25
    3302:	08 95       	ret

00003304 <sMOIface_set_menuId>:
void sMOIface_set_menuId(SMO* handle, sc_integer value) {
	handle->iface.menuId = value;
    3304:	fc 01       	movw	r30, r24
    3306:	46 a7       	lds	r20, 0x76
    3308:	57 a7       	lds	r21, 0x77
    330a:	60 ab       	sts	0x50, r22
    330c:	71 ab       	sts	0x51, r23
}
    330e:	08 95       	ret

00003310 <sMOIface_get_tableId>:
sc_integer sMOIface_get_tableId(SMO* handle) {
    3310:	fc 01       	movw	r30, r24
	return handle->iface.tableId;
    3312:	62 a9       	sts	0x42, r22
    3314:	73 a9       	sts	0x43, r23
}
    3316:	84 a9       	sts	0x44, r24
    3318:	95 a9       	sts	0x45, r25
    331a:	08 95       	ret

0000331c <sMOIface_set_tableId>:
void sMOIface_set_tableId(SMO* handle, sc_integer value) {
	handle->iface.tableId = value;
    331c:	fc 01       	movw	r30, r24
    331e:	42 ab       	sts	0x52, r20
    3320:	53 ab       	sts	0x53, r21
    3322:	64 ab       	sts	0x54, r22
    3324:	75 ab       	sts	0x55, r23
}
    3326:	08 95       	ret

00003328 <sMOIface_get_confirmId>:
sc_integer sMOIface_get_confirmId(SMO* handle) {
    3328:	fc 01       	movw	r30, r24
	return handle->iface.confirmId;
    332a:	66 a9       	sts	0x46, r22
    332c:	77 a9       	sts	0x47, r23
}
    332e:	80 ad       	sts	0x60, r24
    3330:	91 ad       	sts	0x61, r25
    3332:	08 95       	ret

00003334 <sMOIface_set_confirmId>:
void sMOIface_set_confirmId(SMO* handle, sc_integer value) {
	handle->iface.confirmId = value;
    3334:	fc 01       	movw	r30, r24
    3336:	46 ab       	sts	0x56, r20
    3338:	57 ab       	sts	0x57, r21
    333a:	60 af       	sts	0x70, r22
    333c:	71 af       	sts	0x71, r23
}
    333e:	08 95       	ret

00003340 <spi_init>:

/*
 * spi initialize
 */
void spi_init() {
    SPI_DDR &= ~((1<<SPI_MOSI) | (1<<SPI_MISO) | (1<<SPI_SS) | (1<<SPI_SCK)); //input
    3340:	87 b3       	in	r24, 0x17	; 23
    3342:	80 7f       	andi	r24, 0xF0	; 240
    3344:	87 bb       	out	0x17, r24	; 23
    SPI_DDR |= ((1<<SPI_MOSI) | (1<<SPI_SS) | (1<<SPI_SCK)); //output
    3346:	87 b3       	in	r24, 0x17	; 23
    3348:	87 60       	ori	r24, 0x07	; 7
    334a:	87 bb       	out	0x17, r24	; 23

    SPCR = ((1<<SPE)|               // SPI Enable
    334c:	81 e5       	ldi	r24, 0x51	; 81
    334e:	8d b9       	out	0x0d, r24	; 13
            (1<<MSTR)|              // Master/Slave select
            (0<<SPR1)|(1<<SPR0)|    // SPI Clock Rate
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR = (1<<SPI2X); // Double SPI Speed Bit
    3350:	81 e0       	ldi	r24, 0x01	; 1
    3352:	8e b9       	out	0x0e, r24	; 14
}
    3354:	08 95       	ret

00003356 <spi_writereadbyte>:

/*
 * spi write one byte and read it back
 */
uint8_t spi_writereadbyte(uint8_t data) {
    SPDR = data;
    3356:	8f b9       	out	0x0f, r24	; 15
    while((SPSR & (1<<SPIF)) == 0);
    3358:	77 9b       	sbis	0x0e, 7	; 14
    335a:	fe cf       	rjmp	.-4      	; 0x3358 <spi_writereadbyte+0x2>
    return SPDR;
    335c:	8f b1       	in	r24, 0x0f	; 15
}
    335e:	08 95       	ret

00003360 <TimerInit>:

TimeEvent tmrEvent[10];
int tmrCount=0;

void TimerInit() {
	TCCR0 = 0b011; //CS02=0, CS01=1, CS00=0, chon Prescaler=64
    3360:	83 e0       	ldi	r24, 0x03	; 3
    3362:	83 bf       	out	0x33, r24	; 51
	//Xung chip la 8MHZ -> 1 xung mat 1us/8 = 0.125 us
	//Prescaler=64, kich 256 lan moi tang 1 lan trong bo dem Timer-> Ton 8us
	//Vay, de Timer ngat moi 1ms, ta can: 1000/8=125 lan dem.
	//Ma Timer ngat khi bo dem toi 255, ta can set gia tri ban dau cho bo dem la: 255-125+1=131
	TCNT0=131;
    3364:	83 e8       	ldi	r24, 0x83	; 131
    3366:	82 bf       	out	0x32, r24	; 50
	TIMSK=(1<<TOIE0); //Cho phep ngat khi cho tran o T/C0
    3368:	81 e0       	ldi	r24, 0x01	; 1
    336a:	87 bf       	out	0x37, r24	; 55
	tmrCount=0;
    336c:	10 92 71 02 	sts	0x0271, r1
    3370:	10 92 70 02 	sts	0x0270, r1
	sei();
    3374:	78 94       	sei
}
    3376:	08 95       	ret

00003378 <TimerSet>:

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
    3378:	cf 92       	push	r12
    337a:	df 92       	push	r13
    337c:	ef 92       	push	r14
    337e:	ff 92       	push	r15
    3380:	cf 93       	push	r28
    3382:	df 93       	push	r29
    3384:	ec 01       	movw	r28, r24
    3386:	6a 01       	movw	r12, r20
    3388:	7b 01       	movw	r14, r22
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
    338a:	40 91 70 02 	lds	r20, 0x0270
    338e:	50 91 71 02 	lds	r21, 0x0271
    3392:	14 16       	cp	r1, r20
    3394:	15 06       	cpc	r1, r21
    3396:	e4 f4       	brge	.+56     	; 0x33d0 <TimerSet+0x58>
    3398:	e6 e8       	ldi	r30, 0x86	; 134
    339a:	f2 e0       	ldi	r31, 0x02	; 2
    339c:	df 01       	movw	r26, r30
    339e:	16 96       	adiw	r26, 0x06	; 6
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
	sei();
}

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
    33a4:	70 e0       	ldi	r23, 0x00	; 0
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
			check=true;
			tmrEvent[i].count=0;
			tmrEvent[i].max=max;
			tmrEvent[i].enabled=true;
    33a6:	61 e0       	ldi	r22, 0x01	; 1

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
    33a8:	80 81       	ld	r24, Z
    33aa:	91 81       	ldd	r25, Z+1	; 0x01
    33ac:	8c 17       	cp	r24, r28
    33ae:	9d 07       	cpc	r25, r29
    33b0:	31 f4       	brne	.+12     	; 0x33be <TimerSet+0x46>
			check=true;
			tmrEvent[i].count=0;
    33b2:	13 82       	std	Z+3, r1	; 0x03
    33b4:	12 82       	std	Z+2, r1	; 0x02
			tmrEvent[i].max=max;
    33b6:	d5 82       	std	Z+5, r13	; 0x05
    33b8:	c4 82       	std	Z+4, r12	; 0x04
			tmrEvent[i].enabled=true;
    33ba:	6c 93       	st	X, r22
//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
			check=true;
    33bc:	76 2f       	mov	r23, r22
}

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
    33be:	2f 5f       	subi	r18, 0xFF	; 255
    33c0:	3f 4f       	sbci	r19, 0xFF	; 255
    33c2:	37 96       	adiw	r30, 0x07	; 7
    33c4:	17 96       	adiw	r26, 0x07	; 7
    33c6:	24 17       	cp	r18, r20
    33c8:	35 07       	cpc	r19, r21
    33ca:	74 f3       	brlt	.-36     	; 0x33a8 <TimerSet+0x30>
			tmrEvent[i].count=0;
			tmrEvent[i].max=max;
			tmrEvent[i].enabled=true;
		}
	}
	if (!check) {
    33cc:	77 23       	and	r23, r23
    33ce:	c9 f4       	brne	.+50     	; 0x3402 <TimerSet+0x8a>
		tmrEvent[tmrCount].EventId=evenId;
    33d0:	fa 01       	movw	r30, r20
    33d2:	ee 0f       	add	r30, r30
    33d4:	ff 1f       	adc	r31, r31
    33d6:	ee 0f       	add	r30, r30
    33d8:	ff 1f       	adc	r31, r31
    33da:	ee 0f       	add	r30, r30
    33dc:	ff 1f       	adc	r31, r31
    33de:	e4 1b       	sub	r30, r20
    33e0:	f5 0b       	sbc	r31, r21
    33e2:	ea 57       	subi	r30, 0x7A	; 122
    33e4:	fd 4f       	sbci	r31, 0xFD	; 253
    33e6:	d1 83       	std	Z+1, r29	; 0x01
    33e8:	c0 83       	st	Z, r28
		tmrEvent[tmrCount].count=0;
    33ea:	13 82       	std	Z+3, r1	; 0x03
    33ec:	12 82       	std	Z+2, r1	; 0x02
		tmrEvent[tmrCount].max=max;
    33ee:	d5 82       	std	Z+5, r13	; 0x05
    33f0:	c4 82       	std	Z+4, r12	; 0x04
		tmrEvent[tmrCount].enabled=true;
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	86 83       	std	Z+6, r24	; 0x06
		tmrCount++;
    33f6:	4f 5f       	subi	r20, 0xFF	; 255
    33f8:	5f 4f       	sbci	r21, 0xFF	; 255
    33fa:	50 93 71 02 	sts	0x0271, r21
    33fe:	40 93 70 02 	sts	0x0270, r20
	}
}
    3402:	df 91       	pop	r29
    3404:	cf 91       	pop	r28
    3406:	ff 90       	pop	r15
    3408:	ef 90       	pop	r14
    340a:	df 90       	pop	r13
    340c:	cf 90       	pop	r12
    340e:	08 95       	ret

00003410 <TimerUnSet>:

void TimerUnSet(const sc_eventid evenId) {
    3410:	dc 01       	movw	r26, r24
	for (int i=0;i<tmrCount;i++) {
    3412:	60 91 70 02 	lds	r22, 0x0270
    3416:	70 91 71 02 	lds	r23, 0x0271
    341a:	16 16       	cp	r1, r22
    341c:	17 06       	cpc	r1, r23
    341e:	6c f5       	brge	.+90     	; 0x347a <TimerUnSet+0x6a>
		if (tmrEvent[i].EventId==evenId) {
    3420:	80 91 86 02 	lds	r24, 0x0286
    3424:	90 91 87 02 	lds	r25, 0x0287
    3428:	8a 17       	cp	r24, r26
    342a:	9b 07       	cpc	r25, r27
    342c:	e9 f4       	brne	.+58     	; 0x3468 <TimerUnSet+0x58>
    342e:	0a c0       	rjmp	.+20     	; 0x3444 <TimerUnSet+0x34>
    3430:	29 5f       	subi	r18, 0xF9	; 249
    3432:	3f 4f       	sbci	r19, 0xFF	; 255
		tmrEvent[tmrCount].enabled=true;
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
    3434:	f9 01       	movw	r30, r18
    3436:	37 97       	sbiw	r30, 0x07	; 7
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
    3438:	80 81       	ld	r24, Z
    343a:	91 81       	ldd	r25, Z+1	; 0x01
    343c:	8a 17       	cp	r24, r26
    343e:	9b 07       	cpc	r25, r27
    3440:	b9 f4       	brne	.+46     	; 0x3470 <TimerUnSet+0x60>
    3442:	02 c0       	rjmp	.+4      	; 0x3448 <TimerUnSet+0x38>
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
	for (int i=0;i<tmrCount;i++) {
    3444:	40 e0       	ldi	r20, 0x00	; 0
    3446:	50 e0       	ldi	r21, 0x00	; 0
		if (tmrEvent[i].EventId==evenId) {
			tmrEvent[i].count=0;
    3448:	fa 01       	movw	r30, r20
    344a:	ee 0f       	add	r30, r30
    344c:	ff 1f       	adc	r31, r31
    344e:	ee 0f       	add	r30, r30
    3450:	ff 1f       	adc	r31, r31
    3452:	ee 0f       	add	r30, r30
    3454:	ff 1f       	adc	r31, r31
    3456:	e4 1b       	sub	r30, r20
    3458:	f5 0b       	sbc	r31, r21
    345a:	ea 57       	subi	r30, 0x7A	; 122
    345c:	fd 4f       	sbci	r31, 0xFD	; 253
    345e:	13 82       	std	Z+3, r1	; 0x03
    3460:	12 82       	std	Z+2, r1	; 0x02
			tmrEvent[i].enabled=false;
    3462:	16 82       	std	Z+6, r1	; 0x06
			*(sc_boolean*)evenId=bool_false;
    3464:	1c 92       	st	X, r1
			return;
    3466:	08 95       	ret
    3468:	2d e8       	ldi	r18, 0x8D	; 141
    346a:	32 e0       	ldi	r19, 0x02	; 2
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
	for (int i=0;i<tmrCount;i++) {
    346c:	40 e0       	ldi	r20, 0x00	; 0
    346e:	50 e0       	ldi	r21, 0x00	; 0
    3470:	4f 5f       	subi	r20, 0xFF	; 255
    3472:	5f 4f       	sbci	r21, 0xFF	; 255
    3474:	46 17       	cp	r20, r22
    3476:	57 07       	cpc	r21, r23
    3478:	d9 f6       	brne	.-74     	; 0x3430 <TimerUnSet+0x20>
    347a:	08 95       	ret

0000347c <TimerCheck>:
			return;
		}
	}
}

void TimerCheck(SMO* handle) {
    347c:	cf 92       	push	r12
    347e:	df 92       	push	r13
    3480:	ef 92       	push	r14
    3482:	ff 92       	push	r15
    3484:	0f 93       	push	r16
    3486:	1f 93       	push	r17
    3488:	cf 93       	push	r28
    348a:	df 93       	push	r29
    348c:	6c 01       	movw	r12, r24
	for (int i=0;i<tmrCount;i++) {
    348e:	80 91 70 02 	lds	r24, 0x0270
    3492:	90 91 71 02 	lds	r25, 0x0271
    3496:	18 16       	cp	r1, r24
    3498:	19 06       	cpc	r1, r25
    349a:	94 f5       	brge	.+100    	; 0x3500 <TimerCheck+0x84>
    349c:	cc e8       	ldi	r28, 0x8C	; 140
    349e:	d2 e0       	ldi	r29, 0x02	; 2
    34a0:	8e 01       	movw	r16, r28
    34a2:	06 50       	subi	r16, 0x06	; 6
    34a4:	10 40       	sbci	r17, 0x00	; 0
    34a6:	ee 24       	eor	r14, r14
    34a8:	ff 24       	eor	r15, r15
		if (tmrEvent[i].enabled) {
    34aa:	88 81       	ld	r24, Y
    34ac:	88 23       	and	r24, r24
    34ae:	d9 f0       	breq	.+54     	; 0x34e6 <TimerCheck+0x6a>
			tmrEvent[i].count++;
    34b0:	d8 01       	movw	r26, r16
    34b2:	12 96       	adiw	r26, 0x02	; 2
    34b4:	8d 91       	ld	r24, X+
    34b6:	9c 91       	ld	r25, X
    34b8:	13 97       	sbiw	r26, 0x03	; 3
    34ba:	01 96       	adiw	r24, 0x01	; 1
    34bc:	13 96       	adiw	r26, 0x03	; 3
    34be:	9c 93       	st	X, r25
    34c0:	8e 93       	st	-X, r24
    34c2:	12 97       	sbiw	r26, 0x02	; 2
			if (tmrEvent[i].count==tmrEvent[i].max) {
    34c4:	14 96       	adiw	r26, 0x04	; 4
    34c6:	2d 91       	ld	r18, X+
    34c8:	3c 91       	ld	r19, X
    34ca:	15 97       	sbiw	r26, 0x05	; 5
    34cc:	82 17       	cp	r24, r18
    34ce:	93 07       	cpc	r25, r19
    34d0:	51 f4       	brne	.+20     	; 0x34e6 <TimerCheck+0x6a>
				tmrEvent[i].count=0;
    34d2:	13 96       	adiw	r26, 0x03	; 3
    34d4:	1c 92       	st	X, r1
    34d6:	1e 92       	st	-X, r1
    34d8:	12 97       	sbiw	r26, 0x02	; 2
				tmrEvent[i].enabled=false;
    34da:	18 82       	st	Y, r1
				sMO_raiseTimeEvent(handle,tmrEvent[i].EventId);
    34dc:	6d 91       	ld	r22, X+
    34de:	7c 91       	ld	r23, X
    34e0:	c6 01       	movw	r24, r12
    34e2:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <sMO_raiseTimeEvent>
		}
	}
}

void TimerCheck(SMO* handle) {
	for (int i=0;i<tmrCount;i++) {
    34e6:	08 94       	sec
    34e8:	e1 1c       	adc	r14, r1
    34ea:	f1 1c       	adc	r15, r1
    34ec:	27 96       	adiw	r28, 0x07	; 7
    34ee:	09 5f       	subi	r16, 0xF9	; 249
    34f0:	1f 4f       	sbci	r17, 0xFF	; 255
    34f2:	80 91 70 02 	lds	r24, 0x0270
    34f6:	90 91 71 02 	lds	r25, 0x0271
    34fa:	e8 16       	cp	r14, r24
    34fc:	f9 06       	cpc	r15, r25
    34fe:	ac f2       	brlt	.-86     	; 0x34aa <TimerCheck+0x2e>
				tmrEvent[i].enabled=false;
				sMO_raiseTimeEvent(handle,tmrEvent[i].EventId);
			}
		}
	}
}
    3500:	df 91       	pop	r29
    3502:	cf 91       	pop	r28
    3504:	1f 91       	pop	r17
    3506:	0f 91       	pop	r16
    3508:	ff 90       	pop	r15
    350a:	ef 90       	pop	r14
    350c:	df 90       	pop	r13
    350e:	cf 90       	pop	r12
    3510:	08 95       	ret

00003512 <TimerClear>:

void TimerClear() {
	free(tmrEvent);
    3512:	86 e8       	ldi	r24, 0x86	; 134
    3514:	92 e0       	ldi	r25, 0x02	; 2
    3516:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <free>
	tmrCount=0;
    351a:	10 92 71 02 	sts	0x0271, r1
    351e:	10 92 70 02 	sts	0x0270, r1
    3522:	08 95       	ret

00003524 <__mulsi3>:
    3524:	62 9f       	mul	r22, r18
    3526:	d0 01       	movw	r26, r0
    3528:	73 9f       	mul	r23, r19
    352a:	f0 01       	movw	r30, r0
    352c:	82 9f       	mul	r24, r18
    352e:	e0 0d       	add	r30, r0
    3530:	f1 1d       	adc	r31, r1
    3532:	64 9f       	mul	r22, r20
    3534:	e0 0d       	add	r30, r0
    3536:	f1 1d       	adc	r31, r1
    3538:	92 9f       	mul	r25, r18
    353a:	f0 0d       	add	r31, r0
    353c:	83 9f       	mul	r24, r19
    353e:	f0 0d       	add	r31, r0
    3540:	74 9f       	mul	r23, r20
    3542:	f0 0d       	add	r31, r0
    3544:	65 9f       	mul	r22, r21
    3546:	f0 0d       	add	r31, r0
    3548:	99 27       	eor	r25, r25
    354a:	72 9f       	mul	r23, r18
    354c:	b0 0d       	add	r27, r0
    354e:	e1 1d       	adc	r30, r1
    3550:	f9 1f       	adc	r31, r25
    3552:	63 9f       	mul	r22, r19
    3554:	b0 0d       	add	r27, r0
    3556:	e1 1d       	adc	r30, r1
    3558:	f9 1f       	adc	r31, r25
    355a:	bd 01       	movw	r22, r26
    355c:	cf 01       	movw	r24, r30
    355e:	11 24       	eor	r1, r1
    3560:	08 95       	ret

00003562 <__udivmodqi4>:
    3562:	99 1b       	sub	r25, r25
    3564:	79 e0       	ldi	r23, 0x09	; 9
    3566:	04 c0       	rjmp	.+8      	; 0x3570 <__udivmodqi4_ep>

00003568 <__udivmodqi4_loop>:
    3568:	99 1f       	adc	r25, r25
    356a:	96 17       	cp	r25, r22
    356c:	08 f0       	brcs	.+2      	; 0x3570 <__udivmodqi4_ep>
    356e:	96 1b       	sub	r25, r22

00003570 <__udivmodqi4_ep>:
    3570:	88 1f       	adc	r24, r24
    3572:	7a 95       	dec	r23
    3574:	c9 f7       	brne	.-14     	; 0x3568 <__udivmodqi4_loop>
    3576:	80 95       	com	r24
    3578:	08 95       	ret

0000357a <__divmodhi4>:
    357a:	97 fb       	bst	r25, 7
    357c:	09 2e       	mov	r0, r25
    357e:	07 26       	eor	r0, r23
    3580:	0a d0       	rcall	.+20     	; 0x3596 <__divmodhi4_neg1>
    3582:	77 fd       	sbrc	r23, 7
    3584:	04 d0       	rcall	.+8      	; 0x358e <__divmodhi4_neg2>
    3586:	0c d0       	rcall	.+24     	; 0x35a0 <__udivmodhi4>
    3588:	06 d0       	rcall	.+12     	; 0x3596 <__divmodhi4_neg1>
    358a:	00 20       	and	r0, r0
    358c:	1a f4       	brpl	.+6      	; 0x3594 <__divmodhi4_exit>

0000358e <__divmodhi4_neg2>:
    358e:	70 95       	com	r23
    3590:	61 95       	neg	r22
    3592:	7f 4f       	sbci	r23, 0xFF	; 255

00003594 <__divmodhi4_exit>:
    3594:	08 95       	ret

00003596 <__divmodhi4_neg1>:
    3596:	f6 f7       	brtc	.-4      	; 0x3594 <__divmodhi4_exit>
    3598:	90 95       	com	r25
    359a:	81 95       	neg	r24
    359c:	9f 4f       	sbci	r25, 0xFF	; 255
    359e:	08 95       	ret

000035a0 <__udivmodhi4>:
    35a0:	aa 1b       	sub	r26, r26
    35a2:	bb 1b       	sub	r27, r27
    35a4:	51 e1       	ldi	r21, 0x11	; 17
    35a6:	07 c0       	rjmp	.+14     	; 0x35b6 <__udivmodhi4_ep>

000035a8 <__udivmodhi4_loop>:
    35a8:	aa 1f       	adc	r26, r26
    35aa:	bb 1f       	adc	r27, r27
    35ac:	a6 17       	cp	r26, r22
    35ae:	b7 07       	cpc	r27, r23
    35b0:	10 f0       	brcs	.+4      	; 0x35b6 <__udivmodhi4_ep>
    35b2:	a6 1b       	sub	r26, r22
    35b4:	b7 0b       	sbc	r27, r23

000035b6 <__udivmodhi4_ep>:
    35b6:	88 1f       	adc	r24, r24
    35b8:	99 1f       	adc	r25, r25
    35ba:	5a 95       	dec	r21
    35bc:	a9 f7       	brne	.-22     	; 0x35a8 <__udivmodhi4_loop>
    35be:	80 95       	com	r24
    35c0:	90 95       	com	r25
    35c2:	bc 01       	movw	r22, r24
    35c4:	cd 01       	movw	r24, r26
    35c6:	08 95       	ret

000035c8 <malloc>:
    35c8:	cf 93       	push	r28
    35ca:	df 93       	push	r29
    35cc:	ac 01       	movw	r20, r24
    35ce:	82 30       	cpi	r24, 0x02	; 2
    35d0:	91 05       	cpc	r25, r1
    35d2:	10 f4       	brcc	.+4      	; 0x35d8 <malloc+0x10>
    35d4:	42 e0       	ldi	r20, 0x02	; 2
    35d6:	50 e0       	ldi	r21, 0x00	; 0
    35d8:	e0 91 ce 02 	lds	r30, 0x02CE
    35dc:	f0 91 cf 02 	lds	r31, 0x02CF
    35e0:	20 e0       	ldi	r18, 0x00	; 0
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	a0 e0       	ldi	r26, 0x00	; 0
    35e6:	b0 e0       	ldi	r27, 0x00	; 0
    35e8:	24 c0       	rjmp	.+72     	; 0x3632 <malloc+0x6a>
    35ea:	80 81       	ld	r24, Z
    35ec:	91 81       	ldd	r25, Z+1	; 0x01
    35ee:	84 17       	cp	r24, r20
    35f0:	95 07       	cpc	r25, r21
    35f2:	d0 f0       	brcs	.+52     	; 0x3628 <malloc+0x60>
    35f4:	84 17       	cp	r24, r20
    35f6:	95 07       	cpc	r25, r21
    35f8:	71 f4       	brne	.+28     	; 0x3616 <malloc+0x4e>
    35fa:	82 81       	ldd	r24, Z+2	; 0x02
    35fc:	93 81       	ldd	r25, Z+3	; 0x03
    35fe:	10 97       	sbiw	r26, 0x00	; 0
    3600:	29 f0       	breq	.+10     	; 0x360c <malloc+0x44>
    3602:	13 96       	adiw	r26, 0x03	; 3
    3604:	9c 93       	st	X, r25
    3606:	8e 93       	st	-X, r24
    3608:	12 97       	sbiw	r26, 0x02	; 2
    360a:	2c c0       	rjmp	.+88     	; 0x3664 <malloc+0x9c>
    360c:	90 93 cf 02 	sts	0x02CF, r25
    3610:	80 93 ce 02 	sts	0x02CE, r24
    3614:	27 c0       	rjmp	.+78     	; 0x3664 <malloc+0x9c>
    3616:	21 15       	cp	r18, r1
    3618:	31 05       	cpc	r19, r1
    361a:	19 f0       	breq	.+6      	; 0x3622 <malloc+0x5a>
    361c:	82 17       	cp	r24, r18
    361e:	93 07       	cpc	r25, r19
    3620:	18 f4       	brcc	.+6      	; 0x3628 <malloc+0x60>
    3622:	9c 01       	movw	r18, r24
    3624:	bd 01       	movw	r22, r26
    3626:	ef 01       	movw	r28, r30
    3628:	92 81       	ldd	r25, Z+2	; 0x02
    362a:	83 81       	ldd	r24, Z+3	; 0x03
    362c:	df 01       	movw	r26, r30
    362e:	e9 2f       	mov	r30, r25
    3630:	f8 2f       	mov	r31, r24
    3632:	30 97       	sbiw	r30, 0x00	; 0
    3634:	d1 f6       	brne	.-76     	; 0x35ea <malloc+0x22>
    3636:	21 15       	cp	r18, r1
    3638:	31 05       	cpc	r19, r1
    363a:	f9 f0       	breq	.+62     	; 0x367a <malloc+0xb2>
    363c:	c9 01       	movw	r24, r18
    363e:	84 1b       	sub	r24, r20
    3640:	95 0b       	sbc	r25, r21
    3642:	84 30       	cpi	r24, 0x04	; 4
    3644:	91 05       	cpc	r25, r1
    3646:	80 f4       	brcc	.+32     	; 0x3668 <malloc+0xa0>
    3648:	8a 81       	ldd	r24, Y+2	; 0x02
    364a:	9b 81       	ldd	r25, Y+3	; 0x03
    364c:	61 15       	cp	r22, r1
    364e:	71 05       	cpc	r23, r1
    3650:	21 f0       	breq	.+8      	; 0x365a <malloc+0x92>
    3652:	fb 01       	movw	r30, r22
    3654:	93 83       	std	Z+3, r25	; 0x03
    3656:	82 83       	std	Z+2, r24	; 0x02
    3658:	04 c0       	rjmp	.+8      	; 0x3662 <malloc+0x9a>
    365a:	90 93 cf 02 	sts	0x02CF, r25
    365e:	80 93 ce 02 	sts	0x02CE, r24
    3662:	fe 01       	movw	r30, r28
    3664:	32 96       	adiw	r30, 0x02	; 2
    3666:	42 c0       	rjmp	.+132    	; 0x36ec <malloc+0x124>
    3668:	fe 01       	movw	r30, r28
    366a:	e8 0f       	add	r30, r24
    366c:	f9 1f       	adc	r31, r25
    366e:	41 93       	st	Z+, r20
    3670:	51 93       	st	Z+, r21
    3672:	02 97       	sbiw	r24, 0x02	; 2
    3674:	99 83       	std	Y+1, r25	; 0x01
    3676:	88 83       	st	Y, r24
    3678:	39 c0       	rjmp	.+114    	; 0x36ec <malloc+0x124>
    367a:	80 91 cc 02 	lds	r24, 0x02CC
    367e:	90 91 cd 02 	lds	r25, 0x02CD
    3682:	00 97       	sbiw	r24, 0x00	; 0
    3684:	41 f4       	brne	.+16     	; 0x3696 <malloc+0xce>
    3686:	80 91 6b 02 	lds	r24, 0x026B
    368a:	90 91 6c 02 	lds	r25, 0x026C
    368e:	90 93 cd 02 	sts	0x02CD, r25
    3692:	80 93 cc 02 	sts	0x02CC, r24
    3696:	20 91 69 02 	lds	r18, 0x0269
    369a:	30 91 6a 02 	lds	r19, 0x026A
    369e:	21 15       	cp	r18, r1
    36a0:	31 05       	cpc	r19, r1
    36a2:	41 f4       	brne	.+16     	; 0x36b4 <malloc+0xec>
    36a4:	2d b7       	in	r18, 0x3d	; 61
    36a6:	3e b7       	in	r19, 0x3e	; 62
    36a8:	80 91 6d 02 	lds	r24, 0x026D
    36ac:	90 91 6e 02 	lds	r25, 0x026E
    36b0:	28 1b       	sub	r18, r24
    36b2:	39 0b       	sbc	r19, r25
    36b4:	e0 91 cc 02 	lds	r30, 0x02CC
    36b8:	f0 91 cd 02 	lds	r31, 0x02CD
    36bc:	e2 17       	cp	r30, r18
    36be:	f3 07       	cpc	r31, r19
    36c0:	98 f4       	brcc	.+38     	; 0x36e8 <malloc+0x120>
    36c2:	2e 1b       	sub	r18, r30
    36c4:	3f 0b       	sbc	r19, r31
    36c6:	24 17       	cp	r18, r20
    36c8:	35 07       	cpc	r19, r21
    36ca:	70 f0       	brcs	.+28     	; 0x36e8 <malloc+0x120>
    36cc:	ca 01       	movw	r24, r20
    36ce:	02 96       	adiw	r24, 0x02	; 2
    36d0:	28 17       	cp	r18, r24
    36d2:	39 07       	cpc	r19, r25
    36d4:	48 f0       	brcs	.+18     	; 0x36e8 <malloc+0x120>
    36d6:	8e 0f       	add	r24, r30
    36d8:	9f 1f       	adc	r25, r31
    36da:	90 93 cd 02 	sts	0x02CD, r25
    36de:	80 93 cc 02 	sts	0x02CC, r24
    36e2:	41 93       	st	Z+, r20
    36e4:	51 93       	st	Z+, r21
    36e6:	02 c0       	rjmp	.+4      	; 0x36ec <malloc+0x124>
    36e8:	e0 e0       	ldi	r30, 0x00	; 0
    36ea:	f0 e0       	ldi	r31, 0x00	; 0
    36ec:	cf 01       	movw	r24, r30
    36ee:	df 91       	pop	r29
    36f0:	cf 91       	pop	r28
    36f2:	08 95       	ret

000036f4 <free>:
    36f4:	0f 93       	push	r16
    36f6:	1f 93       	push	r17
    36f8:	cf 93       	push	r28
    36fa:	df 93       	push	r29
    36fc:	9c 01       	movw	r18, r24
    36fe:	00 97       	sbiw	r24, 0x00	; 0
    3700:	09 f4       	brne	.+2      	; 0x3704 <free+0x10>
    3702:	8c c0       	rjmp	.+280    	; 0x381c <free+0x128>
    3704:	dc 01       	movw	r26, r24
    3706:	12 97       	sbiw	r26, 0x02	; 2
    3708:	13 96       	adiw	r26, 0x03	; 3
    370a:	1c 92       	st	X, r1
    370c:	1e 92       	st	-X, r1
    370e:	12 97       	sbiw	r26, 0x02	; 2
    3710:	60 91 ce 02 	lds	r22, 0x02CE
    3714:	70 91 cf 02 	lds	r23, 0x02CF
    3718:	61 15       	cp	r22, r1
    371a:	71 05       	cpc	r23, r1
    371c:	89 f4       	brne	.+34     	; 0x3740 <free+0x4c>
    371e:	8d 91       	ld	r24, X+
    3720:	9c 91       	ld	r25, X
    3722:	11 97       	sbiw	r26, 0x01	; 1
    3724:	82 0f       	add	r24, r18
    3726:	93 1f       	adc	r25, r19
    3728:	20 91 cc 02 	lds	r18, 0x02CC
    372c:	30 91 cd 02 	lds	r19, 0x02CD
    3730:	28 17       	cp	r18, r24
    3732:	39 07       	cpc	r19, r25
    3734:	69 f5       	brne	.+90     	; 0x3790 <free+0x9c>
    3736:	b0 93 cd 02 	sts	0x02CD, r27
    373a:	a0 93 cc 02 	sts	0x02CC, r26
    373e:	6e c0       	rjmp	.+220    	; 0x381c <free+0x128>
    3740:	fb 01       	movw	r30, r22
    3742:	40 e0       	ldi	r20, 0x00	; 0
    3744:	50 e0       	ldi	r21, 0x00	; 0
    3746:	01 c0       	rjmp	.+2      	; 0x374a <free+0x56>
    3748:	fc 01       	movw	r30, r24
    374a:	ea 17       	cp	r30, r26
    374c:	fb 07       	cpc	r31, r27
    374e:	30 f4       	brcc	.+12     	; 0x375c <free+0x68>
    3750:	82 81       	ldd	r24, Z+2	; 0x02
    3752:	93 81       	ldd	r25, Z+3	; 0x03
    3754:	af 01       	movw	r20, r30
    3756:	00 97       	sbiw	r24, 0x00	; 0
    3758:	b9 f7       	brne	.-18     	; 0x3748 <free+0x54>
    375a:	1f c0       	rjmp	.+62     	; 0x379a <free+0xa6>
    375c:	e9 01       	movw	r28, r18
    375e:	22 97       	sbiw	r28, 0x02	; 2
    3760:	fb 83       	std	Y+3, r31	; 0x03
    3762:	ea 83       	std	Y+2, r30	; 0x02
    3764:	08 81       	ld	r16, Y
    3766:	19 81       	ldd	r17, Y+1	; 0x01
    3768:	c9 01       	movw	r24, r18
    376a:	80 0f       	add	r24, r16
    376c:	91 1f       	adc	r25, r17
    376e:	8e 17       	cp	r24, r30
    3770:	9f 07       	cpc	r25, r31
    3772:	59 f4       	brne	.+22     	; 0x378a <free+0x96>
    3774:	80 81       	ld	r24, Z
    3776:	91 81       	ldd	r25, Z+1	; 0x01
    3778:	80 0f       	add	r24, r16
    377a:	91 1f       	adc	r25, r17
    377c:	02 96       	adiw	r24, 0x02	; 2
    377e:	99 83       	std	Y+1, r25	; 0x01
    3780:	88 83       	st	Y, r24
    3782:	82 81       	ldd	r24, Z+2	; 0x02
    3784:	93 81       	ldd	r25, Z+3	; 0x03
    3786:	9b 83       	std	Y+3, r25	; 0x03
    3788:	8a 83       	std	Y+2, r24	; 0x02
    378a:	41 15       	cp	r20, r1
    378c:	51 05       	cpc	r21, r1
    378e:	29 f4       	brne	.+10     	; 0x379a <free+0xa6>
    3790:	b0 93 cf 02 	sts	0x02CF, r27
    3794:	a0 93 ce 02 	sts	0x02CE, r26
    3798:	41 c0       	rjmp	.+130    	; 0x381c <free+0x128>
    379a:	fa 01       	movw	r30, r20
    379c:	b3 83       	std	Z+3, r27	; 0x03
    379e:	a2 83       	std	Z+2, r26	; 0x02
    37a0:	c1 91       	ld	r28, Z+
    37a2:	d1 91       	ld	r29, Z+
    37a4:	ec 0f       	add	r30, r28
    37a6:	fd 1f       	adc	r31, r29
    37a8:	ae 17       	cp	r26, r30
    37aa:	bf 07       	cpc	r27, r31
    37ac:	81 f4       	brne	.+32     	; 0x37ce <free+0xda>
    37ae:	f9 01       	movw	r30, r18
    37b0:	92 91       	ld	r25, -Z
    37b2:	82 91       	ld	r24, -Z
    37b4:	8c 0f       	add	r24, r28
    37b6:	9d 1f       	adc	r25, r29
    37b8:	02 96       	adiw	r24, 0x02	; 2
    37ba:	da 01       	movw	r26, r20
    37bc:	11 96       	adiw	r26, 0x01	; 1
    37be:	9c 93       	st	X, r25
    37c0:	8e 93       	st	-X, r24
    37c2:	82 81       	ldd	r24, Z+2	; 0x02
    37c4:	93 81       	ldd	r25, Z+3	; 0x03
    37c6:	13 96       	adiw	r26, 0x03	; 3
    37c8:	9c 93       	st	X, r25
    37ca:	8e 93       	st	-X, r24
    37cc:	12 97       	sbiw	r26, 0x02	; 2
    37ce:	e0 e0       	ldi	r30, 0x00	; 0
    37d0:	f0 e0       	ldi	r31, 0x00	; 0
    37d2:	02 c0       	rjmp	.+4      	; 0x37d8 <free+0xe4>
    37d4:	fb 01       	movw	r30, r22
    37d6:	bc 01       	movw	r22, r24
    37d8:	db 01       	movw	r26, r22
    37da:	12 96       	adiw	r26, 0x02	; 2
    37dc:	8d 91       	ld	r24, X+
    37de:	9c 91       	ld	r25, X
    37e0:	13 97       	sbiw	r26, 0x03	; 3
    37e2:	00 97       	sbiw	r24, 0x00	; 0
    37e4:	b9 f7       	brne	.-18     	; 0x37d4 <free+0xe0>
    37e6:	cb 01       	movw	r24, r22
    37e8:	02 96       	adiw	r24, 0x02	; 2
    37ea:	2d 91       	ld	r18, X+
    37ec:	3c 91       	ld	r19, X
    37ee:	11 97       	sbiw	r26, 0x01	; 1
    37f0:	82 0f       	add	r24, r18
    37f2:	93 1f       	adc	r25, r19
    37f4:	20 91 cc 02 	lds	r18, 0x02CC
    37f8:	30 91 cd 02 	lds	r19, 0x02CD
    37fc:	28 17       	cp	r18, r24
    37fe:	39 07       	cpc	r19, r25
    3800:	69 f4       	brne	.+26     	; 0x381c <free+0x128>
    3802:	30 97       	sbiw	r30, 0x00	; 0
    3804:	29 f4       	brne	.+10     	; 0x3810 <free+0x11c>
    3806:	10 92 cf 02 	sts	0x02CF, r1
    380a:	10 92 ce 02 	sts	0x02CE, r1
    380e:	02 c0       	rjmp	.+4      	; 0x3814 <free+0x120>
    3810:	13 82       	std	Z+3, r1	; 0x03
    3812:	12 82       	std	Z+2, r1	; 0x02
    3814:	70 93 cd 02 	sts	0x02CD, r23
    3818:	60 93 cc 02 	sts	0x02CC, r22
    381c:	df 91       	pop	r29
    381e:	cf 91       	pop	r28
    3820:	1f 91       	pop	r17
    3822:	0f 91       	pop	r16
    3824:	08 95       	ret

00003826 <sprintf>:
    3826:	0f 93       	push	r16
    3828:	1f 93       	push	r17
    382a:	cf 93       	push	r28
    382c:	df 93       	push	r29
    382e:	cd b7       	in	r28, 0x3d	; 61
    3830:	de b7       	in	r29, 0x3e	; 62
    3832:	2e 97       	sbiw	r28, 0x0e	; 14
    3834:	0f b6       	in	r0, 0x3f	; 63
    3836:	f8 94       	cli
    3838:	de bf       	out	0x3e, r29	; 62
    383a:	0f be       	out	0x3f, r0	; 63
    383c:	cd bf       	out	0x3d, r28	; 61
    383e:	0d 89       	ldd	r16, Y+21	; 0x15
    3840:	1e 89       	ldd	r17, Y+22	; 0x16
    3842:	86 e0       	ldi	r24, 0x06	; 6
    3844:	8c 83       	std	Y+4, r24	; 0x04
    3846:	1a 83       	std	Y+2, r17	; 0x02
    3848:	09 83       	std	Y+1, r16	; 0x01
    384a:	8f ef       	ldi	r24, 0xFF	; 255
    384c:	9f e7       	ldi	r25, 0x7F	; 127
    384e:	9e 83       	std	Y+6, r25	; 0x06
    3850:	8d 83       	std	Y+5, r24	; 0x05
    3852:	ae 01       	movw	r20, r28
    3854:	47 5e       	subi	r20, 0xE7	; 231
    3856:	5f 4f       	sbci	r21, 0xFF	; 255
    3858:	ce 01       	movw	r24, r28
    385a:	01 96       	adiw	r24, 0x01	; 1
    385c:	6f 89       	ldd	r22, Y+23	; 0x17
    385e:	78 8d       	ldd	r23, Y+24	; 0x18
    3860:	0e 94 42 1c 	call	0x3884	; 0x3884 <vfprintf>
    3864:	ef 81       	ldd	r30, Y+7	; 0x07
    3866:	f8 85       	ldd	r31, Y+8	; 0x08
    3868:	e0 0f       	add	r30, r16
    386a:	f1 1f       	adc	r31, r17
    386c:	10 82       	st	Z, r1
    386e:	2e 96       	adiw	r28, 0x0e	; 14
    3870:	0f b6       	in	r0, 0x3f	; 63
    3872:	f8 94       	cli
    3874:	de bf       	out	0x3e, r29	; 62
    3876:	0f be       	out	0x3f, r0	; 63
    3878:	cd bf       	out	0x3d, r28	; 61
    387a:	df 91       	pop	r29
    387c:	cf 91       	pop	r28
    387e:	1f 91       	pop	r17
    3880:	0f 91       	pop	r16
    3882:	08 95       	ret

00003884 <vfprintf>:
    3884:	2f 92       	push	r2
    3886:	3f 92       	push	r3
    3888:	4f 92       	push	r4
    388a:	5f 92       	push	r5
    388c:	6f 92       	push	r6
    388e:	7f 92       	push	r7
    3890:	8f 92       	push	r8
    3892:	9f 92       	push	r9
    3894:	af 92       	push	r10
    3896:	bf 92       	push	r11
    3898:	cf 92       	push	r12
    389a:	df 92       	push	r13
    389c:	ef 92       	push	r14
    389e:	ff 92       	push	r15
    38a0:	0f 93       	push	r16
    38a2:	1f 93       	push	r17
    38a4:	cf 93       	push	r28
    38a6:	df 93       	push	r29
    38a8:	cd b7       	in	r28, 0x3d	; 61
    38aa:	de b7       	in	r29, 0x3e	; 62
    38ac:	2d 97       	sbiw	r28, 0x0d	; 13
    38ae:	0f b6       	in	r0, 0x3f	; 63
    38b0:	f8 94       	cli
    38b2:	de bf       	out	0x3e, r29	; 62
    38b4:	0f be       	out	0x3f, r0	; 63
    38b6:	cd bf       	out	0x3d, r28	; 61
    38b8:	3c 01       	movw	r6, r24
    38ba:	7d 87       	std	Y+13, r23	; 0x0d
    38bc:	6c 87       	std	Y+12, r22	; 0x0c
    38be:	5a 01       	movw	r10, r20
    38c0:	fc 01       	movw	r30, r24
    38c2:	17 82       	std	Z+7, r1	; 0x07
    38c4:	16 82       	std	Z+6, r1	; 0x06
    38c6:	83 81       	ldd	r24, Z+3	; 0x03
    38c8:	81 ff       	sbrs	r24, 1
    38ca:	c8 c1       	rjmp	.+912    	; 0x3c5c <vfprintf+0x3d8>
    38cc:	2e 01       	movw	r4, r28
    38ce:	08 94       	sec
    38d0:	41 1c       	adc	r4, r1
    38d2:	51 1c       	adc	r5, r1
    38d4:	f3 01       	movw	r30, r6
    38d6:	93 81       	ldd	r25, Z+3	; 0x03
    38d8:	ec 85       	ldd	r30, Y+12	; 0x0c
    38da:	fd 85       	ldd	r31, Y+13	; 0x0d
    38dc:	93 fd       	sbrc	r25, 3
    38de:	85 91       	lpm	r24, Z+
    38e0:	93 ff       	sbrs	r25, 3
    38e2:	81 91       	ld	r24, Z+
    38e4:	fd 87       	std	Y+13, r31	; 0x0d
    38e6:	ec 87       	std	Y+12, r30	; 0x0c
    38e8:	88 23       	and	r24, r24
    38ea:	09 f4       	brne	.+2      	; 0x38ee <vfprintf+0x6a>
    38ec:	b3 c1       	rjmp	.+870    	; 0x3c54 <vfprintf+0x3d0>
    38ee:	85 32       	cpi	r24, 0x25	; 37
    38f0:	41 f4       	brne	.+16     	; 0x3902 <vfprintf+0x7e>
    38f2:	93 fd       	sbrc	r25, 3
    38f4:	85 91       	lpm	r24, Z+
    38f6:	93 ff       	sbrs	r25, 3
    38f8:	81 91       	ld	r24, Z+
    38fa:	fd 87       	std	Y+13, r31	; 0x0d
    38fc:	ec 87       	std	Y+12, r30	; 0x0c
    38fe:	85 32       	cpi	r24, 0x25	; 37
    3900:	29 f4       	brne	.+10     	; 0x390c <vfprintf+0x88>
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	b3 01       	movw	r22, r6
    3906:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <fputc>
    390a:	e4 cf       	rjmp	.-56     	; 0x38d4 <vfprintf+0x50>
    390c:	ff 24       	eor	r15, r15
    390e:	ee 24       	eor	r14, r14
    3910:	10 e0       	ldi	r17, 0x00	; 0
    3912:	10 32       	cpi	r17, 0x20	; 32
    3914:	b0 f4       	brcc	.+44     	; 0x3942 <vfprintf+0xbe>
    3916:	8b 32       	cpi	r24, 0x2B	; 43
    3918:	69 f0       	breq	.+26     	; 0x3934 <vfprintf+0xb0>
    391a:	8c 32       	cpi	r24, 0x2C	; 44
    391c:	28 f4       	brcc	.+10     	; 0x3928 <vfprintf+0xa4>
    391e:	80 32       	cpi	r24, 0x20	; 32
    3920:	51 f0       	breq	.+20     	; 0x3936 <vfprintf+0xb2>
    3922:	83 32       	cpi	r24, 0x23	; 35
    3924:	71 f4       	brne	.+28     	; 0x3942 <vfprintf+0xbe>
    3926:	0b c0       	rjmp	.+22     	; 0x393e <vfprintf+0xba>
    3928:	8d 32       	cpi	r24, 0x2D	; 45
    392a:	39 f0       	breq	.+14     	; 0x393a <vfprintf+0xb6>
    392c:	80 33       	cpi	r24, 0x30	; 48
    392e:	49 f4       	brne	.+18     	; 0x3942 <vfprintf+0xbe>
    3930:	11 60       	ori	r17, 0x01	; 1
    3932:	2c c0       	rjmp	.+88     	; 0x398c <vfprintf+0x108>
    3934:	12 60       	ori	r17, 0x02	; 2
    3936:	14 60       	ori	r17, 0x04	; 4
    3938:	29 c0       	rjmp	.+82     	; 0x398c <vfprintf+0x108>
    393a:	18 60       	ori	r17, 0x08	; 8
    393c:	27 c0       	rjmp	.+78     	; 0x398c <vfprintf+0x108>
    393e:	10 61       	ori	r17, 0x10	; 16
    3940:	25 c0       	rjmp	.+74     	; 0x398c <vfprintf+0x108>
    3942:	17 fd       	sbrc	r17, 7
    3944:	2e c0       	rjmp	.+92     	; 0x39a2 <vfprintf+0x11e>
    3946:	28 2f       	mov	r18, r24
    3948:	20 53       	subi	r18, 0x30	; 48
    394a:	2a 30       	cpi	r18, 0x0A	; 10
    394c:	98 f4       	brcc	.+38     	; 0x3974 <vfprintf+0xf0>
    394e:	16 ff       	sbrs	r17, 6
    3950:	08 c0       	rjmp	.+16     	; 0x3962 <vfprintf+0xde>
    3952:	8f 2d       	mov	r24, r15
    3954:	88 0f       	add	r24, r24
    3956:	f8 2e       	mov	r15, r24
    3958:	ff 0c       	add	r15, r15
    395a:	ff 0c       	add	r15, r15
    395c:	f8 0e       	add	r15, r24
    395e:	f2 0e       	add	r15, r18
    3960:	15 c0       	rjmp	.+42     	; 0x398c <vfprintf+0x108>
    3962:	8e 2d       	mov	r24, r14
    3964:	88 0f       	add	r24, r24
    3966:	e8 2e       	mov	r14, r24
    3968:	ee 0c       	add	r14, r14
    396a:	ee 0c       	add	r14, r14
    396c:	e8 0e       	add	r14, r24
    396e:	e2 0e       	add	r14, r18
    3970:	10 62       	ori	r17, 0x20	; 32
    3972:	0c c0       	rjmp	.+24     	; 0x398c <vfprintf+0x108>
    3974:	8e 32       	cpi	r24, 0x2E	; 46
    3976:	21 f4       	brne	.+8      	; 0x3980 <vfprintf+0xfc>
    3978:	16 fd       	sbrc	r17, 6
    397a:	6c c1       	rjmp	.+728    	; 0x3c54 <vfprintf+0x3d0>
    397c:	10 64       	ori	r17, 0x40	; 64
    397e:	06 c0       	rjmp	.+12     	; 0x398c <vfprintf+0x108>
    3980:	8c 36       	cpi	r24, 0x6C	; 108
    3982:	11 f4       	brne	.+4      	; 0x3988 <vfprintf+0x104>
    3984:	10 68       	ori	r17, 0x80	; 128
    3986:	02 c0       	rjmp	.+4      	; 0x398c <vfprintf+0x108>
    3988:	88 36       	cpi	r24, 0x68	; 104
    398a:	59 f4       	brne	.+22     	; 0x39a2 <vfprintf+0x11e>
    398c:	ec 85       	ldd	r30, Y+12	; 0x0c
    398e:	fd 85       	ldd	r31, Y+13	; 0x0d
    3990:	93 fd       	sbrc	r25, 3
    3992:	85 91       	lpm	r24, Z+
    3994:	93 ff       	sbrs	r25, 3
    3996:	81 91       	ld	r24, Z+
    3998:	fd 87       	std	Y+13, r31	; 0x0d
    399a:	ec 87       	std	Y+12, r30	; 0x0c
    399c:	88 23       	and	r24, r24
    399e:	09 f0       	breq	.+2      	; 0x39a2 <vfprintf+0x11e>
    39a0:	b8 cf       	rjmp	.-144    	; 0x3912 <vfprintf+0x8e>
    39a2:	98 2f       	mov	r25, r24
    39a4:	95 54       	subi	r25, 0x45	; 69
    39a6:	93 30       	cpi	r25, 0x03	; 3
    39a8:	18 f0       	brcs	.+6      	; 0x39b0 <vfprintf+0x12c>
    39aa:	90 52       	subi	r25, 0x20	; 32
    39ac:	93 30       	cpi	r25, 0x03	; 3
    39ae:	38 f4       	brcc	.+14     	; 0x39be <vfprintf+0x13a>
    39b0:	24 e0       	ldi	r18, 0x04	; 4
    39b2:	30 e0       	ldi	r19, 0x00	; 0
    39b4:	a2 0e       	add	r10, r18
    39b6:	b3 1e       	adc	r11, r19
    39b8:	3f e3       	ldi	r19, 0x3F	; 63
    39ba:	39 83       	std	Y+1, r19	; 0x01
    39bc:	0f c0       	rjmp	.+30     	; 0x39dc <vfprintf+0x158>
    39be:	83 36       	cpi	r24, 0x63	; 99
    39c0:	31 f0       	breq	.+12     	; 0x39ce <vfprintf+0x14a>
    39c2:	83 37       	cpi	r24, 0x73	; 115
    39c4:	81 f0       	breq	.+32     	; 0x39e6 <vfprintf+0x162>
    39c6:	83 35       	cpi	r24, 0x53	; 83
    39c8:	09 f0       	breq	.+2      	; 0x39cc <vfprintf+0x148>
    39ca:	5a c0       	rjmp	.+180    	; 0x3a80 <vfprintf+0x1fc>
    39cc:	22 c0       	rjmp	.+68     	; 0x3a12 <vfprintf+0x18e>
    39ce:	f5 01       	movw	r30, r10
    39d0:	80 81       	ld	r24, Z
    39d2:	89 83       	std	Y+1, r24	; 0x01
    39d4:	22 e0       	ldi	r18, 0x02	; 2
    39d6:	30 e0       	ldi	r19, 0x00	; 0
    39d8:	a2 0e       	add	r10, r18
    39da:	b3 1e       	adc	r11, r19
    39dc:	21 e0       	ldi	r18, 0x01	; 1
    39de:	c2 2e       	mov	r12, r18
    39e0:	d1 2c       	mov	r13, r1
    39e2:	42 01       	movw	r8, r4
    39e4:	14 c0       	rjmp	.+40     	; 0x3a0e <vfprintf+0x18a>
    39e6:	92 e0       	ldi	r25, 0x02	; 2
    39e8:	29 2e       	mov	r2, r25
    39ea:	31 2c       	mov	r3, r1
    39ec:	2a 0c       	add	r2, r10
    39ee:	3b 1c       	adc	r3, r11
    39f0:	f5 01       	movw	r30, r10
    39f2:	80 80       	ld	r8, Z
    39f4:	91 80       	ldd	r9, Z+1	; 0x01
    39f6:	16 ff       	sbrs	r17, 6
    39f8:	03 c0       	rjmp	.+6      	; 0x3a00 <vfprintf+0x17c>
    39fa:	6f 2d       	mov	r22, r15
    39fc:	70 e0       	ldi	r23, 0x00	; 0
    39fe:	02 c0       	rjmp	.+4      	; 0x3a04 <vfprintf+0x180>
    3a00:	6f ef       	ldi	r22, 0xFF	; 255
    3a02:	7f ef       	ldi	r23, 0xFF	; 255
    3a04:	c4 01       	movw	r24, r8
    3a06:	0e 94 54 1e 	call	0x3ca8	; 0x3ca8 <strnlen>
    3a0a:	6c 01       	movw	r12, r24
    3a0c:	51 01       	movw	r10, r2
    3a0e:	1f 77       	andi	r17, 0x7F	; 127
    3a10:	15 c0       	rjmp	.+42     	; 0x3a3c <vfprintf+0x1b8>
    3a12:	82 e0       	ldi	r24, 0x02	; 2
    3a14:	28 2e       	mov	r2, r24
    3a16:	31 2c       	mov	r3, r1
    3a18:	2a 0c       	add	r2, r10
    3a1a:	3b 1c       	adc	r3, r11
    3a1c:	f5 01       	movw	r30, r10
    3a1e:	80 80       	ld	r8, Z
    3a20:	91 80       	ldd	r9, Z+1	; 0x01
    3a22:	16 ff       	sbrs	r17, 6
    3a24:	03 c0       	rjmp	.+6      	; 0x3a2c <vfprintf+0x1a8>
    3a26:	6f 2d       	mov	r22, r15
    3a28:	70 e0       	ldi	r23, 0x00	; 0
    3a2a:	02 c0       	rjmp	.+4      	; 0x3a30 <vfprintf+0x1ac>
    3a2c:	6f ef       	ldi	r22, 0xFF	; 255
    3a2e:	7f ef       	ldi	r23, 0xFF	; 255
    3a30:	c4 01       	movw	r24, r8
    3a32:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <strnlen_P>
    3a36:	6c 01       	movw	r12, r24
    3a38:	10 68       	ori	r17, 0x80	; 128
    3a3a:	51 01       	movw	r10, r2
    3a3c:	13 fd       	sbrc	r17, 3
    3a3e:	1c c0       	rjmp	.+56     	; 0x3a78 <vfprintf+0x1f4>
    3a40:	06 c0       	rjmp	.+12     	; 0x3a4e <vfprintf+0x1ca>
    3a42:	80 e2       	ldi	r24, 0x20	; 32
    3a44:	90 e0       	ldi	r25, 0x00	; 0
    3a46:	b3 01       	movw	r22, r6
    3a48:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <fputc>
    3a4c:	ea 94       	dec	r14
    3a4e:	8e 2d       	mov	r24, r14
    3a50:	90 e0       	ldi	r25, 0x00	; 0
    3a52:	c8 16       	cp	r12, r24
    3a54:	d9 06       	cpc	r13, r25
    3a56:	a8 f3       	brcs	.-22     	; 0x3a42 <vfprintf+0x1be>
    3a58:	0f c0       	rjmp	.+30     	; 0x3a78 <vfprintf+0x1f4>
    3a5a:	f4 01       	movw	r30, r8
    3a5c:	17 fd       	sbrc	r17, 7
    3a5e:	85 91       	lpm	r24, Z+
    3a60:	17 ff       	sbrs	r17, 7
    3a62:	81 91       	ld	r24, Z+
    3a64:	4f 01       	movw	r8, r30
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	b3 01       	movw	r22, r6
    3a6a:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <fputc>
    3a6e:	e1 10       	cpse	r14, r1
    3a70:	ea 94       	dec	r14
    3a72:	08 94       	sec
    3a74:	c1 08       	sbc	r12, r1
    3a76:	d1 08       	sbc	r13, r1
    3a78:	c1 14       	cp	r12, r1
    3a7a:	d1 04       	cpc	r13, r1
    3a7c:	71 f7       	brne	.-36     	; 0x3a5a <vfprintf+0x1d6>
    3a7e:	e7 c0       	rjmp	.+462    	; 0x3c4e <vfprintf+0x3ca>
    3a80:	84 36       	cpi	r24, 0x64	; 100
    3a82:	11 f0       	breq	.+4      	; 0x3a88 <vfprintf+0x204>
    3a84:	89 36       	cpi	r24, 0x69	; 105
    3a86:	51 f5       	brne	.+84     	; 0x3adc <vfprintf+0x258>
    3a88:	f5 01       	movw	r30, r10
    3a8a:	17 ff       	sbrs	r17, 7
    3a8c:	07 c0       	rjmp	.+14     	; 0x3a9c <vfprintf+0x218>
    3a8e:	80 81       	ld	r24, Z
    3a90:	91 81       	ldd	r25, Z+1	; 0x01
    3a92:	a2 81       	ldd	r26, Z+2	; 0x02
    3a94:	b3 81       	ldd	r27, Z+3	; 0x03
    3a96:	24 e0       	ldi	r18, 0x04	; 4
    3a98:	30 e0       	ldi	r19, 0x00	; 0
    3a9a:	08 c0       	rjmp	.+16     	; 0x3aac <vfprintf+0x228>
    3a9c:	80 81       	ld	r24, Z
    3a9e:	91 81       	ldd	r25, Z+1	; 0x01
    3aa0:	aa 27       	eor	r26, r26
    3aa2:	97 fd       	sbrc	r25, 7
    3aa4:	a0 95       	com	r26
    3aa6:	ba 2f       	mov	r27, r26
    3aa8:	22 e0       	ldi	r18, 0x02	; 2
    3aaa:	30 e0       	ldi	r19, 0x00	; 0
    3aac:	a2 0e       	add	r10, r18
    3aae:	b3 1e       	adc	r11, r19
    3ab0:	01 2f       	mov	r16, r17
    3ab2:	0f 76       	andi	r16, 0x6F	; 111
    3ab4:	b7 ff       	sbrs	r27, 7
    3ab6:	08 c0       	rjmp	.+16     	; 0x3ac8 <vfprintf+0x244>
    3ab8:	b0 95       	com	r27
    3aba:	a0 95       	com	r26
    3abc:	90 95       	com	r25
    3abe:	81 95       	neg	r24
    3ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ac2:	af 4f       	sbci	r26, 0xFF	; 255
    3ac4:	bf 4f       	sbci	r27, 0xFF	; 255
    3ac6:	00 68       	ori	r16, 0x80	; 128
    3ac8:	bc 01       	movw	r22, r24
    3aca:	cd 01       	movw	r24, r26
    3acc:	a2 01       	movw	r20, r4
    3ace:	2a e0       	ldi	r18, 0x0A	; 10
    3ad0:	30 e0       	ldi	r19, 0x00	; 0
    3ad2:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__ultoa_invert>
    3ad6:	d8 2e       	mov	r13, r24
    3ad8:	d4 18       	sub	r13, r4
    3ada:	3f c0       	rjmp	.+126    	; 0x3b5a <vfprintf+0x2d6>
    3adc:	85 37       	cpi	r24, 0x75	; 117
    3ade:	21 f4       	brne	.+8      	; 0x3ae8 <vfprintf+0x264>
    3ae0:	1f 7e       	andi	r17, 0xEF	; 239
    3ae2:	2a e0       	ldi	r18, 0x0A	; 10
    3ae4:	30 e0       	ldi	r19, 0x00	; 0
    3ae6:	20 c0       	rjmp	.+64     	; 0x3b28 <vfprintf+0x2a4>
    3ae8:	19 7f       	andi	r17, 0xF9	; 249
    3aea:	8f 36       	cpi	r24, 0x6F	; 111
    3aec:	a9 f0       	breq	.+42     	; 0x3b18 <vfprintf+0x294>
    3aee:	80 37       	cpi	r24, 0x70	; 112
    3af0:	20 f4       	brcc	.+8      	; 0x3afa <vfprintf+0x276>
    3af2:	88 35       	cpi	r24, 0x58	; 88
    3af4:	09 f0       	breq	.+2      	; 0x3af8 <vfprintf+0x274>
    3af6:	ae c0       	rjmp	.+348    	; 0x3c54 <vfprintf+0x3d0>
    3af8:	0b c0       	rjmp	.+22     	; 0x3b10 <vfprintf+0x28c>
    3afa:	80 37       	cpi	r24, 0x70	; 112
    3afc:	21 f0       	breq	.+8      	; 0x3b06 <vfprintf+0x282>
    3afe:	88 37       	cpi	r24, 0x78	; 120
    3b00:	09 f0       	breq	.+2      	; 0x3b04 <vfprintf+0x280>
    3b02:	a8 c0       	rjmp	.+336    	; 0x3c54 <vfprintf+0x3d0>
    3b04:	01 c0       	rjmp	.+2      	; 0x3b08 <vfprintf+0x284>
    3b06:	10 61       	ori	r17, 0x10	; 16
    3b08:	14 ff       	sbrs	r17, 4
    3b0a:	09 c0       	rjmp	.+18     	; 0x3b1e <vfprintf+0x29a>
    3b0c:	14 60       	ori	r17, 0x04	; 4
    3b0e:	07 c0       	rjmp	.+14     	; 0x3b1e <vfprintf+0x29a>
    3b10:	14 ff       	sbrs	r17, 4
    3b12:	08 c0       	rjmp	.+16     	; 0x3b24 <vfprintf+0x2a0>
    3b14:	16 60       	ori	r17, 0x06	; 6
    3b16:	06 c0       	rjmp	.+12     	; 0x3b24 <vfprintf+0x2a0>
    3b18:	28 e0       	ldi	r18, 0x08	; 8
    3b1a:	30 e0       	ldi	r19, 0x00	; 0
    3b1c:	05 c0       	rjmp	.+10     	; 0x3b28 <vfprintf+0x2a4>
    3b1e:	20 e1       	ldi	r18, 0x10	; 16
    3b20:	30 e0       	ldi	r19, 0x00	; 0
    3b22:	02 c0       	rjmp	.+4      	; 0x3b28 <vfprintf+0x2a4>
    3b24:	20 e1       	ldi	r18, 0x10	; 16
    3b26:	32 e0       	ldi	r19, 0x02	; 2
    3b28:	f5 01       	movw	r30, r10
    3b2a:	17 ff       	sbrs	r17, 7
    3b2c:	07 c0       	rjmp	.+14     	; 0x3b3c <vfprintf+0x2b8>
    3b2e:	60 81       	ld	r22, Z
    3b30:	71 81       	ldd	r23, Z+1	; 0x01
    3b32:	82 81       	ldd	r24, Z+2	; 0x02
    3b34:	93 81       	ldd	r25, Z+3	; 0x03
    3b36:	44 e0       	ldi	r20, 0x04	; 4
    3b38:	50 e0       	ldi	r21, 0x00	; 0
    3b3a:	06 c0       	rjmp	.+12     	; 0x3b48 <vfprintf+0x2c4>
    3b3c:	60 81       	ld	r22, Z
    3b3e:	71 81       	ldd	r23, Z+1	; 0x01
    3b40:	80 e0       	ldi	r24, 0x00	; 0
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	42 e0       	ldi	r20, 0x02	; 2
    3b46:	50 e0       	ldi	r21, 0x00	; 0
    3b48:	a4 0e       	add	r10, r20
    3b4a:	b5 1e       	adc	r11, r21
    3b4c:	a2 01       	movw	r20, r4
    3b4e:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__ultoa_invert>
    3b52:	d8 2e       	mov	r13, r24
    3b54:	d4 18       	sub	r13, r4
    3b56:	01 2f       	mov	r16, r17
    3b58:	0f 77       	andi	r16, 0x7F	; 127
    3b5a:	06 ff       	sbrs	r16, 6
    3b5c:	09 c0       	rjmp	.+18     	; 0x3b70 <vfprintf+0x2ec>
    3b5e:	0e 7f       	andi	r16, 0xFE	; 254
    3b60:	df 14       	cp	r13, r15
    3b62:	30 f4       	brcc	.+12     	; 0x3b70 <vfprintf+0x2ec>
    3b64:	04 ff       	sbrs	r16, 4
    3b66:	06 c0       	rjmp	.+12     	; 0x3b74 <vfprintf+0x2f0>
    3b68:	02 fd       	sbrc	r16, 2
    3b6a:	04 c0       	rjmp	.+8      	; 0x3b74 <vfprintf+0x2f0>
    3b6c:	0f 7e       	andi	r16, 0xEF	; 239
    3b6e:	02 c0       	rjmp	.+4      	; 0x3b74 <vfprintf+0x2f0>
    3b70:	1d 2d       	mov	r17, r13
    3b72:	01 c0       	rjmp	.+2      	; 0x3b76 <vfprintf+0x2f2>
    3b74:	1f 2d       	mov	r17, r15
    3b76:	80 2f       	mov	r24, r16
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	04 ff       	sbrs	r16, 4
    3b7c:	0c c0       	rjmp	.+24     	; 0x3b96 <vfprintf+0x312>
    3b7e:	fe 01       	movw	r30, r28
    3b80:	ed 0d       	add	r30, r13
    3b82:	f1 1d       	adc	r31, r1
    3b84:	20 81       	ld	r18, Z
    3b86:	20 33       	cpi	r18, 0x30	; 48
    3b88:	11 f4       	brne	.+4      	; 0x3b8e <vfprintf+0x30a>
    3b8a:	09 7e       	andi	r16, 0xE9	; 233
    3b8c:	09 c0       	rjmp	.+18     	; 0x3ba0 <vfprintf+0x31c>
    3b8e:	02 ff       	sbrs	r16, 2
    3b90:	06 c0       	rjmp	.+12     	; 0x3b9e <vfprintf+0x31a>
    3b92:	1e 5f       	subi	r17, 0xFE	; 254
    3b94:	05 c0       	rjmp	.+10     	; 0x3ba0 <vfprintf+0x31c>
    3b96:	86 78       	andi	r24, 0x86	; 134
    3b98:	90 70       	andi	r25, 0x00	; 0
    3b9a:	00 97       	sbiw	r24, 0x00	; 0
    3b9c:	09 f0       	breq	.+2      	; 0x3ba0 <vfprintf+0x31c>
    3b9e:	1f 5f       	subi	r17, 0xFF	; 255
    3ba0:	80 2e       	mov	r8, r16
    3ba2:	99 24       	eor	r9, r9
    3ba4:	03 fd       	sbrc	r16, 3
    3ba6:	12 c0       	rjmp	.+36     	; 0x3bcc <vfprintf+0x348>
    3ba8:	00 ff       	sbrs	r16, 0
    3baa:	0d c0       	rjmp	.+26     	; 0x3bc6 <vfprintf+0x342>
    3bac:	fd 2c       	mov	r15, r13
    3bae:	1e 15       	cp	r17, r14
    3bb0:	50 f4       	brcc	.+20     	; 0x3bc6 <vfprintf+0x342>
    3bb2:	fe 0c       	add	r15, r14
    3bb4:	f1 1a       	sub	r15, r17
    3bb6:	1e 2d       	mov	r17, r14
    3bb8:	06 c0       	rjmp	.+12     	; 0x3bc6 <vfprintf+0x342>
    3bba:	80 e2       	ldi	r24, 0x20	; 32
    3bbc:	90 e0       	ldi	r25, 0x00	; 0
    3bbe:	b3 01       	movw	r22, r6
    3bc0:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <fputc>
    3bc4:	1f 5f       	subi	r17, 0xFF	; 255
    3bc6:	1e 15       	cp	r17, r14
    3bc8:	c0 f3       	brcs	.-16     	; 0x3bba <vfprintf+0x336>
    3bca:	04 c0       	rjmp	.+8      	; 0x3bd4 <vfprintf+0x350>
    3bcc:	1e 15       	cp	r17, r14
    3bce:	10 f4       	brcc	.+4      	; 0x3bd4 <vfprintf+0x350>
    3bd0:	e1 1a       	sub	r14, r17
    3bd2:	01 c0       	rjmp	.+2      	; 0x3bd6 <vfprintf+0x352>
    3bd4:	ee 24       	eor	r14, r14
    3bd6:	84 fe       	sbrs	r8, 4
    3bd8:	0f c0       	rjmp	.+30     	; 0x3bf8 <vfprintf+0x374>
    3bda:	80 e3       	ldi	r24, 0x30	; 48
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	b3 01       	movw	r22, r6
    3be0:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <fputc>
    3be4:	82 fe       	sbrs	r8, 2
    3be6:	1f c0       	rjmp	.+62     	; 0x3c26 <vfprintf+0x3a2>
    3be8:	81 fe       	sbrs	r8, 1
    3bea:	03 c0       	rjmp	.+6      	; 0x3bf2 <vfprintf+0x36e>
    3bec:	88 e5       	ldi	r24, 0x58	; 88
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	10 c0       	rjmp	.+32     	; 0x3c12 <vfprintf+0x38e>
    3bf2:	88 e7       	ldi	r24, 0x78	; 120
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	0d c0       	rjmp	.+26     	; 0x3c12 <vfprintf+0x38e>
    3bf8:	c4 01       	movw	r24, r8
    3bfa:	86 78       	andi	r24, 0x86	; 134
    3bfc:	90 70       	andi	r25, 0x00	; 0
    3bfe:	00 97       	sbiw	r24, 0x00	; 0
    3c00:	91 f0       	breq	.+36     	; 0x3c26 <vfprintf+0x3a2>
    3c02:	81 fc       	sbrc	r8, 1
    3c04:	02 c0       	rjmp	.+4      	; 0x3c0a <vfprintf+0x386>
    3c06:	80 e2       	ldi	r24, 0x20	; 32
    3c08:	01 c0       	rjmp	.+2      	; 0x3c0c <vfprintf+0x388>
    3c0a:	8b e2       	ldi	r24, 0x2B	; 43
    3c0c:	07 fd       	sbrc	r16, 7
    3c0e:	8d e2       	ldi	r24, 0x2D	; 45
    3c10:	90 e0       	ldi	r25, 0x00	; 0
    3c12:	b3 01       	movw	r22, r6
    3c14:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <fputc>
    3c18:	06 c0       	rjmp	.+12     	; 0x3c26 <vfprintf+0x3a2>
    3c1a:	80 e3       	ldi	r24, 0x30	; 48
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	b3 01       	movw	r22, r6
    3c20:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <fputc>
    3c24:	fa 94       	dec	r15
    3c26:	df 14       	cp	r13, r15
    3c28:	c0 f3       	brcs	.-16     	; 0x3c1a <vfprintf+0x396>
    3c2a:	da 94       	dec	r13
    3c2c:	f2 01       	movw	r30, r4
    3c2e:	ed 0d       	add	r30, r13
    3c30:	f1 1d       	adc	r31, r1
    3c32:	80 81       	ld	r24, Z
    3c34:	90 e0       	ldi	r25, 0x00	; 0
    3c36:	b3 01       	movw	r22, r6
    3c38:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <fputc>
    3c3c:	dd 20       	and	r13, r13
    3c3e:	a9 f7       	brne	.-22     	; 0x3c2a <vfprintf+0x3a6>
    3c40:	06 c0       	rjmp	.+12     	; 0x3c4e <vfprintf+0x3ca>
    3c42:	80 e2       	ldi	r24, 0x20	; 32
    3c44:	90 e0       	ldi	r25, 0x00	; 0
    3c46:	b3 01       	movw	r22, r6
    3c48:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <fputc>
    3c4c:	ea 94       	dec	r14
    3c4e:	ee 20       	and	r14, r14
    3c50:	c1 f7       	brne	.-16     	; 0x3c42 <vfprintf+0x3be>
    3c52:	40 ce       	rjmp	.-896    	; 0x38d4 <vfprintf+0x50>
    3c54:	f3 01       	movw	r30, r6
    3c56:	86 81       	ldd	r24, Z+6	; 0x06
    3c58:	97 81       	ldd	r25, Z+7	; 0x07
    3c5a:	02 c0       	rjmp	.+4      	; 0x3c60 <vfprintf+0x3dc>
    3c5c:	8f ef       	ldi	r24, 0xFF	; 255
    3c5e:	9f ef       	ldi	r25, 0xFF	; 255
    3c60:	2d 96       	adiw	r28, 0x0d	; 13
    3c62:	0f b6       	in	r0, 0x3f	; 63
    3c64:	f8 94       	cli
    3c66:	de bf       	out	0x3e, r29	; 62
    3c68:	0f be       	out	0x3f, r0	; 63
    3c6a:	cd bf       	out	0x3d, r28	; 61
    3c6c:	df 91       	pop	r29
    3c6e:	cf 91       	pop	r28
    3c70:	1f 91       	pop	r17
    3c72:	0f 91       	pop	r16
    3c74:	ff 90       	pop	r15
    3c76:	ef 90       	pop	r14
    3c78:	df 90       	pop	r13
    3c7a:	cf 90       	pop	r12
    3c7c:	bf 90       	pop	r11
    3c7e:	af 90       	pop	r10
    3c80:	9f 90       	pop	r9
    3c82:	8f 90       	pop	r8
    3c84:	7f 90       	pop	r7
    3c86:	6f 90       	pop	r6
    3c88:	5f 90       	pop	r5
    3c8a:	4f 90       	pop	r4
    3c8c:	3f 90       	pop	r3
    3c8e:	2f 90       	pop	r2
    3c90:	08 95       	ret

00003c92 <strnlen_P>:
    3c92:	fc 01       	movw	r30, r24
    3c94:	05 90       	lpm	r0, Z+
    3c96:	61 50       	subi	r22, 0x01	; 1
    3c98:	70 40       	sbci	r23, 0x00	; 0
    3c9a:	01 10       	cpse	r0, r1
    3c9c:	d8 f7       	brcc	.-10     	; 0x3c94 <strnlen_P+0x2>
    3c9e:	80 95       	com	r24
    3ca0:	90 95       	com	r25
    3ca2:	8e 0f       	add	r24, r30
    3ca4:	9f 1f       	adc	r25, r31
    3ca6:	08 95       	ret

00003ca8 <strnlen>:
    3ca8:	fc 01       	movw	r30, r24
    3caa:	61 50       	subi	r22, 0x01	; 1
    3cac:	70 40       	sbci	r23, 0x00	; 0
    3cae:	01 90       	ld	r0, Z+
    3cb0:	01 10       	cpse	r0, r1
    3cb2:	d8 f7       	brcc	.-10     	; 0x3caa <strnlen+0x2>
    3cb4:	80 95       	com	r24
    3cb6:	90 95       	com	r25
    3cb8:	8e 0f       	add	r24, r30
    3cba:	9f 1f       	adc	r25, r31
    3cbc:	08 95       	ret

00003cbe <fputc>:
    3cbe:	0f 93       	push	r16
    3cc0:	1f 93       	push	r17
    3cc2:	cf 93       	push	r28
    3cc4:	df 93       	push	r29
    3cc6:	8c 01       	movw	r16, r24
    3cc8:	eb 01       	movw	r28, r22
    3cca:	8b 81       	ldd	r24, Y+3	; 0x03
    3ccc:	81 ff       	sbrs	r24, 1
    3cce:	1b c0       	rjmp	.+54     	; 0x3d06 <fputc+0x48>
    3cd0:	82 ff       	sbrs	r24, 2
    3cd2:	0d c0       	rjmp	.+26     	; 0x3cee <fputc+0x30>
    3cd4:	2e 81       	ldd	r18, Y+6	; 0x06
    3cd6:	3f 81       	ldd	r19, Y+7	; 0x07
    3cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    3cda:	9d 81       	ldd	r25, Y+5	; 0x05
    3cdc:	28 17       	cp	r18, r24
    3cde:	39 07       	cpc	r19, r25
    3ce0:	64 f4       	brge	.+24     	; 0x3cfa <fputc+0x3c>
    3ce2:	e8 81       	ld	r30, Y
    3ce4:	f9 81       	ldd	r31, Y+1	; 0x01
    3ce6:	01 93       	st	Z+, r16
    3ce8:	f9 83       	std	Y+1, r31	; 0x01
    3cea:	e8 83       	st	Y, r30
    3cec:	06 c0       	rjmp	.+12     	; 0x3cfa <fputc+0x3c>
    3cee:	e8 85       	ldd	r30, Y+8	; 0x08
    3cf0:	f9 85       	ldd	r31, Y+9	; 0x09
    3cf2:	80 2f       	mov	r24, r16
    3cf4:	09 95       	icall
    3cf6:	00 97       	sbiw	r24, 0x00	; 0
    3cf8:	31 f4       	brne	.+12     	; 0x3d06 <fputc+0x48>
    3cfa:	8e 81       	ldd	r24, Y+6	; 0x06
    3cfc:	9f 81       	ldd	r25, Y+7	; 0x07
    3cfe:	01 96       	adiw	r24, 0x01	; 1
    3d00:	9f 83       	std	Y+7, r25	; 0x07
    3d02:	8e 83       	std	Y+6, r24	; 0x06
    3d04:	02 c0       	rjmp	.+4      	; 0x3d0a <fputc+0x4c>
    3d06:	0f ef       	ldi	r16, 0xFF	; 255
    3d08:	1f ef       	ldi	r17, 0xFF	; 255
    3d0a:	c8 01       	movw	r24, r16
    3d0c:	df 91       	pop	r29
    3d0e:	cf 91       	pop	r28
    3d10:	1f 91       	pop	r17
    3d12:	0f 91       	pop	r16
    3d14:	08 95       	ret

00003d16 <__ultoa_invert>:
    3d16:	fa 01       	movw	r30, r20
    3d18:	aa 27       	eor	r26, r26
    3d1a:	28 30       	cpi	r18, 0x08	; 8
    3d1c:	51 f1       	breq	.+84     	; 0x3d72 <__ultoa_invert+0x5c>
    3d1e:	20 31       	cpi	r18, 0x10	; 16
    3d20:	81 f1       	breq	.+96     	; 0x3d82 <__ultoa_invert+0x6c>
    3d22:	e8 94       	clt
    3d24:	6f 93       	push	r22
    3d26:	6e 7f       	andi	r22, 0xFE	; 254
    3d28:	6e 5f       	subi	r22, 0xFE	; 254
    3d2a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d2c:	8f 4f       	sbci	r24, 0xFF	; 255
    3d2e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d30:	af 4f       	sbci	r26, 0xFF	; 255
    3d32:	b1 e0       	ldi	r27, 0x01	; 1
    3d34:	3e d0       	rcall	.+124    	; 0x3db2 <__ultoa_invert+0x9c>
    3d36:	b4 e0       	ldi	r27, 0x04	; 4
    3d38:	3c d0       	rcall	.+120    	; 0x3db2 <__ultoa_invert+0x9c>
    3d3a:	67 0f       	add	r22, r23
    3d3c:	78 1f       	adc	r23, r24
    3d3e:	89 1f       	adc	r24, r25
    3d40:	9a 1f       	adc	r25, r26
    3d42:	a1 1d       	adc	r26, r1
    3d44:	68 0f       	add	r22, r24
    3d46:	79 1f       	adc	r23, r25
    3d48:	8a 1f       	adc	r24, r26
    3d4a:	91 1d       	adc	r25, r1
    3d4c:	a1 1d       	adc	r26, r1
    3d4e:	6a 0f       	add	r22, r26
    3d50:	71 1d       	adc	r23, r1
    3d52:	81 1d       	adc	r24, r1
    3d54:	91 1d       	adc	r25, r1
    3d56:	a1 1d       	adc	r26, r1
    3d58:	20 d0       	rcall	.+64     	; 0x3d9a <__ultoa_invert+0x84>
    3d5a:	09 f4       	brne	.+2      	; 0x3d5e <__ultoa_invert+0x48>
    3d5c:	68 94       	set
    3d5e:	3f 91       	pop	r19
    3d60:	2a e0       	ldi	r18, 0x0A	; 10
    3d62:	26 9f       	mul	r18, r22
    3d64:	11 24       	eor	r1, r1
    3d66:	30 19       	sub	r19, r0
    3d68:	30 5d       	subi	r19, 0xD0	; 208
    3d6a:	31 93       	st	Z+, r19
    3d6c:	de f6       	brtc	.-74     	; 0x3d24 <__ultoa_invert+0xe>
    3d6e:	cf 01       	movw	r24, r30
    3d70:	08 95       	ret
    3d72:	46 2f       	mov	r20, r22
    3d74:	47 70       	andi	r20, 0x07	; 7
    3d76:	40 5d       	subi	r20, 0xD0	; 208
    3d78:	41 93       	st	Z+, r20
    3d7a:	b3 e0       	ldi	r27, 0x03	; 3
    3d7c:	0f d0       	rcall	.+30     	; 0x3d9c <__ultoa_invert+0x86>
    3d7e:	c9 f7       	brne	.-14     	; 0x3d72 <__ultoa_invert+0x5c>
    3d80:	f6 cf       	rjmp	.-20     	; 0x3d6e <__ultoa_invert+0x58>
    3d82:	46 2f       	mov	r20, r22
    3d84:	4f 70       	andi	r20, 0x0F	; 15
    3d86:	40 5d       	subi	r20, 0xD0	; 208
    3d88:	4a 33       	cpi	r20, 0x3A	; 58
    3d8a:	18 f0       	brcs	.+6      	; 0x3d92 <__ultoa_invert+0x7c>
    3d8c:	49 5d       	subi	r20, 0xD9	; 217
    3d8e:	31 fd       	sbrc	r19, 1
    3d90:	40 52       	subi	r20, 0x20	; 32
    3d92:	41 93       	st	Z+, r20
    3d94:	02 d0       	rcall	.+4      	; 0x3d9a <__ultoa_invert+0x84>
    3d96:	a9 f7       	brne	.-22     	; 0x3d82 <__ultoa_invert+0x6c>
    3d98:	ea cf       	rjmp	.-44     	; 0x3d6e <__ultoa_invert+0x58>
    3d9a:	b4 e0       	ldi	r27, 0x04	; 4
    3d9c:	a6 95       	lsr	r26
    3d9e:	97 95       	ror	r25
    3da0:	87 95       	ror	r24
    3da2:	77 95       	ror	r23
    3da4:	67 95       	ror	r22
    3da6:	ba 95       	dec	r27
    3da8:	c9 f7       	brne	.-14     	; 0x3d9c <__ultoa_invert+0x86>
    3daa:	00 97       	sbiw	r24, 0x00	; 0
    3dac:	61 05       	cpc	r22, r1
    3dae:	71 05       	cpc	r23, r1
    3db0:	08 95       	ret
    3db2:	9b 01       	movw	r18, r22
    3db4:	ac 01       	movw	r20, r24
    3db6:	0a 2e       	mov	r0, r26
    3db8:	06 94       	lsr	r0
    3dba:	57 95       	ror	r21
    3dbc:	47 95       	ror	r20
    3dbe:	37 95       	ror	r19
    3dc0:	27 95       	ror	r18
    3dc2:	ba 95       	dec	r27
    3dc4:	c9 f7       	brne	.-14     	; 0x3db8 <__ultoa_invert+0xa2>
    3dc6:	62 0f       	add	r22, r18
    3dc8:	73 1f       	adc	r23, r19
    3dca:	84 1f       	adc	r24, r20
    3dcc:	95 1f       	adc	r25, r21
    3dce:	a0 1d       	adc	r26, r0
    3dd0:	08 95       	ret

00003dd2 <_exit>:
    3dd2:	f8 94       	cli

00003dd4 <__stop_program>:
    3dd4:	ff cf       	rjmp	.-2      	; 0x3dd4 <__stop_program>
