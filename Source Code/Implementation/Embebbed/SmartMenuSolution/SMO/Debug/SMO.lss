
SMO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000152  00800100  00003048  000030dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003048  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000060  00800252  00800252  0000322e  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00003230  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  00003eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000248  00000000  00000000  00004070  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000381f  00000000  00000000  000042b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fa2  00000000  00000000  00007ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000187e  00000000  00000000  00008a79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ac4  00000000  00000000  0000a2f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000171a  00000000  00000000  0000adbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000260c  00000000  00000000  0000c4d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000eae2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__ctors_end>
       4:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       8:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      10:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      24:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      30:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      40:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__vector_16>
      44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      48:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      4c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      54:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      58:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      5c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      60:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      64:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      68:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      6c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      70:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      74:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      78:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      7c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      80:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      84:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      88:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      8c:	7d 08       	sbc	r7, r13
      8e:	25 11       	cpse	r18, r5
      90:	b4 08       	sbc	r11, r4
      92:	e0 08       	sbc	r14, r0
      94:	09 09       	sbc	r16, r9
      96:	25 11       	cpse	r18, r5
      98:	12 09       	sbc	r17, r2
      9a:	8c 09       	sbc	r24, r12
      9c:	06 0a       	sbc	r0, r22
      9e:	5b 0b       	sbc	r21, r27
      a0:	16 0c       	add	r1, r6
      a2:	90 0c       	add	r9, r0
      a4:	39 0e       	add	r3, r25
      a6:	f4 0e       	add	r15, r20
      a8:	6e 0f       	add	r22, r30
      aa:	e0 0f       	add	r30, r16
      ac:	05 10       	cpse	r0, r5
      ae:	25 11       	cpse	r18, r5
      b0:	1c 10       	cpse	r1, r12
      b2:	7f 10       	cpse	r7, r15
      b4:	e7 10       	cpse	r14, r7
      b6:	6f 11       	cpse	r22, r15
      b8:	76 11       	cpse	r23, r6
      ba:	7d 11       	cpse	r23, r13
      bc:	85 11       	cpse	r24, r5
      be:	8c 11       	cpse	r24, r12
      c0:	93 11       	cpse	r25, r3
      c2:	9c 11       	cpse	r25, r12
      c4:	a6 11       	cpse	r26, r6
      c6:	af 11       	cpse	r26, r15
      c8:	b8 11       	cpse	r27, r8
      ca:	c1 11       	cpse	r28, r1
      cc:	ca 11       	cpse	r28, r10
      ce:	d3 11       	cpse	r29, r3
      d0:	dc 11       	cpse	r29, r12
      d2:	e5 11       	cpse	r30, r5
      d4:	ed 11       	cpse	r30, r13
      d6:	f5 11       	cpse	r31, r5
      d8:	fd 11       	cpse	r31, r13
      da:	05 12       	cpse	r0, r21
      dc:	0e 12       	cpse	r0, r30
      de:	16 12       	cpse	r1, r22
      e0:	1e 12       	cpse	r1, r30

000000e2 <__ctors_end>:
      e2:	11 24       	eor	r1, r1
      e4:	1f be       	out	0x3f, r1	; 63
      e6:	cf ef       	ldi	r28, 0xFF	; 255
      e8:	d0 e1       	ldi	r29, 0x10	; 16
      ea:	de bf       	out	0x3e, r29	; 62
      ec:	cd bf       	out	0x3d, r28	; 61

000000ee <__do_copy_data>:
      ee:	12 e0       	ldi	r17, 0x02	; 2
      f0:	a0 e0       	ldi	r26, 0x00	; 0
      f2:	b1 e0       	ldi	r27, 0x01	; 1
      f4:	e8 e4       	ldi	r30, 0x48	; 72
      f6:	f0 e3       	ldi	r31, 0x30	; 48
      f8:	00 e0       	ldi	r16, 0x00	; 0
      fa:	0b bf       	out	0x3b, r16	; 59
      fc:	02 c0       	rjmp	.+4      	; 0x102 <__do_copy_data+0x14>
      fe:	07 90       	elpm	r0, Z+
     100:	0d 92       	st	X+, r0
     102:	a2 35       	cpi	r26, 0x52	; 82
     104:	b1 07       	cpc	r27, r17
     106:	d9 f7       	brne	.-10     	; 0xfe <__do_copy_data+0x10>

00000108 <__do_clear_bss>:
     108:	12 e0       	ldi	r17, 0x02	; 2
     10a:	a2 e5       	ldi	r26, 0x52	; 82
     10c:	b2 e0       	ldi	r27, 0x02	; 2
     10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
     110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
     112:	a2 3b       	cpi	r26, 0xB2	; 178
     114:	b1 07       	cpc	r27, r17
     116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>
     118:	0e 94 4c 03 	call	0x698	; 0x698 <main>
     11c:	0c 94 22 18 	jmp	0x3044	; 0x3044 <_exit>

00000120 <__bad_interrupt>:
     120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <KEYPAD_Check>:
uint8_t ascii_code[4][4]={16,15,14,13,
						  12,9,6,3,
						  10,8,5,2,
						  11,7,4,1};

uint8_t KEYPAD_Check() {
     124:	af 92       	push	r10
     126:	bf 92       	push	r11
     128:	cf 92       	push	r12
     12a:	df 92       	push	r13
     12c:	ef 92       	push	r14
     12e:	ff 92       	push	r15
     130:	0f 93       	push	r16
     132:	1f 93       	push	r17
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	20 e0       	ldi	r18, 0x00	; 0
     13a:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     13c:	41 e0       	ldi	r20, 0x01	; 1
     13e:	50 e0       	ldi	r21, 0x00	; 0
     140:	e2 e6       	ldi	r30, 0x62	; 98
     142:	f0 e0       	ldi	r31, 0x00	; 0
		_delay_us(10);
		keyin=KEYPAD_PIN & 0x0F;
		if (keyin!=0x0F)
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
     144:	a0 e1       	ldi	r26, 0x10	; 16
     146:	b1 e0       	ldi	r27, 0x01	; 1
     148:	0f 2e       	mov	r0, r31
     14a:	f1 e1       	ldi	r31, 0x11	; 17
     14c:	af 2e       	mov	r10, r31
     14e:	f1 e0       	ldi	r31, 0x01	; 1
     150:	bf 2e       	mov	r11, r31
     152:	f0 2d       	mov	r31, r0
     154:	02 e1       	ldi	r16, 0x12	; 18
     156:	11 e0       	ldi	r17, 0x01	; 1
     158:	0f 2e       	mov	r0, r31
     15a:	f3 e1       	ldi	r31, 0x13	; 19
     15c:	ef 2e       	mov	r14, r31
     15e:	f1 e0       	ldi	r31, 0x01	; 1
     160:	ff 2e       	mov	r15, r31
     162:	f0 2d       	mov	r31, r0
						  11,7,4,1};

uint8_t KEYPAD_Check() {
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     164:	b9 01       	movw	r22, r18
uint8_t ascii_code[4][4]={16,15,14,13,
						  12,9,6,3,
						  10,8,5,2,
						  11,7,4,1};

uint8_t KEYPAD_Check() {
     166:	c9 01       	movw	r24, r18
     168:	04 96       	adiw	r24, 0x04	; 4
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     16a:	6a 01       	movw	r12, r20
     16c:	02 c0       	rjmp	.+4      	; 0x172 <KEYPAD_Check+0x4e>
     16e:	cc 0c       	add	r12, r12
     170:	dd 1c       	adc	r13, r13
     172:	8a 95       	dec	r24
     174:	e2 f7       	brpl	.-8      	; 0x16e <KEYPAD_Check+0x4a>
     176:	c6 01       	movw	r24, r12
     178:	80 95       	com	r24
     17a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     17c:	83 e0       	ldi	r24, 0x03	; 3
     17e:	8a 95       	dec	r24
     180:	f1 f7       	brne	.-4      	; 0x17e <KEYPAD_Check+0x5a>
     182:	00 00       	nop
		_delay_us(10);
		keyin=KEYPAD_PIN & 0x0F;
     184:	80 b1       	in	r24, 0x00	; 0
     186:	8f 70       	andi	r24, 0x0F	; 15
		if (keyin!=0x0F)
     188:	8f 30       	cpi	r24, 0x0F	; 15
     18a:	29 f1       	breq	.+74     	; 0x1d6 <KEYPAD_Check+0xb2>
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
     18c:	9c 91       	ld	r25, X
     18e:	98 17       	cp	r25, r24
     190:	a9 f0       	breq	.+42     	; 0x1bc <KEYPAD_Check+0x98>
     192:	e5 01       	movw	r28, r10
     194:	98 81       	ld	r25, Y
     196:	98 17       	cp	r25, r24
     198:	59 f0       	breq	.+22     	; 0x1b0 <KEYPAD_Check+0x8c>
     19a:	e8 01       	movw	r28, r16
     19c:	98 81       	ld	r25, Y
     19e:	98 17       	cp	r25, r24
     1a0:	51 f0       	breq	.+20     	; 0x1b6 <KEYPAD_Check+0x92>
     1a2:	e7 01       	movw	r28, r14
     1a4:	98 81       	ld	r25, Y
     1a6:	98 17       	cp	r25, r24
     1a8:	b1 f4       	brne	.+44     	; 0x1d6 <KEYPAD_Check+0xb2>
     1aa:	e3 e0       	ldi	r30, 0x03	; 3
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	08 c0       	rjmp	.+16     	; 0x1c0 <KEYPAD_Check+0x9c>
     1b0:	e1 e0       	ldi	r30, 0x01	; 1
     1b2:	f0 e0       	ldi	r31, 0x00	; 0
     1b4:	05 c0       	rjmp	.+10     	; 0x1c0 <KEYPAD_Check+0x9c>
     1b6:	e2 e0       	ldi	r30, 0x02	; 2
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <KEYPAD_Check+0x9c>
     1bc:	e0 e0       	ldi	r30, 0x00	; 0
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	ee 0f       	add	r30, r30
     1c2:	ff 1f       	adc	r31, r31
     1c4:	ee 0f       	add	r30, r30
     1c6:	ff 1f       	adc	r31, r31
     1c8:	6e 0f       	add	r22, r30
     1ca:	7f 1f       	adc	r23, r31
     1cc:	fb 01       	movw	r30, r22
     1ce:	e0 50       	subi	r30, 0x00	; 0
     1d0:	ff 4f       	sbci	r31, 0xFF	; 255
     1d2:	80 81       	ld	r24, Z
     1d4:	06 c0       	rjmp	.+12     	; 0x1e2 <KEYPAD_Check+0xbe>
     1d6:	2f 5f       	subi	r18, 0xFF	; 255
     1d8:	3f 4f       	sbci	r19, 0xFF	; 255
						  10,8,5,2,
						  11,7,4,1};

uint8_t KEYPAD_Check() {
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
     1da:	24 30       	cpi	r18, 0x04	; 4
     1dc:	31 05       	cpc	r19, r1
     1de:	11 f6       	brne	.-124    	; 0x164 <KEYPAD_Check+0x40>
		keyin=KEYPAD_PIN & 0x0F;
		if (keyin!=0x0F)
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
	}
	return 0;
     1e0:	80 e0       	ldi	r24, 0x00	; 0
}
     1e2:	df 91       	pop	r29
     1e4:	cf 91       	pop	r28
     1e6:	1f 91       	pop	r17
     1e8:	0f 91       	pop	r16
     1ea:	ff 90       	pop	r15
     1ec:	ef 90       	pop	r14
     1ee:	df 90       	pop	r13
     1f0:	cf 90       	pop	r12
     1f2:	bf 90       	pop	r11
     1f4:	af 90       	pop	r10
     1f6:	08 95       	ret

000001f8 <KEYPAD_Init>:

void KEYPAD_Init()
{
	//Khai bao huong cho cac chan ket noi keypad
	KEYPAD_DDR=0xF0;
     1f8:	80 ef       	ldi	r24, 0xF0	; 240
     1fa:	80 93 61 00 	sts	0x0061, r24
	KEYPAD_PORT=0x0F;
     1fe:	8f e0       	ldi	r24, 0x0F	; 15
     200:	80 93 62 00 	sts	0x0062, r24
     204:	08 95       	ret

00000206 <LCDBusyLoop>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     206:	8f ec       	ldi	r24, 0xCF	; 207
     208:	97 e0       	ldi	r25, 0x07	; 7
     20a:	01 97       	sbiw	r24, 0x01	; 1
     20c:	f1 f7       	brne	.-4      	; 0x20a <LCDBusyLoop+0x4>
     20e:	00 c0       	rjmp	.+0      	; 0x210 <LCDBusyLoop+0xa>
     210:	00 00       	nop
}

void LCDBusyLoop()
{
	_delay_ms(8);
}
     212:	08 95       	ret

00000214 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
     214:	28 2f       	mov	r18, r24
     216:	22 95       	swap	r18
     218:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
     21a:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
     21c:	66 23       	and	r22, r22
     21e:	11 f4       	brne	.+4      	; 0x224 <LCDByte+0x10>
CLEAR_RS();
     220:	d8 98       	cbi	0x1b, 0	; 27
     222:	01 c0       	rjmp	.+2      	; 0x226 <LCDByte+0x12>
else
SET_RS();
     224:	d8 9a       	sbi	0x1b, 0	; 27

//_delay_ms(0.500);		//tAS

SET_E();
     226:	d9 9a       	sbi	0x1b, 1	; 27

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
     228:	9b b3       	in	r25, 0x1b	; 27
     22a:	22 0f       	add	r18, r18
     22c:	22 0f       	add	r18, r18
     22e:	93 7c       	andi	r25, 0xC3	; 195
     230:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
     232:	9b bb       	out	0x1b, r25	; 27

//_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
     234:	d9 98       	cbi	0x1b, 1	; 27

//_delay_us(1);

//Send the lower nibble
SET_E();
     236:	d9 9a       	sbi	0x1b, 1	; 27

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
     238:	9b b3       	in	r25, 0x1b	; 27
     23a:	88 0f       	add	r24, r24
     23c:	88 0f       	add	r24, r24
     23e:	93 7c       	andi	r25, 0xC3	; 195
     240:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     242:	8b bb       	out	0x1b, r24	; 27

//_delay_us(1);			//tEH

//SEND

CLEAR_E();
     244:	d9 98       	cbi	0x1b, 1	; 27

//_delay_us(1);			//tEL

LCDBusyLoop();
     246:	0e 94 03 01 	call	0x206	; 0x206 <LCDBusyLoop>
}
     24a:	08 95       	ret

0000024c <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	8c 01       	movw	r16, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     256:	fc 01       	movw	r30, r24
     258:	80 81       	ld	r24, Z
     25a:	88 23       	and	r24, r24
     25c:	09 f1       	breq	.+66     	; 0x2a0 <LCDWriteString+0x54>
 {
 	//Custom Char Support
	if(*msg=='%')
     25e:	85 32       	cpi	r24, 0x25	; 37
     260:	a9 f4       	brne	.+42     	; 0x28c <LCDWriteString+0x40>
	{
		msg++;
     262:	e8 01       	movw	r28, r16
     264:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
     266:	f8 01       	movw	r30, r16
     268:	81 81       	ldd	r24, Z+1	; 0x01
     26a:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
     26c:	88 30       	cpi	r24, 0x08	; 8
     26e:	20 f4       	brcc	.+8      	; 0x278 <LCDWriteString+0x2c>
		{
			LCDData(cc);
     270:	61 e0       	ldi	r22, 0x01	; 1
     272:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>
     276:	0e c0       	rjmp	.+28     	; 0x294 <LCDWriteString+0x48>
		}
		else
		{
			LCDData('%');
     278:	85 e2       	ldi	r24, 0x25	; 37
     27a:	61 e0       	ldi	r22, 0x01	; 1
     27c:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>
			LCDData(*msg);
     280:	f8 01       	movw	r30, r16
     282:	81 81       	ldd	r24, Z+1	; 0x01
     284:	61 e0       	ldi	r22, 0x01	; 1
     286:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>
     28a:	04 c0       	rjmp	.+8      	; 0x294 <LCDWriteString+0x48>
		}
	}
	else
	{
		LCDData(*msg);
     28c:	61 e0       	ldi	r22, 0x01	; 1
     28e:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>
     292:	e8 01       	movw	r28, r16
	}
	msg++;
     294:	8e 01       	movw	r16, r28
     296:	0f 5f       	subi	r16, 0xFF	; 255
     298:	1f 4f       	sbci	r17, 0xFF	; 255
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     29a:	89 81       	ldd	r24, Y+1	; 0x01
     29c:	88 23       	and	r24, r24
     29e:	f9 f6       	brne	.-66     	; 0x25e <LCDWriteString+0x12>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	1f 91       	pop	r17
     2a6:	0f 91       	pop	r16
     2a8:	08 95       	ret

000002aa <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     2aa:	ef 92       	push	r14
     2ac:	ff 92       	push	r15
     2ae:	0f 93       	push	r16
     2b0:	1f 93       	push	r17
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	00 d0       	rcall	.+0      	; 0x2b8 <LCDWriteInt+0xe>
     2b8:	00 d0       	rcall	.+0      	; 0x2ba <LCDWriteInt+0x10>
     2ba:	0f 92       	push	r0
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
     2c0:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     2c2:	fe 01       	movw	r30, r28
     2c4:	31 96       	adiw	r30, 0x01	; 1
     2c6:	25 e0       	ldi	r18, 0x05	; 5
     2c8:	df 01       	movw	r26, r30
     2ca:	1d 92       	st	X+, r1
     2cc:	2a 95       	dec	r18
     2ce:	e9 f7       	brne	.-6      	; 0x2ca <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
     2d0:	00 97       	sbiw	r24, 0x00	; 0
     2d2:	61 f0       	breq	.+24     	; 0x2ec <LCDWriteInt+0x42>
     2d4:	fe 01       	movw	r30, r28
     2d6:	36 96       	adiw	r30, 0x06	; 6
	{
	str[i]=val%10;
     2d8:	2a e0       	ldi	r18, 0x0A	; 10
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	b9 01       	movw	r22, r18
     2de:	0e 94 f6 13 	call	0x27ec	; 0x27ec <__divmodhi4>
     2e2:	82 93       	st	-Z, r24
	val=val/10;
     2e4:	86 2f       	mov	r24, r22
     2e6:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     2e8:	00 97       	sbiw	r24, 0x00	; 0
     2ea:	c1 f7       	brne	.-16     	; 0x2dc <LCDWriteInt+0x32>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     2ec:	bf ef       	ldi	r27, 0xFF	; 255
     2ee:	eb 16       	cp	r14, r27
     2f0:	bf ef       	ldi	r27, 0xFF	; 255
     2f2:	fb 06       	cpc	r15, r27
     2f4:	69 f4       	brne	.+26     	; 0x310 <LCDWriteInt+0x66>
		while(str[j]==0) j++;
     2f6:	29 81       	ldd	r18, Y+1	; 0x01
     2f8:	22 23       	and	r18, r18
     2fa:	79 f4       	brne	.+30     	; 0x31a <LCDWriteInt+0x70>
     2fc:	fe 01       	movw	r30, r28
     2fe:	32 96       	adiw	r30, 0x02	; 2
     300:	00 e0       	ldi	r16, 0x00	; 0
     302:	10 e0       	ldi	r17, 0x00	; 0
     304:	0f 5f       	subi	r16, 0xFF	; 255
     306:	1f 4f       	sbci	r17, 0xFF	; 255
     308:	21 91       	ld	r18, Z+
     30a:	22 23       	and	r18, r18
     30c:	d9 f3       	breq	.-10     	; 0x304 <LCDWriteInt+0x5a>
     30e:	07 c0       	rjmp	.+14     	; 0x31e <LCDWriteInt+0x74>
	else
		j=5-field_length;
     310:	05 e0       	ldi	r16, 0x05	; 5
     312:	10 e0       	ldi	r17, 0x00	; 0
     314:	0e 19       	sub	r16, r14
     316:	1f 09       	sbc	r17, r15
     318:	02 c0       	rjmp	.+4      	; 0x31e <LCDWriteInt+0x74>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
     31a:	00 e0       	ldi	r16, 0x00	; 0
     31c:	10 e0       	ldi	r17, 0x00	; 0
	else
		j=5-field_length;

	if(val<0) LCDData('-');
     31e:	99 23       	and	r25, r25
     320:	24 f4       	brge	.+8      	; 0x32a <LCDWriteInt+0x80>
     322:	8d e2       	ldi	r24, 0x2D	; 45
     324:	61 e0       	ldi	r22, 0x01	; 1
     326:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>
	for(i=j;i<5;i++)
     32a:	05 30       	cpi	r16, 0x05	; 5
     32c:	11 05       	cpc	r17, r1
     32e:	bc f4       	brge	.+46     	; 0x35e <LCDWriteInt+0xb4>
	}
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
     330:	e1 e0       	ldi	r30, 0x01	; 1
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	ec 0f       	add	r30, r28
     336:	fd 1f       	adc	r31, r29
     338:	0e 0f       	add	r16, r30
     33a:	1f 1f       	adc	r17, r31
     33c:	0f 2e       	mov	r0, r31
     33e:	f6 e0       	ldi	r31, 0x06	; 6
     340:	ef 2e       	mov	r14, r31
     342:	ff 24       	eor	r15, r15
     344:	f0 2d       	mov	r31, r0
     346:	ec 0e       	add	r14, r28
     348:	fd 1e       	adc	r15, r29
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     34a:	d8 01       	movw	r26, r16
     34c:	8d 91       	ld	r24, X+
     34e:	8d 01       	movw	r16, r26
     350:	80 5d       	subi	r24, 0xD0	; 208
     352:	61 e0       	ldi	r22, 0x01	; 1
     354:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     358:	0e 15       	cp	r16, r14
     35a:	1f 05       	cpc	r17, r15
     35c:	b1 f7       	brne	.-20     	; 0x34a <LCDWriteInt+0xa0>
	{
	LCDData(48+str[i]);
	}
}
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0
     368:	df 91       	pop	r29
     36a:	cf 91       	pop	r28
     36c:	1f 91       	pop	r17
     36e:	0f 91       	pop	r16
     370:	ff 90       	pop	r15
     372:	ef 90       	pop	r14
     374:	08 95       	ret

00000376 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
     376:	84 31       	cpi	r24, 0x14	; 20
     378:	78 f4       	brcc	.+30     	; 0x398 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
     37a:	62 30       	cpi	r22, 0x02	; 2
     37c:	31 f0       	breq	.+12     	; 0x38a <LCDGotoXY+0x14>
     37e:	63 30       	cpi	r22, 0x03	; 3
     380:	31 f0       	breq	.+12     	; 0x38e <LCDGotoXY+0x18>
     382:	61 30       	cpi	r22, 0x01	; 1
     384:	29 f4       	brne	.+10     	; 0x390 <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
     386:	80 64       	ori	r24, 0x40	; 64
			break;
     388:	03 c0       	rjmp	.+6      	; 0x390 <LCDGotoXY+0x1a>
		case 2:
			x+=0x14;
     38a:	8c 5e       	subi	r24, 0xEC	; 236
			break;
     38c:	01 c0       	rjmp	.+2      	; 0x390 <LCDGotoXY+0x1a>
		case 3:
			x+=0x54;
     38e:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
     390:	80 68       	ori	r24, 0x80	; 128
     392:	60 e0       	ldi	r22, 0x00	; 0
     394:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>
     398:	08 95       	ret

0000039a <LCDInit>:
{
	_delay_ms(8);
}

void LCDInit(uint8_t style)
{
     39a:	0f 93       	push	r16
     39c:	1f 93       	push	r17
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
     3a2:	c8 2f       	mov	r28, r24
     3a4:	8b e4       	ldi	r24, 0x4B	; 75
     3a6:	9d e1       	ldi	r25, 0x1D	; 29
     3a8:	01 97       	sbiw	r24, 0x01	; 1
     3aa:	f1 f7       	brne	.-4      	; 0x3a8 <LCDInit+0xe>
     3ac:	00 c0       	rjmp	.+0      	; 0x3ae <LCDInit+0x14>
     3ae:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
     3b0:	8a b3       	in	r24, 0x1a	; 26
     3b2:	8c 63       	ori	r24, 0x3C	; 60
     3b4:	8a bb       	out	0x1a, r24	; 26
	LCD_E_DDR|=(1<<LCD_E_POS);
     3b6:	d1 9a       	sbi	0x1a, 1	; 26
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     3b8:	d0 9a       	sbi	0x1a, 0	; 26

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
     3ba:	8b b3       	in	r24, 0x1b	; 27
     3bc:	83 7c       	andi	r24, 0xC3	; 195
     3be:	8b bb       	out	0x1b, r24	; 27
	CLEAR_E();
     3c0:	d9 98       	cbi	0x1b, 1	; 27
	CLEAR_RS();
     3c2:	d8 98       	cbi	0x1b, 0	; 27

	//Set 4-bit mode
	//_delay_us(0.3);	//tAS

	SET_E();
     3c4:	d9 9a       	sbi	0x1b, 1	; 27
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     3c6:	db 9a       	sbi	0x1b, 3	; 27
	//_delay_us(1);
	CLEAR_E();
     3c8:	d9 98       	cbi	0x1b, 1	; 27
	//_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     3ca:	0e 94 03 01 	call	0x206	; 0x206 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     3ce:	8c 2f       	mov	r24, r28
     3d0:	8c 60       	ori	r24, 0x0C	; 12
     3d2:	60 e0       	ldi	r22, 0x00	; 0
     3d4:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     3d8:	88 e2       	ldi	r24, 0x28	; 40
     3da:	60 e0       	ldi	r22, 0x00	; 0
     3dc:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
     3e0:	80 e4       	ldi	r24, 0x40	; 64
     3e2:	60 e0       	ldi	r22, 0x00	; 0
     3e4:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>
     3e8:	c4 e1       	ldi	r28, 0x14	; 20
     3ea:	d1 e0       	ldi	r29, 0x01	; 1
void LCDBusyLoop()
{
	_delay_ms(8);
}

void LCDInit(uint8_t style)
     3ec:	04 e5       	ldi	r16, 0x54	; 84
     3ee:	11 e0       	ldi	r17, 0x01	; 1
	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
     3f0:	89 91       	ld	r24, Y+
     3f2:	61 e0       	ldi	r22, 0x01	; 1
     3f4:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
     3f8:	c0 17       	cp	r28, r16
     3fa:	d1 07       	cpc	r29, r17
     3fc:	c9 f7       	brne	.-14     	; 0x3f0 <LCDInit+0x56>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	0e 94 bb 01 	call	0x376	; 0x376 <LCDGotoXY>

}
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	1f 91       	pop	r17
     40c:	0f 91       	pop	r16
     40e:	08 95       	ret

00000410 <sMOIfaceKEYPAD_checkpress>:

static uint8_t nrf24l01_addr5[NRF24L01_ADDRSIZE] = NRF24L01_ADDRP5;
static uint8_t nrf24l01_addrtx[NRF24L01_ADDRSIZE] = NRF24L01_ADDRTX;

sc_integer sMOIfaceKEYPAD_checkpress() {
	return KEYPAD_Check();
     410:	0e 94 92 00 	call	0x124	; 0x124 <KEYPAD_Check>
}
     414:	68 2f       	mov	r22, r24
     416:	70 e0       	ldi	r23, 0x00	; 0
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	08 95       	ret

0000041e <sMOIfaceKEYPAD_init>:
void sMOIfaceKEYPAD_init() {
	KEYPAD_Init();
     41e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <KEYPAD_Init>
}
     422:	08 95       	ret

00000424 <sMOIfaceLCD_writeString>:
void sMOIfaceLCD_writeString(const sc_string chr) {
	LCDWriteString(chr);
     424:	0e 94 26 01 	call	0x24c	; 0x24c <LCDWriteString>
}
     428:	08 95       	ret

0000042a <sMOIfaceLCD_writeStringXY>:
void sMOIfaceLCD_writeStringXY(const sc_string chr, const sc_integer x, const sc_integer y) {
     42a:	0f 93       	push	r16
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	ec 01       	movw	r28, r24
     432:	84 2f       	mov	r24, r20
     434:	60 2f       	mov	r22, r16
	LCDWriteStringXY(x,y,chr);
     436:	0e 94 bb 01 	call	0x376	; 0x376 <LCDGotoXY>
     43a:	ce 01       	movw	r24, r28
     43c:	0e 94 26 01 	call	0x24c	; 0x24c <LCDWriteString>
}
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	0f 91       	pop	r16
     446:	08 95       	ret

00000448 <sMOIfaceLCD_writeNumberXY>:
void sMOIfaceLCD_writeNumberXY(const sc_integer num, const sc_integer x, const sc_integer y, const sc_integer l) {
     448:	4f 92       	push	r4
     44a:	5f 92       	push	r5
     44c:	6f 92       	push	r6
     44e:	7f 92       	push	r7
     450:	af 92       	push	r10
     452:	bf 92       	push	r11
     454:	cf 92       	push	r12
     456:	df 92       	push	r13
     458:	ef 92       	push	r14
     45a:	ff 92       	push	r15
     45c:	2b 01       	movw	r4, r22
     45e:	3c 01       	movw	r6, r24
     460:	82 2f       	mov	r24, r18
     462:	6e 2d       	mov	r22, r14
     464:	76 01       	movw	r14, r12
     466:	65 01       	movw	r12, r10
	LCDWriteIntXY(x,y,num,l);
     468:	0e 94 bb 01 	call	0x376	; 0x376 <LCDGotoXY>
     46c:	c2 01       	movw	r24, r4
     46e:	b6 01       	movw	r22, r12
     470:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCDWriteInt>
}
     474:	ff 90       	pop	r15
     476:	ef 90       	pop	r14
     478:	df 90       	pop	r13
     47a:	cf 90       	pop	r12
     47c:	bf 90       	pop	r11
     47e:	af 90       	pop	r10
     480:	7f 90       	pop	r7
     482:	6f 90       	pop	r6
     484:	5f 90       	pop	r5
     486:	4f 90       	pop	r4
     488:	08 95       	ret

0000048a <sMOIfaceLCD_clear>:
void sMOIfaceLCD_clear() {
	LCDClear();
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>
     492:	82 e0       	ldi	r24, 0x02	; 2
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	0e 94 0a 01 	call	0x214	; 0x214 <LCDByte>
}
     49a:	08 95       	ret

0000049c <sMOIfaceLCD_init>:
void sMOIfaceLCD_init() {
	LCDInit(0);
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	0e 94 cd 01 	call	0x39a	; 0x39a <LCDInit>
}
     4a2:	08 95       	ret

000004a4 <sMOIfaceRF_getData>:

sc_string sMOIfaceRF_getData() {
     4a4:	0f 93       	push	r16
     4a6:	1f 93       	push	r17
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
     4ac:	0f 92       	push	r0
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
	uint8_t pipe = 0;
     4b2:	19 82       	std	Y+1, r1	; 0x01
	if (nrf24l01_readready(&pipe)) {
     4b4:	ce 01       	movw	r24, r28
     4b6:	01 96       	adiw	r24, 0x01	; 1
     4b8:	0e 94 0c 06 	call	0xc18	; 0xc18 <nrf24l01_readready>
     4bc:	88 23       	and	r24, r24
     4be:	99 f0       	breq	.+38     	; 0x4e6 <sMOIfaceRF_getData+0x42>
		if (pipe==0) {
     4c0:	89 81       	ldd	r24, Y+1	; 0x01
     4c2:	88 23       	and	r24, r24
     4c4:	99 f4       	brne	.+38     	; 0x4ec <sMOIfaceRF_getData+0x48>
     4c6:	e4 e5       	ldi	r30, 0x54	; 84
     4c8:	f2 e0       	ldi	r31, 0x02	; 2
}
void sMOIfaceLCD_init() {
	LCDInit(0);
}

sc_string sMOIfaceRF_getData() {
     4ca:	cf 01       	movw	r24, r30
     4cc:	09 96       	adiw	r24, 0x09	; 9
	uint8_t pipe = 0;
	if (nrf24l01_readready(&pipe)) {
		if (pipe==0) {
		//clear buffer
		for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
     4ce:	11 92       	st	Z+, r1
     4d0:	e8 17       	cp	r30, r24
     4d2:	f9 07       	cpc	r31, r25
     4d4:	e1 f7       	brne	.-8      	; 0x4ce <sMOIfaceRF_getData+0x2a>
		
		//read buffer
		nrf24l01_read(pipe,bufferin);
     4d6:	04 e5       	ldi	r16, 0x54	; 84
     4d8:	12 e0       	ldi	r17, 0x02	; 2
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	b8 01       	movw	r22, r16
     4de:	0e 94 1e 06 	call	0xc3c	; 0xc3c <nrf24l01_read>
		return bufferin;
     4e2:	c8 01       	movw	r24, r16
     4e4:	05 c0       	rjmp	.+10     	; 0x4f0 <sMOIfaceRF_getData+0x4c>
		}
	}
	return "";
     4e6:	84 e5       	ldi	r24, 0x54	; 84
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <sMOIfaceRF_getData+0x4c>
     4ec:	84 e5       	ldi	r24, 0x54	; 84
     4ee:	91 e0       	ldi	r25, 0x01	; 1
}
     4f0:	0f 90       	pop	r0
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	1f 91       	pop	r17
     4f8:	0f 91       	pop	r16
     4fa:	08 95       	ret

000004fc <sMOIfaceRF_sendMsg>:

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	9c 01       	movw	r18, r24
     502:	cf e5       	ldi	r28, 0x5F	; 95
     504:	d2 e0       	ldi	r29, 0x02	; 2
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	90 e0       	ldi	r25, 0x00	; 0
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
		if (i<strlen(msg)) bufferout[i]=msg[i];
     50a:	a2 2f       	mov	r26, r18
     50c:	b3 2f       	mov	r27, r19
     50e:	fd 01       	movw	r30, r26
     510:	01 90       	ld	r0, Z+
     512:	00 20       	and	r0, r0
     514:	e9 f7       	brne	.-6      	; 0x510 <sMOIfaceRF_sendMsg+0x14>
     516:	31 97       	sbiw	r30, 0x01	; 1
     518:	ea 1b       	sub	r30, r26
     51a:	fb 0b       	sbc	r31, r27
     51c:	8e 17       	cp	r24, r30
     51e:	9f 07       	cpc	r25, r31
     520:	30 f4       	brcc	.+12     	; 0x52e <sMOIfaceRF_sendMsg+0x32>
		}
	}
	return "";
}

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
     522:	f9 01       	movw	r30, r18
     524:	e8 0f       	add	r30, r24
     526:	f9 1f       	adc	r31, r25
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
		if (i<strlen(msg)) bufferout[i]=msg[i];
     528:	40 81       	ld	r20, Z
     52a:	48 83       	st	Y, r20
     52c:	01 c0       	rjmp	.+2      	; 0x530 <sMOIfaceRF_sendMsg+0x34>
		else bufferout[i] = 0;
     52e:	18 82       	st	Y, r1
     530:	01 96       	adiw	r24, 0x01	; 1
     532:	21 96       	adiw	r28, 0x01	; 1
	return "";
}

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
     534:	89 30       	cpi	r24, 0x09	; 9
     536:	91 05       	cpc	r25, r1
     538:	41 f7       	brne	.-48     	; 0x50a <sMOIfaceRF_sendMsg+0xe>
		if (i<strlen(msg)) bufferout[i]=msg[i];
		else bufferout[i] = 0;
	}
	
	//Set Address for Data
	nrf24l01_settxaddr(nrf24l01_addrtx);
     53a:	85 e5       	ldi	r24, 0x55	; 85
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     542:	8f e5       	ldi	r24, 0x5F	; 95
     544:	92 e0       	ldi	r25, 0x02	; 2
     546:	0e 94 44 06 	call	0xc88	; 0xc88 <nrf24l01_write>
		}
	}
	return "";
}

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	81 30       	cpi	r24, 0x01	; 1
     54e:	09 f0       	breq	.+2      	; 0x552 <sMOIfaceRF_sendMsg+0x56>
     550:	90 e0       	ldi	r25, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     552:	89 2f       	mov	r24, r25
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	08 95       	ret

0000055a <sMOIfaceRF_sendCheck>:

sc_boolean sMOIfaceRF_sendCheck() {
     55a:	ef e5       	ldi	r30, 0x5F	; 95
     55c:	f2 e0       	ldi	r31, 0x02	; 2
     55e:	cf 01       	movw	r24, r30
     560:	09 96       	adiw	r24, 0x09	; 9
	//set all buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferout[i] = 1;
     562:	21 e0       	ldi	r18, 0x01	; 1
     564:	21 93       	st	Z+, r18
     566:	e8 17       	cp	r30, r24
     568:	f9 07       	cpc	r31, r25
     56a:	e1 f7       	brne	.-8      	; 0x564 <sMOIfaceRF_sendCheck+0xa>
	//Set Address for check
	nrf24l01_settxaddr(nrf24l01_addr5);
     56c:	8a e5       	ldi	r24, 0x5A	; 90
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     574:	8f e5       	ldi	r24, 0x5F	; 95
     576:	92 e0       	ldi	r25, 0x02	; 2
     578:	0e 94 44 06 	call	0xc88	; 0xc88 <nrf24l01_write>
	} else {
		return false;
	}
}

sc_boolean sMOIfaceRF_sendCheck() {
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	81 30       	cpi	r24, 0x01	; 1
     580:	09 f0       	breq	.+2      	; 0x584 <sMOIfaceRF_sendCheck+0x2a>
     582:	90 e0       	ldi	r25, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     584:	89 2f       	mov	r24, r25
     586:	08 95       	ret

00000588 <sMOIfaceRF_getCheck>:

sc_boolean sMOIfaceRF_getCheck() {
     588:	0f 93       	push	r16
     58a:	1f 93       	push	r17
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	0f 92       	push	r0
     592:	cd b7       	in	r28, 0x3d	; 61
     594:	de b7       	in	r29, 0x3e	; 62
	uint8_t pipe = 0;
     596:	19 82       	std	Y+1, r1	; 0x01
	if (nrf24l01_readready(&pipe)) {
     598:	ce 01       	movw	r24, r28
     59a:	01 96       	adiw	r24, 0x01	; 1
     59c:	0e 94 0c 06 	call	0xc18	; 0xc18 <nrf24l01_readready>
     5a0:	88 23       	and	r24, r24
     5a2:	f1 f0       	breq	.+60     	; 0x5e0 <sMOIfaceRF_getCheck+0x58>
		if (pipe==5) {
     5a4:	89 81       	ldd	r24, Y+1	; 0x01
     5a6:	85 30       	cpi	r24, 0x05	; 5
     5a8:	e9 f4       	brne	.+58     	; 0x5e4 <sMOIfaceRF_getCheck+0x5c>
     5aa:	e4 e5       	ldi	r30, 0x54	; 84
     5ac:	f2 e0       	ldi	r31, 0x02	; 2
	} else {
		return false;
	}
}

sc_boolean sMOIfaceRF_getCheck() {
     5ae:	8f 01       	movw	r16, r30
     5b0:	07 5f       	subi	r16, 0xF7	; 247
     5b2:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t pipe = 0;
	if (nrf24l01_readready(&pipe)) {
		if (pipe==5) {
			//clear buffer
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
     5b4:	11 92       	st	Z+, r1
     5b6:	e0 17       	cp	r30, r16
     5b8:	f1 07       	cpc	r31, r17
     5ba:	e1 f7       	brne	.-8      	; 0x5b4 <sMOIfaceRF_getCheck+0x2c>
			
			//read buffer
			nrf24l01_read(pipe,bufferin);
     5bc:	85 e0       	ldi	r24, 0x05	; 5
     5be:	64 e5       	ldi	r22, 0x54	; 84
     5c0:	72 e0       	ldi	r23, 0x02	; 2
     5c2:	0e 94 1e 06 	call	0xc3c	; 0xc3c <nrf24l01_read>
			
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) if (bufferin[i]!=1) return false;
     5c6:	80 91 54 02 	lds	r24, 0x0254
     5ca:	81 30       	cpi	r24, 0x01	; 1
     5cc:	69 f4       	brne	.+26     	; 0x5e8 <sMOIfaceRF_getCheck+0x60>
     5ce:	e5 e5       	ldi	r30, 0x55	; 85
     5d0:	f2 e0       	ldi	r31, 0x02	; 2
     5d2:	81 91       	ld	r24, Z+
     5d4:	81 30       	cpi	r24, 0x01	; 1
     5d6:	51 f4       	brne	.+20     	; 0x5ec <sMOIfaceRF_getCheck+0x64>
     5d8:	e0 17       	cp	r30, r16
     5da:	f1 07       	cpc	r31, r17
     5dc:	d1 f7       	brne	.-12     	; 0x5d2 <sMOIfaceRF_getCheck+0x4a>
     5de:	07 c0       	rjmp	.+14     	; 0x5ee <sMOIfaceRF_getCheck+0x66>
			return true;
		}
	}
	return false;
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	05 c0       	rjmp	.+10     	; 0x5ee <sMOIfaceRF_getCheck+0x66>
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	03 c0       	rjmp	.+6      	; 0x5ee <sMOIfaceRF_getCheck+0x66>
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
			
			//read buffer
			nrf24l01_read(pipe,bufferin);
			
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) if (bufferin[i]!=1) return false;
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	01 c0       	rjmp	.+2      	; 0x5ee <sMOIfaceRF_getCheck+0x66>
     5ec:	80 e0       	ldi	r24, 0x00	; 0
			return true;
		}
	}
	return false;
}
     5ee:	0f 90       	pop	r0
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	08 95       	ret

000005fa <sMOIfaceRF_sendData>:

sc_boolean sMOIfaceRF_sendData(const sc_integer cmd, const sc_integer id, const sc_integer dish_id, const sc_integer amount) {
     5fa:	af 92       	push	r10
     5fc:	ef 92       	push	r14
     5fe:	82 2f       	mov	r24, r18
     600:	ef e5       	ldi	r30, 0x5F	; 95
     602:	f2 e0       	ldi	r31, 0x02	; 2
     604:	af 01       	movw	r20, r30
     606:	47 5f       	subi	r20, 0xF7	; 247
     608:	5f 4f       	sbci	r21, 0xFF	; 255
	
	unsigned char num;
	unsigned char mod;
	//clear buffer
	for(uint8_t i=0; i<sizeof(bufferout); i++) bufferout[i] = 0;
     60a:	11 92       	st	Z+, r1
     60c:	e4 17       	cp	r30, r20
     60e:	f5 07       	cpc	r31, r21
     610:	e1 f7       	brne	.-8      	; 0x60a <sMOIfaceRF_sendData+0x10>
	
	//Lenh cho data: 1-goi mon, 2-huy mon, 3-thanh toan, 4-goi boi ban
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
     612:	60 5d       	subi	r22, 0xD0	; 208
     614:	60 93 5f 02 	sts	0x025F, r22
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     618:	3a e0       	ldi	r19, 0x0A	; 10
     61a:	63 2f       	mov	r22, r19
     61c:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     620:	90 5d       	subi	r25, 0xD0	; 208
     622:	90 93 61 02 	sts	0x0261, r25
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     626:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     62a:	90 5d       	subi	r25, 0xD0	; 208
     62c:	90 93 60 02 	sts	0x0260, r25
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
		num/=10;
     630:	8e 2d       	mov	r24, r14
     632:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__udivmodqi4>
		bufferout[3+i]=mod+'0';
     636:	90 5d       	subi	r25, 0xD0	; 208
     638:	90 93 64 02 	sts	0x0264, r25
	}
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
     63c:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__udivmodqi4>
		num/=10;
		bufferout[3+i]=mod+'0';
     640:	90 5d       	subi	r25, 0xD0	; 208
     642:	90 93 63 02 	sts	0x0263, r25
	}
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
     646:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__udivmodqi4>
		num/=10;
		bufferout[3+i]=mod+'0';
     64a:	90 5d       	subi	r25, 0xD0	; 208
     64c:	90 93 62 02 	sts	0x0262, r25
	}
	
	//Chuyen doi so luong mon an
	num=amount;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     650:	8a 2d       	mov	r24, r10
     652:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__udivmodqi4>
		num/=10;
		bufferout[6+i]=mod+'0';
     656:	90 5d       	subi	r25, 0xD0	; 208
     658:	90 93 66 02 	sts	0x0266, r25
	}
	
	//Chuyen doi so luong mon an
	num=amount;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     65c:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__udivmodqi4>
		num/=10;
		bufferout[6+i]=mod+'0';
     660:	90 5d       	subi	r25, 0xD0	; 208
     662:	90 93 65 02 	sts	0x0265, r25
	}
	
	//Set Address for Data
	nrf24l01_settxaddr(nrf24l01_addrtx);
     666:	85 e5       	ldi	r24, 0x55	; 85
     668:	91 e0       	ldi	r25, 0x01	; 1
     66a:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     66e:	8f e5       	ldi	r24, 0x5F	; 95
     670:	92 e0       	ldi	r25, 0x02	; 2
     672:	0e 94 44 06 	call	0xc88	; 0xc88 <nrf24l01_write>
		}
	}
	return false;
}

sc_boolean sMOIfaceRF_sendData(const sc_integer cmd, const sc_integer id, const sc_integer dish_id, const sc_integer amount) {
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	81 30       	cpi	r24, 0x01	; 1
     67a:	09 f0       	breq	.+2      	; 0x67e <sMOIfaceRF_sendData+0x84>
     67c:	90 e0       	ldi	r25, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     67e:	89 2f       	mov	r24, r25
     680:	ef 90       	pop	r14
     682:	af 90       	pop	r10
     684:	08 95       	ret

00000686 <sMO_setTimer>:


void sMO_setTimer(const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
	TimerSet(evid,time_ms);
     686:	0e 94 f6 12 	call	0x25ec	; 0x25ec <TimerSet>
}
     68a:	08 95       	ret

0000068c <sMO_unsetTimer>:
void sMO_unsetTimer(const sc_eventid evid) {
	TimerUnSet(evid);
     68c:	0e 94 42 13 	call	0x2684	; 0x2684 <TimerUnSet>
}
     690:	08 95       	ret

00000692 <sMOIfaceRF_init>:

void sMOIfaceRF_init() {
	nrf24l01_init();
     692:	0e 94 9a 06 	call	0xd34	; 0xd34 <nrf24l01_init>
}
     696:	08 95       	ret

00000698 <main>:

int main(void)
{
	uint8_t i;
	DDRC=0x0F;
     698:	8f e0       	ldi	r24, 0x0F	; 15
     69a:	84 bb       	out	0x14, r24	; 20
	PORTC=0x0F;
     69c:	85 bb       	out	0x15, r24	; 21
	l=malloc(sizeof(SMO*)) ;
     69e:	82 e0       	ldi	r24, 0x02	; 2
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e 94 1d 14 	call	0x283a	; 0x283a <malloc>
     6a6:	80 93 5d 02 	sts	0x025D, r24
     6aa:	90 93 5e 02 	sts	0x025E, r25
	TimerInit();
     6ae:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <TimerInit>
	sMO_init(l);
     6b2:	80 91 5d 02 	lds	r24, 0x025D
     6b6:	90 91 5e 02 	lds	r25, 0x025E
     6ba:	0e 94 59 07 	call	0xeb2	; 0xeb2 <sMO_init>
	sMO_enter(l);
     6be:	80 91 5d 02 	lds	r24, 0x025D
     6c2:	90 91 5e 02 	lds	r25, 0x025E
     6c6:	0e 94 60 07 	call	0xec0	; 0xec0 <sMO_enter>
	
	while(1)
	{
		sMO_runCycle(l);
     6ca:	80 91 5d 02 	lds	r24, 0x025D
     6ce:	90 91 5e 02 	lds	r25, 0x025E
     6d2:	0e 94 37 08 	call	0x106e	; 0x106e <sMO_runCycle>
     6d6:	f9 cf       	rjmp	.-14     	; 0x6ca <main+0x32>

000006d8 <__vector_16>:
	}
}

ISR (TIMER0_OVF_vect) {
     6d8:	1f 92       	push	r1
     6da:	0f 92       	push	r0
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	0f 92       	push	r0
     6e0:	0b b6       	in	r0, 0x3b	; 59
     6e2:	0f 92       	push	r0
     6e4:	11 24       	eor	r1, r1
     6e6:	2f 93       	push	r18
     6e8:	3f 93       	push	r19
     6ea:	4f 93       	push	r20
     6ec:	5f 93       	push	r21
     6ee:	6f 93       	push	r22
     6f0:	7f 93       	push	r23
     6f2:	8f 93       	push	r24
     6f4:	9f 93       	push	r25
     6f6:	af 93       	push	r26
     6f8:	bf 93       	push	r27
     6fa:	ef 93       	push	r30
     6fc:	ff 93       	push	r31
	TCNT0=131;
     6fe:	83 e8       	ldi	r24, 0x83	; 131
     700:	82 bf       	out	0x32, r24	; 50
	TimerCheck(l);
     702:	80 91 5d 02 	lds	r24, 0x025D
     706:	90 91 5e 02 	lds	r25, 0x025E
     70a:	0e 94 77 13 	call	0x26ee	; 0x26ee <TimerCheck>
     70e:	ff 91       	pop	r31
     710:	ef 91       	pop	r30
     712:	bf 91       	pop	r27
     714:	af 91       	pop	r26
     716:	9f 91       	pop	r25
     718:	8f 91       	pop	r24
     71a:	7f 91       	pop	r23
     71c:	6f 91       	pop	r22
     71e:	5f 91       	pop	r21
     720:	4f 91       	pop	r20
     722:	3f 91       	pop	r19
     724:	2f 91       	pop	r18
     726:	0f 90       	pop	r0
     728:	0b be       	out	0x3b, r0	; 59
     72a:	0f 90       	pop	r0
     72c:	0f be       	out	0x3f, r0	; 63
     72e:	0f 90       	pop	r0
     730:	1f 90       	pop	r1
     732:	18 95       	reti

00000734 <nrf24l01_readregister>:

/*
 * read one register
 */
uint8_t nrf24l01_readregister(uint8_t reg) {
	nrf24l01_CSNlo; //low CSN
     734:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     736:	8f 71       	andi	r24, 0x1F	; 31
     738:	0e 94 e5 12 	call	0x25ca	; 0x25ca <spi_writereadbyte>
    uint8_t result = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
     73c:	8f ef       	ldi	r24, 0xFF	; 255
     73e:	0e 94 e5 12 	call	0x25ca	; 0x25ca <spi_writereadbyte>
    nrf24l01_CSNhi; //high CSN
     742:	ae 9a       	sbi	0x15, 6	; 21
    return result;
}
     744:	08 95       	ret

00000746 <nrf24l01_readregisters>:

/*
 * read many registers
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
     746:	ff 92       	push	r15
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	06 2f       	mov	r16, r22
     752:	f7 2e       	mov	r15, r23
     754:	14 2f       	mov	r17, r20
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
     756:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     758:	8f 71       	andi	r24, 0x1F	; 31
     75a:	0e 94 e5 12 	call	0x25ca	; 0x25ca <spi_writereadbyte>
	for(i=0; i<len; i++)
     75e:	11 23       	and	r17, r17
     760:	51 f0       	breq	.+20     	; 0x776 <nrf24l01_readregisters+0x30>
     762:	c0 2f       	mov	r28, r16
     764:	df 2d       	mov	r29, r15
     766:	00 e0       	ldi	r16, 0x00	; 0
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
     768:	8f ef       	ldi	r24, 0xFF	; 255
     76a:	0e 94 e5 12 	call	0x25ca	; 0x25ca <spi_writereadbyte>
     76e:	89 93       	st	Y+, r24
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     770:	0f 5f       	subi	r16, 0xFF	; 255
     772:	01 17       	cp	r16, r17
     774:	c9 f7       	brne	.-14     	; 0x768 <nrf24l01_readregisters+0x22>
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
	nrf24l01_CSNhi; //high CSN
     776:	ae 9a       	sbi	0x15, 6	; 21
}
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	0f 91       	pop	r16
     780:	ff 90       	pop	r15
     782:	08 95       	ret

00000784 <nrf24l01_writeregister>:

/*
 * write one register
 */
void nrf24l01_writeregister(uint8_t reg, uint8_t value) {
     784:	cf 93       	push	r28
     786:	c6 2f       	mov	r28, r22
	nrf24l01_CSNlo; //low CSN
     788:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     78a:	8f 71       	andi	r24, 0x1F	; 31
     78c:	80 62       	ori	r24, 0x20	; 32
     78e:	0e 94 e5 12 	call	0x25ca	; 0x25ca <spi_writereadbyte>
	spi_writereadbyte(value); //write register
     792:	8c 2f       	mov	r24, r28
     794:	0e 94 e5 12 	call	0x25ca	; 0x25ca <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     798:	ae 9a       	sbi	0x15, 6	; 21
}
     79a:	cf 91       	pop	r28
     79c:	08 95       	ret

0000079e <nrf24l01_writeregisters>:

/*
 * write many registers
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
     79e:	ff 92       	push	r15
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	06 2f       	mov	r16, r22
     7aa:	f7 2e       	mov	r15, r23
     7ac:	14 2f       	mov	r17, r20
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
     7ae:	ae 98       	cbi	0x15, 6	; 21
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     7b0:	8f 71       	andi	r24, 0x1F	; 31
     7b2:	80 62       	ori	r24, 0x20	; 32
     7b4:	0e 94 e5 12 	call	0x25ca	; 0x25ca <spi_writereadbyte>
	for(i=0; i<len; i++)
     7b8:	11 23       	and	r17, r17
     7ba:	49 f0       	breq	.+18     	; 0x7ce <nrf24l01_writeregisters+0x30>
     7bc:	c0 2f       	mov	r28, r16
     7be:	df 2d       	mov	r29, r15
     7c0:	00 e0       	ldi	r16, 0x00	; 0
		 spi_writereadbyte(value[i]); //write register
     7c2:	89 91       	ld	r24, Y+
     7c4:	0e 94 e5 12 	call	0x25ca	; 0x25ca <spi_writereadbyte>
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     7c8:	0f 5f       	subi	r16, 0xFF	; 255
     7ca:	01 17       	cp	r16, r17
     7cc:	d1 f7       	brne	.-12     	; 0x7c2 <nrf24l01_writeregisters+0x24>
		 spi_writereadbyte(value[i]); //write register
	nrf24l01_CSNhi; //high CSN
     7ce:	ae 9a       	sbi	0x15, 6	; 21
}
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	ff 90       	pop	r15
     7da:	08 95       	ret

000007dc <nrf24l01_revaddress>:

/*
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	04 96       	adiw	r24, 0x04	; 4
     7e2:	db 01       	movw	r26, r22
     7e4:	a2 0f       	add	r26, r18
     7e6:	b3 1f       	adc	r27, r19
     7e8:	fc 01       	movw	r30, r24
     7ea:	e2 1b       	sub	r30, r18
     7ec:	f3 0b       	sbc	r31, r19
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
     7ee:	40 81       	ld	r20, Z
     7f0:	4c 93       	st	X, r20
     7f2:	2f 5f       	subi	r18, 0xFF	; 255
     7f4:	3f 4f       	sbci	r19, 0xFF	; 255
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
     7f6:	25 30       	cpi	r18, 0x05	; 5
     7f8:	31 05       	cpc	r19, r1
     7fa:	99 f7       	brne	.-26     	; 0x7e2 <nrf24l01_revaddress+0x6>
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
}
     7fc:	08 95       	ret

000007fe <nrf24l01_setrxaddr>:

/*
 * set rx address
 */
void nrf24l01_setrxaddr(uint8_t pipe, uint8_t *addr) {
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	00 d0       	rcall	.+0      	; 0x804 <nrf24l01_setrxaddr+0x6>
     804:	00 d0       	rcall	.+0      	; 0x806 <nrf24l01_setrxaddr+0x8>
     806:	0f 92       	push	r0
     808:	cd b7       	in	r28, 0x3d	; 61
     80a:	de b7       	in	r29, 0x3e	; 62
	if(pipe == 0) {
     80c:	88 23       	and	r24, r24
     80e:	b1 f4       	brne	.+44     	; 0x83c <nrf24l01_setrxaddr+0x3e>
		memcpy(&nrf24l01_addr0, addr, NRF24L01_ADDRSIZE); //cache address
     810:	a9 ed       	ldi	r26, 0xD9	; 217
     812:	b1 e0       	ldi	r27, 0x01	; 1
     814:	fb 01       	movw	r30, r22
     816:	85 e0       	ldi	r24, 0x05	; 5
     818:	01 90       	ld	r0, Z+
     81a:	0d 92       	st	X+, r0
     81c:	81 50       	subi	r24, 0x01	; 1
     81e:	e1 f7       	brne	.-8      	; 0x818 <nrf24l01_setrxaddr+0x1a>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     820:	cb 01       	movw	r24, r22
     822:	be 01       	movw	r22, r28
     824:	6f 5f       	subi	r22, 0xFF	; 255
     826:	7f 4f       	sbci	r23, 0xFF	; 255
     828:	0e 94 ee 03 	call	0x7dc	; 0x7dc <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE);
     82c:	8a e0       	ldi	r24, 0x0A	; 10
     82e:	be 01       	movw	r22, r28
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	45 e0       	ldi	r20, 0x05	; 5
     836:	0e 94 cf 03 	call	0x79e	; 0x79e <nrf24l01_writeregisters>
     83a:	56 c0       	rjmp	.+172    	; 0x8e8 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 1) {
     83c:	81 30       	cpi	r24, 0x01	; 1
     83e:	b1 f4       	brne	.+44     	; 0x86c <nrf24l01_setrxaddr+0x6e>
		memcpy(&nrf24l01_addr1, addr, NRF24L01_ADDRSIZE); //cache address
     840:	ae ed       	ldi	r26, 0xDE	; 222
     842:	b1 e0       	ldi	r27, 0x01	; 1
     844:	fb 01       	movw	r30, r22
     846:	85 e0       	ldi	r24, 0x05	; 5
     848:	01 90       	ld	r0, Z+
     84a:	0d 92       	st	X+, r0
     84c:	81 50       	subi	r24, 0x01	; 1
     84e:	e1 f7       	brne	.-8      	; 0x848 <nrf24l01_setrxaddr+0x4a>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     850:	cb 01       	movw	r24, r22
     852:	be 01       	movw	r22, r28
     854:	6f 5f       	subi	r22, 0xFF	; 255
     856:	7f 4f       	sbci	r23, 0xFF	; 255
     858:	0e 94 ee 03 	call	0x7dc	; 0x7dc <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P1, addrrev, NRF24L01_ADDRSIZE);
     85c:	8b e0       	ldi	r24, 0x0B	; 11
     85e:	be 01       	movw	r22, r28
     860:	6f 5f       	subi	r22, 0xFF	; 255
     862:	7f 4f       	sbci	r23, 0xFF	; 255
     864:	45 e0       	ldi	r20, 0x05	; 5
     866:	0e 94 cf 03 	call	0x79e	; 0x79e <nrf24l01_writeregisters>
     86a:	3e c0       	rjmp	.+124    	; 0x8e8 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 2) {
     86c:	82 30       	cpi	r24, 0x02	; 2
     86e:	71 f4       	brne	.+28     	; 0x88c <nrf24l01_setrxaddr+0x8e>
		memcpy(&nrf24l01_addr2, addr, NRF24L01_ADDRSIZE); //cache address
     870:	a3 ee       	ldi	r26, 0xE3	; 227
     872:	b1 e0       	ldi	r27, 0x01	; 1
     874:	fb 01       	movw	r30, r22
     876:	85 e0       	ldi	r24, 0x05	; 5
     878:	01 90       	ld	r0, Z+
     87a:	0d 92       	st	X+, r0
     87c:	81 50       	subi	r24, 0x01	; 1
     87e:	e1 f7       	brne	.-8      	; 0x878 <nrf24l01_setrxaddr+0x7a>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P2, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     880:	8c e0       	ldi	r24, 0x0C	; 12
     882:	fb 01       	movw	r30, r22
     884:	64 81       	ldd	r22, Z+4	; 0x04
     886:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
     88a:	2e c0       	rjmp	.+92     	; 0x8e8 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 3) {
     88c:	83 30       	cpi	r24, 0x03	; 3
     88e:	71 f4       	brne	.+28     	; 0x8ac <nrf24l01_setrxaddr+0xae>
		memcpy(&nrf24l01_addr3, addr, NRF24L01_ADDRSIZE); //cache address
     890:	a8 ee       	ldi	r26, 0xE8	; 232
     892:	b1 e0       	ldi	r27, 0x01	; 1
     894:	fb 01       	movw	r30, r22
     896:	85 e0       	ldi	r24, 0x05	; 5
     898:	01 90       	ld	r0, Z+
     89a:	0d 92       	st	X+, r0
     89c:	81 50       	subi	r24, 0x01	; 1
     89e:	e1 f7       	brne	.-8      	; 0x898 <nrf24l01_setrxaddr+0x9a>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P3, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     8a0:	8d e0       	ldi	r24, 0x0D	; 13
     8a2:	fb 01       	movw	r30, r22
     8a4:	64 81       	ldd	r22, Z+4	; 0x04
     8a6:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
     8aa:	1e c0       	rjmp	.+60     	; 0x8e8 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 4) {
     8ac:	84 30       	cpi	r24, 0x04	; 4
     8ae:	71 f4       	brne	.+28     	; 0x8cc <nrf24l01_setrxaddr+0xce>
		memcpy(&nrf24l01_addr4, addr, NRF24L01_ADDRSIZE); //cache address
     8b0:	ad ee       	ldi	r26, 0xED	; 237
     8b2:	b1 e0       	ldi	r27, 0x01	; 1
     8b4:	fb 01       	movw	r30, r22
     8b6:	85 e0       	ldi	r24, 0x05	; 5
     8b8:	01 90       	ld	r0, Z+
     8ba:	0d 92       	st	X+, r0
     8bc:	81 50       	subi	r24, 0x01	; 1
     8be:	e1 f7       	brne	.-8      	; 0x8b8 <nrf24l01_setrxaddr+0xba>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P4, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     8c0:	8e e0       	ldi	r24, 0x0E	; 14
     8c2:	fb 01       	movw	r30, r22
     8c4:	64 81       	ldd	r22, Z+4	; 0x04
     8c6:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
     8ca:	0e c0       	rjmp	.+28     	; 0x8e8 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 5) {
     8cc:	85 30       	cpi	r24, 0x05	; 5
     8ce:	61 f4       	brne	.+24     	; 0x8e8 <nrf24l01_setrxaddr+0xea>
		memcpy(&nrf24l01_addr5, addr, NRF24L01_ADDRSIZE); //cache address
     8d0:	a2 ef       	ldi	r26, 0xF2	; 242
     8d2:	b1 e0       	ldi	r27, 0x01	; 1
     8d4:	fb 01       	movw	r30, r22
     8d6:	01 90       	ld	r0, Z+
     8d8:	0d 92       	st	X+, r0
     8da:	81 50       	subi	r24, 0x01	; 1
     8dc:	e1 f7       	brne	.-8      	; 0x8d6 <nrf24l01_setrxaddr+0xd8>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P5, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     8de:	8f e0       	ldi	r24, 0x0F	; 15
     8e0:	fb 01       	movw	r30, r22
     8e2:	64 81       	ldd	r22, Z+4	; 0x04
     8e4:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
	}
}
     8e8:	0f 90       	pop	r0
     8ea:	0f 90       	pop	r0
     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
     8f0:	0f 90       	pop	r0
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	08 95       	ret

000008f8 <nrf24l01_settxaddr>:

/*
 * set tx address
 */
void nrf24l01_settxaddr(uint8_t *addr) {
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	00 d0       	rcall	.+0      	; 0x8fe <nrf24l01_settxaddr+0x6>
     8fe:	00 d0       	rcall	.+0      	; 0x900 <nrf24l01_settxaddr+0x8>
     900:	0f 92       	push	r0
     902:	cd b7       	in	r28, 0x3d	; 61
     904:	de b7       	in	r29, 0x3e	; 62
	memcpy(&nrf24l01_addrtx, addr, NRF24L01_ADDRSIZE); //cache address
     906:	a7 ef       	ldi	r26, 0xF7	; 247
     908:	b1 e0       	ldi	r27, 0x01	; 1
     90a:	e8 2f       	mov	r30, r24
     90c:	f9 2f       	mov	r31, r25
     90e:	25 e0       	ldi	r18, 0x05	; 5
     910:	01 90       	ld	r0, Z+
     912:	0d 92       	st	X+, r0
     914:	21 50       	subi	r18, 0x01	; 1
     916:	e1 f7       	brne	.-8      	; 0x910 <nrf24l01_settxaddr+0x18>
	uint8_t addrrev[NRF24L01_ADDRSIZE];
	nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     918:	be 01       	movw	r22, r28
     91a:	6f 5f       	subi	r22, 0xFF	; 255
     91c:	7f 4f       	sbci	r23, 0xFF	; 255
     91e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <nrf24l01_revaddress>
	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE); //set rx address for ack on pipe 0
     922:	8a e0       	ldi	r24, 0x0A	; 10
     924:	be 01       	movw	r22, r28
     926:	6f 5f       	subi	r22, 0xFF	; 255
     928:	7f 4f       	sbci	r23, 0xFF	; 255
     92a:	45 e0       	ldi	r20, 0x05	; 5
     92c:	0e 94 cf 03 	call	0x79e	; 0x79e <nrf24l01_writeregisters>
	nrf24l01_writeregisters(NRF24L01_REG_TX_ADDR, addrrev, NRF24L01_ADDRSIZE); //set tx address
     930:	80 e1       	ldi	r24, 0x10	; 16
     932:	be 01       	movw	r22, r28
     934:	6f 5f       	subi	r22, 0xFF	; 255
     936:	7f 4f       	sbci	r23, 0xFF	; 255
     938:	45 e0       	ldi	r20, 0x05	; 5
     93a:	0e 94 cf 03 	call	0x79e	; 0x79e <nrf24l01_writeregisters>
}
     93e:	0f 90       	pop	r0
     940:	0f 90       	pop	r0
     942:	0f 90       	pop	r0
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	08 95       	ret

0000094e <nrf24l01_flushRXfifo>:

/*
 * flush RX fifo
 */
void nrf24l01_flushRXfifo() {
	nrf24l01_CSNlo; //low CSN
     94e:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_FLUSH_RX);
     950:	82 ee       	ldi	r24, 0xE2	; 226
     952:	0e 94 e5 12 	call	0x25ca	; 0x25ca <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     956:	ae 9a       	sbi	0x15, 6	; 21
}
     958:	08 95       	ret

0000095a <nrf24l01_flushTXfifo>:

/*
 * flush TX fifo
 */
void nrf24l01_flushTXfifo() {
	nrf24l01_CSNlo; //low CSN
     95a:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_FLUSH_TX);
     95c:	81 ee       	ldi	r24, 0xE1	; 225
     95e:	0e 94 e5 12 	call	0x25ca	; 0x25ca <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     962:	ae 9a       	sbi	0x15, 6	; 21
}
     964:	08 95       	ret

00000966 <nrf24l01_setRX>:

/*
 * set chip as RX
 */
void nrf24l01_setRX() {
	nrf24l01_setrxaddr(0, nrf24l01_addr0); //restore pipe 0 address
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	69 ed       	ldi	r22, 0xD9	; 217
     96a:	71 e0       	ldi	r23, 0x01	; 1
     96c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <nrf24l01_setrxaddr>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PRIM_RX)); //prx mode
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	0e 94 9a 03 	call	0x734	; 0x734 <nrf24l01_readregister>
     976:	68 2f       	mov	r22, r24
     978:	61 60       	ori	r22, 0x01	; 1
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	0e 94 9a 03 	call	0x734	; 0x734 <nrf24l01_readregister>
     986:	68 2f       	mov	r22, r24
     988:	62 60       	ori	r22, 0x02	; 2
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     990:	87 e0       	ldi	r24, 0x07	; 7
     992:	60 e7       	ldi	r22, 0x70	; 112
     994:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
	nrf24l01_flushRXfifo(); //flush rx fifo
     998:	0e 94 a7 04 	call	0x94e	; 0x94e <nrf24l01_flushRXfifo>
	nrf24l01_flushTXfifo(); //flush tx fifo
     99c:	0e 94 ad 04 	call	0x95a	; 0x95a <nrf24l01_flushTXfifo>
	nrf24l01_CEhi; //start listening
     9a0:	af 9a       	sbi	0x15, 7	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9a2:	82 e3       	ldi	r24, 0x32	; 50
     9a4:	8a 95       	dec	r24
     9a6:	f1 f7       	brne	.-4      	; 0x9a4 <nrf24l01_setRX+0x3e>
	_delay_us(150); //wait for the radio to power up
}
     9a8:	08 95       	ret

000009aa <nrf24l01_setTX>:

/*
 * set chip as TX
 */
void nrf24l01_setTX() {
	nrf24l01_CElo; //stop listening
     9aa:	af 98       	cbi	0x15, 7	; 21
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PRIM_RX)); //ptx mode
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	0e 94 9a 03 	call	0x734	; 0x734 <nrf24l01_readregister>
     9b2:	68 2f       	mov	r22, r24
     9b4:	6e 7f       	andi	r22, 0xFE	; 254
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	0e 94 9a 03 	call	0x734	; 0x734 <nrf24l01_readregister>
     9c2:	68 2f       	mov	r22, r24
     9c4:	62 60       	ori	r22, 0x02	; 2
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     9cc:	87 e0       	ldi	r24, 0x07	; 7
     9ce:	60 e7       	ldi	r22, 0x70	; 112
     9d0:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
	nrf24l01_flushTXfifo(); //flush tx fifo
     9d4:	0e 94 ad 04 	call	0x95a	; 0x95a <nrf24l01_flushTXfifo>
     9d8:	82 e3       	ldi	r24, 0x32	; 50
     9da:	8a 95       	dec	r24
     9dc:	f1 f7       	brne	.-4      	; 0x9da <nrf24l01_setTX+0x30>
	_delay_us(150); //wait for the radio to power up
}
     9de:	08 95       	ret

000009e0 <nrf24l01_getstatus>:
/*
 * get status register
 */
uint8_t nrf24l01_getstatus() {
	uint8_t status = 0;
	nrf24l01_CSNlo; //low CSN
     9e0:	ae 98       	cbi	0x15, 6	; 21
	status = spi_writereadbyte(NRF24L01_CMD_NOP); //get status, send NOP request
     9e2:	8f ef       	ldi	r24, 0xFF	; 255
     9e4:	0e 94 e5 12 	call	0x25ca	; 0x25ca <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     9e8:	ae 9a       	sbi	0x15, 6	; 21
	return status;
}
     9ea:	08 95       	ret

000009ec <nrf24l01_printinfo>:

#if NRF24L01_PRINTENABLE == 1
/*
 * print info
 */
void nrf24l01_printinfo(void(*prints)(const char *), void(*printc)(unsigned char data)) {
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
     9fc:	c4 56       	subi	r28, 0x64	; 100
     9fe:	d0 40       	sbci	r29, 0x00	; 0
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	f8 94       	cli
     a04:	de bf       	out	0x3e, r29	; 62
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	cd bf       	out	0x3d, r28	; 61
     a0a:	7c 01       	movw	r14, r24
	char buff[100];
	prints("info\r\n");
     a0c:	8f e5       	ldi	r24, 0x5F	; 95
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	f7 01       	movw	r30, r14
     a12:	09 95       	icall
	sprintf(buff,"STATUS: %02X\r\n", nrf24l01_getstatus()); prints(buff);
     a14:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <nrf24l01_getstatus>
     a18:	00 d0       	rcall	.+0      	; 0xa1a <nrf24l01_printinfo+0x2e>
     a1a:	00 d0       	rcall	.+0      	; 0xa1c <nrf24l01_printinfo+0x30>
     a1c:	00 d0       	rcall	.+0      	; 0xa1e <nrf24l01_printinfo+0x32>
     a1e:	ed b7       	in	r30, 0x3d	; 61
     a20:	fe b7       	in	r31, 0x3e	; 62
     a22:	31 96       	adiw	r30, 0x01	; 1
     a24:	8e 01       	movw	r16, r28
     a26:	0f 5f       	subi	r16, 0xFF	; 255
     a28:	1f 4f       	sbci	r17, 0xFF	; 255
     a2a:	ad b7       	in	r26, 0x3d	; 61
     a2c:	be b7       	in	r27, 0x3e	; 62
     a2e:	12 96       	adiw	r26, 0x02	; 2
     a30:	1c 93       	st	X, r17
     a32:	0e 93       	st	-X, r16
     a34:	11 97       	sbiw	r26, 0x01	; 1
     a36:	26 e6       	ldi	r18, 0x66	; 102
     a38:	31 e0       	ldi	r19, 0x01	; 1
     a3a:	33 83       	std	Z+3, r19	; 0x03
     a3c:	22 83       	std	Z+2, r18	; 0x02
     a3e:	84 83       	std	Z+4, r24	; 0x04
     a40:	15 82       	std	Z+5, r1	; 0x05
     a42:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <sprintf>
     a46:	8d b7       	in	r24, 0x3d	; 61
     a48:	9e b7       	in	r25, 0x3e	; 62
     a4a:	06 96       	adiw	r24, 0x06	; 6
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	f8 94       	cli
     a50:	9e bf       	out	0x3e, r25	; 62
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	8d bf       	out	0x3d, r24	; 61
     a56:	c8 01       	movw	r24, r16
     a58:	f7 01       	movw	r30, r14
     a5a:	09 95       	icall
	sprintf(buff,"CONFIG: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_CONFIG)); prints(buff);
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	0e 94 9a 03 	call	0x734	; 0x734 <nrf24l01_readregister>
     a62:	00 d0       	rcall	.+0      	; 0xa64 <nrf24l01_printinfo+0x78>
     a64:	00 d0       	rcall	.+0      	; 0xa66 <nrf24l01_printinfo+0x7a>
     a66:	00 d0       	rcall	.+0      	; 0xa68 <nrf24l01_printinfo+0x7c>
     a68:	ed b7       	in	r30, 0x3d	; 61
     a6a:	fe b7       	in	r31, 0x3e	; 62
     a6c:	31 96       	adiw	r30, 0x01	; 1
     a6e:	ad b7       	in	r26, 0x3d	; 61
     a70:	be b7       	in	r27, 0x3e	; 62
     a72:	12 96       	adiw	r26, 0x02	; 2
     a74:	1c 93       	st	X, r17
     a76:	0e 93       	st	-X, r16
     a78:	11 97       	sbiw	r26, 0x01	; 1
     a7a:	25 e7       	ldi	r18, 0x75	; 117
     a7c:	31 e0       	ldi	r19, 0x01	; 1
     a7e:	33 83       	std	Z+3, r19	; 0x03
     a80:	22 83       	std	Z+2, r18	; 0x02
     a82:	84 83       	std	Z+4, r24	; 0x04
     a84:	15 82       	std	Z+5, r1	; 0x05
     a86:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <sprintf>
     a8a:	8d b7       	in	r24, 0x3d	; 61
     a8c:	9e b7       	in	r25, 0x3e	; 62
     a8e:	06 96       	adiw	r24, 0x06	; 6
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	f8 94       	cli
     a94:	9e bf       	out	0x3e, r25	; 62
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	8d bf       	out	0x3d, r24	; 61
     a9a:	c8 01       	movw	r24, r16
     a9c:	f7 01       	movw	r30, r14
     a9e:	09 95       	icall
	sprintf(buff,"RF_CH: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_CH)); prints(buff);
     aa0:	85 e0       	ldi	r24, 0x05	; 5
     aa2:	0e 94 9a 03 	call	0x734	; 0x734 <nrf24l01_readregister>
     aa6:	00 d0       	rcall	.+0      	; 0xaa8 <nrf24l01_printinfo+0xbc>
     aa8:	00 d0       	rcall	.+0      	; 0xaaa <nrf24l01_printinfo+0xbe>
     aaa:	00 d0       	rcall	.+0      	; 0xaac <nrf24l01_printinfo+0xc0>
     aac:	ed b7       	in	r30, 0x3d	; 61
     aae:	fe b7       	in	r31, 0x3e	; 62
     ab0:	31 96       	adiw	r30, 0x01	; 1
     ab2:	ad b7       	in	r26, 0x3d	; 61
     ab4:	be b7       	in	r27, 0x3e	; 62
     ab6:	12 96       	adiw	r26, 0x02	; 2
     ab8:	1c 93       	st	X, r17
     aba:	0e 93       	st	-X, r16
     abc:	11 97       	sbiw	r26, 0x01	; 1
     abe:	24 e8       	ldi	r18, 0x84	; 132
     ac0:	31 e0       	ldi	r19, 0x01	; 1
     ac2:	33 83       	std	Z+3, r19	; 0x03
     ac4:	22 83       	std	Z+2, r18	; 0x02
     ac6:	84 83       	std	Z+4, r24	; 0x04
     ac8:	15 82       	std	Z+5, r1	; 0x05
     aca:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <sprintf>
     ace:	8d b7       	in	r24, 0x3d	; 61
     ad0:	9e b7       	in	r25, 0x3e	; 62
     ad2:	06 96       	adiw	r24, 0x06	; 6
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	f8 94       	cli
     ad8:	9e bf       	out	0x3e, r25	; 62
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	8d bf       	out	0x3d, r24	; 61
     ade:	c8 01       	movw	r24, r16
     ae0:	f7 01       	movw	r30, r14
     ae2:	09 95       	icall
	sprintf(buff,"RF_SETUP: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_SETUP)); prints(buff);
     ae4:	86 e0       	ldi	r24, 0x06	; 6
     ae6:	0e 94 9a 03 	call	0x734	; 0x734 <nrf24l01_readregister>
     aea:	00 d0       	rcall	.+0      	; 0xaec <nrf24l01_printinfo+0x100>
     aec:	00 d0       	rcall	.+0      	; 0xaee <nrf24l01_printinfo+0x102>
     aee:	00 d0       	rcall	.+0      	; 0xaf0 <nrf24l01_printinfo+0x104>
     af0:	ed b7       	in	r30, 0x3d	; 61
     af2:	fe b7       	in	r31, 0x3e	; 62
     af4:	31 96       	adiw	r30, 0x01	; 1
     af6:	ad b7       	in	r26, 0x3d	; 61
     af8:	be b7       	in	r27, 0x3e	; 62
     afa:	12 96       	adiw	r26, 0x02	; 2
     afc:	1c 93       	st	X, r17
     afe:	0e 93       	st	-X, r16
     b00:	11 97       	sbiw	r26, 0x01	; 1
     b02:	22 e9       	ldi	r18, 0x92	; 146
     b04:	31 e0       	ldi	r19, 0x01	; 1
     b06:	33 83       	std	Z+3, r19	; 0x03
     b08:	22 83       	std	Z+2, r18	; 0x02
     b0a:	84 83       	std	Z+4, r24	; 0x04
     b0c:	15 82       	std	Z+5, r1	; 0x05
     b0e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <sprintf>
     b12:	8d b7       	in	r24, 0x3d	; 61
     b14:	9e b7       	in	r25, 0x3e	; 62
     b16:	06 96       	adiw	r24, 0x06	; 6
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	f8 94       	cli
     b1c:	9e bf       	out	0x3e, r25	; 62
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	8d bf       	out	0x3d, r24	; 61
     b22:	c8 01       	movw	r24, r16
     b24:	f7 01       	movw	r30, r14
     b26:	09 95       	icall
	sprintf(buff,"EN_AA: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_AA)); prints(buff);
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	0e 94 9a 03 	call	0x734	; 0x734 <nrf24l01_readregister>
     b2e:	00 d0       	rcall	.+0      	; 0xb30 <nrf24l01_printinfo+0x144>
     b30:	00 d0       	rcall	.+0      	; 0xb32 <nrf24l01_printinfo+0x146>
     b32:	00 d0       	rcall	.+0      	; 0xb34 <nrf24l01_printinfo+0x148>
     b34:	ed b7       	in	r30, 0x3d	; 61
     b36:	fe b7       	in	r31, 0x3e	; 62
     b38:	31 96       	adiw	r30, 0x01	; 1
     b3a:	ad b7       	in	r26, 0x3d	; 61
     b3c:	be b7       	in	r27, 0x3e	; 62
     b3e:	12 96       	adiw	r26, 0x02	; 2
     b40:	1c 93       	st	X, r17
     b42:	0e 93       	st	-X, r16
     b44:	11 97       	sbiw	r26, 0x01	; 1
     b46:	23 ea       	ldi	r18, 0xA3	; 163
     b48:	31 e0       	ldi	r19, 0x01	; 1
     b4a:	33 83       	std	Z+3, r19	; 0x03
     b4c:	22 83       	std	Z+2, r18	; 0x02
     b4e:	84 83       	std	Z+4, r24	; 0x04
     b50:	15 82       	std	Z+5, r1	; 0x05
     b52:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <sprintf>
     b56:	8d b7       	in	r24, 0x3d	; 61
     b58:	9e b7       	in	r25, 0x3e	; 62
     b5a:	06 96       	adiw	r24, 0x06	; 6
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	f8 94       	cli
     b60:	9e bf       	out	0x3e, r25	; 62
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	8d bf       	out	0x3d, r24	; 61
     b66:	c8 01       	movw	r24, r16
     b68:	f7 01       	movw	r30, r14
     b6a:	09 95       	icall
	sprintf(buff,"EN_RXADDR: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_RXADDR)); prints(buff);
     b6c:	82 e0       	ldi	r24, 0x02	; 2
     b6e:	0e 94 9a 03 	call	0x734	; 0x734 <nrf24l01_readregister>
     b72:	00 d0       	rcall	.+0      	; 0xb74 <nrf24l01_printinfo+0x188>
     b74:	00 d0       	rcall	.+0      	; 0xb76 <nrf24l01_printinfo+0x18a>
     b76:	00 d0       	rcall	.+0      	; 0xb78 <nrf24l01_printinfo+0x18c>
     b78:	ed b7       	in	r30, 0x3d	; 61
     b7a:	fe b7       	in	r31, 0x3e	; 62
     b7c:	31 96       	adiw	r30, 0x01	; 1
     b7e:	ad b7       	in	r26, 0x3d	; 61
     b80:	be b7       	in	r27, 0x3e	; 62
     b82:	12 96       	adiw	r26, 0x02	; 2
     b84:	1c 93       	st	X, r17
     b86:	0e 93       	st	-X, r16
     b88:	11 97       	sbiw	r26, 0x01	; 1
     b8a:	21 eb       	ldi	r18, 0xB1	; 177
     b8c:	31 e0       	ldi	r19, 0x01	; 1
     b8e:	33 83       	std	Z+3, r19	; 0x03
     b90:	22 83       	std	Z+2, r18	; 0x02
     b92:	84 83       	std	Z+4, r24	; 0x04
     b94:	15 82       	std	Z+5, r1	; 0x05
     b96:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <sprintf>
     b9a:	8d b7       	in	r24, 0x3d	; 61
     b9c:	9e b7       	in	r25, 0x3e	; 62
     b9e:	06 96       	adiw	r24, 0x06	; 6
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	9e bf       	out	0x3e, r25	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	8d bf       	out	0x3d, r24	; 61
     baa:	c8 01       	movw	r24, r16
     bac:	f7 01       	movw	r30, r14
     bae:	09 95       	icall
	sprintf(buff,"OBSERVE_TX: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_OBSERVE_TX)); prints(buff);
     bb0:	88 e0       	ldi	r24, 0x08	; 8
     bb2:	0e 94 9a 03 	call	0x734	; 0x734 <nrf24l01_readregister>
     bb6:	00 d0       	rcall	.+0      	; 0xbb8 <nrf24l01_printinfo+0x1cc>
     bb8:	00 d0       	rcall	.+0      	; 0xbba <nrf24l01_printinfo+0x1ce>
     bba:	00 d0       	rcall	.+0      	; 0xbbc <nrf24l01_printinfo+0x1d0>
     bbc:	ed b7       	in	r30, 0x3d	; 61
     bbe:	fe b7       	in	r31, 0x3e	; 62
     bc0:	31 96       	adiw	r30, 0x01	; 1
     bc2:	ad b7       	in	r26, 0x3d	; 61
     bc4:	be b7       	in	r27, 0x3e	; 62
     bc6:	12 96       	adiw	r26, 0x02	; 2
     bc8:	1c 93       	st	X, r17
     bca:	0e 93       	st	-X, r16
     bcc:	11 97       	sbiw	r26, 0x01	; 1
     bce:	23 ec       	ldi	r18, 0xC3	; 195
     bd0:	31 e0       	ldi	r19, 0x01	; 1
     bd2:	33 83       	std	Z+3, r19	; 0x03
     bd4:	22 83       	std	Z+2, r18	; 0x02
     bd6:	84 83       	std	Z+4, r24	; 0x04
     bd8:	15 82       	std	Z+5, r1	; 0x05
     bda:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <sprintf>
     bde:	8d b7       	in	r24, 0x3d	; 61
     be0:	9e b7       	in	r25, 0x3e	; 62
     be2:	06 96       	adiw	r24, 0x06	; 6
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	f8 94       	cli
     be8:	9e bf       	out	0x3e, r25	; 62
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	8d bf       	out	0x3d, r24	; 61
     bee:	c8 01       	movw	r24, r16
     bf0:	f7 01       	movw	r30, r14
     bf2:	09 95       	icall
	prints("\r\n");
     bf4:	86 ed       	ldi	r24, 0xD6	; 214
     bf6:	91 e0       	ldi	r25, 0x01	; 1
     bf8:	f7 01       	movw	r30, r14
     bfa:	09 95       	icall
}
     bfc:	cc 59       	subi	r28, 0x9C	; 156
     bfe:	df 4f       	sbci	r29, 0xFF	; 255
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	f8 94       	cli
     c04:	de bf       	out	0x3e, r29	; 62
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	cd bf       	out	0x3d, r28	; 61
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	ff 90       	pop	r15
     c14:	ef 90       	pop	r14
     c16:	08 95       	ret

00000c18 <nrf24l01_readready>:
}

/*
 * check if there is data ready
 */
uint8_t nrf24l01_readready(uint8_t* pipe) {
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	ec 01       	movw	r28, r24
    uint8_t status = nrf24l01_getstatus();
     c1e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <nrf24l01_getstatus>
    uint8_t ret = status & (1<<NRF24L01_REG_RX_DR);
    if(ret) {
     c22:	98 2f       	mov	r25, r24
     c24:	90 74       	andi	r25, 0x40	; 64
     c26:	86 ff       	sbrs	r24, 6
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <nrf24l01_readready+0x1c>
		//get the pipe number
		if(pipe)
     c2a:	20 97       	sbiw	r28, 0x00	; 0
     c2c:	19 f0       	breq	.+6      	; 0xc34 <nrf24l01_readready+0x1c>
			*pipe = (status >> NRF24L01_REG_RX_P_NO) & 0b111;
     c2e:	86 95       	lsr	r24
     c30:	87 70       	andi	r24, 0x07	; 7
     c32:	88 83       	st	Y, r24
    }
    return ret;
}
     c34:	89 2f       	mov	r24, r25
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	08 95       	ret

00000c3c <nrf24l01_read>:

/*
 * get data
 */
void nrf24l01_read(uint8_t pipe,uint8_t *data) {
     c3c:	0f 93       	push	r16
     c3e:	1f 93       	push	r17
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
     c44:	06 2f       	mov	r16, r22
     c46:	17 2f       	mov	r17, r23
	uint8_t i = 0;
	//read rx register
	nrf24l01_CSNlo; //low CSN
     c48:	ae 98       	cbi	0x15, 6	; 21
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
     c4a:	81 e6       	ldi	r24, 0x61	; 97
     c4c:	0e 94 e5 12 	call	0x25ca	; 0x25ca <spi_writereadbyte>
     c50:	c0 2f       	mov	r28, r16
     c52:	d1 2f       	mov	r29, r17
	//Thay doi lai command, lay PAYLOAD va write ACK
	//spi_writereadbyte(NRF24L01_CMD_W_ACK_PAYLOAD | pipe);
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     c54:	10 e0       	ldi	r17, 0x00	; 0
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
     c56:	8f ef       	ldi	r24, 0xFF	; 255
     c58:	0e 94 e5 12 	call	0x25ca	; 0x25ca <spi_writereadbyte>
     c5c:	89 93       	st	Y+, r24
	//read rx register
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
	//Thay doi lai command, lay PAYLOAD va write ACK
	//spi_writereadbyte(NRF24L01_CMD_W_ACK_PAYLOAD | pipe);
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     c5e:	1f 5f       	subi	r17, 0xFF	; 255
     c60:	19 30       	cpi	r17, 0x09	; 9
     c62:	c9 f7       	brne	.-14     	; 0xc56 <nrf24l01_read+0x1a>
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
    nrf24l01_CSNhi; //high CSN
     c64:	ae 9a       	sbi	0x15, 6	; 21
    //reset register
    nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR));
     c66:	87 e0       	ldi	r24, 0x07	; 7
     c68:	60 e4       	ldi	r22, 0x40	; 64
     c6a:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
    //handle ack payload receipt
	if (nrf24l01_getstatus() & (1<<NRF24L01_REG_TX_DS))
     c6e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <nrf24l01_getstatus>
     c72:	85 ff       	sbrs	r24, 5
     c74:	04 c0       	rjmp	.+8      	; 0xc7e <nrf24l01_read+0x42>
		nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_TX_DS));
     c76:	87 e0       	ldi	r24, 0x07	; 7
     c78:	60 e2       	ldi	r22, 0x20	; 32
     c7a:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
}
     c7e:	df 91       	pop	r29
     c80:	cf 91       	pop	r28
     c82:	1f 91       	pop	r17
     c84:	0f 91       	pop	r16
     c86:	08 95       	ret

00000c88 <nrf24l01_write>:

/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	08 2f       	mov	r16, r24
     c92:	19 2f       	mov	r17, r25
	uint8_t i = 0;
	uint8_t ret = 0;

	//set tx mode
	nrf24l01_setTX();
     c94:	0e 94 d5 04 	call	0x9aa	; 0x9aa <nrf24l01_setTX>

	//write data
	nrf24l01_CSNlo; //low CSN
     c98:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
     c9a:	80 ea       	ldi	r24, 0xA0	; 160
     c9c:	0e 94 e5 12 	call	0x25ca	; 0x25ca <spi_writereadbyte>
     ca0:	c0 2f       	mov	r28, r16
     ca2:	d1 2f       	mov	r29, r17
     ca4:	19 e0       	ldi	r17, 0x09	; 9
	for (i=0; i<NRF24L01_PAYLOAD; i++)
		spi_writereadbyte(data[i]);
     ca6:	89 91       	ld	r24, Y+
     ca8:	0e 94 e5 12 	call	0x25ca	; 0x25ca <spi_writereadbyte>
     cac:	11 50       	subi	r17, 0x01	; 1
	nrf24l01_setTX();

	//write data
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
	for (i=0; i<NRF24L01_PAYLOAD; i++)
     cae:	d9 f7       	brne	.-10     	; 0xca6 <nrf24l01_write+0x1e>
		spi_writereadbyte(data[i]);
	nrf24l01_CSNhi; //high CSN
     cb0:	ae 9a       	sbi	0x15, 6	; 21

	//start transmission
	nrf24l01_CEhi; //high CE
     cb2:	af 9a       	sbi	0x15, 7	; 21
     cb4:	85 e0       	ldi	r24, 0x05	; 5
     cb6:	8a 95       	dec	r24
     cb8:	f1 f7       	brne	.-4      	; 0xcb6 <nrf24l01_write+0x2e>
	_delay_us(15);
	nrf24l01_CElo; //low CE
     cba:	af 98       	cbi	0x15, 7	; 21
     cbc:	83 e0       	ldi	r24, 0x03	; 3
     cbe:	8a 95       	dec	r24
     cc0:	f1 f7       	brne	.-4      	; 0xcbe <nrf24l01_write+0x36>
     cc2:	00 00       	nop

	//stop if max_retries reached or send is ok
	do {
		_delay_us(10);
	}
	while( !(nrf24l01_getstatus() & (1<<NRF24L01_REG_MAX_RT | 1<<NRF24L01_REG_TX_DS)) );
     cc4:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <nrf24l01_getstatus>
     cc8:	80 73       	andi	r24, 0x30	; 48
     cca:	c1 f3       	breq	.-16     	; 0xcbc <nrf24l01_write+0x34>

	if(nrf24l01_getstatus() & 1<<NRF24L01_REG_TX_DS)
     ccc:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <nrf24l01_getstatus>
     cd0:	c8 2f       	mov	r28, r24
		ret = 1;

	//reset PLOS_CNT
	nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH);
     cd2:	85 e0       	ldi	r24, 0x05	; 5
     cd4:	6c e4       	ldi	r22, 0x4C	; 76
     cd6:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>

	//power down
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PWR_UP));
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	0e 94 9a 03 	call	0x734	; 0x734 <nrf24l01_readregister>
     ce0:	68 2f       	mov	r22, r24
     ce2:	6d 7f       	andi	r22, 0xFD	; 253
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>

	//set rx mode
	nrf24l01_setRX();
     cea:	0e 94 b3 04 	call	0x966	; 0x966 <nrf24l01_setRX>
/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
	uint8_t i = 0;
	uint8_t ret = 0;
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	c5 ff       	sbrs	r28, 5
     cf2:	80 e0       	ldi	r24, 0x00	; 0

	//set rx mode
	nrf24l01_setRX();

	return ret;
}
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	1f 91       	pop	r17
     cfa:	0f 91       	pop	r16
     cfc:	08 95       	ret

00000cfe <nrf24l01_setpalevel>:

/*
 * set power level
 */
void nrf24l01_setpalevel() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP);
     cfe:	86 e0       	ldi	r24, 0x06	; 6
     d00:	0e 94 9a 03 	call	0x734	; 0x734 <nrf24l01_readregister>
  setup &= ~((1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH));

  if (NRF24L01_RF24_PA == NRF24L01_RF24_PA_MAX) {
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
     d04:	68 2f       	mov	r22, r24
     d06:	66 60       	ori	r22, 0x06	; 6
  } else {
	  //default is max power
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     d08:	86 e0       	ldi	r24, 0x06	; 6
     d0a:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
}
     d0e:	08 95       	ret

00000d10 <nrf24l01_setdatarate>:

/*
 * set datarate
 */
void nrf24l01_setdatarate() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP) ;
     d10:	86 e0       	ldi	r24, 0x06	; 6
     d12:	0e 94 9a 03 	call	0x734	; 0x734 <nrf24l01_readregister>

  setup &= ~((1<<NRF24L01_REG_RF_DR_LOW) | (1<<NRF24L01_REG_RF_DR_HIGH));
     d16:	68 2f       	mov	r22, r24
     d18:	67 7d       	andi	r22, 0xD7	; 215
    } else {
    	//default is 1Mbps
    }
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     d1a:	86 e0       	ldi	r24, 0x06	; 6
     d1c:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
}
     d20:	08 95       	ret

00000d22 <nrf24l01_setcrclength>:

/*
 * set crc length
 */
void nrf24l01_setcrclength() {
  uint8_t config = nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~((1<<NRF24L01_REG_CRCO) | (1<<NRF24L01_REG_EN_CRC));
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	0e 94 9a 03 	call	0x734	; 0x734 <nrf24l01_readregister>
	  //nothing
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_8) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_16) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
	  config |= (1<<NRF24L01_REG_CRCO);
     d28:	68 2f       	mov	r22, r24
     d2a:	6c 60       	ori	r22, 0x0C	; 12
  } else {
	  //default is disabled
  }

  nrf24l01_writeregister(NRF24L01_REG_CONFIG, config);
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
}
     d32:	08 95       	ret

00000d34 <nrf24l01_init>:
/*
 * init nrf24l01
 */
void nrf24l01_init() {
	//setup port
	NRF24L01_DDR |= (1<<NRF24L01_CSN); //output
     d34:	a6 9a       	sbi	0x14, 6	; 20
	NRF24L01_DDR |= (1<<NRF24L01_CE); //output
     d36:	a7 9a       	sbi	0x14, 7	; 20

    spi_init(); //init spi
     d38:	0e 94 da 12 	call	0x25b4	; 0x25b4 <spi_init>

    nrf24l01_CElo; //low CE
     d3c:	af 98       	cbi	0x15, 7	; 21
    nrf24l01_CSNhi; //high CSN
     d3e:	ae 9a       	sbi	0x15, 6	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d40:	81 ee       	ldi	r24, 0xE1	; 225
     d42:	94 e0       	ldi	r25, 0x04	; 4
     d44:	01 97       	sbiw	r24, 0x01	; 1
     d46:	f1 f7       	brne	.-4      	; 0xd44 <nrf24l01_init+0x10>
     d48:	00 c0       	rjmp	.+0      	; 0xd4a <nrf24l01_init+0x16>
     d4a:	00 00       	nop

    _delay_ms(5); //wait for the radio to init

    nrf24l01_setpalevel(); //set power level
     d4c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <nrf24l01_setpalevel>
    nrf24l01_setdatarate(); //set data rate
     d50:	0e 94 88 06 	call	0xd10	; 0xd10 <nrf24l01_setdatarate>
    nrf24l01_setcrclength(); //set crc length
     d54:	0e 94 91 06 	call	0xd22	; 0xd22 <nrf24l01_setcrclength>
    nrf24l01_writeregister(NRF24L01_REG_SETUP_RETR, NRF24L01_RETR); // set retries
     d58:	84 e0       	ldi	r24, 0x04	; 4
     d5a:	67 e4       	ldi	r22, 0x47	; 71
     d5c:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_DYNPD, 0); //disable dynamic payloads
     d60:	8c e1       	ldi	r24, 0x1C	; 28
     d62:	60 e0       	ldi	r22, 0x00	; 0
     d64:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH); //set RF channel
     d68:	85 e0       	ldi	r24, 0x05	; 5
     d6a:	6c e4       	ldi	r22, 0x4C	; 76
     d6c:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>

	//payload size
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P0, NRF24L01_PAYLOAD);
     d70:	81 e1       	ldi	r24, 0x11	; 17
     d72:	69 e0       	ldi	r22, 0x09	; 9
     d74:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P1, NRF24L01_PAYLOAD);
     d78:	82 e1       	ldi	r24, 0x12	; 18
     d7a:	69 e0       	ldi	r22, 0x09	; 9
     d7c:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P2, NRF24L01_PAYLOAD);
     d80:	83 e1       	ldi	r24, 0x13	; 19
     d82:	69 e0       	ldi	r22, 0x09	; 9
     d84:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P3, NRF24L01_PAYLOAD);
     d88:	84 e1       	ldi	r24, 0x14	; 20
     d8a:	69 e0       	ldi	r22, 0x09	; 9
     d8c:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P4, NRF24L01_PAYLOAD);
     d90:	85 e1       	ldi	r24, 0x15	; 21
     d92:	69 e0       	ldi	r22, 0x09	; 9
     d94:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P5, NRF24L01_PAYLOAD);
     d98:	86 e1       	ldi	r24, 0x16	; 22
     d9a:	69 e0       	ldi	r22, 0x09	; 9
     d9c:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
	#endif

	//enable pipe
	nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, 0);
     da0:	82 e0       	ldi	r24, 0x02	; 2
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P0));
     da8:	82 e0       	ldi	r24, 0x02	; 2
     daa:	0e 94 9a 03 	call	0x734	; 0x734 <nrf24l01_readregister>
     dae:	68 2f       	mov	r22, r24
     db0:	61 60       	ori	r22, 0x01	; 1
     db2:	82 e0       	ldi	r24, 0x02	; 2
     db4:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P1));
     db8:	82 e0       	ldi	r24, 0x02	; 2
     dba:	0e 94 9a 03 	call	0x734	; 0x734 <nrf24l01_readregister>
     dbe:	68 2f       	mov	r22, r24
     dc0:	62 60       	ori	r22, 0x02	; 2
     dc2:	82 e0       	ldi	r24, 0x02	; 2
     dc4:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P2));
     dc8:	82 e0       	ldi	r24, 0x02	; 2
     dca:	0e 94 9a 03 	call	0x734	; 0x734 <nrf24l01_readregister>
     dce:	68 2f       	mov	r22, r24
     dd0:	64 60       	ori	r22, 0x04	; 4
     dd2:	82 e0       	ldi	r24, 0x02	; 2
     dd4:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P3));
     dd8:	82 e0       	ldi	r24, 0x02	; 2
     dda:	0e 94 9a 03 	call	0x734	; 0x734 <nrf24l01_readregister>
     dde:	68 2f       	mov	r22, r24
     de0:	68 60       	ori	r22, 0x08	; 8
     de2:	82 e0       	ldi	r24, 0x02	; 2
     de4:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P4));
     de8:	82 e0       	ldi	r24, 0x02	; 2
     dea:	0e 94 9a 03 	call	0x734	; 0x734 <nrf24l01_readregister>
     dee:	68 2f       	mov	r22, r24
     df0:	60 61       	ori	r22, 0x10	; 16
     df2:	82 e0       	ldi	r24, 0x02	; 2
     df4:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P5));
     df8:	82 e0       	ldi	r24, 0x02	; 2
     dfa:	0e 94 9a 03 	call	0x734	; 0x734 <nrf24l01_readregister>
     dfe:	68 2f       	mov	r22, r24
     e00:	60 62       	ori	r22, 0x20	; 32
     e02:	82 e0       	ldi	r24, 0x02	; 2
     e04:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
	#endif

	//auto ack
	#if NRF24L01_ACK == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P0));
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	0e 94 9a 03 	call	0x734	; 0x734 <nrf24l01_readregister>
     e0e:	68 2f       	mov	r22, r24
     e10:	61 60       	ori	r22, 0x01	; 1
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P1));
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	0e 94 9a 03 	call	0x734	; 0x734 <nrf24l01_readregister>
     e1e:	68 2f       	mov	r22, r24
     e20:	62 60       	ori	r22, 0x02	; 2
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P2));
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	0e 94 9a 03 	call	0x734	; 0x734 <nrf24l01_readregister>
     e2e:	68 2f       	mov	r22, r24
     e30:	64 60       	ori	r22, 0x04	; 4
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P3));
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	0e 94 9a 03 	call	0x734	; 0x734 <nrf24l01_readregister>
     e3e:	68 2f       	mov	r22, r24
     e40:	68 60       	ori	r22, 0x08	; 8
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P4));
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	0e 94 9a 03 	call	0x734	; 0x734 <nrf24l01_readregister>
     e4e:	68 2f       	mov	r22, r24
     e50:	60 61       	ori	r22, 0x10	; 16
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P5));
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	0e 94 9a 03 	call	0x734	; 0x734 <nrf24l01_readregister>
     e5e:	68 2f       	mov	r22, r24
     e60:	60 62       	ori	r22, 0x20	; 32
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	0e 94 c2 03 	call	0x784	; 0x784 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P4));
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P5));
	#endif

	//rx address
	nrf24l01_setrxaddr(0, nrf24l01_addr0);
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	69 ed       	ldi	r22, 0xD9	; 217
     e6c:	71 e0       	ldi	r23, 0x01	; 1
     e6e:	0e 94 ff 03 	call	0x7fe	; 0x7fe <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(1, nrf24l01_addr1);
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	6e ed       	ldi	r22, 0xDE	; 222
     e76:	71 e0       	ldi	r23, 0x01	; 1
     e78:	0e 94 ff 03 	call	0x7fe	; 0x7fe <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(2, nrf24l01_addr2);
     e7c:	82 e0       	ldi	r24, 0x02	; 2
     e7e:	63 ee       	ldi	r22, 0xE3	; 227
     e80:	71 e0       	ldi	r23, 0x01	; 1
     e82:	0e 94 ff 03 	call	0x7fe	; 0x7fe <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(3, nrf24l01_addr3);
     e86:	83 e0       	ldi	r24, 0x03	; 3
     e88:	68 ee       	ldi	r22, 0xE8	; 232
     e8a:	71 e0       	ldi	r23, 0x01	; 1
     e8c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(4, nrf24l01_addr4);
     e90:	84 e0       	ldi	r24, 0x04	; 4
     e92:	6d ee       	ldi	r22, 0xED	; 237
     e94:	71 e0       	ldi	r23, 0x01	; 1
     e96:	0e 94 ff 03 	call	0x7fe	; 0x7fe <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(5, nrf24l01_addr5);
     e9a:	85 e0       	ldi	r24, 0x05	; 5
     e9c:	62 ef       	ldi	r22, 0xF2	; 242
     e9e:	71 e0       	ldi	r23, 0x01	; 1
     ea0:	0e 94 ff 03 	call	0x7fe	; 0x7fe <nrf24l01_setrxaddr>

	//tx address
	nrf24l01_settxaddr(nrf24l01_addrtx);
     ea4:	87 ef       	ldi	r24, 0xF7	; 247
     ea6:	91 e0       	ldi	r25, 0x01	; 1
     ea8:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <nrf24l01_settxaddr>

	//set rx mode
	nrf24l01_setRX();
     eac:	0e 94 b3 04 	call	0x966	; 0x966 <nrf24l01_setRX>
}
     eb0:	08 95       	ret

00000eb2 <sMO_init>:
static void clearInEvents(SMO* handle);
static void clearOutEvents(SMO* handle);


void sMO_init(SMO* handle)
{
     eb2:	fc 01       	movw	r30, r24
	int i;

	for (i = 0; i < SMO_MAX_ORTHOGONAL_STATES; ++i)
		handle->stateConfVector[i] = SMO_last_state;
     eb4:	86 e1       	ldi	r24, 0x16	; 22
     eb6:	80 83       	st	Z, r24
     eb8:	81 83       	std	Z+1, r24	; 0x01
	
	
	handle->stateConfVectorPosition = 0;
     eba:	13 82       	std	Z+3, r1	; 0x03
     ebc:	12 82       	std	Z+2, r1	; 0x02

	// TODO: initialize all events ...
	// TODO: initialize all variables ... (set default values - here or inenter sequence ?!?)

}
     ebe:	08 95       	ret

00000ec0 <sMO_enter>:

void sMO_enter(SMO* handle)
{
     ec0:	1f 93       	push	r17
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	ec 01       	movw	r28, r24
	sMO_entryaction(handle);
	/* Default enter sequence for region main region */
	/* Default react sequence for initial entry  */
	/* Default enter sequence for state on */
	/* Entry action for state 'on'. */
	handle->iface.lightOn = bool_true;
     ec8:	11 e0       	ldi	r17, 0x01	; 1
     eca:	1d a7       	lds	r17, 0x7d
	/* Default enter sequence for region r1 */
	/* Default react sequence for initial entry  */
	/* Default enter sequence for state Init */
	/* Entry action for state 'Init'. */
	sMO_setTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) , 3 * 1000, bool_false);
     ecc:	c8 96       	adiw	r24, 0x38	; 56
     ece:	48 eb       	ldi	r20, 0xB8	; 184
     ed0:	5b e0       	ldi	r21, 0x0B	; 11
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	0e 94 43 03 	call	0x686	; 0x686 <sMO_setTimer>
	handle->iface.tableId = 1;
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	a0 e0       	ldi	r26, 0x00	; 0
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	8a ab       	sts	0x5a, r24
     ee6:	9b ab       	sts	0x5b, r25
     ee8:	ac ab       	sts	0x5c, r26
     eea:	bd ab       	sts	0x5d, r27
	sMOIfaceLCD_init();
     eec:	0e 94 4e 02 	call	0x49c	; 0x49c <sMOIfaceLCD_init>
	sMOIfaceKEYPAD_init();
     ef0:	0e 94 0f 02 	call	0x41e	; 0x41e <sMOIfaceKEYPAD_init>
	sMOIfaceRF_init();
     ef4:	0e 94 49 03 	call	0x692	; 0x692 <sMOIfaceRF_init>
	sMOIfaceLCD_clear();
     ef8:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
	sMOIfaceLCD_writeString("Waitting...");
     efc:	8c ef       	ldi	r24, 0xFC	; 252
     efe:	91 e0       	ldi	r25, 0x01	; 1
     f00:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
	handle->stateConfVector[0] = SMO_main_region_on_r1_Init;
     f04:	18 83       	st	Y, r17
	handle->stateConfVectorPosition = 0;
     f06:	1b 82       	std	Y+3, r1	; 0x03
     f08:	1a 82       	std	Y+2, r1	; 0x02
}
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	1f 91       	pop	r17
     f10:	08 95       	ret

00000f12 <sMO_exit>:

void sMO_exit(SMO* handle)
{
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	ec 01       	movw	r28, r24
	/* Default exit sequence for statechart SMO */
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of main region) at position 0... */
	switch(handle->stateConfVector[ 0 ]) {
     f18:	88 81       	ld	r24, Y
     f1a:	83 30       	cpi	r24, 0x03	; 3
     f1c:	69 f0       	breq	.+26     	; 0xf38 <sMO_exit+0x26>
     f1e:	84 30       	cpi	r24, 0x04	; 4
     f20:	81 f0       	breq	.+32     	; 0xf42 <sMO_exit+0x30>
     f22:	81 30       	cpi	r24, 0x01	; 1
     f24:	91 f4       	brne	.+36     	; 0xf4a <sMO_exit+0x38>
		case SMO_main_region_on_r1_Init : {
			/* Default exit sequence for state Init */
			handle->stateConfVector[0] = SMO_last_state;
     f26:	86 e1       	ldi	r24, 0x16	; 22
     f28:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
     f2a:	1b 82       	std	Y+3, r1	; 0x03
     f2c:	1a 82       	std	Y+2, r1	; 0x02
			/* Exit action for state 'Init'. */
			sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) );		
     f2e:	ce 01       	movw	r24, r28
     f30:	c8 96       	adiw	r24, 0x38	; 56
     f32:	0e 94 46 03 	call	0x68c	; 0x68c <sMO_unsetTimer>
			break;
     f36:	09 c0       	rjmp	.+18     	; 0xf4a <sMO_exit+0x38>
		}
		case SMO_main_region_on_r1_Running_keypad_CheckKey : {
			/* Default exit sequence for state CheckKey */
			handle->stateConfVector[0] = SMO_last_state;
     f38:	86 e1       	ldi	r24, 0x16	; 22
     f3a:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
     f3c:	1b 82       	std	Y+3, r1	; 0x03
     f3e:	1a 82       	std	Y+2, r1	; 0x02
			break;
     f40:	04 c0       	rjmp	.+8      	; 0xf4a <sMO_exit+0x38>
		}
		case SMO_main_region_on_r1_Running_keypad_CheckKeyDown : {
			/* Default exit sequence for state CheckKeyDown */
			handle->stateConfVector[0] = SMO_last_state;
     f42:	86 e1       	ldi	r24, 0x16	; 22
     f44:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
     f46:	1b 82       	std	Y+3, r1	; 0x03
     f48:	1a 82       	std	Y+2, r1	; 0x02
			break;
		}
		default: break;
	}
	/* Handle exit of all possible states (of main region) at position 1... */
	switch(handle->stateConfVector[ 1 ]) {
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	8c 30       	cpi	r24, 0x0C	; 12
     f4e:	09 f4       	brne	.+2      	; 0xf52 <sMO_exit+0x40>
     f50:	54 c0       	rjmp	.+168    	; 0xffa <sMO_exit+0xe8>
     f52:	8d 30       	cpi	r24, 0x0D	; 13
     f54:	78 f4       	brcc	.+30     	; 0xf74 <sMO_exit+0x62>
     f56:	88 30       	cpi	r24, 0x08	; 8
     f58:	a1 f1       	breq	.+104    	; 0xfc2 <sMO_exit+0xb0>
     f5a:	89 30       	cpi	r24, 0x09	; 9
     f5c:	30 f4       	brcc	.+12     	; 0xf6a <sMO_exit+0x58>
     f5e:	85 30       	cpi	r24, 0x05	; 5
     f60:	11 f1       	breq	.+68     	; 0xfa6 <sMO_exit+0x94>
     f62:	87 30       	cpi	r24, 0x07	; 7
     f64:	09 f0       	breq	.+2      	; 0xf68 <sMO_exit+0x56>
     f66:	80 c0       	rjmp	.+256    	; 0x1068 <sMO_exit+0x156>
     f68:	25 c0       	rjmp	.+74     	; 0xfb4 <sMO_exit+0xa2>
     f6a:	8a 30       	cpi	r24, 0x0A	; 10
     f6c:	c1 f1       	breq	.+112    	; 0xfde <sMO_exit+0xcc>
     f6e:	8b 30       	cpi	r24, 0x0B	; 11
     f70:	e8 f5       	brcc	.+122    	; 0xfec <sMO_exit+0xda>
     f72:	2e c0       	rjmp	.+92     	; 0xfd0 <sMO_exit+0xbe>
     f74:	81 31       	cpi	r24, 0x11	; 17
     f76:	09 f4       	brne	.+2      	; 0xf7a <sMO_exit+0x68>
     f78:	5c c0       	rjmp	.+184    	; 0x1032 <sMO_exit+0x120>
     f7a:	82 31       	cpi	r24, 0x12	; 18
     f7c:	50 f4       	brcc	.+20     	; 0xf92 <sMO_exit+0x80>
     f7e:	8f 30       	cpi	r24, 0x0F	; 15
     f80:	09 f4       	brne	.+2      	; 0xf84 <sMO_exit+0x72>
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <sMO_exit+0x104>
     f84:	80 31       	cpi	r24, 0x10	; 16
     f86:	08 f0       	brcs	.+2      	; 0xf8a <sMO_exit+0x78>
     f88:	4d c0       	rjmp	.+154    	; 0x1024 <sMO_exit+0x112>
     f8a:	8e 30       	cpi	r24, 0x0E	; 14
     f8c:	09 f0       	breq	.+2      	; 0xf90 <sMO_exit+0x7e>
     f8e:	6c c0       	rjmp	.+216    	; 0x1068 <sMO_exit+0x156>
     f90:	3b c0       	rjmp	.+118    	; 0x1008 <sMO_exit+0xf6>
     f92:	84 31       	cpi	r24, 0x14	; 20
     f94:	09 f4       	brne	.+2      	; 0xf98 <sMO_exit+0x86>
     f96:	5b c0       	rjmp	.+182    	; 0x104e <sMO_exit+0x13c>
     f98:	85 31       	cpi	r24, 0x15	; 21
     f9a:	09 f4       	brne	.+2      	; 0xf9e <sMO_exit+0x8c>
     f9c:	5f c0       	rjmp	.+190    	; 0x105c <sMO_exit+0x14a>
     f9e:	83 31       	cpi	r24, 0x13	; 19
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <sMO_exit+0x92>
     fa2:	62 c0       	rjmp	.+196    	; 0x1068 <sMO_exit+0x156>
     fa4:	4d c0       	rjmp	.+154    	; 0x1040 <sMO_exit+0x12e>
		case SMO_main_region_on_r1_Running_running_main_ShowMenu : {
			/* Default exit sequence for state ShowMenu */
			handle->stateConfVector[1] = SMO_last_state;
     fa6:	86 e1       	ldi	r24, 0x16	; 22
     fa8:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	9b 83       	std	Y+3, r25	; 0x03
     fb0:	8a 83       	std	Y+2, r24	; 0x02
			break;
     fb2:	5a c0       	rjmp	.+180    	; 0x1068 <sMO_exit+0x156>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
			/* Default exit sequence for state ShowCode */
			handle->stateConfVector[1] = SMO_last_state;
     fb4:	86 e1       	ldi	r24, 0x16	; 22
     fb6:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	9b 83       	std	Y+3, r25	; 0x03
     fbe:	8a 83       	std	Y+2, r24	; 0x02
			break;
     fc0:	53 c0       	rjmp	.+166    	; 0x1068 <sMO_exit+0x156>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
			/* Default exit sequence for state EnterCode */
			handle->stateConfVector[1] = SMO_last_state;
     fc2:	86 e1       	ldi	r24, 0x16	; 22
     fc4:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	9b 83       	std	Y+3, r25	; 0x03
     fcc:	8a 83       	std	Y+2, r24	; 0x02
			break;
     fce:	4c c0       	rjmp	.+152    	; 0x1068 <sMO_exit+0x156>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
			/* Default exit sequence for state CheckKeyPress1 */
			handle->stateConfVector[1] = SMO_last_state;
     fd0:	86 e1       	ldi	r24, 0x16	; 22
     fd2:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	9b 83       	std	Y+3, r25	; 0x03
     fda:	8a 83       	std	Y+2, r24	; 0x02
			break;
     fdc:	45 c0       	rjmp	.+138    	; 0x1068 <sMO_exit+0x156>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
			/* Default exit sequence for state CheckCode0 */
			handle->stateConfVector[1] = SMO_last_state;
     fde:	86 e1       	ldi	r24, 0x16	; 22
     fe0:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	9b 83       	std	Y+3, r25	; 0x03
     fe8:	8a 83       	std	Y+2, r24	; 0x02
			break;
     fea:	3e c0       	rjmp	.+124    	; 0x1068 <sMO_exit+0x156>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
			/* Default exit sequence for state ShowAmount */
			handle->stateConfVector[1] = SMO_last_state;
     fec:	86 e1       	ldi	r24, 0x16	; 22
     fee:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	9b 83       	std	Y+3, r25	; 0x03
     ff6:	8a 83       	std	Y+2, r24	; 0x02
			break;
     ff8:	37 c0       	rjmp	.+110    	; 0x1068 <sMO_exit+0x156>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
			/* Default exit sequence for state CheckKeyPress2 */
			handle->stateConfVector[1] = SMO_last_state;
     ffa:	86 e1       	ldi	r24, 0x16	; 22
     ffc:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	9b 83       	std	Y+3, r25	; 0x03
    1004:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1006:	30 c0       	rjmp	.+96     	; 0x1068 <sMO_exit+0x156>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
			/* Default exit sequence for state EnterAmount */
			handle->stateConfVector[1] = SMO_last_state;
    1008:	86 e1       	ldi	r24, 0x16	; 22
    100a:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	9b 83       	std	Y+3, r25	; 0x03
    1012:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1014:	29 c0       	rjmp	.+82     	; 0x1068 <sMO_exit+0x156>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
			/* Default exit sequence for final state. */
			handle->stateConfVector[1] = SMO_last_state;
    1016:	86 e1       	ldi	r24, 0x16	; 22
    1018:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	9b 83       	std	Y+3, r25	; 0x03
    1020:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1022:	22 c0       	rjmp	.+68     	; 0x1068 <sMO_exit+0x156>
		}
		case SMO_main_region_on_r1_Running_running_main_MenuA : {
			/* Default exit sequence for state MenuA */
			handle->stateConfVector[1] = SMO_last_state;
    1024:	86 e1       	ldi	r24, 0x16	; 22
    1026:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	9b 83       	std	Y+3, r25	; 0x03
    102e:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1030:	1b c0       	rjmp	.+54     	; 0x1068 <sMO_exit+0x156>
		}
		case SMO_main_region_on_r1_Running_running_main_CheckKeyPress : {
			/* Default exit sequence for state CheckKeyPress */
			handle->stateConfVector[1] = SMO_last_state;
    1032:	86 e1       	ldi	r24, 0x16	; 22
    1034:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	9b 83       	std	Y+3, r25	; 0x03
    103c:	8a 83       	std	Y+2, r24	; 0x02
			break;
    103e:	14 c0       	rjmp	.+40     	; 0x1068 <sMO_exit+0x156>
		}
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
			/* Default exit sequence for state Send */
			handle->stateConfVector[1] = SMO_last_state;
    1040:	86 e1       	ldi	r24, 0x16	; 22
    1042:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	9b 83       	std	Y+3, r25	; 0x03
    104a:	8a 83       	std	Y+2, r24	; 0x02
			break;
    104c:	0d c0       	rjmp	.+26     	; 0x1068 <sMO_exit+0x156>
		}
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
			/* Default exit sequence for state Check */
			handle->stateConfVector[1] = SMO_last_state;
    104e:	86 e1       	ldi	r24, 0x16	; 22
    1050:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	9b 83       	std	Y+3, r25	; 0x03
    1058:	8a 83       	std	Y+2, r24	; 0x02
			break;
    105a:	06 c0       	rjmp	.+12     	; 0x1068 <sMO_exit+0x156>
		}
		case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
			/* Default exit sequence for final state. */
			handle->stateConfVector[1] = SMO_last_state;
    105c:	86 e1       	ldi	r24, 0x16	; 22
    105e:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	9b 83       	std	Y+3, r25	; 0x03
    1066:	8a 83       	std	Y+2, r24	; 0x02
			break;
		}
		default: break;
	}
	sMO_exitaction(handle);
}
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	08 95       	ret

0000106e <sMO_runCycle>:
}

static void clearOutEvents(SMO* handle) {
}

void sMO_runCycle(SMO* handle) {
    106e:	2f 92       	push	r2
    1070:	3f 92       	push	r3
    1072:	4f 92       	push	r4
    1074:	5f 92       	push	r5
    1076:	6f 92       	push	r6
    1078:	7f 92       	push	r7
    107a:	8f 92       	push	r8
    107c:	9f 92       	push	r9
    107e:	af 92       	push	r10
    1080:	bf 92       	push	r11
    1082:	cf 92       	push	r12
    1084:	df 92       	push	r13
    1086:	ef 92       	push	r14
    1088:	ff 92       	push	r15
    108a:	0f 93       	push	r16
    108c:	1f 93       	push	r17
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	ec 01       	movw	r28, r24
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
    1094:	1b 82       	std	Y+3, r1	; 0x03
    1096:	1a 82       	std	Y+2, r1	; 0x02
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	90 e0       	ldi	r25, 0x00	; 0
static void sMO_react_main_region_on_r1_Running_running_main_CheckKeyPress(SMO* handle) {
	/* The reactions of state CheckKeyPress. */
	if (handle->ifaceKEYPAD.lastkey == 13 && handle->ifaceKEYPAD.key_pressed_raised) { 
		/* Default exit sequence for state CheckKeyPress */
		handle->stateConfVector[1] = SMO_last_state;
		handle->stateConfVectorPosition = 1;
    109c:	01 e0       	ldi	r16, 0x01	; 1
    109e:	10 e0       	ldi	r17, 0x00	; 0
		/* Default enter sequence for state MenuA */
		/* Entry action for state 'MenuA'. */
		handle->iface.menuId = 1;
    10a0:	44 24       	eor	r4, r4
    10a2:	55 24       	eor	r5, r5
    10a4:	32 01       	movw	r6, r4
    10a6:	43 94       	inc	r4
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
			/* Default enter sequence for state CheckKeyPress2 */
			/* Entry action for state 'CheckKeyPress2'. */
			handle->ifaceKEYPAD.lastkey = 0;
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2;
    10a8:	0f 2e       	mov	r0, r31
    10aa:	fc e0       	ldi	r31, 0x0C	; 12
    10ac:	af 2e       	mov	r10, r31
    10ae:	f0 2d       	mov	r31, r0
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
			/* Default enter sequence for state CheckKeyPress1 */
			/* Entry action for state 'CheckKeyPress1'. */
			handle->ifaceKEYPAD.lastkey = 0;
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1;
    10b0:	0f 2e       	mov	r0, r31
    10b2:	f9 e0       	ldi	r31, 0x09	; 9
    10b4:	9f 2e       	mov	r9, r31
    10b6:	f0 2d       	mov	r31, r0
		handle->stateConfVector[1] = SMO_last_state;
		handle->stateConfVectorPosition = 1;
		/* Default enter sequence for state CheckKeyPress */
		/* Entry action for state 'CheckKeyPress'. */
		handle->ifaceKEYPAD.lastkey = 0;
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_CheckKeyPress;
    10b8:	0f 2e       	mov	r0, r31
    10ba:	f1 e1       	ldi	r31, 0x11	; 17
    10bc:	bf 2e       	mov	r11, r31
    10be:	f0 2d       	mov	r31, r0
	}  else {
		if (handle->ifaceKEYPAD.key != 0) { 
			/* Default enter sequence for state CheckKeyDown */
			/* Entry action for state 'CheckKeyDown'. */
			handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
			handle->ifaceKEYPAD.key_down = bool_true;
    10c0:	88 24       	eor	r8, r8
    10c2:	83 94       	inc	r8
			handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKeyDown;
    10c4:	33 24       	eor	r3, r3
    10c6:	68 94       	set
    10c8:	32 f8       	bld	r3, 2
		handle->ifaceKEYPAD.key_pressed_raised = bool_true;
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
		handle->ifaceKEYPAD.key_down = bool_false;
		handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKey;
    10ca:	0f 2e       	mov	r0, r31
    10cc:	f3 e0       	ldi	r31, 0x03	; 3
    10ce:	2f 2e       	mov	r2, r31
    10d0:	f0 2d       	mov	r31, r0
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
			
		switch (handle->stateConfVector[handle->stateConfVectorPosition]) {
    10d2:	8c 0f       	add	r24, r28
    10d4:	9d 1f       	adc	r25, r29
    10d6:	fc 01       	movw	r30, r24
    10d8:	80 81       	ld	r24, Z
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	85 31       	cpi	r24, 0x15	; 21
    10e0:	91 05       	cpc	r25, r1
    10e2:	10 f0       	brcs	.+4      	; 0x10e8 <sMO_runCycle+0x7a>
    10e4:	0c 94 25 11 	jmp	0x224a	; 0x224a <__stack+0x114b>
    10e8:	8a 5b       	subi	r24, 0xBA	; 186
    10ea:	9f 4f       	sbci	r25, 0xFF	; 255
    10ec:	fc 01       	movw	r30, r24
    10ee:	ee 0f       	add	r30, r30
    10f0:	ff 1f       	adc	r31, r31
    10f2:	05 90       	lpm	r0, Z+
    10f4:	f4 91       	lpm	r31, Z
    10f6:	e0 2d       	mov	r30, r0
    10f8:	09 94       	ijmp
}

/* The reactions of state Init. */
static void sMO_react_main_region_on_r1_Init(SMO* handle) {
	/* The reactions of state Init. */
	if (handle->timeEvents.Init_time_event_0_raised) { 
    10fa:	88 ad       	sts	0x68, r24
    10fc:	88 23       	and	r24, r24
    10fe:	11 f4       	brne	.+4      	; 0x1104 <__stack+0x5>
    1100:	0c 94 25 11 	jmp	0x224a	; 0x224a <__stack+0x114b>
		/* Default exit sequence for state Init */
		handle->stateConfVector[0] = SMO_last_state;
    1104:	86 e1       	ldi	r24, 0x16	; 22
    1106:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    1108:	1b 82       	std	Y+3, r1	; 0x03
    110a:	1a 82       	std	Y+2, r1	; 0x02
		/* Exit action for state 'Init'. */
		sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) );		
    110c:	ce 01       	movw	r24, r28
    110e:	c8 96       	adiw	r24, 0x38	; 56
    1110:	0e 94 46 03 	call	0x68c	; 0x68c <sMO_unsetTimer>
		/* Default enter sequence for state Running */
		/* Default enter sequence for region keypad */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    1114:	0e 94 08 02 	call	0x410	; 0x410 <sMOIfaceKEYPAD_checkpress>
    1118:	dc 01       	movw	r26, r24
    111a:	cb 01       	movw	r24, r22
    111c:	8c 83       	std	Y+4, r24	; 0x04
    111e:	9d 83       	std	Y+5, r25	; 0x05
    1120:	ae 83       	std	Y+6, r26	; 0x06
    1122:	bf 83       	std	Y+7, r27	; 0x07
		handle->ifaceKEYPAD.key_down = bool_false;
    1124:	1c 86       	std	Y+12, r1	; 0x0c
		handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKey;
    1126:	83 e0       	ldi	r24, 0x03	; 3
    1128:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    112a:	1b 82       	std	Y+3, r1	; 0x03
    112c:	1a 82       	std	Y+2, r1	; 0x02
		/* Default enter sequence for region running main */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    112e:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1132:	88 e0       	ldi	r24, 0x08	; 8
    1134:	92 e0       	ldi	r25, 0x02	; 2
    1136:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    113a:	86 e1       	ldi	r24, 0x16	; 22
    113c:	92 e0       	ldi	r25, 0x02	; 2
    113e:	40 e0       	ldi	r20, 0x00	; 0
    1140:	50 e0       	ldi	r21, 0x00	; 0
    1142:	ba 01       	movw	r22, r20
    1144:	01 e0       	ldi	r16, 0x01	; 1
    1146:	10 e0       	ldi	r17, 0x00	; 0
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1150:	1e a6       	lds	r17, 0xbe
    1152:	1f a6       	lds	r17, 0xbf
    1154:	18 aa       	sts	0x98, r17
    1156:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1158:	85 e0       	ldi	r24, 0x05	; 5
    115a:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	9b 83       	std	Y+3, r25	; 0x03
    1162:	8a 83       	std	Y+2, r24	; 0x02
    1164:	0c 94 47 11 	jmp	0x228e	; 0x228e <__stack+0x118f>
}

/* The reactions of state CheckKey. */
static void sMO_react_main_region_on_r1_Running_keypad_CheckKey(SMO* handle) {
	/* The reactions of state CheckKey. */
	if (handle->ifaceKEYPAD.key != 0) { 
    1168:	8c 81       	ldd	r24, Y+4	; 0x04
    116a:	9d 81       	ldd	r25, Y+5	; 0x05
    116c:	ae 81       	ldd	r26, Y+6	; 0x06
    116e:	bf 81       	ldd	r27, Y+7	; 0x07
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	a1 05       	cpc	r26, r1
    1174:	b1 05       	cpc	r27, r1
    1176:	b1 f0       	breq	.+44     	; 0x11a4 <__stack+0xa5>
		/* Default exit sequence for state CheckKey */
		handle->stateConfVector[0] = SMO_last_state;
    1178:	f6 e1       	ldi	r31, 0x16	; 22
    117a:	f8 83       	st	Y, r31
		handle->stateConfVectorPosition = 0;
    117c:	1b 82       	std	Y+3, r1	; 0x03
    117e:	1a 82       	std	Y+2, r1	; 0x02
		handle->ifaceKEYPAD.lastkey = handle->ifaceKEYPAD.key;
    1180:	88 87       	std	Y+8, r24	; 0x08
    1182:	99 87       	std	Y+9, r25	; 0x09
    1184:	aa 87       	std	Y+10, r26	; 0x0a
    1186:	bb 87       	std	Y+11, r27	; 0x0b
		/* Default enter sequence for state CheckKeyDown */
		/* Entry action for state 'CheckKeyDown'. */
		handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    1188:	0e 94 08 02 	call	0x410	; 0x410 <sMOIfaceKEYPAD_checkpress>
    118c:	dc 01       	movw	r26, r24
    118e:	cb 01       	movw	r24, r22
    1190:	8c 83       	std	Y+4, r24	; 0x04
    1192:	9d 83       	std	Y+5, r25	; 0x05
    1194:	ae 83       	std	Y+6, r26	; 0x06
    1196:	bf 83       	std	Y+7, r27	; 0x07
		handle->ifaceKEYPAD.key_down = bool_true;
    1198:	8c 86       	std	Y+12, r8	; 0x0c
		handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKeyDown;
    119a:	38 82       	st	Y, r3
		handle->stateConfVectorPosition = 0;
    119c:	1b 82       	std	Y+3, r1	; 0x03
    119e:	1a 82       	std	Y+2, r1	; 0x02
    11a0:	0c 94 4d 11 	jmp	0x229a	; 0x229a <__stack+0x119b>
	}  else {
		if (handle->ifaceKEYPAD.key == 0) { 
			/* Default enter sequence for state CheckKey */
			/* Entry action for state 'CheckKey'. */
			handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    11a4:	0e 94 08 02 	call	0x410	; 0x410 <sMOIfaceKEYPAD_checkpress>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	8c 83       	std	Y+4, r24	; 0x04
    11ae:	9d 83       	std	Y+5, r25	; 0x05
    11b0:	ae 83       	std	Y+6, r26	; 0x06
    11b2:	bf 83       	std	Y+7, r27	; 0x07
			handle->ifaceKEYPAD.key_down = bool_false;
    11b4:	1c 86       	std	Y+12, r1	; 0x0c
			handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKey;
    11b6:	28 82       	st	Y, r2
			handle->stateConfVectorPosition = 0;
    11b8:	1b 82       	std	Y+3, r1	; 0x03
    11ba:	1a 82       	std	Y+2, r1	; 0x02
    11bc:	0c 94 4d 11 	jmp	0x229a	; 0x229a <__stack+0x119b>
}

/* The reactions of state CheckKeyDown. */
static void sMO_react_main_region_on_r1_Running_keypad_CheckKeyDown(SMO* handle) {
	/* The reactions of state CheckKeyDown. */
	if (handle->ifaceKEYPAD.key == 0) { 
    11c0:	8c 81       	ldd	r24, Y+4	; 0x04
    11c2:	9d 81       	ldd	r25, Y+5	; 0x05
    11c4:	ae 81       	ldd	r26, Y+6	; 0x06
    11c6:	bf 81       	ldd	r27, Y+7	; 0x07
    11c8:	00 97       	sbiw	r24, 0x00	; 0
    11ca:	a1 05       	cpc	r26, r1
    11cc:	b1 05       	cpc	r27, r1
    11ce:	99 f4       	brne	.+38     	; 0x11f6 <__stack+0xf7>
		/* Default exit sequence for state CheckKeyDown */
		handle->stateConfVector[0] = SMO_last_state;
    11d0:	26 e1       	ldi	r18, 0x16	; 22
    11d2:	28 83       	st	Y, r18
		handle->stateConfVectorPosition = 0;
    11d4:	1b 82       	std	Y+3, r1	; 0x03
    11d6:	1a 82       	std	Y+2, r1	; 0x02
		handle->ifaceKEYPAD.key_pressed_raised = bool_true;
    11d8:	8d 86       	std	Y+13, r8	; 0x0d
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    11da:	0e 94 08 02 	call	0x410	; 0x410 <sMOIfaceKEYPAD_checkpress>
    11de:	dc 01       	movw	r26, r24
    11e0:	cb 01       	movw	r24, r22
    11e2:	8c 83       	std	Y+4, r24	; 0x04
    11e4:	9d 83       	std	Y+5, r25	; 0x05
    11e6:	ae 83       	std	Y+6, r26	; 0x06
    11e8:	bf 83       	std	Y+7, r27	; 0x07
		handle->ifaceKEYPAD.key_down = bool_false;
    11ea:	1c 86       	std	Y+12, r1	; 0x0c
		handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKey;
    11ec:	28 82       	st	Y, r2
		handle->stateConfVectorPosition = 0;
    11ee:	1b 82       	std	Y+3, r1	; 0x03
    11f0:	1a 82       	std	Y+2, r1	; 0x02
    11f2:	0c 94 4d 11 	jmp	0x229a	; 0x229a <__stack+0x119b>
	}  else {
		if (handle->ifaceKEYPAD.key != 0) { 
			/* Default enter sequence for state CheckKeyDown */
			/* Entry action for state 'CheckKeyDown'. */
			handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    11f6:	0e 94 08 02 	call	0x410	; 0x410 <sMOIfaceKEYPAD_checkpress>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	8c 83       	std	Y+4, r24	; 0x04
    1200:	9d 83       	std	Y+5, r25	; 0x05
    1202:	ae 83       	std	Y+6, r26	; 0x06
    1204:	bf 83       	std	Y+7, r27	; 0x07
			handle->ifaceKEYPAD.key_down = bool_true;
    1206:	8c 86       	std	Y+12, r8	; 0x0c
			handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKeyDown;
    1208:	38 82       	st	Y, r3
			handle->stateConfVectorPosition = 0;
    120a:	1b 82       	std	Y+3, r1	; 0x03
    120c:	1a 82       	std	Y+2, r1	; 0x02
    120e:	0c 94 4d 11 	jmp	0x229a	; 0x229a <__stack+0x119b>
static void sMO_react_main_region_on_r1_Running_running_main_ShowMenu(SMO* handle) {
	/* The reactions of state ShowMenu. */
	if (bool_true) { 
		/* Default exit sequence for state ShowMenu */
		handle->stateConfVector[1] = SMO_last_state;
		handle->stateConfVectorPosition = 1;
    1212:	1b 83       	std	Y+3, r17	; 0x03
    1214:	0a 83       	std	Y+2, r16	; 0x02
		/* Default enter sequence for state CheckKeyPress */
		/* Entry action for state 'CheckKeyPress'. */
		handle->ifaceKEYPAD.lastkey = 0;
    1216:	18 86       	std	Y+8, r1	; 0x08
    1218:	19 86       	std	Y+9, r1	; 0x09
    121a:	1a 86       	std	Y+10, r1	; 0x0a
    121c:	1b 86       	std	Y+11, r1	; 0x0b
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_CheckKeyPress;
    121e:	b9 82       	std	Y+1, r11	; 0x01
    1220:	0c 94 25 11 	jmp	0x224a	; 0x224a <__stack+0x114b>
}

/* The reactions of state ShowCode. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode(SMO* handle) {
	/* The reactions of state ShowCode. */
	if (handle->iface.menuId == 0) { 
    1224:	8e a5       	lds	r24, 0x6e
    1226:	9f a5       	lds	r25, 0x6f
    1228:	a8 a9       	sts	0x48, r26
    122a:	b9 a9       	sts	0x49, r27
    122c:	00 97       	sbiw	r24, 0x00	; 0
    122e:	a1 05       	cpc	r26, r1
    1230:	b1 05       	cpc	r27, r1
    1232:	09 f0       	breq	.+2      	; 0x1236 <__stack+0x137>
    1234:	69 c0       	rjmp	.+210    	; 0x1308 <__stack+0x209>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	8a 30       	cpi	r24, 0x0A	; 10
    123a:	41 f1       	breq	.+80     	; 0x128c <__stack+0x18d>
    123c:	8b 30       	cpi	r24, 0x0B	; 11
    123e:	40 f4       	brcc	.+16     	; 0x1250 <__stack+0x151>
    1240:	88 30       	cpi	r24, 0x08	; 8
    1242:	b1 f0       	breq	.+44     	; 0x1270 <__stack+0x171>
    1244:	89 30       	cpi	r24, 0x09	; 9
    1246:	d8 f4       	brcc	.+54     	; 0x127e <__stack+0x17f>
    1248:	87 30       	cpi	r24, 0x07	; 7
    124a:	09 f0       	breq	.+2      	; 0x124e <__stack+0x14f>
    124c:	41 c0       	rjmp	.+130    	; 0x12d0 <__stack+0x1d1>
    124e:	09 c0       	rjmp	.+18     	; 0x1262 <__stack+0x163>
    1250:	8c 30       	cpi	r24, 0x0C	; 12
    1252:	51 f1       	breq	.+84     	; 0x12a8 <__stack+0x1a9>
    1254:	8c 30       	cpi	r24, 0x0C	; 12
    1256:	08 f1       	brcs	.+66     	; 0x129a <__stack+0x19b>
    1258:	8e 30       	cpi	r24, 0x0E	; 14
    125a:	69 f1       	breq	.+90     	; 0x12b6 <__stack+0x1b7>
    125c:	8f 30       	cpi	r24, 0x0F	; 15
    125e:	c1 f5       	brne	.+112    	; 0x12d0 <__stack+0x1d1>
    1260:	31 c0       	rjmp	.+98     	; 0x12c4 <__stack+0x1c5>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1262:	86 e1       	ldi	r24, 0x16	; 22
    1264:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	9b 83       	std	Y+3, r25	; 0x03
    126c:	8a 83       	std	Y+2, r24	; 0x02
    126e:	30 c0       	rjmp	.+96     	; 0x12d0 <__stack+0x1d1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1270:	86 e1       	ldi	r24, 0x16	; 22
    1272:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	9b 83       	std	Y+3, r25	; 0x03
    127a:	8a 83       	std	Y+2, r24	; 0x02
    127c:	29 c0       	rjmp	.+82     	; 0x12d0 <__stack+0x1d1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    127e:	86 e1       	ldi	r24, 0x16	; 22
    1280:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	9b 83       	std	Y+3, r25	; 0x03
    1288:	8a 83       	std	Y+2, r24	; 0x02
    128a:	22 c0       	rjmp	.+68     	; 0x12d0 <__stack+0x1d1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    128c:	86 e1       	ldi	r24, 0x16	; 22
    128e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	9b 83       	std	Y+3, r25	; 0x03
    1296:	8a 83       	std	Y+2, r24	; 0x02
    1298:	1b c0       	rjmp	.+54     	; 0x12d0 <__stack+0x1d1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    129a:	86 e1       	ldi	r24, 0x16	; 22
    129c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	9b 83       	std	Y+3, r25	; 0x03
    12a4:	8a 83       	std	Y+2, r24	; 0x02
    12a6:	14 c0       	rjmp	.+40     	; 0x12d0 <__stack+0x1d1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    12a8:	86 e1       	ldi	r24, 0x16	; 22
    12aa:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	9b 83       	std	Y+3, r25	; 0x03
    12b2:	8a 83       	std	Y+2, r24	; 0x02
    12b4:	0d c0       	rjmp	.+26     	; 0x12d0 <__stack+0x1d1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    12b6:	86 e1       	ldi	r24, 0x16	; 22
    12b8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	9b 83       	std	Y+3, r25	; 0x03
    12c0:	8a 83       	std	Y+2, r24	; 0x02
    12c2:	06 c0       	rjmp	.+12     	; 0x12d0 <__stack+0x1d1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    12c4:	86 e1       	ldi	r24, 0x16	; 22
    12c6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	9b 83       	std	Y+3, r25	; 0x03
    12ce:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    12d0:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    12d4:	88 e0       	ldi	r24, 0x08	; 8
    12d6:	92 e0       	ldi	r25, 0x02	; 2
    12d8:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    12dc:	86 e1       	ldi	r24, 0x16	; 22
    12de:	92 e0       	ldi	r25, 0x02	; 2
    12e0:	40 e0       	ldi	r20, 0x00	; 0
    12e2:	50 e0       	ldi	r21, 0x00	; 0
    12e4:	ba 01       	movw	r22, r20
    12e6:	01 e0       	ldi	r16, 0x01	; 1
    12e8:	10 e0       	ldi	r17, 0x00	; 0
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    12f2:	1e a6       	lds	r17, 0xbe
    12f4:	1f a6       	lds	r17, 0xbf
    12f6:	18 aa       	sts	0x98, r17
    12f8:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    12fa:	85 e0       	ldi	r24, 0x05	; 5
    12fc:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	9b 83       	std	Y+3, r25	; 0x03
    1304:	8a 83       	std	Y+2, r24	; 0x02
    1306:	c3 c7       	rjmp	.+3974   	; 0x228e <__stack+0x118f>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state ShowCode */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    1308:	1b 83       	std	Y+3, r17	; 0x03
    130a:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress1 */
			/* Entry action for state 'CheckKeyPress1'. */
			handle->ifaceKEYPAD.lastkey = 0;
    130c:	18 86       	std	Y+8, r1	; 0x08
    130e:	19 86       	std	Y+9, r1	; 0x09
    1310:	1a 86       	std	Y+10, r1	; 0x0a
    1312:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1;
    1314:	99 82       	std	Y+1, r9	; 0x01
    1316:	99 c7       	rjmp	.+3890   	; 0x224a <__stack+0x114b>
}

/* The reactions of state EnterCode. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode(SMO* handle) {
	/* The reactions of state EnterCode. */
	if (handle->iface.menuId == 0) { 
    1318:	8e a5       	lds	r24, 0x6e
    131a:	9f a5       	lds	r25, 0x6f
    131c:	a8 a9       	sts	0x48, r26
    131e:	b9 a9       	sts	0x49, r27
    1320:	00 97       	sbiw	r24, 0x00	; 0
    1322:	a1 05       	cpc	r26, r1
    1324:	b1 05       	cpc	r27, r1
    1326:	09 f0       	breq	.+2      	; 0x132a <__stack+0x22b>
    1328:	69 c0       	rjmp	.+210    	; 0x13fc <__stack+0x2fd>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	8a 30       	cpi	r24, 0x0A	; 10
    132e:	41 f1       	breq	.+80     	; 0x1380 <__stack+0x281>
    1330:	8b 30       	cpi	r24, 0x0B	; 11
    1332:	40 f4       	brcc	.+16     	; 0x1344 <__stack+0x245>
    1334:	88 30       	cpi	r24, 0x08	; 8
    1336:	b1 f0       	breq	.+44     	; 0x1364 <__stack+0x265>
    1338:	89 30       	cpi	r24, 0x09	; 9
    133a:	d8 f4       	brcc	.+54     	; 0x1372 <__stack+0x273>
    133c:	87 30       	cpi	r24, 0x07	; 7
    133e:	09 f0       	breq	.+2      	; 0x1342 <__stack+0x243>
    1340:	41 c0       	rjmp	.+130    	; 0x13c4 <__stack+0x2c5>
    1342:	09 c0       	rjmp	.+18     	; 0x1356 <__stack+0x257>
    1344:	8c 30       	cpi	r24, 0x0C	; 12
    1346:	51 f1       	breq	.+84     	; 0x139c <__stack+0x29d>
    1348:	8c 30       	cpi	r24, 0x0C	; 12
    134a:	08 f1       	brcs	.+66     	; 0x138e <__stack+0x28f>
    134c:	8e 30       	cpi	r24, 0x0E	; 14
    134e:	69 f1       	breq	.+90     	; 0x13aa <__stack+0x2ab>
    1350:	8f 30       	cpi	r24, 0x0F	; 15
    1352:	c1 f5       	brne	.+112    	; 0x13c4 <__stack+0x2c5>
    1354:	31 c0       	rjmp	.+98     	; 0x13b8 <__stack+0x2b9>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1356:	86 e1       	ldi	r24, 0x16	; 22
    1358:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	9b 83       	std	Y+3, r25	; 0x03
    1360:	8a 83       	std	Y+2, r24	; 0x02
    1362:	30 c0       	rjmp	.+96     	; 0x13c4 <__stack+0x2c5>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1364:	86 e1       	ldi	r24, 0x16	; 22
    1366:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	9b 83       	std	Y+3, r25	; 0x03
    136e:	8a 83       	std	Y+2, r24	; 0x02
    1370:	29 c0       	rjmp	.+82     	; 0x13c4 <__stack+0x2c5>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1372:	86 e1       	ldi	r24, 0x16	; 22
    1374:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	9b 83       	std	Y+3, r25	; 0x03
    137c:	8a 83       	std	Y+2, r24	; 0x02
    137e:	22 c0       	rjmp	.+68     	; 0x13c4 <__stack+0x2c5>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1380:	86 e1       	ldi	r24, 0x16	; 22
    1382:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	9b 83       	std	Y+3, r25	; 0x03
    138a:	8a 83       	std	Y+2, r24	; 0x02
    138c:	1b c0       	rjmp	.+54     	; 0x13c4 <__stack+0x2c5>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    138e:	86 e1       	ldi	r24, 0x16	; 22
    1390:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	9b 83       	std	Y+3, r25	; 0x03
    1398:	8a 83       	std	Y+2, r24	; 0x02
    139a:	14 c0       	rjmp	.+40     	; 0x13c4 <__stack+0x2c5>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    139c:	86 e1       	ldi	r24, 0x16	; 22
    139e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	9b 83       	std	Y+3, r25	; 0x03
    13a6:	8a 83       	std	Y+2, r24	; 0x02
    13a8:	0d c0       	rjmp	.+26     	; 0x13c4 <__stack+0x2c5>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    13aa:	86 e1       	ldi	r24, 0x16	; 22
    13ac:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	9b 83       	std	Y+3, r25	; 0x03
    13b4:	8a 83       	std	Y+2, r24	; 0x02
    13b6:	06 c0       	rjmp	.+12     	; 0x13c4 <__stack+0x2c5>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    13b8:	86 e1       	ldi	r24, 0x16	; 22
    13ba:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	9b 83       	std	Y+3, r25	; 0x03
    13c2:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    13c4:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    13c8:	88 e0       	ldi	r24, 0x08	; 8
    13ca:	92 e0       	ldi	r25, 0x02	; 2
    13cc:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    13d0:	86 e1       	ldi	r24, 0x16	; 22
    13d2:	92 e0       	ldi	r25, 0x02	; 2
    13d4:	40 e0       	ldi	r20, 0x00	; 0
    13d6:	50 e0       	ldi	r21, 0x00	; 0
    13d8:	ba 01       	movw	r22, r20
    13da:	01 e0       	ldi	r16, 0x01	; 1
    13dc:	10 e0       	ldi	r17, 0x00	; 0
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    13e6:	1e a6       	lds	r17, 0xbe
    13e8:	1f a6       	lds	r17, 0xbf
    13ea:	18 aa       	sts	0x98, r17
    13ec:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    13ee:	85 e0       	ldi	r24, 0x05	; 5
    13f0:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	9b 83       	std	Y+3, r25	; 0x03
    13f8:	8a 83       	std	Y+2, r24	; 0x02
    13fa:	49 c7       	rjmp	.+3730   	; 0x228e <__stack+0x118f>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state EnterCode */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    13fc:	1b 83       	std	Y+3, r17	; 0x03
    13fe:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress1 */
			/* Entry action for state 'CheckKeyPress1'. */
			handle->ifaceKEYPAD.lastkey = 0;
    1400:	18 86       	std	Y+8, r1	; 0x08
    1402:	19 86       	std	Y+9, r1	; 0x09
    1404:	1a 86       	std	Y+10, r1	; 0x0a
    1406:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1;
    1408:	99 82       	std	Y+1, r9	; 0x01
    140a:	1f c7       	rjmp	.+3646   	; 0x224a <__stack+0x114b>
}

/* The reactions of state CheckKeyPress1. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1(SMO* handle) {
	/* The reactions of state CheckKeyPress1. */
	if (handle->iface.menuId == 0) { 
    140c:	8e a5       	lds	r24, 0x6e
    140e:	9f a5       	lds	r25, 0x6f
    1410:	a8 a9       	sts	0x48, r26
    1412:	b9 a9       	sts	0x49, r27
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	a1 05       	cpc	r26, r1
    1418:	b1 05       	cpc	r27, r1
    141a:	09 f0       	breq	.+2      	; 0x141e <__stack+0x31f>
    141c:	69 c0       	rjmp	.+210    	; 0x14f0 <__stack+0x3f1>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	8a 30       	cpi	r24, 0x0A	; 10
    1422:	41 f1       	breq	.+80     	; 0x1474 <__stack+0x375>
    1424:	8b 30       	cpi	r24, 0x0B	; 11
    1426:	40 f4       	brcc	.+16     	; 0x1438 <__stack+0x339>
    1428:	88 30       	cpi	r24, 0x08	; 8
    142a:	b1 f0       	breq	.+44     	; 0x1458 <__stack+0x359>
    142c:	89 30       	cpi	r24, 0x09	; 9
    142e:	d8 f4       	brcc	.+54     	; 0x1466 <__stack+0x367>
    1430:	87 30       	cpi	r24, 0x07	; 7
    1432:	09 f0       	breq	.+2      	; 0x1436 <__stack+0x337>
    1434:	41 c0       	rjmp	.+130    	; 0x14b8 <__stack+0x3b9>
    1436:	09 c0       	rjmp	.+18     	; 0x144a <__stack+0x34b>
    1438:	8c 30       	cpi	r24, 0x0C	; 12
    143a:	51 f1       	breq	.+84     	; 0x1490 <__stack+0x391>
    143c:	8c 30       	cpi	r24, 0x0C	; 12
    143e:	08 f1       	brcs	.+66     	; 0x1482 <__stack+0x383>
    1440:	8e 30       	cpi	r24, 0x0E	; 14
    1442:	69 f1       	breq	.+90     	; 0x149e <__stack+0x39f>
    1444:	8f 30       	cpi	r24, 0x0F	; 15
    1446:	c1 f5       	brne	.+112    	; 0x14b8 <__stack+0x3b9>
    1448:	31 c0       	rjmp	.+98     	; 0x14ac <__stack+0x3ad>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    144a:	86 e1       	ldi	r24, 0x16	; 22
    144c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	9b 83       	std	Y+3, r25	; 0x03
    1454:	8a 83       	std	Y+2, r24	; 0x02
    1456:	30 c0       	rjmp	.+96     	; 0x14b8 <__stack+0x3b9>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1458:	86 e1       	ldi	r24, 0x16	; 22
    145a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	9b 83       	std	Y+3, r25	; 0x03
    1462:	8a 83       	std	Y+2, r24	; 0x02
    1464:	29 c0       	rjmp	.+82     	; 0x14b8 <__stack+0x3b9>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1466:	86 e1       	ldi	r24, 0x16	; 22
    1468:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	9b 83       	std	Y+3, r25	; 0x03
    1470:	8a 83       	std	Y+2, r24	; 0x02
    1472:	22 c0       	rjmp	.+68     	; 0x14b8 <__stack+0x3b9>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1474:	86 e1       	ldi	r24, 0x16	; 22
    1476:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	9b 83       	std	Y+3, r25	; 0x03
    147e:	8a 83       	std	Y+2, r24	; 0x02
    1480:	1b c0       	rjmp	.+54     	; 0x14b8 <__stack+0x3b9>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1482:	86 e1       	ldi	r24, 0x16	; 22
    1484:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	9b 83       	std	Y+3, r25	; 0x03
    148c:	8a 83       	std	Y+2, r24	; 0x02
    148e:	14 c0       	rjmp	.+40     	; 0x14b8 <__stack+0x3b9>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1490:	86 e1       	ldi	r24, 0x16	; 22
    1492:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	9b 83       	std	Y+3, r25	; 0x03
    149a:	8a 83       	std	Y+2, r24	; 0x02
    149c:	0d c0       	rjmp	.+26     	; 0x14b8 <__stack+0x3b9>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    149e:	86 e1       	ldi	r24, 0x16	; 22
    14a0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	9b 83       	std	Y+3, r25	; 0x03
    14a8:	8a 83       	std	Y+2, r24	; 0x02
    14aa:	06 c0       	rjmp	.+12     	; 0x14b8 <__stack+0x3b9>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    14ac:	86 e1       	ldi	r24, 0x16	; 22
    14ae:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	9b 83       	std	Y+3, r25	; 0x03
    14b6:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    14b8:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    14bc:	88 e0       	ldi	r24, 0x08	; 8
    14be:	92 e0       	ldi	r25, 0x02	; 2
    14c0:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    14c4:	86 e1       	ldi	r24, 0x16	; 22
    14c6:	92 e0       	ldi	r25, 0x02	; 2
    14c8:	40 e0       	ldi	r20, 0x00	; 0
    14ca:	50 e0       	ldi	r21, 0x00	; 0
    14cc:	ba 01       	movw	r22, r20
    14ce:	01 e0       	ldi	r16, 0x01	; 1
    14d0:	10 e0       	ldi	r17, 0x00	; 0
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    14da:	1e a6       	lds	r17, 0xbe
    14dc:	1f a6       	lds	r17, 0xbf
    14de:	18 aa       	sts	0x98, r17
    14e0:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    14e2:	85 e0       	ldi	r24, 0x05	; 5
    14e4:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	9b 83       	std	Y+3, r25	; 0x03
    14ec:	8a 83       	std	Y+2, r24	; 0x02
    14ee:	cf c6       	rjmp	.+3486   	; 0x228e <__stack+0x118f>
	}  else {
		if (handle->ifaceDISH.pos < 3 && handle->ifaceKEYPAD.lastkey <= 9 && handle->ifaceKEYPAD.lastkey >= 1 && handle->ifaceKEYPAD.key_pressed_raised) { 
    14f0:	89 a5       	lds	r24, 0x69
    14f2:	9a a5       	lds	r25, 0x6a
    14f4:	ab a5       	lds	r26, 0x6b
    14f6:	bc a5       	lds	r27, 0x6c
    14f8:	83 30       	cpi	r24, 0x03	; 3
    14fa:	91 05       	cpc	r25, r1
    14fc:	a1 05       	cpc	r26, r1
    14fe:	b1 05       	cpc	r27, r1
    1500:	0c f0       	brlt	.+2      	; 0x1504 <__stack+0x405>
    1502:	68 c0       	rjmp	.+208    	; 0x15d4 <__stack+0x4d5>
    1504:	c8 84       	ldd	r12, Y+8	; 0x08
    1506:	d9 84       	ldd	r13, Y+9	; 0x09
    1508:	ea 84       	ldd	r14, Y+10	; 0x0a
    150a:	fb 84       	ldd	r15, Y+11	; 0x0b
    150c:	ea e0       	ldi	r30, 0x0A	; 10
    150e:	ce 16       	cp	r12, r30
    1510:	d1 04       	cpc	r13, r1
    1512:	e1 04       	cpc	r14, r1
    1514:	f1 04       	cpc	r15, r1
    1516:	0c f0       	brlt	.+2      	; 0x151a <__stack+0x41b>
    1518:	4b c0       	rjmp	.+150    	; 0x15b0 <__stack+0x4b1>
    151a:	1c 14       	cp	r1, r12
    151c:	1d 04       	cpc	r1, r13
    151e:	1e 04       	cpc	r1, r14
    1520:	1f 04       	cpc	r1, r15
    1522:	0c f0       	brlt	.+2      	; 0x1526 <__stack+0x427>
    1524:	45 c0       	rjmp	.+138    	; 0x15b0 <__stack+0x4b1>
    1526:	2d 85       	ldd	r18, Y+13	; 0x0d
    1528:	22 23       	and	r18, r18
    152a:	09 f4       	brne	.+2      	; 0x152e <__stack+0x42f>
    152c:	41 c0       	rjmp	.+130    	; 0x15b0 <__stack+0x4b1>
			/* Default exit sequence for state CheckKeyPress1 */
			handle->stateConfVector[1] = SMO_last_state;
    152e:	26 e1       	ldi	r18, 0x16	; 22
    1530:	29 83       	std	Y+1, r18	; 0x01
			handle->stateConfVectorPosition = 1;
    1532:	88 24       	eor	r8, r8
    1534:	99 24       	eor	r9, r9
    1536:	83 94       	inc	r8
    1538:	9b 82       	std	Y+3, r9	; 0x03
    153a:	8a 82       	std	Y+2, r8	; 0x02
			/* Default enter sequence for state EnterCode */
			/* Entry action for state 'EnterCode'. */
			sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    153c:	9c 01       	movw	r18, r24
    153e:	ad 01       	movw	r20, r26
    1540:	22 0f       	add	r18, r18
    1542:	33 1f       	adc	r19, r19
    1544:	44 1f       	adc	r20, r20
    1546:	55 1f       	adc	r21, r21
    1548:	c7 01       	movw	r24, r14
    154a:	b6 01       	movw	r22, r12
    154c:	ee 24       	eor	r14, r14
    154e:	ff 24       	eor	r15, r15
    1550:	87 01       	movw	r16, r14
    1552:	e3 94       	inc	r14
    1554:	aa 24       	eor	r10, r10
    1556:	bb 24       	eor	r11, r11
    1558:	65 01       	movw	r12, r10
    155a:	a3 94       	inc	r10
    155c:	0e 94 24 02 	call	0x448	; 0x448 <sMOIfaceLCD_writeNumberXY>
			handle->ifaceDISH.pos += 1;
    1560:	89 a5       	lds	r24, 0x69
    1562:	9a a5       	lds	r25, 0x6a
    1564:	ab a5       	lds	r26, 0x6b
    1566:	bc a5       	lds	r27, 0x6c
    1568:	01 96       	adiw	r24, 0x01	; 1
    156a:	a1 1d       	adc	r26, r1
    156c:	b1 1d       	adc	r27, r1
    156e:	89 a7       	lds	r24, 0x79
    1570:	9a a7       	lds	r25, 0x7a
    1572:	ab a7       	lds	r26, 0x7b
    1574:	bc a7       	lds	r27, 0x7c
			handle->ifaceDISH.ID = handle->ifaceDISH.ID * 10 + handle->ifaceKEYPAD.lastkey;
    1576:	69 a1       	lds	r22, 0x49
    1578:	7a a1       	lds	r23, 0x4a
    157a:	8b a1       	lds	r24, 0x4b
    157c:	9c a1       	lds	r25, 0x4c
    157e:	2a e0       	ldi	r18, 0x0A	; 10
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	40 e0       	ldi	r20, 0x00	; 0
    1584:	50 e0       	ldi	r21, 0x00	; 0
    1586:	0e 94 cb 13 	call	0x2796	; 0x2796 <__mulsi3>
    158a:	ab 01       	movw	r20, r22
    158c:	bc 01       	movw	r22, r24
    158e:	88 85       	ldd	r24, Y+8	; 0x08
    1590:	99 85       	ldd	r25, Y+9	; 0x09
    1592:	aa 85       	ldd	r26, Y+10	; 0x0a
    1594:	bb 85       	ldd	r27, Y+11	; 0x0b
    1596:	84 0f       	add	r24, r20
    1598:	95 1f       	adc	r25, r21
    159a:	a6 1f       	adc	r26, r22
    159c:	b7 1f       	adc	r27, r23
    159e:	89 a3       	lds	r24, 0x59
    15a0:	9a a3       	lds	r25, 0x5a
    15a2:	ab a3       	lds	r26, 0x5b
    15a4:	bc a3       	lds	r27, 0x5c
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode;
    15a6:	88 e0       	ldi	r24, 0x08	; 8
    15a8:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    15aa:	9b 82       	std	Y+3, r9	; 0x03
    15ac:	8a 82       	std	Y+2, r8	; 0x02
    15ae:	6f c6       	rjmp	.+3294   	; 0x228e <__stack+0x118f>
		}  else {
			if (handle->ifaceDISH.pos < 3 && handle->ifaceKEYPAD.lastkey == 10 && handle->ifaceKEYPAD.key_pressed_raised) { 
    15b0:	fa e0       	ldi	r31, 0x0A	; 10
    15b2:	cf 16       	cp	r12, r31
    15b4:	d1 04       	cpc	r13, r1
    15b6:	e1 04       	cpc	r14, r1
    15b8:	f1 04       	cpc	r15, r1
    15ba:	61 f4       	brne	.+24     	; 0x15d4 <__stack+0x4d5>
    15bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    15be:	88 23       	and	r24, r24
    15c0:	49 f0       	breq	.+18     	; 0x15d4 <__stack+0x4d5>
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
				handle->stateConfVectorPosition = 1;
    15c2:	1b 83       	std	Y+3, r17	; 0x03
    15c4:	0a 83       	std	Y+2, r16	; 0x02
				/* Default enter sequence for state CheckCode0 */
				/* Entry action for state 'CheckCode0'. */
				handle->ifaceKEYPAD.lastkey = 0;
    15c6:	18 86       	std	Y+8, r1	; 0x08
    15c8:	19 86       	std	Y+9, r1	; 0x09
    15ca:	1a 86       	std	Y+10, r1	; 0x0a
    15cc:	1b 86       	std	Y+11, r1	; 0x0b
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0;
    15ce:	2a e0       	ldi	r18, 0x0A	; 10
    15d0:	29 83       	std	Y+1, r18	; 0x01
    15d2:	3b c6       	rjmp	.+3190   	; 0x224a <__stack+0x114b>
				handle->stateConfVectorPosition = 1;
			}  else {
				if (handle->ifaceKEYPAD.lastkey == 12 && handle->ifaceKEYPAD.key_pressed_raised) { 
    15d4:	88 85       	ldd	r24, Y+8	; 0x08
    15d6:	99 85       	ldd	r25, Y+9	; 0x09
    15d8:	aa 85       	ldd	r26, Y+10	; 0x0a
    15da:	bb 85       	ldd	r27, Y+11	; 0x0b
    15dc:	8c 30       	cpi	r24, 0x0C	; 12
    15de:	91 05       	cpc	r25, r1
    15e0:	a1 05       	cpc	r26, r1
    15e2:	b1 05       	cpc	r27, r1
    15e4:	41 f5       	brne	.+80     	; 0x1636 <__stack+0x537>
    15e6:	2d 85       	ldd	r18, Y+13	; 0x0d
    15e8:	22 23       	and	r18, r18
    15ea:	29 f1       	breq	.+74     	; 0x1636 <__stack+0x537>
					/* Default exit sequence for state CheckKeyPress1 */
					handle->stateConfVector[1] = SMO_last_state;
    15ec:	86 e1       	ldi	r24, 0x16	; 22
    15ee:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    15f0:	ee 24       	eor	r14, r14
    15f2:	ff 24       	eor	r15, r15
    15f4:	e3 94       	inc	r14
    15f6:	fb 82       	std	Y+3, r15	; 0x03
    15f8:	ea 82       	std	Y+2, r14	; 0x02
					/* Default enter sequence for state ShowCode */
					/* Entry action for state 'ShowCode'. */
					sMOIfaceLCD_clear();
    15fa:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
					sMOIfaceLCD_writeString("Nhap ma mon an:");
    15fe:	82 e2       	ldi	r24, 0x22	; 34
    1600:	92 e0       	ldi	r25, 0x02	; 2
    1602:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
					sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    1606:	82 e3       	ldi	r24, 0x32	; 50
    1608:	92 e0       	ldi	r25, 0x02	; 2
    160a:	40 e0       	ldi	r20, 0x00	; 0
    160c:	50 e0       	ldi	r21, 0x00	; 0
    160e:	ba 01       	movw	r22, r20
    1610:	01 e0       	ldi	r16, 0x01	; 1
    1612:	10 e0       	ldi	r17, 0x00	; 0
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
					handle->ifaceDISH.pos = 0;
    161c:	19 a6       	lds	r17, 0xb9
    161e:	1a a6       	lds	r17, 0xba
    1620:	1b a6       	lds	r17, 0xbb
    1622:	1c a6       	lds	r17, 0xbc
					handle->ifaceDISH.ID = 0;
    1624:	19 a2       	lds	r17, 0x99
    1626:	1a a2       	lds	r17, 0x9a
    1628:	1b a2       	lds	r17, 0x9b
    162a:	1c a2       	lds	r17, 0x9c
					handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    162c:	87 e0       	ldi	r24, 0x07	; 7
    162e:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    1630:	fb 82       	std	Y+3, r15	; 0x03
    1632:	ea 82       	std	Y+2, r14	; 0x02
    1634:	2c c6       	rjmp	.+3160   	; 0x228e <__stack+0x118f>
				}  else {
					if (handle->ifaceKEYPAD.lastkey == 11 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1636:	8b 30       	cpi	r24, 0x0B	; 11
    1638:	91 05       	cpc	r25, r1
    163a:	a1 05       	cpc	r26, r1
    163c:	b1 05       	cpc	r27, r1
    163e:	41 f5       	brne	.+80     	; 0x1690 <__stack+0x591>
    1640:	2d 85       	ldd	r18, Y+13	; 0x0d
    1642:	22 23       	and	r18, r18
    1644:	29 f1       	breq	.+74     	; 0x1690 <__stack+0x591>
						/* Default exit sequence for state CheckKeyPress1 */
						handle->stateConfVector[1] = SMO_last_state;
    1646:	86 e1       	ldi	r24, 0x16	; 22
    1648:	89 83       	std	Y+1, r24	; 0x01
						handle->stateConfVectorPosition = 1;
    164a:	ee 24       	eor	r14, r14
    164c:	ff 24       	eor	r15, r15
    164e:	e3 94       	inc	r14
    1650:	fb 82       	std	Y+3, r15	; 0x03
    1652:	ea 82       	std	Y+2, r14	; 0x02
						/* Default enter sequence for state ShowAmount */
						/* Entry action for state 'ShowAmount'. */
						sMOIfaceLCD_clear();
    1654:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
						sMOIfaceLCD_writeString("Nhap so luong:");
    1658:	88 e3       	ldi	r24, 0x38	; 56
    165a:	92 e0       	ldi	r25, 0x02	; 2
    165c:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
						sMOIfaceLCD_writeStringXY("_ _", 0, 1);
    1660:	87 e4       	ldi	r24, 0x47	; 71
    1662:	92 e0       	ldi	r25, 0x02	; 2
    1664:	40 e0       	ldi	r20, 0x00	; 0
    1666:	50 e0       	ldi	r21, 0x00	; 0
    1668:	ba 01       	movw	r22, r20
    166a:	01 e0       	ldi	r16, 0x01	; 1
    166c:	10 e0       	ldi	r17, 0x00	; 0
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
						handle->ifaceDISH.pos = 0;
    1676:	19 a6       	lds	r17, 0xb9
    1678:	1a a6       	lds	r17, 0xba
    167a:	1b a6       	lds	r17, 0xbb
    167c:	1c a6       	lds	r17, 0xbc
						handle->ifaceDISH.amount = 0;
    167e:	1d a2       	lds	r17, 0x9d
    1680:	1e a2       	lds	r17, 0x9e
    1682:	1f a2       	lds	r17, 0x9f
    1684:	18 a6       	lds	r17, 0xb8
						handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount;
    1686:	8b e0       	ldi	r24, 0x0B	; 11
    1688:	89 83       	std	Y+1, r24	; 0x01
						handle->stateConfVectorPosition = 1;
    168a:	fb 82       	std	Y+3, r15	; 0x03
    168c:	ea 82       	std	Y+2, r14	; 0x02
    168e:	ff c5       	rjmp	.+3070   	; 0x228e <__stack+0x118f>
					}  else {
						if (handle->ifaceKEYPAD.lastkey == 16 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1690:	80 31       	cpi	r24, 0x10	; 16
    1692:	91 05       	cpc	r25, r1
    1694:	a1 05       	cpc	r26, r1
    1696:	b1 05       	cpc	r27, r1
    1698:	09 f0       	breq	.+2      	; 0x169c <__stack+0x59d>
    169a:	d7 c5       	rjmp	.+2990   	; 0x224a <__stack+0x114b>
    169c:	8d 85       	ldd	r24, Y+13	; 0x0d
    169e:	88 23       	and	r24, r24
    16a0:	09 f4       	brne	.+2      	; 0x16a4 <__stack+0x5a5>
    16a2:	d3 c5       	rjmp	.+2982   	; 0x224a <__stack+0x114b>
							/* Default exit sequence for state CheckKeyPress1 */
							handle->stateConfVector[1] = SMO_last_state;
							handle->stateConfVectorPosition = 1;
    16a4:	1b 83       	std	Y+3, r17	; 0x03
    16a6:	0a 83       	std	Y+2, r16	; 0x02
							handle->iface.menuId = 0;
    16a8:	1e a6       	lds	r17, 0xbe
    16aa:	1f a6       	lds	r17, 0xbf
    16ac:	18 aa       	sts	0x98, r17
    16ae:	19 aa       	sts	0x99, r17
							/* Default enter sequence for state null */
							handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_;
    16b0:	8f e0       	ldi	r24, 0x0F	; 15
    16b2:	89 83       	std	Y+1, r24	; 0x01
    16b4:	ca c5       	rjmp	.+2964   	; 0x224a <__stack+0x114b>
}

/* The reactions of state CheckCode0. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0(SMO* handle) {
	/* The reactions of state CheckCode0. */
	if (handle->iface.menuId == 0) { 
    16b6:	8e a5       	lds	r24, 0x6e
    16b8:	9f a5       	lds	r25, 0x6f
    16ba:	a8 a9       	sts	0x48, r26
    16bc:	b9 a9       	sts	0x49, r27
    16be:	00 97       	sbiw	r24, 0x00	; 0
    16c0:	a1 05       	cpc	r26, r1
    16c2:	b1 05       	cpc	r27, r1
    16c4:	09 f0       	breq	.+2      	; 0x16c8 <__stack+0x5c9>
    16c6:	69 c0       	rjmp	.+210    	; 0x179a <__stack+0x69b>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	8a 30       	cpi	r24, 0x0A	; 10
    16cc:	41 f1       	breq	.+80     	; 0x171e <__stack+0x61f>
    16ce:	8b 30       	cpi	r24, 0x0B	; 11
    16d0:	40 f4       	brcc	.+16     	; 0x16e2 <__stack+0x5e3>
    16d2:	88 30       	cpi	r24, 0x08	; 8
    16d4:	b1 f0       	breq	.+44     	; 0x1702 <__stack+0x603>
    16d6:	89 30       	cpi	r24, 0x09	; 9
    16d8:	d8 f4       	brcc	.+54     	; 0x1710 <__stack+0x611>
    16da:	87 30       	cpi	r24, 0x07	; 7
    16dc:	09 f0       	breq	.+2      	; 0x16e0 <__stack+0x5e1>
    16de:	41 c0       	rjmp	.+130    	; 0x1762 <__stack+0x663>
    16e0:	09 c0       	rjmp	.+18     	; 0x16f4 <__stack+0x5f5>
    16e2:	8c 30       	cpi	r24, 0x0C	; 12
    16e4:	51 f1       	breq	.+84     	; 0x173a <__stack+0x63b>
    16e6:	8c 30       	cpi	r24, 0x0C	; 12
    16e8:	08 f1       	brcs	.+66     	; 0x172c <__stack+0x62d>
    16ea:	8e 30       	cpi	r24, 0x0E	; 14
    16ec:	69 f1       	breq	.+90     	; 0x1748 <__stack+0x649>
    16ee:	8f 30       	cpi	r24, 0x0F	; 15
    16f0:	c1 f5       	brne	.+112    	; 0x1762 <__stack+0x663>
    16f2:	31 c0       	rjmp	.+98     	; 0x1756 <__stack+0x657>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    16f4:	86 e1       	ldi	r24, 0x16	; 22
    16f6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	9b 83       	std	Y+3, r25	; 0x03
    16fe:	8a 83       	std	Y+2, r24	; 0x02
    1700:	30 c0       	rjmp	.+96     	; 0x1762 <__stack+0x663>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1702:	86 e1       	ldi	r24, 0x16	; 22
    1704:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	9b 83       	std	Y+3, r25	; 0x03
    170c:	8a 83       	std	Y+2, r24	; 0x02
    170e:	29 c0       	rjmp	.+82     	; 0x1762 <__stack+0x663>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1710:	86 e1       	ldi	r24, 0x16	; 22
    1712:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	9b 83       	std	Y+3, r25	; 0x03
    171a:	8a 83       	std	Y+2, r24	; 0x02
    171c:	22 c0       	rjmp	.+68     	; 0x1762 <__stack+0x663>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    171e:	86 e1       	ldi	r24, 0x16	; 22
    1720:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	9b 83       	std	Y+3, r25	; 0x03
    1728:	8a 83       	std	Y+2, r24	; 0x02
    172a:	1b c0       	rjmp	.+54     	; 0x1762 <__stack+0x663>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    172c:	86 e1       	ldi	r24, 0x16	; 22
    172e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	9b 83       	std	Y+3, r25	; 0x03
    1736:	8a 83       	std	Y+2, r24	; 0x02
    1738:	14 c0       	rjmp	.+40     	; 0x1762 <__stack+0x663>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    173a:	86 e1       	ldi	r24, 0x16	; 22
    173c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	9b 83       	std	Y+3, r25	; 0x03
    1744:	8a 83       	std	Y+2, r24	; 0x02
    1746:	0d c0       	rjmp	.+26     	; 0x1762 <__stack+0x663>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1748:	86 e1       	ldi	r24, 0x16	; 22
    174a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	9b 83       	std	Y+3, r25	; 0x03
    1752:	8a 83       	std	Y+2, r24	; 0x02
    1754:	06 c0       	rjmp	.+12     	; 0x1762 <__stack+0x663>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1756:	86 e1       	ldi	r24, 0x16	; 22
    1758:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	9b 83       	std	Y+3, r25	; 0x03
    1760:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1762:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1766:	88 e0       	ldi	r24, 0x08	; 8
    1768:	92 e0       	ldi	r25, 0x02	; 2
    176a:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    176e:	86 e1       	ldi	r24, 0x16	; 22
    1770:	92 e0       	ldi	r25, 0x02	; 2
    1772:	40 e0       	ldi	r20, 0x00	; 0
    1774:	50 e0       	ldi	r21, 0x00	; 0
    1776:	ba 01       	movw	r22, r20
    1778:	01 e0       	ldi	r16, 0x01	; 1
    177a:	10 e0       	ldi	r17, 0x00	; 0
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1784:	1e a6       	lds	r17, 0xbe
    1786:	1f a6       	lds	r17, 0xbf
    1788:	18 aa       	sts	0x98, r17
    178a:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    178c:	85 e0       	ldi	r24, 0x05	; 5
    178e:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	9b 83       	std	Y+3, r25	; 0x03
    1796:	8a 83       	std	Y+2, r24	; 0x02
    1798:	7a c5       	rjmp	.+2804   	; 0x228e <__stack+0x118f>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state CheckCode0 */
			handle->stateConfVector[1] = SMO_last_state;
    179a:	86 e1       	ldi	r24, 0x16	; 22
    179c:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    179e:	88 24       	eor	r8, r8
    17a0:	99 24       	eor	r9, r9
    17a2:	83 94       	inc	r8
    17a4:	9b 82       	std	Y+3, r9	; 0x03
    17a6:	8a 82       	std	Y+2, r8	; 0x02
			/* Default enter sequence for state EnterCode */
			/* Entry action for state 'EnterCode'. */
			sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    17a8:	c8 84       	ldd	r12, Y+8	; 0x08
    17aa:	d9 84       	ldd	r13, Y+9	; 0x09
    17ac:	ea 84       	ldd	r14, Y+10	; 0x0a
    17ae:	fb 84       	ldd	r15, Y+11	; 0x0b
    17b0:	89 a5       	lds	r24, 0x69
    17b2:	9a a5       	lds	r25, 0x6a
    17b4:	ab a5       	lds	r26, 0x6b
    17b6:	bc a5       	lds	r27, 0x6c
    17b8:	9c 01       	movw	r18, r24
    17ba:	ad 01       	movw	r20, r26
    17bc:	22 0f       	add	r18, r18
    17be:	33 1f       	adc	r19, r19
    17c0:	44 1f       	adc	r20, r20
    17c2:	55 1f       	adc	r21, r21
    17c4:	c7 01       	movw	r24, r14
    17c6:	b6 01       	movw	r22, r12
    17c8:	ee 24       	eor	r14, r14
    17ca:	ff 24       	eor	r15, r15
    17cc:	87 01       	movw	r16, r14
    17ce:	e3 94       	inc	r14
    17d0:	aa 24       	eor	r10, r10
    17d2:	bb 24       	eor	r11, r11
    17d4:	65 01       	movw	r12, r10
    17d6:	a3 94       	inc	r10
    17d8:	0e 94 24 02 	call	0x448	; 0x448 <sMOIfaceLCD_writeNumberXY>
			handle->ifaceDISH.pos += 1;
    17dc:	89 a5       	lds	r24, 0x69
    17de:	9a a5       	lds	r25, 0x6a
    17e0:	ab a5       	lds	r26, 0x6b
    17e2:	bc a5       	lds	r27, 0x6c
    17e4:	01 96       	adiw	r24, 0x01	; 1
    17e6:	a1 1d       	adc	r26, r1
    17e8:	b1 1d       	adc	r27, r1
    17ea:	89 a7       	lds	r24, 0x79
    17ec:	9a a7       	lds	r25, 0x7a
    17ee:	ab a7       	lds	r26, 0x7b
    17f0:	bc a7       	lds	r27, 0x7c
			handle->ifaceDISH.ID = handle->ifaceDISH.ID * 10 + handle->ifaceKEYPAD.lastkey;
    17f2:	69 a1       	lds	r22, 0x49
    17f4:	7a a1       	lds	r23, 0x4a
    17f6:	8b a1       	lds	r24, 0x4b
    17f8:	9c a1       	lds	r25, 0x4c
    17fa:	2a e0       	ldi	r18, 0x0A	; 10
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	40 e0       	ldi	r20, 0x00	; 0
    1800:	50 e0       	ldi	r21, 0x00	; 0
    1802:	0e 94 cb 13 	call	0x2796	; 0x2796 <__mulsi3>
    1806:	ab 01       	movw	r20, r22
    1808:	bc 01       	movw	r22, r24
    180a:	88 85       	ldd	r24, Y+8	; 0x08
    180c:	99 85       	ldd	r25, Y+9	; 0x09
    180e:	aa 85       	ldd	r26, Y+10	; 0x0a
    1810:	bb 85       	ldd	r27, Y+11	; 0x0b
    1812:	84 0f       	add	r24, r20
    1814:	95 1f       	adc	r25, r21
    1816:	a6 1f       	adc	r26, r22
    1818:	b7 1f       	adc	r27, r23
    181a:	89 a3       	lds	r24, 0x59
    181c:	9a a3       	lds	r25, 0x5a
    181e:	ab a3       	lds	r26, 0x5b
    1820:	bc a3       	lds	r27, 0x5c
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode;
    1822:	88 e0       	ldi	r24, 0x08	; 8
    1824:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1826:	9b 82       	std	Y+3, r9	; 0x03
    1828:	8a 82       	std	Y+2, r8	; 0x02
    182a:	31 c5       	rjmp	.+2658   	; 0x228e <__stack+0x118f>
}

/* The reactions of state ShowAmount. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount(SMO* handle) {
	/* The reactions of state ShowAmount. */
	if (handle->iface.menuId == 0) { 
    182c:	8e a5       	lds	r24, 0x6e
    182e:	9f a5       	lds	r25, 0x6f
    1830:	a8 a9       	sts	0x48, r26
    1832:	b9 a9       	sts	0x49, r27
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	a1 05       	cpc	r26, r1
    1838:	b1 05       	cpc	r27, r1
    183a:	09 f0       	breq	.+2      	; 0x183e <__stack+0x73f>
    183c:	69 c0       	rjmp	.+210    	; 0x1910 <__stack+0x811>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    183e:	89 81       	ldd	r24, Y+1	; 0x01
    1840:	8a 30       	cpi	r24, 0x0A	; 10
    1842:	41 f1       	breq	.+80     	; 0x1894 <__stack+0x795>
    1844:	8b 30       	cpi	r24, 0x0B	; 11
    1846:	40 f4       	brcc	.+16     	; 0x1858 <__stack+0x759>
    1848:	88 30       	cpi	r24, 0x08	; 8
    184a:	b1 f0       	breq	.+44     	; 0x1878 <__stack+0x779>
    184c:	89 30       	cpi	r24, 0x09	; 9
    184e:	d8 f4       	brcc	.+54     	; 0x1886 <__stack+0x787>
    1850:	87 30       	cpi	r24, 0x07	; 7
    1852:	09 f0       	breq	.+2      	; 0x1856 <__stack+0x757>
    1854:	41 c0       	rjmp	.+130    	; 0x18d8 <__stack+0x7d9>
    1856:	09 c0       	rjmp	.+18     	; 0x186a <__stack+0x76b>
    1858:	8c 30       	cpi	r24, 0x0C	; 12
    185a:	51 f1       	breq	.+84     	; 0x18b0 <__stack+0x7b1>
    185c:	8c 30       	cpi	r24, 0x0C	; 12
    185e:	08 f1       	brcs	.+66     	; 0x18a2 <__stack+0x7a3>
    1860:	8e 30       	cpi	r24, 0x0E	; 14
    1862:	69 f1       	breq	.+90     	; 0x18be <__stack+0x7bf>
    1864:	8f 30       	cpi	r24, 0x0F	; 15
    1866:	c1 f5       	brne	.+112    	; 0x18d8 <__stack+0x7d9>
    1868:	31 c0       	rjmp	.+98     	; 0x18cc <__stack+0x7cd>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    186a:	86 e1       	ldi	r24, 0x16	; 22
    186c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	9b 83       	std	Y+3, r25	; 0x03
    1874:	8a 83       	std	Y+2, r24	; 0x02
    1876:	30 c0       	rjmp	.+96     	; 0x18d8 <__stack+0x7d9>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1878:	86 e1       	ldi	r24, 0x16	; 22
    187a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	9b 83       	std	Y+3, r25	; 0x03
    1882:	8a 83       	std	Y+2, r24	; 0x02
    1884:	29 c0       	rjmp	.+82     	; 0x18d8 <__stack+0x7d9>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1886:	86 e1       	ldi	r24, 0x16	; 22
    1888:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	9b 83       	std	Y+3, r25	; 0x03
    1890:	8a 83       	std	Y+2, r24	; 0x02
    1892:	22 c0       	rjmp	.+68     	; 0x18d8 <__stack+0x7d9>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1894:	86 e1       	ldi	r24, 0x16	; 22
    1896:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	9b 83       	std	Y+3, r25	; 0x03
    189e:	8a 83       	std	Y+2, r24	; 0x02
    18a0:	1b c0       	rjmp	.+54     	; 0x18d8 <__stack+0x7d9>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    18a2:	86 e1       	ldi	r24, 0x16	; 22
    18a4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	9b 83       	std	Y+3, r25	; 0x03
    18ac:	8a 83       	std	Y+2, r24	; 0x02
    18ae:	14 c0       	rjmp	.+40     	; 0x18d8 <__stack+0x7d9>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    18b0:	86 e1       	ldi	r24, 0x16	; 22
    18b2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	9b 83       	std	Y+3, r25	; 0x03
    18ba:	8a 83       	std	Y+2, r24	; 0x02
    18bc:	0d c0       	rjmp	.+26     	; 0x18d8 <__stack+0x7d9>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    18be:	86 e1       	ldi	r24, 0x16	; 22
    18c0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	9b 83       	std	Y+3, r25	; 0x03
    18c8:	8a 83       	std	Y+2, r24	; 0x02
    18ca:	06 c0       	rjmp	.+12     	; 0x18d8 <__stack+0x7d9>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    18cc:	86 e1       	ldi	r24, 0x16	; 22
    18ce:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	9b 83       	std	Y+3, r25	; 0x03
    18d6:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    18d8:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    18dc:	88 e0       	ldi	r24, 0x08	; 8
    18de:	92 e0       	ldi	r25, 0x02	; 2
    18e0:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    18e4:	86 e1       	ldi	r24, 0x16	; 22
    18e6:	92 e0       	ldi	r25, 0x02	; 2
    18e8:	40 e0       	ldi	r20, 0x00	; 0
    18ea:	50 e0       	ldi	r21, 0x00	; 0
    18ec:	ba 01       	movw	r22, r20
    18ee:	01 e0       	ldi	r16, 0x01	; 1
    18f0:	10 e0       	ldi	r17, 0x00	; 0
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    18fa:	1e a6       	lds	r17, 0xbe
    18fc:	1f a6       	lds	r17, 0xbf
    18fe:	18 aa       	sts	0x98, r17
    1900:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1902:	85 e0       	ldi	r24, 0x05	; 5
    1904:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	9b 83       	std	Y+3, r25	; 0x03
    190c:	8a 83       	std	Y+2, r24	; 0x02
    190e:	bf c4       	rjmp	.+2430   	; 0x228e <__stack+0x118f>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state ShowAmount */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    1910:	1b 83       	std	Y+3, r17	; 0x03
    1912:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress2 */
			/* Entry action for state 'CheckKeyPress2'. */
			handle->ifaceKEYPAD.lastkey = 0;
    1914:	18 86       	std	Y+8, r1	; 0x08
    1916:	19 86       	std	Y+9, r1	; 0x09
    1918:	1a 86       	std	Y+10, r1	; 0x0a
    191a:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2;
    191c:	a9 82       	std	Y+1, r10	; 0x01
    191e:	95 c4       	rjmp	.+2346   	; 0x224a <__stack+0x114b>
}

/* The reactions of state CheckKeyPress2. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2(SMO* handle) {
	/* The reactions of state CheckKeyPress2. */
	if (handle->iface.menuId == 0) { 
    1920:	8e a5       	lds	r24, 0x6e
    1922:	9f a5       	lds	r25, 0x6f
    1924:	a8 a9       	sts	0x48, r26
    1926:	b9 a9       	sts	0x49, r27
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	a1 05       	cpc	r26, r1
    192c:	b1 05       	cpc	r27, r1
    192e:	09 f0       	breq	.+2      	; 0x1932 <__stack+0x833>
    1930:	69 c0       	rjmp	.+210    	; 0x1a04 <__stack+0x905>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	8a 30       	cpi	r24, 0x0A	; 10
    1936:	41 f1       	breq	.+80     	; 0x1988 <__stack+0x889>
    1938:	8b 30       	cpi	r24, 0x0B	; 11
    193a:	40 f4       	brcc	.+16     	; 0x194c <__stack+0x84d>
    193c:	88 30       	cpi	r24, 0x08	; 8
    193e:	b1 f0       	breq	.+44     	; 0x196c <__stack+0x86d>
    1940:	89 30       	cpi	r24, 0x09	; 9
    1942:	d8 f4       	brcc	.+54     	; 0x197a <__stack+0x87b>
    1944:	87 30       	cpi	r24, 0x07	; 7
    1946:	09 f0       	breq	.+2      	; 0x194a <__stack+0x84b>
    1948:	41 c0       	rjmp	.+130    	; 0x19cc <__stack+0x8cd>
    194a:	09 c0       	rjmp	.+18     	; 0x195e <__stack+0x85f>
    194c:	8c 30       	cpi	r24, 0x0C	; 12
    194e:	51 f1       	breq	.+84     	; 0x19a4 <__stack+0x8a5>
    1950:	8c 30       	cpi	r24, 0x0C	; 12
    1952:	08 f1       	brcs	.+66     	; 0x1996 <__stack+0x897>
    1954:	8e 30       	cpi	r24, 0x0E	; 14
    1956:	69 f1       	breq	.+90     	; 0x19b2 <__stack+0x8b3>
    1958:	8f 30       	cpi	r24, 0x0F	; 15
    195a:	c1 f5       	brne	.+112    	; 0x19cc <__stack+0x8cd>
    195c:	31 c0       	rjmp	.+98     	; 0x19c0 <__stack+0x8c1>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    195e:	86 e1       	ldi	r24, 0x16	; 22
    1960:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	9b 83       	std	Y+3, r25	; 0x03
    1968:	8a 83       	std	Y+2, r24	; 0x02
    196a:	30 c0       	rjmp	.+96     	; 0x19cc <__stack+0x8cd>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    196c:	86 e1       	ldi	r24, 0x16	; 22
    196e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	9b 83       	std	Y+3, r25	; 0x03
    1976:	8a 83       	std	Y+2, r24	; 0x02
    1978:	29 c0       	rjmp	.+82     	; 0x19cc <__stack+0x8cd>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    197a:	86 e1       	ldi	r24, 0x16	; 22
    197c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	9b 83       	std	Y+3, r25	; 0x03
    1984:	8a 83       	std	Y+2, r24	; 0x02
    1986:	22 c0       	rjmp	.+68     	; 0x19cc <__stack+0x8cd>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1988:	86 e1       	ldi	r24, 0x16	; 22
    198a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	9b 83       	std	Y+3, r25	; 0x03
    1992:	8a 83       	std	Y+2, r24	; 0x02
    1994:	1b c0       	rjmp	.+54     	; 0x19cc <__stack+0x8cd>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1996:	86 e1       	ldi	r24, 0x16	; 22
    1998:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	9b 83       	std	Y+3, r25	; 0x03
    19a0:	8a 83       	std	Y+2, r24	; 0x02
    19a2:	14 c0       	rjmp	.+40     	; 0x19cc <__stack+0x8cd>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    19a4:	86 e1       	ldi	r24, 0x16	; 22
    19a6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	9b 83       	std	Y+3, r25	; 0x03
    19ae:	8a 83       	std	Y+2, r24	; 0x02
    19b0:	0d c0       	rjmp	.+26     	; 0x19cc <__stack+0x8cd>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    19b2:	86 e1       	ldi	r24, 0x16	; 22
    19b4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	9b 83       	std	Y+3, r25	; 0x03
    19bc:	8a 83       	std	Y+2, r24	; 0x02
    19be:	06 c0       	rjmp	.+12     	; 0x19cc <__stack+0x8cd>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    19c0:	86 e1       	ldi	r24, 0x16	; 22
    19c2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	9b 83       	std	Y+3, r25	; 0x03
    19ca:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    19cc:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    19d0:	88 e0       	ldi	r24, 0x08	; 8
    19d2:	92 e0       	ldi	r25, 0x02	; 2
    19d4:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    19d8:	86 e1       	ldi	r24, 0x16	; 22
    19da:	92 e0       	ldi	r25, 0x02	; 2
    19dc:	40 e0       	ldi	r20, 0x00	; 0
    19de:	50 e0       	ldi	r21, 0x00	; 0
    19e0:	ba 01       	movw	r22, r20
    19e2:	01 e0       	ldi	r16, 0x01	; 1
    19e4:	10 e0       	ldi	r17, 0x00	; 0
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    19ee:	1e a6       	lds	r17, 0xbe
    19f0:	1f a6       	lds	r17, 0xbf
    19f2:	18 aa       	sts	0x98, r17
    19f4:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    19f6:	85 e0       	ldi	r24, 0x05	; 5
    19f8:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	9b 83       	std	Y+3, r25	; 0x03
    1a00:	8a 83       	std	Y+2, r24	; 0x02
    1a02:	45 c4       	rjmp	.+2186   	; 0x228e <__stack+0x118f>
	}  else {
		if (handle->ifaceDISH.pos < 2 && handle->ifaceKEYPAD.lastkey == 10 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1a04:	89 a5       	lds	r24, 0x69
    1a06:	9a a5       	lds	r25, 0x6a
    1a08:	ab a5       	lds	r26, 0x6b
    1a0a:	bc a5       	lds	r27, 0x6c
    1a0c:	82 30       	cpi	r24, 0x02	; 2
    1a0e:	91 05       	cpc	r25, r1
    1a10:	a1 05       	cpc	r26, r1
    1a12:	b1 05       	cpc	r27, r1
    1a14:	0c f0       	brlt	.+2      	; 0x1a18 <__stack+0x919>
    1a16:	68 c0       	rjmp	.+208    	; 0x1ae8 <__stack+0x9e9>
    1a18:	c8 84       	ldd	r12, Y+8	; 0x08
    1a1a:	d9 84       	ldd	r13, Y+9	; 0x09
    1a1c:	ea 84       	ldd	r14, Y+10	; 0x0a
    1a1e:	fb 84       	ldd	r15, Y+11	; 0x0b
    1a20:	ea e0       	ldi	r30, 0x0A	; 10
    1a22:	ce 16       	cp	r12, r30
    1a24:	d1 04       	cpc	r13, r1
    1a26:	e1 04       	cpc	r14, r1
    1a28:	f1 04       	cpc	r15, r1
    1a2a:	61 f4       	brne	.+24     	; 0x1a44 <__stack+0x945>
    1a2c:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a2e:	22 23       	and	r18, r18
    1a30:	49 f0       	breq	.+18     	; 0x1a44 <__stack+0x945>
			/* Default exit sequence for state CheckKeyPress2 */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    1a32:	1b 83       	std	Y+3, r17	; 0x03
    1a34:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckAmount0 */
			/* Entry action for state 'CheckAmount0'. */
			handle->ifaceKEYPAD.lastkey = 0;
    1a36:	18 86       	std	Y+8, r1	; 0x08
    1a38:	19 86       	std	Y+9, r1	; 0x09
    1a3a:	1a 86       	std	Y+10, r1	; 0x0a
    1a3c:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0;
    1a3e:	fd e0       	ldi	r31, 0x0D	; 13
    1a40:	f9 83       	std	Y+1, r31	; 0x01
    1a42:	03 c4       	rjmp	.+2054   	; 0x224a <__stack+0x114b>
			handle->stateConfVectorPosition = 1;
		}  else {
			if (handle->ifaceDISH.pos < 2 && handle->ifaceKEYPAD.lastkey <= 9 && handle->ifaceKEYPAD.lastkey >= 1 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1a44:	2a e0       	ldi	r18, 0x0A	; 10
    1a46:	c2 16       	cp	r12, r18
    1a48:	d1 04       	cpc	r13, r1
    1a4a:	e1 04       	cpc	r14, r1
    1a4c:	f1 04       	cpc	r15, r1
    1a4e:	0c f0       	brlt	.+2      	; 0x1a52 <__stack+0x953>
    1a50:	4b c0       	rjmp	.+150    	; 0x1ae8 <__stack+0x9e9>
    1a52:	1c 14       	cp	r1, r12
    1a54:	1d 04       	cpc	r1, r13
    1a56:	1e 04       	cpc	r1, r14
    1a58:	1f 04       	cpc	r1, r15
    1a5a:	0c f0       	brlt	.+2      	; 0x1a5e <__stack+0x95f>
    1a5c:	45 c0       	rjmp	.+138    	; 0x1ae8 <__stack+0x9e9>
    1a5e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a60:	22 23       	and	r18, r18
    1a62:	09 f4       	brne	.+2      	; 0x1a66 <__stack+0x967>
    1a64:	41 c0       	rjmp	.+130    	; 0x1ae8 <__stack+0x9e9>
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1a66:	26 e1       	ldi	r18, 0x16	; 22
    1a68:	29 83       	std	Y+1, r18	; 0x01
				handle->stateConfVectorPosition = 1;
    1a6a:	88 24       	eor	r8, r8
    1a6c:	99 24       	eor	r9, r9
    1a6e:	83 94       	inc	r8
    1a70:	9b 82       	std	Y+3, r9	; 0x03
    1a72:	8a 82       	std	Y+2, r8	; 0x02
				/* Default enter sequence for state EnterAmount */
				/* Entry action for state 'EnterAmount'. */
				sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    1a74:	9c 01       	movw	r18, r24
    1a76:	ad 01       	movw	r20, r26
    1a78:	22 0f       	add	r18, r18
    1a7a:	33 1f       	adc	r19, r19
    1a7c:	44 1f       	adc	r20, r20
    1a7e:	55 1f       	adc	r21, r21
    1a80:	c7 01       	movw	r24, r14
    1a82:	b6 01       	movw	r22, r12
    1a84:	ee 24       	eor	r14, r14
    1a86:	ff 24       	eor	r15, r15
    1a88:	87 01       	movw	r16, r14
    1a8a:	e3 94       	inc	r14
    1a8c:	aa 24       	eor	r10, r10
    1a8e:	bb 24       	eor	r11, r11
    1a90:	65 01       	movw	r12, r10
    1a92:	a3 94       	inc	r10
    1a94:	0e 94 24 02 	call	0x448	; 0x448 <sMOIfaceLCD_writeNumberXY>
				handle->ifaceDISH.pos += 1;
    1a98:	89 a5       	lds	r24, 0x69
    1a9a:	9a a5       	lds	r25, 0x6a
    1a9c:	ab a5       	lds	r26, 0x6b
    1a9e:	bc a5       	lds	r27, 0x6c
    1aa0:	01 96       	adiw	r24, 0x01	; 1
    1aa2:	a1 1d       	adc	r26, r1
    1aa4:	b1 1d       	adc	r27, r1
    1aa6:	89 a7       	lds	r24, 0x79
    1aa8:	9a a7       	lds	r25, 0x7a
    1aaa:	ab a7       	lds	r26, 0x7b
    1aac:	bc a7       	lds	r27, 0x7c
				handle->ifaceDISH.amount = handle->ifaceDISH.amount * 10 + handle->ifaceKEYPAD.lastkey;
    1aae:	6d a1       	lds	r22, 0x4d
    1ab0:	7e a1       	lds	r23, 0x4e
    1ab2:	8f a1       	lds	r24, 0x4f
    1ab4:	98 a5       	lds	r25, 0x68
    1ab6:	2a e0       	ldi	r18, 0x0A	; 10
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 e0       	ldi	r20, 0x00	; 0
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	0e 94 cb 13 	call	0x2796	; 0x2796 <__mulsi3>
    1ac2:	ab 01       	movw	r20, r22
    1ac4:	bc 01       	movw	r22, r24
    1ac6:	88 85       	ldd	r24, Y+8	; 0x08
    1ac8:	99 85       	ldd	r25, Y+9	; 0x09
    1aca:	aa 85       	ldd	r26, Y+10	; 0x0a
    1acc:	bb 85       	ldd	r27, Y+11	; 0x0b
    1ace:	84 0f       	add	r24, r20
    1ad0:	95 1f       	adc	r25, r21
    1ad2:	a6 1f       	adc	r26, r22
    1ad4:	b7 1f       	adc	r27, r23
    1ad6:	8d a3       	lds	r24, 0x5d
    1ad8:	9e a3       	lds	r25, 0x5e
    1ada:	af a3       	lds	r26, 0x5f
    1adc:	b8 a7       	lds	r27, 0x78
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount;
    1ade:	8e e0       	ldi	r24, 0x0E	; 14
    1ae0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1ae2:	9b 82       	std	Y+3, r9	; 0x03
    1ae4:	8a 82       	std	Y+2, r8	; 0x02
    1ae6:	d3 c3       	rjmp	.+1958   	; 0x228e <__stack+0x118f>
			}  else {
				if (handle->ifaceKEYPAD.lastkey == 12 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1ae8:	88 85       	ldd	r24, Y+8	; 0x08
    1aea:	99 85       	ldd	r25, Y+9	; 0x09
    1aec:	aa 85       	ldd	r26, Y+10	; 0x0a
    1aee:	bb 85       	ldd	r27, Y+11	; 0x0b
    1af0:	8c 30       	cpi	r24, 0x0C	; 12
    1af2:	91 05       	cpc	r25, r1
    1af4:	a1 05       	cpc	r26, r1
    1af6:	b1 05       	cpc	r27, r1
    1af8:	41 f5       	brne	.+80     	; 0x1b4a <__stack+0xa4b>
    1afa:	2d 85       	ldd	r18, Y+13	; 0x0d
    1afc:	22 23       	and	r18, r18
    1afe:	29 f1       	breq	.+74     	; 0x1b4a <__stack+0xa4b>
					/* Default exit sequence for state CheckKeyPress2 */
					handle->stateConfVector[1] = SMO_last_state;
    1b00:	86 e1       	ldi	r24, 0x16	; 22
    1b02:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    1b04:	ee 24       	eor	r14, r14
    1b06:	ff 24       	eor	r15, r15
    1b08:	e3 94       	inc	r14
    1b0a:	fb 82       	std	Y+3, r15	; 0x03
    1b0c:	ea 82       	std	Y+2, r14	; 0x02
					/* Default enter sequence for state ShowAmount */
					/* Entry action for state 'ShowAmount'. */
					sMOIfaceLCD_clear();
    1b0e:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
					sMOIfaceLCD_writeString("Nhap so luong:");
    1b12:	88 e3       	ldi	r24, 0x38	; 56
    1b14:	92 e0       	ldi	r25, 0x02	; 2
    1b16:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
					sMOIfaceLCD_writeStringXY("_ _", 0, 1);
    1b1a:	87 e4       	ldi	r24, 0x47	; 71
    1b1c:	92 e0       	ldi	r25, 0x02	; 2
    1b1e:	40 e0       	ldi	r20, 0x00	; 0
    1b20:	50 e0       	ldi	r21, 0x00	; 0
    1b22:	ba 01       	movw	r22, r20
    1b24:	01 e0       	ldi	r16, 0x01	; 1
    1b26:	10 e0       	ldi	r17, 0x00	; 0
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
					handle->ifaceDISH.pos = 0;
    1b30:	19 a6       	lds	r17, 0xb9
    1b32:	1a a6       	lds	r17, 0xba
    1b34:	1b a6       	lds	r17, 0xbb
    1b36:	1c a6       	lds	r17, 0xbc
					handle->ifaceDISH.amount = 0;
    1b38:	1d a2       	lds	r17, 0x9d
    1b3a:	1e a2       	lds	r17, 0x9e
    1b3c:	1f a2       	lds	r17, 0x9f
    1b3e:	18 a6       	lds	r17, 0xb8
					handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount;
    1b40:	8b e0       	ldi	r24, 0x0B	; 11
    1b42:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    1b44:	fb 82       	std	Y+3, r15	; 0x03
    1b46:	ea 82       	std	Y+2, r14	; 0x02
    1b48:	a2 c3       	rjmp	.+1860   	; 0x228e <__stack+0x118f>
				}  else {
					if (handle->ifaceKEYPAD.lastkey == 11 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1b4a:	8b 30       	cpi	r24, 0x0B	; 11
    1b4c:	91 05       	cpc	r25, r1
    1b4e:	a1 05       	cpc	r26, r1
    1b50:	b1 05       	cpc	r27, r1
    1b52:	09 f0       	breq	.+2      	; 0x1b56 <__stack+0xa57>
    1b54:	7b c0       	rjmp	.+246    	; 0x1c4c <__stack+0xb4d>
    1b56:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b58:	22 23       	and	r18, r18
    1b5a:	09 f4       	brne	.+2      	; 0x1b5e <__stack+0xa5f>
    1b5c:	77 c0       	rjmp	.+238    	; 0x1c4c <__stack+0xb4d>
						/* Default exit sequence for state EnterData */
						/* Default exit sequence for region r1 */
						/* Handle exit of all possible states (of r1) at position 1... */
						switch(handle->stateConfVector[ 1 ]) {
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	8a 30       	cpi	r24, 0x0A	; 10
    1b62:	41 f1       	breq	.+80     	; 0x1bb4 <__stack+0xab5>
    1b64:	8b 30       	cpi	r24, 0x0B	; 11
    1b66:	40 f4       	brcc	.+16     	; 0x1b78 <__stack+0xa79>
    1b68:	88 30       	cpi	r24, 0x08	; 8
    1b6a:	b1 f0       	breq	.+44     	; 0x1b98 <__stack+0xa99>
    1b6c:	89 30       	cpi	r24, 0x09	; 9
    1b6e:	d8 f4       	brcc	.+54     	; 0x1ba6 <__stack+0xaa7>
    1b70:	87 30       	cpi	r24, 0x07	; 7
    1b72:	09 f0       	breq	.+2      	; 0x1b76 <__stack+0xa77>
    1b74:	41 c0       	rjmp	.+130    	; 0x1bf8 <__stack+0xaf9>
    1b76:	09 c0       	rjmp	.+18     	; 0x1b8a <__stack+0xa8b>
    1b78:	8c 30       	cpi	r24, 0x0C	; 12
    1b7a:	51 f1       	breq	.+84     	; 0x1bd0 <__stack+0xad1>
    1b7c:	8c 30       	cpi	r24, 0x0C	; 12
    1b7e:	08 f1       	brcs	.+66     	; 0x1bc2 <__stack+0xac3>
    1b80:	8e 30       	cpi	r24, 0x0E	; 14
    1b82:	69 f1       	breq	.+90     	; 0x1bde <__stack+0xadf>
    1b84:	8f 30       	cpi	r24, 0x0F	; 15
    1b86:	c1 f5       	brne	.+112    	; 0x1bf8 <__stack+0xaf9>
    1b88:	31 c0       	rjmp	.+98     	; 0x1bec <__stack+0xaed>
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
								/* Default exit sequence for state ShowCode */
								handle->stateConfVector[1] = SMO_last_state;
    1b8a:	86 e1       	ldi	r24, 0x16	; 22
    1b8c:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	9b 83       	std	Y+3, r25	; 0x03
    1b94:	8a 83       	std	Y+2, r24	; 0x02
    1b96:	30 c0       	rjmp	.+96     	; 0x1bf8 <__stack+0xaf9>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
								/* Default exit sequence for state EnterCode */
								handle->stateConfVector[1] = SMO_last_state;
    1b98:	86 e1       	ldi	r24, 0x16	; 22
    1b9a:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	9b 83       	std	Y+3, r25	; 0x03
    1ba2:	8a 83       	std	Y+2, r24	; 0x02
    1ba4:	29 c0       	rjmp	.+82     	; 0x1bf8 <__stack+0xaf9>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
								/* Default exit sequence for state CheckKeyPress1 */
								handle->stateConfVector[1] = SMO_last_state;
    1ba6:	86 e1       	ldi	r24, 0x16	; 22
    1ba8:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	9b 83       	std	Y+3, r25	; 0x03
    1bb0:	8a 83       	std	Y+2, r24	; 0x02
    1bb2:	22 c0       	rjmp	.+68     	; 0x1bf8 <__stack+0xaf9>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
								/* Default exit sequence for state CheckCode0 */
								handle->stateConfVector[1] = SMO_last_state;
    1bb4:	86 e1       	ldi	r24, 0x16	; 22
    1bb6:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	9b 83       	std	Y+3, r25	; 0x03
    1bbe:	8a 83       	std	Y+2, r24	; 0x02
    1bc0:	1b c0       	rjmp	.+54     	; 0x1bf8 <__stack+0xaf9>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
								/* Default exit sequence for state ShowAmount */
								handle->stateConfVector[1] = SMO_last_state;
    1bc2:	86 e1       	ldi	r24, 0x16	; 22
    1bc4:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	9b 83       	std	Y+3, r25	; 0x03
    1bcc:	8a 83       	std	Y+2, r24	; 0x02
    1bce:	14 c0       	rjmp	.+40     	; 0x1bf8 <__stack+0xaf9>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
								/* Default exit sequence for state CheckKeyPress2 */
								handle->stateConfVector[1] = SMO_last_state;
    1bd0:	86 e1       	ldi	r24, 0x16	; 22
    1bd2:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	9b 83       	std	Y+3, r25	; 0x03
    1bda:	8a 83       	std	Y+2, r24	; 0x02
    1bdc:	0d c0       	rjmp	.+26     	; 0x1bf8 <__stack+0xaf9>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
								/* Default exit sequence for state EnterAmount */
								handle->stateConfVector[1] = SMO_last_state;
    1bde:	86 e1       	ldi	r24, 0x16	; 22
    1be0:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	9b 83       	std	Y+3, r25	; 0x03
    1be8:	8a 83       	std	Y+2, r24	; 0x02
    1bea:	06 c0       	rjmp	.+12     	; 0x1bf8 <__stack+0xaf9>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
								/* Default exit sequence for final state. */
								handle->stateConfVector[1] = SMO_last_state;
    1bec:	86 e1       	ldi	r24, 0x16	; 22
    1bee:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	9b 83       	std	Y+3, r25	; 0x03
    1bf6:	8a 83       	std	Y+2, r24	; 0x02
								break;
							}
							default: break;
						}
						handle->ifaceRF.result = bool_false;
    1bf8:	1f 8a       	std	Y+23, r1	; 0x17
						handle->ifaceRF.retry = 0;
    1bfa:	18 8e       	std	Y+24, r1	; 0x18
    1bfc:	19 8e       	std	Y+25, r1	; 0x19
    1bfe:	1a 8e       	std	Y+26, r1	; 0x1a
    1c00:	1b 8e       	std	Y+27, r1	; 0x1b
						/* Default enter sequence for state SendData */
						/* Default enter sequence for region r1 */
						/* Default react sequence for initial entry  */
						/* Default enter sequence for state Send */
						/* Entry action for state 'Send'. */
						handle->ifaceRF.result = sMOIfaceRF_sendData(handle->iface.menuId, handle->iface.tableId, handle->ifaceDISH.ID, handle->ifaceDISH.amount);
    1c02:	6e a5       	lds	r22, 0x6e
    1c04:	7f a5       	lds	r23, 0x6f
    1c06:	88 a9       	sts	0x48, r24
    1c08:	99 a9       	sts	0x49, r25
    1c0a:	2a a9       	sts	0x4a, r18
    1c0c:	3b a9       	sts	0x4b, r19
    1c0e:	4c a9       	sts	0x4c, r20
    1c10:	5d a9       	sts	0x4d, r21
    1c12:	e9 a0       	lds	r30, 0x89
    1c14:	fa a0       	lds	r31, 0x8a
    1c16:	0b a1       	lds	r16, 0x4b
    1c18:	1c a1       	lds	r17, 0x4c
    1c1a:	ad a0       	lds	r26, 0x8d
    1c1c:	be a0       	lds	r27, 0x8e
    1c1e:	cf a0       	lds	r28, 0x8f
    1c20:	d8 a4       	lds	r29, 0xa8
    1c22:	0e 94 fd 02 	call	0x5fa	; 0x5fa <sMOIfaceRF_sendData>
    1c26:	8f 8b       	std	Y+23, r24	; 0x17
						handle->ifaceRF.retry += 1;
    1c28:	88 8d       	ldd	r24, Y+24	; 0x18
    1c2a:	99 8d       	ldd	r25, Y+25	; 0x19
    1c2c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1c2e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1c30:	01 96       	adiw	r24, 0x01	; 1
    1c32:	a1 1d       	adc	r26, r1
    1c34:	b1 1d       	adc	r27, r1
    1c36:	88 8f       	std	Y+24, r24	; 0x18
    1c38:	99 8f       	std	Y+25, r25	; 0x19
    1c3a:	aa 8f       	std	Y+26, r26	; 0x1a
    1c3c:	bb 8f       	std	Y+27, r27	; 0x1b
						handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_Send;
    1c3e:	83 e1       	ldi	r24, 0x13	; 19
    1c40:	89 83       	std	Y+1, r24	; 0x01
						handle->stateConfVectorPosition = 1;
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	9b 83       	std	Y+3, r25	; 0x03
    1c48:	8a 83       	std	Y+2, r24	; 0x02
    1c4a:	21 c3       	rjmp	.+1602   	; 0x228e <__stack+0x118f>
					}  else {
						if (handle->ifaceKEYPAD.lastkey == 16 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1c4c:	80 31       	cpi	r24, 0x10	; 16
    1c4e:	91 05       	cpc	r25, r1
    1c50:	a1 05       	cpc	r26, r1
    1c52:	b1 05       	cpc	r27, r1
    1c54:	09 f0       	breq	.+2      	; 0x1c58 <__stack+0xb59>
    1c56:	f9 c2       	rjmp	.+1522   	; 0x224a <__stack+0x114b>
    1c58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c5a:	88 23       	and	r24, r24
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <__stack+0xb61>
    1c5e:	f5 c2       	rjmp	.+1514   	; 0x224a <__stack+0x114b>
							/* Default exit sequence for state CheckKeyPress2 */
							handle->stateConfVector[1] = SMO_last_state;
							handle->stateConfVectorPosition = 1;
    1c60:	1b 83       	std	Y+3, r17	; 0x03
    1c62:	0a 83       	std	Y+2, r16	; 0x02
							handle->iface.menuId = 0;
    1c64:	1e a6       	lds	r17, 0xbe
    1c66:	1f a6       	lds	r17, 0xbf
    1c68:	18 aa       	sts	0x98, r17
    1c6a:	19 aa       	sts	0x99, r17
							/* Default enter sequence for state null */
							handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_;
    1c6c:	8f e0       	ldi	r24, 0x0F	; 15
    1c6e:	89 83       	std	Y+1, r24	; 0x01
    1c70:	ec c2       	rjmp	.+1496   	; 0x224a <__stack+0x114b>
}

/* The reactions of state CheckAmount0. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0(SMO* handle) {
	/* The reactions of state CheckAmount0. */
	if (handle->iface.menuId == 0) { 
    1c72:	8e a5       	lds	r24, 0x6e
    1c74:	9f a5       	lds	r25, 0x6f
    1c76:	a8 a9       	sts	0x48, r26
    1c78:	b9 a9       	sts	0x49, r27
    1c7a:	00 97       	sbiw	r24, 0x00	; 0
    1c7c:	a1 05       	cpc	r26, r1
    1c7e:	b1 05       	cpc	r27, r1
    1c80:	09 f0       	breq	.+2      	; 0x1c84 <__stack+0xb85>
    1c82:	69 c0       	rjmp	.+210    	; 0x1d56 <__stack+0xc57>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
    1c86:	8a 30       	cpi	r24, 0x0A	; 10
    1c88:	41 f1       	breq	.+80     	; 0x1cda <__stack+0xbdb>
    1c8a:	8b 30       	cpi	r24, 0x0B	; 11
    1c8c:	40 f4       	brcc	.+16     	; 0x1c9e <__stack+0xb9f>
    1c8e:	88 30       	cpi	r24, 0x08	; 8
    1c90:	b1 f0       	breq	.+44     	; 0x1cbe <__stack+0xbbf>
    1c92:	89 30       	cpi	r24, 0x09	; 9
    1c94:	d8 f4       	brcc	.+54     	; 0x1ccc <__stack+0xbcd>
    1c96:	87 30       	cpi	r24, 0x07	; 7
    1c98:	09 f0       	breq	.+2      	; 0x1c9c <__stack+0xb9d>
    1c9a:	41 c0       	rjmp	.+130    	; 0x1d1e <__stack+0xc1f>
    1c9c:	09 c0       	rjmp	.+18     	; 0x1cb0 <__stack+0xbb1>
    1c9e:	8c 30       	cpi	r24, 0x0C	; 12
    1ca0:	51 f1       	breq	.+84     	; 0x1cf6 <__stack+0xbf7>
    1ca2:	8c 30       	cpi	r24, 0x0C	; 12
    1ca4:	08 f1       	brcs	.+66     	; 0x1ce8 <__stack+0xbe9>
    1ca6:	8e 30       	cpi	r24, 0x0E	; 14
    1ca8:	69 f1       	breq	.+90     	; 0x1d04 <__stack+0xc05>
    1caa:	8f 30       	cpi	r24, 0x0F	; 15
    1cac:	c1 f5       	brne	.+112    	; 0x1d1e <__stack+0xc1f>
    1cae:	31 c0       	rjmp	.+98     	; 0x1d12 <__stack+0xc13>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1cb0:	86 e1       	ldi	r24, 0x16	; 22
    1cb2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	9b 83       	std	Y+3, r25	; 0x03
    1cba:	8a 83       	std	Y+2, r24	; 0x02
    1cbc:	30 c0       	rjmp	.+96     	; 0x1d1e <__stack+0xc1f>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1cbe:	86 e1       	ldi	r24, 0x16	; 22
    1cc0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	9b 83       	std	Y+3, r25	; 0x03
    1cc8:	8a 83       	std	Y+2, r24	; 0x02
    1cca:	29 c0       	rjmp	.+82     	; 0x1d1e <__stack+0xc1f>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1ccc:	86 e1       	ldi	r24, 0x16	; 22
    1cce:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	9b 83       	std	Y+3, r25	; 0x03
    1cd6:	8a 83       	std	Y+2, r24	; 0x02
    1cd8:	22 c0       	rjmp	.+68     	; 0x1d1e <__stack+0xc1f>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1cda:	86 e1       	ldi	r24, 0x16	; 22
    1cdc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	9b 83       	std	Y+3, r25	; 0x03
    1ce4:	8a 83       	std	Y+2, r24	; 0x02
    1ce6:	1b c0       	rjmp	.+54     	; 0x1d1e <__stack+0xc1f>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1ce8:	86 e1       	ldi	r24, 0x16	; 22
    1cea:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	9b 83       	std	Y+3, r25	; 0x03
    1cf2:	8a 83       	std	Y+2, r24	; 0x02
    1cf4:	14 c0       	rjmp	.+40     	; 0x1d1e <__stack+0xc1f>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1cf6:	86 e1       	ldi	r24, 0x16	; 22
    1cf8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	9b 83       	std	Y+3, r25	; 0x03
    1d00:	8a 83       	std	Y+2, r24	; 0x02
    1d02:	0d c0       	rjmp	.+26     	; 0x1d1e <__stack+0xc1f>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1d04:	86 e1       	ldi	r24, 0x16	; 22
    1d06:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	9b 83       	std	Y+3, r25	; 0x03
    1d0e:	8a 83       	std	Y+2, r24	; 0x02
    1d10:	06 c0       	rjmp	.+12     	; 0x1d1e <__stack+0xc1f>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1d12:	86 e1       	ldi	r24, 0x16	; 22
    1d14:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	9b 83       	std	Y+3, r25	; 0x03
    1d1c:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1d1e:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1d22:	88 e0       	ldi	r24, 0x08	; 8
    1d24:	92 e0       	ldi	r25, 0x02	; 2
    1d26:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    1d2a:	86 e1       	ldi	r24, 0x16	; 22
    1d2c:	92 e0       	ldi	r25, 0x02	; 2
    1d2e:	40 e0       	ldi	r20, 0x00	; 0
    1d30:	50 e0       	ldi	r21, 0x00	; 0
    1d32:	ba 01       	movw	r22, r20
    1d34:	01 e0       	ldi	r16, 0x01	; 1
    1d36:	10 e0       	ldi	r17, 0x00	; 0
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1d40:	1e a6       	lds	r17, 0xbe
    1d42:	1f a6       	lds	r17, 0xbf
    1d44:	18 aa       	sts	0x98, r17
    1d46:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1d48:	85 e0       	ldi	r24, 0x05	; 5
    1d4a:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	9b 83       	std	Y+3, r25	; 0x03
    1d52:	8a 83       	std	Y+2, r24	; 0x02
    1d54:	9c c2       	rjmp	.+1336   	; 0x228e <__stack+0x118f>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state CheckAmount0 */
			handle->stateConfVector[1] = SMO_last_state;
    1d56:	86 e1       	ldi	r24, 0x16	; 22
    1d58:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1d5a:	88 24       	eor	r8, r8
    1d5c:	99 24       	eor	r9, r9
    1d5e:	83 94       	inc	r8
    1d60:	9b 82       	std	Y+3, r9	; 0x03
    1d62:	8a 82       	std	Y+2, r8	; 0x02
			/* Default enter sequence for state EnterAmount */
			/* Entry action for state 'EnterAmount'. */
			sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    1d64:	c8 84       	ldd	r12, Y+8	; 0x08
    1d66:	d9 84       	ldd	r13, Y+9	; 0x09
    1d68:	ea 84       	ldd	r14, Y+10	; 0x0a
    1d6a:	fb 84       	ldd	r15, Y+11	; 0x0b
    1d6c:	89 a5       	lds	r24, 0x69
    1d6e:	9a a5       	lds	r25, 0x6a
    1d70:	ab a5       	lds	r26, 0x6b
    1d72:	bc a5       	lds	r27, 0x6c
    1d74:	9c 01       	movw	r18, r24
    1d76:	ad 01       	movw	r20, r26
    1d78:	22 0f       	add	r18, r18
    1d7a:	33 1f       	adc	r19, r19
    1d7c:	44 1f       	adc	r20, r20
    1d7e:	55 1f       	adc	r21, r21
    1d80:	c7 01       	movw	r24, r14
    1d82:	b6 01       	movw	r22, r12
    1d84:	ee 24       	eor	r14, r14
    1d86:	ff 24       	eor	r15, r15
    1d88:	87 01       	movw	r16, r14
    1d8a:	e3 94       	inc	r14
    1d8c:	aa 24       	eor	r10, r10
    1d8e:	bb 24       	eor	r11, r11
    1d90:	65 01       	movw	r12, r10
    1d92:	a3 94       	inc	r10
    1d94:	0e 94 24 02 	call	0x448	; 0x448 <sMOIfaceLCD_writeNumberXY>
			handle->ifaceDISH.pos += 1;
    1d98:	89 a5       	lds	r24, 0x69
    1d9a:	9a a5       	lds	r25, 0x6a
    1d9c:	ab a5       	lds	r26, 0x6b
    1d9e:	bc a5       	lds	r27, 0x6c
    1da0:	01 96       	adiw	r24, 0x01	; 1
    1da2:	a1 1d       	adc	r26, r1
    1da4:	b1 1d       	adc	r27, r1
    1da6:	89 a7       	lds	r24, 0x79
    1da8:	9a a7       	lds	r25, 0x7a
    1daa:	ab a7       	lds	r26, 0x7b
    1dac:	bc a7       	lds	r27, 0x7c
			handle->ifaceDISH.amount = handle->ifaceDISH.amount * 10 + handle->ifaceKEYPAD.lastkey;
    1dae:	6d a1       	lds	r22, 0x4d
    1db0:	7e a1       	lds	r23, 0x4e
    1db2:	8f a1       	lds	r24, 0x4f
    1db4:	98 a5       	lds	r25, 0x68
    1db6:	2a e0       	ldi	r18, 0x0A	; 10
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	40 e0       	ldi	r20, 0x00	; 0
    1dbc:	50 e0       	ldi	r21, 0x00	; 0
    1dbe:	0e 94 cb 13 	call	0x2796	; 0x2796 <__mulsi3>
    1dc2:	ab 01       	movw	r20, r22
    1dc4:	bc 01       	movw	r22, r24
    1dc6:	88 85       	ldd	r24, Y+8	; 0x08
    1dc8:	99 85       	ldd	r25, Y+9	; 0x09
    1dca:	aa 85       	ldd	r26, Y+10	; 0x0a
    1dcc:	bb 85       	ldd	r27, Y+11	; 0x0b
    1dce:	84 0f       	add	r24, r20
    1dd0:	95 1f       	adc	r25, r21
    1dd2:	a6 1f       	adc	r26, r22
    1dd4:	b7 1f       	adc	r27, r23
    1dd6:	8d a3       	lds	r24, 0x5d
    1dd8:	9e a3       	lds	r25, 0x5e
    1dda:	af a3       	lds	r26, 0x5f
    1ddc:	b8 a7       	lds	r27, 0x78
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount;
    1dde:	8e e0       	ldi	r24, 0x0E	; 14
    1de0:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1de2:	9b 82       	std	Y+3, r9	; 0x03
    1de4:	8a 82       	std	Y+2, r8	; 0x02
    1de6:	53 c2       	rjmp	.+1190   	; 0x228e <__stack+0x118f>
}

/* The reactions of state EnterAmount. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount(SMO* handle) {
	/* The reactions of state EnterAmount. */
	if (handle->iface.menuId == 0) { 
    1de8:	8e a5       	lds	r24, 0x6e
    1dea:	9f a5       	lds	r25, 0x6f
    1dec:	a8 a9       	sts	0x48, r26
    1dee:	b9 a9       	sts	0x49, r27
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	a1 05       	cpc	r26, r1
    1df4:	b1 05       	cpc	r27, r1
    1df6:	09 f0       	breq	.+2      	; 0x1dfa <__stack+0xcfb>
    1df8:	69 c0       	rjmp	.+210    	; 0x1ecc <__stack+0xdcd>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
    1dfc:	8a 30       	cpi	r24, 0x0A	; 10
    1dfe:	41 f1       	breq	.+80     	; 0x1e50 <__stack+0xd51>
    1e00:	8b 30       	cpi	r24, 0x0B	; 11
    1e02:	40 f4       	brcc	.+16     	; 0x1e14 <__stack+0xd15>
    1e04:	88 30       	cpi	r24, 0x08	; 8
    1e06:	b1 f0       	breq	.+44     	; 0x1e34 <__stack+0xd35>
    1e08:	89 30       	cpi	r24, 0x09	; 9
    1e0a:	d8 f4       	brcc	.+54     	; 0x1e42 <__stack+0xd43>
    1e0c:	87 30       	cpi	r24, 0x07	; 7
    1e0e:	09 f0       	breq	.+2      	; 0x1e12 <__stack+0xd13>
    1e10:	41 c0       	rjmp	.+130    	; 0x1e94 <__stack+0xd95>
    1e12:	09 c0       	rjmp	.+18     	; 0x1e26 <__stack+0xd27>
    1e14:	8c 30       	cpi	r24, 0x0C	; 12
    1e16:	51 f1       	breq	.+84     	; 0x1e6c <__stack+0xd6d>
    1e18:	8c 30       	cpi	r24, 0x0C	; 12
    1e1a:	08 f1       	brcs	.+66     	; 0x1e5e <__stack+0xd5f>
    1e1c:	8e 30       	cpi	r24, 0x0E	; 14
    1e1e:	69 f1       	breq	.+90     	; 0x1e7a <__stack+0xd7b>
    1e20:	8f 30       	cpi	r24, 0x0F	; 15
    1e22:	c1 f5       	brne	.+112    	; 0x1e94 <__stack+0xd95>
    1e24:	31 c0       	rjmp	.+98     	; 0x1e88 <__stack+0xd89>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1e26:	86 e1       	ldi	r24, 0x16	; 22
    1e28:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	9b 83       	std	Y+3, r25	; 0x03
    1e30:	8a 83       	std	Y+2, r24	; 0x02
    1e32:	30 c0       	rjmp	.+96     	; 0x1e94 <__stack+0xd95>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1e34:	86 e1       	ldi	r24, 0x16	; 22
    1e36:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	9b 83       	std	Y+3, r25	; 0x03
    1e3e:	8a 83       	std	Y+2, r24	; 0x02
    1e40:	29 c0       	rjmp	.+82     	; 0x1e94 <__stack+0xd95>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1e42:	86 e1       	ldi	r24, 0x16	; 22
    1e44:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	9b 83       	std	Y+3, r25	; 0x03
    1e4c:	8a 83       	std	Y+2, r24	; 0x02
    1e4e:	22 c0       	rjmp	.+68     	; 0x1e94 <__stack+0xd95>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1e50:	86 e1       	ldi	r24, 0x16	; 22
    1e52:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	9b 83       	std	Y+3, r25	; 0x03
    1e5a:	8a 83       	std	Y+2, r24	; 0x02
    1e5c:	1b c0       	rjmp	.+54     	; 0x1e94 <__stack+0xd95>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1e5e:	86 e1       	ldi	r24, 0x16	; 22
    1e60:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	9b 83       	std	Y+3, r25	; 0x03
    1e68:	8a 83       	std	Y+2, r24	; 0x02
    1e6a:	14 c0       	rjmp	.+40     	; 0x1e94 <__stack+0xd95>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1e6c:	86 e1       	ldi	r24, 0x16	; 22
    1e6e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	9b 83       	std	Y+3, r25	; 0x03
    1e76:	8a 83       	std	Y+2, r24	; 0x02
    1e78:	0d c0       	rjmp	.+26     	; 0x1e94 <__stack+0xd95>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1e7a:	86 e1       	ldi	r24, 0x16	; 22
    1e7c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	9b 83       	std	Y+3, r25	; 0x03
    1e84:	8a 83       	std	Y+2, r24	; 0x02
    1e86:	06 c0       	rjmp	.+12     	; 0x1e94 <__stack+0xd95>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1e88:	86 e1       	ldi	r24, 0x16	; 22
    1e8a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	9b 83       	std	Y+3, r25	; 0x03
    1e92:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1e94:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1e98:	88 e0       	ldi	r24, 0x08	; 8
    1e9a:	92 e0       	ldi	r25, 0x02	; 2
    1e9c:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    1ea0:	86 e1       	ldi	r24, 0x16	; 22
    1ea2:	92 e0       	ldi	r25, 0x02	; 2
    1ea4:	40 e0       	ldi	r20, 0x00	; 0
    1ea6:	50 e0       	ldi	r21, 0x00	; 0
    1ea8:	ba 01       	movw	r22, r20
    1eaa:	01 e0       	ldi	r16, 0x01	; 1
    1eac:	10 e0       	ldi	r17, 0x00	; 0
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1eb6:	1e a6       	lds	r17, 0xbe
    1eb8:	1f a6       	lds	r17, 0xbf
    1eba:	18 aa       	sts	0x98, r17
    1ebc:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1ebe:	85 e0       	ldi	r24, 0x05	; 5
    1ec0:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	9b 83       	std	Y+3, r25	; 0x03
    1ec8:	8a 83       	std	Y+2, r24	; 0x02
    1eca:	e1 c1       	rjmp	.+962    	; 0x228e <__stack+0x118f>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state EnterAmount */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    1ecc:	1b 83       	std	Y+3, r17	; 0x03
    1ece:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress2 */
			/* Entry action for state 'CheckKeyPress2'. */
			handle->ifaceKEYPAD.lastkey = 0;
    1ed0:	18 86       	std	Y+8, r1	; 0x08
    1ed2:	19 86       	std	Y+9, r1	; 0x09
    1ed4:	1a 86       	std	Y+10, r1	; 0x0a
    1ed6:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2;
    1ed8:	a9 82       	std	Y+1, r10	; 0x01
    1eda:	b7 c1       	rjmp	.+878    	; 0x224a <__stack+0x114b>
}

/* The reactions of state null. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1__final_0(SMO* handle) {
	/* The reactions of state null. */
	if (handle->iface.menuId == 0) { 
    1edc:	8e a5       	lds	r24, 0x6e
    1ede:	9f a5       	lds	r25, 0x6f
    1ee0:	a8 a9       	sts	0x48, r26
    1ee2:	b9 a9       	sts	0x49, r27
    1ee4:	00 97       	sbiw	r24, 0x00	; 0
    1ee6:	a1 05       	cpc	r26, r1
    1ee8:	b1 05       	cpc	r27, r1
    1eea:	09 f0       	breq	.+2      	; 0x1eee <__stack+0xdef>
    1eec:	ae c1       	rjmp	.+860    	; 0x224a <__stack+0x114b>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	8a 30       	cpi	r24, 0x0A	; 10
    1ef2:	41 f1       	breq	.+80     	; 0x1f44 <__stack+0xe45>
    1ef4:	8b 30       	cpi	r24, 0x0B	; 11
    1ef6:	40 f4       	brcc	.+16     	; 0x1f08 <__stack+0xe09>
    1ef8:	88 30       	cpi	r24, 0x08	; 8
    1efa:	b1 f0       	breq	.+44     	; 0x1f28 <__stack+0xe29>
    1efc:	89 30       	cpi	r24, 0x09	; 9
    1efe:	d8 f4       	brcc	.+54     	; 0x1f36 <__stack+0xe37>
    1f00:	87 30       	cpi	r24, 0x07	; 7
    1f02:	09 f0       	breq	.+2      	; 0x1f06 <__stack+0xe07>
    1f04:	41 c0       	rjmp	.+130    	; 0x1f88 <__stack+0xe89>
    1f06:	09 c0       	rjmp	.+18     	; 0x1f1a <__stack+0xe1b>
    1f08:	8c 30       	cpi	r24, 0x0C	; 12
    1f0a:	51 f1       	breq	.+84     	; 0x1f60 <__stack+0xe61>
    1f0c:	8c 30       	cpi	r24, 0x0C	; 12
    1f0e:	08 f1       	brcs	.+66     	; 0x1f52 <__stack+0xe53>
    1f10:	8e 30       	cpi	r24, 0x0E	; 14
    1f12:	69 f1       	breq	.+90     	; 0x1f6e <__stack+0xe6f>
    1f14:	8f 30       	cpi	r24, 0x0F	; 15
    1f16:	c1 f5       	brne	.+112    	; 0x1f88 <__stack+0xe89>
    1f18:	31 c0       	rjmp	.+98     	; 0x1f7c <__stack+0xe7d>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1f1a:	86 e1       	ldi	r24, 0x16	; 22
    1f1c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	9b 83       	std	Y+3, r25	; 0x03
    1f24:	8a 83       	std	Y+2, r24	; 0x02
    1f26:	30 c0       	rjmp	.+96     	; 0x1f88 <__stack+0xe89>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1f28:	86 e1       	ldi	r24, 0x16	; 22
    1f2a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	9b 83       	std	Y+3, r25	; 0x03
    1f32:	8a 83       	std	Y+2, r24	; 0x02
    1f34:	29 c0       	rjmp	.+82     	; 0x1f88 <__stack+0xe89>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1f36:	86 e1       	ldi	r24, 0x16	; 22
    1f38:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	9b 83       	std	Y+3, r25	; 0x03
    1f40:	8a 83       	std	Y+2, r24	; 0x02
    1f42:	22 c0       	rjmp	.+68     	; 0x1f88 <__stack+0xe89>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1f44:	86 e1       	ldi	r24, 0x16	; 22
    1f46:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	9b 83       	std	Y+3, r25	; 0x03
    1f4e:	8a 83       	std	Y+2, r24	; 0x02
    1f50:	1b c0       	rjmp	.+54     	; 0x1f88 <__stack+0xe89>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1f52:	86 e1       	ldi	r24, 0x16	; 22
    1f54:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	9b 83       	std	Y+3, r25	; 0x03
    1f5c:	8a 83       	std	Y+2, r24	; 0x02
    1f5e:	14 c0       	rjmp	.+40     	; 0x1f88 <__stack+0xe89>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1f60:	86 e1       	ldi	r24, 0x16	; 22
    1f62:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	9b 83       	std	Y+3, r25	; 0x03
    1f6a:	8a 83       	std	Y+2, r24	; 0x02
    1f6c:	0d c0       	rjmp	.+26     	; 0x1f88 <__stack+0xe89>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1f6e:	86 e1       	ldi	r24, 0x16	; 22
    1f70:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	9b 83       	std	Y+3, r25	; 0x03
    1f78:	8a 83       	std	Y+2, r24	; 0x02
    1f7a:	06 c0       	rjmp	.+12     	; 0x1f88 <__stack+0xe89>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1f7c:	86 e1       	ldi	r24, 0x16	; 22
    1f7e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	9b 83       	std	Y+3, r25	; 0x03
    1f86:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1f88:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1f8c:	88 e0       	ldi	r24, 0x08	; 8
    1f8e:	92 e0       	ldi	r25, 0x02	; 2
    1f90:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    1f94:	86 e1       	ldi	r24, 0x16	; 22
    1f96:	92 e0       	ldi	r25, 0x02	; 2
    1f98:	40 e0       	ldi	r20, 0x00	; 0
    1f9a:	50 e0       	ldi	r21, 0x00	; 0
    1f9c:	ba 01       	movw	r22, r20
    1f9e:	01 e0       	ldi	r16, 0x01	; 1
    1fa0:	10 e0       	ldi	r17, 0x00	; 0
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1faa:	1e a6       	lds	r17, 0xbe
    1fac:	1f a6       	lds	r17, 0xbf
    1fae:	18 aa       	sts	0x98, r17
    1fb0:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1fb2:	85 e0       	ldi	r24, 0x05	; 5
    1fb4:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	9b 83       	std	Y+3, r25	; 0x03
    1fbc:	8a 83       	std	Y+2, r24	; 0x02
    1fbe:	67 c1       	rjmp	.+718    	; 0x228e <__stack+0x118f>
/* The reactions of state MenuA. */
static void sMO_react_main_region_on_r1_Running_running_main_MenuA(SMO* handle) {
	/* The reactions of state MenuA. */
	if (bool_true) { 
		/* Default exit sequence for state MenuA */
		handle->stateConfVector[1] = SMO_last_state;
    1fc0:	86 e1       	ldi	r24, 0x16	; 22
    1fc2:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1fc4:	ee 24       	eor	r14, r14
    1fc6:	ff 24       	eor	r15, r15
    1fc8:	e3 94       	inc	r14
    1fca:	fb 82       	std	Y+3, r15	; 0x03
    1fcc:	ea 82       	std	Y+2, r14	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    1fce:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Nhap ma mon an:");
    1fd2:	82 e2       	ldi	r24, 0x22	; 34
    1fd4:	92 e0       	ldi	r25, 0x02	; 2
    1fd6:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    1fda:	82 e3       	ldi	r24, 0x32	; 50
    1fdc:	92 e0       	ldi	r25, 0x02	; 2
    1fde:	40 e0       	ldi	r20, 0x00	; 0
    1fe0:	50 e0       	ldi	r21, 0x00	; 0
    1fe2:	ba 01       	movw	r22, r20
    1fe4:	01 e0       	ldi	r16, 0x01	; 1
    1fe6:	10 e0       	ldi	r17, 0x00	; 0
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    1ff0:	19 a6       	lds	r17, 0xb9
    1ff2:	1a a6       	lds	r17, 0xba
    1ff4:	1b a6       	lds	r17, 0xbb
    1ff6:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    1ff8:	19 a2       	lds	r17, 0x99
    1ffa:	1a a2       	lds	r17, 0x9a
    1ffc:	1b a2       	lds	r17, 0x9b
    1ffe:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    2000:	87 e0       	ldi	r24, 0x07	; 7
    2002:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2004:	fb 82       	std	Y+3, r15	; 0x03
    2006:	ea 82       	std	Y+2, r14	; 0x02
    2008:	42 c1       	rjmp	.+644    	; 0x228e <__stack+0x118f>
}

/* The reactions of state CheckKeyPress. */
static void sMO_react_main_region_on_r1_Running_running_main_CheckKeyPress(SMO* handle) {
	/* The reactions of state CheckKeyPress. */
	if (handle->ifaceKEYPAD.lastkey == 13 && handle->ifaceKEYPAD.key_pressed_raised) { 
    200a:	88 85       	ldd	r24, Y+8	; 0x08
    200c:	99 85       	ldd	r25, Y+9	; 0x09
    200e:	aa 85       	ldd	r26, Y+10	; 0x0a
    2010:	bb 85       	ldd	r27, Y+11	; 0x0b
    2012:	8d 30       	cpi	r24, 0x0D	; 13
    2014:	91 05       	cpc	r25, r1
    2016:	a1 05       	cpc	r26, r1
    2018:	b1 05       	cpc	r27, r1
    201a:	09 f0       	breq	.+2      	; 0x201e <__stack+0xf1f>
    201c:	16 c1       	rjmp	.+556    	; 0x224a <__stack+0x114b>
    201e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2020:	88 23       	and	r24, r24
    2022:	09 f4       	brne	.+2      	; 0x2026 <__stack+0xf27>
    2024:	12 c1       	rjmp	.+548    	; 0x224a <__stack+0x114b>
		/* Default exit sequence for state CheckKeyPress */
		handle->stateConfVector[1] = SMO_last_state;
		handle->stateConfVectorPosition = 1;
    2026:	1b 83       	std	Y+3, r17	; 0x03
    2028:	0a 83       	std	Y+2, r16	; 0x02
		/* Default enter sequence for state MenuA */
		/* Entry action for state 'MenuA'. */
		handle->iface.menuId = 1;
    202a:	4e a6       	lds	r20, 0xbe
    202c:	5f a6       	lds	r21, 0xbf
    202e:	68 aa       	sts	0x98, r22
    2030:	79 aa       	sts	0x99, r23
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_MenuA;
    2032:	e0 e1       	ldi	r30, 0x10	; 16
    2034:	e9 83       	std	Y+1, r30	; 0x01
    2036:	09 c1       	rjmp	.+530    	; 0x224a <__stack+0x114b>
}

/* The reactions of state Send. */
static void sMO_react_main_region_on_r1_Running_running_main_SendData_r1_Send(SMO* handle) {
	/* The reactions of state Send. */
	if (handle->ifaceRF.result == bool_true) { 
    2038:	8f 89       	ldd	r24, Y+23	; 0x17
    203a:	88 23       	and	r24, r24
    203c:	d9 f1       	breq	.+118    	; 0x20b4 <__stack+0xfb5>
		/* Default exit sequence for state SendData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	84 31       	cpi	r24, 0x14	; 20
    2042:	59 f0       	breq	.+22     	; 0x205a <__stack+0xf5b>
    2044:	85 31       	cpi	r24, 0x15	; 21
    2046:	81 f0       	breq	.+32     	; 0x2068 <__stack+0xf69>
    2048:	83 31       	cpi	r24, 0x13	; 19
    204a:	a1 f4       	brne	.+40     	; 0x2074 <__stack+0xf75>
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    204c:	86 e1       	ldi	r24, 0x16	; 22
    204e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	9b 83       	std	Y+3, r25	; 0x03
    2056:	8a 83       	std	Y+2, r24	; 0x02
    2058:	0d c0       	rjmp	.+26     	; 0x2074 <__stack+0xf75>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    205a:	86 e1       	ldi	r24, 0x16	; 22
    205c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	9b 83       	std	Y+3, r25	; 0x03
    2064:	8a 83       	std	Y+2, r24	; 0x02
    2066:	06 c0       	rjmp	.+12     	; 0x2074 <__stack+0xf75>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2068:	86 e1       	ldi	r24, 0x16	; 22
    206a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	9b 83       	std	Y+3, r25	; 0x03
    2072:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    2074:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Nhap ma mon an:");
    2078:	82 e2       	ldi	r24, 0x22	; 34
    207a:	92 e0       	ldi	r25, 0x02	; 2
    207c:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    2080:	82 e3       	ldi	r24, 0x32	; 50
    2082:	92 e0       	ldi	r25, 0x02	; 2
    2084:	40 e0       	ldi	r20, 0x00	; 0
    2086:	50 e0       	ldi	r21, 0x00	; 0
    2088:	ba 01       	movw	r22, r20
    208a:	01 e0       	ldi	r16, 0x01	; 1
    208c:	10 e0       	ldi	r17, 0x00	; 0
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    2096:	19 a6       	lds	r17, 0xb9
    2098:	1a a6       	lds	r17, 0xba
    209a:	1b a6       	lds	r17, 0xbb
    209c:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    209e:	19 a2       	lds	r17, 0x99
    20a0:	1a a2       	lds	r17, 0x9a
    20a2:	1b a2       	lds	r17, 0x9b
    20a4:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    20a6:	87 e0       	ldi	r24, 0x07	; 7
    20a8:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	9b 83       	std	Y+3, r25	; 0x03
    20b0:	8a 83       	std	Y+2, r24	; 0x02
    20b2:	ed c0       	rjmp	.+474    	; 0x228e <__stack+0x118f>
			handle->stateConfVectorPosition = 1;
		}  else {
			if (handle->ifaceRF.result == bool_false) { 
				/* Default enter sequence for state Send */
				/* Entry action for state 'Send'. */
				handle->ifaceRF.result = sMOIfaceRF_sendData(handle->iface.menuId, handle->iface.tableId, handle->ifaceDISH.ID, handle->ifaceDISH.amount);
    20b4:	6e a5       	lds	r22, 0x6e
    20b6:	7f a5       	lds	r23, 0x6f
    20b8:	88 a9       	sts	0x48, r24
    20ba:	99 a9       	sts	0x49, r25
    20bc:	2a a9       	sts	0x4a, r18
    20be:	3b a9       	sts	0x4b, r19
    20c0:	4c a9       	sts	0x4c, r20
    20c2:	5d a9       	sts	0x4d, r21
    20c4:	e9 a0       	lds	r30, 0x89
    20c6:	fa a0       	lds	r31, 0x8a
    20c8:	0b a1       	lds	r16, 0x4b
    20ca:	1c a1       	lds	r17, 0x4c
    20cc:	ad a0       	lds	r26, 0x8d
    20ce:	be a0       	lds	r27, 0x8e
    20d0:	cf a0       	lds	r28, 0x8f
    20d2:	d8 a4       	lds	r29, 0xa8
    20d4:	0e 94 fd 02 	call	0x5fa	; 0x5fa <sMOIfaceRF_sendData>
    20d8:	8f 8b       	std	Y+23, r24	; 0x17
				handle->ifaceRF.retry += 1;
    20da:	88 8d       	ldd	r24, Y+24	; 0x18
    20dc:	99 8d       	ldd	r25, Y+25	; 0x19
    20de:	aa 8d       	ldd	r26, Y+26	; 0x1a
    20e0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    20e2:	01 96       	adiw	r24, 0x01	; 1
    20e4:	a1 1d       	adc	r26, r1
    20e6:	b1 1d       	adc	r27, r1
    20e8:	88 8f       	std	Y+24, r24	; 0x18
    20ea:	99 8f       	std	Y+25, r25	; 0x19
    20ec:	aa 8f       	std	Y+26, r26	; 0x1a
    20ee:	bb 8f       	std	Y+27, r27	; 0x1b
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_Send;
    20f0:	83 e1       	ldi	r24, 0x13	; 19
    20f2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	9b 83       	std	Y+3, r25	; 0x03
    20fa:	8a 83       	std	Y+2, r24	; 0x02
    20fc:	c8 c0       	rjmp	.+400    	; 0x228e <__stack+0x118f>
}

/* The reactions of state Check. */
static void sMO_react_main_region_on_r1_Running_running_main_SendData_r1_Check(SMO* handle) {
	/* The reactions of state Check. */
	if (handle->ifaceRF.result == bool_true) { 
    20fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2100:	88 23       	and	r24, r24
    2102:	d9 f1       	breq	.+118    	; 0x217a <__stack+0x107b>
		/* Default exit sequence for state SendData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	84 31       	cpi	r24, 0x14	; 20
    2108:	59 f0       	breq	.+22     	; 0x2120 <__stack+0x1021>
    210a:	85 31       	cpi	r24, 0x15	; 21
    210c:	81 f0       	breq	.+32     	; 0x212e <__stack+0x102f>
    210e:	83 31       	cpi	r24, 0x13	; 19
    2110:	a1 f4       	brne	.+40     	; 0x213a <__stack+0x103b>
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    2112:	86 e1       	ldi	r24, 0x16	; 22
    2114:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	9b 83       	std	Y+3, r25	; 0x03
    211c:	8a 83       	std	Y+2, r24	; 0x02
    211e:	0d c0       	rjmp	.+26     	; 0x213a <__stack+0x103b>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    2120:	86 e1       	ldi	r24, 0x16	; 22
    2122:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	9b 83       	std	Y+3, r25	; 0x03
    212a:	8a 83       	std	Y+2, r24	; 0x02
    212c:	06 c0       	rjmp	.+12     	; 0x213a <__stack+0x103b>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    212e:	86 e1       	ldi	r24, 0x16	; 22
    2130:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	9b 83       	std	Y+3, r25	; 0x03
    2138:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    213a:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Nhap ma mon an:");
    213e:	82 e2       	ldi	r24, 0x22	; 34
    2140:	92 e0       	ldi	r25, 0x02	; 2
    2142:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    2146:	82 e3       	ldi	r24, 0x32	; 50
    2148:	92 e0       	ldi	r25, 0x02	; 2
    214a:	40 e0       	ldi	r20, 0x00	; 0
    214c:	50 e0       	ldi	r21, 0x00	; 0
    214e:	ba 01       	movw	r22, r20
    2150:	01 e0       	ldi	r16, 0x01	; 1
    2152:	10 e0       	ldi	r17, 0x00	; 0
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    215c:	19 a6       	lds	r17, 0xb9
    215e:	1a a6       	lds	r17, 0xba
    2160:	1b a6       	lds	r17, 0xbb
    2162:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    2164:	19 a2       	lds	r17, 0x99
    2166:	1a a2       	lds	r17, 0x9a
    2168:	1b a2       	lds	r17, 0x9b
    216a:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    216c:	87 e0       	ldi	r24, 0x07	; 7
    216e:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	9b 83       	std	Y+3, r25	; 0x03
    2176:	8a 83       	std	Y+2, r24	; 0x02
    2178:	8a c0       	rjmp	.+276    	; 0x228e <__stack+0x118f>
	}  else {
		if (handle->ifaceRF.result == bool_false) { 
			/* Default exit sequence for state Check */
			handle->stateConfVector[1] = SMO_last_state;
    217a:	86 e1       	ldi	r24, 0x16	; 22
    217c:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    217e:	88 24       	eor	r8, r8
    2180:	99 24       	eor	r9, r9
    2182:	83 94       	inc	r8
    2184:	9b 82       	std	Y+3, r9	; 0x03
    2186:	8a 82       	std	Y+2, r8	; 0x02
			/* Default enter sequence for state Send */
			/* Entry action for state 'Send'. */
			handle->ifaceRF.result = sMOIfaceRF_sendData(handle->iface.menuId, handle->iface.tableId, handle->ifaceDISH.ID, handle->ifaceDISH.amount);
    2188:	6e a5       	lds	r22, 0x6e
    218a:	7f a5       	lds	r23, 0x6f
    218c:	88 a9       	sts	0x48, r24
    218e:	99 a9       	sts	0x49, r25
    2190:	2a a9       	sts	0x4a, r18
    2192:	3b a9       	sts	0x4b, r19
    2194:	4c a9       	sts	0x4c, r20
    2196:	5d a9       	sts	0x4d, r21
    2198:	e9 a0       	lds	r30, 0x89
    219a:	fa a0       	lds	r31, 0x8a
    219c:	0b a1       	lds	r16, 0x4b
    219e:	1c a1       	lds	r17, 0x4c
    21a0:	ad a0       	lds	r26, 0x8d
    21a2:	be a0       	lds	r27, 0x8e
    21a4:	cf a0       	lds	r28, 0x8f
    21a6:	d8 a4       	lds	r29, 0xa8
    21a8:	0e 94 fd 02 	call	0x5fa	; 0x5fa <sMOIfaceRF_sendData>
    21ac:	8f 8b       	std	Y+23, r24	; 0x17
			handle->ifaceRF.retry += 1;
    21ae:	88 8d       	ldd	r24, Y+24	; 0x18
    21b0:	99 8d       	ldd	r25, Y+25	; 0x19
    21b2:	aa 8d       	ldd	r26, Y+26	; 0x1a
    21b4:	bb 8d       	ldd	r27, Y+27	; 0x1b
    21b6:	01 96       	adiw	r24, 0x01	; 1
    21b8:	a1 1d       	adc	r26, r1
    21ba:	b1 1d       	adc	r27, r1
    21bc:	88 8f       	std	Y+24, r24	; 0x18
    21be:	99 8f       	std	Y+25, r25	; 0x19
    21c0:	aa 8f       	std	Y+26, r26	; 0x1a
    21c2:	bb 8f       	std	Y+27, r27	; 0x1b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_Send;
    21c4:	83 e1       	ldi	r24, 0x13	; 19
    21c6:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    21c8:	9b 82       	std	Y+3, r9	; 0x03
    21ca:	8a 82       	std	Y+2, r8	; 0x02
    21cc:	60 c0       	rjmp	.+192    	; 0x228e <__stack+0x118f>
}

/* The reactions of state null. */
static void sMO_react_main_region_on_r1_Running_running_main_SendData_r1__final_0(SMO* handle) {
	/* The reactions of state null. */
	if (handle->ifaceRF.result == bool_true) { 
    21ce:	8f 89       	ldd	r24, Y+23	; 0x17
    21d0:	88 23       	and	r24, r24
    21d2:	d9 f1       	breq	.+118    	; 0x224a <__stack+0x114b>
		/* Default exit sequence for state SendData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	84 31       	cpi	r24, 0x14	; 20
    21d8:	59 f0       	breq	.+22     	; 0x21f0 <__stack+0x10f1>
    21da:	85 31       	cpi	r24, 0x15	; 21
    21dc:	81 f0       	breq	.+32     	; 0x21fe <__stack+0x10ff>
    21de:	83 31       	cpi	r24, 0x13	; 19
    21e0:	a1 f4       	brne	.+40     	; 0x220a <__stack+0x110b>
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    21e2:	86 e1       	ldi	r24, 0x16	; 22
    21e4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	9b 83       	std	Y+3, r25	; 0x03
    21ec:	8a 83       	std	Y+2, r24	; 0x02
    21ee:	0d c0       	rjmp	.+26     	; 0x220a <__stack+0x110b>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    21f0:	86 e1       	ldi	r24, 0x16	; 22
    21f2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	9b 83       	std	Y+3, r25	; 0x03
    21fa:	8a 83       	std	Y+2, r24	; 0x02
    21fc:	06 c0       	rjmp	.+12     	; 0x220a <__stack+0x110b>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    21fe:	86 e1       	ldi	r24, 0x16	; 22
    2200:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	9b 83       	std	Y+3, r25	; 0x03
    2208:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    220a:	0e 94 45 02 	call	0x48a	; 0x48a <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Nhap ma mon an:");
    220e:	82 e2       	ldi	r24, 0x22	; 34
    2210:	92 e0       	ldi	r25, 0x02	; 2
    2212:	0e 94 12 02 	call	0x424	; 0x424 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    2216:	82 e3       	ldi	r24, 0x32	; 50
    2218:	92 e0       	ldi	r25, 0x02	; 2
    221a:	40 e0       	ldi	r20, 0x00	; 0
    221c:	50 e0       	ldi	r21, 0x00	; 0
    221e:	ba 01       	movw	r22, r20
    2220:	01 e0       	ldi	r16, 0x01	; 1
    2222:	10 e0       	ldi	r17, 0x00	; 0
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	0e 94 15 02 	call	0x42a	; 0x42a <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    222c:	19 a6       	lds	r17, 0xb9
    222e:	1a a6       	lds	r17, 0xba
    2230:	1b a6       	lds	r17, 0xbb
    2232:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    2234:	19 a2       	lds	r17, 0x99
    2236:	1a a2       	lds	r17, 0x9a
    2238:	1b a2       	lds	r17, 0x9b
    223a:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    223c:	87 e0       	ldi	r24, 0x07	; 7
    223e:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	9b 83       	std	Y+3, r25	; 0x03
    2246:	8a 83       	std	Y+2, r24	; 0x02
    2248:	22 c0       	rjmp	.+68     	; 0x228e <__stack+0x118f>
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
    224a:	8a 81       	ldd	r24, Y+2	; 0x02
    224c:	9b 81       	ldd	r25, Y+3	; 0x03
    224e:	01 96       	adiw	r24, 0x01	; 1
    2250:	9b 83       	std	Y+3, r25	; 0x03
    2252:	8a 83       	std	Y+2, r24	; 0x02

void sMO_runCycle(SMO* handle) {
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
    2254:	82 30       	cpi	r24, 0x02	; 2
    2256:	91 05       	cpc	r25, r1
    2258:	10 f4       	brcc	.+4      	; 0x225e <__stack+0x115f>
    225a:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <sMO_runCycle+0x64>
	}
	sMO_exitaction(handle);
}

static void clearInEvents(SMO* handle) {
	handle->ifaceKEYPAD.key_pressed_raised = bool_false;
    225e:	1d 86       	std	Y+13, r1	; 0x0d
	handle->ifaceUART.DataRecieved_raised = bool_false;
    2260:	1a 8a       	std	Y+18, r1	; 0x12
	handle->ifaceRF.DataRecieved_raised = bool_false;
    2262:	18 a2       	lds	r17, 0x98
	handle->iface.switchOff_raised = bool_false;
    2264:	1e aa       	sts	0x9e, r17
	handle->iface.switchOn_raised = bool_false;
    2266:	1f aa       	sts	0x9f, r17
			break;
		}
	}
	
	clearInEvents(handle);
}
    2268:	df 91       	pop	r29
    226a:	cf 91       	pop	r28
    226c:	1f 91       	pop	r17
    226e:	0f 91       	pop	r16
    2270:	ff 90       	pop	r15
    2272:	ef 90       	pop	r14
    2274:	df 90       	pop	r13
    2276:	cf 90       	pop	r12
    2278:	bf 90       	pop	r11
    227a:	af 90       	pop	r10
    227c:	9f 90       	pop	r9
    227e:	8f 90       	pop	r8
    2280:	7f 90       	pop	r7
    2282:	6f 90       	pop	r6
    2284:	5f 90       	pop	r5
    2286:	4f 90       	pop	r4
    2288:	3f 90       	pop	r3
    228a:	2f 90       	pop	r2
    228c:	08 95       	ret
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
    228e:	8a 81       	ldd	r24, Y+2	; 0x02
    2290:	9b 81       	ldd	r25, Y+3	; 0x03
    2292:	01 96       	adiw	r24, 0x01	; 1
    2294:	9b 83       	std	Y+3, r25	; 0x03
    2296:	8a 83       	std	Y+2, r24	; 0x02
    2298:	e2 cf       	rjmp	.-60     	; 0x225e <__stack+0x115f>
    229a:	8a 81       	ldd	r24, Y+2	; 0x02
    229c:	9b 81       	ldd	r25, Y+3	; 0x03
    229e:	01 96       	adiw	r24, 0x01	; 1
    22a0:	9b 83       	std	Y+3, r25	; 0x03
    22a2:	8a 83       	std	Y+2, r24	; 0x02
    22a4:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <sMO_runCycle+0x64>

000022a8 <sMO_raiseTimeEvent>:
	
	clearInEvents(handle);
}

void sMO_raiseTimeEvent(SMO* handle, sc_eventid evid) {
	if ( ((intptr_t)evid) >= ((intptr_t)&(handle->timeEvents))
    22a8:	c8 96       	adiw	r24, 0x38	; 56
    22aa:	68 17       	cp	r22, r24
    22ac:	79 07       	cpc	r23, r25
    22ae:	3c f0       	brlt	.+14     	; 0x22be <sMO_raiseTimeEvent+0x16>
		&&  ((intptr_t)evid) < ((intptr_t)&(handle->timeEvents)) + sizeof(SMOTimeEvents)) {
    22b0:	01 96       	adiw	r24, 0x01	; 1
    22b2:	68 17       	cp	r22, r24
    22b4:	79 07       	cpc	r23, r25
    22b6:	18 f4       	brcc	.+6      	; 0x22be <sMO_raiseTimeEvent+0x16>
		*(sc_boolean*)evid = bool_true;
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	fb 01       	movw	r30, r22
    22bc:	80 83       	st	Z, r24
    22be:	08 95       	ret

000022c0 <sMO_isActive>:
	}		
}

sc_boolean sMO_isActive(SMO* handle, SMOStates state) {
    22c0:	dc 01       	movw	r26, r24
	switch (state) {
    22c2:	e6 2f       	mov	r30, r22
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	e6 31       	cpi	r30, 0x16	; 22
    22c8:	f1 05       	cpc	r31, r1
    22ca:	08 f0       	brcs	.+2      	; 0x22ce <sMO_isActive+0xe>
    22cc:	bf c0       	rjmp	.+382    	; 0x244c <sMO_isActive+0x18c>
    22ce:	e5 5a       	subi	r30, 0xA5	; 165
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	ee 0f       	add	r30, r30
    22d4:	ff 1f       	adc	r31, r31
    22d6:	05 90       	lpm	r0, Z+
    22d8:	f4 91       	lpm	r31, Z
    22da:	e0 2d       	mov	r30, r0
    22dc:	09 94       	ijmp
		case SMO_main_region_on : 
			return (sc_boolean) (handle->stateConfVector[0] >= SMO_main_region_on
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	9c 91       	ld	r25, X
    22e2:	96 31       	cpi	r25, 0x16	; 22
    22e4:	08 f4       	brcc	.+2      	; 0x22e8 <sMO_isActive+0x28>
    22e6:	b3 c0       	rjmp	.+358    	; 0x244e <sMO_isActive+0x18e>
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	08 95       	ret
				&& handle->stateConfVector[0] <= SMO_main_region_on_r1_Running_running_main_SendData_r1__final_);
		case SMO_main_region_on_r1_Init : 
			return (sc_boolean) (handle->stateConfVector[0] == SMO_main_region_on_r1_Init
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	9c 91       	ld	r25, X
    22f0:	91 30       	cpi	r25, 0x01	; 1
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <sMO_isActive+0x36>
    22f4:	ac c0       	rjmp	.+344    	; 0x244e <sMO_isActive+0x18e>
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running : 
			return (sc_boolean) (handle->stateConfVector[0] >= SMO_main_region_on_r1_Running
    22fa:	9c 91       	ld	r25, X
    22fc:	92 50       	subi	r25, 0x02	; 2
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	94 31       	cpi	r25, 0x14	; 20
    2302:	08 f4       	brcc	.+2      	; 0x2306 <sMO_isActive+0x46>
    2304:	a4 c0       	rjmp	.+328    	; 0x244e <sMO_isActive+0x18e>
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	08 95       	ret
				&& handle->stateConfVector[0] <= SMO_main_region_on_r1_Running_running_main_SendData_r1__final_);
		case SMO_main_region_on_r1_Running_keypad_CheckKey : 
			return (sc_boolean) (handle->stateConfVector[0] == SMO_main_region_on_r1_Running_keypad_CheckKey
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	9c 91       	ld	r25, X
    230e:	93 30       	cpi	r25, 0x03	; 3
    2310:	09 f4       	brne	.+2      	; 0x2314 <sMO_isActive+0x54>
    2312:	9d c0       	rjmp	.+314    	; 0x244e <sMO_isActive+0x18e>
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_keypad_CheckKeyDown : 
			return (sc_boolean) (handle->stateConfVector[0] == SMO_main_region_on_r1_Running_keypad_CheckKeyDown
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	9c 91       	ld	r25, X
    231c:	94 30       	cpi	r25, 0x04	; 4
    231e:	09 f4       	brne	.+2      	; 0x2322 <sMO_isActive+0x62>
    2320:	96 c0       	rjmp	.+300    	; 0x244e <sMO_isActive+0x18e>
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_ShowMenu : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_ShowMenu
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	11 96       	adiw	r26, 0x01	; 1
    232a:	9c 91       	ld	r25, X
    232c:	11 97       	sbiw	r26, 0x01	; 1
    232e:	95 30       	cpi	r25, 0x05	; 5
    2330:	09 f4       	brne	.+2      	; 0x2334 <sMO_isActive+0x74>
    2332:	8d c0       	rjmp	.+282    	; 0x244e <sMO_isActive+0x18e>
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData : 
			return (sc_boolean) (handle->stateConfVector[1] >= SMO_main_region_on_r1_Running_running_main_EnterData
    2338:	11 96       	adiw	r26, 0x01	; 1
    233a:	9c 91       	ld	r25, X
    233c:	11 97       	sbiw	r26, 0x01	; 1
    233e:	96 50       	subi	r25, 0x06	; 6
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	9a 30       	cpi	r25, 0x0A	; 10
    2344:	08 f4       	brcc	.+2      	; 0x2348 <sMO_isActive+0x88>
    2346:	83 c0       	rjmp	.+262    	; 0x244e <sMO_isActive+0x18e>
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	08 95       	ret
				&& handle->stateConfVector[1] <= SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	11 96       	adiw	r26, 0x01	; 1
    2350:	9c 91       	ld	r25, X
    2352:	11 97       	sbiw	r26, 0x01	; 1
    2354:	97 30       	cpi	r25, 0x07	; 7
    2356:	09 f4       	brne	.+2      	; 0x235a <sMO_isActive+0x9a>
    2358:	7a c0       	rjmp	.+244    	; 0x244e <sMO_isActive+0x18e>
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	11 96       	adiw	r26, 0x01	; 1
    2362:	9c 91       	ld	r25, X
    2364:	11 97       	sbiw	r26, 0x01	; 1
    2366:	98 30       	cpi	r25, 0x08	; 8
    2368:	09 f4       	brne	.+2      	; 0x236c <sMO_isActive+0xac>
    236a:	71 c0       	rjmp	.+226    	; 0x244e <sMO_isActive+0x18e>
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	11 96       	adiw	r26, 0x01	; 1
    2374:	9c 91       	ld	r25, X
    2376:	11 97       	sbiw	r26, 0x01	; 1
    2378:	99 30       	cpi	r25, 0x09	; 9
    237a:	09 f4       	brne	.+2      	; 0x237e <sMO_isActive+0xbe>
    237c:	68 c0       	rjmp	.+208    	; 0x244e <sMO_isActive+0x18e>
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	11 96       	adiw	r26, 0x01	; 1
    2386:	9c 91       	ld	r25, X
    2388:	11 97       	sbiw	r26, 0x01	; 1
    238a:	9a 30       	cpi	r25, 0x0A	; 10
    238c:	09 f4       	brne	.+2      	; 0x2390 <sMO_isActive+0xd0>
    238e:	5f c0       	rjmp	.+190    	; 0x244e <sMO_isActive+0x18e>
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	11 96       	adiw	r26, 0x01	; 1
    2398:	9c 91       	ld	r25, X
    239a:	11 97       	sbiw	r26, 0x01	; 1
    239c:	9b 30       	cpi	r25, 0x0B	; 11
    239e:	09 f4       	brne	.+2      	; 0x23a2 <sMO_isActive+0xe2>
    23a0:	56 c0       	rjmp	.+172    	; 0x244e <sMO_isActive+0x18e>
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	11 96       	adiw	r26, 0x01	; 1
    23aa:	9c 91       	ld	r25, X
    23ac:	11 97       	sbiw	r26, 0x01	; 1
    23ae:	9c 30       	cpi	r25, 0x0C	; 12
    23b0:	09 f4       	brne	.+2      	; 0x23b4 <sMO_isActive+0xf4>
    23b2:	4d c0       	rjmp	.+154    	; 0x244e <sMO_isActive+0x18e>
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	11 96       	adiw	r26, 0x01	; 1
    23bc:	9c 91       	ld	r25, X
    23be:	11 97       	sbiw	r26, 0x01	; 1
    23c0:	9d 30       	cpi	r25, 0x0D	; 13
    23c2:	09 f4       	brne	.+2      	; 0x23c6 <sMO_isActive+0x106>
    23c4:	44 c0       	rjmp	.+136    	; 0x244e <sMO_isActive+0x18e>
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	11 96       	adiw	r26, 0x01	; 1
    23ce:	9c 91       	ld	r25, X
    23d0:	11 97       	sbiw	r26, 0x01	; 1
    23d2:	9e 30       	cpi	r25, 0x0E	; 14
    23d4:	e1 f1       	breq	.+120    	; 0x244e <sMO_isActive+0x18e>
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	11 96       	adiw	r26, 0x01	; 1
    23de:	9c 91       	ld	r25, X
    23e0:	11 97       	sbiw	r26, 0x01	; 1
    23e2:	9f 30       	cpi	r25, 0x0F	; 15
    23e4:	a1 f1       	breq	.+104    	; 0x244e <sMO_isActive+0x18e>
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_MenuA : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_MenuA
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	11 96       	adiw	r26, 0x01	; 1
    23ee:	9c 91       	ld	r25, X
    23f0:	11 97       	sbiw	r26, 0x01	; 1
    23f2:	90 31       	cpi	r25, 0x10	; 16
    23f4:	61 f1       	breq	.+88     	; 0x244e <sMO_isActive+0x18e>
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_CheckKeyPress : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_CheckKeyPress
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	11 96       	adiw	r26, 0x01	; 1
    23fe:	9c 91       	ld	r25, X
    2400:	11 97       	sbiw	r26, 0x01	; 1
    2402:	91 31       	cpi	r25, 0x11	; 17
    2404:	21 f1       	breq	.+72     	; 0x244e <sMO_isActive+0x18e>
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendData : 
			return (sc_boolean) (handle->stateConfVector[1] >= SMO_main_region_on_r1_Running_running_main_SendData
    240a:	11 96       	adiw	r26, 0x01	; 1
    240c:	9c 91       	ld	r25, X
    240e:	11 97       	sbiw	r26, 0x01	; 1
    2410:	92 51       	subi	r25, 0x12	; 18
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	94 30       	cpi	r25, 0x04	; 4
    2416:	d8 f0       	brcs	.+54     	; 0x244e <sMO_isActive+0x18e>
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	08 95       	ret
				&& handle->stateConfVector[1] <= SMO_main_region_on_r1_Running_running_main_SendData_r1__final_);
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendData_r1_Send
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	11 96       	adiw	r26, 0x01	; 1
    2420:	9c 91       	ld	r25, X
    2422:	11 97       	sbiw	r26, 0x01	; 1
    2424:	93 31       	cpi	r25, 0x13	; 19
    2426:	99 f0       	breq	.+38     	; 0x244e <sMO_isActive+0x18e>
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendData_r1_Check
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	11 96       	adiw	r26, 0x01	; 1
    2430:	9c 91       	ld	r25, X
    2432:	11 97       	sbiw	r26, 0x01	; 1
    2434:	94 31       	cpi	r25, 0x14	; 20
    2436:	59 f0       	breq	.+22     	; 0x244e <sMO_isActive+0x18e>
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendData_r1__final_
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	11 96       	adiw	r26, 0x01	; 1
    2440:	9c 91       	ld	r25, X
    2442:	11 97       	sbiw	r26, 0x01	; 1
    2444:	95 31       	cpi	r25, 0x15	; 21
    2446:	19 f0       	breq	.+6      	; 0x244e <sMO_isActive+0x18e>
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	08 95       	ret
			);
		default: return bool_false;
    244c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    244e:	08 95       	ret

00002450 <sMOIfaceKEYPAD_raise_key_pressed>:



void sMOIfaceKEYPAD_raise_key_pressed(SMO* handle) {
	handle->ifaceKEYPAD.key_pressed_raised = bool_true;
    2450:	21 e0       	ldi	r18, 0x01	; 1
    2452:	fc 01       	movw	r30, r24
    2454:	25 87       	std	Z+13, r18	; 0x0d
}
    2456:	08 95       	ret

00002458 <sMOIfaceKEYPAD_get_key>:


sc_integer sMOIfaceKEYPAD_get_key(SMO* handle) {
    2458:	fc 01       	movw	r30, r24
	return handle->ifaceKEYPAD.key;
    245a:	64 81       	ldd	r22, Z+4	; 0x04
    245c:	75 81       	ldd	r23, Z+5	; 0x05
}
    245e:	86 81       	ldd	r24, Z+6	; 0x06
    2460:	97 81       	ldd	r25, Z+7	; 0x07
    2462:	08 95       	ret

00002464 <sMOIfaceKEYPAD_set_key>:
void sMOIfaceKEYPAD_set_key(SMO* handle, sc_integer value) {
	handle->ifaceKEYPAD.key = value;
    2464:	fc 01       	movw	r30, r24
    2466:	44 83       	std	Z+4, r20	; 0x04
    2468:	55 83       	std	Z+5, r21	; 0x05
    246a:	66 83       	std	Z+6, r22	; 0x06
    246c:	77 83       	std	Z+7, r23	; 0x07
}
    246e:	08 95       	ret

00002470 <sMOIfaceKEYPAD_get_lastkey>:
sc_integer sMOIfaceKEYPAD_get_lastkey(SMO* handle) {
    2470:	fc 01       	movw	r30, r24
	return handle->ifaceKEYPAD.lastkey;
    2472:	60 85       	ldd	r22, Z+8	; 0x08
    2474:	71 85       	ldd	r23, Z+9	; 0x09
}
    2476:	82 85       	ldd	r24, Z+10	; 0x0a
    2478:	93 85       	ldd	r25, Z+11	; 0x0b
    247a:	08 95       	ret

0000247c <sMOIfaceKEYPAD_set_lastkey>:
void sMOIfaceKEYPAD_set_lastkey(SMO* handle, sc_integer value) {
	handle->ifaceKEYPAD.lastkey = value;
    247c:	fc 01       	movw	r30, r24
    247e:	40 87       	std	Z+8, r20	; 0x08
    2480:	51 87       	std	Z+9, r21	; 0x09
    2482:	62 87       	std	Z+10, r22	; 0x0a
    2484:	73 87       	std	Z+11, r23	; 0x0b
}
    2486:	08 95       	ret

00002488 <sMOIfaceKEYPAD_get_key_down>:
sc_boolean sMOIfaceKEYPAD_get_key_down(SMO* handle) {
	return handle->ifaceKEYPAD.key_down;
}
    2488:	fc 01       	movw	r30, r24
    248a:	84 85       	ldd	r24, Z+12	; 0x0c
    248c:	08 95       	ret

0000248e <sMOIfaceKEYPAD_set_key_down>:
void sMOIfaceKEYPAD_set_key_down(SMO* handle, sc_boolean value) {
	handle->ifaceKEYPAD.key_down = value;
    248e:	fc 01       	movw	r30, r24
    2490:	64 87       	std	Z+12, r22	; 0x0c
}
    2492:	08 95       	ret

00002494 <sMOIfaceUART_raise_dataRecieved>:
void sMOIfaceUART_raise_dataRecieved(SMO* handle) {
	handle->ifaceUART.DataRecieved_raised = bool_true;
    2494:	21 e0       	ldi	r18, 0x01	; 1
    2496:	fc 01       	movw	r30, r24
    2498:	22 8b       	std	Z+18, r18	; 0x12
}
    249a:	08 95       	ret

0000249c <sMOIfaceUART_get_data>:


sc_string sMOIfaceUART_get_data(SMO* handle) {
    249c:	fc 01       	movw	r30, r24
	return handle->ifaceUART.data;
}
    249e:	86 85       	ldd	r24, Z+14	; 0x0e
    24a0:	97 85       	ldd	r25, Z+15	; 0x0f
    24a2:	08 95       	ret

000024a4 <sMOIfaceUART_set_data>:
void sMOIfaceUART_set_data(SMO* handle, sc_string value) {
	handle->ifaceUART.data = value;
    24a4:	fc 01       	movw	r30, r24
    24a6:	77 87       	std	Z+15, r23	; 0x0f
    24a8:	66 87       	std	Z+14, r22	; 0x0e
}
    24aa:	08 95       	ret

000024ac <sMOIfaceUART_get_lastdata>:
sc_string sMOIfaceUART_get_lastdata(SMO* handle) {
    24ac:	fc 01       	movw	r30, r24
	return handle->ifaceUART.lastdata;
}
    24ae:	80 89       	ldd	r24, Z+16	; 0x10
    24b0:	91 89       	ldd	r25, Z+17	; 0x11
    24b2:	08 95       	ret

000024b4 <sMOIfaceUART_set_lastdata>:
void sMOIfaceUART_set_lastdata(SMO* handle, sc_string value) {
	handle->ifaceUART.lastdata = value;
    24b4:	fc 01       	movw	r30, r24
    24b6:	71 8b       	std	Z+17, r23	; 0x11
    24b8:	60 8b       	std	Z+16, r22	; 0x10
}
    24ba:	08 95       	ret

000024bc <sMOIfaceRF_raise_dataRecieved>:
void sMOIfaceRF_raise_dataRecieved(SMO* handle) {
	handle->ifaceRF.DataRecieved_raised = bool_true;
    24bc:	21 e0       	ldi	r18, 0x01	; 1
    24be:	fc 01       	movw	r30, r24
    24c0:	20 a3       	lds	r18, 0x50
}
    24c2:	08 95       	ret

000024c4 <sMOIfaceRF_get_data>:


sc_string sMOIfaceRF_get_data(SMO* handle) {
    24c4:	fc 01       	movw	r30, r24
	return handle->ifaceRF.data;
}
    24c6:	83 89       	ldd	r24, Z+19	; 0x13
    24c8:	94 89       	ldd	r25, Z+20	; 0x14
    24ca:	08 95       	ret

000024cc <sMOIfaceRF_set_data>:
void sMOIfaceRF_set_data(SMO* handle, sc_string value) {
	handle->ifaceRF.data = value;
    24cc:	fc 01       	movw	r30, r24
    24ce:	74 8b       	std	Z+20, r23	; 0x14
    24d0:	63 8b       	std	Z+19, r22	; 0x13
}
    24d2:	08 95       	ret

000024d4 <sMOIfaceRF_get_lastdata>:
sc_string sMOIfaceRF_get_lastdata(SMO* handle) {
    24d4:	fc 01       	movw	r30, r24
	return handle->ifaceRF.lastdata;
}
    24d6:	85 89       	ldd	r24, Z+21	; 0x15
    24d8:	96 89       	ldd	r25, Z+22	; 0x16
    24da:	08 95       	ret

000024dc <sMOIfaceRF_set_lastdata>:
void sMOIfaceRF_set_lastdata(SMO* handle, sc_string value) {
	handle->ifaceRF.lastdata = value;
    24dc:	fc 01       	movw	r30, r24
    24de:	76 8b       	std	Z+22, r23	; 0x16
    24e0:	65 8b       	std	Z+21, r22	; 0x15
}
    24e2:	08 95       	ret

000024e4 <sMOIfaceRF_get_result>:
sc_boolean sMOIfaceRF_get_result(SMO* handle) {
	return handle->ifaceRF.result;
}
    24e4:	fc 01       	movw	r30, r24
    24e6:	87 89       	ldd	r24, Z+23	; 0x17
    24e8:	08 95       	ret

000024ea <sMOIfaceRF_set_result>:
void sMOIfaceRF_set_result(SMO* handle, sc_boolean value) {
	handle->ifaceRF.result = value;
    24ea:	fc 01       	movw	r30, r24
    24ec:	67 8b       	std	Z+23, r22	; 0x17
}
    24ee:	08 95       	ret

000024f0 <sMOIfaceRF_get_retry>:
sc_integer sMOIfaceRF_get_retry(SMO* handle) {
    24f0:	fc 01       	movw	r30, r24
	return handle->ifaceRF.retry;
    24f2:	60 8d       	ldd	r22, Z+24	; 0x18
    24f4:	71 8d       	ldd	r23, Z+25	; 0x19
}
    24f6:	82 8d       	ldd	r24, Z+26	; 0x1a
    24f8:	93 8d       	ldd	r25, Z+27	; 0x1b
    24fa:	08 95       	ret

000024fc <sMOIfaceRF_set_retry>:
void sMOIfaceRF_set_retry(SMO* handle, sc_integer value) {
	handle->ifaceRF.retry = value;
    24fc:	fc 01       	movw	r30, r24
    24fe:	40 8f       	std	Z+24, r20	; 0x18
    2500:	51 8f       	std	Z+25, r21	; 0x19
    2502:	62 8f       	std	Z+26, r22	; 0x1a
    2504:	73 8f       	std	Z+27, r23	; 0x1b
}
    2506:	08 95       	ret

00002508 <sMOIfaceRF_get_iD>:
sc_integer sMOIfaceRF_get_iD(SMO* handle) {
    2508:	fc 01       	movw	r30, r24
	return handle->ifaceRF.ID;
    250a:	64 8d       	ldd	r22, Z+28	; 0x1c
    250c:	75 8d       	ldd	r23, Z+29	; 0x1d
}
    250e:	86 8d       	ldd	r24, Z+30	; 0x1e
    2510:	97 8d       	ldd	r25, Z+31	; 0x1f
    2512:	08 95       	ret

00002514 <sMOIfaceRF_set_iD>:
void sMOIfaceRF_set_iD(SMO* handle, sc_integer value) {
	handle->ifaceRF.ID = value;
    2514:	fc 01       	movw	r30, r24
    2516:	44 8f       	std	Z+28, r20	; 0x1c
    2518:	55 8f       	std	Z+29, r21	; 0x1d
    251a:	66 8f       	std	Z+30, r22	; 0x1e
    251c:	77 8f       	std	Z+31, r23	; 0x1f
}
    251e:	08 95       	ret

00002520 <sMOIfaceDISH_get_iD>:


sc_integer sMOIfaceDISH_get_iD(SMO* handle) {
    2520:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.ID;
    2522:	61 a1       	lds	r22, 0x41
    2524:	72 a1       	lds	r23, 0x42
}
    2526:	83 a1       	lds	r24, 0x43
    2528:	94 a1       	lds	r25, 0x44
    252a:	08 95       	ret

0000252c <sMOIfaceDISH_set_iD>:
void sMOIfaceDISH_set_iD(SMO* handle, sc_integer value) {
	handle->ifaceDISH.ID = value;
    252c:	fc 01       	movw	r30, r24
    252e:	41 a3       	lds	r20, 0x51
    2530:	52 a3       	lds	r21, 0x52
    2532:	63 a3       	lds	r22, 0x53
    2534:	74 a3       	lds	r23, 0x54
}
    2536:	08 95       	ret

00002538 <sMOIfaceDISH_get_amount>:
sc_integer sMOIfaceDISH_get_amount(SMO* handle) {
    2538:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.amount;
    253a:	65 a1       	lds	r22, 0x45
    253c:	76 a1       	lds	r23, 0x46
}
    253e:	87 a1       	lds	r24, 0x47
    2540:	90 a5       	lds	r25, 0x60
    2542:	08 95       	ret

00002544 <sMOIfaceDISH_set_amount>:
void sMOIfaceDISH_set_amount(SMO* handle, sc_integer value) {
	handle->ifaceDISH.amount = value;
    2544:	fc 01       	movw	r30, r24
    2546:	45 a3       	lds	r20, 0x55
    2548:	56 a3       	lds	r21, 0x56
    254a:	67 a3       	lds	r22, 0x57
    254c:	70 a7       	lds	r23, 0x70
}
    254e:	08 95       	ret

00002550 <sMOIfaceDISH_get_pos>:
sc_integer sMOIfaceDISH_get_pos(SMO* handle) {
    2550:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.pos;
    2552:	61 a5       	lds	r22, 0x61
    2554:	72 a5       	lds	r23, 0x62
}
    2556:	83 a5       	lds	r24, 0x63
    2558:	94 a5       	lds	r25, 0x64
    255a:	08 95       	ret

0000255c <sMOIfaceDISH_set_pos>:
void sMOIfaceDISH_set_pos(SMO* handle, sc_integer value) {
	handle->ifaceDISH.pos = value;
    255c:	fc 01       	movw	r30, r24
    255e:	41 a7       	lds	r20, 0x71
    2560:	52 a7       	lds	r21, 0x72
    2562:	63 a7       	lds	r22, 0x73
    2564:	74 a7       	lds	r23, 0x74
}
    2566:	08 95       	ret

00002568 <sMOIface_raise_switchOff>:
void sMOIface_raise_switchOff(SMO* handle) {
	handle->iface.switchOff_raised = bool_true;
    2568:	21 e0       	ldi	r18, 0x01	; 1
    256a:	fc 01       	movw	r30, r24
    256c:	26 ab       	sts	0x56, r18
}
    256e:	08 95       	ret

00002570 <sMOIface_raise_switchOn>:
void sMOIface_raise_switchOn(SMO* handle) {
	handle->iface.switchOn_raised = bool_true;
    2570:	21 e0       	ldi	r18, 0x01	; 1
    2572:	fc 01       	movw	r30, r24
    2574:	27 ab       	sts	0x57, r18
}
    2576:	08 95       	ret

00002578 <sMOIface_get_lightOn>:


sc_boolean sMOIface_get_lightOn(SMO* handle) {
	return handle->iface.lightOn;
}
    2578:	fc 01       	movw	r30, r24
    257a:	85 a5       	lds	r24, 0x65
    257c:	08 95       	ret

0000257e <sMOIface_set_lightOn>:
void sMOIface_set_lightOn(SMO* handle, sc_boolean value) {
	handle->iface.lightOn = value;
    257e:	fc 01       	movw	r30, r24
    2580:	65 a7       	lds	r22, 0x75
}
    2582:	08 95       	ret

00002584 <sMOIface_get_menuId>:
sc_integer sMOIface_get_menuId(SMO* handle) {
    2584:	fc 01       	movw	r30, r24
	return handle->iface.menuId;
    2586:	66 a5       	lds	r22, 0x66
    2588:	77 a5       	lds	r23, 0x67
}
    258a:	80 a9       	sts	0x40, r24
    258c:	91 a9       	sts	0x41, r25
    258e:	08 95       	ret

00002590 <sMOIface_set_menuId>:
void sMOIface_set_menuId(SMO* handle, sc_integer value) {
	handle->iface.menuId = value;
    2590:	fc 01       	movw	r30, r24
    2592:	46 a7       	lds	r20, 0x76
    2594:	57 a7       	lds	r21, 0x77
    2596:	60 ab       	sts	0x50, r22
    2598:	71 ab       	sts	0x51, r23
}
    259a:	08 95       	ret

0000259c <sMOIface_get_tableId>:
sc_integer sMOIface_get_tableId(SMO* handle) {
    259c:	fc 01       	movw	r30, r24
	return handle->iface.tableId;
    259e:	62 a9       	sts	0x42, r22
    25a0:	73 a9       	sts	0x43, r23
}
    25a2:	84 a9       	sts	0x44, r24
    25a4:	95 a9       	sts	0x45, r25
    25a6:	08 95       	ret

000025a8 <sMOIface_set_tableId>:
void sMOIface_set_tableId(SMO* handle, sc_integer value) {
	handle->iface.tableId = value;
    25a8:	fc 01       	movw	r30, r24
    25aa:	42 ab       	sts	0x52, r20
    25ac:	53 ab       	sts	0x53, r21
    25ae:	64 ab       	sts	0x54, r22
    25b0:	75 ab       	sts	0x55, r23
}
    25b2:	08 95       	ret

000025b4 <spi_init>:

/*
 * spi initialize
 */
void spi_init() {
    SPI_DDR &= ~((1<<SPI_MOSI) | (1<<SPI_MISO) | (1<<SPI_SS) | (1<<SPI_SCK)); //input
    25b4:	87 b3       	in	r24, 0x17	; 23
    25b6:	80 7f       	andi	r24, 0xF0	; 240
    25b8:	87 bb       	out	0x17, r24	; 23
    SPI_DDR |= ((1<<SPI_MOSI) | (1<<SPI_SS) | (1<<SPI_SCK)); //output
    25ba:	87 b3       	in	r24, 0x17	; 23
    25bc:	87 60       	ori	r24, 0x07	; 7
    25be:	87 bb       	out	0x17, r24	; 23

    SPCR = ((1<<SPE)|               // SPI Enable
    25c0:	81 e5       	ldi	r24, 0x51	; 81
    25c2:	8d b9       	out	0x0d, r24	; 13
            (1<<MSTR)|              // Master/Slave select
            (0<<SPR1)|(1<<SPR0)|    // SPI Clock Rate
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR = (1<<SPI2X); // Double SPI Speed Bit
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	8e b9       	out	0x0e, r24	; 14
}
    25c8:	08 95       	ret

000025ca <spi_writereadbyte>:

/*
 * spi write one byte and read it back
 */
uint8_t spi_writereadbyte(uint8_t data) {
    SPDR = data;
    25ca:	8f b9       	out	0x0f, r24	; 15
    while((SPSR & (1<<SPIF)) == 0);
    25cc:	77 9b       	sbis	0x0e, 7	; 14
    25ce:	fe cf       	rjmp	.-4      	; 0x25cc <spi_writereadbyte+0x2>
    return SPDR;
    25d0:	8f b1       	in	r24, 0x0f	; 15
}
    25d2:	08 95       	ret

000025d4 <TimerInit>:

TimeEvent tmrEvent[10];
int tmrCount=0;

void TimerInit() {
	TCCR0 = 0b011; //CS02=0, CS01=1, CS00=0, chon Prescaler=64
    25d4:	83 e0       	ldi	r24, 0x03	; 3
    25d6:	83 bf       	out	0x33, r24	; 51
	//Xung chip la 8MHZ -> 1 xung mat 1us/8 = 0.125 us
	//Prescaler=64, kich 256 lan moi tang 1 lan trong bo dem Timer-> Ton 8us
	//Vay, de Timer ngat moi 1ms, ta can: 1000/8=125 lan dem.
	//Ma Timer ngat khi bo dem toi 255, ta can set gia tri ban dau cho bo dem la: 255-125+1=131
	TCNT0=131;
    25d8:	83 e8       	ldi	r24, 0x83	; 131
    25da:	82 bf       	out	0x32, r24	; 50
	TIMSK=(1<<TOIE0); //Cho phep ngat khi cho tran o T/C0
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	87 bf       	out	0x37, r24	; 55
	tmrCount=0;
    25e0:	10 92 53 02 	sts	0x0253, r1
    25e4:	10 92 52 02 	sts	0x0252, r1
	sei();
    25e8:	78 94       	sei
}
    25ea:	08 95       	ret

000025ec <TimerSet>:

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
    25ec:	cf 92       	push	r12
    25ee:	df 92       	push	r13
    25f0:	ef 92       	push	r14
    25f2:	ff 92       	push	r15
    25f4:	cf 93       	push	r28
    25f6:	df 93       	push	r29
    25f8:	ec 01       	movw	r28, r24
    25fa:	6a 01       	movw	r12, r20
    25fc:	7b 01       	movw	r14, r22
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
    25fe:	40 91 52 02 	lds	r20, 0x0252
    2602:	50 91 53 02 	lds	r21, 0x0253
    2606:	14 16       	cp	r1, r20
    2608:	15 06       	cpc	r1, r21
    260a:	e4 f4       	brge	.+56     	; 0x2644 <TimerSet+0x58>
    260c:	e8 e6       	ldi	r30, 0x68	; 104
    260e:	f2 e0       	ldi	r31, 0x02	; 2
    2610:	df 01       	movw	r26, r30
    2612:	16 96       	adiw	r26, 0x06	; 6
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
	sei();
}

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
    2618:	70 e0       	ldi	r23, 0x00	; 0
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
			check=true;
			tmrEvent[i].count=0;
			tmrEvent[i].max=max;
			tmrEvent[i].enabled=true;
    261a:	61 e0       	ldi	r22, 0x01	; 1

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
    261c:	80 81       	ld	r24, Z
    261e:	91 81       	ldd	r25, Z+1	; 0x01
    2620:	8c 17       	cp	r24, r28
    2622:	9d 07       	cpc	r25, r29
    2624:	31 f4       	brne	.+12     	; 0x2632 <TimerSet+0x46>
			check=true;
			tmrEvent[i].count=0;
    2626:	13 82       	std	Z+3, r1	; 0x03
    2628:	12 82       	std	Z+2, r1	; 0x02
			tmrEvent[i].max=max;
    262a:	d5 82       	std	Z+5, r13	; 0x05
    262c:	c4 82       	std	Z+4, r12	; 0x04
			tmrEvent[i].enabled=true;
    262e:	6c 93       	st	X, r22
//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
			check=true;
    2630:	76 2f       	mov	r23, r22
}

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
    2632:	2f 5f       	subi	r18, 0xFF	; 255
    2634:	3f 4f       	sbci	r19, 0xFF	; 255
    2636:	37 96       	adiw	r30, 0x07	; 7
    2638:	17 96       	adiw	r26, 0x07	; 7
    263a:	24 17       	cp	r18, r20
    263c:	35 07       	cpc	r19, r21
    263e:	74 f3       	brlt	.-36     	; 0x261c <TimerSet+0x30>
			tmrEvent[i].count=0;
			tmrEvent[i].max=max;
			tmrEvent[i].enabled=true;
		}
	}
	if (!check) {
    2640:	77 23       	and	r23, r23
    2642:	c9 f4       	brne	.+50     	; 0x2676 <TimerSet+0x8a>
		tmrEvent[tmrCount].EventId=evenId;
    2644:	fa 01       	movw	r30, r20
    2646:	ee 0f       	add	r30, r30
    2648:	ff 1f       	adc	r31, r31
    264a:	ee 0f       	add	r30, r30
    264c:	ff 1f       	adc	r31, r31
    264e:	ee 0f       	add	r30, r30
    2650:	ff 1f       	adc	r31, r31
    2652:	e4 1b       	sub	r30, r20
    2654:	f5 0b       	sbc	r31, r21
    2656:	e8 59       	subi	r30, 0x98	; 152
    2658:	fd 4f       	sbci	r31, 0xFD	; 253
    265a:	d1 83       	std	Z+1, r29	; 0x01
    265c:	c0 83       	st	Z, r28
		tmrEvent[tmrCount].count=0;
    265e:	13 82       	std	Z+3, r1	; 0x03
    2660:	12 82       	std	Z+2, r1	; 0x02
		tmrEvent[tmrCount].max=max;
    2662:	d5 82       	std	Z+5, r13	; 0x05
    2664:	c4 82       	std	Z+4, r12	; 0x04
		tmrEvent[tmrCount].enabled=true;
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	86 83       	std	Z+6, r24	; 0x06
		tmrCount++;
    266a:	4f 5f       	subi	r20, 0xFF	; 255
    266c:	5f 4f       	sbci	r21, 0xFF	; 255
    266e:	50 93 53 02 	sts	0x0253, r21
    2672:	40 93 52 02 	sts	0x0252, r20
	}
}
    2676:	df 91       	pop	r29
    2678:	cf 91       	pop	r28
    267a:	ff 90       	pop	r15
    267c:	ef 90       	pop	r14
    267e:	df 90       	pop	r13
    2680:	cf 90       	pop	r12
    2682:	08 95       	ret

00002684 <TimerUnSet>:

void TimerUnSet(const sc_eventid evenId) {
    2684:	dc 01       	movw	r26, r24
	for (int i=0;i<tmrCount;i++) {
    2686:	60 91 52 02 	lds	r22, 0x0252
    268a:	70 91 53 02 	lds	r23, 0x0253
    268e:	16 16       	cp	r1, r22
    2690:	17 06       	cpc	r1, r23
    2692:	64 f5       	brge	.+88     	; 0x26ec <TimerUnSet+0x68>
		if (tmrEvent[i].EventId==evenId) {
    2694:	80 91 68 02 	lds	r24, 0x0268
    2698:	90 91 69 02 	lds	r25, 0x0269
    269c:	8a 17       	cp	r24, r26
    269e:	9b 07       	cpc	r25, r27
    26a0:	e1 f4       	brne	.+56     	; 0x26da <TimerUnSet+0x56>
    26a2:	0a c0       	rjmp	.+20     	; 0x26b8 <TimerUnSet+0x34>
    26a4:	29 5f       	subi	r18, 0xF9	; 249
    26a6:	3f 4f       	sbci	r19, 0xFF	; 255
		tmrEvent[tmrCount].enabled=true;
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
    26a8:	f9 01       	movw	r30, r18
    26aa:	37 97       	sbiw	r30, 0x07	; 7
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
    26ac:	80 81       	ld	r24, Z
    26ae:	91 81       	ldd	r25, Z+1	; 0x01
    26b0:	8a 17       	cp	r24, r26
    26b2:	9b 07       	cpc	r25, r27
    26b4:	b1 f4       	brne	.+44     	; 0x26e2 <TimerUnSet+0x5e>
    26b6:	02 c0       	rjmp	.+4      	; 0x26bc <TimerUnSet+0x38>
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
	for (int i=0;i<tmrCount;i++) {
    26b8:	40 e0       	ldi	r20, 0x00	; 0
    26ba:	50 e0       	ldi	r21, 0x00	; 0
		if (tmrEvent[i].EventId==evenId) {
			tmrEvent[i].count=0;
    26bc:	fa 01       	movw	r30, r20
    26be:	ee 0f       	add	r30, r30
    26c0:	ff 1f       	adc	r31, r31
    26c2:	ee 0f       	add	r30, r30
    26c4:	ff 1f       	adc	r31, r31
    26c6:	ee 0f       	add	r30, r30
    26c8:	ff 1f       	adc	r31, r31
    26ca:	e4 1b       	sub	r30, r20
    26cc:	f5 0b       	sbc	r31, r21
    26ce:	e8 59       	subi	r30, 0x98	; 152
    26d0:	fd 4f       	sbci	r31, 0xFD	; 253
    26d2:	13 82       	std	Z+3, r1	; 0x03
    26d4:	12 82       	std	Z+2, r1	; 0x02
			tmrEvent[i].enabled=false;
    26d6:	16 82       	std	Z+6, r1	; 0x06
			return;
    26d8:	08 95       	ret
    26da:	2f e6       	ldi	r18, 0x6F	; 111
    26dc:	32 e0       	ldi	r19, 0x02	; 2
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
	for (int i=0;i<tmrCount;i++) {
    26de:	40 e0       	ldi	r20, 0x00	; 0
    26e0:	50 e0       	ldi	r21, 0x00	; 0
    26e2:	4f 5f       	subi	r20, 0xFF	; 255
    26e4:	5f 4f       	sbci	r21, 0xFF	; 255
    26e6:	46 17       	cp	r20, r22
    26e8:	57 07       	cpc	r21, r23
    26ea:	e1 f6       	brne	.-72     	; 0x26a4 <TimerUnSet+0x20>
    26ec:	08 95       	ret

000026ee <TimerCheck>:
			return;
		}
	}
}

void TimerCheck(SMO* handle) {
    26ee:	cf 92       	push	r12
    26f0:	df 92       	push	r13
    26f2:	ef 92       	push	r14
    26f4:	ff 92       	push	r15
    26f6:	0f 93       	push	r16
    26f8:	1f 93       	push	r17
    26fa:	cf 93       	push	r28
    26fc:	df 93       	push	r29
    26fe:	6c 01       	movw	r12, r24
	for (int i=0;i<tmrCount;i++) {
    2700:	80 91 52 02 	lds	r24, 0x0252
    2704:	90 91 53 02 	lds	r25, 0x0253
    2708:	18 16       	cp	r1, r24
    270a:	19 06       	cpc	r1, r25
    270c:	94 f5       	brge	.+100    	; 0x2772 <TimerCheck+0x84>
    270e:	ce e6       	ldi	r28, 0x6E	; 110
    2710:	d2 e0       	ldi	r29, 0x02	; 2
    2712:	8e 01       	movw	r16, r28
    2714:	06 50       	subi	r16, 0x06	; 6
    2716:	10 40       	sbci	r17, 0x00	; 0
    2718:	ee 24       	eor	r14, r14
    271a:	ff 24       	eor	r15, r15
		if (tmrEvent[i].enabled) {
    271c:	88 81       	ld	r24, Y
    271e:	88 23       	and	r24, r24
    2720:	d9 f0       	breq	.+54     	; 0x2758 <TimerCheck+0x6a>
			tmrEvent[i].count++;
    2722:	d8 01       	movw	r26, r16
    2724:	12 96       	adiw	r26, 0x02	; 2
    2726:	8d 91       	ld	r24, X+
    2728:	9c 91       	ld	r25, X
    272a:	13 97       	sbiw	r26, 0x03	; 3
    272c:	01 96       	adiw	r24, 0x01	; 1
    272e:	13 96       	adiw	r26, 0x03	; 3
    2730:	9c 93       	st	X, r25
    2732:	8e 93       	st	-X, r24
    2734:	12 97       	sbiw	r26, 0x02	; 2
			if (tmrEvent[i].count==tmrEvent[i].max) {
    2736:	14 96       	adiw	r26, 0x04	; 4
    2738:	2d 91       	ld	r18, X+
    273a:	3c 91       	ld	r19, X
    273c:	15 97       	sbiw	r26, 0x05	; 5
    273e:	82 17       	cp	r24, r18
    2740:	93 07       	cpc	r25, r19
    2742:	51 f4       	brne	.+20     	; 0x2758 <TimerCheck+0x6a>
				tmrEvent[i].count=0;
    2744:	13 96       	adiw	r26, 0x03	; 3
    2746:	1c 92       	st	X, r1
    2748:	1e 92       	st	-X, r1
    274a:	12 97       	sbiw	r26, 0x02	; 2
				tmrEvent[i].enabled=false;
    274c:	18 82       	st	Y, r1
				sMO_raiseTimeEvent(handle,tmrEvent[i].EventId);
    274e:	6d 91       	ld	r22, X+
    2750:	7c 91       	ld	r23, X
    2752:	c6 01       	movw	r24, r12
    2754:	0e 94 54 11 	call	0x22a8	; 0x22a8 <sMO_raiseTimeEvent>
		}
	}
}

void TimerCheck(SMO* handle) {
	for (int i=0;i<tmrCount;i++) {
    2758:	08 94       	sec
    275a:	e1 1c       	adc	r14, r1
    275c:	f1 1c       	adc	r15, r1
    275e:	27 96       	adiw	r28, 0x07	; 7
    2760:	09 5f       	subi	r16, 0xF9	; 249
    2762:	1f 4f       	sbci	r17, 0xFF	; 255
    2764:	80 91 52 02 	lds	r24, 0x0252
    2768:	90 91 53 02 	lds	r25, 0x0253
    276c:	e8 16       	cp	r14, r24
    276e:	f9 06       	cpc	r15, r25
    2770:	ac f2       	brlt	.-86     	; 0x271c <TimerCheck+0x2e>
				tmrEvent[i].enabled=false;
				sMO_raiseTimeEvent(handle,tmrEvent[i].EventId);
			}
		}
	}
}
    2772:	df 91       	pop	r29
    2774:	cf 91       	pop	r28
    2776:	1f 91       	pop	r17
    2778:	0f 91       	pop	r16
    277a:	ff 90       	pop	r15
    277c:	ef 90       	pop	r14
    277e:	df 90       	pop	r13
    2780:	cf 90       	pop	r12
    2782:	08 95       	ret

00002784 <TimerClear>:

void TimerClear() {
	free(tmrEvent);
    2784:	88 e6       	ldi	r24, 0x68	; 104
    2786:	92 e0       	ldi	r25, 0x02	; 2
    2788:	0e 94 b3 14 	call	0x2966	; 0x2966 <free>
	tmrCount=0;
    278c:	10 92 53 02 	sts	0x0253, r1
    2790:	10 92 52 02 	sts	0x0252, r1
    2794:	08 95       	ret

00002796 <__mulsi3>:
    2796:	62 9f       	mul	r22, r18
    2798:	d0 01       	movw	r26, r0
    279a:	73 9f       	mul	r23, r19
    279c:	f0 01       	movw	r30, r0
    279e:	82 9f       	mul	r24, r18
    27a0:	e0 0d       	add	r30, r0
    27a2:	f1 1d       	adc	r31, r1
    27a4:	64 9f       	mul	r22, r20
    27a6:	e0 0d       	add	r30, r0
    27a8:	f1 1d       	adc	r31, r1
    27aa:	92 9f       	mul	r25, r18
    27ac:	f0 0d       	add	r31, r0
    27ae:	83 9f       	mul	r24, r19
    27b0:	f0 0d       	add	r31, r0
    27b2:	74 9f       	mul	r23, r20
    27b4:	f0 0d       	add	r31, r0
    27b6:	65 9f       	mul	r22, r21
    27b8:	f0 0d       	add	r31, r0
    27ba:	99 27       	eor	r25, r25
    27bc:	72 9f       	mul	r23, r18
    27be:	b0 0d       	add	r27, r0
    27c0:	e1 1d       	adc	r30, r1
    27c2:	f9 1f       	adc	r31, r25
    27c4:	63 9f       	mul	r22, r19
    27c6:	b0 0d       	add	r27, r0
    27c8:	e1 1d       	adc	r30, r1
    27ca:	f9 1f       	adc	r31, r25
    27cc:	bd 01       	movw	r22, r26
    27ce:	cf 01       	movw	r24, r30
    27d0:	11 24       	eor	r1, r1
    27d2:	08 95       	ret

000027d4 <__udivmodqi4>:
    27d4:	99 1b       	sub	r25, r25
    27d6:	79 e0       	ldi	r23, 0x09	; 9
    27d8:	04 c0       	rjmp	.+8      	; 0x27e2 <__udivmodqi4_ep>

000027da <__udivmodqi4_loop>:
    27da:	99 1f       	adc	r25, r25
    27dc:	96 17       	cp	r25, r22
    27de:	08 f0       	brcs	.+2      	; 0x27e2 <__udivmodqi4_ep>
    27e0:	96 1b       	sub	r25, r22

000027e2 <__udivmodqi4_ep>:
    27e2:	88 1f       	adc	r24, r24
    27e4:	7a 95       	dec	r23
    27e6:	c9 f7       	brne	.-14     	; 0x27da <__udivmodqi4_loop>
    27e8:	80 95       	com	r24
    27ea:	08 95       	ret

000027ec <__divmodhi4>:
    27ec:	97 fb       	bst	r25, 7
    27ee:	09 2e       	mov	r0, r25
    27f0:	07 26       	eor	r0, r23
    27f2:	0a d0       	rcall	.+20     	; 0x2808 <__divmodhi4_neg1>
    27f4:	77 fd       	sbrc	r23, 7
    27f6:	04 d0       	rcall	.+8      	; 0x2800 <__divmodhi4_neg2>
    27f8:	0c d0       	rcall	.+24     	; 0x2812 <__udivmodhi4>
    27fa:	06 d0       	rcall	.+12     	; 0x2808 <__divmodhi4_neg1>
    27fc:	00 20       	and	r0, r0
    27fe:	1a f4       	brpl	.+6      	; 0x2806 <__divmodhi4_exit>

00002800 <__divmodhi4_neg2>:
    2800:	70 95       	com	r23
    2802:	61 95       	neg	r22
    2804:	7f 4f       	sbci	r23, 0xFF	; 255

00002806 <__divmodhi4_exit>:
    2806:	08 95       	ret

00002808 <__divmodhi4_neg1>:
    2808:	f6 f7       	brtc	.-4      	; 0x2806 <__divmodhi4_exit>
    280a:	90 95       	com	r25
    280c:	81 95       	neg	r24
    280e:	9f 4f       	sbci	r25, 0xFF	; 255
    2810:	08 95       	ret

00002812 <__udivmodhi4>:
    2812:	aa 1b       	sub	r26, r26
    2814:	bb 1b       	sub	r27, r27
    2816:	51 e1       	ldi	r21, 0x11	; 17
    2818:	07 c0       	rjmp	.+14     	; 0x2828 <__udivmodhi4_ep>

0000281a <__udivmodhi4_loop>:
    281a:	aa 1f       	adc	r26, r26
    281c:	bb 1f       	adc	r27, r27
    281e:	a6 17       	cp	r26, r22
    2820:	b7 07       	cpc	r27, r23
    2822:	10 f0       	brcs	.+4      	; 0x2828 <__udivmodhi4_ep>
    2824:	a6 1b       	sub	r26, r22
    2826:	b7 0b       	sbc	r27, r23

00002828 <__udivmodhi4_ep>:
    2828:	88 1f       	adc	r24, r24
    282a:	99 1f       	adc	r25, r25
    282c:	5a 95       	dec	r21
    282e:	a9 f7       	brne	.-22     	; 0x281a <__udivmodhi4_loop>
    2830:	80 95       	com	r24
    2832:	90 95       	com	r25
    2834:	bc 01       	movw	r22, r24
    2836:	cd 01       	movw	r24, r26
    2838:	08 95       	ret

0000283a <malloc>:
    283a:	cf 93       	push	r28
    283c:	df 93       	push	r29
    283e:	ac 01       	movw	r20, r24
    2840:	82 30       	cpi	r24, 0x02	; 2
    2842:	91 05       	cpc	r25, r1
    2844:	10 f4       	brcc	.+4      	; 0x284a <malloc+0x10>
    2846:	42 e0       	ldi	r20, 0x02	; 2
    2848:	50 e0       	ldi	r21, 0x00	; 0
    284a:	e0 91 b0 02 	lds	r30, 0x02B0
    284e:	f0 91 b1 02 	lds	r31, 0x02B1
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	a0 e0       	ldi	r26, 0x00	; 0
    2858:	b0 e0       	ldi	r27, 0x00	; 0
    285a:	24 c0       	rjmp	.+72     	; 0x28a4 <malloc+0x6a>
    285c:	80 81       	ld	r24, Z
    285e:	91 81       	ldd	r25, Z+1	; 0x01
    2860:	84 17       	cp	r24, r20
    2862:	95 07       	cpc	r25, r21
    2864:	d0 f0       	brcs	.+52     	; 0x289a <malloc+0x60>
    2866:	84 17       	cp	r24, r20
    2868:	95 07       	cpc	r25, r21
    286a:	71 f4       	brne	.+28     	; 0x2888 <malloc+0x4e>
    286c:	82 81       	ldd	r24, Z+2	; 0x02
    286e:	93 81       	ldd	r25, Z+3	; 0x03
    2870:	10 97       	sbiw	r26, 0x00	; 0
    2872:	29 f0       	breq	.+10     	; 0x287e <malloc+0x44>
    2874:	13 96       	adiw	r26, 0x03	; 3
    2876:	9c 93       	st	X, r25
    2878:	8e 93       	st	-X, r24
    287a:	12 97       	sbiw	r26, 0x02	; 2
    287c:	2c c0       	rjmp	.+88     	; 0x28d6 <malloc+0x9c>
    287e:	90 93 b1 02 	sts	0x02B1, r25
    2882:	80 93 b0 02 	sts	0x02B0, r24
    2886:	27 c0       	rjmp	.+78     	; 0x28d6 <malloc+0x9c>
    2888:	21 15       	cp	r18, r1
    288a:	31 05       	cpc	r19, r1
    288c:	19 f0       	breq	.+6      	; 0x2894 <malloc+0x5a>
    288e:	82 17       	cp	r24, r18
    2890:	93 07       	cpc	r25, r19
    2892:	18 f4       	brcc	.+6      	; 0x289a <malloc+0x60>
    2894:	9c 01       	movw	r18, r24
    2896:	bd 01       	movw	r22, r26
    2898:	ef 01       	movw	r28, r30
    289a:	92 81       	ldd	r25, Z+2	; 0x02
    289c:	83 81       	ldd	r24, Z+3	; 0x03
    289e:	df 01       	movw	r26, r30
    28a0:	e9 2f       	mov	r30, r25
    28a2:	f8 2f       	mov	r31, r24
    28a4:	30 97       	sbiw	r30, 0x00	; 0
    28a6:	d1 f6       	brne	.-76     	; 0x285c <malloc+0x22>
    28a8:	21 15       	cp	r18, r1
    28aa:	31 05       	cpc	r19, r1
    28ac:	f9 f0       	breq	.+62     	; 0x28ec <malloc+0xb2>
    28ae:	c9 01       	movw	r24, r18
    28b0:	84 1b       	sub	r24, r20
    28b2:	95 0b       	sbc	r25, r21
    28b4:	84 30       	cpi	r24, 0x04	; 4
    28b6:	91 05       	cpc	r25, r1
    28b8:	80 f4       	brcc	.+32     	; 0x28da <malloc+0xa0>
    28ba:	8a 81       	ldd	r24, Y+2	; 0x02
    28bc:	9b 81       	ldd	r25, Y+3	; 0x03
    28be:	61 15       	cp	r22, r1
    28c0:	71 05       	cpc	r23, r1
    28c2:	21 f0       	breq	.+8      	; 0x28cc <malloc+0x92>
    28c4:	fb 01       	movw	r30, r22
    28c6:	93 83       	std	Z+3, r25	; 0x03
    28c8:	82 83       	std	Z+2, r24	; 0x02
    28ca:	04 c0       	rjmp	.+8      	; 0x28d4 <malloc+0x9a>
    28cc:	90 93 b1 02 	sts	0x02B1, r25
    28d0:	80 93 b0 02 	sts	0x02B0, r24
    28d4:	fe 01       	movw	r30, r28
    28d6:	32 96       	adiw	r30, 0x02	; 2
    28d8:	42 c0       	rjmp	.+132    	; 0x295e <malloc+0x124>
    28da:	fe 01       	movw	r30, r28
    28dc:	e8 0f       	add	r30, r24
    28de:	f9 1f       	adc	r31, r25
    28e0:	41 93       	st	Z+, r20
    28e2:	51 93       	st	Z+, r21
    28e4:	02 97       	sbiw	r24, 0x02	; 2
    28e6:	99 83       	std	Y+1, r25	; 0x01
    28e8:	88 83       	st	Y, r24
    28ea:	39 c0       	rjmp	.+114    	; 0x295e <malloc+0x124>
    28ec:	80 91 ae 02 	lds	r24, 0x02AE
    28f0:	90 91 af 02 	lds	r25, 0x02AF
    28f4:	00 97       	sbiw	r24, 0x00	; 0
    28f6:	41 f4       	brne	.+16     	; 0x2908 <malloc+0xce>
    28f8:	80 91 4d 02 	lds	r24, 0x024D
    28fc:	90 91 4e 02 	lds	r25, 0x024E
    2900:	90 93 af 02 	sts	0x02AF, r25
    2904:	80 93 ae 02 	sts	0x02AE, r24
    2908:	20 91 4b 02 	lds	r18, 0x024B
    290c:	30 91 4c 02 	lds	r19, 0x024C
    2910:	21 15       	cp	r18, r1
    2912:	31 05       	cpc	r19, r1
    2914:	41 f4       	brne	.+16     	; 0x2926 <malloc+0xec>
    2916:	2d b7       	in	r18, 0x3d	; 61
    2918:	3e b7       	in	r19, 0x3e	; 62
    291a:	80 91 4f 02 	lds	r24, 0x024F
    291e:	90 91 50 02 	lds	r25, 0x0250
    2922:	28 1b       	sub	r18, r24
    2924:	39 0b       	sbc	r19, r25
    2926:	e0 91 ae 02 	lds	r30, 0x02AE
    292a:	f0 91 af 02 	lds	r31, 0x02AF
    292e:	e2 17       	cp	r30, r18
    2930:	f3 07       	cpc	r31, r19
    2932:	98 f4       	brcc	.+38     	; 0x295a <malloc+0x120>
    2934:	2e 1b       	sub	r18, r30
    2936:	3f 0b       	sbc	r19, r31
    2938:	24 17       	cp	r18, r20
    293a:	35 07       	cpc	r19, r21
    293c:	70 f0       	brcs	.+28     	; 0x295a <malloc+0x120>
    293e:	ca 01       	movw	r24, r20
    2940:	02 96       	adiw	r24, 0x02	; 2
    2942:	28 17       	cp	r18, r24
    2944:	39 07       	cpc	r19, r25
    2946:	48 f0       	brcs	.+18     	; 0x295a <malloc+0x120>
    2948:	8e 0f       	add	r24, r30
    294a:	9f 1f       	adc	r25, r31
    294c:	90 93 af 02 	sts	0x02AF, r25
    2950:	80 93 ae 02 	sts	0x02AE, r24
    2954:	41 93       	st	Z+, r20
    2956:	51 93       	st	Z+, r21
    2958:	02 c0       	rjmp	.+4      	; 0x295e <malloc+0x124>
    295a:	e0 e0       	ldi	r30, 0x00	; 0
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	cf 01       	movw	r24, r30
    2960:	df 91       	pop	r29
    2962:	cf 91       	pop	r28
    2964:	08 95       	ret

00002966 <free>:
    2966:	0f 93       	push	r16
    2968:	1f 93       	push	r17
    296a:	cf 93       	push	r28
    296c:	df 93       	push	r29
    296e:	9c 01       	movw	r18, r24
    2970:	00 97       	sbiw	r24, 0x00	; 0
    2972:	09 f4       	brne	.+2      	; 0x2976 <free+0x10>
    2974:	8c c0       	rjmp	.+280    	; 0x2a8e <free+0x128>
    2976:	dc 01       	movw	r26, r24
    2978:	12 97       	sbiw	r26, 0x02	; 2
    297a:	13 96       	adiw	r26, 0x03	; 3
    297c:	1c 92       	st	X, r1
    297e:	1e 92       	st	-X, r1
    2980:	12 97       	sbiw	r26, 0x02	; 2
    2982:	60 91 b0 02 	lds	r22, 0x02B0
    2986:	70 91 b1 02 	lds	r23, 0x02B1
    298a:	61 15       	cp	r22, r1
    298c:	71 05       	cpc	r23, r1
    298e:	89 f4       	brne	.+34     	; 0x29b2 <free+0x4c>
    2990:	8d 91       	ld	r24, X+
    2992:	9c 91       	ld	r25, X
    2994:	11 97       	sbiw	r26, 0x01	; 1
    2996:	82 0f       	add	r24, r18
    2998:	93 1f       	adc	r25, r19
    299a:	20 91 ae 02 	lds	r18, 0x02AE
    299e:	30 91 af 02 	lds	r19, 0x02AF
    29a2:	28 17       	cp	r18, r24
    29a4:	39 07       	cpc	r19, r25
    29a6:	69 f5       	brne	.+90     	; 0x2a02 <free+0x9c>
    29a8:	b0 93 af 02 	sts	0x02AF, r27
    29ac:	a0 93 ae 02 	sts	0x02AE, r26
    29b0:	6e c0       	rjmp	.+220    	; 0x2a8e <free+0x128>
    29b2:	fb 01       	movw	r30, r22
    29b4:	40 e0       	ldi	r20, 0x00	; 0
    29b6:	50 e0       	ldi	r21, 0x00	; 0
    29b8:	01 c0       	rjmp	.+2      	; 0x29bc <free+0x56>
    29ba:	fc 01       	movw	r30, r24
    29bc:	ea 17       	cp	r30, r26
    29be:	fb 07       	cpc	r31, r27
    29c0:	30 f4       	brcc	.+12     	; 0x29ce <free+0x68>
    29c2:	82 81       	ldd	r24, Z+2	; 0x02
    29c4:	93 81       	ldd	r25, Z+3	; 0x03
    29c6:	af 01       	movw	r20, r30
    29c8:	00 97       	sbiw	r24, 0x00	; 0
    29ca:	b9 f7       	brne	.-18     	; 0x29ba <free+0x54>
    29cc:	1f c0       	rjmp	.+62     	; 0x2a0c <free+0xa6>
    29ce:	e9 01       	movw	r28, r18
    29d0:	22 97       	sbiw	r28, 0x02	; 2
    29d2:	fb 83       	std	Y+3, r31	; 0x03
    29d4:	ea 83       	std	Y+2, r30	; 0x02
    29d6:	08 81       	ld	r16, Y
    29d8:	19 81       	ldd	r17, Y+1	; 0x01
    29da:	c9 01       	movw	r24, r18
    29dc:	80 0f       	add	r24, r16
    29de:	91 1f       	adc	r25, r17
    29e0:	8e 17       	cp	r24, r30
    29e2:	9f 07       	cpc	r25, r31
    29e4:	59 f4       	brne	.+22     	; 0x29fc <free+0x96>
    29e6:	80 81       	ld	r24, Z
    29e8:	91 81       	ldd	r25, Z+1	; 0x01
    29ea:	80 0f       	add	r24, r16
    29ec:	91 1f       	adc	r25, r17
    29ee:	02 96       	adiw	r24, 0x02	; 2
    29f0:	99 83       	std	Y+1, r25	; 0x01
    29f2:	88 83       	st	Y, r24
    29f4:	82 81       	ldd	r24, Z+2	; 0x02
    29f6:	93 81       	ldd	r25, Z+3	; 0x03
    29f8:	9b 83       	std	Y+3, r25	; 0x03
    29fa:	8a 83       	std	Y+2, r24	; 0x02
    29fc:	41 15       	cp	r20, r1
    29fe:	51 05       	cpc	r21, r1
    2a00:	29 f4       	brne	.+10     	; 0x2a0c <free+0xa6>
    2a02:	b0 93 b1 02 	sts	0x02B1, r27
    2a06:	a0 93 b0 02 	sts	0x02B0, r26
    2a0a:	41 c0       	rjmp	.+130    	; 0x2a8e <free+0x128>
    2a0c:	fa 01       	movw	r30, r20
    2a0e:	b3 83       	std	Z+3, r27	; 0x03
    2a10:	a2 83       	std	Z+2, r26	; 0x02
    2a12:	c1 91       	ld	r28, Z+
    2a14:	d1 91       	ld	r29, Z+
    2a16:	ec 0f       	add	r30, r28
    2a18:	fd 1f       	adc	r31, r29
    2a1a:	ae 17       	cp	r26, r30
    2a1c:	bf 07       	cpc	r27, r31
    2a1e:	81 f4       	brne	.+32     	; 0x2a40 <free+0xda>
    2a20:	f9 01       	movw	r30, r18
    2a22:	92 91       	ld	r25, -Z
    2a24:	82 91       	ld	r24, -Z
    2a26:	8c 0f       	add	r24, r28
    2a28:	9d 1f       	adc	r25, r29
    2a2a:	02 96       	adiw	r24, 0x02	; 2
    2a2c:	da 01       	movw	r26, r20
    2a2e:	11 96       	adiw	r26, 0x01	; 1
    2a30:	9c 93       	st	X, r25
    2a32:	8e 93       	st	-X, r24
    2a34:	82 81       	ldd	r24, Z+2	; 0x02
    2a36:	93 81       	ldd	r25, Z+3	; 0x03
    2a38:	13 96       	adiw	r26, 0x03	; 3
    2a3a:	9c 93       	st	X, r25
    2a3c:	8e 93       	st	-X, r24
    2a3e:	12 97       	sbiw	r26, 0x02	; 2
    2a40:	e0 e0       	ldi	r30, 0x00	; 0
    2a42:	f0 e0       	ldi	r31, 0x00	; 0
    2a44:	02 c0       	rjmp	.+4      	; 0x2a4a <free+0xe4>
    2a46:	fb 01       	movw	r30, r22
    2a48:	bc 01       	movw	r22, r24
    2a4a:	db 01       	movw	r26, r22
    2a4c:	12 96       	adiw	r26, 0x02	; 2
    2a4e:	8d 91       	ld	r24, X+
    2a50:	9c 91       	ld	r25, X
    2a52:	13 97       	sbiw	r26, 0x03	; 3
    2a54:	00 97       	sbiw	r24, 0x00	; 0
    2a56:	b9 f7       	brne	.-18     	; 0x2a46 <free+0xe0>
    2a58:	cb 01       	movw	r24, r22
    2a5a:	02 96       	adiw	r24, 0x02	; 2
    2a5c:	2d 91       	ld	r18, X+
    2a5e:	3c 91       	ld	r19, X
    2a60:	11 97       	sbiw	r26, 0x01	; 1
    2a62:	82 0f       	add	r24, r18
    2a64:	93 1f       	adc	r25, r19
    2a66:	20 91 ae 02 	lds	r18, 0x02AE
    2a6a:	30 91 af 02 	lds	r19, 0x02AF
    2a6e:	28 17       	cp	r18, r24
    2a70:	39 07       	cpc	r19, r25
    2a72:	69 f4       	brne	.+26     	; 0x2a8e <free+0x128>
    2a74:	30 97       	sbiw	r30, 0x00	; 0
    2a76:	29 f4       	brne	.+10     	; 0x2a82 <free+0x11c>
    2a78:	10 92 b1 02 	sts	0x02B1, r1
    2a7c:	10 92 b0 02 	sts	0x02B0, r1
    2a80:	02 c0       	rjmp	.+4      	; 0x2a86 <free+0x120>
    2a82:	13 82       	std	Z+3, r1	; 0x03
    2a84:	12 82       	std	Z+2, r1	; 0x02
    2a86:	70 93 af 02 	sts	0x02AF, r23
    2a8a:	60 93 ae 02 	sts	0x02AE, r22
    2a8e:	df 91       	pop	r29
    2a90:	cf 91       	pop	r28
    2a92:	1f 91       	pop	r17
    2a94:	0f 91       	pop	r16
    2a96:	08 95       	ret

00002a98 <sprintf>:
    2a98:	0f 93       	push	r16
    2a9a:	1f 93       	push	r17
    2a9c:	cf 93       	push	r28
    2a9e:	df 93       	push	r29
    2aa0:	cd b7       	in	r28, 0x3d	; 61
    2aa2:	de b7       	in	r29, 0x3e	; 62
    2aa4:	2e 97       	sbiw	r28, 0x0e	; 14
    2aa6:	0f b6       	in	r0, 0x3f	; 63
    2aa8:	f8 94       	cli
    2aaa:	de bf       	out	0x3e, r29	; 62
    2aac:	0f be       	out	0x3f, r0	; 63
    2aae:	cd bf       	out	0x3d, r28	; 61
    2ab0:	0d 89       	ldd	r16, Y+21	; 0x15
    2ab2:	1e 89       	ldd	r17, Y+22	; 0x16
    2ab4:	86 e0       	ldi	r24, 0x06	; 6
    2ab6:	8c 83       	std	Y+4, r24	; 0x04
    2ab8:	1a 83       	std	Y+2, r17	; 0x02
    2aba:	09 83       	std	Y+1, r16	; 0x01
    2abc:	8f ef       	ldi	r24, 0xFF	; 255
    2abe:	9f e7       	ldi	r25, 0x7F	; 127
    2ac0:	9e 83       	std	Y+6, r25	; 0x06
    2ac2:	8d 83       	std	Y+5, r24	; 0x05
    2ac4:	ae 01       	movw	r20, r28
    2ac6:	47 5e       	subi	r20, 0xE7	; 231
    2ac8:	5f 4f       	sbci	r21, 0xFF	; 255
    2aca:	ce 01       	movw	r24, r28
    2acc:	01 96       	adiw	r24, 0x01	; 1
    2ace:	6f 89       	ldd	r22, Y+23	; 0x17
    2ad0:	78 8d       	ldd	r23, Y+24	; 0x18
    2ad2:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <vfprintf>
    2ad6:	ef 81       	ldd	r30, Y+7	; 0x07
    2ad8:	f8 85       	ldd	r31, Y+8	; 0x08
    2ada:	e0 0f       	add	r30, r16
    2adc:	f1 1f       	adc	r31, r17
    2ade:	10 82       	st	Z, r1
    2ae0:	2e 96       	adiw	r28, 0x0e	; 14
    2ae2:	0f b6       	in	r0, 0x3f	; 63
    2ae4:	f8 94       	cli
    2ae6:	de bf       	out	0x3e, r29	; 62
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	cd bf       	out	0x3d, r28	; 61
    2aec:	df 91       	pop	r29
    2aee:	cf 91       	pop	r28
    2af0:	1f 91       	pop	r17
    2af2:	0f 91       	pop	r16
    2af4:	08 95       	ret

00002af6 <vfprintf>:
    2af6:	2f 92       	push	r2
    2af8:	3f 92       	push	r3
    2afa:	4f 92       	push	r4
    2afc:	5f 92       	push	r5
    2afe:	6f 92       	push	r6
    2b00:	7f 92       	push	r7
    2b02:	8f 92       	push	r8
    2b04:	9f 92       	push	r9
    2b06:	af 92       	push	r10
    2b08:	bf 92       	push	r11
    2b0a:	cf 92       	push	r12
    2b0c:	df 92       	push	r13
    2b0e:	ef 92       	push	r14
    2b10:	ff 92       	push	r15
    2b12:	0f 93       	push	r16
    2b14:	1f 93       	push	r17
    2b16:	cf 93       	push	r28
    2b18:	df 93       	push	r29
    2b1a:	cd b7       	in	r28, 0x3d	; 61
    2b1c:	de b7       	in	r29, 0x3e	; 62
    2b1e:	2d 97       	sbiw	r28, 0x0d	; 13
    2b20:	0f b6       	in	r0, 0x3f	; 63
    2b22:	f8 94       	cli
    2b24:	de bf       	out	0x3e, r29	; 62
    2b26:	0f be       	out	0x3f, r0	; 63
    2b28:	cd bf       	out	0x3d, r28	; 61
    2b2a:	3c 01       	movw	r6, r24
    2b2c:	7d 87       	std	Y+13, r23	; 0x0d
    2b2e:	6c 87       	std	Y+12, r22	; 0x0c
    2b30:	5a 01       	movw	r10, r20
    2b32:	fc 01       	movw	r30, r24
    2b34:	17 82       	std	Z+7, r1	; 0x07
    2b36:	16 82       	std	Z+6, r1	; 0x06
    2b38:	83 81       	ldd	r24, Z+3	; 0x03
    2b3a:	81 ff       	sbrs	r24, 1
    2b3c:	c8 c1       	rjmp	.+912    	; 0x2ece <vfprintf+0x3d8>
    2b3e:	2e 01       	movw	r4, r28
    2b40:	08 94       	sec
    2b42:	41 1c       	adc	r4, r1
    2b44:	51 1c       	adc	r5, r1
    2b46:	f3 01       	movw	r30, r6
    2b48:	93 81       	ldd	r25, Z+3	; 0x03
    2b4a:	ec 85       	ldd	r30, Y+12	; 0x0c
    2b4c:	fd 85       	ldd	r31, Y+13	; 0x0d
    2b4e:	93 fd       	sbrc	r25, 3
    2b50:	85 91       	lpm	r24, Z+
    2b52:	93 ff       	sbrs	r25, 3
    2b54:	81 91       	ld	r24, Z+
    2b56:	fd 87       	std	Y+13, r31	; 0x0d
    2b58:	ec 87       	std	Y+12, r30	; 0x0c
    2b5a:	88 23       	and	r24, r24
    2b5c:	09 f4       	brne	.+2      	; 0x2b60 <vfprintf+0x6a>
    2b5e:	b3 c1       	rjmp	.+870    	; 0x2ec6 <vfprintf+0x3d0>
    2b60:	85 32       	cpi	r24, 0x25	; 37
    2b62:	41 f4       	brne	.+16     	; 0x2b74 <vfprintf+0x7e>
    2b64:	93 fd       	sbrc	r25, 3
    2b66:	85 91       	lpm	r24, Z+
    2b68:	93 ff       	sbrs	r25, 3
    2b6a:	81 91       	ld	r24, Z+
    2b6c:	fd 87       	std	Y+13, r31	; 0x0d
    2b6e:	ec 87       	std	Y+12, r30	; 0x0c
    2b70:	85 32       	cpi	r24, 0x25	; 37
    2b72:	29 f4       	brne	.+10     	; 0x2b7e <vfprintf+0x88>
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	b3 01       	movw	r22, r6
    2b78:	0e 94 98 17 	call	0x2f30	; 0x2f30 <fputc>
    2b7c:	e4 cf       	rjmp	.-56     	; 0x2b46 <vfprintf+0x50>
    2b7e:	ff 24       	eor	r15, r15
    2b80:	ee 24       	eor	r14, r14
    2b82:	10 e0       	ldi	r17, 0x00	; 0
    2b84:	10 32       	cpi	r17, 0x20	; 32
    2b86:	b0 f4       	brcc	.+44     	; 0x2bb4 <vfprintf+0xbe>
    2b88:	8b 32       	cpi	r24, 0x2B	; 43
    2b8a:	69 f0       	breq	.+26     	; 0x2ba6 <vfprintf+0xb0>
    2b8c:	8c 32       	cpi	r24, 0x2C	; 44
    2b8e:	28 f4       	brcc	.+10     	; 0x2b9a <vfprintf+0xa4>
    2b90:	80 32       	cpi	r24, 0x20	; 32
    2b92:	51 f0       	breq	.+20     	; 0x2ba8 <vfprintf+0xb2>
    2b94:	83 32       	cpi	r24, 0x23	; 35
    2b96:	71 f4       	brne	.+28     	; 0x2bb4 <vfprintf+0xbe>
    2b98:	0b c0       	rjmp	.+22     	; 0x2bb0 <vfprintf+0xba>
    2b9a:	8d 32       	cpi	r24, 0x2D	; 45
    2b9c:	39 f0       	breq	.+14     	; 0x2bac <vfprintf+0xb6>
    2b9e:	80 33       	cpi	r24, 0x30	; 48
    2ba0:	49 f4       	brne	.+18     	; 0x2bb4 <vfprintf+0xbe>
    2ba2:	11 60       	ori	r17, 0x01	; 1
    2ba4:	2c c0       	rjmp	.+88     	; 0x2bfe <vfprintf+0x108>
    2ba6:	12 60       	ori	r17, 0x02	; 2
    2ba8:	14 60       	ori	r17, 0x04	; 4
    2baa:	29 c0       	rjmp	.+82     	; 0x2bfe <vfprintf+0x108>
    2bac:	18 60       	ori	r17, 0x08	; 8
    2bae:	27 c0       	rjmp	.+78     	; 0x2bfe <vfprintf+0x108>
    2bb0:	10 61       	ori	r17, 0x10	; 16
    2bb2:	25 c0       	rjmp	.+74     	; 0x2bfe <vfprintf+0x108>
    2bb4:	17 fd       	sbrc	r17, 7
    2bb6:	2e c0       	rjmp	.+92     	; 0x2c14 <vfprintf+0x11e>
    2bb8:	28 2f       	mov	r18, r24
    2bba:	20 53       	subi	r18, 0x30	; 48
    2bbc:	2a 30       	cpi	r18, 0x0A	; 10
    2bbe:	98 f4       	brcc	.+38     	; 0x2be6 <vfprintf+0xf0>
    2bc0:	16 ff       	sbrs	r17, 6
    2bc2:	08 c0       	rjmp	.+16     	; 0x2bd4 <vfprintf+0xde>
    2bc4:	8f 2d       	mov	r24, r15
    2bc6:	88 0f       	add	r24, r24
    2bc8:	f8 2e       	mov	r15, r24
    2bca:	ff 0c       	add	r15, r15
    2bcc:	ff 0c       	add	r15, r15
    2bce:	f8 0e       	add	r15, r24
    2bd0:	f2 0e       	add	r15, r18
    2bd2:	15 c0       	rjmp	.+42     	; 0x2bfe <vfprintf+0x108>
    2bd4:	8e 2d       	mov	r24, r14
    2bd6:	88 0f       	add	r24, r24
    2bd8:	e8 2e       	mov	r14, r24
    2bda:	ee 0c       	add	r14, r14
    2bdc:	ee 0c       	add	r14, r14
    2bde:	e8 0e       	add	r14, r24
    2be0:	e2 0e       	add	r14, r18
    2be2:	10 62       	ori	r17, 0x20	; 32
    2be4:	0c c0       	rjmp	.+24     	; 0x2bfe <vfprintf+0x108>
    2be6:	8e 32       	cpi	r24, 0x2E	; 46
    2be8:	21 f4       	brne	.+8      	; 0x2bf2 <vfprintf+0xfc>
    2bea:	16 fd       	sbrc	r17, 6
    2bec:	6c c1       	rjmp	.+728    	; 0x2ec6 <vfprintf+0x3d0>
    2bee:	10 64       	ori	r17, 0x40	; 64
    2bf0:	06 c0       	rjmp	.+12     	; 0x2bfe <vfprintf+0x108>
    2bf2:	8c 36       	cpi	r24, 0x6C	; 108
    2bf4:	11 f4       	brne	.+4      	; 0x2bfa <vfprintf+0x104>
    2bf6:	10 68       	ori	r17, 0x80	; 128
    2bf8:	02 c0       	rjmp	.+4      	; 0x2bfe <vfprintf+0x108>
    2bfa:	88 36       	cpi	r24, 0x68	; 104
    2bfc:	59 f4       	brne	.+22     	; 0x2c14 <vfprintf+0x11e>
    2bfe:	ec 85       	ldd	r30, Y+12	; 0x0c
    2c00:	fd 85       	ldd	r31, Y+13	; 0x0d
    2c02:	93 fd       	sbrc	r25, 3
    2c04:	85 91       	lpm	r24, Z+
    2c06:	93 ff       	sbrs	r25, 3
    2c08:	81 91       	ld	r24, Z+
    2c0a:	fd 87       	std	Y+13, r31	; 0x0d
    2c0c:	ec 87       	std	Y+12, r30	; 0x0c
    2c0e:	88 23       	and	r24, r24
    2c10:	09 f0       	breq	.+2      	; 0x2c14 <vfprintf+0x11e>
    2c12:	b8 cf       	rjmp	.-144    	; 0x2b84 <vfprintf+0x8e>
    2c14:	98 2f       	mov	r25, r24
    2c16:	95 54       	subi	r25, 0x45	; 69
    2c18:	93 30       	cpi	r25, 0x03	; 3
    2c1a:	18 f0       	brcs	.+6      	; 0x2c22 <vfprintf+0x12c>
    2c1c:	90 52       	subi	r25, 0x20	; 32
    2c1e:	93 30       	cpi	r25, 0x03	; 3
    2c20:	38 f4       	brcc	.+14     	; 0x2c30 <vfprintf+0x13a>
    2c22:	24 e0       	ldi	r18, 0x04	; 4
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	a2 0e       	add	r10, r18
    2c28:	b3 1e       	adc	r11, r19
    2c2a:	3f e3       	ldi	r19, 0x3F	; 63
    2c2c:	39 83       	std	Y+1, r19	; 0x01
    2c2e:	0f c0       	rjmp	.+30     	; 0x2c4e <vfprintf+0x158>
    2c30:	83 36       	cpi	r24, 0x63	; 99
    2c32:	31 f0       	breq	.+12     	; 0x2c40 <vfprintf+0x14a>
    2c34:	83 37       	cpi	r24, 0x73	; 115
    2c36:	81 f0       	breq	.+32     	; 0x2c58 <vfprintf+0x162>
    2c38:	83 35       	cpi	r24, 0x53	; 83
    2c3a:	09 f0       	breq	.+2      	; 0x2c3e <vfprintf+0x148>
    2c3c:	5a c0       	rjmp	.+180    	; 0x2cf2 <vfprintf+0x1fc>
    2c3e:	22 c0       	rjmp	.+68     	; 0x2c84 <vfprintf+0x18e>
    2c40:	f5 01       	movw	r30, r10
    2c42:	80 81       	ld	r24, Z
    2c44:	89 83       	std	Y+1, r24	; 0x01
    2c46:	22 e0       	ldi	r18, 0x02	; 2
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	a2 0e       	add	r10, r18
    2c4c:	b3 1e       	adc	r11, r19
    2c4e:	21 e0       	ldi	r18, 0x01	; 1
    2c50:	c2 2e       	mov	r12, r18
    2c52:	d1 2c       	mov	r13, r1
    2c54:	42 01       	movw	r8, r4
    2c56:	14 c0       	rjmp	.+40     	; 0x2c80 <vfprintf+0x18a>
    2c58:	92 e0       	ldi	r25, 0x02	; 2
    2c5a:	29 2e       	mov	r2, r25
    2c5c:	31 2c       	mov	r3, r1
    2c5e:	2a 0c       	add	r2, r10
    2c60:	3b 1c       	adc	r3, r11
    2c62:	f5 01       	movw	r30, r10
    2c64:	80 80       	ld	r8, Z
    2c66:	91 80       	ldd	r9, Z+1	; 0x01
    2c68:	16 ff       	sbrs	r17, 6
    2c6a:	03 c0       	rjmp	.+6      	; 0x2c72 <vfprintf+0x17c>
    2c6c:	6f 2d       	mov	r22, r15
    2c6e:	70 e0       	ldi	r23, 0x00	; 0
    2c70:	02 c0       	rjmp	.+4      	; 0x2c76 <vfprintf+0x180>
    2c72:	6f ef       	ldi	r22, 0xFF	; 255
    2c74:	7f ef       	ldi	r23, 0xFF	; 255
    2c76:	c4 01       	movw	r24, r8
    2c78:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <strnlen>
    2c7c:	6c 01       	movw	r12, r24
    2c7e:	51 01       	movw	r10, r2
    2c80:	1f 77       	andi	r17, 0x7F	; 127
    2c82:	15 c0       	rjmp	.+42     	; 0x2cae <vfprintf+0x1b8>
    2c84:	82 e0       	ldi	r24, 0x02	; 2
    2c86:	28 2e       	mov	r2, r24
    2c88:	31 2c       	mov	r3, r1
    2c8a:	2a 0c       	add	r2, r10
    2c8c:	3b 1c       	adc	r3, r11
    2c8e:	f5 01       	movw	r30, r10
    2c90:	80 80       	ld	r8, Z
    2c92:	91 80       	ldd	r9, Z+1	; 0x01
    2c94:	16 ff       	sbrs	r17, 6
    2c96:	03 c0       	rjmp	.+6      	; 0x2c9e <vfprintf+0x1a8>
    2c98:	6f 2d       	mov	r22, r15
    2c9a:	70 e0       	ldi	r23, 0x00	; 0
    2c9c:	02 c0       	rjmp	.+4      	; 0x2ca2 <vfprintf+0x1ac>
    2c9e:	6f ef       	ldi	r22, 0xFF	; 255
    2ca0:	7f ef       	ldi	r23, 0xFF	; 255
    2ca2:	c4 01       	movw	r24, r8
    2ca4:	0e 94 82 17 	call	0x2f04	; 0x2f04 <strnlen_P>
    2ca8:	6c 01       	movw	r12, r24
    2caa:	10 68       	ori	r17, 0x80	; 128
    2cac:	51 01       	movw	r10, r2
    2cae:	13 fd       	sbrc	r17, 3
    2cb0:	1c c0       	rjmp	.+56     	; 0x2cea <vfprintf+0x1f4>
    2cb2:	06 c0       	rjmp	.+12     	; 0x2cc0 <vfprintf+0x1ca>
    2cb4:	80 e2       	ldi	r24, 0x20	; 32
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	b3 01       	movw	r22, r6
    2cba:	0e 94 98 17 	call	0x2f30	; 0x2f30 <fputc>
    2cbe:	ea 94       	dec	r14
    2cc0:	8e 2d       	mov	r24, r14
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	c8 16       	cp	r12, r24
    2cc6:	d9 06       	cpc	r13, r25
    2cc8:	a8 f3       	brcs	.-22     	; 0x2cb4 <vfprintf+0x1be>
    2cca:	0f c0       	rjmp	.+30     	; 0x2cea <vfprintf+0x1f4>
    2ccc:	f4 01       	movw	r30, r8
    2cce:	17 fd       	sbrc	r17, 7
    2cd0:	85 91       	lpm	r24, Z+
    2cd2:	17 ff       	sbrs	r17, 7
    2cd4:	81 91       	ld	r24, Z+
    2cd6:	4f 01       	movw	r8, r30
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	b3 01       	movw	r22, r6
    2cdc:	0e 94 98 17 	call	0x2f30	; 0x2f30 <fputc>
    2ce0:	e1 10       	cpse	r14, r1
    2ce2:	ea 94       	dec	r14
    2ce4:	08 94       	sec
    2ce6:	c1 08       	sbc	r12, r1
    2ce8:	d1 08       	sbc	r13, r1
    2cea:	c1 14       	cp	r12, r1
    2cec:	d1 04       	cpc	r13, r1
    2cee:	71 f7       	brne	.-36     	; 0x2ccc <vfprintf+0x1d6>
    2cf0:	e7 c0       	rjmp	.+462    	; 0x2ec0 <vfprintf+0x3ca>
    2cf2:	84 36       	cpi	r24, 0x64	; 100
    2cf4:	11 f0       	breq	.+4      	; 0x2cfa <vfprintf+0x204>
    2cf6:	89 36       	cpi	r24, 0x69	; 105
    2cf8:	51 f5       	brne	.+84     	; 0x2d4e <vfprintf+0x258>
    2cfa:	f5 01       	movw	r30, r10
    2cfc:	17 ff       	sbrs	r17, 7
    2cfe:	07 c0       	rjmp	.+14     	; 0x2d0e <vfprintf+0x218>
    2d00:	80 81       	ld	r24, Z
    2d02:	91 81       	ldd	r25, Z+1	; 0x01
    2d04:	a2 81       	ldd	r26, Z+2	; 0x02
    2d06:	b3 81       	ldd	r27, Z+3	; 0x03
    2d08:	24 e0       	ldi	r18, 0x04	; 4
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	08 c0       	rjmp	.+16     	; 0x2d1e <vfprintf+0x228>
    2d0e:	80 81       	ld	r24, Z
    2d10:	91 81       	ldd	r25, Z+1	; 0x01
    2d12:	aa 27       	eor	r26, r26
    2d14:	97 fd       	sbrc	r25, 7
    2d16:	a0 95       	com	r26
    2d18:	ba 2f       	mov	r27, r26
    2d1a:	22 e0       	ldi	r18, 0x02	; 2
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	a2 0e       	add	r10, r18
    2d20:	b3 1e       	adc	r11, r19
    2d22:	01 2f       	mov	r16, r17
    2d24:	0f 76       	andi	r16, 0x6F	; 111
    2d26:	b7 ff       	sbrs	r27, 7
    2d28:	08 c0       	rjmp	.+16     	; 0x2d3a <vfprintf+0x244>
    2d2a:	b0 95       	com	r27
    2d2c:	a0 95       	com	r26
    2d2e:	90 95       	com	r25
    2d30:	81 95       	neg	r24
    2d32:	9f 4f       	sbci	r25, 0xFF	; 255
    2d34:	af 4f       	sbci	r26, 0xFF	; 255
    2d36:	bf 4f       	sbci	r27, 0xFF	; 255
    2d38:	00 68       	ori	r16, 0x80	; 128
    2d3a:	bc 01       	movw	r22, r24
    2d3c:	cd 01       	movw	r24, r26
    2d3e:	a2 01       	movw	r20, r4
    2d40:	2a e0       	ldi	r18, 0x0A	; 10
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__ultoa_invert>
    2d48:	d8 2e       	mov	r13, r24
    2d4a:	d4 18       	sub	r13, r4
    2d4c:	3f c0       	rjmp	.+126    	; 0x2dcc <vfprintf+0x2d6>
    2d4e:	85 37       	cpi	r24, 0x75	; 117
    2d50:	21 f4       	brne	.+8      	; 0x2d5a <vfprintf+0x264>
    2d52:	1f 7e       	andi	r17, 0xEF	; 239
    2d54:	2a e0       	ldi	r18, 0x0A	; 10
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	20 c0       	rjmp	.+64     	; 0x2d9a <vfprintf+0x2a4>
    2d5a:	19 7f       	andi	r17, 0xF9	; 249
    2d5c:	8f 36       	cpi	r24, 0x6F	; 111
    2d5e:	a9 f0       	breq	.+42     	; 0x2d8a <vfprintf+0x294>
    2d60:	80 37       	cpi	r24, 0x70	; 112
    2d62:	20 f4       	brcc	.+8      	; 0x2d6c <vfprintf+0x276>
    2d64:	88 35       	cpi	r24, 0x58	; 88
    2d66:	09 f0       	breq	.+2      	; 0x2d6a <vfprintf+0x274>
    2d68:	ae c0       	rjmp	.+348    	; 0x2ec6 <vfprintf+0x3d0>
    2d6a:	0b c0       	rjmp	.+22     	; 0x2d82 <vfprintf+0x28c>
    2d6c:	80 37       	cpi	r24, 0x70	; 112
    2d6e:	21 f0       	breq	.+8      	; 0x2d78 <vfprintf+0x282>
    2d70:	88 37       	cpi	r24, 0x78	; 120
    2d72:	09 f0       	breq	.+2      	; 0x2d76 <vfprintf+0x280>
    2d74:	a8 c0       	rjmp	.+336    	; 0x2ec6 <vfprintf+0x3d0>
    2d76:	01 c0       	rjmp	.+2      	; 0x2d7a <vfprintf+0x284>
    2d78:	10 61       	ori	r17, 0x10	; 16
    2d7a:	14 ff       	sbrs	r17, 4
    2d7c:	09 c0       	rjmp	.+18     	; 0x2d90 <vfprintf+0x29a>
    2d7e:	14 60       	ori	r17, 0x04	; 4
    2d80:	07 c0       	rjmp	.+14     	; 0x2d90 <vfprintf+0x29a>
    2d82:	14 ff       	sbrs	r17, 4
    2d84:	08 c0       	rjmp	.+16     	; 0x2d96 <vfprintf+0x2a0>
    2d86:	16 60       	ori	r17, 0x06	; 6
    2d88:	06 c0       	rjmp	.+12     	; 0x2d96 <vfprintf+0x2a0>
    2d8a:	28 e0       	ldi	r18, 0x08	; 8
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	05 c0       	rjmp	.+10     	; 0x2d9a <vfprintf+0x2a4>
    2d90:	20 e1       	ldi	r18, 0x10	; 16
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	02 c0       	rjmp	.+4      	; 0x2d9a <vfprintf+0x2a4>
    2d96:	20 e1       	ldi	r18, 0x10	; 16
    2d98:	32 e0       	ldi	r19, 0x02	; 2
    2d9a:	f5 01       	movw	r30, r10
    2d9c:	17 ff       	sbrs	r17, 7
    2d9e:	07 c0       	rjmp	.+14     	; 0x2dae <vfprintf+0x2b8>
    2da0:	60 81       	ld	r22, Z
    2da2:	71 81       	ldd	r23, Z+1	; 0x01
    2da4:	82 81       	ldd	r24, Z+2	; 0x02
    2da6:	93 81       	ldd	r25, Z+3	; 0x03
    2da8:	44 e0       	ldi	r20, 0x04	; 4
    2daa:	50 e0       	ldi	r21, 0x00	; 0
    2dac:	06 c0       	rjmp	.+12     	; 0x2dba <vfprintf+0x2c4>
    2dae:	60 81       	ld	r22, Z
    2db0:	71 81       	ldd	r23, Z+1	; 0x01
    2db2:	80 e0       	ldi	r24, 0x00	; 0
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	42 e0       	ldi	r20, 0x02	; 2
    2db8:	50 e0       	ldi	r21, 0x00	; 0
    2dba:	a4 0e       	add	r10, r20
    2dbc:	b5 1e       	adc	r11, r21
    2dbe:	a2 01       	movw	r20, r4
    2dc0:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__ultoa_invert>
    2dc4:	d8 2e       	mov	r13, r24
    2dc6:	d4 18       	sub	r13, r4
    2dc8:	01 2f       	mov	r16, r17
    2dca:	0f 77       	andi	r16, 0x7F	; 127
    2dcc:	06 ff       	sbrs	r16, 6
    2dce:	09 c0       	rjmp	.+18     	; 0x2de2 <vfprintf+0x2ec>
    2dd0:	0e 7f       	andi	r16, 0xFE	; 254
    2dd2:	df 14       	cp	r13, r15
    2dd4:	30 f4       	brcc	.+12     	; 0x2de2 <vfprintf+0x2ec>
    2dd6:	04 ff       	sbrs	r16, 4
    2dd8:	06 c0       	rjmp	.+12     	; 0x2de6 <vfprintf+0x2f0>
    2dda:	02 fd       	sbrc	r16, 2
    2ddc:	04 c0       	rjmp	.+8      	; 0x2de6 <vfprintf+0x2f0>
    2dde:	0f 7e       	andi	r16, 0xEF	; 239
    2de0:	02 c0       	rjmp	.+4      	; 0x2de6 <vfprintf+0x2f0>
    2de2:	1d 2d       	mov	r17, r13
    2de4:	01 c0       	rjmp	.+2      	; 0x2de8 <vfprintf+0x2f2>
    2de6:	1f 2d       	mov	r17, r15
    2de8:	80 2f       	mov	r24, r16
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	04 ff       	sbrs	r16, 4
    2dee:	0c c0       	rjmp	.+24     	; 0x2e08 <vfprintf+0x312>
    2df0:	fe 01       	movw	r30, r28
    2df2:	ed 0d       	add	r30, r13
    2df4:	f1 1d       	adc	r31, r1
    2df6:	20 81       	ld	r18, Z
    2df8:	20 33       	cpi	r18, 0x30	; 48
    2dfa:	11 f4       	brne	.+4      	; 0x2e00 <vfprintf+0x30a>
    2dfc:	09 7e       	andi	r16, 0xE9	; 233
    2dfe:	09 c0       	rjmp	.+18     	; 0x2e12 <vfprintf+0x31c>
    2e00:	02 ff       	sbrs	r16, 2
    2e02:	06 c0       	rjmp	.+12     	; 0x2e10 <vfprintf+0x31a>
    2e04:	1e 5f       	subi	r17, 0xFE	; 254
    2e06:	05 c0       	rjmp	.+10     	; 0x2e12 <vfprintf+0x31c>
    2e08:	86 78       	andi	r24, 0x86	; 134
    2e0a:	90 70       	andi	r25, 0x00	; 0
    2e0c:	00 97       	sbiw	r24, 0x00	; 0
    2e0e:	09 f0       	breq	.+2      	; 0x2e12 <vfprintf+0x31c>
    2e10:	1f 5f       	subi	r17, 0xFF	; 255
    2e12:	80 2e       	mov	r8, r16
    2e14:	99 24       	eor	r9, r9
    2e16:	03 fd       	sbrc	r16, 3
    2e18:	12 c0       	rjmp	.+36     	; 0x2e3e <vfprintf+0x348>
    2e1a:	00 ff       	sbrs	r16, 0
    2e1c:	0d c0       	rjmp	.+26     	; 0x2e38 <vfprintf+0x342>
    2e1e:	fd 2c       	mov	r15, r13
    2e20:	1e 15       	cp	r17, r14
    2e22:	50 f4       	brcc	.+20     	; 0x2e38 <vfprintf+0x342>
    2e24:	fe 0c       	add	r15, r14
    2e26:	f1 1a       	sub	r15, r17
    2e28:	1e 2d       	mov	r17, r14
    2e2a:	06 c0       	rjmp	.+12     	; 0x2e38 <vfprintf+0x342>
    2e2c:	80 e2       	ldi	r24, 0x20	; 32
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	b3 01       	movw	r22, r6
    2e32:	0e 94 98 17 	call	0x2f30	; 0x2f30 <fputc>
    2e36:	1f 5f       	subi	r17, 0xFF	; 255
    2e38:	1e 15       	cp	r17, r14
    2e3a:	c0 f3       	brcs	.-16     	; 0x2e2c <vfprintf+0x336>
    2e3c:	04 c0       	rjmp	.+8      	; 0x2e46 <vfprintf+0x350>
    2e3e:	1e 15       	cp	r17, r14
    2e40:	10 f4       	brcc	.+4      	; 0x2e46 <vfprintf+0x350>
    2e42:	e1 1a       	sub	r14, r17
    2e44:	01 c0       	rjmp	.+2      	; 0x2e48 <vfprintf+0x352>
    2e46:	ee 24       	eor	r14, r14
    2e48:	84 fe       	sbrs	r8, 4
    2e4a:	0f c0       	rjmp	.+30     	; 0x2e6a <vfprintf+0x374>
    2e4c:	80 e3       	ldi	r24, 0x30	; 48
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	b3 01       	movw	r22, r6
    2e52:	0e 94 98 17 	call	0x2f30	; 0x2f30 <fputc>
    2e56:	82 fe       	sbrs	r8, 2
    2e58:	1f c0       	rjmp	.+62     	; 0x2e98 <vfprintf+0x3a2>
    2e5a:	81 fe       	sbrs	r8, 1
    2e5c:	03 c0       	rjmp	.+6      	; 0x2e64 <vfprintf+0x36e>
    2e5e:	88 e5       	ldi	r24, 0x58	; 88
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	10 c0       	rjmp	.+32     	; 0x2e84 <vfprintf+0x38e>
    2e64:	88 e7       	ldi	r24, 0x78	; 120
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	0d c0       	rjmp	.+26     	; 0x2e84 <vfprintf+0x38e>
    2e6a:	c4 01       	movw	r24, r8
    2e6c:	86 78       	andi	r24, 0x86	; 134
    2e6e:	90 70       	andi	r25, 0x00	; 0
    2e70:	00 97       	sbiw	r24, 0x00	; 0
    2e72:	91 f0       	breq	.+36     	; 0x2e98 <vfprintf+0x3a2>
    2e74:	81 fc       	sbrc	r8, 1
    2e76:	02 c0       	rjmp	.+4      	; 0x2e7c <vfprintf+0x386>
    2e78:	80 e2       	ldi	r24, 0x20	; 32
    2e7a:	01 c0       	rjmp	.+2      	; 0x2e7e <vfprintf+0x388>
    2e7c:	8b e2       	ldi	r24, 0x2B	; 43
    2e7e:	07 fd       	sbrc	r16, 7
    2e80:	8d e2       	ldi	r24, 0x2D	; 45
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	b3 01       	movw	r22, r6
    2e86:	0e 94 98 17 	call	0x2f30	; 0x2f30 <fputc>
    2e8a:	06 c0       	rjmp	.+12     	; 0x2e98 <vfprintf+0x3a2>
    2e8c:	80 e3       	ldi	r24, 0x30	; 48
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	b3 01       	movw	r22, r6
    2e92:	0e 94 98 17 	call	0x2f30	; 0x2f30 <fputc>
    2e96:	fa 94       	dec	r15
    2e98:	df 14       	cp	r13, r15
    2e9a:	c0 f3       	brcs	.-16     	; 0x2e8c <vfprintf+0x396>
    2e9c:	da 94       	dec	r13
    2e9e:	f2 01       	movw	r30, r4
    2ea0:	ed 0d       	add	r30, r13
    2ea2:	f1 1d       	adc	r31, r1
    2ea4:	80 81       	ld	r24, Z
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	b3 01       	movw	r22, r6
    2eaa:	0e 94 98 17 	call	0x2f30	; 0x2f30 <fputc>
    2eae:	dd 20       	and	r13, r13
    2eb0:	a9 f7       	brne	.-22     	; 0x2e9c <vfprintf+0x3a6>
    2eb2:	06 c0       	rjmp	.+12     	; 0x2ec0 <vfprintf+0x3ca>
    2eb4:	80 e2       	ldi	r24, 0x20	; 32
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	b3 01       	movw	r22, r6
    2eba:	0e 94 98 17 	call	0x2f30	; 0x2f30 <fputc>
    2ebe:	ea 94       	dec	r14
    2ec0:	ee 20       	and	r14, r14
    2ec2:	c1 f7       	brne	.-16     	; 0x2eb4 <vfprintf+0x3be>
    2ec4:	40 ce       	rjmp	.-896    	; 0x2b46 <vfprintf+0x50>
    2ec6:	f3 01       	movw	r30, r6
    2ec8:	86 81       	ldd	r24, Z+6	; 0x06
    2eca:	97 81       	ldd	r25, Z+7	; 0x07
    2ecc:	02 c0       	rjmp	.+4      	; 0x2ed2 <vfprintf+0x3dc>
    2ece:	8f ef       	ldi	r24, 0xFF	; 255
    2ed0:	9f ef       	ldi	r25, 0xFF	; 255
    2ed2:	2d 96       	adiw	r28, 0x0d	; 13
    2ed4:	0f b6       	in	r0, 0x3f	; 63
    2ed6:	f8 94       	cli
    2ed8:	de bf       	out	0x3e, r29	; 62
    2eda:	0f be       	out	0x3f, r0	; 63
    2edc:	cd bf       	out	0x3d, r28	; 61
    2ede:	df 91       	pop	r29
    2ee0:	cf 91       	pop	r28
    2ee2:	1f 91       	pop	r17
    2ee4:	0f 91       	pop	r16
    2ee6:	ff 90       	pop	r15
    2ee8:	ef 90       	pop	r14
    2eea:	df 90       	pop	r13
    2eec:	cf 90       	pop	r12
    2eee:	bf 90       	pop	r11
    2ef0:	af 90       	pop	r10
    2ef2:	9f 90       	pop	r9
    2ef4:	8f 90       	pop	r8
    2ef6:	7f 90       	pop	r7
    2ef8:	6f 90       	pop	r6
    2efa:	5f 90       	pop	r5
    2efc:	4f 90       	pop	r4
    2efe:	3f 90       	pop	r3
    2f00:	2f 90       	pop	r2
    2f02:	08 95       	ret

00002f04 <strnlen_P>:
    2f04:	fc 01       	movw	r30, r24
    2f06:	05 90       	lpm	r0, Z+
    2f08:	61 50       	subi	r22, 0x01	; 1
    2f0a:	70 40       	sbci	r23, 0x00	; 0
    2f0c:	01 10       	cpse	r0, r1
    2f0e:	d8 f7       	brcc	.-10     	; 0x2f06 <strnlen_P+0x2>
    2f10:	80 95       	com	r24
    2f12:	90 95       	com	r25
    2f14:	8e 0f       	add	r24, r30
    2f16:	9f 1f       	adc	r25, r31
    2f18:	08 95       	ret

00002f1a <strnlen>:
    2f1a:	fc 01       	movw	r30, r24
    2f1c:	61 50       	subi	r22, 0x01	; 1
    2f1e:	70 40       	sbci	r23, 0x00	; 0
    2f20:	01 90       	ld	r0, Z+
    2f22:	01 10       	cpse	r0, r1
    2f24:	d8 f7       	brcc	.-10     	; 0x2f1c <strnlen+0x2>
    2f26:	80 95       	com	r24
    2f28:	90 95       	com	r25
    2f2a:	8e 0f       	add	r24, r30
    2f2c:	9f 1f       	adc	r25, r31
    2f2e:	08 95       	ret

00002f30 <fputc>:
    2f30:	0f 93       	push	r16
    2f32:	1f 93       	push	r17
    2f34:	cf 93       	push	r28
    2f36:	df 93       	push	r29
    2f38:	8c 01       	movw	r16, r24
    2f3a:	eb 01       	movw	r28, r22
    2f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3e:	81 ff       	sbrs	r24, 1
    2f40:	1b c0       	rjmp	.+54     	; 0x2f78 <fputc+0x48>
    2f42:	82 ff       	sbrs	r24, 2
    2f44:	0d c0       	rjmp	.+26     	; 0x2f60 <fputc+0x30>
    2f46:	2e 81       	ldd	r18, Y+6	; 0x06
    2f48:	3f 81       	ldd	r19, Y+7	; 0x07
    2f4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f4c:	9d 81       	ldd	r25, Y+5	; 0x05
    2f4e:	28 17       	cp	r18, r24
    2f50:	39 07       	cpc	r19, r25
    2f52:	64 f4       	brge	.+24     	; 0x2f6c <fputc+0x3c>
    2f54:	e8 81       	ld	r30, Y
    2f56:	f9 81       	ldd	r31, Y+1	; 0x01
    2f58:	01 93       	st	Z+, r16
    2f5a:	f9 83       	std	Y+1, r31	; 0x01
    2f5c:	e8 83       	st	Y, r30
    2f5e:	06 c0       	rjmp	.+12     	; 0x2f6c <fputc+0x3c>
    2f60:	e8 85       	ldd	r30, Y+8	; 0x08
    2f62:	f9 85       	ldd	r31, Y+9	; 0x09
    2f64:	80 2f       	mov	r24, r16
    2f66:	09 95       	icall
    2f68:	00 97       	sbiw	r24, 0x00	; 0
    2f6a:	31 f4       	brne	.+12     	; 0x2f78 <fputc+0x48>
    2f6c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f6e:	9f 81       	ldd	r25, Y+7	; 0x07
    2f70:	01 96       	adiw	r24, 0x01	; 1
    2f72:	9f 83       	std	Y+7, r25	; 0x07
    2f74:	8e 83       	std	Y+6, r24	; 0x06
    2f76:	02 c0       	rjmp	.+4      	; 0x2f7c <fputc+0x4c>
    2f78:	0f ef       	ldi	r16, 0xFF	; 255
    2f7a:	1f ef       	ldi	r17, 0xFF	; 255
    2f7c:	c8 01       	movw	r24, r16
    2f7e:	df 91       	pop	r29
    2f80:	cf 91       	pop	r28
    2f82:	1f 91       	pop	r17
    2f84:	0f 91       	pop	r16
    2f86:	08 95       	ret

00002f88 <__ultoa_invert>:
    2f88:	fa 01       	movw	r30, r20
    2f8a:	aa 27       	eor	r26, r26
    2f8c:	28 30       	cpi	r18, 0x08	; 8
    2f8e:	51 f1       	breq	.+84     	; 0x2fe4 <__ultoa_invert+0x5c>
    2f90:	20 31       	cpi	r18, 0x10	; 16
    2f92:	81 f1       	breq	.+96     	; 0x2ff4 <__ultoa_invert+0x6c>
    2f94:	e8 94       	clt
    2f96:	6f 93       	push	r22
    2f98:	6e 7f       	andi	r22, 0xFE	; 254
    2f9a:	6e 5f       	subi	r22, 0xFE	; 254
    2f9c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f9e:	8f 4f       	sbci	r24, 0xFF	; 255
    2fa0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fa2:	af 4f       	sbci	r26, 0xFF	; 255
    2fa4:	b1 e0       	ldi	r27, 0x01	; 1
    2fa6:	3e d0       	rcall	.+124    	; 0x3024 <__ultoa_invert+0x9c>
    2fa8:	b4 e0       	ldi	r27, 0x04	; 4
    2faa:	3c d0       	rcall	.+120    	; 0x3024 <__ultoa_invert+0x9c>
    2fac:	67 0f       	add	r22, r23
    2fae:	78 1f       	adc	r23, r24
    2fb0:	89 1f       	adc	r24, r25
    2fb2:	9a 1f       	adc	r25, r26
    2fb4:	a1 1d       	adc	r26, r1
    2fb6:	68 0f       	add	r22, r24
    2fb8:	79 1f       	adc	r23, r25
    2fba:	8a 1f       	adc	r24, r26
    2fbc:	91 1d       	adc	r25, r1
    2fbe:	a1 1d       	adc	r26, r1
    2fc0:	6a 0f       	add	r22, r26
    2fc2:	71 1d       	adc	r23, r1
    2fc4:	81 1d       	adc	r24, r1
    2fc6:	91 1d       	adc	r25, r1
    2fc8:	a1 1d       	adc	r26, r1
    2fca:	20 d0       	rcall	.+64     	; 0x300c <__ultoa_invert+0x84>
    2fcc:	09 f4       	brne	.+2      	; 0x2fd0 <__ultoa_invert+0x48>
    2fce:	68 94       	set
    2fd0:	3f 91       	pop	r19
    2fd2:	2a e0       	ldi	r18, 0x0A	; 10
    2fd4:	26 9f       	mul	r18, r22
    2fd6:	11 24       	eor	r1, r1
    2fd8:	30 19       	sub	r19, r0
    2fda:	30 5d       	subi	r19, 0xD0	; 208
    2fdc:	31 93       	st	Z+, r19
    2fde:	de f6       	brtc	.-74     	; 0x2f96 <__ultoa_invert+0xe>
    2fe0:	cf 01       	movw	r24, r30
    2fe2:	08 95       	ret
    2fe4:	46 2f       	mov	r20, r22
    2fe6:	47 70       	andi	r20, 0x07	; 7
    2fe8:	40 5d       	subi	r20, 0xD0	; 208
    2fea:	41 93       	st	Z+, r20
    2fec:	b3 e0       	ldi	r27, 0x03	; 3
    2fee:	0f d0       	rcall	.+30     	; 0x300e <__ultoa_invert+0x86>
    2ff0:	c9 f7       	brne	.-14     	; 0x2fe4 <__ultoa_invert+0x5c>
    2ff2:	f6 cf       	rjmp	.-20     	; 0x2fe0 <__ultoa_invert+0x58>
    2ff4:	46 2f       	mov	r20, r22
    2ff6:	4f 70       	andi	r20, 0x0F	; 15
    2ff8:	40 5d       	subi	r20, 0xD0	; 208
    2ffa:	4a 33       	cpi	r20, 0x3A	; 58
    2ffc:	18 f0       	brcs	.+6      	; 0x3004 <__ultoa_invert+0x7c>
    2ffe:	49 5d       	subi	r20, 0xD9	; 217
    3000:	31 fd       	sbrc	r19, 1
    3002:	40 52       	subi	r20, 0x20	; 32
    3004:	41 93       	st	Z+, r20
    3006:	02 d0       	rcall	.+4      	; 0x300c <__ultoa_invert+0x84>
    3008:	a9 f7       	brne	.-22     	; 0x2ff4 <__ultoa_invert+0x6c>
    300a:	ea cf       	rjmp	.-44     	; 0x2fe0 <__ultoa_invert+0x58>
    300c:	b4 e0       	ldi	r27, 0x04	; 4
    300e:	a6 95       	lsr	r26
    3010:	97 95       	ror	r25
    3012:	87 95       	ror	r24
    3014:	77 95       	ror	r23
    3016:	67 95       	ror	r22
    3018:	ba 95       	dec	r27
    301a:	c9 f7       	brne	.-14     	; 0x300e <__ultoa_invert+0x86>
    301c:	00 97       	sbiw	r24, 0x00	; 0
    301e:	61 05       	cpc	r22, r1
    3020:	71 05       	cpc	r23, r1
    3022:	08 95       	ret
    3024:	9b 01       	movw	r18, r22
    3026:	ac 01       	movw	r20, r24
    3028:	0a 2e       	mov	r0, r26
    302a:	06 94       	lsr	r0
    302c:	57 95       	ror	r21
    302e:	47 95       	ror	r20
    3030:	37 95       	ror	r19
    3032:	27 95       	ror	r18
    3034:	ba 95       	dec	r27
    3036:	c9 f7       	brne	.-14     	; 0x302a <__ultoa_invert+0xa2>
    3038:	62 0f       	add	r22, r18
    303a:	73 1f       	adc	r23, r19
    303c:	84 1f       	adc	r24, r20
    303e:	95 1f       	adc	r25, r21
    3040:	a0 1d       	adc	r26, r0
    3042:	08 95       	ret

00003044 <_exit>:
    3044:	f8 94       	cli

00003046 <__stop_program>:
    3046:	ff cf       	rjmp	.-2      	; 0x3046 <__stop_program>
