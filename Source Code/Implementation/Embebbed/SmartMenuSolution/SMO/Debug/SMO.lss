
SMO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015c  00800100  000032fe  00003392  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000032fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000060  0080025c  0080025c  000034ee  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  000034f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  00004174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000248  00000000  00000000  00004330  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000039e3  00000000  00000000  00004578  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000100f  00000000  00000000  00007f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001983  00000000  00000000  00008f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ac4  00000000  00000000  0000a8f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001849  00000000  00000000  0000b3b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000265d  00000000  00000000  0000cbfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000f25a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 82 03 	jmp	0x704	; 0x704 <__vector_16>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	af 08       	sbc	r10, r15
      8e:	6d 12       	cpse	r6, r29
      90:	e6 08       	sbc	r14, r6
      92:	13 09       	sbc	r17, r3
      94:	3d 09       	sbc	r19, r13
      96:	6d 12       	cpse	r6, r29
      98:	46 09       	sbc	r20, r6
      9a:	c2 09       	sbc	r28, r2
      9c:	3e 0a       	sbc	r3, r30
      9e:	93 0b       	sbc	r25, r19
      a0:	4e 0c       	add	r4, r14
      a2:	c8 0c       	add	r12, r8
      a4:	6d 0e       	add	r6, r29
      a6:	28 0f       	add	r18, r24
      a8:	a2 0f       	add	r26, r18
      aa:	14 10       	cpse	r1, r4
      ac:	39 10       	cpse	r3, r9
      ae:	6d 12       	cpse	r6, r29
      b0:	50 10       	cpse	r5, r0
      b2:	c3 10       	cpse	r12, r3
      b4:	46 11       	cpse	r20, r6
      b6:	9f 11       	cpse	r25, r15
      b8:	11 12       	cpse	r1, r17
      ba:	b7 12       	cpse	r11, r23
      bc:	be 12       	cpse	r11, r30
      be:	c5 12       	cpse	r12, r21
      c0:	cd 12       	cpse	r12, r29
      c2:	d4 12       	cpse	r13, r20
      c4:	db 12       	cpse	r13, r27
      c6:	e4 12       	cpse	r14, r20
      c8:	ee 12       	cpse	r14, r30
      ca:	f7 12       	cpse	r15, r23
      cc:	00 13       	cpse	r16, r16
      ce:	09 13       	cpse	r16, r25
      d0:	12 13       	cpse	r17, r18
      d2:	1b 13       	cpse	r17, r27
      d4:	24 13       	cpse	r18, r20
      d6:	2d 13       	cpse	r18, r29
      d8:	36 13       	cpse	r19, r22
      da:	3f 13       	cpse	r19, r31
      dc:	47 13       	cpse	r20, r23
      de:	4f 13       	cpse	r20, r31
      e0:	58 13       	cpse	r21, r24
      e2:	60 13       	cpse	r22, r16
      e4:	68 13       	cpse	r22, r24
      e6:	70 13       	cpse	r23, r16
      e8:	78 13       	cpse	r23, r24

000000ea <__ctors_end>:
      ea:	11 24       	eor	r1, r1
      ec:	1f be       	out	0x3f, r1	; 63
      ee:	cf ef       	ldi	r28, 0xFF	; 255
      f0:	d0 e1       	ldi	r29, 0x10	; 16
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
      f6:	12 e0       	ldi	r17, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b1 e0       	ldi	r27, 0x01	; 1
      fc:	ee ef       	ldi	r30, 0xFE	; 254
      fe:	f2 e3       	ldi	r31, 0x32	; 50
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0b bf       	out	0x3b, r16	; 59
     104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
     106:	07 90       	elpm	r0, Z+
     108:	0d 92       	st	X+, r0
     10a:	ac 35       	cpi	r26, 0x5C	; 92
     10c:	b1 07       	cpc	r27, r17
     10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
     110:	12 e0       	ldi	r17, 0x02	; 2
     112:	ac e5       	ldi	r26, 0x5C	; 92
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	ac 3b       	cpi	r26, 0xBC	; 188
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 62 03 	call	0x6c4	; 0x6c4 <main>
     124:	0c 94 7d 19 	jmp	0x32fa	; 0x32fa <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <KEYPAD_Check>:
uint8_t ascii_code[4][4]={16,15,14,13,
						  12,9,6,3,
						  10,8,5,2,
						  11,7,4,1};

uint8_t KEYPAD_Check() {
     12c:	af 92       	push	r10
     12e:	bf 92       	push	r11
     130:	cf 92       	push	r12
     132:	df 92       	push	r13
     134:	ef 92       	push	r14
     136:	ff 92       	push	r15
     138:	0f 93       	push	r16
     13a:	1f 93       	push	r17
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	20 e0       	ldi	r18, 0x00	; 0
     142:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     144:	41 e0       	ldi	r20, 0x01	; 1
     146:	50 e0       	ldi	r21, 0x00	; 0
     148:	e2 e6       	ldi	r30, 0x62	; 98
     14a:	f0 e0       	ldi	r31, 0x00	; 0
		_delay_us(10);
		keyin=KEYPAD_PIN & 0x0F;
		if (keyin!=0x0F)
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
     14c:	a0 e1       	ldi	r26, 0x10	; 16
     14e:	b1 e0       	ldi	r27, 0x01	; 1
     150:	0f 2e       	mov	r0, r31
     152:	f1 e1       	ldi	r31, 0x11	; 17
     154:	af 2e       	mov	r10, r31
     156:	f1 e0       	ldi	r31, 0x01	; 1
     158:	bf 2e       	mov	r11, r31
     15a:	f0 2d       	mov	r31, r0
     15c:	02 e1       	ldi	r16, 0x12	; 18
     15e:	11 e0       	ldi	r17, 0x01	; 1
     160:	0f 2e       	mov	r0, r31
     162:	f3 e1       	ldi	r31, 0x13	; 19
     164:	ef 2e       	mov	r14, r31
     166:	f1 e0       	ldi	r31, 0x01	; 1
     168:	ff 2e       	mov	r15, r31
     16a:	f0 2d       	mov	r31, r0
						  11,7,4,1};

uint8_t KEYPAD_Check() {
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     16c:	b9 01       	movw	r22, r18
uint8_t ascii_code[4][4]={16,15,14,13,
						  12,9,6,3,
						  10,8,5,2,
						  11,7,4,1};

uint8_t KEYPAD_Check() {
     16e:	c9 01       	movw	r24, r18
     170:	04 96       	adiw	r24, 0x04	; 4
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     172:	6a 01       	movw	r12, r20
     174:	02 c0       	rjmp	.+4      	; 0x17a <KEYPAD_Check+0x4e>
     176:	cc 0c       	add	r12, r12
     178:	dd 1c       	adc	r13, r13
     17a:	8a 95       	dec	r24
     17c:	e2 f7       	brpl	.-8      	; 0x176 <KEYPAD_Check+0x4a>
     17e:	c6 01       	movw	r24, r12
     180:	80 95       	com	r24
     182:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     184:	83 e0       	ldi	r24, 0x03	; 3
     186:	8a 95       	dec	r24
     188:	f1 f7       	brne	.-4      	; 0x186 <KEYPAD_Check+0x5a>
     18a:	00 00       	nop
		_delay_us(10);
		keyin=KEYPAD_PIN & 0x0F;
     18c:	80 b1       	in	r24, 0x00	; 0
     18e:	8f 70       	andi	r24, 0x0F	; 15
		if (keyin!=0x0F)
     190:	8f 30       	cpi	r24, 0x0F	; 15
     192:	29 f1       	breq	.+74     	; 0x1de <KEYPAD_Check+0xb2>
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
     194:	9c 91       	ld	r25, X
     196:	98 17       	cp	r25, r24
     198:	a9 f0       	breq	.+42     	; 0x1c4 <KEYPAD_Check+0x98>
     19a:	e5 01       	movw	r28, r10
     19c:	98 81       	ld	r25, Y
     19e:	98 17       	cp	r25, r24
     1a0:	59 f0       	breq	.+22     	; 0x1b8 <KEYPAD_Check+0x8c>
     1a2:	e8 01       	movw	r28, r16
     1a4:	98 81       	ld	r25, Y
     1a6:	98 17       	cp	r25, r24
     1a8:	51 f0       	breq	.+20     	; 0x1be <KEYPAD_Check+0x92>
     1aa:	e7 01       	movw	r28, r14
     1ac:	98 81       	ld	r25, Y
     1ae:	98 17       	cp	r25, r24
     1b0:	b1 f4       	brne	.+44     	; 0x1de <KEYPAD_Check+0xb2>
     1b2:	e3 e0       	ldi	r30, 0x03	; 3
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	08 c0       	rjmp	.+16     	; 0x1c8 <KEYPAD_Check+0x9c>
     1b8:	e1 e0       	ldi	r30, 0x01	; 1
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	05 c0       	rjmp	.+10     	; 0x1c8 <KEYPAD_Check+0x9c>
     1be:	e2 e0       	ldi	r30, 0x02	; 2
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <KEYPAD_Check+0x9c>
     1c4:	e0 e0       	ldi	r30, 0x00	; 0
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	ee 0f       	add	r30, r30
     1ca:	ff 1f       	adc	r31, r31
     1cc:	ee 0f       	add	r30, r30
     1ce:	ff 1f       	adc	r31, r31
     1d0:	6e 0f       	add	r22, r30
     1d2:	7f 1f       	adc	r23, r31
     1d4:	fb 01       	movw	r30, r22
     1d6:	e0 50       	subi	r30, 0x00	; 0
     1d8:	ff 4f       	sbci	r31, 0xFF	; 255
     1da:	80 81       	ld	r24, Z
     1dc:	06 c0       	rjmp	.+12     	; 0x1ea <KEYPAD_Check+0xbe>
     1de:	2f 5f       	subi	r18, 0xFF	; 255
     1e0:	3f 4f       	sbci	r19, 0xFF	; 255
						  10,8,5,2,
						  11,7,4,1};

uint8_t KEYPAD_Check() {
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
     1e2:	24 30       	cpi	r18, 0x04	; 4
     1e4:	31 05       	cpc	r19, r1
     1e6:	11 f6       	brne	.-124    	; 0x16c <KEYPAD_Check+0x40>
		keyin=KEYPAD_PIN & 0x0F;
		if (keyin!=0x0F)
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
	}
	return 0;
     1e8:	80 e0       	ldi	r24, 0x00	; 0
}
     1ea:	df 91       	pop	r29
     1ec:	cf 91       	pop	r28
     1ee:	1f 91       	pop	r17
     1f0:	0f 91       	pop	r16
     1f2:	ff 90       	pop	r15
     1f4:	ef 90       	pop	r14
     1f6:	df 90       	pop	r13
     1f8:	cf 90       	pop	r12
     1fa:	bf 90       	pop	r11
     1fc:	af 90       	pop	r10
     1fe:	08 95       	ret

00000200 <KEYPAD_Init>:

void KEYPAD_Init()
{
	//Khai bao huong cho cac chan ket noi keypad
	KEYPAD_DDR=0xF0;
     200:	80 ef       	ldi	r24, 0xF0	; 240
     202:	80 93 61 00 	sts	0x0061, r24
	KEYPAD_PORT=0x0F;
     206:	8f e0       	ldi	r24, 0x0F	; 15
     208:	80 93 62 00 	sts	0x0062, r24
     20c:	08 95       	ret

0000020e <LCDBusyLoop>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     20e:	8f ec       	ldi	r24, 0xCF	; 207
     210:	97 e0       	ldi	r25, 0x07	; 7
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	f1 f7       	brne	.-4      	; 0x212 <LCDBusyLoop+0x4>
     216:	00 c0       	rjmp	.+0      	; 0x218 <LCDBusyLoop+0xa>
     218:	00 00       	nop
}

void LCDBusyLoop()
{
	_delay_ms(8);
}
     21a:	08 95       	ret

0000021c <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
     21c:	28 2f       	mov	r18, r24
     21e:	22 95       	swap	r18
     220:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
     222:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
     224:	66 23       	and	r22, r22
     226:	11 f4       	brne	.+4      	; 0x22c <LCDByte+0x10>
CLEAR_RS();
     228:	d8 98       	cbi	0x1b, 0	; 27
     22a:	01 c0       	rjmp	.+2      	; 0x22e <LCDByte+0x12>
else
SET_RS();
     22c:	d8 9a       	sbi	0x1b, 0	; 27

//_delay_ms(0.500);		//tAS

SET_E();
     22e:	d9 9a       	sbi	0x1b, 1	; 27

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
     230:	9b b3       	in	r25, 0x1b	; 27
     232:	22 0f       	add	r18, r18
     234:	22 0f       	add	r18, r18
     236:	93 7c       	andi	r25, 0xC3	; 195
     238:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
     23a:	9b bb       	out	0x1b, r25	; 27

//_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
     23c:	d9 98       	cbi	0x1b, 1	; 27

//_delay_us(1);

//Send the lower nibble
SET_E();
     23e:	d9 9a       	sbi	0x1b, 1	; 27

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
     240:	9b b3       	in	r25, 0x1b	; 27
     242:	88 0f       	add	r24, r24
     244:	88 0f       	add	r24, r24
     246:	93 7c       	andi	r25, 0xC3	; 195
     248:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     24a:	8b bb       	out	0x1b, r24	; 27

//_delay_us(1);			//tEH

//SEND

CLEAR_E();
     24c:	d9 98       	cbi	0x1b, 1	; 27

//_delay_us(1);			//tEL

LCDBusyLoop();
     24e:	0e 94 07 01 	call	0x20e	; 0x20e <LCDBusyLoop>
}
     252:	08 95       	ret

00000254 <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	8c 01       	movw	r16, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     25e:	fc 01       	movw	r30, r24
     260:	80 81       	ld	r24, Z
     262:	88 23       	and	r24, r24
     264:	09 f1       	breq	.+66     	; 0x2a8 <LCDWriteString+0x54>
 {
 	//Custom Char Support
	if(*msg=='%')
     266:	85 32       	cpi	r24, 0x25	; 37
     268:	a9 f4       	brne	.+42     	; 0x294 <LCDWriteString+0x40>
	{
		msg++;
     26a:	e8 01       	movw	r28, r16
     26c:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
     26e:	f8 01       	movw	r30, r16
     270:	81 81       	ldd	r24, Z+1	; 0x01
     272:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
     274:	88 30       	cpi	r24, 0x08	; 8
     276:	20 f4       	brcc	.+8      	; 0x280 <LCDWriteString+0x2c>
		{
			LCDData(cc);
     278:	61 e0       	ldi	r22, 0x01	; 1
     27a:	0e 94 0e 01 	call	0x21c	; 0x21c <LCDByte>
     27e:	0e c0       	rjmp	.+28     	; 0x29c <LCDWriteString+0x48>
		}
		else
		{
			LCDData('%');
     280:	85 e2       	ldi	r24, 0x25	; 37
     282:	61 e0       	ldi	r22, 0x01	; 1
     284:	0e 94 0e 01 	call	0x21c	; 0x21c <LCDByte>
			LCDData(*msg);
     288:	f8 01       	movw	r30, r16
     28a:	81 81       	ldd	r24, Z+1	; 0x01
     28c:	61 e0       	ldi	r22, 0x01	; 1
     28e:	0e 94 0e 01 	call	0x21c	; 0x21c <LCDByte>
     292:	04 c0       	rjmp	.+8      	; 0x29c <LCDWriteString+0x48>
		}
	}
	else
	{
		LCDData(*msg);
     294:	61 e0       	ldi	r22, 0x01	; 1
     296:	0e 94 0e 01 	call	0x21c	; 0x21c <LCDByte>
     29a:	e8 01       	movw	r28, r16
	}
	msg++;
     29c:	8e 01       	movw	r16, r28
     29e:	0f 5f       	subi	r16, 0xFF	; 255
     2a0:	1f 4f       	sbci	r17, 0xFF	; 255
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     2a2:	89 81       	ldd	r24, Y+1	; 0x01
     2a4:	88 23       	and	r24, r24
     2a6:	f9 f6       	brne	.-66     	; 0x266 <LCDWriteString+0x12>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	1f 91       	pop	r17
     2ae:	0f 91       	pop	r16
     2b0:	08 95       	ret

000002b2 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     2b2:	ef 92       	push	r14
     2b4:	ff 92       	push	r15
     2b6:	0f 93       	push	r16
     2b8:	1f 93       	push	r17
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	00 d0       	rcall	.+0      	; 0x2c0 <LCDWriteInt+0xe>
     2c0:	00 d0       	rcall	.+0      	; 0x2c2 <LCDWriteInt+0x10>
     2c2:	0f 92       	push	r0
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
     2c8:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     2ca:	fe 01       	movw	r30, r28
     2cc:	31 96       	adiw	r30, 0x01	; 1
     2ce:	25 e0       	ldi	r18, 0x05	; 5
     2d0:	df 01       	movw	r26, r30
     2d2:	1d 92       	st	X+, r1
     2d4:	2a 95       	dec	r18
     2d6:	e9 f7       	brne	.-6      	; 0x2d2 <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
     2d8:	00 97       	sbiw	r24, 0x00	; 0
     2da:	61 f0       	breq	.+24     	; 0x2f4 <LCDWriteInt+0x42>
     2dc:	fe 01       	movw	r30, r28
     2de:	36 96       	adiw	r30, 0x06	; 6
	{
	str[i]=val%10;
     2e0:	2a e0       	ldi	r18, 0x0A	; 10
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	b9 01       	movw	r22, r18
     2e6:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__divmodhi4>
     2ea:	82 93       	st	-Z, r24
	val=val/10;
     2ec:	86 2f       	mov	r24, r22
     2ee:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     2f0:	00 97       	sbiw	r24, 0x00	; 0
     2f2:	c1 f7       	brne	.-16     	; 0x2e4 <LCDWriteInt+0x32>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     2f4:	bf ef       	ldi	r27, 0xFF	; 255
     2f6:	eb 16       	cp	r14, r27
     2f8:	bf ef       	ldi	r27, 0xFF	; 255
     2fa:	fb 06       	cpc	r15, r27
     2fc:	69 f4       	brne	.+26     	; 0x318 <LCDWriteInt+0x66>
		while(str[j]==0) j++;
     2fe:	29 81       	ldd	r18, Y+1	; 0x01
     300:	22 23       	and	r18, r18
     302:	79 f4       	brne	.+30     	; 0x322 <LCDWriteInt+0x70>
     304:	fe 01       	movw	r30, r28
     306:	32 96       	adiw	r30, 0x02	; 2
     308:	00 e0       	ldi	r16, 0x00	; 0
     30a:	10 e0       	ldi	r17, 0x00	; 0
     30c:	0f 5f       	subi	r16, 0xFF	; 255
     30e:	1f 4f       	sbci	r17, 0xFF	; 255
     310:	21 91       	ld	r18, Z+
     312:	22 23       	and	r18, r18
     314:	d9 f3       	breq	.-10     	; 0x30c <LCDWriteInt+0x5a>
     316:	07 c0       	rjmp	.+14     	; 0x326 <LCDWriteInt+0x74>
	else
		j=5-field_length;
     318:	05 e0       	ldi	r16, 0x05	; 5
     31a:	10 e0       	ldi	r17, 0x00	; 0
     31c:	0e 19       	sub	r16, r14
     31e:	1f 09       	sbc	r17, r15
     320:	02 c0       	rjmp	.+4      	; 0x326 <LCDWriteInt+0x74>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
     322:	00 e0       	ldi	r16, 0x00	; 0
     324:	10 e0       	ldi	r17, 0x00	; 0
	else
		j=5-field_length;

	if(val<0) LCDData('-');
     326:	99 23       	and	r25, r25
     328:	24 f4       	brge	.+8      	; 0x332 <LCDWriteInt+0x80>
     32a:	8d e2       	ldi	r24, 0x2D	; 45
     32c:	61 e0       	ldi	r22, 0x01	; 1
     32e:	0e 94 0e 01 	call	0x21c	; 0x21c <LCDByte>
	for(i=j;i<5;i++)
     332:	05 30       	cpi	r16, 0x05	; 5
     334:	11 05       	cpc	r17, r1
     336:	bc f4       	brge	.+46     	; 0x366 <LCDWriteInt+0xb4>
	}
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
     338:	e1 e0       	ldi	r30, 0x01	; 1
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	ec 0f       	add	r30, r28
     33e:	fd 1f       	adc	r31, r29
     340:	0e 0f       	add	r16, r30
     342:	1f 1f       	adc	r17, r31
     344:	0f 2e       	mov	r0, r31
     346:	f6 e0       	ldi	r31, 0x06	; 6
     348:	ef 2e       	mov	r14, r31
     34a:	ff 24       	eor	r15, r15
     34c:	f0 2d       	mov	r31, r0
     34e:	ec 0e       	add	r14, r28
     350:	fd 1e       	adc	r15, r29
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     352:	d8 01       	movw	r26, r16
     354:	8d 91       	ld	r24, X+
     356:	8d 01       	movw	r16, r26
     358:	80 5d       	subi	r24, 0xD0	; 208
     35a:	61 e0       	ldi	r22, 0x01	; 1
     35c:	0e 94 0e 01 	call	0x21c	; 0x21c <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     360:	0e 15       	cp	r16, r14
     362:	1f 05       	cpc	r17, r15
     364:	b1 f7       	brne	.-20     	; 0x352 <LCDWriteInt+0xa0>
	{
	LCDData(48+str[i]);
	}
}
     366:	0f 90       	pop	r0
     368:	0f 90       	pop	r0
     36a:	0f 90       	pop	r0
     36c:	0f 90       	pop	r0
     36e:	0f 90       	pop	r0
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	1f 91       	pop	r17
     376:	0f 91       	pop	r16
     378:	ff 90       	pop	r15
     37a:	ef 90       	pop	r14
     37c:	08 95       	ret

0000037e <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
     37e:	84 31       	cpi	r24, 0x14	; 20
     380:	78 f4       	brcc	.+30     	; 0x3a0 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
     382:	62 30       	cpi	r22, 0x02	; 2
     384:	31 f0       	breq	.+12     	; 0x392 <LCDGotoXY+0x14>
     386:	63 30       	cpi	r22, 0x03	; 3
     388:	31 f0       	breq	.+12     	; 0x396 <LCDGotoXY+0x18>
     38a:	61 30       	cpi	r22, 0x01	; 1
     38c:	29 f4       	brne	.+10     	; 0x398 <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
     38e:	80 64       	ori	r24, 0x40	; 64
			break;
     390:	03 c0       	rjmp	.+6      	; 0x398 <LCDGotoXY+0x1a>
		case 2:
			x+=0x14;
     392:	8c 5e       	subi	r24, 0xEC	; 236
			break;
     394:	01 c0       	rjmp	.+2      	; 0x398 <LCDGotoXY+0x1a>
		case 3:
			x+=0x54;
     396:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
     398:	80 68       	ori	r24, 0x80	; 128
     39a:	60 e0       	ldi	r22, 0x00	; 0
     39c:	0e 94 0e 01 	call	0x21c	; 0x21c <LCDByte>
     3a0:	08 95       	ret

000003a2 <LCDInit>:
{
	_delay_ms(8);
}

void LCDInit(uint8_t style)
{
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	c8 2f       	mov	r28, r24
     3ac:	8b e4       	ldi	r24, 0x4B	; 75
     3ae:	9d e1       	ldi	r25, 0x1D	; 29
     3b0:	01 97       	sbiw	r24, 0x01	; 1
     3b2:	f1 f7       	brne	.-4      	; 0x3b0 <LCDInit+0xe>
     3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <LCDInit+0x14>
     3b6:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
     3b8:	8a b3       	in	r24, 0x1a	; 26
     3ba:	8c 63       	ori	r24, 0x3C	; 60
     3bc:	8a bb       	out	0x1a, r24	; 26
	LCD_E_DDR|=(1<<LCD_E_POS);
     3be:	d1 9a       	sbi	0x1a, 1	; 26
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     3c0:	d0 9a       	sbi	0x1a, 0	; 26

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
     3c2:	8b b3       	in	r24, 0x1b	; 27
     3c4:	83 7c       	andi	r24, 0xC3	; 195
     3c6:	8b bb       	out	0x1b, r24	; 27
	CLEAR_E();
     3c8:	d9 98       	cbi	0x1b, 1	; 27
	CLEAR_RS();
     3ca:	d8 98       	cbi	0x1b, 0	; 27

	//Set 4-bit mode
	//_delay_us(0.3);	//tAS

	SET_E();
     3cc:	d9 9a       	sbi	0x1b, 1	; 27
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     3ce:	db 9a       	sbi	0x1b, 3	; 27
	//_delay_us(1);
	CLEAR_E();
     3d0:	d9 98       	cbi	0x1b, 1	; 27
	//_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     3d2:	0e 94 07 01 	call	0x20e	; 0x20e <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     3d6:	8c 2f       	mov	r24, r28
     3d8:	8c 60       	ori	r24, 0x0C	; 12
     3da:	60 e0       	ldi	r22, 0x00	; 0
     3dc:	0e 94 0e 01 	call	0x21c	; 0x21c <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     3e0:	88 e2       	ldi	r24, 0x28	; 40
     3e2:	60 e0       	ldi	r22, 0x00	; 0
     3e4:	0e 94 0e 01 	call	0x21c	; 0x21c <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
     3e8:	80 e4       	ldi	r24, 0x40	; 64
     3ea:	60 e0       	ldi	r22, 0x00	; 0
     3ec:	0e 94 0e 01 	call	0x21c	; 0x21c <LCDByte>
     3f0:	c4 e1       	ldi	r28, 0x14	; 20
     3f2:	d1 e0       	ldi	r29, 0x01	; 1
void LCDBusyLoop()
{
	_delay_ms(8);
}

void LCDInit(uint8_t style)
     3f4:	04 e5       	ldi	r16, 0x54	; 84
     3f6:	11 e0       	ldi	r17, 0x01	; 1
	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
     3f8:	89 91       	ld	r24, Y+
     3fa:	61 e0       	ldi	r22, 0x01	; 1
     3fc:	0e 94 0e 01 	call	0x21c	; 0x21c <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
     400:	c0 17       	cp	r28, r16
     402:	d1 07       	cpc	r29, r17
     404:	c9 f7       	brne	.-14     	; 0x3f8 <LCDInit+0x56>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	0e 94 bf 01 	call	0x37e	; 0x37e <LCDGotoXY>

}
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	1f 91       	pop	r17
     414:	0f 91       	pop	r16
     416:	08 95       	ret

00000418 <sMOIfaceKEYPAD_checkpress>:

static uint8_t nrf24l01_addr5[NRF24L01_ADDRSIZE] = NRF24L01_ADDRP5;
static uint8_t nrf24l01_addrtx[NRF24L01_ADDRSIZE] = NRF24L01_ADDRTX;

sc_integer sMOIfaceKEYPAD_checkpress() {
	return KEYPAD_Check();
     418:	0e 94 96 00 	call	0x12c	; 0x12c <KEYPAD_Check>
}
     41c:	68 2f       	mov	r22, r24
     41e:	70 e0       	ldi	r23, 0x00	; 0
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	08 95       	ret

00000426 <sMOIfaceKEYPAD_init>:
void sMOIfaceKEYPAD_init() {
	KEYPAD_Init();
     426:	0e 94 00 01 	call	0x200	; 0x200 <KEYPAD_Init>
}
     42a:	08 95       	ret

0000042c <sMOIfaceLCD_writeString>:
void sMOIfaceLCD_writeString(const sc_string chr) {
	LCDWriteString(chr);
     42c:	0e 94 2a 01 	call	0x254	; 0x254 <LCDWriteString>
}
     430:	08 95       	ret

00000432 <sMOIfaceLCD_writeStringXY>:
void sMOIfaceLCD_writeStringXY(const sc_string chr, const sc_integer x, const sc_integer y) {
     432:	0f 93       	push	r16
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	ec 01       	movw	r28, r24
     43a:	84 2f       	mov	r24, r20
     43c:	60 2f       	mov	r22, r16
	LCDWriteStringXY(x,y,chr);
     43e:	0e 94 bf 01 	call	0x37e	; 0x37e <LCDGotoXY>
     442:	ce 01       	movw	r24, r28
     444:	0e 94 2a 01 	call	0x254	; 0x254 <LCDWriteString>
}
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	0f 91       	pop	r16
     44e:	08 95       	ret

00000450 <sMOIfaceLCD_writeNumberXY>:
void sMOIfaceLCD_writeNumberXY(const sc_integer num, const sc_integer x, const sc_integer y, const sc_integer l) {
     450:	4f 92       	push	r4
     452:	5f 92       	push	r5
     454:	6f 92       	push	r6
     456:	7f 92       	push	r7
     458:	af 92       	push	r10
     45a:	bf 92       	push	r11
     45c:	cf 92       	push	r12
     45e:	df 92       	push	r13
     460:	ef 92       	push	r14
     462:	ff 92       	push	r15
     464:	2b 01       	movw	r4, r22
     466:	3c 01       	movw	r6, r24
     468:	82 2f       	mov	r24, r18
     46a:	6e 2d       	mov	r22, r14
     46c:	76 01       	movw	r14, r12
     46e:	65 01       	movw	r12, r10
	LCDWriteIntXY(x,y,num,l);
     470:	0e 94 bf 01 	call	0x37e	; 0x37e <LCDGotoXY>
     474:	c2 01       	movw	r24, r4
     476:	b6 01       	movw	r22, r12
     478:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCDWriteInt>
}
     47c:	ff 90       	pop	r15
     47e:	ef 90       	pop	r14
     480:	df 90       	pop	r13
     482:	cf 90       	pop	r12
     484:	bf 90       	pop	r11
     486:	af 90       	pop	r10
     488:	7f 90       	pop	r7
     48a:	6f 90       	pop	r6
     48c:	5f 90       	pop	r5
     48e:	4f 90       	pop	r4
     490:	08 95       	ret

00000492 <sMOIfaceLCD_clear>:
void sMOIfaceLCD_clear() {
	LCDClear();
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	0e 94 0e 01 	call	0x21c	; 0x21c <LCDByte>
     49a:	82 e0       	ldi	r24, 0x02	; 2
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	0e 94 0e 01 	call	0x21c	; 0x21c <LCDByte>
}
     4a2:	08 95       	ret

000004a4 <sMOIfaceLCD_init>:
void sMOIfaceLCD_init() {
	LCDInit(0);
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCDInit>
}
     4aa:	08 95       	ret

000004ac <sMOIfaceRF_getData>:

sc_string sMOIfaceRF_getData() {
     4ac:	0f 93       	push	r16
     4ae:	1f 93       	push	r17
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	0f 92       	push	r0
     4b6:	cd b7       	in	r28, 0x3d	; 61
     4b8:	de b7       	in	r29, 0x3e	; 62
	uint8_t pipe = 0;
     4ba:	19 82       	std	Y+1, r1	; 0x01
	if (nrf24l01_readready(&pipe)) {
     4bc:	ce 01       	movw	r24, r28
     4be:	01 96       	adiw	r24, 0x01	; 1
     4c0:	0e 94 22 06 	call	0xc44	; 0xc44 <nrf24l01_readready>
     4c4:	88 23       	and	r24, r24
     4c6:	99 f0       	breq	.+38     	; 0x4ee <sMOIfaceRF_getData+0x42>
		if (pipe==0) {
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	88 23       	and	r24, r24
     4cc:	99 f4       	brne	.+38     	; 0x4f4 <sMOIfaceRF_getData+0x48>
     4ce:	ee e5       	ldi	r30, 0x5E	; 94
     4d0:	f2 e0       	ldi	r31, 0x02	; 2
}
void sMOIfaceLCD_init() {
	LCDInit(0);
}

sc_string sMOIfaceRF_getData() {
     4d2:	cf 01       	movw	r24, r30
     4d4:	09 96       	adiw	r24, 0x09	; 9
	uint8_t pipe = 0;
	if (nrf24l01_readready(&pipe)) {
		if (pipe==0) {
		//clear buffer
		for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
     4d6:	11 92       	st	Z+, r1
     4d8:	e8 17       	cp	r30, r24
     4da:	f9 07       	cpc	r31, r25
     4dc:	e1 f7       	brne	.-8      	; 0x4d6 <sMOIfaceRF_getData+0x2a>
		
		//read buffer
		nrf24l01_read(pipe,bufferin);
     4de:	0e e5       	ldi	r16, 0x5E	; 94
     4e0:	12 e0       	ldi	r17, 0x02	; 2
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	b8 01       	movw	r22, r16
     4e6:	0e 94 34 06 	call	0xc68	; 0xc68 <nrf24l01_read>
		return bufferin;
     4ea:	c8 01       	movw	r24, r16
     4ec:	05 c0       	rjmp	.+10     	; 0x4f8 <sMOIfaceRF_getData+0x4c>
		}
	}
	return "";
     4ee:	84 e5       	ldi	r24, 0x54	; 84
     4f0:	91 e0       	ldi	r25, 0x01	; 1
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <sMOIfaceRF_getData+0x4c>
     4f4:	84 e5       	ldi	r24, 0x54	; 84
     4f6:	91 e0       	ldi	r25, 0x01	; 1
}
     4f8:	0f 90       	pop	r0
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	1f 91       	pop	r17
     500:	0f 91       	pop	r16
     502:	08 95       	ret

00000504 <sMOIfaceRF_sendMsg>:

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	9c 01       	movw	r18, r24
     50a:	c9 e6       	ldi	r28, 0x69	; 105
     50c:	d2 e0       	ldi	r29, 0x02	; 2
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	90 e0       	ldi	r25, 0x00	; 0
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
		if (i<strlen(msg)) bufferout[i]=msg[i];
     512:	a2 2f       	mov	r26, r18
     514:	b3 2f       	mov	r27, r19
     516:	fd 01       	movw	r30, r26
     518:	01 90       	ld	r0, Z+
     51a:	00 20       	and	r0, r0
     51c:	e9 f7       	brne	.-6      	; 0x518 <sMOIfaceRF_sendMsg+0x14>
     51e:	31 97       	sbiw	r30, 0x01	; 1
     520:	ea 1b       	sub	r30, r26
     522:	fb 0b       	sbc	r31, r27
     524:	8e 17       	cp	r24, r30
     526:	9f 07       	cpc	r25, r31
     528:	30 f4       	brcc	.+12     	; 0x536 <sMOIfaceRF_sendMsg+0x32>
		}
	}
	return "";
}

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
     52a:	f9 01       	movw	r30, r18
     52c:	e8 0f       	add	r30, r24
     52e:	f9 1f       	adc	r31, r25
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
		if (i<strlen(msg)) bufferout[i]=msg[i];
     530:	40 81       	ld	r20, Z
     532:	48 83       	st	Y, r20
     534:	01 c0       	rjmp	.+2      	; 0x538 <sMOIfaceRF_sendMsg+0x34>
		else bufferout[i] = 0;
     536:	18 82       	st	Y, r1
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	21 96       	adiw	r28, 0x01	; 1
	return "";
}

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
     53c:	89 30       	cpi	r24, 0x09	; 9
     53e:	91 05       	cpc	r25, r1
     540:	41 f7       	brne	.-48     	; 0x512 <sMOIfaceRF_sendMsg+0xe>
		if (i<strlen(msg)) bufferout[i]=msg[i];
		else bufferout[i] = 0;
	}
	
	//Set Address for Data
	nrf24l01_settxaddr(nrf24l01_addrtx);
     542:	85 e5       	ldi	r24, 0x55	; 85
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	0e 94 92 04 	call	0x924	; 0x924 <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     54a:	89 e6       	ldi	r24, 0x69	; 105
     54c:	92 e0       	ldi	r25, 0x02	; 2
     54e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <nrf24l01_write>
     552:	98 2f       	mov	r25, r24
     554:	ef ec       	ldi	r30, 0xCF	; 207
     556:	f7 e0       	ldi	r31, 0x07	; 7
     558:	31 97       	sbiw	r30, 0x01	; 1
     55a:	f1 f7       	brne	.-4      	; 0x558 <sMOIfaceRF_sendMsg+0x54>
     55c:	00 c0       	rjmp	.+0      	; 0x55e <sMOIfaceRF_sendMsg+0x5a>
     55e:	00 00       	nop
		}
	}
	return "";
}

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	91 30       	cpi	r25, 0x01	; 1
     564:	09 f0       	breq	.+2      	; 0x568 <sMOIfaceRF_sendMsg+0x64>
     566:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	08 95       	ret

0000056e <sMOIfaceRF_sendCheck>:

sc_boolean sMOIfaceRF_sendCheck() {
     56e:	e9 e6       	ldi	r30, 0x69	; 105
     570:	f2 e0       	ldi	r31, 0x02	; 2
     572:	cf 01       	movw	r24, r30
     574:	09 96       	adiw	r24, 0x09	; 9
	//set all buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferout[i] = 1;
     576:	21 e0       	ldi	r18, 0x01	; 1
     578:	21 93       	st	Z+, r18
     57a:	e8 17       	cp	r30, r24
     57c:	f9 07       	cpc	r31, r25
     57e:	e1 f7       	brne	.-8      	; 0x578 <sMOIfaceRF_sendCheck+0xa>
	//Set Address for check
	nrf24l01_settxaddr(nrf24l01_addr5);
     580:	8a e5       	ldi	r24, 0x5A	; 90
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	0e 94 92 04 	call	0x924	; 0x924 <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     588:	89 e6       	ldi	r24, 0x69	; 105
     58a:	92 e0       	ldi	r25, 0x02	; 2
     58c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <nrf24l01_write>
     590:	98 2f       	mov	r25, r24
     592:	ef ec       	ldi	r30, 0xCF	; 207
     594:	f7 e0       	ldi	r31, 0x07	; 7
     596:	31 97       	sbiw	r30, 0x01	; 1
     598:	f1 f7       	brne	.-4      	; 0x596 <sMOIfaceRF_sendCheck+0x28>
     59a:	00 c0       	rjmp	.+0      	; 0x59c <sMOIfaceRF_sendCheck+0x2e>
     59c:	00 00       	nop
	} else {
		return false;
	}
}

sc_boolean sMOIfaceRF_sendCheck() {
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	91 30       	cpi	r25, 0x01	; 1
     5a2:	09 f0       	breq	.+2      	; 0x5a6 <sMOIfaceRF_sendCheck+0x38>
     5a4:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     5a6:	08 95       	ret

000005a8 <sMOIfaceRF_getCheck>:

sc_boolean sMOIfaceRF_getCheck() {
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	0f 92       	push	r0
     5b2:	cd b7       	in	r28, 0x3d	; 61
     5b4:	de b7       	in	r29, 0x3e	; 62
	uint8_t pipe = 0;
     5b6:	19 82       	std	Y+1, r1	; 0x01
	if (nrf24l01_readready(&pipe)) {
     5b8:	ce 01       	movw	r24, r28
     5ba:	01 96       	adiw	r24, 0x01	; 1
     5bc:	0e 94 22 06 	call	0xc44	; 0xc44 <nrf24l01_readready>
     5c0:	88 23       	and	r24, r24
     5c2:	f1 f0       	breq	.+60     	; 0x600 <sMOIfaceRF_getCheck+0x58>
		if (pipe==5) {
     5c4:	89 81       	ldd	r24, Y+1	; 0x01
     5c6:	85 30       	cpi	r24, 0x05	; 5
     5c8:	e9 f4       	brne	.+58     	; 0x604 <sMOIfaceRF_getCheck+0x5c>
     5ca:	ee e5       	ldi	r30, 0x5E	; 94
     5cc:	f2 e0       	ldi	r31, 0x02	; 2
	} else {
		return false;
	}
}

sc_boolean sMOIfaceRF_getCheck() {
     5ce:	8f 01       	movw	r16, r30
     5d0:	07 5f       	subi	r16, 0xF7	; 247
     5d2:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t pipe = 0;
	if (nrf24l01_readready(&pipe)) {
		if (pipe==5) {
			//clear buffer
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
     5d4:	11 92       	st	Z+, r1
     5d6:	e0 17       	cp	r30, r16
     5d8:	f1 07       	cpc	r31, r17
     5da:	e1 f7       	brne	.-8      	; 0x5d4 <sMOIfaceRF_getCheck+0x2c>
			
			//read buffer
			nrf24l01_read(pipe,bufferin);
     5dc:	85 e0       	ldi	r24, 0x05	; 5
     5de:	6e e5       	ldi	r22, 0x5E	; 94
     5e0:	72 e0       	ldi	r23, 0x02	; 2
     5e2:	0e 94 34 06 	call	0xc68	; 0xc68 <nrf24l01_read>
			
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) if (bufferin[i]!=1) return false;
     5e6:	80 91 5e 02 	lds	r24, 0x025E
     5ea:	81 30       	cpi	r24, 0x01	; 1
     5ec:	69 f4       	brne	.+26     	; 0x608 <sMOIfaceRF_getCheck+0x60>
     5ee:	ef e5       	ldi	r30, 0x5F	; 95
     5f0:	f2 e0       	ldi	r31, 0x02	; 2
     5f2:	81 91       	ld	r24, Z+
     5f4:	81 30       	cpi	r24, 0x01	; 1
     5f6:	51 f4       	brne	.+20     	; 0x60c <sMOIfaceRF_getCheck+0x64>
     5f8:	e0 17       	cp	r30, r16
     5fa:	f1 07       	cpc	r31, r17
     5fc:	d1 f7       	brne	.-12     	; 0x5f2 <sMOIfaceRF_getCheck+0x4a>
     5fe:	07 c0       	rjmp	.+14     	; 0x60e <sMOIfaceRF_getCheck+0x66>
			return true;
		}
	}
	return false;
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	05 c0       	rjmp	.+10     	; 0x60e <sMOIfaceRF_getCheck+0x66>
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	03 c0       	rjmp	.+6      	; 0x60e <sMOIfaceRF_getCheck+0x66>
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
			
			//read buffer
			nrf24l01_read(pipe,bufferin);
			
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) if (bufferin[i]!=1) return false;
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	01 c0       	rjmp	.+2      	; 0x60e <sMOIfaceRF_getCheck+0x66>
     60c:	80 e0       	ldi	r24, 0x00	; 0
			return true;
		}
	}
	return false;
}
     60e:	0f 90       	pop	r0
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	1f 91       	pop	r17
     616:	0f 91       	pop	r16
     618:	08 95       	ret

0000061a <sMOIfaceRF_sendData>:

sc_boolean sMOIfaceRF_sendData(const sc_integer cmd, const sc_integer id, const sc_integer dish_id, const sc_integer amount) {
     61a:	af 92       	push	r10
     61c:	ef 92       	push	r14
     61e:	82 2f       	mov	r24, r18
     620:	e9 e6       	ldi	r30, 0x69	; 105
     622:	f2 e0       	ldi	r31, 0x02	; 2
     624:	af 01       	movw	r20, r30
     626:	47 5f       	subi	r20, 0xF7	; 247
     628:	5f 4f       	sbci	r21, 0xFF	; 255
	
	unsigned char num;
	unsigned char mod;
	//clear buffer
	for(uint8_t i=0; i<sizeof(bufferout); i++) bufferout[i] = 0;
     62a:	11 92       	st	Z+, r1
     62c:	e4 17       	cp	r30, r20
     62e:	f5 07       	cpc	r31, r21
     630:	e1 f7       	brne	.-8      	; 0x62a <sMOIfaceRF_sendData+0x10>
	
	//Lenh cho data: 1-goi mon, 2-huy mon, 3-thanh toan, 4-goi boi ban
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
     632:	60 5d       	subi	r22, 0xD0	; 208
     634:	60 93 69 02 	sts	0x0269, r22
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     638:	3a e0       	ldi	r19, 0x0A	; 10
     63a:	63 2f       	mov	r22, r19
     63c:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     640:	90 5d       	subi	r25, 0xD0	; 208
     642:	90 93 6b 02 	sts	0x026B, r25
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     646:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     64a:	90 5d       	subi	r25, 0xD0	; 208
     64c:	90 93 6a 02 	sts	0x026A, r25
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
		num/=10;
     650:	8e 2d       	mov	r24, r14
     652:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__udivmodqi4>
		bufferout[3+i]=mod+'0';
     656:	90 5d       	subi	r25, 0xD0	; 208
     658:	90 93 6e 02 	sts	0x026E, r25
	}
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
     65c:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__udivmodqi4>
		num/=10;
		bufferout[3+i]=mod+'0';
     660:	90 5d       	subi	r25, 0xD0	; 208
     662:	90 93 6d 02 	sts	0x026D, r25
	}
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
     666:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__udivmodqi4>
		num/=10;
		bufferout[3+i]=mod+'0';
     66a:	90 5d       	subi	r25, 0xD0	; 208
     66c:	90 93 6c 02 	sts	0x026C, r25
	}
	
	//Chuyen doi so luong mon an
	num=amount;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     670:	8a 2d       	mov	r24, r10
     672:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__udivmodqi4>
		num/=10;
		bufferout[6+i]=mod+'0';
     676:	90 5d       	subi	r25, 0xD0	; 208
     678:	90 93 70 02 	sts	0x0270, r25
	}
	
	//Chuyen doi so luong mon an
	num=amount;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     67c:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__udivmodqi4>
		num/=10;
		bufferout[6+i]=mod+'0';
     680:	90 5d       	subi	r25, 0xD0	; 208
     682:	90 93 6f 02 	sts	0x026F, r25
	}
	
	//Set Address for Data
	nrf24l01_settxaddr(nrf24l01_addrtx);
     686:	85 e5       	ldi	r24, 0x55	; 85
     688:	91 e0       	ldi	r25, 0x01	; 1
     68a:	0e 94 92 04 	call	0x924	; 0x924 <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     68e:	89 e6       	ldi	r24, 0x69	; 105
     690:	92 e0       	ldi	r25, 0x02	; 2
     692:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <nrf24l01_write>
     696:	98 2f       	mov	r25, r24
     698:	ef ec       	ldi	r30, 0xCF	; 207
     69a:	f7 e0       	ldi	r31, 0x07	; 7
     69c:	31 97       	sbiw	r30, 0x01	; 1
     69e:	f1 f7       	brne	.-4      	; 0x69c <sMOIfaceRF_sendData+0x82>
     6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <sMOIfaceRF_sendData+0x88>
     6a2:	00 00       	nop
		}
	}
	return false;
}

sc_boolean sMOIfaceRF_sendData(const sc_integer cmd, const sc_integer id, const sc_integer dish_id, const sc_integer amount) {
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	91 30       	cpi	r25, 0x01	; 1
     6a8:	09 f0       	breq	.+2      	; 0x6ac <sMOIfaceRF_sendData+0x92>
     6aa:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     6ac:	ef 90       	pop	r14
     6ae:	af 90       	pop	r10
     6b0:	08 95       	ret

000006b2 <sMO_setTimer>:


void sMO_setTimer(const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
	TimerSet(evid,time_ms);
     6b2:	0e 94 50 14 	call	0x28a0	; 0x28a0 <TimerSet>
}
     6b6:	08 95       	ret

000006b8 <sMO_unsetTimer>:
void sMO_unsetTimer(const sc_eventid evid) {
	TimerUnSet(evid);
     6b8:	0e 94 9c 14 	call	0x2938	; 0x2938 <TimerUnSet>
}
     6bc:	08 95       	ret

000006be <sMOIfaceRF_init>:

void sMOIfaceRF_init() {
	nrf24l01_init();
     6be:	0e 94 b0 06 	call	0xd60	; 0xd60 <nrf24l01_init>
}
     6c2:	08 95       	ret

000006c4 <main>:

int main(void)
{
	uint8_t i;
	DDRC=0x0F;
     6c4:	8f e0       	ldi	r24, 0x0F	; 15
     6c6:	84 bb       	out	0x14, r24	; 20
	PORTC=0x0F;
     6c8:	85 bb       	out	0x15, r24	; 21
	l=malloc(sizeof(SMO*)) ;
     6ca:	82 e0       	ldi	r24, 0x02	; 2
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	0e 94 78 15 	call	0x2af0	; 0x2af0 <malloc>
     6d2:	80 93 67 02 	sts	0x0267, r24
     6d6:	90 93 68 02 	sts	0x0268, r25
	TimerInit();
     6da:	0e 94 44 14 	call	0x2888	; 0x2888 <TimerInit>
	sMO_init(l);
     6de:	80 91 67 02 	lds	r24, 0x0267
     6e2:	90 91 68 02 	lds	r25, 0x0268
     6e6:	0e 94 6f 07 	call	0xede	; 0xede <sMO_init>
	sMO_enter(l);
     6ea:	80 91 67 02 	lds	r24, 0x0267
     6ee:	90 91 68 02 	lds	r25, 0x0268
     6f2:	0e 94 76 07 	call	0xeec	; 0xeec <sMO_enter>
	
	while(1)
	{
		sMO_runCycle(l);
     6f6:	80 91 67 02 	lds	r24, 0x0267
     6fa:	90 91 68 02 	lds	r25, 0x0268
     6fe:	0e 94 69 08 	call	0x10d2	; 0x10d2 <sMO_runCycle>
     702:	f9 cf       	rjmp	.-14     	; 0x6f6 <main+0x32>

00000704 <__vector_16>:
	}
}

ISR (TIMER0_OVF_vect) {
     704:	1f 92       	push	r1
     706:	0f 92       	push	r0
     708:	0f b6       	in	r0, 0x3f	; 63
     70a:	0f 92       	push	r0
     70c:	0b b6       	in	r0, 0x3b	; 59
     70e:	0f 92       	push	r0
     710:	11 24       	eor	r1, r1
     712:	2f 93       	push	r18
     714:	3f 93       	push	r19
     716:	4f 93       	push	r20
     718:	5f 93       	push	r21
     71a:	6f 93       	push	r22
     71c:	7f 93       	push	r23
     71e:	8f 93       	push	r24
     720:	9f 93       	push	r25
     722:	af 93       	push	r26
     724:	bf 93       	push	r27
     726:	ef 93       	push	r30
     728:	ff 93       	push	r31
	TCNT0=131;
     72a:	83 e8       	ldi	r24, 0x83	; 131
     72c:	82 bf       	out	0x32, r24	; 50
	TimerCheck(l);
     72e:	80 91 67 02 	lds	r24, 0x0267
     732:	90 91 68 02 	lds	r25, 0x0268
     736:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <TimerCheck>
     73a:	ff 91       	pop	r31
     73c:	ef 91       	pop	r30
     73e:	bf 91       	pop	r27
     740:	af 91       	pop	r26
     742:	9f 91       	pop	r25
     744:	8f 91       	pop	r24
     746:	7f 91       	pop	r23
     748:	6f 91       	pop	r22
     74a:	5f 91       	pop	r21
     74c:	4f 91       	pop	r20
     74e:	3f 91       	pop	r19
     750:	2f 91       	pop	r18
     752:	0f 90       	pop	r0
     754:	0b be       	out	0x3b, r0	; 59
     756:	0f 90       	pop	r0
     758:	0f be       	out	0x3f, r0	; 63
     75a:	0f 90       	pop	r0
     75c:	1f 90       	pop	r1
     75e:	18 95       	reti

00000760 <nrf24l01_readregister>:

/*
 * read one register
 */
uint8_t nrf24l01_readregister(uint8_t reg) {
	nrf24l01_CSNlo; //low CSN
     760:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     762:	8f 71       	andi	r24, 0x1F	; 31
     764:	0e 94 3f 14 	call	0x287e	; 0x287e <spi_writereadbyte>
    uint8_t result = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
     768:	8f ef       	ldi	r24, 0xFF	; 255
     76a:	0e 94 3f 14 	call	0x287e	; 0x287e <spi_writereadbyte>
    nrf24l01_CSNhi; //high CSN
     76e:	ae 9a       	sbi	0x15, 6	; 21
    return result;
}
     770:	08 95       	ret

00000772 <nrf24l01_readregisters>:

/*
 * read many registers
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
     772:	ff 92       	push	r15
     774:	0f 93       	push	r16
     776:	1f 93       	push	r17
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	06 2f       	mov	r16, r22
     77e:	f7 2e       	mov	r15, r23
     780:	14 2f       	mov	r17, r20
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
     782:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     784:	8f 71       	andi	r24, 0x1F	; 31
     786:	0e 94 3f 14 	call	0x287e	; 0x287e <spi_writereadbyte>
	for(i=0; i<len; i++)
     78a:	11 23       	and	r17, r17
     78c:	51 f0       	breq	.+20     	; 0x7a2 <nrf24l01_readregisters+0x30>
     78e:	c0 2f       	mov	r28, r16
     790:	df 2d       	mov	r29, r15
     792:	00 e0       	ldi	r16, 0x00	; 0
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
     794:	8f ef       	ldi	r24, 0xFF	; 255
     796:	0e 94 3f 14 	call	0x287e	; 0x287e <spi_writereadbyte>
     79a:	89 93       	st	Y+, r24
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     79c:	0f 5f       	subi	r16, 0xFF	; 255
     79e:	01 17       	cp	r16, r17
     7a0:	c9 f7       	brne	.-14     	; 0x794 <nrf24l01_readregisters+0x22>
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
	nrf24l01_CSNhi; //high CSN
     7a2:	ae 9a       	sbi	0x15, 6	; 21
}
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	1f 91       	pop	r17
     7aa:	0f 91       	pop	r16
     7ac:	ff 90       	pop	r15
     7ae:	08 95       	ret

000007b0 <nrf24l01_writeregister>:

/*
 * write one register
 */
void nrf24l01_writeregister(uint8_t reg, uint8_t value) {
     7b0:	cf 93       	push	r28
     7b2:	c6 2f       	mov	r28, r22
	nrf24l01_CSNlo; //low CSN
     7b4:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     7b6:	8f 71       	andi	r24, 0x1F	; 31
     7b8:	80 62       	ori	r24, 0x20	; 32
     7ba:	0e 94 3f 14 	call	0x287e	; 0x287e <spi_writereadbyte>
	spi_writereadbyte(value); //write register
     7be:	8c 2f       	mov	r24, r28
     7c0:	0e 94 3f 14 	call	0x287e	; 0x287e <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     7c4:	ae 9a       	sbi	0x15, 6	; 21
}
     7c6:	cf 91       	pop	r28
     7c8:	08 95       	ret

000007ca <nrf24l01_writeregisters>:

/*
 * write many registers
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
     7ca:	ff 92       	push	r15
     7cc:	0f 93       	push	r16
     7ce:	1f 93       	push	r17
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	06 2f       	mov	r16, r22
     7d6:	f7 2e       	mov	r15, r23
     7d8:	14 2f       	mov	r17, r20
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
     7da:	ae 98       	cbi	0x15, 6	; 21
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     7dc:	8f 71       	andi	r24, 0x1F	; 31
     7de:	80 62       	ori	r24, 0x20	; 32
     7e0:	0e 94 3f 14 	call	0x287e	; 0x287e <spi_writereadbyte>
	for(i=0; i<len; i++)
     7e4:	11 23       	and	r17, r17
     7e6:	49 f0       	breq	.+18     	; 0x7fa <nrf24l01_writeregisters+0x30>
     7e8:	c0 2f       	mov	r28, r16
     7ea:	df 2d       	mov	r29, r15
     7ec:	00 e0       	ldi	r16, 0x00	; 0
		 spi_writereadbyte(value[i]); //write register
     7ee:	89 91       	ld	r24, Y+
     7f0:	0e 94 3f 14 	call	0x287e	; 0x287e <spi_writereadbyte>
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     7f4:	0f 5f       	subi	r16, 0xFF	; 255
     7f6:	01 17       	cp	r16, r17
     7f8:	d1 f7       	brne	.-12     	; 0x7ee <nrf24l01_writeregisters+0x24>
		 spi_writereadbyte(value[i]); //write register
	nrf24l01_CSNhi; //high CSN
     7fa:	ae 9a       	sbi	0x15, 6	; 21
}
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	1f 91       	pop	r17
     802:	0f 91       	pop	r16
     804:	ff 90       	pop	r15
     806:	08 95       	ret

00000808 <nrf24l01_revaddress>:

/*
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	04 96       	adiw	r24, 0x04	; 4
     80e:	db 01       	movw	r26, r22
     810:	a2 0f       	add	r26, r18
     812:	b3 1f       	adc	r27, r19
     814:	fc 01       	movw	r30, r24
     816:	e2 1b       	sub	r30, r18
     818:	f3 0b       	sbc	r31, r19
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
     81a:	40 81       	ld	r20, Z
     81c:	4c 93       	st	X, r20
     81e:	2f 5f       	subi	r18, 0xFF	; 255
     820:	3f 4f       	sbci	r19, 0xFF	; 255
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
     822:	25 30       	cpi	r18, 0x05	; 5
     824:	31 05       	cpc	r19, r1
     826:	99 f7       	brne	.-26     	; 0x80e <nrf24l01_revaddress+0x6>
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
}
     828:	08 95       	ret

0000082a <nrf24l01_setrxaddr>:

/*
 * set rx address
 */
void nrf24l01_setrxaddr(uint8_t pipe, uint8_t *addr) {
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	00 d0       	rcall	.+0      	; 0x830 <nrf24l01_setrxaddr+0x6>
     830:	00 d0       	rcall	.+0      	; 0x832 <nrf24l01_setrxaddr+0x8>
     832:	0f 92       	push	r0
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
	if(pipe == 0) {
     838:	88 23       	and	r24, r24
     83a:	b1 f4       	brne	.+44     	; 0x868 <nrf24l01_setrxaddr+0x3e>
		memcpy(&nrf24l01_addr0, addr, NRF24L01_ADDRSIZE); //cache address
     83c:	a9 ed       	ldi	r26, 0xD9	; 217
     83e:	b1 e0       	ldi	r27, 0x01	; 1
     840:	fb 01       	movw	r30, r22
     842:	85 e0       	ldi	r24, 0x05	; 5
     844:	01 90       	ld	r0, Z+
     846:	0d 92       	st	X+, r0
     848:	81 50       	subi	r24, 0x01	; 1
     84a:	e1 f7       	brne	.-8      	; 0x844 <nrf24l01_setrxaddr+0x1a>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     84c:	cb 01       	movw	r24, r22
     84e:	be 01       	movw	r22, r28
     850:	6f 5f       	subi	r22, 0xFF	; 255
     852:	7f 4f       	sbci	r23, 0xFF	; 255
     854:	0e 94 04 04 	call	0x808	; 0x808 <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE);
     858:	8a e0       	ldi	r24, 0x0A	; 10
     85a:	be 01       	movw	r22, r28
     85c:	6f 5f       	subi	r22, 0xFF	; 255
     85e:	7f 4f       	sbci	r23, 0xFF	; 255
     860:	45 e0       	ldi	r20, 0x05	; 5
     862:	0e 94 e5 03 	call	0x7ca	; 0x7ca <nrf24l01_writeregisters>
     866:	56 c0       	rjmp	.+172    	; 0x914 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 1) {
     868:	81 30       	cpi	r24, 0x01	; 1
     86a:	b1 f4       	brne	.+44     	; 0x898 <nrf24l01_setrxaddr+0x6e>
		memcpy(&nrf24l01_addr1, addr, NRF24L01_ADDRSIZE); //cache address
     86c:	ae ed       	ldi	r26, 0xDE	; 222
     86e:	b1 e0       	ldi	r27, 0x01	; 1
     870:	fb 01       	movw	r30, r22
     872:	85 e0       	ldi	r24, 0x05	; 5
     874:	01 90       	ld	r0, Z+
     876:	0d 92       	st	X+, r0
     878:	81 50       	subi	r24, 0x01	; 1
     87a:	e1 f7       	brne	.-8      	; 0x874 <nrf24l01_setrxaddr+0x4a>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     87c:	cb 01       	movw	r24, r22
     87e:	be 01       	movw	r22, r28
     880:	6f 5f       	subi	r22, 0xFF	; 255
     882:	7f 4f       	sbci	r23, 0xFF	; 255
     884:	0e 94 04 04 	call	0x808	; 0x808 <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P1, addrrev, NRF24L01_ADDRSIZE);
     888:	8b e0       	ldi	r24, 0x0B	; 11
     88a:	be 01       	movw	r22, r28
     88c:	6f 5f       	subi	r22, 0xFF	; 255
     88e:	7f 4f       	sbci	r23, 0xFF	; 255
     890:	45 e0       	ldi	r20, 0x05	; 5
     892:	0e 94 e5 03 	call	0x7ca	; 0x7ca <nrf24l01_writeregisters>
     896:	3e c0       	rjmp	.+124    	; 0x914 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 2) {
     898:	82 30       	cpi	r24, 0x02	; 2
     89a:	71 f4       	brne	.+28     	; 0x8b8 <nrf24l01_setrxaddr+0x8e>
		memcpy(&nrf24l01_addr2, addr, NRF24L01_ADDRSIZE); //cache address
     89c:	a3 ee       	ldi	r26, 0xE3	; 227
     89e:	b1 e0       	ldi	r27, 0x01	; 1
     8a0:	fb 01       	movw	r30, r22
     8a2:	85 e0       	ldi	r24, 0x05	; 5
     8a4:	01 90       	ld	r0, Z+
     8a6:	0d 92       	st	X+, r0
     8a8:	81 50       	subi	r24, 0x01	; 1
     8aa:	e1 f7       	brne	.-8      	; 0x8a4 <nrf24l01_setrxaddr+0x7a>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P2, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     8ac:	8c e0       	ldi	r24, 0x0C	; 12
     8ae:	fb 01       	movw	r30, r22
     8b0:	64 81       	ldd	r22, Z+4	; 0x04
     8b2:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
     8b6:	2e c0       	rjmp	.+92     	; 0x914 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 3) {
     8b8:	83 30       	cpi	r24, 0x03	; 3
     8ba:	71 f4       	brne	.+28     	; 0x8d8 <nrf24l01_setrxaddr+0xae>
		memcpy(&nrf24l01_addr3, addr, NRF24L01_ADDRSIZE); //cache address
     8bc:	a8 ee       	ldi	r26, 0xE8	; 232
     8be:	b1 e0       	ldi	r27, 0x01	; 1
     8c0:	fb 01       	movw	r30, r22
     8c2:	85 e0       	ldi	r24, 0x05	; 5
     8c4:	01 90       	ld	r0, Z+
     8c6:	0d 92       	st	X+, r0
     8c8:	81 50       	subi	r24, 0x01	; 1
     8ca:	e1 f7       	brne	.-8      	; 0x8c4 <nrf24l01_setrxaddr+0x9a>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P3, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     8cc:	8d e0       	ldi	r24, 0x0D	; 13
     8ce:	fb 01       	movw	r30, r22
     8d0:	64 81       	ldd	r22, Z+4	; 0x04
     8d2:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
     8d6:	1e c0       	rjmp	.+60     	; 0x914 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 4) {
     8d8:	84 30       	cpi	r24, 0x04	; 4
     8da:	71 f4       	brne	.+28     	; 0x8f8 <nrf24l01_setrxaddr+0xce>
		memcpy(&nrf24l01_addr4, addr, NRF24L01_ADDRSIZE); //cache address
     8dc:	ad ee       	ldi	r26, 0xED	; 237
     8de:	b1 e0       	ldi	r27, 0x01	; 1
     8e0:	fb 01       	movw	r30, r22
     8e2:	85 e0       	ldi	r24, 0x05	; 5
     8e4:	01 90       	ld	r0, Z+
     8e6:	0d 92       	st	X+, r0
     8e8:	81 50       	subi	r24, 0x01	; 1
     8ea:	e1 f7       	brne	.-8      	; 0x8e4 <nrf24l01_setrxaddr+0xba>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P4, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     8ec:	8e e0       	ldi	r24, 0x0E	; 14
     8ee:	fb 01       	movw	r30, r22
     8f0:	64 81       	ldd	r22, Z+4	; 0x04
     8f2:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
     8f6:	0e c0       	rjmp	.+28     	; 0x914 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 5) {
     8f8:	85 30       	cpi	r24, 0x05	; 5
     8fa:	61 f4       	brne	.+24     	; 0x914 <nrf24l01_setrxaddr+0xea>
		memcpy(&nrf24l01_addr5, addr, NRF24L01_ADDRSIZE); //cache address
     8fc:	a2 ef       	ldi	r26, 0xF2	; 242
     8fe:	b1 e0       	ldi	r27, 0x01	; 1
     900:	fb 01       	movw	r30, r22
     902:	01 90       	ld	r0, Z+
     904:	0d 92       	st	X+, r0
     906:	81 50       	subi	r24, 0x01	; 1
     908:	e1 f7       	brne	.-8      	; 0x902 <nrf24l01_setrxaddr+0xd8>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P5, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     90a:	8f e0       	ldi	r24, 0x0F	; 15
     90c:	fb 01       	movw	r30, r22
     90e:	64 81       	ldd	r22, Z+4	; 0x04
     910:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
	}
}
     914:	0f 90       	pop	r0
     916:	0f 90       	pop	r0
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	08 95       	ret

00000924 <nrf24l01_settxaddr>:

/*
 * set tx address
 */
void nrf24l01_settxaddr(uint8_t *addr) {
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	00 d0       	rcall	.+0      	; 0x92a <nrf24l01_settxaddr+0x6>
     92a:	00 d0       	rcall	.+0      	; 0x92c <nrf24l01_settxaddr+0x8>
     92c:	0f 92       	push	r0
     92e:	cd b7       	in	r28, 0x3d	; 61
     930:	de b7       	in	r29, 0x3e	; 62
	memcpy(&nrf24l01_addrtx, addr, NRF24L01_ADDRSIZE); //cache address
     932:	a7 ef       	ldi	r26, 0xF7	; 247
     934:	b1 e0       	ldi	r27, 0x01	; 1
     936:	e8 2f       	mov	r30, r24
     938:	f9 2f       	mov	r31, r25
     93a:	25 e0       	ldi	r18, 0x05	; 5
     93c:	01 90       	ld	r0, Z+
     93e:	0d 92       	st	X+, r0
     940:	21 50       	subi	r18, 0x01	; 1
     942:	e1 f7       	brne	.-8      	; 0x93c <nrf24l01_settxaddr+0x18>
	uint8_t addrrev[NRF24L01_ADDRSIZE];
	nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     944:	be 01       	movw	r22, r28
     946:	6f 5f       	subi	r22, 0xFF	; 255
     948:	7f 4f       	sbci	r23, 0xFF	; 255
     94a:	0e 94 04 04 	call	0x808	; 0x808 <nrf24l01_revaddress>
	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE); //set rx address for ack on pipe 0
     94e:	8a e0       	ldi	r24, 0x0A	; 10
     950:	be 01       	movw	r22, r28
     952:	6f 5f       	subi	r22, 0xFF	; 255
     954:	7f 4f       	sbci	r23, 0xFF	; 255
     956:	45 e0       	ldi	r20, 0x05	; 5
     958:	0e 94 e5 03 	call	0x7ca	; 0x7ca <nrf24l01_writeregisters>
	nrf24l01_writeregisters(NRF24L01_REG_TX_ADDR, addrrev, NRF24L01_ADDRSIZE); //set tx address
     95c:	80 e1       	ldi	r24, 0x10	; 16
     95e:	be 01       	movw	r22, r28
     960:	6f 5f       	subi	r22, 0xFF	; 255
     962:	7f 4f       	sbci	r23, 0xFF	; 255
     964:	45 e0       	ldi	r20, 0x05	; 5
     966:	0e 94 e5 03 	call	0x7ca	; 0x7ca <nrf24l01_writeregisters>
}
     96a:	0f 90       	pop	r0
     96c:	0f 90       	pop	r0
     96e:	0f 90       	pop	r0
     970:	0f 90       	pop	r0
     972:	0f 90       	pop	r0
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	08 95       	ret

0000097a <nrf24l01_flushRXfifo>:

/*
 * flush RX fifo
 */
void nrf24l01_flushRXfifo() {
	nrf24l01_CSNlo; //low CSN
     97a:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_FLUSH_RX);
     97c:	82 ee       	ldi	r24, 0xE2	; 226
     97e:	0e 94 3f 14 	call	0x287e	; 0x287e <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     982:	ae 9a       	sbi	0x15, 6	; 21
}
     984:	08 95       	ret

00000986 <nrf24l01_flushTXfifo>:

/*
 * flush TX fifo
 */
void nrf24l01_flushTXfifo() {
	nrf24l01_CSNlo; //low CSN
     986:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_FLUSH_TX);
     988:	81 ee       	ldi	r24, 0xE1	; 225
     98a:	0e 94 3f 14 	call	0x287e	; 0x287e <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     98e:	ae 9a       	sbi	0x15, 6	; 21
}
     990:	08 95       	ret

00000992 <nrf24l01_setRX>:

/*
 * set chip as RX
 */
void nrf24l01_setRX() {
	nrf24l01_setrxaddr(0, nrf24l01_addr0); //restore pipe 0 address
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	69 ed       	ldi	r22, 0xD9	; 217
     996:	71 e0       	ldi	r23, 0x01	; 1
     998:	0e 94 15 04 	call	0x82a	; 0x82a <nrf24l01_setrxaddr>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PRIM_RX)); //prx mode
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	0e 94 b0 03 	call	0x760	; 0x760 <nrf24l01_readregister>
     9a2:	68 2f       	mov	r22, r24
     9a4:	61 60       	ori	r22, 0x01	; 1
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	0e 94 b0 03 	call	0x760	; 0x760 <nrf24l01_readregister>
     9b2:	68 2f       	mov	r22, r24
     9b4:	62 60       	ori	r22, 0x02	; 2
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     9bc:	87 e0       	ldi	r24, 0x07	; 7
     9be:	60 e7       	ldi	r22, 0x70	; 112
     9c0:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
	nrf24l01_flushRXfifo(); //flush rx fifo
     9c4:	0e 94 bd 04 	call	0x97a	; 0x97a <nrf24l01_flushRXfifo>
	nrf24l01_flushTXfifo(); //flush tx fifo
     9c8:	0e 94 c3 04 	call	0x986	; 0x986 <nrf24l01_flushTXfifo>
	nrf24l01_CEhi; //start listening
     9cc:	af 9a       	sbi	0x15, 7	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9ce:	82 e3       	ldi	r24, 0x32	; 50
     9d0:	8a 95       	dec	r24
     9d2:	f1 f7       	brne	.-4      	; 0x9d0 <nrf24l01_setRX+0x3e>
	_delay_us(150); //wait for the radio to power up
}
     9d4:	08 95       	ret

000009d6 <nrf24l01_setTX>:

/*
 * set chip as TX
 */
void nrf24l01_setTX() {
	nrf24l01_CElo; //stop listening
     9d6:	af 98       	cbi	0x15, 7	; 21
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PRIM_RX)); //ptx mode
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	0e 94 b0 03 	call	0x760	; 0x760 <nrf24l01_readregister>
     9de:	68 2f       	mov	r22, r24
     9e0:	6e 7f       	andi	r22, 0xFE	; 254
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	0e 94 b0 03 	call	0x760	; 0x760 <nrf24l01_readregister>
     9ee:	68 2f       	mov	r22, r24
     9f0:	62 60       	ori	r22, 0x02	; 2
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     9f8:	87 e0       	ldi	r24, 0x07	; 7
     9fa:	60 e7       	ldi	r22, 0x70	; 112
     9fc:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
	nrf24l01_flushTXfifo(); //flush tx fifo
     a00:	0e 94 c3 04 	call	0x986	; 0x986 <nrf24l01_flushTXfifo>
     a04:	82 e3       	ldi	r24, 0x32	; 50
     a06:	8a 95       	dec	r24
     a08:	f1 f7       	brne	.-4      	; 0xa06 <nrf24l01_setTX+0x30>
	_delay_us(150); //wait for the radio to power up
}
     a0a:	08 95       	ret

00000a0c <nrf24l01_getstatus>:
/*
 * get status register
 */
uint8_t nrf24l01_getstatus() {
	uint8_t status = 0;
	nrf24l01_CSNlo; //low CSN
     a0c:	ae 98       	cbi	0x15, 6	; 21
	status = spi_writereadbyte(NRF24L01_CMD_NOP); //get status, send NOP request
     a0e:	8f ef       	ldi	r24, 0xFF	; 255
     a10:	0e 94 3f 14 	call	0x287e	; 0x287e <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     a14:	ae 9a       	sbi	0x15, 6	; 21
	return status;
}
     a16:	08 95       	ret

00000a18 <nrf24l01_printinfo>:

#if NRF24L01_PRINTENABLE == 1
/*
 * print info
 */
void nrf24l01_printinfo(void(*prints)(const char *), void(*printc)(unsigned char data)) {
     a18:	ef 92       	push	r14
     a1a:	ff 92       	push	r15
     a1c:	0f 93       	push	r16
     a1e:	1f 93       	push	r17
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
     a24:	cd b7       	in	r28, 0x3d	; 61
     a26:	de b7       	in	r29, 0x3e	; 62
     a28:	c4 56       	subi	r28, 0x64	; 100
     a2a:	d0 40       	sbci	r29, 0x00	; 0
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	f8 94       	cli
     a30:	de bf       	out	0x3e, r29	; 62
     a32:	0f be       	out	0x3f, r0	; 63
     a34:	cd bf       	out	0x3d, r28	; 61
     a36:	7c 01       	movw	r14, r24
	char buff[100];
	prints("info\r\n");
     a38:	8f e5       	ldi	r24, 0x5F	; 95
     a3a:	91 e0       	ldi	r25, 0x01	; 1
     a3c:	f7 01       	movw	r30, r14
     a3e:	09 95       	icall
	sprintf(buff,"STATUS: %02X\r\n", nrf24l01_getstatus()); prints(buff);
     a40:	0e 94 06 05 	call	0xa0c	; 0xa0c <nrf24l01_getstatus>
     a44:	00 d0       	rcall	.+0      	; 0xa46 <nrf24l01_printinfo+0x2e>
     a46:	00 d0       	rcall	.+0      	; 0xa48 <nrf24l01_printinfo+0x30>
     a48:	00 d0       	rcall	.+0      	; 0xa4a <nrf24l01_printinfo+0x32>
     a4a:	ed b7       	in	r30, 0x3d	; 61
     a4c:	fe b7       	in	r31, 0x3e	; 62
     a4e:	31 96       	adiw	r30, 0x01	; 1
     a50:	8e 01       	movw	r16, r28
     a52:	0f 5f       	subi	r16, 0xFF	; 255
     a54:	1f 4f       	sbci	r17, 0xFF	; 255
     a56:	ad b7       	in	r26, 0x3d	; 61
     a58:	be b7       	in	r27, 0x3e	; 62
     a5a:	12 96       	adiw	r26, 0x02	; 2
     a5c:	1c 93       	st	X, r17
     a5e:	0e 93       	st	-X, r16
     a60:	11 97       	sbiw	r26, 0x01	; 1
     a62:	26 e6       	ldi	r18, 0x66	; 102
     a64:	31 e0       	ldi	r19, 0x01	; 1
     a66:	33 83       	std	Z+3, r19	; 0x03
     a68:	22 83       	std	Z+2, r18	; 0x02
     a6a:	84 83       	std	Z+4, r24	; 0x04
     a6c:	15 82       	std	Z+5, r1	; 0x05
     a6e:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <sprintf>
     a72:	8d b7       	in	r24, 0x3d	; 61
     a74:	9e b7       	in	r25, 0x3e	; 62
     a76:	06 96       	adiw	r24, 0x06	; 6
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	f8 94       	cli
     a7c:	9e bf       	out	0x3e, r25	; 62
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	8d bf       	out	0x3d, r24	; 61
     a82:	c8 01       	movw	r24, r16
     a84:	f7 01       	movw	r30, r14
     a86:	09 95       	icall
	sprintf(buff,"CONFIG: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_CONFIG)); prints(buff);
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	0e 94 b0 03 	call	0x760	; 0x760 <nrf24l01_readregister>
     a8e:	00 d0       	rcall	.+0      	; 0xa90 <nrf24l01_printinfo+0x78>
     a90:	00 d0       	rcall	.+0      	; 0xa92 <nrf24l01_printinfo+0x7a>
     a92:	00 d0       	rcall	.+0      	; 0xa94 <nrf24l01_printinfo+0x7c>
     a94:	ed b7       	in	r30, 0x3d	; 61
     a96:	fe b7       	in	r31, 0x3e	; 62
     a98:	31 96       	adiw	r30, 0x01	; 1
     a9a:	ad b7       	in	r26, 0x3d	; 61
     a9c:	be b7       	in	r27, 0x3e	; 62
     a9e:	12 96       	adiw	r26, 0x02	; 2
     aa0:	1c 93       	st	X, r17
     aa2:	0e 93       	st	-X, r16
     aa4:	11 97       	sbiw	r26, 0x01	; 1
     aa6:	25 e7       	ldi	r18, 0x75	; 117
     aa8:	31 e0       	ldi	r19, 0x01	; 1
     aaa:	33 83       	std	Z+3, r19	; 0x03
     aac:	22 83       	std	Z+2, r18	; 0x02
     aae:	84 83       	std	Z+4, r24	; 0x04
     ab0:	15 82       	std	Z+5, r1	; 0x05
     ab2:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <sprintf>
     ab6:	8d b7       	in	r24, 0x3d	; 61
     ab8:	9e b7       	in	r25, 0x3e	; 62
     aba:	06 96       	adiw	r24, 0x06	; 6
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	f8 94       	cli
     ac0:	9e bf       	out	0x3e, r25	; 62
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	8d bf       	out	0x3d, r24	; 61
     ac6:	c8 01       	movw	r24, r16
     ac8:	f7 01       	movw	r30, r14
     aca:	09 95       	icall
	sprintf(buff,"RF_CH: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_CH)); prints(buff);
     acc:	85 e0       	ldi	r24, 0x05	; 5
     ace:	0e 94 b0 03 	call	0x760	; 0x760 <nrf24l01_readregister>
     ad2:	00 d0       	rcall	.+0      	; 0xad4 <nrf24l01_printinfo+0xbc>
     ad4:	00 d0       	rcall	.+0      	; 0xad6 <nrf24l01_printinfo+0xbe>
     ad6:	00 d0       	rcall	.+0      	; 0xad8 <nrf24l01_printinfo+0xc0>
     ad8:	ed b7       	in	r30, 0x3d	; 61
     ada:	fe b7       	in	r31, 0x3e	; 62
     adc:	31 96       	adiw	r30, 0x01	; 1
     ade:	ad b7       	in	r26, 0x3d	; 61
     ae0:	be b7       	in	r27, 0x3e	; 62
     ae2:	12 96       	adiw	r26, 0x02	; 2
     ae4:	1c 93       	st	X, r17
     ae6:	0e 93       	st	-X, r16
     ae8:	11 97       	sbiw	r26, 0x01	; 1
     aea:	24 e8       	ldi	r18, 0x84	; 132
     aec:	31 e0       	ldi	r19, 0x01	; 1
     aee:	33 83       	std	Z+3, r19	; 0x03
     af0:	22 83       	std	Z+2, r18	; 0x02
     af2:	84 83       	std	Z+4, r24	; 0x04
     af4:	15 82       	std	Z+5, r1	; 0x05
     af6:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <sprintf>
     afa:	8d b7       	in	r24, 0x3d	; 61
     afc:	9e b7       	in	r25, 0x3e	; 62
     afe:	06 96       	adiw	r24, 0x06	; 6
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	f8 94       	cli
     b04:	9e bf       	out	0x3e, r25	; 62
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	8d bf       	out	0x3d, r24	; 61
     b0a:	c8 01       	movw	r24, r16
     b0c:	f7 01       	movw	r30, r14
     b0e:	09 95       	icall
	sprintf(buff,"RF_SETUP: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_SETUP)); prints(buff);
     b10:	86 e0       	ldi	r24, 0x06	; 6
     b12:	0e 94 b0 03 	call	0x760	; 0x760 <nrf24l01_readregister>
     b16:	00 d0       	rcall	.+0      	; 0xb18 <nrf24l01_printinfo+0x100>
     b18:	00 d0       	rcall	.+0      	; 0xb1a <nrf24l01_printinfo+0x102>
     b1a:	00 d0       	rcall	.+0      	; 0xb1c <nrf24l01_printinfo+0x104>
     b1c:	ed b7       	in	r30, 0x3d	; 61
     b1e:	fe b7       	in	r31, 0x3e	; 62
     b20:	31 96       	adiw	r30, 0x01	; 1
     b22:	ad b7       	in	r26, 0x3d	; 61
     b24:	be b7       	in	r27, 0x3e	; 62
     b26:	12 96       	adiw	r26, 0x02	; 2
     b28:	1c 93       	st	X, r17
     b2a:	0e 93       	st	-X, r16
     b2c:	11 97       	sbiw	r26, 0x01	; 1
     b2e:	22 e9       	ldi	r18, 0x92	; 146
     b30:	31 e0       	ldi	r19, 0x01	; 1
     b32:	33 83       	std	Z+3, r19	; 0x03
     b34:	22 83       	std	Z+2, r18	; 0x02
     b36:	84 83       	std	Z+4, r24	; 0x04
     b38:	15 82       	std	Z+5, r1	; 0x05
     b3a:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <sprintf>
     b3e:	8d b7       	in	r24, 0x3d	; 61
     b40:	9e b7       	in	r25, 0x3e	; 62
     b42:	06 96       	adiw	r24, 0x06	; 6
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	f8 94       	cli
     b48:	9e bf       	out	0x3e, r25	; 62
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	8d bf       	out	0x3d, r24	; 61
     b4e:	c8 01       	movw	r24, r16
     b50:	f7 01       	movw	r30, r14
     b52:	09 95       	icall
	sprintf(buff,"EN_AA: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_AA)); prints(buff);
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	0e 94 b0 03 	call	0x760	; 0x760 <nrf24l01_readregister>
     b5a:	00 d0       	rcall	.+0      	; 0xb5c <nrf24l01_printinfo+0x144>
     b5c:	00 d0       	rcall	.+0      	; 0xb5e <nrf24l01_printinfo+0x146>
     b5e:	00 d0       	rcall	.+0      	; 0xb60 <nrf24l01_printinfo+0x148>
     b60:	ed b7       	in	r30, 0x3d	; 61
     b62:	fe b7       	in	r31, 0x3e	; 62
     b64:	31 96       	adiw	r30, 0x01	; 1
     b66:	ad b7       	in	r26, 0x3d	; 61
     b68:	be b7       	in	r27, 0x3e	; 62
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	1c 93       	st	X, r17
     b6e:	0e 93       	st	-X, r16
     b70:	11 97       	sbiw	r26, 0x01	; 1
     b72:	23 ea       	ldi	r18, 0xA3	; 163
     b74:	31 e0       	ldi	r19, 0x01	; 1
     b76:	33 83       	std	Z+3, r19	; 0x03
     b78:	22 83       	std	Z+2, r18	; 0x02
     b7a:	84 83       	std	Z+4, r24	; 0x04
     b7c:	15 82       	std	Z+5, r1	; 0x05
     b7e:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <sprintf>
     b82:	8d b7       	in	r24, 0x3d	; 61
     b84:	9e b7       	in	r25, 0x3e	; 62
     b86:	06 96       	adiw	r24, 0x06	; 6
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	f8 94       	cli
     b8c:	9e bf       	out	0x3e, r25	; 62
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	8d bf       	out	0x3d, r24	; 61
     b92:	c8 01       	movw	r24, r16
     b94:	f7 01       	movw	r30, r14
     b96:	09 95       	icall
	sprintf(buff,"EN_RXADDR: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_RXADDR)); prints(buff);
     b98:	82 e0       	ldi	r24, 0x02	; 2
     b9a:	0e 94 b0 03 	call	0x760	; 0x760 <nrf24l01_readregister>
     b9e:	00 d0       	rcall	.+0      	; 0xba0 <nrf24l01_printinfo+0x188>
     ba0:	00 d0       	rcall	.+0      	; 0xba2 <nrf24l01_printinfo+0x18a>
     ba2:	00 d0       	rcall	.+0      	; 0xba4 <nrf24l01_printinfo+0x18c>
     ba4:	ed b7       	in	r30, 0x3d	; 61
     ba6:	fe b7       	in	r31, 0x3e	; 62
     ba8:	31 96       	adiw	r30, 0x01	; 1
     baa:	ad b7       	in	r26, 0x3d	; 61
     bac:	be b7       	in	r27, 0x3e	; 62
     bae:	12 96       	adiw	r26, 0x02	; 2
     bb0:	1c 93       	st	X, r17
     bb2:	0e 93       	st	-X, r16
     bb4:	11 97       	sbiw	r26, 0x01	; 1
     bb6:	21 eb       	ldi	r18, 0xB1	; 177
     bb8:	31 e0       	ldi	r19, 0x01	; 1
     bba:	33 83       	std	Z+3, r19	; 0x03
     bbc:	22 83       	std	Z+2, r18	; 0x02
     bbe:	84 83       	std	Z+4, r24	; 0x04
     bc0:	15 82       	std	Z+5, r1	; 0x05
     bc2:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <sprintf>
     bc6:	8d b7       	in	r24, 0x3d	; 61
     bc8:	9e b7       	in	r25, 0x3e	; 62
     bca:	06 96       	adiw	r24, 0x06	; 6
     bcc:	0f b6       	in	r0, 0x3f	; 63
     bce:	f8 94       	cli
     bd0:	9e bf       	out	0x3e, r25	; 62
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	8d bf       	out	0x3d, r24	; 61
     bd6:	c8 01       	movw	r24, r16
     bd8:	f7 01       	movw	r30, r14
     bda:	09 95       	icall
	sprintf(buff,"OBSERVE_TX: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_OBSERVE_TX)); prints(buff);
     bdc:	88 e0       	ldi	r24, 0x08	; 8
     bde:	0e 94 b0 03 	call	0x760	; 0x760 <nrf24l01_readregister>
     be2:	00 d0       	rcall	.+0      	; 0xbe4 <nrf24l01_printinfo+0x1cc>
     be4:	00 d0       	rcall	.+0      	; 0xbe6 <nrf24l01_printinfo+0x1ce>
     be6:	00 d0       	rcall	.+0      	; 0xbe8 <nrf24l01_printinfo+0x1d0>
     be8:	ed b7       	in	r30, 0x3d	; 61
     bea:	fe b7       	in	r31, 0x3e	; 62
     bec:	31 96       	adiw	r30, 0x01	; 1
     bee:	ad b7       	in	r26, 0x3d	; 61
     bf0:	be b7       	in	r27, 0x3e	; 62
     bf2:	12 96       	adiw	r26, 0x02	; 2
     bf4:	1c 93       	st	X, r17
     bf6:	0e 93       	st	-X, r16
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	23 ec       	ldi	r18, 0xC3	; 195
     bfc:	31 e0       	ldi	r19, 0x01	; 1
     bfe:	33 83       	std	Z+3, r19	; 0x03
     c00:	22 83       	std	Z+2, r18	; 0x02
     c02:	84 83       	std	Z+4, r24	; 0x04
     c04:	15 82       	std	Z+5, r1	; 0x05
     c06:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <sprintf>
     c0a:	8d b7       	in	r24, 0x3d	; 61
     c0c:	9e b7       	in	r25, 0x3e	; 62
     c0e:	06 96       	adiw	r24, 0x06	; 6
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	f8 94       	cli
     c14:	9e bf       	out	0x3e, r25	; 62
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	8d bf       	out	0x3d, r24	; 61
     c1a:	c8 01       	movw	r24, r16
     c1c:	f7 01       	movw	r30, r14
     c1e:	09 95       	icall
	prints("\r\n");
     c20:	86 ed       	ldi	r24, 0xD6	; 214
     c22:	91 e0       	ldi	r25, 0x01	; 1
     c24:	f7 01       	movw	r30, r14
     c26:	09 95       	icall
}
     c28:	cc 59       	subi	r28, 0x9C	; 156
     c2a:	df 4f       	sbci	r29, 0xFF	; 255
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	f8 94       	cli
     c30:	de bf       	out	0x3e, r29	; 62
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	cd bf       	out	0x3d, r28	; 61
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	08 95       	ret

00000c44 <nrf24l01_readready>:
}

/*
 * check if there is data ready
 */
uint8_t nrf24l01_readready(uint8_t* pipe) {
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	ec 01       	movw	r28, r24
    uint8_t status = nrf24l01_getstatus();
     c4a:	0e 94 06 05 	call	0xa0c	; 0xa0c <nrf24l01_getstatus>
    uint8_t ret = status & (1<<NRF24L01_REG_RX_DR);
    if(ret) {
     c4e:	98 2f       	mov	r25, r24
     c50:	90 74       	andi	r25, 0x40	; 64
     c52:	86 ff       	sbrs	r24, 6
     c54:	05 c0       	rjmp	.+10     	; 0xc60 <nrf24l01_readready+0x1c>
		//get the pipe number
		if(pipe)
     c56:	20 97       	sbiw	r28, 0x00	; 0
     c58:	19 f0       	breq	.+6      	; 0xc60 <nrf24l01_readready+0x1c>
			*pipe = (status >> NRF24L01_REG_RX_P_NO) & 0b111;
     c5a:	86 95       	lsr	r24
     c5c:	87 70       	andi	r24, 0x07	; 7
     c5e:	88 83       	st	Y, r24
    }
    return ret;
}
     c60:	89 2f       	mov	r24, r25
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	08 95       	ret

00000c68 <nrf24l01_read>:

/*
 * get data
 */
void nrf24l01_read(uint8_t pipe,uint8_t *data) {
     c68:	0f 93       	push	r16
     c6a:	1f 93       	push	r17
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	06 2f       	mov	r16, r22
     c72:	17 2f       	mov	r17, r23
	uint8_t i = 0;
	//read rx register
	nrf24l01_CSNlo; //low CSN
     c74:	ae 98       	cbi	0x15, 6	; 21
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
     c76:	81 e6       	ldi	r24, 0x61	; 97
     c78:	0e 94 3f 14 	call	0x287e	; 0x287e <spi_writereadbyte>
     c7c:	c0 2f       	mov	r28, r16
     c7e:	d1 2f       	mov	r29, r17
	//Thay doi lai command, lay PAYLOAD va write ACK
	//spi_writereadbyte(NRF24L01_CMD_W_ACK_PAYLOAD | pipe);
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     c80:	10 e0       	ldi	r17, 0x00	; 0
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
     c82:	8f ef       	ldi	r24, 0xFF	; 255
     c84:	0e 94 3f 14 	call	0x287e	; 0x287e <spi_writereadbyte>
     c88:	89 93       	st	Y+, r24
	//read rx register
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
	//Thay doi lai command, lay PAYLOAD va write ACK
	//spi_writereadbyte(NRF24L01_CMD_W_ACK_PAYLOAD | pipe);
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     c8a:	1f 5f       	subi	r17, 0xFF	; 255
     c8c:	19 30       	cpi	r17, 0x09	; 9
     c8e:	c9 f7       	brne	.-14     	; 0xc82 <nrf24l01_read+0x1a>
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
    nrf24l01_CSNhi; //high CSN
     c90:	ae 9a       	sbi	0x15, 6	; 21
    //reset register
    nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR));
     c92:	87 e0       	ldi	r24, 0x07	; 7
     c94:	60 e4       	ldi	r22, 0x40	; 64
     c96:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
    //handle ack payload receipt
	if (nrf24l01_getstatus() & (1<<NRF24L01_REG_TX_DS))
     c9a:	0e 94 06 05 	call	0xa0c	; 0xa0c <nrf24l01_getstatus>
     c9e:	85 ff       	sbrs	r24, 5
     ca0:	04 c0       	rjmp	.+8      	; 0xcaa <nrf24l01_read+0x42>
		nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_TX_DS));
     ca2:	87 e0       	ldi	r24, 0x07	; 7
     ca4:	60 e2       	ldi	r22, 0x20	; 32
     ca6:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
}
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	1f 91       	pop	r17
     cb0:	0f 91       	pop	r16
     cb2:	08 95       	ret

00000cb4 <nrf24l01_write>:

/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
     cb4:	0f 93       	push	r16
     cb6:	1f 93       	push	r17
     cb8:	cf 93       	push	r28
     cba:	df 93       	push	r29
     cbc:	08 2f       	mov	r16, r24
     cbe:	19 2f       	mov	r17, r25
	uint8_t i = 0;
	uint8_t ret = 0;

	//set tx mode
	nrf24l01_setTX();
     cc0:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <nrf24l01_setTX>

	//write data
	nrf24l01_CSNlo; //low CSN
     cc4:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
     cc6:	80 ea       	ldi	r24, 0xA0	; 160
     cc8:	0e 94 3f 14 	call	0x287e	; 0x287e <spi_writereadbyte>
     ccc:	c0 2f       	mov	r28, r16
     cce:	d1 2f       	mov	r29, r17
     cd0:	19 e0       	ldi	r17, 0x09	; 9
	for (i=0; i<NRF24L01_PAYLOAD; i++)
		spi_writereadbyte(data[i]);
     cd2:	89 91       	ld	r24, Y+
     cd4:	0e 94 3f 14 	call	0x287e	; 0x287e <spi_writereadbyte>
     cd8:	11 50       	subi	r17, 0x01	; 1
	nrf24l01_setTX();

	//write data
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
	for (i=0; i<NRF24L01_PAYLOAD; i++)
     cda:	d9 f7       	brne	.-10     	; 0xcd2 <nrf24l01_write+0x1e>
		spi_writereadbyte(data[i]);
	nrf24l01_CSNhi; //high CSN
     cdc:	ae 9a       	sbi	0x15, 6	; 21

	//start transmission
	nrf24l01_CEhi; //high CE
     cde:	af 9a       	sbi	0x15, 7	; 21
     ce0:	85 e0       	ldi	r24, 0x05	; 5
     ce2:	8a 95       	dec	r24
     ce4:	f1 f7       	brne	.-4      	; 0xce2 <nrf24l01_write+0x2e>
	_delay_us(15);
	nrf24l01_CElo; //low CE
     ce6:	af 98       	cbi	0x15, 7	; 21
     ce8:	83 e0       	ldi	r24, 0x03	; 3
     cea:	8a 95       	dec	r24
     cec:	f1 f7       	brne	.-4      	; 0xcea <nrf24l01_write+0x36>
     cee:	00 00       	nop

	//stop if max_retries reached or send is ok
	do {
		_delay_us(10);
	}
	while( !(nrf24l01_getstatus() & (1<<NRF24L01_REG_MAX_RT | 1<<NRF24L01_REG_TX_DS)) );
     cf0:	0e 94 06 05 	call	0xa0c	; 0xa0c <nrf24l01_getstatus>
     cf4:	80 73       	andi	r24, 0x30	; 48
     cf6:	c1 f3       	breq	.-16     	; 0xce8 <nrf24l01_write+0x34>

	if(nrf24l01_getstatus() & 1<<NRF24L01_REG_TX_DS)
     cf8:	0e 94 06 05 	call	0xa0c	; 0xa0c <nrf24l01_getstatus>
     cfc:	c8 2f       	mov	r28, r24
		ret = 1;

	//reset PLOS_CNT
	nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH);
     cfe:	85 e0       	ldi	r24, 0x05	; 5
     d00:	6c e4       	ldi	r22, 0x4C	; 76
     d02:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>

	//power down
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PWR_UP));
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	0e 94 b0 03 	call	0x760	; 0x760 <nrf24l01_readregister>
     d0c:	68 2f       	mov	r22, r24
     d0e:	6d 7f       	andi	r22, 0xFD	; 253
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>

	//set rx mode
	nrf24l01_setRX();
     d16:	0e 94 c9 04 	call	0x992	; 0x992 <nrf24l01_setRX>
/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
	uint8_t i = 0;
	uint8_t ret = 0;
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	c5 ff       	sbrs	r28, 5
     d1e:	80 e0       	ldi	r24, 0x00	; 0

	//set rx mode
	nrf24l01_setRX();

	return ret;
}
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	1f 91       	pop	r17
     d26:	0f 91       	pop	r16
     d28:	08 95       	ret

00000d2a <nrf24l01_setpalevel>:

/*
 * set power level
 */
void nrf24l01_setpalevel() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP);
     d2a:	86 e0       	ldi	r24, 0x06	; 6
     d2c:	0e 94 b0 03 	call	0x760	; 0x760 <nrf24l01_readregister>
  setup &= ~((1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH));

  if (NRF24L01_RF24_PA == NRF24L01_RF24_PA_MAX) {
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
     d30:	68 2f       	mov	r22, r24
     d32:	66 60       	ori	r22, 0x06	; 6
  } else {
	  //default is max power
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     d34:	86 e0       	ldi	r24, 0x06	; 6
     d36:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
}
     d3a:	08 95       	ret

00000d3c <nrf24l01_setdatarate>:

/*
 * set datarate
 */
void nrf24l01_setdatarate() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP) ;
     d3c:	86 e0       	ldi	r24, 0x06	; 6
     d3e:	0e 94 b0 03 	call	0x760	; 0x760 <nrf24l01_readregister>

  setup &= ~((1<<NRF24L01_REG_RF_DR_LOW) | (1<<NRF24L01_REG_RF_DR_HIGH));
     d42:	68 2f       	mov	r22, r24
     d44:	67 7d       	andi	r22, 0xD7	; 215
    } else {
    	//default is 1Mbps
    }
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     d46:	86 e0       	ldi	r24, 0x06	; 6
     d48:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
}
     d4c:	08 95       	ret

00000d4e <nrf24l01_setcrclength>:

/*
 * set crc length
 */
void nrf24l01_setcrclength() {
  uint8_t config = nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~((1<<NRF24L01_REG_CRCO) | (1<<NRF24L01_REG_EN_CRC));
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	0e 94 b0 03 	call	0x760	; 0x760 <nrf24l01_readregister>
	  //nothing
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_8) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_16) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
	  config |= (1<<NRF24L01_REG_CRCO);
     d54:	68 2f       	mov	r22, r24
     d56:	6c 60       	ori	r22, 0x0C	; 12
  } else {
	  //default is disabled
  }

  nrf24l01_writeregister(NRF24L01_REG_CONFIG, config);
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
}
     d5e:	08 95       	ret

00000d60 <nrf24l01_init>:
/*
 * init nrf24l01
 */
void nrf24l01_init() {
	//setup port
	NRF24L01_DDR |= (1<<NRF24L01_CSN); //output
     d60:	a6 9a       	sbi	0x14, 6	; 20
	NRF24L01_DDR |= (1<<NRF24L01_CE); //output
     d62:	a7 9a       	sbi	0x14, 7	; 20

    spi_init(); //init spi
     d64:	0e 94 34 14 	call	0x2868	; 0x2868 <spi_init>

    nrf24l01_CElo; //low CE
     d68:	af 98       	cbi	0x15, 7	; 21
    nrf24l01_CSNhi; //high CSN
     d6a:	ae 9a       	sbi	0x15, 6	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d6c:	81 ee       	ldi	r24, 0xE1	; 225
     d6e:	94 e0       	ldi	r25, 0x04	; 4
     d70:	01 97       	sbiw	r24, 0x01	; 1
     d72:	f1 f7       	brne	.-4      	; 0xd70 <nrf24l01_init+0x10>
     d74:	00 c0       	rjmp	.+0      	; 0xd76 <nrf24l01_init+0x16>
     d76:	00 00       	nop

    _delay_ms(5); //wait for the radio to init

    nrf24l01_setpalevel(); //set power level
     d78:	0e 94 95 06 	call	0xd2a	; 0xd2a <nrf24l01_setpalevel>
    nrf24l01_setdatarate(); //set data rate
     d7c:	0e 94 9e 06 	call	0xd3c	; 0xd3c <nrf24l01_setdatarate>
    nrf24l01_setcrclength(); //set crc length
     d80:	0e 94 a7 06 	call	0xd4e	; 0xd4e <nrf24l01_setcrclength>
    nrf24l01_writeregister(NRF24L01_REG_SETUP_RETR, NRF24L01_RETR); // set retries
     d84:	84 e0       	ldi	r24, 0x04	; 4
     d86:	67 e4       	ldi	r22, 0x47	; 71
     d88:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_DYNPD, 0); //disable dynamic payloads
     d8c:	8c e1       	ldi	r24, 0x1C	; 28
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH); //set RF channel
     d94:	85 e0       	ldi	r24, 0x05	; 5
     d96:	6c e4       	ldi	r22, 0x4C	; 76
     d98:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>

	//payload size
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P0, NRF24L01_PAYLOAD);
     d9c:	81 e1       	ldi	r24, 0x11	; 17
     d9e:	69 e0       	ldi	r22, 0x09	; 9
     da0:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P1, NRF24L01_PAYLOAD);
     da4:	82 e1       	ldi	r24, 0x12	; 18
     da6:	69 e0       	ldi	r22, 0x09	; 9
     da8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P2, NRF24L01_PAYLOAD);
     dac:	83 e1       	ldi	r24, 0x13	; 19
     dae:	69 e0       	ldi	r22, 0x09	; 9
     db0:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P3, NRF24L01_PAYLOAD);
     db4:	84 e1       	ldi	r24, 0x14	; 20
     db6:	69 e0       	ldi	r22, 0x09	; 9
     db8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P4, NRF24L01_PAYLOAD);
     dbc:	85 e1       	ldi	r24, 0x15	; 21
     dbe:	69 e0       	ldi	r22, 0x09	; 9
     dc0:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P5, NRF24L01_PAYLOAD);
     dc4:	86 e1       	ldi	r24, 0x16	; 22
     dc6:	69 e0       	ldi	r22, 0x09	; 9
     dc8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
	#endif

	//enable pipe
	nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, 0);
     dcc:	82 e0       	ldi	r24, 0x02	; 2
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P0));
     dd4:	82 e0       	ldi	r24, 0x02	; 2
     dd6:	0e 94 b0 03 	call	0x760	; 0x760 <nrf24l01_readregister>
     dda:	68 2f       	mov	r22, r24
     ddc:	61 60       	ori	r22, 0x01	; 1
     dde:	82 e0       	ldi	r24, 0x02	; 2
     de0:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P1));
     de4:	82 e0       	ldi	r24, 0x02	; 2
     de6:	0e 94 b0 03 	call	0x760	; 0x760 <nrf24l01_readregister>
     dea:	68 2f       	mov	r22, r24
     dec:	62 60       	ori	r22, 0x02	; 2
     dee:	82 e0       	ldi	r24, 0x02	; 2
     df0:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P2));
     df4:	82 e0       	ldi	r24, 0x02	; 2
     df6:	0e 94 b0 03 	call	0x760	; 0x760 <nrf24l01_readregister>
     dfa:	68 2f       	mov	r22, r24
     dfc:	64 60       	ori	r22, 0x04	; 4
     dfe:	82 e0       	ldi	r24, 0x02	; 2
     e00:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P3));
     e04:	82 e0       	ldi	r24, 0x02	; 2
     e06:	0e 94 b0 03 	call	0x760	; 0x760 <nrf24l01_readregister>
     e0a:	68 2f       	mov	r22, r24
     e0c:	68 60       	ori	r22, 0x08	; 8
     e0e:	82 e0       	ldi	r24, 0x02	; 2
     e10:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P4));
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	0e 94 b0 03 	call	0x760	; 0x760 <nrf24l01_readregister>
     e1a:	68 2f       	mov	r22, r24
     e1c:	60 61       	ori	r22, 0x10	; 16
     e1e:	82 e0       	ldi	r24, 0x02	; 2
     e20:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P5));
     e24:	82 e0       	ldi	r24, 0x02	; 2
     e26:	0e 94 b0 03 	call	0x760	; 0x760 <nrf24l01_readregister>
     e2a:	68 2f       	mov	r22, r24
     e2c:	60 62       	ori	r22, 0x20	; 32
     e2e:	82 e0       	ldi	r24, 0x02	; 2
     e30:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
	#endif

	//auto ack
	#if NRF24L01_ACK == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P0));
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	0e 94 b0 03 	call	0x760	; 0x760 <nrf24l01_readregister>
     e3a:	68 2f       	mov	r22, r24
     e3c:	61 60       	ori	r22, 0x01	; 1
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P1));
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	0e 94 b0 03 	call	0x760	; 0x760 <nrf24l01_readregister>
     e4a:	68 2f       	mov	r22, r24
     e4c:	62 60       	ori	r22, 0x02	; 2
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P2));
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	0e 94 b0 03 	call	0x760	; 0x760 <nrf24l01_readregister>
     e5a:	68 2f       	mov	r22, r24
     e5c:	64 60       	ori	r22, 0x04	; 4
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P3));
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	0e 94 b0 03 	call	0x760	; 0x760 <nrf24l01_readregister>
     e6a:	68 2f       	mov	r22, r24
     e6c:	68 60       	ori	r22, 0x08	; 8
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P4));
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	0e 94 b0 03 	call	0x760	; 0x760 <nrf24l01_readregister>
     e7a:	68 2f       	mov	r22, r24
     e7c:	60 61       	ori	r22, 0x10	; 16
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P5));
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	0e 94 b0 03 	call	0x760	; 0x760 <nrf24l01_readregister>
     e8a:	68 2f       	mov	r22, r24
     e8c:	60 62       	ori	r22, 0x20	; 32
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P4));
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P5));
	#endif

	//rx address
	nrf24l01_setrxaddr(0, nrf24l01_addr0);
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	69 ed       	ldi	r22, 0xD9	; 217
     e98:	71 e0       	ldi	r23, 0x01	; 1
     e9a:	0e 94 15 04 	call	0x82a	; 0x82a <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(1, nrf24l01_addr1);
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	6e ed       	ldi	r22, 0xDE	; 222
     ea2:	71 e0       	ldi	r23, 0x01	; 1
     ea4:	0e 94 15 04 	call	0x82a	; 0x82a <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(2, nrf24l01_addr2);
     ea8:	82 e0       	ldi	r24, 0x02	; 2
     eaa:	63 ee       	ldi	r22, 0xE3	; 227
     eac:	71 e0       	ldi	r23, 0x01	; 1
     eae:	0e 94 15 04 	call	0x82a	; 0x82a <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(3, nrf24l01_addr3);
     eb2:	83 e0       	ldi	r24, 0x03	; 3
     eb4:	68 ee       	ldi	r22, 0xE8	; 232
     eb6:	71 e0       	ldi	r23, 0x01	; 1
     eb8:	0e 94 15 04 	call	0x82a	; 0x82a <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(4, nrf24l01_addr4);
     ebc:	84 e0       	ldi	r24, 0x04	; 4
     ebe:	6d ee       	ldi	r22, 0xED	; 237
     ec0:	71 e0       	ldi	r23, 0x01	; 1
     ec2:	0e 94 15 04 	call	0x82a	; 0x82a <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(5, nrf24l01_addr5);
     ec6:	85 e0       	ldi	r24, 0x05	; 5
     ec8:	62 ef       	ldi	r22, 0xF2	; 242
     eca:	71 e0       	ldi	r23, 0x01	; 1
     ecc:	0e 94 15 04 	call	0x82a	; 0x82a <nrf24l01_setrxaddr>

	//tx address
	nrf24l01_settxaddr(nrf24l01_addrtx);
     ed0:	87 ef       	ldi	r24, 0xF7	; 247
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	0e 94 92 04 	call	0x924	; 0x924 <nrf24l01_settxaddr>

	//set rx mode
	nrf24l01_setRX();
     ed8:	0e 94 c9 04 	call	0x992	; 0x992 <nrf24l01_setRX>
}
     edc:	08 95       	ret

00000ede <sMO_init>:
static void clearInEvents(SMO* handle);
static void clearOutEvents(SMO* handle);


void sMO_init(SMO* handle)
{
     ede:	fc 01       	movw	r30, r24
	int i;

	for (i = 0; i < SMO_MAX_ORTHOGONAL_STATES; ++i)
		handle->stateConfVector[i] = SMO_last_state;
     ee0:	88 e1       	ldi	r24, 0x18	; 24
     ee2:	80 83       	st	Z, r24
     ee4:	81 83       	std	Z+1, r24	; 0x01
	
	
	handle->stateConfVectorPosition = 0;
     ee6:	13 82       	std	Z+3, r1	; 0x03
     ee8:	12 82       	std	Z+2, r1	; 0x02

	// TODO: initialize all events ...
	// TODO: initialize all variables ... (set default values - here or inenter sequence ?!?)

}
     eea:	08 95       	ret

00000eec <sMO_enter>:

void sMO_enter(SMO* handle)
{
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	ec 01       	movw	r28, r24
	sMO_entryaction(handle);
	/* Default enter sequence for region main region */
	/* Default react sequence for initial entry  */
	/* Default enter sequence for state on */
	/* Entry action for state 'on'. */
	handle->iface.lightOn = bool_true;
     ef4:	11 e0       	ldi	r17, 0x01	; 1
     ef6:	1d a7       	lds	r17, 0x7d
	/* Default enter sequence for region r1 */
	/* Default react sequence for initial entry  */
	/* Default enter sequence for state Init */
	/* Entry action for state 'Init'. */
	sMO_setTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) , 3 * 1000, bool_false);
     ef8:	c8 96       	adiw	r24, 0x38	; 56
     efa:	48 eb       	ldi	r20, 0xB8	; 184
     efc:	5b e0       	ldi	r21, 0x0B	; 11
     efe:	60 e0       	ldi	r22, 0x00	; 0
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	0e 94 59 03 	call	0x6b2	; 0x6b2 <sMO_setTimer>
	handle->iface.tableId = 1;
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	a0 e0       	ldi	r26, 0x00	; 0
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	8a ab       	sts	0x5a, r24
     f12:	9b ab       	sts	0x5b, r25
     f14:	ac ab       	sts	0x5c, r26
     f16:	bd ab       	sts	0x5d, r27
	sMOIfaceLCD_init();
     f18:	0e 94 52 02 	call	0x4a4	; 0x4a4 <sMOIfaceLCD_init>
	sMOIfaceKEYPAD_init();
     f1c:	0e 94 13 02 	call	0x426	; 0x426 <sMOIfaceKEYPAD_init>
	sMOIfaceRF_init();
     f20:	0e 94 5f 03 	call	0x6be	; 0x6be <sMOIfaceRF_init>
	sMOIfaceLCD_clear();
     f24:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceLCD_clear>
	sMOIfaceLCD_writeString("Waitting...");
     f28:	8c ef       	ldi	r24, 0xFC	; 252
     f2a:	91 e0       	ldi	r25, 0x01	; 1
     f2c:	0e 94 16 02 	call	0x42c	; 0x42c <sMOIfaceLCD_writeString>
	handle->stateConfVector[0] = SMO_main_region_on_r1_Init;
     f30:	18 83       	st	Y, r17
	handle->stateConfVectorPosition = 0;
     f32:	1b 82       	std	Y+3, r1	; 0x03
     f34:	1a 82       	std	Y+2, r1	; 0x02
}
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	1f 91       	pop	r17
     f3c:	08 95       	ret

00000f3e <sMO_exit>:

void sMO_exit(SMO* handle)
{
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	ec 01       	movw	r28, r24
	/* Default exit sequence for statechart SMO */
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of main region) at position 0... */
	switch(handle->stateConfVector[ 0 ]) {
     f44:	88 81       	ld	r24, Y
     f46:	83 30       	cpi	r24, 0x03	; 3
     f48:	69 f0       	breq	.+26     	; 0xf64 <sMO_exit+0x26>
     f4a:	84 30       	cpi	r24, 0x04	; 4
     f4c:	81 f0       	breq	.+32     	; 0xf6e <sMO_exit+0x30>
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	91 f4       	brne	.+36     	; 0xf76 <sMO_exit+0x38>
		case SMO_main_region_on_r1_Init : {
			/* Default exit sequence for state Init */
			handle->stateConfVector[0] = SMO_last_state;
     f52:	88 e1       	ldi	r24, 0x18	; 24
     f54:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
     f56:	1b 82       	std	Y+3, r1	; 0x03
     f58:	1a 82       	std	Y+2, r1	; 0x02
			/* Exit action for state 'Init'. */
			sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) );		
     f5a:	ce 01       	movw	r24, r28
     f5c:	c8 96       	adiw	r24, 0x38	; 56
     f5e:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <sMO_unsetTimer>
			break;
     f62:	09 c0       	rjmp	.+18     	; 0xf76 <sMO_exit+0x38>
		}
		case SMO_main_region_on_r1_Running_keypad_CheckKey : {
			/* Default exit sequence for state CheckKey */
			handle->stateConfVector[0] = SMO_last_state;
     f64:	88 e1       	ldi	r24, 0x18	; 24
     f66:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
     f68:	1b 82       	std	Y+3, r1	; 0x03
     f6a:	1a 82       	std	Y+2, r1	; 0x02
			break;
     f6c:	04 c0       	rjmp	.+8      	; 0xf76 <sMO_exit+0x38>
		}
		case SMO_main_region_on_r1_Running_keypad_CheckKeyDown : {
			/* Default exit sequence for state CheckKeyDown */
			handle->stateConfVector[0] = SMO_last_state;
     f6e:	88 e1       	ldi	r24, 0x18	; 24
     f70:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
     f72:	1b 82       	std	Y+3, r1	; 0x03
     f74:	1a 82       	std	Y+2, r1	; 0x02
			break;
		}
		default: break;
	}
	/* Handle exit of all possible states (of main region) at position 1... */
	switch(handle->stateConfVector[ 1 ]) {
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	8e 30       	cpi	r24, 0x0E	; 14
     f7a:	09 f4       	brne	.+2      	; 0xf7e <sMO_exit+0x40>
     f7c:	65 c0       	rjmp	.+202    	; 0x1048 <sMO_exit+0x10a>
     f7e:	8f 30       	cpi	r24, 0x0F	; 15
     f80:	b0 f4       	brcc	.+44     	; 0xfae <sMO_exit+0x70>
     f82:	89 30       	cpi	r24, 0x09	; 9
     f84:	09 f4       	brne	.+2      	; 0xf88 <sMO_exit+0x4a>
     f86:	44 c0       	rjmp	.+136    	; 0x1010 <sMO_exit+0xd2>
     f88:	8a 30       	cpi	r24, 0x0A	; 10
     f8a:	40 f4       	brcc	.+16     	; 0xf9c <sMO_exit+0x5e>
     f8c:	87 30       	cpi	r24, 0x07	; 7
     f8e:	91 f1       	breq	.+100    	; 0xff4 <sMO_exit+0xb6>
     f90:	88 30       	cpi	r24, 0x08	; 8
     f92:	b8 f5       	brcc	.+110    	; 0x1002 <sMO_exit+0xc4>
     f94:	85 30       	cpi	r24, 0x05	; 5
     f96:	09 f0       	breq	.+2      	; 0xf9a <sMO_exit+0x5c>
     f98:	99 c0       	rjmp	.+306    	; 0x10cc <sMO_exit+0x18e>
     f9a:	25 c0       	rjmp	.+74     	; 0xfe6 <sMO_exit+0xa8>
     f9c:	8b 30       	cpi	r24, 0x0B	; 11
     f9e:	09 f4       	brne	.+2      	; 0xfa2 <sMO_exit+0x64>
     fa0:	45 c0       	rjmp	.+138    	; 0x102c <sMO_exit+0xee>
     fa2:	8b 30       	cpi	r24, 0x0B	; 11
     fa4:	e0 f1       	brcs	.+120    	; 0x101e <sMO_exit+0xe0>
     fa6:	8c 30       	cpi	r24, 0x0C	; 12
     fa8:	09 f0       	breq	.+2      	; 0xfac <sMO_exit+0x6e>
     faa:	90 c0       	rjmp	.+288    	; 0x10cc <sMO_exit+0x18e>
     fac:	46 c0       	rjmp	.+140    	; 0x103a <sMO_exit+0xfc>
     fae:	83 31       	cpi	r24, 0x13	; 19
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <sMO_exit+0x76>
     fb2:	66 c0       	rjmp	.+204    	; 0x1080 <sMO_exit+0x142>
     fb4:	84 31       	cpi	r24, 0x14	; 20
     fb6:	50 f4       	brcc	.+20     	; 0xfcc <sMO_exit+0x8e>
     fb8:	80 31       	cpi	r24, 0x10	; 16
     fba:	09 f4       	brne	.+2      	; 0xfbe <sMO_exit+0x80>
     fbc:	53 c0       	rjmp	.+166    	; 0x1064 <sMO_exit+0x126>
     fbe:	80 31       	cpi	r24, 0x10	; 16
     fc0:	08 f4       	brcc	.+2      	; 0xfc4 <sMO_exit+0x86>
     fc2:	49 c0       	rjmp	.+146    	; 0x1056 <sMO_exit+0x118>
     fc4:	81 31       	cpi	r24, 0x11	; 17
     fc6:	09 f0       	breq	.+2      	; 0xfca <sMO_exit+0x8c>
     fc8:	81 c0       	rjmp	.+258    	; 0x10cc <sMO_exit+0x18e>
     fca:	53 c0       	rjmp	.+166    	; 0x1072 <sMO_exit+0x134>
     fcc:	85 31       	cpi	r24, 0x15	; 21
     fce:	09 f4       	brne	.+2      	; 0xfd2 <sMO_exit+0x94>
     fd0:	65 c0       	rjmp	.+202    	; 0x109c <sMO_exit+0x15e>
     fd2:	85 31       	cpi	r24, 0x15	; 21
     fd4:	08 f4       	brcc	.+2      	; 0xfd8 <sMO_exit+0x9a>
     fd6:	5b c0       	rjmp	.+182    	; 0x108e <sMO_exit+0x150>
     fd8:	86 31       	cpi	r24, 0x16	; 22
     fda:	09 f4       	brne	.+2      	; 0xfde <sMO_exit+0xa0>
     fdc:	66 c0       	rjmp	.+204    	; 0x10aa <sMO_exit+0x16c>
     fde:	87 31       	cpi	r24, 0x17	; 23
     fe0:	09 f0       	breq	.+2      	; 0xfe4 <sMO_exit+0xa6>
     fe2:	74 c0       	rjmp	.+232    	; 0x10cc <sMO_exit+0x18e>
     fe4:	6d c0       	rjmp	.+218    	; 0x10c0 <sMO_exit+0x182>
		case SMO_main_region_on_r1_Running_running_main_ShowMenu : {
			/* Default exit sequence for state ShowMenu */
			handle->stateConfVector[1] = SMO_last_state;
     fe6:	88 e1       	ldi	r24, 0x18	; 24
     fe8:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	9b 83       	std	Y+3, r25	; 0x03
     ff0:	8a 83       	std	Y+2, r24	; 0x02
			break;
     ff2:	6c c0       	rjmp	.+216    	; 0x10cc <sMO_exit+0x18e>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
			/* Default exit sequence for state ShowCode */
			handle->stateConfVector[1] = SMO_last_state;
     ff4:	88 e1       	ldi	r24, 0x18	; 24
     ff6:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	9b 83       	std	Y+3, r25	; 0x03
     ffe:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1000:	65 c0       	rjmp	.+202    	; 0x10cc <sMO_exit+0x18e>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
			/* Default exit sequence for state EnterCode */
			handle->stateConfVector[1] = SMO_last_state;
    1002:	88 e1       	ldi	r24, 0x18	; 24
    1004:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	9b 83       	std	Y+3, r25	; 0x03
    100c:	8a 83       	std	Y+2, r24	; 0x02
			break;
    100e:	5e c0       	rjmp	.+188    	; 0x10cc <sMO_exit+0x18e>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
			/* Default exit sequence for state CheckKeyPress1 */
			handle->stateConfVector[1] = SMO_last_state;
    1010:	88 e1       	ldi	r24, 0x18	; 24
    1012:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	9b 83       	std	Y+3, r25	; 0x03
    101a:	8a 83       	std	Y+2, r24	; 0x02
			break;
    101c:	57 c0       	rjmp	.+174    	; 0x10cc <sMO_exit+0x18e>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
			/* Default exit sequence for state CheckCode0 */
			handle->stateConfVector[1] = SMO_last_state;
    101e:	88 e1       	ldi	r24, 0x18	; 24
    1020:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	9b 83       	std	Y+3, r25	; 0x03
    1028:	8a 83       	std	Y+2, r24	; 0x02
			break;
    102a:	50 c0       	rjmp	.+160    	; 0x10cc <sMO_exit+0x18e>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
			/* Default exit sequence for state ShowAmount */
			handle->stateConfVector[1] = SMO_last_state;
    102c:	88 e1       	ldi	r24, 0x18	; 24
    102e:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	9b 83       	std	Y+3, r25	; 0x03
    1036:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1038:	49 c0       	rjmp	.+146    	; 0x10cc <sMO_exit+0x18e>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
			/* Default exit sequence for state CheckKeyPress2 */
			handle->stateConfVector[1] = SMO_last_state;
    103a:	88 e1       	ldi	r24, 0x18	; 24
    103c:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	9b 83       	std	Y+3, r25	; 0x03
    1044:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1046:	42 c0       	rjmp	.+132    	; 0x10cc <sMO_exit+0x18e>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
			/* Default exit sequence for state EnterAmount */
			handle->stateConfVector[1] = SMO_last_state;
    1048:	88 e1       	ldi	r24, 0x18	; 24
    104a:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	9b 83       	std	Y+3, r25	; 0x03
    1052:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1054:	3b c0       	rjmp	.+118    	; 0x10cc <sMO_exit+0x18e>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
			/* Default exit sequence for final state. */
			handle->stateConfVector[1] = SMO_last_state;
    1056:	88 e1       	ldi	r24, 0x18	; 24
    1058:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	9b 83       	std	Y+3, r25	; 0x03
    1060:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1062:	34 c0       	rjmp	.+104    	; 0x10cc <sMO_exit+0x18e>
		}
		case SMO_main_region_on_r1_Running_running_main_MenuA : {
			/* Default exit sequence for state MenuA */
			handle->stateConfVector[1] = SMO_last_state;
    1064:	88 e1       	ldi	r24, 0x18	; 24
    1066:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	9b 83       	std	Y+3, r25	; 0x03
    106e:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1070:	2d c0       	rjmp	.+90     	; 0x10cc <sMO_exit+0x18e>
		}
		case SMO_main_region_on_r1_Running_running_main_CheckKeyPress : {
			/* Default exit sequence for state CheckKeyPress */
			handle->stateConfVector[1] = SMO_last_state;
    1072:	88 e1       	ldi	r24, 0x18	; 24
    1074:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	9b 83       	std	Y+3, r25	; 0x03
    107c:	8a 83       	std	Y+2, r24	; 0x02
			break;
    107e:	26 c0       	rjmp	.+76     	; 0x10cc <sMO_exit+0x18e>
		}
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
			/* Default exit sequence for state Send */
			handle->stateConfVector[1] = SMO_last_state;
    1080:	88 e1       	ldi	r24, 0x18	; 24
    1082:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	9b 83       	std	Y+3, r25	; 0x03
    108a:	8a 83       	std	Y+2, r24	; 0x02
			break;
    108c:	1f c0       	rjmp	.+62     	; 0x10cc <sMO_exit+0x18e>
		}
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
			/* Default exit sequence for state Check */
			handle->stateConfVector[1] = SMO_last_state;
    108e:	88 e1       	ldi	r24, 0x18	; 24
    1090:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	9b 83       	std	Y+3, r25	; 0x03
    1098:	8a 83       	std	Y+2, r24	; 0x02
			break;
    109a:	18 c0       	rjmp	.+48     	; 0x10cc <sMO_exit+0x18e>
		}
		case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
			/* Default exit sequence for final state. */
			handle->stateConfVector[1] = SMO_last_state;
    109c:	88 e1       	ldi	r24, 0x18	; 24
    109e:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	9b 83       	std	Y+3, r25	; 0x03
    10a6:	8a 83       	std	Y+2, r24	; 0x02
			break;
    10a8:	11 c0       	rjmp	.+34     	; 0x10cc <sMO_exit+0x18e>
		}
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail : {
			/* Default exit sequence for state SendFail */
			handle->stateConfVector[1] = SMO_last_state;
    10aa:	88 e1       	ldi	r24, 0x18	; 24
    10ac:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	9b 83       	std	Y+3, r25	; 0x03
    10b4:	8a 83       	std	Y+2, r24	; 0x02
			/* Exit action for state 'SendFail'. */
			sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail_time_event_0_raised) );		
    10b6:	ce 01       	movw	r24, r28
    10b8:	c9 96       	adiw	r24, 0x39	; 57
    10ba:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <sMO_unsetTimer>
			break;
    10be:	06 c0       	rjmp	.+12     	; 0x10cc <sMO_exit+0x18e>
		}
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult : {
			/* Default exit sequence for state ResetResult */
			handle->stateConfVector[1] = SMO_last_state;
    10c0:	88 e1       	ldi	r24, 0x18	; 24
    10c2:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	9b 83       	std	Y+3, r25	; 0x03
    10ca:	8a 83       	std	Y+2, r24	; 0x02
			break;
		}
		default: break;
	}
	sMO_exitaction(handle);
}
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	08 95       	ret

000010d2 <sMO_runCycle>:
}

static void clearOutEvents(SMO* handle) {
}

void sMO_runCycle(SMO* handle) {
    10d2:	2f 92       	push	r2
    10d4:	3f 92       	push	r3
    10d6:	4f 92       	push	r4
    10d8:	5f 92       	push	r5
    10da:	6f 92       	push	r6
    10dc:	7f 92       	push	r7
    10de:	8f 92       	push	r8
    10e0:	9f 92       	push	r9
    10e2:	af 92       	push	r10
    10e4:	bf 92       	push	r11
    10e6:	cf 92       	push	r12
    10e8:	df 92       	push	r13
    10ea:	ef 92       	push	r14
    10ec:	ff 92       	push	r15
    10ee:	0f 93       	push	r16
    10f0:	1f 93       	push	r17
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	ec 01       	movw	r28, r24
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
    10f8:	1b 82       	std	Y+3, r1	; 0x03
    10fa:	1a 82       	std	Y+2, r1	; 0x02
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	90 e0       	ldi	r25, 0x00	; 0
		handle->stateConfVectorPosition = 1;
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state ResetResult */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    1100:	01 e0       	ldi	r16, 0x01	; 1
    1102:	10 e0       	ldi	r17, 0x00	; 0
			/* Default enter sequence for state null */
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1__final_;
    1104:	0f 2e       	mov	r0, r31
    1106:	f5 e1       	ldi	r31, 0x15	; 21
    1108:	2f 2e       	mov	r2, r31
    110a:	f0 2d       	mov	r31, r0
		/* Default exit sequence for state CheckKeyPress */
		handle->stateConfVector[1] = SMO_last_state;
		handle->stateConfVectorPosition = 1;
		/* Default enter sequence for state MenuA */
		/* Entry action for state 'MenuA'. */
		handle->iface.menuId = 1;
    110c:	44 24       	eor	r4, r4
    110e:	55 24       	eor	r5, r5
    1110:	32 01       	movw	r6, r4
    1112:	43 94       	inc	r4
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
			/* Default enter sequence for state CheckKeyPress2 */
			/* Entry action for state 'CheckKeyPress2'. */
			handle->ifaceKEYPAD.lastkey = 0;
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2;
    1114:	0f 2e       	mov	r0, r31
    1116:	fc e0       	ldi	r31, 0x0C	; 12
    1118:	af 2e       	mov	r10, r31
    111a:	f0 2d       	mov	r31, r0
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
			/* Default enter sequence for state CheckKeyPress1 */
			/* Entry action for state 'CheckKeyPress1'. */
			handle->ifaceKEYPAD.lastkey = 0;
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1;
    111c:	0f 2e       	mov	r0, r31
    111e:	f9 e0       	ldi	r31, 0x09	; 9
    1120:	9f 2e       	mov	r9, r31
    1122:	f0 2d       	mov	r31, r0
		handle->stateConfVector[1] = SMO_last_state;
		handle->stateConfVectorPosition = 1;
		/* Default enter sequence for state CheckKeyPress */
		/* Entry action for state 'CheckKeyPress'. */
		handle->ifaceKEYPAD.lastkey = 0;
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_CheckKeyPress;
    1124:	0f 2e       	mov	r0, r31
    1126:	f1 e1       	ldi	r31, 0x11	; 17
    1128:	bf 2e       	mov	r11, r31
    112a:	f0 2d       	mov	r31, r0
	}  else {
		if (handle->ifaceKEYPAD.key != 0) { 
			/* Default enter sequence for state CheckKeyDown */
			/* Entry action for state 'CheckKeyDown'. */
			handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
			handle->ifaceKEYPAD.key_down = bool_true;
    112c:	88 24       	eor	r8, r8
    112e:	83 94       	inc	r8
			handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKeyDown;
    1130:	33 24       	eor	r3, r3
    1132:	68 94       	set
    1134:	32 f8       	bld	r3, 2
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
			
		switch (handle->stateConfVector[handle->stateConfVectorPosition]) {
    1136:	8c 0f       	add	r24, r28
    1138:	9d 1f       	adc	r25, r29
    113a:	fc 01       	movw	r30, r24
    113c:	80 81       	ld	r24, Z
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	01 97       	sbiw	r24, 0x01	; 1
    1142:	87 31       	cpi	r24, 0x17	; 23
    1144:	91 05       	cpc	r25, r1
    1146:	10 f0       	brcs	.+4      	; 0x114c <__stack+0x4d>
    1148:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__stack+0x13db>
    114c:	8a 5b       	subi	r24, 0xBA	; 186
    114e:	9f 4f       	sbci	r25, 0xFF	; 255
    1150:	fc 01       	movw	r30, r24
    1152:	ee 0f       	add	r30, r30
    1154:	ff 1f       	adc	r31, r31
    1156:	05 90       	lpm	r0, Z+
    1158:	f4 91       	lpm	r31, Z
    115a:	e0 2d       	mov	r30, r0
    115c:	09 94       	ijmp
}

/* The reactions of state Init. */
static void sMO_react_main_region_on_r1_Init(SMO* handle) {
	/* The reactions of state Init. */
	if (handle->timeEvents.Init_time_event_0_raised) { 
    115e:	88 ad       	sts	0x68, r24
    1160:	88 23       	and	r24, r24
    1162:	11 f4       	brne	.+4      	; 0x1168 <__stack+0x69>
    1164:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__stack+0x13db>
		/* Default exit sequence for state Init */
		handle->stateConfVector[0] = SMO_last_state;
    1168:	88 e1       	ldi	r24, 0x18	; 24
    116a:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    116c:	1b 82       	std	Y+3, r1	; 0x03
    116e:	1a 82       	std	Y+2, r1	; 0x02
		/* Exit action for state 'Init'. */
		sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) );		
    1170:	ce 01       	movw	r24, r28
    1172:	c8 96       	adiw	r24, 0x38	; 56
    1174:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <sMO_unsetTimer>
		/* Default enter sequence for state Running */
		/* Default enter sequence for region keypad */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    1178:	0e 94 0c 02 	call	0x418	; 0x418 <sMOIfaceKEYPAD_checkpress>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	8c 83       	std	Y+4, r24	; 0x04
    1182:	9d 83       	std	Y+5, r25	; 0x05
    1184:	ae 83       	std	Y+6, r26	; 0x06
    1186:	bf 83       	std	Y+7, r27	; 0x07
		handle->ifaceKEYPAD.key_down = bool_false;
    1188:	1c 86       	std	Y+12, r1	; 0x0c
		handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKey;
    118a:	83 e0       	ldi	r24, 0x03	; 3
    118c:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    118e:	1b 82       	std	Y+3, r1	; 0x03
    1190:	1a 82       	std	Y+2, r1	; 0x02
		/* Default enter sequence for region running main */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1192:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1196:	88 e0       	ldi	r24, 0x08	; 8
    1198:	92 e0       	ldi	r25, 0x02	; 2
    119a:	0e 94 16 02 	call	0x42c	; 0x42c <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    119e:	86 e1       	ldi	r24, 0x16	; 22
    11a0:	92 e0       	ldi	r25, 0x02	; 2
    11a2:	40 e0       	ldi	r20, 0x00	; 0
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	ba 01       	movw	r22, r20
    11a8:	01 e0       	ldi	r16, 0x01	; 1
    11aa:	10 e0       	ldi	r17, 0x00	; 0
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	0e 94 19 02 	call	0x432	; 0x432 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    11b4:	1e a6       	lds	r17, 0xbe
    11b6:	1f a6       	lds	r17, 0xbf
    11b8:	18 aa       	sts	0x98, r17
    11ba:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    11bc:	85 e0       	ldi	r24, 0x05	; 5
    11be:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	9b 83       	std	Y+3, r25	; 0x03
    11c6:	8a 83       	std	Y+2, r24	; 0x02
    11c8:	0c 94 8f 12 	jmp	0x251e	; 0x251e <__stack+0x141f>
}

/* The reactions of state CheckKey. */
static void sMO_react_main_region_on_r1_Running_keypad_CheckKey(SMO* handle) {
	/* The reactions of state CheckKey. */
	if (handle->ifaceKEYPAD.key != 0) { 
    11cc:	8c 81       	ldd	r24, Y+4	; 0x04
    11ce:	9d 81       	ldd	r25, Y+5	; 0x05
    11d0:	ae 81       	ldd	r26, Y+6	; 0x06
    11d2:	bf 81       	ldd	r27, Y+7	; 0x07
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	a1 05       	cpc	r26, r1
    11d8:	b1 05       	cpc	r27, r1
    11da:	b1 f0       	breq	.+44     	; 0x1208 <__stack+0x109>
		/* Default exit sequence for state CheckKey */
		handle->stateConfVector[0] = SMO_last_state;
    11dc:	f8 e1       	ldi	r31, 0x18	; 24
    11de:	f8 83       	st	Y, r31
		handle->stateConfVectorPosition = 0;
    11e0:	1b 82       	std	Y+3, r1	; 0x03
    11e2:	1a 82       	std	Y+2, r1	; 0x02
		handle->ifaceKEYPAD.lastkey = handle->ifaceKEYPAD.key;
    11e4:	88 87       	std	Y+8, r24	; 0x08
    11e6:	99 87       	std	Y+9, r25	; 0x09
    11e8:	aa 87       	std	Y+10, r26	; 0x0a
    11ea:	bb 87       	std	Y+11, r27	; 0x0b
		/* Default enter sequence for state CheckKeyDown */
		/* Entry action for state 'CheckKeyDown'. */
		handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    11ec:	0e 94 0c 02 	call	0x418	; 0x418 <sMOIfaceKEYPAD_checkpress>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	8c 83       	std	Y+4, r24	; 0x04
    11f6:	9d 83       	std	Y+5, r25	; 0x05
    11f8:	ae 83       	std	Y+6, r26	; 0x06
    11fa:	bf 83       	std	Y+7, r27	; 0x07
		handle->ifaceKEYPAD.key_down = bool_true;
    11fc:	8c 86       	std	Y+12, r8	; 0x0c
		handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKeyDown;
    11fe:	38 82       	st	Y, r3
		handle->stateConfVectorPosition = 0;
    1200:	1b 82       	std	Y+3, r1	; 0x03
    1202:	1a 82       	std	Y+2, r1	; 0x02
    1204:	0c 94 95 12 	jmp	0x252a	; 0x252a <__stack+0x142b>
	}  else {
		if (handle->ifaceKEYPAD.key == 0) { 
			/* Default enter sequence for state CheckKey */
			/* Entry action for state 'CheckKey'. */
			handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    1208:	0e 94 0c 02 	call	0x418	; 0x418 <sMOIfaceKEYPAD_checkpress>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	8c 83       	std	Y+4, r24	; 0x04
    1212:	9d 83       	std	Y+5, r25	; 0x05
    1214:	ae 83       	std	Y+6, r26	; 0x06
    1216:	bf 83       	std	Y+7, r27	; 0x07
			handle->ifaceKEYPAD.key_down = bool_false;
    1218:	1c 86       	std	Y+12, r1	; 0x0c
			handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKey;
    121a:	83 e0       	ldi	r24, 0x03	; 3
    121c:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    121e:	1b 82       	std	Y+3, r1	; 0x03
    1220:	1a 82       	std	Y+2, r1	; 0x02
    1222:	0c 94 95 12 	jmp	0x252a	; 0x252a <__stack+0x142b>
}

/* The reactions of state CheckKeyDown. */
static void sMO_react_main_region_on_r1_Running_keypad_CheckKeyDown(SMO* handle) {
	/* The reactions of state CheckKeyDown. */
	if (handle->ifaceKEYPAD.key == 0) { 
    1226:	8c 81       	ldd	r24, Y+4	; 0x04
    1228:	9d 81       	ldd	r25, Y+5	; 0x05
    122a:	ae 81       	ldd	r26, Y+6	; 0x06
    122c:	bf 81       	ldd	r27, Y+7	; 0x07
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	a1 05       	cpc	r26, r1
    1232:	b1 05       	cpc	r27, r1
    1234:	a1 f4       	brne	.+40     	; 0x125e <__stack+0x15f>
		/* Default exit sequence for state CheckKeyDown */
		handle->stateConfVector[0] = SMO_last_state;
    1236:	28 e1       	ldi	r18, 0x18	; 24
    1238:	28 83       	st	Y, r18
		handle->stateConfVectorPosition = 0;
    123a:	1b 82       	std	Y+3, r1	; 0x03
    123c:	1a 82       	std	Y+2, r1	; 0x02
		handle->ifaceKEYPAD.key_pressed_raised = bool_true;
    123e:	8d 86       	std	Y+13, r8	; 0x0d
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    1240:	0e 94 0c 02 	call	0x418	; 0x418 <sMOIfaceKEYPAD_checkpress>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	8c 83       	std	Y+4, r24	; 0x04
    124a:	9d 83       	std	Y+5, r25	; 0x05
    124c:	ae 83       	std	Y+6, r26	; 0x06
    124e:	bf 83       	std	Y+7, r27	; 0x07
		handle->ifaceKEYPAD.key_down = bool_false;
    1250:	1c 86       	std	Y+12, r1	; 0x0c
		handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKey;
    1252:	83 e0       	ldi	r24, 0x03	; 3
    1254:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    1256:	1b 82       	std	Y+3, r1	; 0x03
    1258:	1a 82       	std	Y+2, r1	; 0x02
    125a:	0c 94 95 12 	jmp	0x252a	; 0x252a <__stack+0x142b>
	}  else {
		if (handle->ifaceKEYPAD.key != 0) { 
			/* Default enter sequence for state CheckKeyDown */
			/* Entry action for state 'CheckKeyDown'. */
			handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    125e:	0e 94 0c 02 	call	0x418	; 0x418 <sMOIfaceKEYPAD_checkpress>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	8c 83       	std	Y+4, r24	; 0x04
    1268:	9d 83       	std	Y+5, r25	; 0x05
    126a:	ae 83       	std	Y+6, r26	; 0x06
    126c:	bf 83       	std	Y+7, r27	; 0x07
			handle->ifaceKEYPAD.key_down = bool_true;
    126e:	8c 86       	std	Y+12, r8	; 0x0c
			handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKeyDown;
    1270:	38 82       	st	Y, r3
			handle->stateConfVectorPosition = 0;
    1272:	1b 82       	std	Y+3, r1	; 0x03
    1274:	1a 82       	std	Y+2, r1	; 0x02
    1276:	0c 94 95 12 	jmp	0x252a	; 0x252a <__stack+0x142b>
static void sMO_react_main_region_on_r1_Running_running_main_ShowMenu(SMO* handle) {
	/* The reactions of state ShowMenu. */
	if (bool_true) { 
		/* Default exit sequence for state ShowMenu */
		handle->stateConfVector[1] = SMO_last_state;
		handle->stateConfVectorPosition = 1;
    127a:	1b 83       	std	Y+3, r17	; 0x03
    127c:	0a 83       	std	Y+2, r16	; 0x02
		/* Default enter sequence for state CheckKeyPress */
		/* Entry action for state 'CheckKeyPress'. */
		handle->ifaceKEYPAD.lastkey = 0;
    127e:	18 86       	std	Y+8, r1	; 0x08
    1280:	19 86       	std	Y+9, r1	; 0x09
    1282:	1a 86       	std	Y+10, r1	; 0x0a
    1284:	1b 86       	std	Y+11, r1	; 0x0b
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_CheckKeyPress;
    1286:	b9 82       	std	Y+1, r11	; 0x01
    1288:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__stack+0x13db>
}

/* The reactions of state ShowCode. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode(SMO* handle) {
	/* The reactions of state ShowCode. */
	if (handle->iface.menuId == 0) { 
    128c:	8e a5       	lds	r24, 0x6e
    128e:	9f a5       	lds	r25, 0x6f
    1290:	a8 a9       	sts	0x48, r26
    1292:	b9 a9       	sts	0x49, r27
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	a1 05       	cpc	r26, r1
    1298:	b1 05       	cpc	r27, r1
    129a:	09 f0       	breq	.+2      	; 0x129e <__stack+0x19f>
    129c:	6a c0       	rjmp	.+212    	; 0x1372 <__stack+0x273>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	8a 30       	cpi	r24, 0x0A	; 10
    12a2:	41 f1       	breq	.+80     	; 0x12f4 <__stack+0x1f5>
    12a4:	8b 30       	cpi	r24, 0x0B	; 11
    12a6:	40 f4       	brcc	.+16     	; 0x12b8 <__stack+0x1b9>
    12a8:	88 30       	cpi	r24, 0x08	; 8
    12aa:	b1 f0       	breq	.+44     	; 0x12d8 <__stack+0x1d9>
    12ac:	89 30       	cpi	r24, 0x09	; 9
    12ae:	d8 f4       	brcc	.+54     	; 0x12e6 <__stack+0x1e7>
    12b0:	87 30       	cpi	r24, 0x07	; 7
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <__stack+0x1b7>
    12b4:	41 c0       	rjmp	.+130    	; 0x1338 <__stack+0x239>
    12b6:	09 c0       	rjmp	.+18     	; 0x12ca <__stack+0x1cb>
    12b8:	8c 30       	cpi	r24, 0x0C	; 12
    12ba:	51 f1       	breq	.+84     	; 0x1310 <__stack+0x211>
    12bc:	8c 30       	cpi	r24, 0x0C	; 12
    12be:	08 f1       	brcs	.+66     	; 0x1302 <__stack+0x203>
    12c0:	8e 30       	cpi	r24, 0x0E	; 14
    12c2:	69 f1       	breq	.+90     	; 0x131e <__stack+0x21f>
    12c4:	8f 30       	cpi	r24, 0x0F	; 15
    12c6:	c1 f5       	brne	.+112    	; 0x1338 <__stack+0x239>
    12c8:	31 c0       	rjmp	.+98     	; 0x132c <__stack+0x22d>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    12ca:	88 e1       	ldi	r24, 0x18	; 24
    12cc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	9b 83       	std	Y+3, r25	; 0x03
    12d4:	8a 83       	std	Y+2, r24	; 0x02
    12d6:	30 c0       	rjmp	.+96     	; 0x1338 <__stack+0x239>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    12d8:	88 e1       	ldi	r24, 0x18	; 24
    12da:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	9b 83       	std	Y+3, r25	; 0x03
    12e2:	8a 83       	std	Y+2, r24	; 0x02
    12e4:	29 c0       	rjmp	.+82     	; 0x1338 <__stack+0x239>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    12e6:	88 e1       	ldi	r24, 0x18	; 24
    12e8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	9b 83       	std	Y+3, r25	; 0x03
    12f0:	8a 83       	std	Y+2, r24	; 0x02
    12f2:	22 c0       	rjmp	.+68     	; 0x1338 <__stack+0x239>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    12f4:	88 e1       	ldi	r24, 0x18	; 24
    12f6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	9b 83       	std	Y+3, r25	; 0x03
    12fe:	8a 83       	std	Y+2, r24	; 0x02
    1300:	1b c0       	rjmp	.+54     	; 0x1338 <__stack+0x239>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1302:	88 e1       	ldi	r24, 0x18	; 24
    1304:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	9b 83       	std	Y+3, r25	; 0x03
    130c:	8a 83       	std	Y+2, r24	; 0x02
    130e:	14 c0       	rjmp	.+40     	; 0x1338 <__stack+0x239>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1310:	88 e1       	ldi	r24, 0x18	; 24
    1312:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	9b 83       	std	Y+3, r25	; 0x03
    131a:	8a 83       	std	Y+2, r24	; 0x02
    131c:	0d c0       	rjmp	.+26     	; 0x1338 <__stack+0x239>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    131e:	88 e1       	ldi	r24, 0x18	; 24
    1320:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	9b 83       	std	Y+3, r25	; 0x03
    1328:	8a 83       	std	Y+2, r24	; 0x02
    132a:	06 c0       	rjmp	.+12     	; 0x1338 <__stack+0x239>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    132c:	88 e1       	ldi	r24, 0x18	; 24
    132e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	9b 83       	std	Y+3, r25	; 0x03
    1336:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1338:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    133c:	88 e0       	ldi	r24, 0x08	; 8
    133e:	92 e0       	ldi	r25, 0x02	; 2
    1340:	0e 94 16 02 	call	0x42c	; 0x42c <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    1344:	86 e1       	ldi	r24, 0x16	; 22
    1346:	92 e0       	ldi	r25, 0x02	; 2
    1348:	40 e0       	ldi	r20, 0x00	; 0
    134a:	50 e0       	ldi	r21, 0x00	; 0
    134c:	ba 01       	movw	r22, r20
    134e:	01 e0       	ldi	r16, 0x01	; 1
    1350:	10 e0       	ldi	r17, 0x00	; 0
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	0e 94 19 02 	call	0x432	; 0x432 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    135a:	1e a6       	lds	r17, 0xbe
    135c:	1f a6       	lds	r17, 0xbf
    135e:	18 aa       	sts	0x98, r17
    1360:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1362:	85 e0       	ldi	r24, 0x05	; 5
    1364:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	9b 83       	std	Y+3, r25	; 0x03
    136c:	8a 83       	std	Y+2, r24	; 0x02
    136e:	0c 94 8f 12 	jmp	0x251e	; 0x251e <__stack+0x141f>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state ShowCode */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    1372:	1b 83       	std	Y+3, r17	; 0x03
    1374:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress1 */
			/* Entry action for state 'CheckKeyPress1'. */
			handle->ifaceKEYPAD.lastkey = 0;
    1376:	18 86       	std	Y+8, r1	; 0x08
    1378:	19 86       	std	Y+9, r1	; 0x09
    137a:	1a 86       	std	Y+10, r1	; 0x0a
    137c:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1;
    137e:	99 82       	std	Y+1, r9	; 0x01
    1380:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__stack+0x13db>
}

/* The reactions of state EnterCode. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode(SMO* handle) {
	/* The reactions of state EnterCode. */
	if (handle->iface.menuId == 0) { 
    1384:	8e a5       	lds	r24, 0x6e
    1386:	9f a5       	lds	r25, 0x6f
    1388:	a8 a9       	sts	0x48, r26
    138a:	b9 a9       	sts	0x49, r27
    138c:	00 97       	sbiw	r24, 0x00	; 0
    138e:	a1 05       	cpc	r26, r1
    1390:	b1 05       	cpc	r27, r1
    1392:	09 f0       	breq	.+2      	; 0x1396 <__stack+0x297>
    1394:	6a c0       	rjmp	.+212    	; 0x146a <__stack+0x36b>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	8a 30       	cpi	r24, 0x0A	; 10
    139a:	41 f1       	breq	.+80     	; 0x13ec <__stack+0x2ed>
    139c:	8b 30       	cpi	r24, 0x0B	; 11
    139e:	40 f4       	brcc	.+16     	; 0x13b0 <__stack+0x2b1>
    13a0:	88 30       	cpi	r24, 0x08	; 8
    13a2:	b1 f0       	breq	.+44     	; 0x13d0 <__stack+0x2d1>
    13a4:	89 30       	cpi	r24, 0x09	; 9
    13a6:	d8 f4       	brcc	.+54     	; 0x13de <__stack+0x2df>
    13a8:	87 30       	cpi	r24, 0x07	; 7
    13aa:	09 f0       	breq	.+2      	; 0x13ae <__stack+0x2af>
    13ac:	41 c0       	rjmp	.+130    	; 0x1430 <__stack+0x331>
    13ae:	09 c0       	rjmp	.+18     	; 0x13c2 <__stack+0x2c3>
    13b0:	8c 30       	cpi	r24, 0x0C	; 12
    13b2:	51 f1       	breq	.+84     	; 0x1408 <__stack+0x309>
    13b4:	8c 30       	cpi	r24, 0x0C	; 12
    13b6:	08 f1       	brcs	.+66     	; 0x13fa <__stack+0x2fb>
    13b8:	8e 30       	cpi	r24, 0x0E	; 14
    13ba:	69 f1       	breq	.+90     	; 0x1416 <__stack+0x317>
    13bc:	8f 30       	cpi	r24, 0x0F	; 15
    13be:	c1 f5       	brne	.+112    	; 0x1430 <__stack+0x331>
    13c0:	31 c0       	rjmp	.+98     	; 0x1424 <__stack+0x325>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    13c2:	88 e1       	ldi	r24, 0x18	; 24
    13c4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	9b 83       	std	Y+3, r25	; 0x03
    13cc:	8a 83       	std	Y+2, r24	; 0x02
    13ce:	30 c0       	rjmp	.+96     	; 0x1430 <__stack+0x331>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    13d0:	88 e1       	ldi	r24, 0x18	; 24
    13d2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	9b 83       	std	Y+3, r25	; 0x03
    13da:	8a 83       	std	Y+2, r24	; 0x02
    13dc:	29 c0       	rjmp	.+82     	; 0x1430 <__stack+0x331>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    13de:	88 e1       	ldi	r24, 0x18	; 24
    13e0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	9b 83       	std	Y+3, r25	; 0x03
    13e8:	8a 83       	std	Y+2, r24	; 0x02
    13ea:	22 c0       	rjmp	.+68     	; 0x1430 <__stack+0x331>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    13ec:	88 e1       	ldi	r24, 0x18	; 24
    13ee:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	9b 83       	std	Y+3, r25	; 0x03
    13f6:	8a 83       	std	Y+2, r24	; 0x02
    13f8:	1b c0       	rjmp	.+54     	; 0x1430 <__stack+0x331>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    13fa:	88 e1       	ldi	r24, 0x18	; 24
    13fc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	9b 83       	std	Y+3, r25	; 0x03
    1404:	8a 83       	std	Y+2, r24	; 0x02
    1406:	14 c0       	rjmp	.+40     	; 0x1430 <__stack+0x331>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1408:	88 e1       	ldi	r24, 0x18	; 24
    140a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	9b 83       	std	Y+3, r25	; 0x03
    1412:	8a 83       	std	Y+2, r24	; 0x02
    1414:	0d c0       	rjmp	.+26     	; 0x1430 <__stack+0x331>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1416:	88 e1       	ldi	r24, 0x18	; 24
    1418:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	9b 83       	std	Y+3, r25	; 0x03
    1420:	8a 83       	std	Y+2, r24	; 0x02
    1422:	06 c0       	rjmp	.+12     	; 0x1430 <__stack+0x331>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1424:	88 e1       	ldi	r24, 0x18	; 24
    1426:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	9b 83       	std	Y+3, r25	; 0x03
    142e:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1430:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1434:	88 e0       	ldi	r24, 0x08	; 8
    1436:	92 e0       	ldi	r25, 0x02	; 2
    1438:	0e 94 16 02 	call	0x42c	; 0x42c <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    143c:	86 e1       	ldi	r24, 0x16	; 22
    143e:	92 e0       	ldi	r25, 0x02	; 2
    1440:	40 e0       	ldi	r20, 0x00	; 0
    1442:	50 e0       	ldi	r21, 0x00	; 0
    1444:	ba 01       	movw	r22, r20
    1446:	01 e0       	ldi	r16, 0x01	; 1
    1448:	10 e0       	ldi	r17, 0x00	; 0
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	0e 94 19 02 	call	0x432	; 0x432 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1452:	1e a6       	lds	r17, 0xbe
    1454:	1f a6       	lds	r17, 0xbf
    1456:	18 aa       	sts	0x98, r17
    1458:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    145a:	85 e0       	ldi	r24, 0x05	; 5
    145c:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	9b 83       	std	Y+3, r25	; 0x03
    1464:	8a 83       	std	Y+2, r24	; 0x02
    1466:	0c 94 8f 12 	jmp	0x251e	; 0x251e <__stack+0x141f>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state EnterCode */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    146a:	1b 83       	std	Y+3, r17	; 0x03
    146c:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress1 */
			/* Entry action for state 'CheckKeyPress1'. */
			handle->ifaceKEYPAD.lastkey = 0;
    146e:	18 86       	std	Y+8, r1	; 0x08
    1470:	19 86       	std	Y+9, r1	; 0x09
    1472:	1a 86       	std	Y+10, r1	; 0x0a
    1474:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1;
    1476:	99 82       	std	Y+1, r9	; 0x01
    1478:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__stack+0x13db>
}

/* The reactions of state CheckKeyPress1. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1(SMO* handle) {
	/* The reactions of state CheckKeyPress1. */
	if (handle->iface.menuId == 0) { 
    147c:	8e a5       	lds	r24, 0x6e
    147e:	9f a5       	lds	r25, 0x6f
    1480:	a8 a9       	sts	0x48, r26
    1482:	b9 a9       	sts	0x49, r27
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	a1 05       	cpc	r26, r1
    1488:	b1 05       	cpc	r27, r1
    148a:	09 f0       	breq	.+2      	; 0x148e <__stack+0x38f>
    148c:	69 c0       	rjmp	.+210    	; 0x1560 <__stack+0x461>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	8a 30       	cpi	r24, 0x0A	; 10
    1492:	41 f1       	breq	.+80     	; 0x14e4 <__stack+0x3e5>
    1494:	8b 30       	cpi	r24, 0x0B	; 11
    1496:	40 f4       	brcc	.+16     	; 0x14a8 <__stack+0x3a9>
    1498:	88 30       	cpi	r24, 0x08	; 8
    149a:	b1 f0       	breq	.+44     	; 0x14c8 <__stack+0x3c9>
    149c:	89 30       	cpi	r24, 0x09	; 9
    149e:	d8 f4       	brcc	.+54     	; 0x14d6 <__stack+0x3d7>
    14a0:	87 30       	cpi	r24, 0x07	; 7
    14a2:	09 f0       	breq	.+2      	; 0x14a6 <__stack+0x3a7>
    14a4:	41 c0       	rjmp	.+130    	; 0x1528 <__stack+0x429>
    14a6:	09 c0       	rjmp	.+18     	; 0x14ba <__stack+0x3bb>
    14a8:	8c 30       	cpi	r24, 0x0C	; 12
    14aa:	51 f1       	breq	.+84     	; 0x1500 <__stack+0x401>
    14ac:	8c 30       	cpi	r24, 0x0C	; 12
    14ae:	08 f1       	brcs	.+66     	; 0x14f2 <__stack+0x3f3>
    14b0:	8e 30       	cpi	r24, 0x0E	; 14
    14b2:	69 f1       	breq	.+90     	; 0x150e <__stack+0x40f>
    14b4:	8f 30       	cpi	r24, 0x0F	; 15
    14b6:	c1 f5       	brne	.+112    	; 0x1528 <__stack+0x429>
    14b8:	31 c0       	rjmp	.+98     	; 0x151c <__stack+0x41d>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    14ba:	88 e1       	ldi	r24, 0x18	; 24
    14bc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	9b 83       	std	Y+3, r25	; 0x03
    14c4:	8a 83       	std	Y+2, r24	; 0x02
    14c6:	30 c0       	rjmp	.+96     	; 0x1528 <__stack+0x429>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    14c8:	88 e1       	ldi	r24, 0x18	; 24
    14ca:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	9b 83       	std	Y+3, r25	; 0x03
    14d2:	8a 83       	std	Y+2, r24	; 0x02
    14d4:	29 c0       	rjmp	.+82     	; 0x1528 <__stack+0x429>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    14d6:	88 e1       	ldi	r24, 0x18	; 24
    14d8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	9b 83       	std	Y+3, r25	; 0x03
    14e0:	8a 83       	std	Y+2, r24	; 0x02
    14e2:	22 c0       	rjmp	.+68     	; 0x1528 <__stack+0x429>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    14e4:	88 e1       	ldi	r24, 0x18	; 24
    14e6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	9b 83       	std	Y+3, r25	; 0x03
    14ee:	8a 83       	std	Y+2, r24	; 0x02
    14f0:	1b c0       	rjmp	.+54     	; 0x1528 <__stack+0x429>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    14f2:	88 e1       	ldi	r24, 0x18	; 24
    14f4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	9b 83       	std	Y+3, r25	; 0x03
    14fc:	8a 83       	std	Y+2, r24	; 0x02
    14fe:	14 c0       	rjmp	.+40     	; 0x1528 <__stack+0x429>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1500:	88 e1       	ldi	r24, 0x18	; 24
    1502:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	9b 83       	std	Y+3, r25	; 0x03
    150a:	8a 83       	std	Y+2, r24	; 0x02
    150c:	0d c0       	rjmp	.+26     	; 0x1528 <__stack+0x429>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    150e:	88 e1       	ldi	r24, 0x18	; 24
    1510:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	9b 83       	std	Y+3, r25	; 0x03
    1518:	8a 83       	std	Y+2, r24	; 0x02
    151a:	06 c0       	rjmp	.+12     	; 0x1528 <__stack+0x429>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    151c:	88 e1       	ldi	r24, 0x18	; 24
    151e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	9b 83       	std	Y+3, r25	; 0x03
    1526:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1528:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    152c:	88 e0       	ldi	r24, 0x08	; 8
    152e:	92 e0       	ldi	r25, 0x02	; 2
    1530:	0e 94 16 02 	call	0x42c	; 0x42c <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    1534:	86 e1       	ldi	r24, 0x16	; 22
    1536:	92 e0       	ldi	r25, 0x02	; 2
    1538:	40 e0       	ldi	r20, 0x00	; 0
    153a:	50 e0       	ldi	r21, 0x00	; 0
    153c:	ba 01       	movw	r22, r20
    153e:	01 e0       	ldi	r16, 0x01	; 1
    1540:	10 e0       	ldi	r17, 0x00	; 0
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	0e 94 19 02 	call	0x432	; 0x432 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    154a:	1e a6       	lds	r17, 0xbe
    154c:	1f a6       	lds	r17, 0xbf
    154e:	18 aa       	sts	0x98, r17
    1550:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1552:	85 e0       	ldi	r24, 0x05	; 5
    1554:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	9b 83       	std	Y+3, r25	; 0x03
    155c:	8a 83       	std	Y+2, r24	; 0x02
    155e:	df c7       	rjmp	.+4030   	; 0x251e <__stack+0x141f>
	}  else {
		if (handle->ifaceDISH.pos < 3 && handle->ifaceKEYPAD.lastkey <= 9 && handle->ifaceKEYPAD.lastkey >= 1 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1560:	89 a5       	lds	r24, 0x69
    1562:	9a a5       	lds	r25, 0x6a
    1564:	ab a5       	lds	r26, 0x6b
    1566:	bc a5       	lds	r27, 0x6c
    1568:	83 30       	cpi	r24, 0x03	; 3
    156a:	91 05       	cpc	r25, r1
    156c:	a1 05       	cpc	r26, r1
    156e:	b1 05       	cpc	r27, r1
    1570:	0c f0       	brlt	.+2      	; 0x1574 <__stack+0x475>
    1572:	68 c0       	rjmp	.+208    	; 0x1644 <__stack+0x545>
    1574:	c8 84       	ldd	r12, Y+8	; 0x08
    1576:	d9 84       	ldd	r13, Y+9	; 0x09
    1578:	ea 84       	ldd	r14, Y+10	; 0x0a
    157a:	fb 84       	ldd	r15, Y+11	; 0x0b
    157c:	ea e0       	ldi	r30, 0x0A	; 10
    157e:	ce 16       	cp	r12, r30
    1580:	d1 04       	cpc	r13, r1
    1582:	e1 04       	cpc	r14, r1
    1584:	f1 04       	cpc	r15, r1
    1586:	0c f0       	brlt	.+2      	; 0x158a <__stack+0x48b>
    1588:	4b c0       	rjmp	.+150    	; 0x1620 <__stack+0x521>
    158a:	1c 14       	cp	r1, r12
    158c:	1d 04       	cpc	r1, r13
    158e:	1e 04       	cpc	r1, r14
    1590:	1f 04       	cpc	r1, r15
    1592:	0c f0       	brlt	.+2      	; 0x1596 <__stack+0x497>
    1594:	45 c0       	rjmp	.+138    	; 0x1620 <__stack+0x521>
    1596:	2d 85       	ldd	r18, Y+13	; 0x0d
    1598:	22 23       	and	r18, r18
    159a:	09 f4       	brne	.+2      	; 0x159e <__stack+0x49f>
    159c:	41 c0       	rjmp	.+130    	; 0x1620 <__stack+0x521>
			/* Default exit sequence for state CheckKeyPress1 */
			handle->stateConfVector[1] = SMO_last_state;
    159e:	28 e1       	ldi	r18, 0x18	; 24
    15a0:	29 83       	std	Y+1, r18	; 0x01
			handle->stateConfVectorPosition = 1;
    15a2:	88 24       	eor	r8, r8
    15a4:	99 24       	eor	r9, r9
    15a6:	83 94       	inc	r8
    15a8:	9b 82       	std	Y+3, r9	; 0x03
    15aa:	8a 82       	std	Y+2, r8	; 0x02
			/* Default enter sequence for state EnterCode */
			/* Entry action for state 'EnterCode'. */
			sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    15ac:	9c 01       	movw	r18, r24
    15ae:	ad 01       	movw	r20, r26
    15b0:	22 0f       	add	r18, r18
    15b2:	33 1f       	adc	r19, r19
    15b4:	44 1f       	adc	r20, r20
    15b6:	55 1f       	adc	r21, r21
    15b8:	c7 01       	movw	r24, r14
    15ba:	b6 01       	movw	r22, r12
    15bc:	ee 24       	eor	r14, r14
    15be:	ff 24       	eor	r15, r15
    15c0:	87 01       	movw	r16, r14
    15c2:	e3 94       	inc	r14
    15c4:	aa 24       	eor	r10, r10
    15c6:	bb 24       	eor	r11, r11
    15c8:	65 01       	movw	r12, r10
    15ca:	a3 94       	inc	r10
    15cc:	0e 94 28 02 	call	0x450	; 0x450 <sMOIfaceLCD_writeNumberXY>
			handle->ifaceDISH.pos += 1;
    15d0:	89 a5       	lds	r24, 0x69
    15d2:	9a a5       	lds	r25, 0x6a
    15d4:	ab a5       	lds	r26, 0x6b
    15d6:	bc a5       	lds	r27, 0x6c
    15d8:	01 96       	adiw	r24, 0x01	; 1
    15da:	a1 1d       	adc	r26, r1
    15dc:	b1 1d       	adc	r27, r1
    15de:	89 a7       	lds	r24, 0x79
    15e0:	9a a7       	lds	r25, 0x7a
    15e2:	ab a7       	lds	r26, 0x7b
    15e4:	bc a7       	lds	r27, 0x7c
			handle->ifaceDISH.ID = handle->ifaceDISH.ID * 10 + handle->ifaceKEYPAD.lastkey;
    15e6:	69 a1       	lds	r22, 0x49
    15e8:	7a a1       	lds	r23, 0x4a
    15ea:	8b a1       	lds	r24, 0x4b
    15ec:	9c a1       	lds	r25, 0x4c
    15ee:	2a e0       	ldi	r18, 0x0A	; 10
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	40 e0       	ldi	r20, 0x00	; 0
    15f4:	50 e0       	ldi	r21, 0x00	; 0
    15f6:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <__mulsi3>
    15fa:	ab 01       	movw	r20, r22
    15fc:	bc 01       	movw	r22, r24
    15fe:	88 85       	ldd	r24, Y+8	; 0x08
    1600:	99 85       	ldd	r25, Y+9	; 0x09
    1602:	aa 85       	ldd	r26, Y+10	; 0x0a
    1604:	bb 85       	ldd	r27, Y+11	; 0x0b
    1606:	84 0f       	add	r24, r20
    1608:	95 1f       	adc	r25, r21
    160a:	a6 1f       	adc	r26, r22
    160c:	b7 1f       	adc	r27, r23
    160e:	89 a3       	lds	r24, 0x59
    1610:	9a a3       	lds	r25, 0x5a
    1612:	ab a3       	lds	r26, 0x5b
    1614:	bc a3       	lds	r27, 0x5c
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode;
    1616:	88 e0       	ldi	r24, 0x08	; 8
    1618:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    161a:	9b 82       	std	Y+3, r9	; 0x03
    161c:	8a 82       	std	Y+2, r8	; 0x02
    161e:	7f c7       	rjmp	.+3838   	; 0x251e <__stack+0x141f>
		}  else {
			if (handle->ifaceDISH.pos < 3 && handle->ifaceKEYPAD.lastkey == 10 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1620:	fa e0       	ldi	r31, 0x0A	; 10
    1622:	cf 16       	cp	r12, r31
    1624:	d1 04       	cpc	r13, r1
    1626:	e1 04       	cpc	r14, r1
    1628:	f1 04       	cpc	r15, r1
    162a:	61 f4       	brne	.+24     	; 0x1644 <__stack+0x545>
    162c:	8d 85       	ldd	r24, Y+13	; 0x0d
    162e:	88 23       	and	r24, r24
    1630:	49 f0       	breq	.+18     	; 0x1644 <__stack+0x545>
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
				handle->stateConfVectorPosition = 1;
    1632:	1b 83       	std	Y+3, r17	; 0x03
    1634:	0a 83       	std	Y+2, r16	; 0x02
				/* Default enter sequence for state CheckCode0 */
				/* Entry action for state 'CheckCode0'. */
				handle->ifaceKEYPAD.lastkey = 0;
    1636:	18 86       	std	Y+8, r1	; 0x08
    1638:	19 86       	std	Y+9, r1	; 0x09
    163a:	1a 86       	std	Y+10, r1	; 0x0a
    163c:	1b 86       	std	Y+11, r1	; 0x0b
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0;
    163e:	2a e0       	ldi	r18, 0x0A	; 10
    1640:	29 83       	std	Y+1, r18	; 0x01
    1642:	4b c7       	rjmp	.+3734   	; 0x24da <__stack+0x13db>
				handle->stateConfVectorPosition = 1;
			}  else {
				if (handle->ifaceKEYPAD.lastkey == 12 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1644:	88 85       	ldd	r24, Y+8	; 0x08
    1646:	99 85       	ldd	r25, Y+9	; 0x09
    1648:	aa 85       	ldd	r26, Y+10	; 0x0a
    164a:	bb 85       	ldd	r27, Y+11	; 0x0b
    164c:	8c 30       	cpi	r24, 0x0C	; 12
    164e:	91 05       	cpc	r25, r1
    1650:	a1 05       	cpc	r26, r1
    1652:	b1 05       	cpc	r27, r1
    1654:	41 f5       	brne	.+80     	; 0x16a6 <__stack+0x5a7>
    1656:	2d 85       	ldd	r18, Y+13	; 0x0d
    1658:	22 23       	and	r18, r18
    165a:	29 f1       	breq	.+74     	; 0x16a6 <__stack+0x5a7>
					/* Default exit sequence for state CheckKeyPress1 */
					handle->stateConfVector[1] = SMO_last_state;
    165c:	88 e1       	ldi	r24, 0x18	; 24
    165e:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    1660:	ee 24       	eor	r14, r14
    1662:	ff 24       	eor	r15, r15
    1664:	e3 94       	inc	r14
    1666:	fb 82       	std	Y+3, r15	; 0x03
    1668:	ea 82       	std	Y+2, r14	; 0x02
					/* Default enter sequence for state ShowCode */
					/* Entry action for state 'ShowCode'. */
					sMOIfaceLCD_clear();
    166a:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceLCD_clear>
					sMOIfaceLCD_writeString("Nhap ma mon an:");
    166e:	82 e2       	ldi	r24, 0x22	; 34
    1670:	92 e0       	ldi	r25, 0x02	; 2
    1672:	0e 94 16 02 	call	0x42c	; 0x42c <sMOIfaceLCD_writeString>
					sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    1676:	82 e3       	ldi	r24, 0x32	; 50
    1678:	92 e0       	ldi	r25, 0x02	; 2
    167a:	40 e0       	ldi	r20, 0x00	; 0
    167c:	50 e0       	ldi	r21, 0x00	; 0
    167e:	ba 01       	movw	r22, r20
    1680:	01 e0       	ldi	r16, 0x01	; 1
    1682:	10 e0       	ldi	r17, 0x00	; 0
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	0e 94 19 02 	call	0x432	; 0x432 <sMOIfaceLCD_writeStringXY>
					handle->ifaceDISH.pos = 0;
    168c:	19 a6       	lds	r17, 0xb9
    168e:	1a a6       	lds	r17, 0xba
    1690:	1b a6       	lds	r17, 0xbb
    1692:	1c a6       	lds	r17, 0xbc
					handle->ifaceDISH.ID = 0;
    1694:	19 a2       	lds	r17, 0x99
    1696:	1a a2       	lds	r17, 0x9a
    1698:	1b a2       	lds	r17, 0x9b
    169a:	1c a2       	lds	r17, 0x9c
					handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    169c:	87 e0       	ldi	r24, 0x07	; 7
    169e:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    16a0:	fb 82       	std	Y+3, r15	; 0x03
    16a2:	ea 82       	std	Y+2, r14	; 0x02
    16a4:	3c c7       	rjmp	.+3704   	; 0x251e <__stack+0x141f>
				}  else {
					if (handle->ifaceKEYPAD.lastkey == 11 && handle->ifaceKEYPAD.key_pressed_raised) { 
    16a6:	8b 30       	cpi	r24, 0x0B	; 11
    16a8:	91 05       	cpc	r25, r1
    16aa:	a1 05       	cpc	r26, r1
    16ac:	b1 05       	cpc	r27, r1
    16ae:	41 f5       	brne	.+80     	; 0x1700 <__stack+0x601>
    16b0:	2d 85       	ldd	r18, Y+13	; 0x0d
    16b2:	22 23       	and	r18, r18
    16b4:	29 f1       	breq	.+74     	; 0x1700 <__stack+0x601>
						/* Default exit sequence for state CheckKeyPress1 */
						handle->stateConfVector[1] = SMO_last_state;
    16b6:	88 e1       	ldi	r24, 0x18	; 24
    16b8:	89 83       	std	Y+1, r24	; 0x01
						handle->stateConfVectorPosition = 1;
    16ba:	ee 24       	eor	r14, r14
    16bc:	ff 24       	eor	r15, r15
    16be:	e3 94       	inc	r14
    16c0:	fb 82       	std	Y+3, r15	; 0x03
    16c2:	ea 82       	std	Y+2, r14	; 0x02
						/* Default enter sequence for state ShowAmount */
						/* Entry action for state 'ShowAmount'. */
						sMOIfaceLCD_clear();
    16c4:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceLCD_clear>
						sMOIfaceLCD_writeString("Nhap so luong:");
    16c8:	88 e3       	ldi	r24, 0x38	; 56
    16ca:	92 e0       	ldi	r25, 0x02	; 2
    16cc:	0e 94 16 02 	call	0x42c	; 0x42c <sMOIfaceLCD_writeString>
						sMOIfaceLCD_writeStringXY("_ _", 0, 1);
    16d0:	87 e4       	ldi	r24, 0x47	; 71
    16d2:	92 e0       	ldi	r25, 0x02	; 2
    16d4:	40 e0       	ldi	r20, 0x00	; 0
    16d6:	50 e0       	ldi	r21, 0x00	; 0
    16d8:	ba 01       	movw	r22, r20
    16da:	01 e0       	ldi	r16, 0x01	; 1
    16dc:	10 e0       	ldi	r17, 0x00	; 0
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	0e 94 19 02 	call	0x432	; 0x432 <sMOIfaceLCD_writeStringXY>
						handle->ifaceDISH.pos = 0;
    16e6:	19 a6       	lds	r17, 0xb9
    16e8:	1a a6       	lds	r17, 0xba
    16ea:	1b a6       	lds	r17, 0xbb
    16ec:	1c a6       	lds	r17, 0xbc
						handle->ifaceDISH.amount = 0;
    16ee:	1d a2       	lds	r17, 0x9d
    16f0:	1e a2       	lds	r17, 0x9e
    16f2:	1f a2       	lds	r17, 0x9f
    16f4:	18 a6       	lds	r17, 0xb8
						handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount;
    16f6:	8b e0       	ldi	r24, 0x0B	; 11
    16f8:	89 83       	std	Y+1, r24	; 0x01
						handle->stateConfVectorPosition = 1;
    16fa:	fb 82       	std	Y+3, r15	; 0x03
    16fc:	ea 82       	std	Y+2, r14	; 0x02
    16fe:	0f c7       	rjmp	.+3614   	; 0x251e <__stack+0x141f>
					}  else {
						if (handle->ifaceKEYPAD.lastkey == 16 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1700:	80 31       	cpi	r24, 0x10	; 16
    1702:	91 05       	cpc	r25, r1
    1704:	a1 05       	cpc	r26, r1
    1706:	b1 05       	cpc	r27, r1
    1708:	09 f0       	breq	.+2      	; 0x170c <__stack+0x60d>
    170a:	e7 c6       	rjmp	.+3534   	; 0x24da <__stack+0x13db>
    170c:	8d 85       	ldd	r24, Y+13	; 0x0d
    170e:	88 23       	and	r24, r24
    1710:	09 f4       	brne	.+2      	; 0x1714 <__stack+0x615>
    1712:	e3 c6       	rjmp	.+3526   	; 0x24da <__stack+0x13db>
							/* Default exit sequence for state CheckKeyPress1 */
							handle->stateConfVector[1] = SMO_last_state;
							handle->stateConfVectorPosition = 1;
    1714:	1b 83       	std	Y+3, r17	; 0x03
    1716:	0a 83       	std	Y+2, r16	; 0x02
							handle->iface.menuId = 0;
    1718:	1e a6       	lds	r17, 0xbe
    171a:	1f a6       	lds	r17, 0xbf
    171c:	18 aa       	sts	0x98, r17
    171e:	19 aa       	sts	0x99, r17
							/* Default enter sequence for state null */
							handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_;
    1720:	8f e0       	ldi	r24, 0x0F	; 15
    1722:	89 83       	std	Y+1, r24	; 0x01
    1724:	da c6       	rjmp	.+3508   	; 0x24da <__stack+0x13db>
}

/* The reactions of state CheckCode0. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0(SMO* handle) {
	/* The reactions of state CheckCode0. */
	if (handle->iface.menuId == 0) { 
    1726:	8e a5       	lds	r24, 0x6e
    1728:	9f a5       	lds	r25, 0x6f
    172a:	a8 a9       	sts	0x48, r26
    172c:	b9 a9       	sts	0x49, r27
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	a1 05       	cpc	r26, r1
    1732:	b1 05       	cpc	r27, r1
    1734:	09 f0       	breq	.+2      	; 0x1738 <__stack+0x639>
    1736:	69 c0       	rjmp	.+210    	; 0x180a <__stack+0x70b>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	8a 30       	cpi	r24, 0x0A	; 10
    173c:	41 f1       	breq	.+80     	; 0x178e <__stack+0x68f>
    173e:	8b 30       	cpi	r24, 0x0B	; 11
    1740:	40 f4       	brcc	.+16     	; 0x1752 <__stack+0x653>
    1742:	88 30       	cpi	r24, 0x08	; 8
    1744:	b1 f0       	breq	.+44     	; 0x1772 <__stack+0x673>
    1746:	89 30       	cpi	r24, 0x09	; 9
    1748:	d8 f4       	brcc	.+54     	; 0x1780 <__stack+0x681>
    174a:	87 30       	cpi	r24, 0x07	; 7
    174c:	09 f0       	breq	.+2      	; 0x1750 <__stack+0x651>
    174e:	41 c0       	rjmp	.+130    	; 0x17d2 <__stack+0x6d3>
    1750:	09 c0       	rjmp	.+18     	; 0x1764 <__stack+0x665>
    1752:	8c 30       	cpi	r24, 0x0C	; 12
    1754:	51 f1       	breq	.+84     	; 0x17aa <__stack+0x6ab>
    1756:	8c 30       	cpi	r24, 0x0C	; 12
    1758:	08 f1       	brcs	.+66     	; 0x179c <__stack+0x69d>
    175a:	8e 30       	cpi	r24, 0x0E	; 14
    175c:	69 f1       	breq	.+90     	; 0x17b8 <__stack+0x6b9>
    175e:	8f 30       	cpi	r24, 0x0F	; 15
    1760:	c1 f5       	brne	.+112    	; 0x17d2 <__stack+0x6d3>
    1762:	31 c0       	rjmp	.+98     	; 0x17c6 <__stack+0x6c7>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1764:	88 e1       	ldi	r24, 0x18	; 24
    1766:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	9b 83       	std	Y+3, r25	; 0x03
    176e:	8a 83       	std	Y+2, r24	; 0x02
    1770:	30 c0       	rjmp	.+96     	; 0x17d2 <__stack+0x6d3>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1772:	88 e1       	ldi	r24, 0x18	; 24
    1774:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	9b 83       	std	Y+3, r25	; 0x03
    177c:	8a 83       	std	Y+2, r24	; 0x02
    177e:	29 c0       	rjmp	.+82     	; 0x17d2 <__stack+0x6d3>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1780:	88 e1       	ldi	r24, 0x18	; 24
    1782:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	9b 83       	std	Y+3, r25	; 0x03
    178a:	8a 83       	std	Y+2, r24	; 0x02
    178c:	22 c0       	rjmp	.+68     	; 0x17d2 <__stack+0x6d3>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    178e:	88 e1       	ldi	r24, 0x18	; 24
    1790:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	9b 83       	std	Y+3, r25	; 0x03
    1798:	8a 83       	std	Y+2, r24	; 0x02
    179a:	1b c0       	rjmp	.+54     	; 0x17d2 <__stack+0x6d3>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    179c:	88 e1       	ldi	r24, 0x18	; 24
    179e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	9b 83       	std	Y+3, r25	; 0x03
    17a6:	8a 83       	std	Y+2, r24	; 0x02
    17a8:	14 c0       	rjmp	.+40     	; 0x17d2 <__stack+0x6d3>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    17aa:	88 e1       	ldi	r24, 0x18	; 24
    17ac:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	9b 83       	std	Y+3, r25	; 0x03
    17b4:	8a 83       	std	Y+2, r24	; 0x02
    17b6:	0d c0       	rjmp	.+26     	; 0x17d2 <__stack+0x6d3>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    17b8:	88 e1       	ldi	r24, 0x18	; 24
    17ba:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	9b 83       	std	Y+3, r25	; 0x03
    17c2:	8a 83       	std	Y+2, r24	; 0x02
    17c4:	06 c0       	rjmp	.+12     	; 0x17d2 <__stack+0x6d3>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    17c6:	88 e1       	ldi	r24, 0x18	; 24
    17c8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	9b 83       	std	Y+3, r25	; 0x03
    17d0:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    17d2:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    17d6:	88 e0       	ldi	r24, 0x08	; 8
    17d8:	92 e0       	ldi	r25, 0x02	; 2
    17da:	0e 94 16 02 	call	0x42c	; 0x42c <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    17de:	86 e1       	ldi	r24, 0x16	; 22
    17e0:	92 e0       	ldi	r25, 0x02	; 2
    17e2:	40 e0       	ldi	r20, 0x00	; 0
    17e4:	50 e0       	ldi	r21, 0x00	; 0
    17e6:	ba 01       	movw	r22, r20
    17e8:	01 e0       	ldi	r16, 0x01	; 1
    17ea:	10 e0       	ldi	r17, 0x00	; 0
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	0e 94 19 02 	call	0x432	; 0x432 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    17f4:	1e a6       	lds	r17, 0xbe
    17f6:	1f a6       	lds	r17, 0xbf
    17f8:	18 aa       	sts	0x98, r17
    17fa:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    17fc:	85 e0       	ldi	r24, 0x05	; 5
    17fe:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	9b 83       	std	Y+3, r25	; 0x03
    1806:	8a 83       	std	Y+2, r24	; 0x02
    1808:	8a c6       	rjmp	.+3348   	; 0x251e <__stack+0x141f>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state CheckCode0 */
			handle->stateConfVector[1] = SMO_last_state;
    180a:	88 e1       	ldi	r24, 0x18	; 24
    180c:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    180e:	88 24       	eor	r8, r8
    1810:	99 24       	eor	r9, r9
    1812:	83 94       	inc	r8
    1814:	9b 82       	std	Y+3, r9	; 0x03
    1816:	8a 82       	std	Y+2, r8	; 0x02
			/* Default enter sequence for state EnterCode */
			/* Entry action for state 'EnterCode'. */
			sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    1818:	c8 84       	ldd	r12, Y+8	; 0x08
    181a:	d9 84       	ldd	r13, Y+9	; 0x09
    181c:	ea 84       	ldd	r14, Y+10	; 0x0a
    181e:	fb 84       	ldd	r15, Y+11	; 0x0b
    1820:	89 a5       	lds	r24, 0x69
    1822:	9a a5       	lds	r25, 0x6a
    1824:	ab a5       	lds	r26, 0x6b
    1826:	bc a5       	lds	r27, 0x6c
    1828:	9c 01       	movw	r18, r24
    182a:	ad 01       	movw	r20, r26
    182c:	22 0f       	add	r18, r18
    182e:	33 1f       	adc	r19, r19
    1830:	44 1f       	adc	r20, r20
    1832:	55 1f       	adc	r21, r21
    1834:	c7 01       	movw	r24, r14
    1836:	b6 01       	movw	r22, r12
    1838:	ee 24       	eor	r14, r14
    183a:	ff 24       	eor	r15, r15
    183c:	87 01       	movw	r16, r14
    183e:	e3 94       	inc	r14
    1840:	aa 24       	eor	r10, r10
    1842:	bb 24       	eor	r11, r11
    1844:	65 01       	movw	r12, r10
    1846:	a3 94       	inc	r10
    1848:	0e 94 28 02 	call	0x450	; 0x450 <sMOIfaceLCD_writeNumberXY>
			handle->ifaceDISH.pos += 1;
    184c:	89 a5       	lds	r24, 0x69
    184e:	9a a5       	lds	r25, 0x6a
    1850:	ab a5       	lds	r26, 0x6b
    1852:	bc a5       	lds	r27, 0x6c
    1854:	01 96       	adiw	r24, 0x01	; 1
    1856:	a1 1d       	adc	r26, r1
    1858:	b1 1d       	adc	r27, r1
    185a:	89 a7       	lds	r24, 0x79
    185c:	9a a7       	lds	r25, 0x7a
    185e:	ab a7       	lds	r26, 0x7b
    1860:	bc a7       	lds	r27, 0x7c
			handle->ifaceDISH.ID = handle->ifaceDISH.ID * 10 + handle->ifaceKEYPAD.lastkey;
    1862:	69 a1       	lds	r22, 0x49
    1864:	7a a1       	lds	r23, 0x4a
    1866:	8b a1       	lds	r24, 0x4b
    1868:	9c a1       	lds	r25, 0x4c
    186a:	2a e0       	ldi	r18, 0x0A	; 10
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e0       	ldi	r20, 0x00	; 0
    1870:	50 e0       	ldi	r21, 0x00	; 0
    1872:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <__mulsi3>
    1876:	ab 01       	movw	r20, r22
    1878:	bc 01       	movw	r22, r24
    187a:	88 85       	ldd	r24, Y+8	; 0x08
    187c:	99 85       	ldd	r25, Y+9	; 0x09
    187e:	aa 85       	ldd	r26, Y+10	; 0x0a
    1880:	bb 85       	ldd	r27, Y+11	; 0x0b
    1882:	84 0f       	add	r24, r20
    1884:	95 1f       	adc	r25, r21
    1886:	a6 1f       	adc	r26, r22
    1888:	b7 1f       	adc	r27, r23
    188a:	89 a3       	lds	r24, 0x59
    188c:	9a a3       	lds	r25, 0x5a
    188e:	ab a3       	lds	r26, 0x5b
    1890:	bc a3       	lds	r27, 0x5c
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode;
    1892:	88 e0       	ldi	r24, 0x08	; 8
    1894:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1896:	9b 82       	std	Y+3, r9	; 0x03
    1898:	8a 82       	std	Y+2, r8	; 0x02
    189a:	41 c6       	rjmp	.+3202   	; 0x251e <__stack+0x141f>
}

/* The reactions of state ShowAmount. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount(SMO* handle) {
	/* The reactions of state ShowAmount. */
	if (handle->iface.menuId == 0) { 
    189c:	8e a5       	lds	r24, 0x6e
    189e:	9f a5       	lds	r25, 0x6f
    18a0:	a8 a9       	sts	0x48, r26
    18a2:	b9 a9       	sts	0x49, r27
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	a1 05       	cpc	r26, r1
    18a8:	b1 05       	cpc	r27, r1
    18aa:	09 f0       	breq	.+2      	; 0x18ae <__stack+0x7af>
    18ac:	69 c0       	rjmp	.+210    	; 0x1980 <__stack+0x881>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	8a 30       	cpi	r24, 0x0A	; 10
    18b2:	41 f1       	breq	.+80     	; 0x1904 <__stack+0x805>
    18b4:	8b 30       	cpi	r24, 0x0B	; 11
    18b6:	40 f4       	brcc	.+16     	; 0x18c8 <__stack+0x7c9>
    18b8:	88 30       	cpi	r24, 0x08	; 8
    18ba:	b1 f0       	breq	.+44     	; 0x18e8 <__stack+0x7e9>
    18bc:	89 30       	cpi	r24, 0x09	; 9
    18be:	d8 f4       	brcc	.+54     	; 0x18f6 <__stack+0x7f7>
    18c0:	87 30       	cpi	r24, 0x07	; 7
    18c2:	09 f0       	breq	.+2      	; 0x18c6 <__stack+0x7c7>
    18c4:	41 c0       	rjmp	.+130    	; 0x1948 <__stack+0x849>
    18c6:	09 c0       	rjmp	.+18     	; 0x18da <__stack+0x7db>
    18c8:	8c 30       	cpi	r24, 0x0C	; 12
    18ca:	51 f1       	breq	.+84     	; 0x1920 <__stack+0x821>
    18cc:	8c 30       	cpi	r24, 0x0C	; 12
    18ce:	08 f1       	brcs	.+66     	; 0x1912 <__stack+0x813>
    18d0:	8e 30       	cpi	r24, 0x0E	; 14
    18d2:	69 f1       	breq	.+90     	; 0x192e <__stack+0x82f>
    18d4:	8f 30       	cpi	r24, 0x0F	; 15
    18d6:	c1 f5       	brne	.+112    	; 0x1948 <__stack+0x849>
    18d8:	31 c0       	rjmp	.+98     	; 0x193c <__stack+0x83d>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    18da:	88 e1       	ldi	r24, 0x18	; 24
    18dc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	9b 83       	std	Y+3, r25	; 0x03
    18e4:	8a 83       	std	Y+2, r24	; 0x02
    18e6:	30 c0       	rjmp	.+96     	; 0x1948 <__stack+0x849>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    18e8:	88 e1       	ldi	r24, 0x18	; 24
    18ea:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	9b 83       	std	Y+3, r25	; 0x03
    18f2:	8a 83       	std	Y+2, r24	; 0x02
    18f4:	29 c0       	rjmp	.+82     	; 0x1948 <__stack+0x849>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    18f6:	88 e1       	ldi	r24, 0x18	; 24
    18f8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	9b 83       	std	Y+3, r25	; 0x03
    1900:	8a 83       	std	Y+2, r24	; 0x02
    1902:	22 c0       	rjmp	.+68     	; 0x1948 <__stack+0x849>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1904:	88 e1       	ldi	r24, 0x18	; 24
    1906:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	9b 83       	std	Y+3, r25	; 0x03
    190e:	8a 83       	std	Y+2, r24	; 0x02
    1910:	1b c0       	rjmp	.+54     	; 0x1948 <__stack+0x849>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1912:	88 e1       	ldi	r24, 0x18	; 24
    1914:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	9b 83       	std	Y+3, r25	; 0x03
    191c:	8a 83       	std	Y+2, r24	; 0x02
    191e:	14 c0       	rjmp	.+40     	; 0x1948 <__stack+0x849>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1920:	88 e1       	ldi	r24, 0x18	; 24
    1922:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	9b 83       	std	Y+3, r25	; 0x03
    192a:	8a 83       	std	Y+2, r24	; 0x02
    192c:	0d c0       	rjmp	.+26     	; 0x1948 <__stack+0x849>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    192e:	88 e1       	ldi	r24, 0x18	; 24
    1930:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	9b 83       	std	Y+3, r25	; 0x03
    1938:	8a 83       	std	Y+2, r24	; 0x02
    193a:	06 c0       	rjmp	.+12     	; 0x1948 <__stack+0x849>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    193c:	88 e1       	ldi	r24, 0x18	; 24
    193e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	9b 83       	std	Y+3, r25	; 0x03
    1946:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1948:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    194c:	88 e0       	ldi	r24, 0x08	; 8
    194e:	92 e0       	ldi	r25, 0x02	; 2
    1950:	0e 94 16 02 	call	0x42c	; 0x42c <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    1954:	86 e1       	ldi	r24, 0x16	; 22
    1956:	92 e0       	ldi	r25, 0x02	; 2
    1958:	40 e0       	ldi	r20, 0x00	; 0
    195a:	50 e0       	ldi	r21, 0x00	; 0
    195c:	ba 01       	movw	r22, r20
    195e:	01 e0       	ldi	r16, 0x01	; 1
    1960:	10 e0       	ldi	r17, 0x00	; 0
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	0e 94 19 02 	call	0x432	; 0x432 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    196a:	1e a6       	lds	r17, 0xbe
    196c:	1f a6       	lds	r17, 0xbf
    196e:	18 aa       	sts	0x98, r17
    1970:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1972:	85 e0       	ldi	r24, 0x05	; 5
    1974:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	9b 83       	std	Y+3, r25	; 0x03
    197c:	8a 83       	std	Y+2, r24	; 0x02
    197e:	cf c5       	rjmp	.+2974   	; 0x251e <__stack+0x141f>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state ShowAmount */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    1980:	1b 83       	std	Y+3, r17	; 0x03
    1982:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress2 */
			/* Entry action for state 'CheckKeyPress2'. */
			handle->ifaceKEYPAD.lastkey = 0;
    1984:	18 86       	std	Y+8, r1	; 0x08
    1986:	19 86       	std	Y+9, r1	; 0x09
    1988:	1a 86       	std	Y+10, r1	; 0x0a
    198a:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2;
    198c:	a9 82       	std	Y+1, r10	; 0x01
    198e:	a5 c5       	rjmp	.+2890   	; 0x24da <__stack+0x13db>
}

/* The reactions of state CheckKeyPress2. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2(SMO* handle) {
	/* The reactions of state CheckKeyPress2. */
	if (handle->iface.menuId == 0) { 
    1990:	8e a5       	lds	r24, 0x6e
    1992:	9f a5       	lds	r25, 0x6f
    1994:	a8 a9       	sts	0x48, r26
    1996:	b9 a9       	sts	0x49, r27
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	a1 05       	cpc	r26, r1
    199c:	b1 05       	cpc	r27, r1
    199e:	09 f0       	breq	.+2      	; 0x19a2 <__stack+0x8a3>
    19a0:	69 c0       	rjmp	.+210    	; 0x1a74 <__stack+0x975>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	8a 30       	cpi	r24, 0x0A	; 10
    19a6:	41 f1       	breq	.+80     	; 0x19f8 <__stack+0x8f9>
    19a8:	8b 30       	cpi	r24, 0x0B	; 11
    19aa:	40 f4       	brcc	.+16     	; 0x19bc <__stack+0x8bd>
    19ac:	88 30       	cpi	r24, 0x08	; 8
    19ae:	b1 f0       	breq	.+44     	; 0x19dc <__stack+0x8dd>
    19b0:	89 30       	cpi	r24, 0x09	; 9
    19b2:	d8 f4       	brcc	.+54     	; 0x19ea <__stack+0x8eb>
    19b4:	87 30       	cpi	r24, 0x07	; 7
    19b6:	09 f0       	breq	.+2      	; 0x19ba <__stack+0x8bb>
    19b8:	41 c0       	rjmp	.+130    	; 0x1a3c <__stack+0x93d>
    19ba:	09 c0       	rjmp	.+18     	; 0x19ce <__stack+0x8cf>
    19bc:	8c 30       	cpi	r24, 0x0C	; 12
    19be:	51 f1       	breq	.+84     	; 0x1a14 <__stack+0x915>
    19c0:	8c 30       	cpi	r24, 0x0C	; 12
    19c2:	08 f1       	brcs	.+66     	; 0x1a06 <__stack+0x907>
    19c4:	8e 30       	cpi	r24, 0x0E	; 14
    19c6:	69 f1       	breq	.+90     	; 0x1a22 <__stack+0x923>
    19c8:	8f 30       	cpi	r24, 0x0F	; 15
    19ca:	c1 f5       	brne	.+112    	; 0x1a3c <__stack+0x93d>
    19cc:	31 c0       	rjmp	.+98     	; 0x1a30 <__stack+0x931>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    19ce:	88 e1       	ldi	r24, 0x18	; 24
    19d0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	9b 83       	std	Y+3, r25	; 0x03
    19d8:	8a 83       	std	Y+2, r24	; 0x02
    19da:	30 c0       	rjmp	.+96     	; 0x1a3c <__stack+0x93d>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    19dc:	88 e1       	ldi	r24, 0x18	; 24
    19de:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	9b 83       	std	Y+3, r25	; 0x03
    19e6:	8a 83       	std	Y+2, r24	; 0x02
    19e8:	29 c0       	rjmp	.+82     	; 0x1a3c <__stack+0x93d>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    19ea:	88 e1       	ldi	r24, 0x18	; 24
    19ec:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	9b 83       	std	Y+3, r25	; 0x03
    19f4:	8a 83       	std	Y+2, r24	; 0x02
    19f6:	22 c0       	rjmp	.+68     	; 0x1a3c <__stack+0x93d>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    19f8:	88 e1       	ldi	r24, 0x18	; 24
    19fa:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	9b 83       	std	Y+3, r25	; 0x03
    1a02:	8a 83       	std	Y+2, r24	; 0x02
    1a04:	1b c0       	rjmp	.+54     	; 0x1a3c <__stack+0x93d>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1a06:	88 e1       	ldi	r24, 0x18	; 24
    1a08:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	9b 83       	std	Y+3, r25	; 0x03
    1a10:	8a 83       	std	Y+2, r24	; 0x02
    1a12:	14 c0       	rjmp	.+40     	; 0x1a3c <__stack+0x93d>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1a14:	88 e1       	ldi	r24, 0x18	; 24
    1a16:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	9b 83       	std	Y+3, r25	; 0x03
    1a1e:	8a 83       	std	Y+2, r24	; 0x02
    1a20:	0d c0       	rjmp	.+26     	; 0x1a3c <__stack+0x93d>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1a22:	88 e1       	ldi	r24, 0x18	; 24
    1a24:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	9b 83       	std	Y+3, r25	; 0x03
    1a2c:	8a 83       	std	Y+2, r24	; 0x02
    1a2e:	06 c0       	rjmp	.+12     	; 0x1a3c <__stack+0x93d>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1a30:	88 e1       	ldi	r24, 0x18	; 24
    1a32:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	9b 83       	std	Y+3, r25	; 0x03
    1a3a:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1a3c:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1a40:	88 e0       	ldi	r24, 0x08	; 8
    1a42:	92 e0       	ldi	r25, 0x02	; 2
    1a44:	0e 94 16 02 	call	0x42c	; 0x42c <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    1a48:	86 e1       	ldi	r24, 0x16	; 22
    1a4a:	92 e0       	ldi	r25, 0x02	; 2
    1a4c:	40 e0       	ldi	r20, 0x00	; 0
    1a4e:	50 e0       	ldi	r21, 0x00	; 0
    1a50:	ba 01       	movw	r22, r20
    1a52:	01 e0       	ldi	r16, 0x01	; 1
    1a54:	10 e0       	ldi	r17, 0x00	; 0
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	0e 94 19 02 	call	0x432	; 0x432 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1a5e:	1e a6       	lds	r17, 0xbe
    1a60:	1f a6       	lds	r17, 0xbf
    1a62:	18 aa       	sts	0x98, r17
    1a64:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1a66:	85 e0       	ldi	r24, 0x05	; 5
    1a68:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	9b 83       	std	Y+3, r25	; 0x03
    1a70:	8a 83       	std	Y+2, r24	; 0x02
    1a72:	55 c5       	rjmp	.+2730   	; 0x251e <__stack+0x141f>
	}  else {
		if (handle->ifaceDISH.pos < 2 && handle->ifaceKEYPAD.lastkey == 10 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1a74:	89 a5       	lds	r24, 0x69
    1a76:	9a a5       	lds	r25, 0x6a
    1a78:	ab a5       	lds	r26, 0x6b
    1a7a:	bc a5       	lds	r27, 0x6c
    1a7c:	82 30       	cpi	r24, 0x02	; 2
    1a7e:	91 05       	cpc	r25, r1
    1a80:	a1 05       	cpc	r26, r1
    1a82:	b1 05       	cpc	r27, r1
    1a84:	0c f0       	brlt	.+2      	; 0x1a88 <__stack+0x989>
    1a86:	68 c0       	rjmp	.+208    	; 0x1b58 <__stack+0xa59>
    1a88:	c8 84       	ldd	r12, Y+8	; 0x08
    1a8a:	d9 84       	ldd	r13, Y+9	; 0x09
    1a8c:	ea 84       	ldd	r14, Y+10	; 0x0a
    1a8e:	fb 84       	ldd	r15, Y+11	; 0x0b
    1a90:	ea e0       	ldi	r30, 0x0A	; 10
    1a92:	ce 16       	cp	r12, r30
    1a94:	d1 04       	cpc	r13, r1
    1a96:	e1 04       	cpc	r14, r1
    1a98:	f1 04       	cpc	r15, r1
    1a9a:	61 f4       	brne	.+24     	; 0x1ab4 <__stack+0x9b5>
    1a9c:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a9e:	22 23       	and	r18, r18
    1aa0:	49 f0       	breq	.+18     	; 0x1ab4 <__stack+0x9b5>
			/* Default exit sequence for state CheckKeyPress2 */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    1aa2:	1b 83       	std	Y+3, r17	; 0x03
    1aa4:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckAmount0 */
			/* Entry action for state 'CheckAmount0'. */
			handle->ifaceKEYPAD.lastkey = 0;
    1aa6:	18 86       	std	Y+8, r1	; 0x08
    1aa8:	19 86       	std	Y+9, r1	; 0x09
    1aaa:	1a 86       	std	Y+10, r1	; 0x0a
    1aac:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0;
    1aae:	fd e0       	ldi	r31, 0x0D	; 13
    1ab0:	f9 83       	std	Y+1, r31	; 0x01
    1ab2:	13 c5       	rjmp	.+2598   	; 0x24da <__stack+0x13db>
			handle->stateConfVectorPosition = 1;
		}  else {
			if (handle->ifaceDISH.pos < 2 && handle->ifaceKEYPAD.lastkey <= 9 && handle->ifaceKEYPAD.lastkey >= 1 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1ab4:	2a e0       	ldi	r18, 0x0A	; 10
    1ab6:	c2 16       	cp	r12, r18
    1ab8:	d1 04       	cpc	r13, r1
    1aba:	e1 04       	cpc	r14, r1
    1abc:	f1 04       	cpc	r15, r1
    1abe:	0c f0       	brlt	.+2      	; 0x1ac2 <__stack+0x9c3>
    1ac0:	4b c0       	rjmp	.+150    	; 0x1b58 <__stack+0xa59>
    1ac2:	1c 14       	cp	r1, r12
    1ac4:	1d 04       	cpc	r1, r13
    1ac6:	1e 04       	cpc	r1, r14
    1ac8:	1f 04       	cpc	r1, r15
    1aca:	0c f0       	brlt	.+2      	; 0x1ace <__stack+0x9cf>
    1acc:	45 c0       	rjmp	.+138    	; 0x1b58 <__stack+0xa59>
    1ace:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ad0:	22 23       	and	r18, r18
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <__stack+0x9d7>
    1ad4:	41 c0       	rjmp	.+130    	; 0x1b58 <__stack+0xa59>
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1ad6:	28 e1       	ldi	r18, 0x18	; 24
    1ad8:	29 83       	std	Y+1, r18	; 0x01
				handle->stateConfVectorPosition = 1;
    1ada:	88 24       	eor	r8, r8
    1adc:	99 24       	eor	r9, r9
    1ade:	83 94       	inc	r8
    1ae0:	9b 82       	std	Y+3, r9	; 0x03
    1ae2:	8a 82       	std	Y+2, r8	; 0x02
				/* Default enter sequence for state EnterAmount */
				/* Entry action for state 'EnterAmount'. */
				sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    1ae4:	9c 01       	movw	r18, r24
    1ae6:	ad 01       	movw	r20, r26
    1ae8:	22 0f       	add	r18, r18
    1aea:	33 1f       	adc	r19, r19
    1aec:	44 1f       	adc	r20, r20
    1aee:	55 1f       	adc	r21, r21
    1af0:	c7 01       	movw	r24, r14
    1af2:	b6 01       	movw	r22, r12
    1af4:	ee 24       	eor	r14, r14
    1af6:	ff 24       	eor	r15, r15
    1af8:	87 01       	movw	r16, r14
    1afa:	e3 94       	inc	r14
    1afc:	aa 24       	eor	r10, r10
    1afe:	bb 24       	eor	r11, r11
    1b00:	65 01       	movw	r12, r10
    1b02:	a3 94       	inc	r10
    1b04:	0e 94 28 02 	call	0x450	; 0x450 <sMOIfaceLCD_writeNumberXY>
				handle->ifaceDISH.pos += 1;
    1b08:	89 a5       	lds	r24, 0x69
    1b0a:	9a a5       	lds	r25, 0x6a
    1b0c:	ab a5       	lds	r26, 0x6b
    1b0e:	bc a5       	lds	r27, 0x6c
    1b10:	01 96       	adiw	r24, 0x01	; 1
    1b12:	a1 1d       	adc	r26, r1
    1b14:	b1 1d       	adc	r27, r1
    1b16:	89 a7       	lds	r24, 0x79
    1b18:	9a a7       	lds	r25, 0x7a
    1b1a:	ab a7       	lds	r26, 0x7b
    1b1c:	bc a7       	lds	r27, 0x7c
				handle->ifaceDISH.amount = handle->ifaceDISH.amount * 10 + handle->ifaceKEYPAD.lastkey;
    1b1e:	6d a1       	lds	r22, 0x4d
    1b20:	7e a1       	lds	r23, 0x4e
    1b22:	8f a1       	lds	r24, 0x4f
    1b24:	98 a5       	lds	r25, 0x68
    1b26:	2a e0       	ldi	r18, 0x0A	; 10
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	40 e0       	ldi	r20, 0x00	; 0
    1b2c:	50 e0       	ldi	r21, 0x00	; 0
    1b2e:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <__mulsi3>
    1b32:	ab 01       	movw	r20, r22
    1b34:	bc 01       	movw	r22, r24
    1b36:	88 85       	ldd	r24, Y+8	; 0x08
    1b38:	99 85       	ldd	r25, Y+9	; 0x09
    1b3a:	aa 85       	ldd	r26, Y+10	; 0x0a
    1b3c:	bb 85       	ldd	r27, Y+11	; 0x0b
    1b3e:	84 0f       	add	r24, r20
    1b40:	95 1f       	adc	r25, r21
    1b42:	a6 1f       	adc	r26, r22
    1b44:	b7 1f       	adc	r27, r23
    1b46:	8d a3       	lds	r24, 0x5d
    1b48:	9e a3       	lds	r25, 0x5e
    1b4a:	af a3       	lds	r26, 0x5f
    1b4c:	b8 a7       	lds	r27, 0x78
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount;
    1b4e:	8e e0       	ldi	r24, 0x0E	; 14
    1b50:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1b52:	9b 82       	std	Y+3, r9	; 0x03
    1b54:	8a 82       	std	Y+2, r8	; 0x02
    1b56:	e3 c4       	rjmp	.+2502   	; 0x251e <__stack+0x141f>
			}  else {
				if (handle->ifaceKEYPAD.lastkey == 12 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1b58:	88 85       	ldd	r24, Y+8	; 0x08
    1b5a:	99 85       	ldd	r25, Y+9	; 0x09
    1b5c:	aa 85       	ldd	r26, Y+10	; 0x0a
    1b5e:	bb 85       	ldd	r27, Y+11	; 0x0b
    1b60:	8c 30       	cpi	r24, 0x0C	; 12
    1b62:	91 05       	cpc	r25, r1
    1b64:	a1 05       	cpc	r26, r1
    1b66:	b1 05       	cpc	r27, r1
    1b68:	41 f5       	brne	.+80     	; 0x1bba <__stack+0xabb>
    1b6a:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b6c:	22 23       	and	r18, r18
    1b6e:	29 f1       	breq	.+74     	; 0x1bba <__stack+0xabb>
					/* Default exit sequence for state CheckKeyPress2 */
					handle->stateConfVector[1] = SMO_last_state;
    1b70:	88 e1       	ldi	r24, 0x18	; 24
    1b72:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    1b74:	ee 24       	eor	r14, r14
    1b76:	ff 24       	eor	r15, r15
    1b78:	e3 94       	inc	r14
    1b7a:	fb 82       	std	Y+3, r15	; 0x03
    1b7c:	ea 82       	std	Y+2, r14	; 0x02
					/* Default enter sequence for state ShowAmount */
					/* Entry action for state 'ShowAmount'. */
					sMOIfaceLCD_clear();
    1b7e:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceLCD_clear>
					sMOIfaceLCD_writeString("Nhap so luong:");
    1b82:	88 e3       	ldi	r24, 0x38	; 56
    1b84:	92 e0       	ldi	r25, 0x02	; 2
    1b86:	0e 94 16 02 	call	0x42c	; 0x42c <sMOIfaceLCD_writeString>
					sMOIfaceLCD_writeStringXY("_ _", 0, 1);
    1b8a:	87 e4       	ldi	r24, 0x47	; 71
    1b8c:	92 e0       	ldi	r25, 0x02	; 2
    1b8e:	40 e0       	ldi	r20, 0x00	; 0
    1b90:	50 e0       	ldi	r21, 0x00	; 0
    1b92:	ba 01       	movw	r22, r20
    1b94:	01 e0       	ldi	r16, 0x01	; 1
    1b96:	10 e0       	ldi	r17, 0x00	; 0
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	0e 94 19 02 	call	0x432	; 0x432 <sMOIfaceLCD_writeStringXY>
					handle->ifaceDISH.pos = 0;
    1ba0:	19 a6       	lds	r17, 0xb9
    1ba2:	1a a6       	lds	r17, 0xba
    1ba4:	1b a6       	lds	r17, 0xbb
    1ba6:	1c a6       	lds	r17, 0xbc
					handle->ifaceDISH.amount = 0;
    1ba8:	1d a2       	lds	r17, 0x9d
    1baa:	1e a2       	lds	r17, 0x9e
    1bac:	1f a2       	lds	r17, 0x9f
    1bae:	18 a6       	lds	r17, 0xb8
					handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount;
    1bb0:	8b e0       	ldi	r24, 0x0B	; 11
    1bb2:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    1bb4:	fb 82       	std	Y+3, r15	; 0x03
    1bb6:	ea 82       	std	Y+2, r14	; 0x02
    1bb8:	b2 c4       	rjmp	.+2404   	; 0x251e <__stack+0x141f>
				}  else {
					if (handle->ifaceKEYPAD.lastkey == 11 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1bba:	8b 30       	cpi	r24, 0x0B	; 11
    1bbc:	91 05       	cpc	r25, r1
    1bbe:	a1 05       	cpc	r26, r1
    1bc0:	b1 05       	cpc	r27, r1
    1bc2:	09 f0       	breq	.+2      	; 0x1bc6 <__stack+0xac7>
    1bc4:	77 c0       	rjmp	.+238    	; 0x1cb4 <__stack+0xbb5>
    1bc6:	2d 85       	ldd	r18, Y+13	; 0x0d
    1bc8:	22 23       	and	r18, r18
    1bca:	09 f4       	brne	.+2      	; 0x1bce <__stack+0xacf>
    1bcc:	73 c0       	rjmp	.+230    	; 0x1cb4 <__stack+0xbb5>
						/* Default exit sequence for state EnterData */
						/* Default exit sequence for region r1 */
						/* Handle exit of all possible states (of r1) at position 1... */
						switch(handle->stateConfVector[ 1 ]) {
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	8a 30       	cpi	r24, 0x0A	; 10
    1bd2:	41 f1       	breq	.+80     	; 0x1c24 <__stack+0xb25>
    1bd4:	8b 30       	cpi	r24, 0x0B	; 11
    1bd6:	40 f4       	brcc	.+16     	; 0x1be8 <__stack+0xae9>
    1bd8:	88 30       	cpi	r24, 0x08	; 8
    1bda:	b1 f0       	breq	.+44     	; 0x1c08 <__stack+0xb09>
    1bdc:	89 30       	cpi	r24, 0x09	; 9
    1bde:	d8 f4       	brcc	.+54     	; 0x1c16 <__stack+0xb17>
    1be0:	87 30       	cpi	r24, 0x07	; 7
    1be2:	09 f0       	breq	.+2      	; 0x1be6 <__stack+0xae7>
    1be4:	41 c0       	rjmp	.+130    	; 0x1c68 <__stack+0xb69>
    1be6:	09 c0       	rjmp	.+18     	; 0x1bfa <__stack+0xafb>
    1be8:	8c 30       	cpi	r24, 0x0C	; 12
    1bea:	51 f1       	breq	.+84     	; 0x1c40 <__stack+0xb41>
    1bec:	8c 30       	cpi	r24, 0x0C	; 12
    1bee:	08 f1       	brcs	.+66     	; 0x1c32 <__stack+0xb33>
    1bf0:	8e 30       	cpi	r24, 0x0E	; 14
    1bf2:	69 f1       	breq	.+90     	; 0x1c4e <__stack+0xb4f>
    1bf4:	8f 30       	cpi	r24, 0x0F	; 15
    1bf6:	c1 f5       	brne	.+112    	; 0x1c68 <__stack+0xb69>
    1bf8:	31 c0       	rjmp	.+98     	; 0x1c5c <__stack+0xb5d>
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
								/* Default exit sequence for state ShowCode */
								handle->stateConfVector[1] = SMO_last_state;
    1bfa:	88 e1       	ldi	r24, 0x18	; 24
    1bfc:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	9b 83       	std	Y+3, r25	; 0x03
    1c04:	8a 83       	std	Y+2, r24	; 0x02
    1c06:	30 c0       	rjmp	.+96     	; 0x1c68 <__stack+0xb69>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
								/* Default exit sequence for state EnterCode */
								handle->stateConfVector[1] = SMO_last_state;
    1c08:	88 e1       	ldi	r24, 0x18	; 24
    1c0a:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	9b 83       	std	Y+3, r25	; 0x03
    1c12:	8a 83       	std	Y+2, r24	; 0x02
    1c14:	29 c0       	rjmp	.+82     	; 0x1c68 <__stack+0xb69>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
								/* Default exit sequence for state CheckKeyPress1 */
								handle->stateConfVector[1] = SMO_last_state;
    1c16:	88 e1       	ldi	r24, 0x18	; 24
    1c18:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	9b 83       	std	Y+3, r25	; 0x03
    1c20:	8a 83       	std	Y+2, r24	; 0x02
    1c22:	22 c0       	rjmp	.+68     	; 0x1c68 <__stack+0xb69>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
								/* Default exit sequence for state CheckCode0 */
								handle->stateConfVector[1] = SMO_last_state;
    1c24:	88 e1       	ldi	r24, 0x18	; 24
    1c26:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	9b 83       	std	Y+3, r25	; 0x03
    1c2e:	8a 83       	std	Y+2, r24	; 0x02
    1c30:	1b c0       	rjmp	.+54     	; 0x1c68 <__stack+0xb69>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
								/* Default exit sequence for state ShowAmount */
								handle->stateConfVector[1] = SMO_last_state;
    1c32:	88 e1       	ldi	r24, 0x18	; 24
    1c34:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	9b 83       	std	Y+3, r25	; 0x03
    1c3c:	8a 83       	std	Y+2, r24	; 0x02
    1c3e:	14 c0       	rjmp	.+40     	; 0x1c68 <__stack+0xb69>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
								/* Default exit sequence for state CheckKeyPress2 */
								handle->stateConfVector[1] = SMO_last_state;
    1c40:	88 e1       	ldi	r24, 0x18	; 24
    1c42:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	9b 83       	std	Y+3, r25	; 0x03
    1c4a:	8a 83       	std	Y+2, r24	; 0x02
    1c4c:	0d c0       	rjmp	.+26     	; 0x1c68 <__stack+0xb69>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
								/* Default exit sequence for state EnterAmount */
								handle->stateConfVector[1] = SMO_last_state;
    1c4e:	88 e1       	ldi	r24, 0x18	; 24
    1c50:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	9b 83       	std	Y+3, r25	; 0x03
    1c58:	8a 83       	std	Y+2, r24	; 0x02
    1c5a:	06 c0       	rjmp	.+12     	; 0x1c68 <__stack+0xb69>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
								/* Default exit sequence for final state. */
								handle->stateConfVector[1] = SMO_last_state;
    1c5c:	88 e1       	ldi	r24, 0x18	; 24
    1c5e:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	9b 83       	std	Y+3, r25	; 0x03
    1c66:	8a 83       	std	Y+2, r24	; 0x02
								break;
							}
							default: break;
						}
						handle->ifaceRF.result = bool_false;
    1c68:	1f 8a       	std	Y+23, r1	; 0x17
						/* Default enter sequence for state SendData */
						/* Default enter sequence for region r1 */
						/* Default react sequence for initial entry  */
						/* Default enter sequence for state Send */
						/* Entry action for state 'Send'. */
						handle->ifaceRF.retry += 1;
    1c6a:	88 8d       	ldd	r24, Y+24	; 0x18
    1c6c:	99 8d       	ldd	r25, Y+25	; 0x19
    1c6e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1c70:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1c72:	01 96       	adiw	r24, 0x01	; 1
    1c74:	a1 1d       	adc	r26, r1
    1c76:	b1 1d       	adc	r27, r1
    1c78:	88 8f       	std	Y+24, r24	; 0x18
    1c7a:	99 8f       	std	Y+25, r25	; 0x19
    1c7c:	aa 8f       	std	Y+26, r26	; 0x1a
    1c7e:	bb 8f       	std	Y+27, r27	; 0x1b
						handle->ifaceRF.result = sMOIfaceRF_sendData(handle->iface.menuId, handle->iface.tableId, handle->ifaceDISH.ID, handle->ifaceDISH.amount);
    1c80:	6e a5       	lds	r22, 0x6e
    1c82:	7f a5       	lds	r23, 0x6f
    1c84:	88 a9       	sts	0x48, r24
    1c86:	99 a9       	sts	0x49, r25
    1c88:	2a a9       	sts	0x4a, r18
    1c8a:	3b a9       	sts	0x4b, r19
    1c8c:	4c a9       	sts	0x4c, r20
    1c8e:	5d a9       	sts	0x4d, r21
    1c90:	e9 a0       	lds	r30, 0x89
    1c92:	fa a0       	lds	r31, 0x8a
    1c94:	0b a1       	lds	r16, 0x4b
    1c96:	1c a1       	lds	r17, 0x4c
    1c98:	ad a0       	lds	r26, 0x8d
    1c9a:	be a0       	lds	r27, 0x8e
    1c9c:	cf a0       	lds	r28, 0x8f
    1c9e:	d8 a4       	lds	r29, 0xa8
    1ca0:	0e 94 0d 03 	call	0x61a	; 0x61a <sMOIfaceRF_sendData>
    1ca4:	8f 8b       	std	Y+23, r24	; 0x17
						handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_Send;
    1ca6:	83 e1       	ldi	r24, 0x13	; 19
    1ca8:	89 83       	std	Y+1, r24	; 0x01
						handle->stateConfVectorPosition = 1;
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	9b 83       	std	Y+3, r25	; 0x03
    1cb0:	8a 83       	std	Y+2, r24	; 0x02
    1cb2:	35 c4       	rjmp	.+2154   	; 0x251e <__stack+0x141f>
					}  else {
						if (handle->ifaceKEYPAD.lastkey == 16 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1cb4:	80 31       	cpi	r24, 0x10	; 16
    1cb6:	91 05       	cpc	r25, r1
    1cb8:	a1 05       	cpc	r26, r1
    1cba:	b1 05       	cpc	r27, r1
    1cbc:	09 f0       	breq	.+2      	; 0x1cc0 <__stack+0xbc1>
    1cbe:	0d c4       	rjmp	.+2074   	; 0x24da <__stack+0x13db>
    1cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc2:	88 23       	and	r24, r24
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <__stack+0xbc9>
    1cc6:	09 c4       	rjmp	.+2066   	; 0x24da <__stack+0x13db>
							/* Default exit sequence for state CheckKeyPress2 */
							handle->stateConfVector[1] = SMO_last_state;
							handle->stateConfVectorPosition = 1;
    1cc8:	1b 83       	std	Y+3, r17	; 0x03
    1cca:	0a 83       	std	Y+2, r16	; 0x02
							handle->iface.menuId = 0;
    1ccc:	1e a6       	lds	r17, 0xbe
    1cce:	1f a6       	lds	r17, 0xbf
    1cd0:	18 aa       	sts	0x98, r17
    1cd2:	19 aa       	sts	0x99, r17
							/* Default enter sequence for state null */
							handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_;
    1cd4:	8f e0       	ldi	r24, 0x0F	; 15
    1cd6:	89 83       	std	Y+1, r24	; 0x01
    1cd8:	00 c4       	rjmp	.+2048   	; 0x24da <__stack+0x13db>
}

/* The reactions of state CheckAmount0. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0(SMO* handle) {
	/* The reactions of state CheckAmount0. */
	if (handle->iface.menuId == 0) { 
    1cda:	8e a5       	lds	r24, 0x6e
    1cdc:	9f a5       	lds	r25, 0x6f
    1cde:	a8 a9       	sts	0x48, r26
    1ce0:	b9 a9       	sts	0x49, r27
    1ce2:	00 97       	sbiw	r24, 0x00	; 0
    1ce4:	a1 05       	cpc	r26, r1
    1ce6:	b1 05       	cpc	r27, r1
    1ce8:	09 f0       	breq	.+2      	; 0x1cec <__stack+0xbed>
    1cea:	69 c0       	rjmp	.+210    	; 0x1dbe <__stack+0xcbf>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	8a 30       	cpi	r24, 0x0A	; 10
    1cf0:	41 f1       	breq	.+80     	; 0x1d42 <__stack+0xc43>
    1cf2:	8b 30       	cpi	r24, 0x0B	; 11
    1cf4:	40 f4       	brcc	.+16     	; 0x1d06 <__stack+0xc07>
    1cf6:	88 30       	cpi	r24, 0x08	; 8
    1cf8:	b1 f0       	breq	.+44     	; 0x1d26 <__stack+0xc27>
    1cfa:	89 30       	cpi	r24, 0x09	; 9
    1cfc:	d8 f4       	brcc	.+54     	; 0x1d34 <__stack+0xc35>
    1cfe:	87 30       	cpi	r24, 0x07	; 7
    1d00:	09 f0       	breq	.+2      	; 0x1d04 <__stack+0xc05>
    1d02:	41 c0       	rjmp	.+130    	; 0x1d86 <__stack+0xc87>
    1d04:	09 c0       	rjmp	.+18     	; 0x1d18 <__stack+0xc19>
    1d06:	8c 30       	cpi	r24, 0x0C	; 12
    1d08:	51 f1       	breq	.+84     	; 0x1d5e <__stack+0xc5f>
    1d0a:	8c 30       	cpi	r24, 0x0C	; 12
    1d0c:	08 f1       	brcs	.+66     	; 0x1d50 <__stack+0xc51>
    1d0e:	8e 30       	cpi	r24, 0x0E	; 14
    1d10:	69 f1       	breq	.+90     	; 0x1d6c <__stack+0xc6d>
    1d12:	8f 30       	cpi	r24, 0x0F	; 15
    1d14:	c1 f5       	brne	.+112    	; 0x1d86 <__stack+0xc87>
    1d16:	31 c0       	rjmp	.+98     	; 0x1d7a <__stack+0xc7b>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1d18:	88 e1       	ldi	r24, 0x18	; 24
    1d1a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	9b 83       	std	Y+3, r25	; 0x03
    1d22:	8a 83       	std	Y+2, r24	; 0x02
    1d24:	30 c0       	rjmp	.+96     	; 0x1d86 <__stack+0xc87>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1d26:	88 e1       	ldi	r24, 0x18	; 24
    1d28:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	9b 83       	std	Y+3, r25	; 0x03
    1d30:	8a 83       	std	Y+2, r24	; 0x02
    1d32:	29 c0       	rjmp	.+82     	; 0x1d86 <__stack+0xc87>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1d34:	88 e1       	ldi	r24, 0x18	; 24
    1d36:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	9b 83       	std	Y+3, r25	; 0x03
    1d3e:	8a 83       	std	Y+2, r24	; 0x02
    1d40:	22 c0       	rjmp	.+68     	; 0x1d86 <__stack+0xc87>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1d42:	88 e1       	ldi	r24, 0x18	; 24
    1d44:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	9b 83       	std	Y+3, r25	; 0x03
    1d4c:	8a 83       	std	Y+2, r24	; 0x02
    1d4e:	1b c0       	rjmp	.+54     	; 0x1d86 <__stack+0xc87>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1d50:	88 e1       	ldi	r24, 0x18	; 24
    1d52:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	9b 83       	std	Y+3, r25	; 0x03
    1d5a:	8a 83       	std	Y+2, r24	; 0x02
    1d5c:	14 c0       	rjmp	.+40     	; 0x1d86 <__stack+0xc87>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1d5e:	88 e1       	ldi	r24, 0x18	; 24
    1d60:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	9b 83       	std	Y+3, r25	; 0x03
    1d68:	8a 83       	std	Y+2, r24	; 0x02
    1d6a:	0d c0       	rjmp	.+26     	; 0x1d86 <__stack+0xc87>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1d6c:	88 e1       	ldi	r24, 0x18	; 24
    1d6e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	9b 83       	std	Y+3, r25	; 0x03
    1d76:	8a 83       	std	Y+2, r24	; 0x02
    1d78:	06 c0       	rjmp	.+12     	; 0x1d86 <__stack+0xc87>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1d7a:	88 e1       	ldi	r24, 0x18	; 24
    1d7c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	9b 83       	std	Y+3, r25	; 0x03
    1d84:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1d86:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1d8a:	88 e0       	ldi	r24, 0x08	; 8
    1d8c:	92 e0       	ldi	r25, 0x02	; 2
    1d8e:	0e 94 16 02 	call	0x42c	; 0x42c <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    1d92:	86 e1       	ldi	r24, 0x16	; 22
    1d94:	92 e0       	ldi	r25, 0x02	; 2
    1d96:	40 e0       	ldi	r20, 0x00	; 0
    1d98:	50 e0       	ldi	r21, 0x00	; 0
    1d9a:	ba 01       	movw	r22, r20
    1d9c:	01 e0       	ldi	r16, 0x01	; 1
    1d9e:	10 e0       	ldi	r17, 0x00	; 0
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	0e 94 19 02 	call	0x432	; 0x432 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1da8:	1e a6       	lds	r17, 0xbe
    1daa:	1f a6       	lds	r17, 0xbf
    1dac:	18 aa       	sts	0x98, r17
    1dae:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1db0:	85 e0       	ldi	r24, 0x05	; 5
    1db2:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	9b 83       	std	Y+3, r25	; 0x03
    1dba:	8a 83       	std	Y+2, r24	; 0x02
    1dbc:	b0 c3       	rjmp	.+1888   	; 0x251e <__stack+0x141f>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state CheckAmount0 */
			handle->stateConfVector[1] = SMO_last_state;
    1dbe:	88 e1       	ldi	r24, 0x18	; 24
    1dc0:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1dc2:	88 24       	eor	r8, r8
    1dc4:	99 24       	eor	r9, r9
    1dc6:	83 94       	inc	r8
    1dc8:	9b 82       	std	Y+3, r9	; 0x03
    1dca:	8a 82       	std	Y+2, r8	; 0x02
			/* Default enter sequence for state EnterAmount */
			/* Entry action for state 'EnterAmount'. */
			sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    1dcc:	c8 84       	ldd	r12, Y+8	; 0x08
    1dce:	d9 84       	ldd	r13, Y+9	; 0x09
    1dd0:	ea 84       	ldd	r14, Y+10	; 0x0a
    1dd2:	fb 84       	ldd	r15, Y+11	; 0x0b
    1dd4:	89 a5       	lds	r24, 0x69
    1dd6:	9a a5       	lds	r25, 0x6a
    1dd8:	ab a5       	lds	r26, 0x6b
    1dda:	bc a5       	lds	r27, 0x6c
    1ddc:	9c 01       	movw	r18, r24
    1dde:	ad 01       	movw	r20, r26
    1de0:	22 0f       	add	r18, r18
    1de2:	33 1f       	adc	r19, r19
    1de4:	44 1f       	adc	r20, r20
    1de6:	55 1f       	adc	r21, r21
    1de8:	c7 01       	movw	r24, r14
    1dea:	b6 01       	movw	r22, r12
    1dec:	ee 24       	eor	r14, r14
    1dee:	ff 24       	eor	r15, r15
    1df0:	87 01       	movw	r16, r14
    1df2:	e3 94       	inc	r14
    1df4:	aa 24       	eor	r10, r10
    1df6:	bb 24       	eor	r11, r11
    1df8:	65 01       	movw	r12, r10
    1dfa:	a3 94       	inc	r10
    1dfc:	0e 94 28 02 	call	0x450	; 0x450 <sMOIfaceLCD_writeNumberXY>
			handle->ifaceDISH.pos += 1;
    1e00:	89 a5       	lds	r24, 0x69
    1e02:	9a a5       	lds	r25, 0x6a
    1e04:	ab a5       	lds	r26, 0x6b
    1e06:	bc a5       	lds	r27, 0x6c
    1e08:	01 96       	adiw	r24, 0x01	; 1
    1e0a:	a1 1d       	adc	r26, r1
    1e0c:	b1 1d       	adc	r27, r1
    1e0e:	89 a7       	lds	r24, 0x79
    1e10:	9a a7       	lds	r25, 0x7a
    1e12:	ab a7       	lds	r26, 0x7b
    1e14:	bc a7       	lds	r27, 0x7c
			handle->ifaceDISH.amount = handle->ifaceDISH.amount * 10 + handle->ifaceKEYPAD.lastkey;
    1e16:	6d a1       	lds	r22, 0x4d
    1e18:	7e a1       	lds	r23, 0x4e
    1e1a:	8f a1       	lds	r24, 0x4f
    1e1c:	98 a5       	lds	r25, 0x68
    1e1e:	2a e0       	ldi	r18, 0x0A	; 10
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	40 e0       	ldi	r20, 0x00	; 0
    1e24:	50 e0       	ldi	r21, 0x00	; 0
    1e26:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <__mulsi3>
    1e2a:	ab 01       	movw	r20, r22
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	88 85       	ldd	r24, Y+8	; 0x08
    1e30:	99 85       	ldd	r25, Y+9	; 0x09
    1e32:	aa 85       	ldd	r26, Y+10	; 0x0a
    1e34:	bb 85       	ldd	r27, Y+11	; 0x0b
    1e36:	84 0f       	add	r24, r20
    1e38:	95 1f       	adc	r25, r21
    1e3a:	a6 1f       	adc	r26, r22
    1e3c:	b7 1f       	adc	r27, r23
    1e3e:	8d a3       	lds	r24, 0x5d
    1e40:	9e a3       	lds	r25, 0x5e
    1e42:	af a3       	lds	r26, 0x5f
    1e44:	b8 a7       	lds	r27, 0x78
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount;
    1e46:	8e e0       	ldi	r24, 0x0E	; 14
    1e48:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1e4a:	9b 82       	std	Y+3, r9	; 0x03
    1e4c:	8a 82       	std	Y+2, r8	; 0x02
    1e4e:	67 c3       	rjmp	.+1742   	; 0x251e <__stack+0x141f>
}

/* The reactions of state EnterAmount. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount(SMO* handle) {
	/* The reactions of state EnterAmount. */
	if (handle->iface.menuId == 0) { 
    1e50:	8e a5       	lds	r24, 0x6e
    1e52:	9f a5       	lds	r25, 0x6f
    1e54:	a8 a9       	sts	0x48, r26
    1e56:	b9 a9       	sts	0x49, r27
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	a1 05       	cpc	r26, r1
    1e5c:	b1 05       	cpc	r27, r1
    1e5e:	09 f0       	breq	.+2      	; 0x1e62 <__stack+0xd63>
    1e60:	69 c0       	rjmp	.+210    	; 0x1f34 <__stack+0xe35>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	8a 30       	cpi	r24, 0x0A	; 10
    1e66:	41 f1       	breq	.+80     	; 0x1eb8 <__stack+0xdb9>
    1e68:	8b 30       	cpi	r24, 0x0B	; 11
    1e6a:	40 f4       	brcc	.+16     	; 0x1e7c <__stack+0xd7d>
    1e6c:	88 30       	cpi	r24, 0x08	; 8
    1e6e:	b1 f0       	breq	.+44     	; 0x1e9c <__stack+0xd9d>
    1e70:	89 30       	cpi	r24, 0x09	; 9
    1e72:	d8 f4       	brcc	.+54     	; 0x1eaa <__stack+0xdab>
    1e74:	87 30       	cpi	r24, 0x07	; 7
    1e76:	09 f0       	breq	.+2      	; 0x1e7a <__stack+0xd7b>
    1e78:	41 c0       	rjmp	.+130    	; 0x1efc <__stack+0xdfd>
    1e7a:	09 c0       	rjmp	.+18     	; 0x1e8e <__stack+0xd8f>
    1e7c:	8c 30       	cpi	r24, 0x0C	; 12
    1e7e:	51 f1       	breq	.+84     	; 0x1ed4 <__stack+0xdd5>
    1e80:	8c 30       	cpi	r24, 0x0C	; 12
    1e82:	08 f1       	brcs	.+66     	; 0x1ec6 <__stack+0xdc7>
    1e84:	8e 30       	cpi	r24, 0x0E	; 14
    1e86:	69 f1       	breq	.+90     	; 0x1ee2 <__stack+0xde3>
    1e88:	8f 30       	cpi	r24, 0x0F	; 15
    1e8a:	c1 f5       	brne	.+112    	; 0x1efc <__stack+0xdfd>
    1e8c:	31 c0       	rjmp	.+98     	; 0x1ef0 <__stack+0xdf1>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1e8e:	88 e1       	ldi	r24, 0x18	; 24
    1e90:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	9b 83       	std	Y+3, r25	; 0x03
    1e98:	8a 83       	std	Y+2, r24	; 0x02
    1e9a:	30 c0       	rjmp	.+96     	; 0x1efc <__stack+0xdfd>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1e9c:	88 e1       	ldi	r24, 0x18	; 24
    1e9e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	9b 83       	std	Y+3, r25	; 0x03
    1ea6:	8a 83       	std	Y+2, r24	; 0x02
    1ea8:	29 c0       	rjmp	.+82     	; 0x1efc <__stack+0xdfd>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1eaa:	88 e1       	ldi	r24, 0x18	; 24
    1eac:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	9b 83       	std	Y+3, r25	; 0x03
    1eb4:	8a 83       	std	Y+2, r24	; 0x02
    1eb6:	22 c0       	rjmp	.+68     	; 0x1efc <__stack+0xdfd>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1eb8:	88 e1       	ldi	r24, 0x18	; 24
    1eba:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	9b 83       	std	Y+3, r25	; 0x03
    1ec2:	8a 83       	std	Y+2, r24	; 0x02
    1ec4:	1b c0       	rjmp	.+54     	; 0x1efc <__stack+0xdfd>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1ec6:	88 e1       	ldi	r24, 0x18	; 24
    1ec8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	9b 83       	std	Y+3, r25	; 0x03
    1ed0:	8a 83       	std	Y+2, r24	; 0x02
    1ed2:	14 c0       	rjmp	.+40     	; 0x1efc <__stack+0xdfd>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1ed4:	88 e1       	ldi	r24, 0x18	; 24
    1ed6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	9b 83       	std	Y+3, r25	; 0x03
    1ede:	8a 83       	std	Y+2, r24	; 0x02
    1ee0:	0d c0       	rjmp	.+26     	; 0x1efc <__stack+0xdfd>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1ee2:	88 e1       	ldi	r24, 0x18	; 24
    1ee4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	9b 83       	std	Y+3, r25	; 0x03
    1eec:	8a 83       	std	Y+2, r24	; 0x02
    1eee:	06 c0       	rjmp	.+12     	; 0x1efc <__stack+0xdfd>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1ef0:	88 e1       	ldi	r24, 0x18	; 24
    1ef2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	9b 83       	std	Y+3, r25	; 0x03
    1efa:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1efc:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1f00:	88 e0       	ldi	r24, 0x08	; 8
    1f02:	92 e0       	ldi	r25, 0x02	; 2
    1f04:	0e 94 16 02 	call	0x42c	; 0x42c <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    1f08:	86 e1       	ldi	r24, 0x16	; 22
    1f0a:	92 e0       	ldi	r25, 0x02	; 2
    1f0c:	40 e0       	ldi	r20, 0x00	; 0
    1f0e:	50 e0       	ldi	r21, 0x00	; 0
    1f10:	ba 01       	movw	r22, r20
    1f12:	01 e0       	ldi	r16, 0x01	; 1
    1f14:	10 e0       	ldi	r17, 0x00	; 0
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	0e 94 19 02 	call	0x432	; 0x432 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1f1e:	1e a6       	lds	r17, 0xbe
    1f20:	1f a6       	lds	r17, 0xbf
    1f22:	18 aa       	sts	0x98, r17
    1f24:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1f26:	85 e0       	ldi	r24, 0x05	; 5
    1f28:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	9b 83       	std	Y+3, r25	; 0x03
    1f30:	8a 83       	std	Y+2, r24	; 0x02
    1f32:	f5 c2       	rjmp	.+1514   	; 0x251e <__stack+0x141f>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state EnterAmount */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    1f34:	1b 83       	std	Y+3, r17	; 0x03
    1f36:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress2 */
			/* Entry action for state 'CheckKeyPress2'. */
			handle->ifaceKEYPAD.lastkey = 0;
    1f38:	18 86       	std	Y+8, r1	; 0x08
    1f3a:	19 86       	std	Y+9, r1	; 0x09
    1f3c:	1a 86       	std	Y+10, r1	; 0x0a
    1f3e:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2;
    1f40:	a9 82       	std	Y+1, r10	; 0x01
    1f42:	cb c2       	rjmp	.+1430   	; 0x24da <__stack+0x13db>
}

/* The reactions of state null. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1__final_0(SMO* handle) {
	/* The reactions of state null. */
	if (handle->iface.menuId == 0) { 
    1f44:	8e a5       	lds	r24, 0x6e
    1f46:	9f a5       	lds	r25, 0x6f
    1f48:	a8 a9       	sts	0x48, r26
    1f4a:	b9 a9       	sts	0x49, r27
    1f4c:	00 97       	sbiw	r24, 0x00	; 0
    1f4e:	a1 05       	cpc	r26, r1
    1f50:	b1 05       	cpc	r27, r1
    1f52:	09 f0       	breq	.+2      	; 0x1f56 <__stack+0xe57>
    1f54:	c2 c2       	rjmp	.+1412   	; 0x24da <__stack+0x13db>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	8a 30       	cpi	r24, 0x0A	; 10
    1f5a:	41 f1       	breq	.+80     	; 0x1fac <__stack+0xead>
    1f5c:	8b 30       	cpi	r24, 0x0B	; 11
    1f5e:	40 f4       	brcc	.+16     	; 0x1f70 <__stack+0xe71>
    1f60:	88 30       	cpi	r24, 0x08	; 8
    1f62:	b1 f0       	breq	.+44     	; 0x1f90 <__stack+0xe91>
    1f64:	89 30       	cpi	r24, 0x09	; 9
    1f66:	d8 f4       	brcc	.+54     	; 0x1f9e <__stack+0xe9f>
    1f68:	87 30       	cpi	r24, 0x07	; 7
    1f6a:	09 f0       	breq	.+2      	; 0x1f6e <__stack+0xe6f>
    1f6c:	41 c0       	rjmp	.+130    	; 0x1ff0 <__stack+0xef1>
    1f6e:	09 c0       	rjmp	.+18     	; 0x1f82 <__stack+0xe83>
    1f70:	8c 30       	cpi	r24, 0x0C	; 12
    1f72:	51 f1       	breq	.+84     	; 0x1fc8 <__stack+0xec9>
    1f74:	8c 30       	cpi	r24, 0x0C	; 12
    1f76:	08 f1       	brcs	.+66     	; 0x1fba <__stack+0xebb>
    1f78:	8e 30       	cpi	r24, 0x0E	; 14
    1f7a:	69 f1       	breq	.+90     	; 0x1fd6 <__stack+0xed7>
    1f7c:	8f 30       	cpi	r24, 0x0F	; 15
    1f7e:	c1 f5       	brne	.+112    	; 0x1ff0 <__stack+0xef1>
    1f80:	31 c0       	rjmp	.+98     	; 0x1fe4 <__stack+0xee5>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1f82:	88 e1       	ldi	r24, 0x18	; 24
    1f84:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	9b 83       	std	Y+3, r25	; 0x03
    1f8c:	8a 83       	std	Y+2, r24	; 0x02
    1f8e:	30 c0       	rjmp	.+96     	; 0x1ff0 <__stack+0xef1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1f90:	88 e1       	ldi	r24, 0x18	; 24
    1f92:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	9b 83       	std	Y+3, r25	; 0x03
    1f9a:	8a 83       	std	Y+2, r24	; 0x02
    1f9c:	29 c0       	rjmp	.+82     	; 0x1ff0 <__stack+0xef1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1f9e:	88 e1       	ldi	r24, 0x18	; 24
    1fa0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	9b 83       	std	Y+3, r25	; 0x03
    1fa8:	8a 83       	std	Y+2, r24	; 0x02
    1faa:	22 c0       	rjmp	.+68     	; 0x1ff0 <__stack+0xef1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1fac:	88 e1       	ldi	r24, 0x18	; 24
    1fae:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	9b 83       	std	Y+3, r25	; 0x03
    1fb6:	8a 83       	std	Y+2, r24	; 0x02
    1fb8:	1b c0       	rjmp	.+54     	; 0x1ff0 <__stack+0xef1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1fba:	88 e1       	ldi	r24, 0x18	; 24
    1fbc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	9b 83       	std	Y+3, r25	; 0x03
    1fc4:	8a 83       	std	Y+2, r24	; 0x02
    1fc6:	14 c0       	rjmp	.+40     	; 0x1ff0 <__stack+0xef1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1fc8:	88 e1       	ldi	r24, 0x18	; 24
    1fca:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	9b 83       	std	Y+3, r25	; 0x03
    1fd2:	8a 83       	std	Y+2, r24	; 0x02
    1fd4:	0d c0       	rjmp	.+26     	; 0x1ff0 <__stack+0xef1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1fd6:	88 e1       	ldi	r24, 0x18	; 24
    1fd8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	9b 83       	std	Y+3, r25	; 0x03
    1fe0:	8a 83       	std	Y+2, r24	; 0x02
    1fe2:	06 c0       	rjmp	.+12     	; 0x1ff0 <__stack+0xef1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1fe4:	88 e1       	ldi	r24, 0x18	; 24
    1fe6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	9b 83       	std	Y+3, r25	; 0x03
    1fee:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1ff0:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1ff4:	88 e0       	ldi	r24, 0x08	; 8
    1ff6:	92 e0       	ldi	r25, 0x02	; 2
    1ff8:	0e 94 16 02 	call	0x42c	; 0x42c <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    1ffc:	86 e1       	ldi	r24, 0x16	; 22
    1ffe:	92 e0       	ldi	r25, 0x02	; 2
    2000:	40 e0       	ldi	r20, 0x00	; 0
    2002:	50 e0       	ldi	r21, 0x00	; 0
    2004:	ba 01       	movw	r22, r20
    2006:	01 e0       	ldi	r16, 0x01	; 1
    2008:	10 e0       	ldi	r17, 0x00	; 0
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	0e 94 19 02 	call	0x432	; 0x432 <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    2012:	1e a6       	lds	r17, 0xbe
    2014:	1f a6       	lds	r17, 0xbf
    2016:	18 aa       	sts	0x98, r17
    2018:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    201a:	85 e0       	ldi	r24, 0x05	; 5
    201c:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	9b 83       	std	Y+3, r25	; 0x03
    2024:	8a 83       	std	Y+2, r24	; 0x02
    2026:	7b c2       	rjmp	.+1270   	; 0x251e <__stack+0x141f>
/* The reactions of state MenuA. */
static void sMO_react_main_region_on_r1_Running_running_main_MenuA(SMO* handle) {
	/* The reactions of state MenuA. */
	if (bool_true) { 
		/* Default exit sequence for state MenuA */
		handle->stateConfVector[1] = SMO_last_state;
    2028:	88 e1       	ldi	r24, 0x18	; 24
    202a:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    202c:	ee 24       	eor	r14, r14
    202e:	ff 24       	eor	r15, r15
    2030:	e3 94       	inc	r14
    2032:	fb 82       	std	Y+3, r15	; 0x03
    2034:	ea 82       	std	Y+2, r14	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    2036:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Nhap ma mon an:");
    203a:	82 e2       	ldi	r24, 0x22	; 34
    203c:	92 e0       	ldi	r25, 0x02	; 2
    203e:	0e 94 16 02 	call	0x42c	; 0x42c <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    2042:	82 e3       	ldi	r24, 0x32	; 50
    2044:	92 e0       	ldi	r25, 0x02	; 2
    2046:	40 e0       	ldi	r20, 0x00	; 0
    2048:	50 e0       	ldi	r21, 0x00	; 0
    204a:	ba 01       	movw	r22, r20
    204c:	01 e0       	ldi	r16, 0x01	; 1
    204e:	10 e0       	ldi	r17, 0x00	; 0
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	0e 94 19 02 	call	0x432	; 0x432 <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    2058:	19 a6       	lds	r17, 0xb9
    205a:	1a a6       	lds	r17, 0xba
    205c:	1b a6       	lds	r17, 0xbb
    205e:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    2060:	19 a2       	lds	r17, 0x99
    2062:	1a a2       	lds	r17, 0x9a
    2064:	1b a2       	lds	r17, 0x9b
    2066:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    2068:	87 e0       	ldi	r24, 0x07	; 7
    206a:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    206c:	fb 82       	std	Y+3, r15	; 0x03
    206e:	ea 82       	std	Y+2, r14	; 0x02
    2070:	56 c2       	rjmp	.+1196   	; 0x251e <__stack+0x141f>
}

/* The reactions of state CheckKeyPress. */
static void sMO_react_main_region_on_r1_Running_running_main_CheckKeyPress(SMO* handle) {
	/* The reactions of state CheckKeyPress. */
	if (handle->ifaceKEYPAD.lastkey == 13 && handle->ifaceKEYPAD.key_pressed_raised) { 
    2072:	88 85       	ldd	r24, Y+8	; 0x08
    2074:	99 85       	ldd	r25, Y+9	; 0x09
    2076:	aa 85       	ldd	r26, Y+10	; 0x0a
    2078:	bb 85       	ldd	r27, Y+11	; 0x0b
    207a:	8d 30       	cpi	r24, 0x0D	; 13
    207c:	91 05       	cpc	r25, r1
    207e:	a1 05       	cpc	r26, r1
    2080:	b1 05       	cpc	r27, r1
    2082:	09 f0       	breq	.+2      	; 0x2086 <__stack+0xf87>
    2084:	2a c2       	rjmp	.+1108   	; 0x24da <__stack+0x13db>
    2086:	8d 85       	ldd	r24, Y+13	; 0x0d
    2088:	88 23       	and	r24, r24
    208a:	09 f4       	brne	.+2      	; 0x208e <__stack+0xf8f>
    208c:	26 c2       	rjmp	.+1100   	; 0x24da <__stack+0x13db>
		/* Default exit sequence for state CheckKeyPress */
		handle->stateConfVector[1] = SMO_last_state;
		handle->stateConfVectorPosition = 1;
    208e:	1b 83       	std	Y+3, r17	; 0x03
    2090:	0a 83       	std	Y+2, r16	; 0x02
		/* Default enter sequence for state MenuA */
		/* Entry action for state 'MenuA'. */
		handle->iface.menuId = 1;
    2092:	4e a6       	lds	r20, 0xbe
    2094:	5f a6       	lds	r21, 0xbf
    2096:	68 aa       	sts	0x98, r22
    2098:	79 aa       	sts	0x99, r23
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_MenuA;
    209a:	e0 e1       	ldi	r30, 0x10	; 16
    209c:	e9 83       	std	Y+1, r30	; 0x01
    209e:	1d c2       	rjmp	.+1082   	; 0x24da <__stack+0x13db>
}

/* The reactions of state Send. */
static void sMO_react_main_region_on_r1_Running_running_main_SendData_r1_Send(SMO* handle) {
	/* The reactions of state Send. */
	if (handle->ifaceRF.result == bool_true) { 
    20a0:	8f 89       	ldd	r24, Y+23	; 0x17
    20a2:	88 23       	and	r24, r24
    20a4:	09 f4       	brne	.+2      	; 0x20a8 <__stack+0xfa9>
    20a6:	55 c0       	rjmp	.+170    	; 0x2152 <__stack+0x1053>
		/* Default exit sequence for state SendData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	85 31       	cpi	r24, 0x15	; 21
    20ac:	d1 f0       	breq	.+52     	; 0x20e2 <__stack+0xfe3>
    20ae:	86 31       	cpi	r24, 0x16	; 22
    20b0:	28 f4       	brcc	.+10     	; 0x20bc <__stack+0xfbd>
    20b2:	83 31       	cpi	r24, 0x13	; 19
    20b4:	41 f0       	breq	.+16     	; 0x20c6 <__stack+0xfc7>
    20b6:	84 31       	cpi	r24, 0x14	; 20
    20b8:	61 f5       	brne	.+88     	; 0x2112 <__stack+0x1013>
    20ba:	0c c0       	rjmp	.+24     	; 0x20d4 <__stack+0xfd5>
    20bc:	86 31       	cpi	r24, 0x16	; 22
    20be:	c1 f0       	breq	.+48     	; 0x20f0 <__stack+0xff1>
    20c0:	87 31       	cpi	r24, 0x17	; 23
    20c2:	39 f5       	brne	.+78     	; 0x2112 <__stack+0x1013>
    20c4:	20 c0       	rjmp	.+64     	; 0x2106 <__stack+0x1007>
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    20c6:	88 e1       	ldi	r24, 0x18	; 24
    20c8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	9b 83       	std	Y+3, r25	; 0x03
    20d0:	8a 83       	std	Y+2, r24	; 0x02
    20d2:	1f c0       	rjmp	.+62     	; 0x2112 <__stack+0x1013>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    20d4:	88 e1       	ldi	r24, 0x18	; 24
    20d6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	9b 83       	std	Y+3, r25	; 0x03
    20de:	8a 83       	std	Y+2, r24	; 0x02
    20e0:	18 c0       	rjmp	.+48     	; 0x2112 <__stack+0x1013>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    20e2:	88 e1       	ldi	r24, 0x18	; 24
    20e4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	9b 83       	std	Y+3, r25	; 0x03
    20ec:	8a 83       	std	Y+2, r24	; 0x02
    20ee:	11 c0       	rjmp	.+34     	; 0x2112 <__stack+0x1013>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail : {
				/* Default exit sequence for state SendFail */
				handle->stateConfVector[1] = SMO_last_state;
    20f0:	88 e1       	ldi	r24, 0x18	; 24
    20f2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	9b 83       	std	Y+3, r25	; 0x03
    20fa:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail_time_event_0_raised) );		
    20fc:	ce 01       	movw	r24, r28
    20fe:	c9 96       	adiw	r24, 0x39	; 57
    2100:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <sMO_unsetTimer>
    2104:	06 c0       	rjmp	.+12     	; 0x2112 <__stack+0x1013>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    2106:	88 e1       	ldi	r24, 0x18	; 24
    2108:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	9b 83       	std	Y+3, r25	; 0x03
    2110:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    2112:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Nhap ma mon an:");
    2116:	82 e2       	ldi	r24, 0x22	; 34
    2118:	92 e0       	ldi	r25, 0x02	; 2
    211a:	0e 94 16 02 	call	0x42c	; 0x42c <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    211e:	82 e3       	ldi	r24, 0x32	; 50
    2120:	92 e0       	ldi	r25, 0x02	; 2
    2122:	40 e0       	ldi	r20, 0x00	; 0
    2124:	50 e0       	ldi	r21, 0x00	; 0
    2126:	ba 01       	movw	r22, r20
    2128:	01 e0       	ldi	r16, 0x01	; 1
    212a:	10 e0       	ldi	r17, 0x00	; 0
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	0e 94 19 02 	call	0x432	; 0x432 <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    2134:	19 a6       	lds	r17, 0xb9
    2136:	1a a6       	lds	r17, 0xba
    2138:	1b a6       	lds	r17, 0xbb
    213a:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    213c:	19 a2       	lds	r17, 0x99
    213e:	1a a2       	lds	r17, 0x9a
    2140:	1b a2       	lds	r17, 0x9b
    2142:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    2144:	87 e0       	ldi	r24, 0x07	; 7
    2146:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	9b 83       	std	Y+3, r25	; 0x03
    214e:	8a 83       	std	Y+2, r24	; 0x02
    2150:	e6 c1       	rjmp	.+972    	; 0x251e <__stack+0x141f>
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_Check;
			handle->stateConfVectorPosition = 1;
		}  else {
			if (handle->ifaceRF.result == bool_false) { 
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    2152:	88 e1       	ldi	r24, 0x18	; 24
    2154:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2156:	01 e0       	ldi	r16, 0x01	; 1
    2158:	10 e0       	ldi	r17, 0x00	; 0
    215a:	1b 83       	std	Y+3, r17	; 0x03
    215c:	0a 83       	std	Y+2, r16	; 0x02
				/* Default enter sequence for state SendFail */
				/* Entry action for state 'SendFail'. */
				sMO_setTimer( (sc_eventid) &(handle->timeEvents.SendFail_time_event_0_raised) , 2 * 1000, bool_false);
    215e:	ce 01       	movw	r24, r28
    2160:	c9 96       	adiw	r24, 0x39	; 57
    2162:	40 ed       	ldi	r20, 0xD0	; 208
    2164:	57 e0       	ldi	r21, 0x07	; 7
    2166:	60 e0       	ldi	r22, 0x00	; 0
    2168:	70 e0       	ldi	r23, 0x00	; 0
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	0e 94 59 03 	call	0x6b2	; 0x6b2 <sMO_setTimer>
				sMOIfaceLCD_clear();
    2170:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceLCD_clear>
				sMOIfaceLCD_writeString("Send fail");
    2174:	8b e4       	ldi	r24, 0x4B	; 75
    2176:	92 e0       	ldi	r25, 0x02	; 2
    2178:	0e 94 16 02 	call	0x42c	; 0x42c <sMOIfaceLCD_writeString>
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail;
    217c:	86 e1       	ldi	r24, 0x16	; 22
    217e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2180:	1b 83       	std	Y+3, r17	; 0x03
    2182:	0a 83       	std	Y+2, r16	; 0x02
    2184:	cc c1       	rjmp	.+920    	; 0x251e <__stack+0x141f>
}

/* The reactions of state Check. */
static void sMO_react_main_region_on_r1_Running_running_main_SendData_r1_Check(SMO* handle) {
	/* The reactions of state Check. */
	if (handle->ifaceRF.result == bool_true) { 
    2186:	8f 89       	ldd	r24, Y+23	; 0x17
    2188:	88 23       	and	r24, r24
    218a:	09 f4       	brne	.+2      	; 0x218e <__stack+0x108f>
    218c:	55 c0       	rjmp	.+170    	; 0x2238 <__stack+0x1139>
		/* Default exit sequence for state SendData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	85 31       	cpi	r24, 0x15	; 21
    2192:	d1 f0       	breq	.+52     	; 0x21c8 <__stack+0x10c9>
    2194:	86 31       	cpi	r24, 0x16	; 22
    2196:	28 f4       	brcc	.+10     	; 0x21a2 <__stack+0x10a3>
    2198:	83 31       	cpi	r24, 0x13	; 19
    219a:	41 f0       	breq	.+16     	; 0x21ac <__stack+0x10ad>
    219c:	84 31       	cpi	r24, 0x14	; 20
    219e:	61 f5       	brne	.+88     	; 0x21f8 <__stack+0x10f9>
    21a0:	0c c0       	rjmp	.+24     	; 0x21ba <__stack+0x10bb>
    21a2:	86 31       	cpi	r24, 0x16	; 22
    21a4:	c1 f0       	breq	.+48     	; 0x21d6 <__stack+0x10d7>
    21a6:	87 31       	cpi	r24, 0x17	; 23
    21a8:	39 f5       	brne	.+78     	; 0x21f8 <__stack+0x10f9>
    21aa:	20 c0       	rjmp	.+64     	; 0x21ec <__stack+0x10ed>
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    21ac:	88 e1       	ldi	r24, 0x18	; 24
    21ae:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	9b 83       	std	Y+3, r25	; 0x03
    21b6:	8a 83       	std	Y+2, r24	; 0x02
    21b8:	1f c0       	rjmp	.+62     	; 0x21f8 <__stack+0x10f9>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    21ba:	88 e1       	ldi	r24, 0x18	; 24
    21bc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	9b 83       	std	Y+3, r25	; 0x03
    21c4:	8a 83       	std	Y+2, r24	; 0x02
    21c6:	18 c0       	rjmp	.+48     	; 0x21f8 <__stack+0x10f9>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    21c8:	88 e1       	ldi	r24, 0x18	; 24
    21ca:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	9b 83       	std	Y+3, r25	; 0x03
    21d2:	8a 83       	std	Y+2, r24	; 0x02
    21d4:	11 c0       	rjmp	.+34     	; 0x21f8 <__stack+0x10f9>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail : {
				/* Default exit sequence for state SendFail */
				handle->stateConfVector[1] = SMO_last_state;
    21d6:	88 e1       	ldi	r24, 0x18	; 24
    21d8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	9b 83       	std	Y+3, r25	; 0x03
    21e0:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail_time_event_0_raised) );		
    21e2:	ce 01       	movw	r24, r28
    21e4:	c9 96       	adiw	r24, 0x39	; 57
    21e6:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <sMO_unsetTimer>
    21ea:	06 c0       	rjmp	.+12     	; 0x21f8 <__stack+0x10f9>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    21ec:	88 e1       	ldi	r24, 0x18	; 24
    21ee:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	9b 83       	std	Y+3, r25	; 0x03
    21f6:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    21f8:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Nhap ma mon an:");
    21fc:	82 e2       	ldi	r24, 0x22	; 34
    21fe:	92 e0       	ldi	r25, 0x02	; 2
    2200:	0e 94 16 02 	call	0x42c	; 0x42c <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    2204:	82 e3       	ldi	r24, 0x32	; 50
    2206:	92 e0       	ldi	r25, 0x02	; 2
    2208:	40 e0       	ldi	r20, 0x00	; 0
    220a:	50 e0       	ldi	r21, 0x00	; 0
    220c:	ba 01       	movw	r22, r20
    220e:	01 e0       	ldi	r16, 0x01	; 1
    2210:	10 e0       	ldi	r17, 0x00	; 0
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	0e 94 19 02 	call	0x432	; 0x432 <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    221a:	19 a6       	lds	r17, 0xb9
    221c:	1a a6       	lds	r17, 0xba
    221e:	1b a6       	lds	r17, 0xbb
    2220:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    2222:	19 a2       	lds	r17, 0x99
    2224:	1a a2       	lds	r17, 0x9a
    2226:	1b a2       	lds	r17, 0x9b
    2228:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    222a:	87 e0       	ldi	r24, 0x07	; 7
    222c:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	9b 83       	std	Y+3, r25	; 0x03
    2234:	8a 83       	std	Y+2, r24	; 0x02
    2236:	73 c1       	rjmp	.+742    	; 0x251e <__stack+0x141f>
	}  else {
		if (handle->ifaceRF.result == bool_false) { 
			/* Default exit sequence for state Check */
			handle->stateConfVector[1] = SMO_last_state;
    2238:	88 e1       	ldi	r24, 0x18	; 24
    223a:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    223c:	88 24       	eor	r8, r8
    223e:	99 24       	eor	r9, r9
    2240:	83 94       	inc	r8
    2242:	9b 82       	std	Y+3, r9	; 0x03
    2244:	8a 82       	std	Y+2, r8	; 0x02
			/* Default enter sequence for state Send */
			/* Entry action for state 'Send'. */
			handle->ifaceRF.retry += 1;
    2246:	88 8d       	ldd	r24, Y+24	; 0x18
    2248:	99 8d       	ldd	r25, Y+25	; 0x19
    224a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    224c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    224e:	01 96       	adiw	r24, 0x01	; 1
    2250:	a1 1d       	adc	r26, r1
    2252:	b1 1d       	adc	r27, r1
    2254:	88 8f       	std	Y+24, r24	; 0x18
    2256:	99 8f       	std	Y+25, r25	; 0x19
    2258:	aa 8f       	std	Y+26, r26	; 0x1a
    225a:	bb 8f       	std	Y+27, r27	; 0x1b
			handle->ifaceRF.result = sMOIfaceRF_sendData(handle->iface.menuId, handle->iface.tableId, handle->ifaceDISH.ID, handle->ifaceDISH.amount);
    225c:	6e a5       	lds	r22, 0x6e
    225e:	7f a5       	lds	r23, 0x6f
    2260:	88 a9       	sts	0x48, r24
    2262:	99 a9       	sts	0x49, r25
    2264:	2a a9       	sts	0x4a, r18
    2266:	3b a9       	sts	0x4b, r19
    2268:	4c a9       	sts	0x4c, r20
    226a:	5d a9       	sts	0x4d, r21
    226c:	e9 a0       	lds	r30, 0x89
    226e:	fa a0       	lds	r31, 0x8a
    2270:	0b a1       	lds	r16, 0x4b
    2272:	1c a1       	lds	r17, 0x4c
    2274:	ad a0       	lds	r26, 0x8d
    2276:	be a0       	lds	r27, 0x8e
    2278:	cf a0       	lds	r28, 0x8f
    227a:	d8 a4       	lds	r29, 0xa8
    227c:	0e 94 0d 03 	call	0x61a	; 0x61a <sMOIfaceRF_sendData>
    2280:	8f 8b       	std	Y+23, r24	; 0x17
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_Send;
    2282:	83 e1       	ldi	r24, 0x13	; 19
    2284:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    2286:	9b 82       	std	Y+3, r9	; 0x03
    2288:	8a 82       	std	Y+2, r8	; 0x02
    228a:	49 c1       	rjmp	.+658    	; 0x251e <__stack+0x141f>
}

/* The reactions of state null. */
static void sMO_react_main_region_on_r1_Running_running_main_SendData_r1__final_0(SMO* handle) {
	/* The reactions of state null. */
	if (handle->ifaceRF.result == bool_true) { 
    228c:	8f 89       	ldd	r24, Y+23	; 0x17
    228e:	88 23       	and	r24, r24
    2290:	09 f4       	brne	.+2      	; 0x2294 <__stack+0x1195>
    2292:	23 c1       	rjmp	.+582    	; 0x24da <__stack+0x13db>
		/* Default exit sequence for state SendData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	85 31       	cpi	r24, 0x15	; 21
    2298:	d1 f0       	breq	.+52     	; 0x22ce <__stack+0x11cf>
    229a:	86 31       	cpi	r24, 0x16	; 22
    229c:	28 f4       	brcc	.+10     	; 0x22a8 <__stack+0x11a9>
    229e:	83 31       	cpi	r24, 0x13	; 19
    22a0:	41 f0       	breq	.+16     	; 0x22b2 <__stack+0x11b3>
    22a2:	84 31       	cpi	r24, 0x14	; 20
    22a4:	61 f5       	brne	.+88     	; 0x22fe <__stack+0x11ff>
    22a6:	0c c0       	rjmp	.+24     	; 0x22c0 <__stack+0x11c1>
    22a8:	86 31       	cpi	r24, 0x16	; 22
    22aa:	c1 f0       	breq	.+48     	; 0x22dc <__stack+0x11dd>
    22ac:	87 31       	cpi	r24, 0x17	; 23
    22ae:	39 f5       	brne	.+78     	; 0x22fe <__stack+0x11ff>
    22b0:	20 c0       	rjmp	.+64     	; 0x22f2 <__stack+0x11f3>
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    22b2:	88 e1       	ldi	r24, 0x18	; 24
    22b4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	9b 83       	std	Y+3, r25	; 0x03
    22bc:	8a 83       	std	Y+2, r24	; 0x02
    22be:	1f c0       	rjmp	.+62     	; 0x22fe <__stack+0x11ff>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    22c0:	88 e1       	ldi	r24, 0x18	; 24
    22c2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	9b 83       	std	Y+3, r25	; 0x03
    22ca:	8a 83       	std	Y+2, r24	; 0x02
    22cc:	18 c0       	rjmp	.+48     	; 0x22fe <__stack+0x11ff>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    22ce:	88 e1       	ldi	r24, 0x18	; 24
    22d0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	9b 83       	std	Y+3, r25	; 0x03
    22d8:	8a 83       	std	Y+2, r24	; 0x02
    22da:	11 c0       	rjmp	.+34     	; 0x22fe <__stack+0x11ff>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail : {
				/* Default exit sequence for state SendFail */
				handle->stateConfVector[1] = SMO_last_state;
    22dc:	88 e1       	ldi	r24, 0x18	; 24
    22de:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	9b 83       	std	Y+3, r25	; 0x03
    22e6:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail_time_event_0_raised) );		
    22e8:	ce 01       	movw	r24, r28
    22ea:	c9 96       	adiw	r24, 0x39	; 57
    22ec:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <sMO_unsetTimer>
    22f0:	06 c0       	rjmp	.+12     	; 0x22fe <__stack+0x11ff>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    22f2:	88 e1       	ldi	r24, 0x18	; 24
    22f4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	9b 83       	std	Y+3, r25	; 0x03
    22fc:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    22fe:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Nhap ma mon an:");
    2302:	82 e2       	ldi	r24, 0x22	; 34
    2304:	92 e0       	ldi	r25, 0x02	; 2
    2306:	0e 94 16 02 	call	0x42c	; 0x42c <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    230a:	82 e3       	ldi	r24, 0x32	; 50
    230c:	92 e0       	ldi	r25, 0x02	; 2
    230e:	40 e0       	ldi	r20, 0x00	; 0
    2310:	50 e0       	ldi	r21, 0x00	; 0
    2312:	ba 01       	movw	r22, r20
    2314:	01 e0       	ldi	r16, 0x01	; 1
    2316:	10 e0       	ldi	r17, 0x00	; 0
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	0e 94 19 02 	call	0x432	; 0x432 <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    2320:	19 a6       	lds	r17, 0xb9
    2322:	1a a6       	lds	r17, 0xba
    2324:	1b a6       	lds	r17, 0xbb
    2326:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    2328:	19 a2       	lds	r17, 0x99
    232a:	1a a2       	lds	r17, 0x9a
    232c:	1b a2       	lds	r17, 0x9b
    232e:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    2330:	87 e0       	ldi	r24, 0x07	; 7
    2332:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	9b 83       	std	Y+3, r25	; 0x03
    233a:	8a 83       	std	Y+2, r24	; 0x02
    233c:	f0 c0       	rjmp	.+480    	; 0x251e <__stack+0x141f>
}

/* The reactions of state SendFail. */
static void sMO_react_main_region_on_r1_Running_running_main_SendData_r1_SendFail(SMO* handle) {
	/* The reactions of state SendFail. */
	if (handle->ifaceRF.result == bool_true) { 
    233e:	8f 89       	ldd	r24, Y+23	; 0x17
    2340:	88 23       	and	r24, r24
    2342:	09 f4       	brne	.+2      	; 0x2346 <__stack+0x1247>
    2344:	55 c0       	rjmp	.+170    	; 0x23f0 <__stack+0x12f1>
		/* Default exit sequence for state SendData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	85 31       	cpi	r24, 0x15	; 21
    234a:	d1 f0       	breq	.+52     	; 0x2380 <__stack+0x1281>
    234c:	86 31       	cpi	r24, 0x16	; 22
    234e:	28 f4       	brcc	.+10     	; 0x235a <__stack+0x125b>
    2350:	83 31       	cpi	r24, 0x13	; 19
    2352:	41 f0       	breq	.+16     	; 0x2364 <__stack+0x1265>
    2354:	84 31       	cpi	r24, 0x14	; 20
    2356:	61 f5       	brne	.+88     	; 0x23b0 <__stack+0x12b1>
    2358:	0c c0       	rjmp	.+24     	; 0x2372 <__stack+0x1273>
    235a:	86 31       	cpi	r24, 0x16	; 22
    235c:	c1 f0       	breq	.+48     	; 0x238e <__stack+0x128f>
    235e:	87 31       	cpi	r24, 0x17	; 23
    2360:	39 f5       	brne	.+78     	; 0x23b0 <__stack+0x12b1>
    2362:	20 c0       	rjmp	.+64     	; 0x23a4 <__stack+0x12a5>
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    2364:	88 e1       	ldi	r24, 0x18	; 24
    2366:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	9b 83       	std	Y+3, r25	; 0x03
    236e:	8a 83       	std	Y+2, r24	; 0x02
    2370:	1f c0       	rjmp	.+62     	; 0x23b0 <__stack+0x12b1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    2372:	88 e1       	ldi	r24, 0x18	; 24
    2374:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	9b 83       	std	Y+3, r25	; 0x03
    237c:	8a 83       	std	Y+2, r24	; 0x02
    237e:	18 c0       	rjmp	.+48     	; 0x23b0 <__stack+0x12b1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2380:	88 e1       	ldi	r24, 0x18	; 24
    2382:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	9b 83       	std	Y+3, r25	; 0x03
    238a:	8a 83       	std	Y+2, r24	; 0x02
    238c:	11 c0       	rjmp	.+34     	; 0x23b0 <__stack+0x12b1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail : {
				/* Default exit sequence for state SendFail */
				handle->stateConfVector[1] = SMO_last_state;
    238e:	88 e1       	ldi	r24, 0x18	; 24
    2390:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	9b 83       	std	Y+3, r25	; 0x03
    2398:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail_time_event_0_raised) );		
    239a:	ce 01       	movw	r24, r28
    239c:	c9 96       	adiw	r24, 0x39	; 57
    239e:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <sMO_unsetTimer>
    23a2:	06 c0       	rjmp	.+12     	; 0x23b0 <__stack+0x12b1>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    23a4:	88 e1       	ldi	r24, 0x18	; 24
    23a6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	9b 83       	std	Y+3, r25	; 0x03
    23ae:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    23b0:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Nhap ma mon an:");
    23b4:	82 e2       	ldi	r24, 0x22	; 34
    23b6:	92 e0       	ldi	r25, 0x02	; 2
    23b8:	0e 94 16 02 	call	0x42c	; 0x42c <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    23bc:	82 e3       	ldi	r24, 0x32	; 50
    23be:	92 e0       	ldi	r25, 0x02	; 2
    23c0:	40 e0       	ldi	r20, 0x00	; 0
    23c2:	50 e0       	ldi	r21, 0x00	; 0
    23c4:	ba 01       	movw	r22, r20
    23c6:	01 e0       	ldi	r16, 0x01	; 1
    23c8:	10 e0       	ldi	r17, 0x00	; 0
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	0e 94 19 02 	call	0x432	; 0x432 <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    23d2:	19 a6       	lds	r17, 0xb9
    23d4:	1a a6       	lds	r17, 0xba
    23d6:	1b a6       	lds	r17, 0xbb
    23d8:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    23da:	19 a2       	lds	r17, 0x99
    23dc:	1a a2       	lds	r17, 0x9a
    23de:	1b a2       	lds	r17, 0x9b
    23e0:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    23e2:	87 e0       	ldi	r24, 0x07	; 7
    23e4:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	9b 83       	std	Y+3, r25	; 0x03
    23ec:	8a 83       	std	Y+2, r24	; 0x02
    23ee:	97 c0       	rjmp	.+302    	; 0x251e <__stack+0x141f>
	}  else {
		if (handle->timeEvents.SendFail_time_event_0_raised) { 
    23f0:	89 ad       	sts	0x69, r24
    23f2:	88 23       	and	r24, r24
    23f4:	09 f4       	brne	.+2      	; 0x23f8 <__stack+0x12f9>
    23f6:	71 c0       	rjmp	.+226    	; 0x24da <__stack+0x13db>
			/* Default exit sequence for state SendFail */
			handle->stateConfVector[1] = SMO_last_state;
    23f8:	88 e1       	ldi	r24, 0x18	; 24
    23fa:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    23fc:	01 e0       	ldi	r16, 0x01	; 1
    23fe:	10 e0       	ldi	r17, 0x00	; 0
    2400:	1b 83       	std	Y+3, r17	; 0x03
    2402:	0a 83       	std	Y+2, r16	; 0x02
			/* Exit action for state 'SendFail'. */
			sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail_time_event_0_raised) );		
    2404:	ce 01       	movw	r24, r28
    2406:	c9 96       	adiw	r24, 0x39	; 57
    2408:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <sMO_unsetTimer>
			/* Default enter sequence for state ResetResult */
			/* Entry action for state 'ResetResult'. */
			handle->ifaceRF.result = bool_true;
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	8f 8b       	std	Y+23, r24	; 0x17
			handle->ifaceRF.retry = 0;
    2410:	18 8e       	std	Y+24, r1	; 0x18
    2412:	19 8e       	std	Y+25, r1	; 0x19
    2414:	1a 8e       	std	Y+26, r1	; 0x1a
    2416:	1b 8e       	std	Y+27, r1	; 0x1b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult;
    2418:	87 e1       	ldi	r24, 0x17	; 23
    241a:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    241c:	1b 83       	std	Y+3, r17	; 0x03
    241e:	0a 83       	std	Y+2, r16	; 0x02
    2420:	7e c0       	rjmp	.+252    	; 0x251e <__stack+0x141f>
}

/* The reactions of state ResetResult. */
static void sMO_react_main_region_on_r1_Running_running_main_SendData_r1_ResetResult(SMO* handle) {
	/* The reactions of state ResetResult. */
	if (handle->ifaceRF.result == bool_true) { 
    2422:	8f 89       	ldd	r24, Y+23	; 0x17
    2424:	88 23       	and	r24, r24
    2426:	09 f4       	brne	.+2      	; 0x242a <__stack+0x132b>
    2428:	55 c0       	rjmp	.+170    	; 0x24d4 <__stack+0x13d5>
		/* Default exit sequence for state SendData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	85 31       	cpi	r24, 0x15	; 21
    242e:	d1 f0       	breq	.+52     	; 0x2464 <__stack+0x1365>
    2430:	86 31       	cpi	r24, 0x16	; 22
    2432:	28 f4       	brcc	.+10     	; 0x243e <__stack+0x133f>
    2434:	83 31       	cpi	r24, 0x13	; 19
    2436:	41 f0       	breq	.+16     	; 0x2448 <__stack+0x1349>
    2438:	84 31       	cpi	r24, 0x14	; 20
    243a:	61 f5       	brne	.+88     	; 0x2494 <__stack+0x1395>
    243c:	0c c0       	rjmp	.+24     	; 0x2456 <__stack+0x1357>
    243e:	86 31       	cpi	r24, 0x16	; 22
    2440:	c1 f0       	breq	.+48     	; 0x2472 <__stack+0x1373>
    2442:	87 31       	cpi	r24, 0x17	; 23
    2444:	39 f5       	brne	.+78     	; 0x2494 <__stack+0x1395>
    2446:	20 c0       	rjmp	.+64     	; 0x2488 <__stack+0x1389>
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    2448:	88 e1       	ldi	r24, 0x18	; 24
    244a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	9b 83       	std	Y+3, r25	; 0x03
    2452:	8a 83       	std	Y+2, r24	; 0x02
    2454:	1f c0       	rjmp	.+62     	; 0x2494 <__stack+0x1395>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    2456:	88 e1       	ldi	r24, 0x18	; 24
    2458:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	9b 83       	std	Y+3, r25	; 0x03
    2460:	8a 83       	std	Y+2, r24	; 0x02
    2462:	18 c0       	rjmp	.+48     	; 0x2494 <__stack+0x1395>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2464:	88 e1       	ldi	r24, 0x18	; 24
    2466:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	9b 83       	std	Y+3, r25	; 0x03
    246e:	8a 83       	std	Y+2, r24	; 0x02
    2470:	11 c0       	rjmp	.+34     	; 0x2494 <__stack+0x1395>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail : {
				/* Default exit sequence for state SendFail */
				handle->stateConfVector[1] = SMO_last_state;
    2472:	88 e1       	ldi	r24, 0x18	; 24
    2474:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	9b 83       	std	Y+3, r25	; 0x03
    247c:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail_time_event_0_raised) );		
    247e:	ce 01       	movw	r24, r28
    2480:	c9 96       	adiw	r24, 0x39	; 57
    2482:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <sMO_unsetTimer>
    2486:	06 c0       	rjmp	.+12     	; 0x2494 <__stack+0x1395>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    2488:	88 e1       	ldi	r24, 0x18	; 24
    248a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	9b 83       	std	Y+3, r25	; 0x03
    2492:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    2494:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Nhap ma mon an:");
    2498:	82 e2       	ldi	r24, 0x22	; 34
    249a:	92 e0       	ldi	r25, 0x02	; 2
    249c:	0e 94 16 02 	call	0x42c	; 0x42c <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    24a0:	82 e3       	ldi	r24, 0x32	; 50
    24a2:	92 e0       	ldi	r25, 0x02	; 2
    24a4:	40 e0       	ldi	r20, 0x00	; 0
    24a6:	50 e0       	ldi	r21, 0x00	; 0
    24a8:	ba 01       	movw	r22, r20
    24aa:	01 e0       	ldi	r16, 0x01	; 1
    24ac:	10 e0       	ldi	r17, 0x00	; 0
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	0e 94 19 02 	call	0x432	; 0x432 <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    24b6:	19 a6       	lds	r17, 0xb9
    24b8:	1a a6       	lds	r17, 0xba
    24ba:	1b a6       	lds	r17, 0xbb
    24bc:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    24be:	19 a2       	lds	r17, 0x99
    24c0:	1a a2       	lds	r17, 0x9a
    24c2:	1b a2       	lds	r17, 0x9b
    24c4:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    24c6:	87 e0       	ldi	r24, 0x07	; 7
    24c8:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	9b 83       	std	Y+3, r25	; 0x03
    24d0:	8a 83       	std	Y+2, r24	; 0x02
    24d2:	25 c0       	rjmp	.+74     	; 0x251e <__stack+0x141f>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state ResetResult */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    24d4:	1b 83       	std	Y+3, r17	; 0x03
    24d6:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state null */
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1__final_;
    24d8:	29 82       	std	Y+1, r2	; 0x01
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
    24da:	8a 81       	ldd	r24, Y+2	; 0x02
    24dc:	9b 81       	ldd	r25, Y+3	; 0x03
    24de:	01 96       	adiw	r24, 0x01	; 1
    24e0:	9b 83       	std	Y+3, r25	; 0x03
    24e2:	8a 83       	std	Y+2, r24	; 0x02

void sMO_runCycle(SMO* handle) {
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
    24e4:	82 30       	cpi	r24, 0x02	; 2
    24e6:	91 05       	cpc	r25, r1
    24e8:	10 f4       	brcc	.+4      	; 0x24ee <__stack+0x13ef>
    24ea:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <__stack+0x37>
	}
	sMO_exitaction(handle);
}

static void clearInEvents(SMO* handle) {
	handle->ifaceKEYPAD.key_pressed_raised = bool_false;
    24ee:	1d 86       	std	Y+13, r1	; 0x0d
	handle->ifaceUART.DataRecieved_raised = bool_false;
    24f0:	1a 8a       	std	Y+18, r1	; 0x12
	handle->ifaceRF.DataRecieved_raised = bool_false;
    24f2:	18 a2       	lds	r17, 0x98
	handle->iface.switchOff_raised = bool_false;
    24f4:	1e aa       	sts	0x9e, r17
	handle->iface.switchOn_raised = bool_false;
    24f6:	1f aa       	sts	0x9f, r17
			break;
		}
	}
	
	clearInEvents(handle);
}
    24f8:	df 91       	pop	r29
    24fa:	cf 91       	pop	r28
    24fc:	1f 91       	pop	r17
    24fe:	0f 91       	pop	r16
    2500:	ff 90       	pop	r15
    2502:	ef 90       	pop	r14
    2504:	df 90       	pop	r13
    2506:	cf 90       	pop	r12
    2508:	bf 90       	pop	r11
    250a:	af 90       	pop	r10
    250c:	9f 90       	pop	r9
    250e:	8f 90       	pop	r8
    2510:	7f 90       	pop	r7
    2512:	6f 90       	pop	r6
    2514:	5f 90       	pop	r5
    2516:	4f 90       	pop	r4
    2518:	3f 90       	pop	r3
    251a:	2f 90       	pop	r2
    251c:	08 95       	ret
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
    251e:	8a 81       	ldd	r24, Y+2	; 0x02
    2520:	9b 81       	ldd	r25, Y+3	; 0x03
    2522:	01 96       	adiw	r24, 0x01	; 1
    2524:	9b 83       	std	Y+3, r25	; 0x03
    2526:	8a 83       	std	Y+2, r24	; 0x02
    2528:	e2 cf       	rjmp	.-60     	; 0x24ee <__stack+0x13ef>
    252a:	8a 81       	ldd	r24, Y+2	; 0x02
    252c:	9b 81       	ldd	r25, Y+3	; 0x03
    252e:	01 96       	adiw	r24, 0x01	; 1
    2530:	9b 83       	std	Y+3, r25	; 0x03
    2532:	8a 83       	std	Y+2, r24	; 0x02
    2534:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <__stack+0x37>

00002538 <sMO_raiseTimeEvent>:
	
	clearInEvents(handle);
}

void sMO_raiseTimeEvent(SMO* handle, sc_eventid evid) {
	if ( ((intptr_t)evid) >= ((intptr_t)&(handle->timeEvents))
    2538:	c8 96       	adiw	r24, 0x38	; 56
    253a:	68 17       	cp	r22, r24
    253c:	79 07       	cpc	r23, r25
    253e:	3c f0       	brlt	.+14     	; 0x254e <sMO_raiseTimeEvent+0x16>
		&&  ((intptr_t)evid) < ((intptr_t)&(handle->timeEvents)) + sizeof(SMOTimeEvents)) {
    2540:	02 96       	adiw	r24, 0x02	; 2
    2542:	68 17       	cp	r22, r24
    2544:	79 07       	cpc	r23, r25
    2546:	18 f4       	brcc	.+6      	; 0x254e <sMO_raiseTimeEvent+0x16>
		*(sc_boolean*)evid = bool_true;
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	fb 01       	movw	r30, r22
    254c:	80 83       	st	Z, r24
    254e:	08 95       	ret

00002550 <sMO_isActive>:
	}		
}

sc_boolean sMO_isActive(SMO* handle, SMOStates state) {
    2550:	dc 01       	movw	r26, r24
	switch (state) {
    2552:	e6 2f       	mov	r30, r22
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	e8 31       	cpi	r30, 0x18	; 24
    2558:	f1 05       	cpc	r31, r1
    255a:	08 f0       	brcs	.+2      	; 0x255e <sMO_isActive+0xe>
    255c:	d1 c0       	rjmp	.+418    	; 0x2700 <sMO_isActive+0x1b0>
    255e:	e3 5a       	subi	r30, 0xA3	; 163
    2560:	ff 4f       	sbci	r31, 0xFF	; 255
    2562:	ee 0f       	add	r30, r30
    2564:	ff 1f       	adc	r31, r31
    2566:	05 90       	lpm	r0, Z+
    2568:	f4 91       	lpm	r31, Z
    256a:	e0 2d       	mov	r30, r0
    256c:	09 94       	ijmp
		case SMO_main_region_on : 
			return (sc_boolean) (handle->stateConfVector[0] >= SMO_main_region_on
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	9c 91       	ld	r25, X
    2572:	98 31       	cpi	r25, 0x18	; 24
    2574:	08 f4       	brcc	.+2      	; 0x2578 <sMO_isActive+0x28>
    2576:	c5 c0       	rjmp	.+394    	; 0x2702 <sMO_isActive+0x1b2>
    2578:	80 e0       	ldi	r24, 0x00	; 0
    257a:	08 95       	ret
				&& handle->stateConfVector[0] <= SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult);
		case SMO_main_region_on_r1_Init : 
			return (sc_boolean) (handle->stateConfVector[0] == SMO_main_region_on_r1_Init
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	9c 91       	ld	r25, X
    2580:	91 30       	cpi	r25, 0x01	; 1
    2582:	09 f4       	brne	.+2      	; 0x2586 <sMO_isActive+0x36>
    2584:	be c0       	rjmp	.+380    	; 0x2702 <sMO_isActive+0x1b2>
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running : 
			return (sc_boolean) (handle->stateConfVector[0] >= SMO_main_region_on_r1_Running
    258a:	9c 91       	ld	r25, X
    258c:	92 50       	subi	r25, 0x02	; 2
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	96 31       	cpi	r25, 0x16	; 22
    2592:	08 f4       	brcc	.+2      	; 0x2596 <sMO_isActive+0x46>
    2594:	b6 c0       	rjmp	.+364    	; 0x2702 <sMO_isActive+0x1b2>
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	08 95       	ret
				&& handle->stateConfVector[0] <= SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult);
		case SMO_main_region_on_r1_Running_keypad_CheckKey : 
			return (sc_boolean) (handle->stateConfVector[0] == SMO_main_region_on_r1_Running_keypad_CheckKey
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	9c 91       	ld	r25, X
    259e:	93 30       	cpi	r25, 0x03	; 3
    25a0:	09 f4       	brne	.+2      	; 0x25a4 <sMO_isActive+0x54>
    25a2:	af c0       	rjmp	.+350    	; 0x2702 <sMO_isActive+0x1b2>
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_keypad_CheckKeyDown : 
			return (sc_boolean) (handle->stateConfVector[0] == SMO_main_region_on_r1_Running_keypad_CheckKeyDown
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	9c 91       	ld	r25, X
    25ac:	94 30       	cpi	r25, 0x04	; 4
    25ae:	09 f4       	brne	.+2      	; 0x25b2 <sMO_isActive+0x62>
    25b0:	a8 c0       	rjmp	.+336    	; 0x2702 <sMO_isActive+0x1b2>
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_ShowMenu : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_ShowMenu
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	11 96       	adiw	r26, 0x01	; 1
    25ba:	9c 91       	ld	r25, X
    25bc:	11 97       	sbiw	r26, 0x01	; 1
    25be:	95 30       	cpi	r25, 0x05	; 5
    25c0:	09 f4       	brne	.+2      	; 0x25c4 <sMO_isActive+0x74>
    25c2:	9f c0       	rjmp	.+318    	; 0x2702 <sMO_isActive+0x1b2>
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData : 
			return (sc_boolean) (handle->stateConfVector[1] >= SMO_main_region_on_r1_Running_running_main_EnterData
    25c8:	11 96       	adiw	r26, 0x01	; 1
    25ca:	9c 91       	ld	r25, X
    25cc:	11 97       	sbiw	r26, 0x01	; 1
    25ce:	96 50       	subi	r25, 0x06	; 6
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	9a 30       	cpi	r25, 0x0A	; 10
    25d4:	08 f4       	brcc	.+2      	; 0x25d8 <sMO_isActive+0x88>
    25d6:	95 c0       	rjmp	.+298    	; 0x2702 <sMO_isActive+0x1b2>
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	08 95       	ret
				&& handle->stateConfVector[1] <= SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	11 96       	adiw	r26, 0x01	; 1
    25e0:	9c 91       	ld	r25, X
    25e2:	11 97       	sbiw	r26, 0x01	; 1
    25e4:	97 30       	cpi	r25, 0x07	; 7
    25e6:	09 f4       	brne	.+2      	; 0x25ea <sMO_isActive+0x9a>
    25e8:	8c c0       	rjmp	.+280    	; 0x2702 <sMO_isActive+0x1b2>
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	11 96       	adiw	r26, 0x01	; 1
    25f2:	9c 91       	ld	r25, X
    25f4:	11 97       	sbiw	r26, 0x01	; 1
    25f6:	98 30       	cpi	r25, 0x08	; 8
    25f8:	09 f4       	brne	.+2      	; 0x25fc <sMO_isActive+0xac>
    25fa:	83 c0       	rjmp	.+262    	; 0x2702 <sMO_isActive+0x1b2>
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	11 96       	adiw	r26, 0x01	; 1
    2604:	9c 91       	ld	r25, X
    2606:	11 97       	sbiw	r26, 0x01	; 1
    2608:	99 30       	cpi	r25, 0x09	; 9
    260a:	09 f4       	brne	.+2      	; 0x260e <sMO_isActive+0xbe>
    260c:	7a c0       	rjmp	.+244    	; 0x2702 <sMO_isActive+0x1b2>
    260e:	80 e0       	ldi	r24, 0x00	; 0
    2610:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	11 96       	adiw	r26, 0x01	; 1
    2616:	9c 91       	ld	r25, X
    2618:	11 97       	sbiw	r26, 0x01	; 1
    261a:	9a 30       	cpi	r25, 0x0A	; 10
    261c:	09 f4       	brne	.+2      	; 0x2620 <sMO_isActive+0xd0>
    261e:	71 c0       	rjmp	.+226    	; 0x2702 <sMO_isActive+0x1b2>
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	11 96       	adiw	r26, 0x01	; 1
    2628:	9c 91       	ld	r25, X
    262a:	11 97       	sbiw	r26, 0x01	; 1
    262c:	9b 30       	cpi	r25, 0x0B	; 11
    262e:	09 f4       	brne	.+2      	; 0x2632 <sMO_isActive+0xe2>
    2630:	68 c0       	rjmp	.+208    	; 0x2702 <sMO_isActive+0x1b2>
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	11 96       	adiw	r26, 0x01	; 1
    263a:	9c 91       	ld	r25, X
    263c:	11 97       	sbiw	r26, 0x01	; 1
    263e:	9c 30       	cpi	r25, 0x0C	; 12
    2640:	09 f4       	brne	.+2      	; 0x2644 <sMO_isActive+0xf4>
    2642:	5f c0       	rjmp	.+190    	; 0x2702 <sMO_isActive+0x1b2>
    2644:	80 e0       	ldi	r24, 0x00	; 0
    2646:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	11 96       	adiw	r26, 0x01	; 1
    264c:	9c 91       	ld	r25, X
    264e:	11 97       	sbiw	r26, 0x01	; 1
    2650:	9d 30       	cpi	r25, 0x0D	; 13
    2652:	09 f4       	brne	.+2      	; 0x2656 <sMO_isActive+0x106>
    2654:	56 c0       	rjmp	.+172    	; 0x2702 <sMO_isActive+0x1b2>
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	11 96       	adiw	r26, 0x01	; 1
    265e:	9c 91       	ld	r25, X
    2660:	11 97       	sbiw	r26, 0x01	; 1
    2662:	9e 30       	cpi	r25, 0x0E	; 14
    2664:	09 f4       	brne	.+2      	; 0x2668 <sMO_isActive+0x118>
    2666:	4d c0       	rjmp	.+154    	; 0x2702 <sMO_isActive+0x1b2>
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	11 96       	adiw	r26, 0x01	; 1
    2670:	9c 91       	ld	r25, X
    2672:	11 97       	sbiw	r26, 0x01	; 1
    2674:	9f 30       	cpi	r25, 0x0F	; 15
    2676:	09 f4       	brne	.+2      	; 0x267a <sMO_isActive+0x12a>
    2678:	44 c0       	rjmp	.+136    	; 0x2702 <sMO_isActive+0x1b2>
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_MenuA : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_MenuA
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	11 96       	adiw	r26, 0x01	; 1
    2682:	9c 91       	ld	r25, X
    2684:	11 97       	sbiw	r26, 0x01	; 1
    2686:	90 31       	cpi	r25, 0x10	; 16
    2688:	e1 f1       	breq	.+120    	; 0x2702 <sMO_isActive+0x1b2>
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_CheckKeyPress : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_CheckKeyPress
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	11 96       	adiw	r26, 0x01	; 1
    2692:	9c 91       	ld	r25, X
    2694:	11 97       	sbiw	r26, 0x01	; 1
    2696:	91 31       	cpi	r25, 0x11	; 17
    2698:	a1 f1       	breq	.+104    	; 0x2702 <sMO_isActive+0x1b2>
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendData : 
			return (sc_boolean) (handle->stateConfVector[1] >= SMO_main_region_on_r1_Running_running_main_SendData
    269e:	11 96       	adiw	r26, 0x01	; 1
    26a0:	9c 91       	ld	r25, X
    26a2:	11 97       	sbiw	r26, 0x01	; 1
    26a4:	92 51       	subi	r25, 0x12	; 18
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	96 30       	cpi	r25, 0x06	; 6
    26aa:	58 f1       	brcs	.+86     	; 0x2702 <sMO_isActive+0x1b2>
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	08 95       	ret
				&& handle->stateConfVector[1] <= SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult);
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendData_r1_Send
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	11 96       	adiw	r26, 0x01	; 1
    26b4:	9c 91       	ld	r25, X
    26b6:	11 97       	sbiw	r26, 0x01	; 1
    26b8:	93 31       	cpi	r25, 0x13	; 19
    26ba:	19 f1       	breq	.+70     	; 0x2702 <sMO_isActive+0x1b2>
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendData_r1_Check
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	11 96       	adiw	r26, 0x01	; 1
    26c4:	9c 91       	ld	r25, X
    26c6:	11 97       	sbiw	r26, 0x01	; 1
    26c8:	94 31       	cpi	r25, 0x14	; 20
    26ca:	d9 f0       	breq	.+54     	; 0x2702 <sMO_isActive+0x1b2>
    26cc:	80 e0       	ldi	r24, 0x00	; 0
    26ce:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendData_r1__final_
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	11 96       	adiw	r26, 0x01	; 1
    26d4:	9c 91       	ld	r25, X
    26d6:	11 97       	sbiw	r26, 0x01	; 1
    26d8:	95 31       	cpi	r25, 0x15	; 21
    26da:	99 f0       	breq	.+38     	; 0x2702 <sMO_isActive+0x1b2>
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	11 96       	adiw	r26, 0x01	; 1
    26e4:	9c 91       	ld	r25, X
    26e6:	11 97       	sbiw	r26, 0x01	; 1
    26e8:	96 31       	cpi	r25, 0x16	; 22
    26ea:	59 f0       	breq	.+22     	; 0x2702 <sMO_isActive+0x1b2>
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	11 96       	adiw	r26, 0x01	; 1
    26f4:	9c 91       	ld	r25, X
    26f6:	11 97       	sbiw	r26, 0x01	; 1
    26f8:	97 31       	cpi	r25, 0x17	; 23
    26fa:	19 f0       	breq	.+6      	; 0x2702 <sMO_isActive+0x1b2>
    26fc:	80 e0       	ldi	r24, 0x00	; 0
    26fe:	08 95       	ret
			);
		default: return bool_false;
    2700:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2702:	08 95       	ret

00002704 <sMOIfaceKEYPAD_raise_key_pressed>:



void sMOIfaceKEYPAD_raise_key_pressed(SMO* handle) {
	handle->ifaceKEYPAD.key_pressed_raised = bool_true;
    2704:	21 e0       	ldi	r18, 0x01	; 1
    2706:	fc 01       	movw	r30, r24
    2708:	25 87       	std	Z+13, r18	; 0x0d
}
    270a:	08 95       	ret

0000270c <sMOIfaceKEYPAD_get_key>:


sc_integer sMOIfaceKEYPAD_get_key(SMO* handle) {
    270c:	fc 01       	movw	r30, r24
	return handle->ifaceKEYPAD.key;
    270e:	64 81       	ldd	r22, Z+4	; 0x04
    2710:	75 81       	ldd	r23, Z+5	; 0x05
}
    2712:	86 81       	ldd	r24, Z+6	; 0x06
    2714:	97 81       	ldd	r25, Z+7	; 0x07
    2716:	08 95       	ret

00002718 <sMOIfaceKEYPAD_set_key>:
void sMOIfaceKEYPAD_set_key(SMO* handle, sc_integer value) {
	handle->ifaceKEYPAD.key = value;
    2718:	fc 01       	movw	r30, r24
    271a:	44 83       	std	Z+4, r20	; 0x04
    271c:	55 83       	std	Z+5, r21	; 0x05
    271e:	66 83       	std	Z+6, r22	; 0x06
    2720:	77 83       	std	Z+7, r23	; 0x07
}
    2722:	08 95       	ret

00002724 <sMOIfaceKEYPAD_get_lastkey>:
sc_integer sMOIfaceKEYPAD_get_lastkey(SMO* handle) {
    2724:	fc 01       	movw	r30, r24
	return handle->ifaceKEYPAD.lastkey;
    2726:	60 85       	ldd	r22, Z+8	; 0x08
    2728:	71 85       	ldd	r23, Z+9	; 0x09
}
    272a:	82 85       	ldd	r24, Z+10	; 0x0a
    272c:	93 85       	ldd	r25, Z+11	; 0x0b
    272e:	08 95       	ret

00002730 <sMOIfaceKEYPAD_set_lastkey>:
void sMOIfaceKEYPAD_set_lastkey(SMO* handle, sc_integer value) {
	handle->ifaceKEYPAD.lastkey = value;
    2730:	fc 01       	movw	r30, r24
    2732:	40 87       	std	Z+8, r20	; 0x08
    2734:	51 87       	std	Z+9, r21	; 0x09
    2736:	62 87       	std	Z+10, r22	; 0x0a
    2738:	73 87       	std	Z+11, r23	; 0x0b
}
    273a:	08 95       	ret

0000273c <sMOIfaceKEYPAD_get_key_down>:
sc_boolean sMOIfaceKEYPAD_get_key_down(SMO* handle) {
	return handle->ifaceKEYPAD.key_down;
}
    273c:	fc 01       	movw	r30, r24
    273e:	84 85       	ldd	r24, Z+12	; 0x0c
    2740:	08 95       	ret

00002742 <sMOIfaceKEYPAD_set_key_down>:
void sMOIfaceKEYPAD_set_key_down(SMO* handle, sc_boolean value) {
	handle->ifaceKEYPAD.key_down = value;
    2742:	fc 01       	movw	r30, r24
    2744:	64 87       	std	Z+12, r22	; 0x0c
}
    2746:	08 95       	ret

00002748 <sMOIfaceUART_raise_dataRecieved>:
void sMOIfaceUART_raise_dataRecieved(SMO* handle) {
	handle->ifaceUART.DataRecieved_raised = bool_true;
    2748:	21 e0       	ldi	r18, 0x01	; 1
    274a:	fc 01       	movw	r30, r24
    274c:	22 8b       	std	Z+18, r18	; 0x12
}
    274e:	08 95       	ret

00002750 <sMOIfaceUART_get_data>:


sc_string sMOIfaceUART_get_data(SMO* handle) {
    2750:	fc 01       	movw	r30, r24
	return handle->ifaceUART.data;
}
    2752:	86 85       	ldd	r24, Z+14	; 0x0e
    2754:	97 85       	ldd	r25, Z+15	; 0x0f
    2756:	08 95       	ret

00002758 <sMOIfaceUART_set_data>:
void sMOIfaceUART_set_data(SMO* handle, sc_string value) {
	handle->ifaceUART.data = value;
    2758:	fc 01       	movw	r30, r24
    275a:	77 87       	std	Z+15, r23	; 0x0f
    275c:	66 87       	std	Z+14, r22	; 0x0e
}
    275e:	08 95       	ret

00002760 <sMOIfaceUART_get_lastdata>:
sc_string sMOIfaceUART_get_lastdata(SMO* handle) {
    2760:	fc 01       	movw	r30, r24
	return handle->ifaceUART.lastdata;
}
    2762:	80 89       	ldd	r24, Z+16	; 0x10
    2764:	91 89       	ldd	r25, Z+17	; 0x11
    2766:	08 95       	ret

00002768 <sMOIfaceUART_set_lastdata>:
void sMOIfaceUART_set_lastdata(SMO* handle, sc_string value) {
	handle->ifaceUART.lastdata = value;
    2768:	fc 01       	movw	r30, r24
    276a:	71 8b       	std	Z+17, r23	; 0x11
    276c:	60 8b       	std	Z+16, r22	; 0x10
}
    276e:	08 95       	ret

00002770 <sMOIfaceRF_raise_dataRecieved>:
void sMOIfaceRF_raise_dataRecieved(SMO* handle) {
	handle->ifaceRF.DataRecieved_raised = bool_true;
    2770:	21 e0       	ldi	r18, 0x01	; 1
    2772:	fc 01       	movw	r30, r24
    2774:	20 a3       	lds	r18, 0x50
}
    2776:	08 95       	ret

00002778 <sMOIfaceRF_get_data>:


sc_string sMOIfaceRF_get_data(SMO* handle) {
    2778:	fc 01       	movw	r30, r24
	return handle->ifaceRF.data;
}
    277a:	83 89       	ldd	r24, Z+19	; 0x13
    277c:	94 89       	ldd	r25, Z+20	; 0x14
    277e:	08 95       	ret

00002780 <sMOIfaceRF_set_data>:
void sMOIfaceRF_set_data(SMO* handle, sc_string value) {
	handle->ifaceRF.data = value;
    2780:	fc 01       	movw	r30, r24
    2782:	74 8b       	std	Z+20, r23	; 0x14
    2784:	63 8b       	std	Z+19, r22	; 0x13
}
    2786:	08 95       	ret

00002788 <sMOIfaceRF_get_lastdata>:
sc_string sMOIfaceRF_get_lastdata(SMO* handle) {
    2788:	fc 01       	movw	r30, r24
	return handle->ifaceRF.lastdata;
}
    278a:	85 89       	ldd	r24, Z+21	; 0x15
    278c:	96 89       	ldd	r25, Z+22	; 0x16
    278e:	08 95       	ret

00002790 <sMOIfaceRF_set_lastdata>:
void sMOIfaceRF_set_lastdata(SMO* handle, sc_string value) {
	handle->ifaceRF.lastdata = value;
    2790:	fc 01       	movw	r30, r24
    2792:	76 8b       	std	Z+22, r23	; 0x16
    2794:	65 8b       	std	Z+21, r22	; 0x15
}
    2796:	08 95       	ret

00002798 <sMOIfaceRF_get_result>:
sc_boolean sMOIfaceRF_get_result(SMO* handle) {
	return handle->ifaceRF.result;
}
    2798:	fc 01       	movw	r30, r24
    279a:	87 89       	ldd	r24, Z+23	; 0x17
    279c:	08 95       	ret

0000279e <sMOIfaceRF_set_result>:
void sMOIfaceRF_set_result(SMO* handle, sc_boolean value) {
	handle->ifaceRF.result = value;
    279e:	fc 01       	movw	r30, r24
    27a0:	67 8b       	std	Z+23, r22	; 0x17
}
    27a2:	08 95       	ret

000027a4 <sMOIfaceRF_get_retry>:
sc_integer sMOIfaceRF_get_retry(SMO* handle) {
    27a4:	fc 01       	movw	r30, r24
	return handle->ifaceRF.retry;
    27a6:	60 8d       	ldd	r22, Z+24	; 0x18
    27a8:	71 8d       	ldd	r23, Z+25	; 0x19
}
    27aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    27ac:	93 8d       	ldd	r25, Z+27	; 0x1b
    27ae:	08 95       	ret

000027b0 <sMOIfaceRF_set_retry>:
void sMOIfaceRF_set_retry(SMO* handle, sc_integer value) {
	handle->ifaceRF.retry = value;
    27b0:	fc 01       	movw	r30, r24
    27b2:	40 8f       	std	Z+24, r20	; 0x18
    27b4:	51 8f       	std	Z+25, r21	; 0x19
    27b6:	62 8f       	std	Z+26, r22	; 0x1a
    27b8:	73 8f       	std	Z+27, r23	; 0x1b
}
    27ba:	08 95       	ret

000027bc <sMOIfaceRF_get_iD>:
sc_integer sMOIfaceRF_get_iD(SMO* handle) {
    27bc:	fc 01       	movw	r30, r24
	return handle->ifaceRF.ID;
    27be:	64 8d       	ldd	r22, Z+28	; 0x1c
    27c0:	75 8d       	ldd	r23, Z+29	; 0x1d
}
    27c2:	86 8d       	ldd	r24, Z+30	; 0x1e
    27c4:	97 8d       	ldd	r25, Z+31	; 0x1f
    27c6:	08 95       	ret

000027c8 <sMOIfaceRF_set_iD>:
void sMOIfaceRF_set_iD(SMO* handle, sc_integer value) {
	handle->ifaceRF.ID = value;
    27c8:	fc 01       	movw	r30, r24
    27ca:	44 8f       	std	Z+28, r20	; 0x1c
    27cc:	55 8f       	std	Z+29, r21	; 0x1d
    27ce:	66 8f       	std	Z+30, r22	; 0x1e
    27d0:	77 8f       	std	Z+31, r23	; 0x1f
}
    27d2:	08 95       	ret

000027d4 <sMOIfaceDISH_get_iD>:


sc_integer sMOIfaceDISH_get_iD(SMO* handle) {
    27d4:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.ID;
    27d6:	61 a1       	lds	r22, 0x41
    27d8:	72 a1       	lds	r23, 0x42
}
    27da:	83 a1       	lds	r24, 0x43
    27dc:	94 a1       	lds	r25, 0x44
    27de:	08 95       	ret

000027e0 <sMOIfaceDISH_set_iD>:
void sMOIfaceDISH_set_iD(SMO* handle, sc_integer value) {
	handle->ifaceDISH.ID = value;
    27e0:	fc 01       	movw	r30, r24
    27e2:	41 a3       	lds	r20, 0x51
    27e4:	52 a3       	lds	r21, 0x52
    27e6:	63 a3       	lds	r22, 0x53
    27e8:	74 a3       	lds	r23, 0x54
}
    27ea:	08 95       	ret

000027ec <sMOIfaceDISH_get_amount>:
sc_integer sMOIfaceDISH_get_amount(SMO* handle) {
    27ec:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.amount;
    27ee:	65 a1       	lds	r22, 0x45
    27f0:	76 a1       	lds	r23, 0x46
}
    27f2:	87 a1       	lds	r24, 0x47
    27f4:	90 a5       	lds	r25, 0x60
    27f6:	08 95       	ret

000027f8 <sMOIfaceDISH_set_amount>:
void sMOIfaceDISH_set_amount(SMO* handle, sc_integer value) {
	handle->ifaceDISH.amount = value;
    27f8:	fc 01       	movw	r30, r24
    27fa:	45 a3       	lds	r20, 0x55
    27fc:	56 a3       	lds	r21, 0x56
    27fe:	67 a3       	lds	r22, 0x57
    2800:	70 a7       	lds	r23, 0x70
}
    2802:	08 95       	ret

00002804 <sMOIfaceDISH_get_pos>:
sc_integer sMOIfaceDISH_get_pos(SMO* handle) {
    2804:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.pos;
    2806:	61 a5       	lds	r22, 0x61
    2808:	72 a5       	lds	r23, 0x62
}
    280a:	83 a5       	lds	r24, 0x63
    280c:	94 a5       	lds	r25, 0x64
    280e:	08 95       	ret

00002810 <sMOIfaceDISH_set_pos>:
void sMOIfaceDISH_set_pos(SMO* handle, sc_integer value) {
	handle->ifaceDISH.pos = value;
    2810:	fc 01       	movw	r30, r24
    2812:	41 a7       	lds	r20, 0x71
    2814:	52 a7       	lds	r21, 0x72
    2816:	63 a7       	lds	r22, 0x73
    2818:	74 a7       	lds	r23, 0x74
}
    281a:	08 95       	ret

0000281c <sMOIface_raise_switchOff>:
void sMOIface_raise_switchOff(SMO* handle) {
	handle->iface.switchOff_raised = bool_true;
    281c:	21 e0       	ldi	r18, 0x01	; 1
    281e:	fc 01       	movw	r30, r24
    2820:	26 ab       	sts	0x56, r18
}
    2822:	08 95       	ret

00002824 <sMOIface_raise_switchOn>:
void sMOIface_raise_switchOn(SMO* handle) {
	handle->iface.switchOn_raised = bool_true;
    2824:	21 e0       	ldi	r18, 0x01	; 1
    2826:	fc 01       	movw	r30, r24
    2828:	27 ab       	sts	0x57, r18
}
    282a:	08 95       	ret

0000282c <sMOIface_get_lightOn>:


sc_boolean sMOIface_get_lightOn(SMO* handle) {
	return handle->iface.lightOn;
}
    282c:	fc 01       	movw	r30, r24
    282e:	85 a5       	lds	r24, 0x65
    2830:	08 95       	ret

00002832 <sMOIface_set_lightOn>:
void sMOIface_set_lightOn(SMO* handle, sc_boolean value) {
	handle->iface.lightOn = value;
    2832:	fc 01       	movw	r30, r24
    2834:	65 a7       	lds	r22, 0x75
}
    2836:	08 95       	ret

00002838 <sMOIface_get_menuId>:
sc_integer sMOIface_get_menuId(SMO* handle) {
    2838:	fc 01       	movw	r30, r24
	return handle->iface.menuId;
    283a:	66 a5       	lds	r22, 0x66
    283c:	77 a5       	lds	r23, 0x67
}
    283e:	80 a9       	sts	0x40, r24
    2840:	91 a9       	sts	0x41, r25
    2842:	08 95       	ret

00002844 <sMOIface_set_menuId>:
void sMOIface_set_menuId(SMO* handle, sc_integer value) {
	handle->iface.menuId = value;
    2844:	fc 01       	movw	r30, r24
    2846:	46 a7       	lds	r20, 0x76
    2848:	57 a7       	lds	r21, 0x77
    284a:	60 ab       	sts	0x50, r22
    284c:	71 ab       	sts	0x51, r23
}
    284e:	08 95       	ret

00002850 <sMOIface_get_tableId>:
sc_integer sMOIface_get_tableId(SMO* handle) {
    2850:	fc 01       	movw	r30, r24
	return handle->iface.tableId;
    2852:	62 a9       	sts	0x42, r22
    2854:	73 a9       	sts	0x43, r23
}
    2856:	84 a9       	sts	0x44, r24
    2858:	95 a9       	sts	0x45, r25
    285a:	08 95       	ret

0000285c <sMOIface_set_tableId>:
void sMOIface_set_tableId(SMO* handle, sc_integer value) {
	handle->iface.tableId = value;
    285c:	fc 01       	movw	r30, r24
    285e:	42 ab       	sts	0x52, r20
    2860:	53 ab       	sts	0x53, r21
    2862:	64 ab       	sts	0x54, r22
    2864:	75 ab       	sts	0x55, r23
}
    2866:	08 95       	ret

00002868 <spi_init>:

/*
 * spi initialize
 */
void spi_init() {
    SPI_DDR &= ~((1<<SPI_MOSI) | (1<<SPI_MISO) | (1<<SPI_SS) | (1<<SPI_SCK)); //input
    2868:	87 b3       	in	r24, 0x17	; 23
    286a:	80 7f       	andi	r24, 0xF0	; 240
    286c:	87 bb       	out	0x17, r24	; 23
    SPI_DDR |= ((1<<SPI_MOSI) | (1<<SPI_SS) | (1<<SPI_SCK)); //output
    286e:	87 b3       	in	r24, 0x17	; 23
    2870:	87 60       	ori	r24, 0x07	; 7
    2872:	87 bb       	out	0x17, r24	; 23

    SPCR = ((1<<SPE)|               // SPI Enable
    2874:	81 e5       	ldi	r24, 0x51	; 81
    2876:	8d b9       	out	0x0d, r24	; 13
            (1<<MSTR)|              // Master/Slave select
            (0<<SPR1)|(1<<SPR0)|    // SPI Clock Rate
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR = (1<<SPI2X); // Double SPI Speed Bit
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	8e b9       	out	0x0e, r24	; 14
}
    287c:	08 95       	ret

0000287e <spi_writereadbyte>:

/*
 * spi write one byte and read it back
 */
uint8_t spi_writereadbyte(uint8_t data) {
    SPDR = data;
    287e:	8f b9       	out	0x0f, r24	; 15
    while((SPSR & (1<<SPIF)) == 0);
    2880:	77 9b       	sbis	0x0e, 7	; 14
    2882:	fe cf       	rjmp	.-4      	; 0x2880 <spi_writereadbyte+0x2>
    return SPDR;
    2884:	8f b1       	in	r24, 0x0f	; 15
}
    2886:	08 95       	ret

00002888 <TimerInit>:

TimeEvent tmrEvent[10];
int tmrCount=0;

void TimerInit() {
	TCCR0 = 0b011; //CS02=0, CS01=1, CS00=0, chon Prescaler=64
    2888:	83 e0       	ldi	r24, 0x03	; 3
    288a:	83 bf       	out	0x33, r24	; 51
	//Xung chip la 8MHZ -> 1 xung mat 1us/8 = 0.125 us
	//Prescaler=64, kich 256 lan moi tang 1 lan trong bo dem Timer-> Ton 8us
	//Vay, de Timer ngat moi 1ms, ta can: 1000/8=125 lan dem.
	//Ma Timer ngat khi bo dem toi 255, ta can set gia tri ban dau cho bo dem la: 255-125+1=131
	TCNT0=131;
    288c:	83 e8       	ldi	r24, 0x83	; 131
    288e:	82 bf       	out	0x32, r24	; 50
	TIMSK=(1<<TOIE0); //Cho phep ngat khi cho tran o T/C0
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	87 bf       	out	0x37, r24	; 55
	tmrCount=0;
    2894:	10 92 5d 02 	sts	0x025D, r1
    2898:	10 92 5c 02 	sts	0x025C, r1
	sei();
    289c:	78 94       	sei
}
    289e:	08 95       	ret

000028a0 <TimerSet>:

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
    28a0:	cf 92       	push	r12
    28a2:	df 92       	push	r13
    28a4:	ef 92       	push	r14
    28a6:	ff 92       	push	r15
    28a8:	cf 93       	push	r28
    28aa:	df 93       	push	r29
    28ac:	ec 01       	movw	r28, r24
    28ae:	6a 01       	movw	r12, r20
    28b0:	7b 01       	movw	r14, r22
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
    28b2:	40 91 5c 02 	lds	r20, 0x025C
    28b6:	50 91 5d 02 	lds	r21, 0x025D
    28ba:	14 16       	cp	r1, r20
    28bc:	15 06       	cpc	r1, r21
    28be:	e4 f4       	brge	.+56     	; 0x28f8 <TimerSet+0x58>
    28c0:	e2 e7       	ldi	r30, 0x72	; 114
    28c2:	f2 e0       	ldi	r31, 0x02	; 2
    28c4:	df 01       	movw	r26, r30
    28c6:	16 96       	adiw	r26, 0x06	; 6
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
	sei();
}

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
    28cc:	70 e0       	ldi	r23, 0x00	; 0
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
			check=true;
			tmrEvent[i].count=0;
			tmrEvent[i].max=max;
			tmrEvent[i].enabled=true;
    28ce:	61 e0       	ldi	r22, 0x01	; 1

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
    28d0:	80 81       	ld	r24, Z
    28d2:	91 81       	ldd	r25, Z+1	; 0x01
    28d4:	8c 17       	cp	r24, r28
    28d6:	9d 07       	cpc	r25, r29
    28d8:	31 f4       	brne	.+12     	; 0x28e6 <TimerSet+0x46>
			check=true;
			tmrEvent[i].count=0;
    28da:	13 82       	std	Z+3, r1	; 0x03
    28dc:	12 82       	std	Z+2, r1	; 0x02
			tmrEvent[i].max=max;
    28de:	d5 82       	std	Z+5, r13	; 0x05
    28e0:	c4 82       	std	Z+4, r12	; 0x04
			tmrEvent[i].enabled=true;
    28e2:	6c 93       	st	X, r22
//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
			check=true;
    28e4:	76 2f       	mov	r23, r22
}

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
    28e6:	2f 5f       	subi	r18, 0xFF	; 255
    28e8:	3f 4f       	sbci	r19, 0xFF	; 255
    28ea:	37 96       	adiw	r30, 0x07	; 7
    28ec:	17 96       	adiw	r26, 0x07	; 7
    28ee:	24 17       	cp	r18, r20
    28f0:	35 07       	cpc	r19, r21
    28f2:	74 f3       	brlt	.-36     	; 0x28d0 <TimerSet+0x30>
			tmrEvent[i].count=0;
			tmrEvent[i].max=max;
			tmrEvent[i].enabled=true;
		}
	}
	if (!check) {
    28f4:	77 23       	and	r23, r23
    28f6:	c9 f4       	brne	.+50     	; 0x292a <TimerSet+0x8a>
		tmrEvent[tmrCount].EventId=evenId;
    28f8:	fa 01       	movw	r30, r20
    28fa:	ee 0f       	add	r30, r30
    28fc:	ff 1f       	adc	r31, r31
    28fe:	ee 0f       	add	r30, r30
    2900:	ff 1f       	adc	r31, r31
    2902:	ee 0f       	add	r30, r30
    2904:	ff 1f       	adc	r31, r31
    2906:	e4 1b       	sub	r30, r20
    2908:	f5 0b       	sbc	r31, r21
    290a:	ee 58       	subi	r30, 0x8E	; 142
    290c:	fd 4f       	sbci	r31, 0xFD	; 253
    290e:	d1 83       	std	Z+1, r29	; 0x01
    2910:	c0 83       	st	Z, r28
		tmrEvent[tmrCount].count=0;
    2912:	13 82       	std	Z+3, r1	; 0x03
    2914:	12 82       	std	Z+2, r1	; 0x02
		tmrEvent[tmrCount].max=max;
    2916:	d5 82       	std	Z+5, r13	; 0x05
    2918:	c4 82       	std	Z+4, r12	; 0x04
		tmrEvent[tmrCount].enabled=true;
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	86 83       	std	Z+6, r24	; 0x06
		tmrCount++;
    291e:	4f 5f       	subi	r20, 0xFF	; 255
    2920:	5f 4f       	sbci	r21, 0xFF	; 255
    2922:	50 93 5d 02 	sts	0x025D, r21
    2926:	40 93 5c 02 	sts	0x025C, r20
	}
}
    292a:	df 91       	pop	r29
    292c:	cf 91       	pop	r28
    292e:	ff 90       	pop	r15
    2930:	ef 90       	pop	r14
    2932:	df 90       	pop	r13
    2934:	cf 90       	pop	r12
    2936:	08 95       	ret

00002938 <TimerUnSet>:

void TimerUnSet(const sc_eventid evenId) {
    2938:	dc 01       	movw	r26, r24
	for (int i=0;i<tmrCount;i++) {
    293a:	60 91 5c 02 	lds	r22, 0x025C
    293e:	70 91 5d 02 	lds	r23, 0x025D
    2942:	16 16       	cp	r1, r22
    2944:	17 06       	cpc	r1, r23
    2946:	6c f5       	brge	.+90     	; 0x29a2 <TimerUnSet+0x6a>
		if (tmrEvent[i].EventId==evenId) {
    2948:	80 91 72 02 	lds	r24, 0x0272
    294c:	90 91 73 02 	lds	r25, 0x0273
    2950:	8a 17       	cp	r24, r26
    2952:	9b 07       	cpc	r25, r27
    2954:	e9 f4       	brne	.+58     	; 0x2990 <TimerUnSet+0x58>
    2956:	0a c0       	rjmp	.+20     	; 0x296c <TimerUnSet+0x34>
    2958:	29 5f       	subi	r18, 0xF9	; 249
    295a:	3f 4f       	sbci	r19, 0xFF	; 255
		tmrEvent[tmrCount].enabled=true;
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
    295c:	f9 01       	movw	r30, r18
    295e:	37 97       	sbiw	r30, 0x07	; 7
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
    2960:	80 81       	ld	r24, Z
    2962:	91 81       	ldd	r25, Z+1	; 0x01
    2964:	8a 17       	cp	r24, r26
    2966:	9b 07       	cpc	r25, r27
    2968:	b9 f4       	brne	.+46     	; 0x2998 <TimerUnSet+0x60>
    296a:	02 c0       	rjmp	.+4      	; 0x2970 <TimerUnSet+0x38>
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
	for (int i=0;i<tmrCount;i++) {
    296c:	40 e0       	ldi	r20, 0x00	; 0
    296e:	50 e0       	ldi	r21, 0x00	; 0
		if (tmrEvent[i].EventId==evenId) {
			tmrEvent[i].count=0;
    2970:	fa 01       	movw	r30, r20
    2972:	ee 0f       	add	r30, r30
    2974:	ff 1f       	adc	r31, r31
    2976:	ee 0f       	add	r30, r30
    2978:	ff 1f       	adc	r31, r31
    297a:	ee 0f       	add	r30, r30
    297c:	ff 1f       	adc	r31, r31
    297e:	e4 1b       	sub	r30, r20
    2980:	f5 0b       	sbc	r31, r21
    2982:	ee 58       	subi	r30, 0x8E	; 142
    2984:	fd 4f       	sbci	r31, 0xFD	; 253
    2986:	13 82       	std	Z+3, r1	; 0x03
    2988:	12 82       	std	Z+2, r1	; 0x02
			tmrEvent[i].enabled=false;
    298a:	16 82       	std	Z+6, r1	; 0x06
			*(sc_boolean*)evenId=bool_false;
    298c:	1c 92       	st	X, r1
			return;
    298e:	08 95       	ret
    2990:	29 e7       	ldi	r18, 0x79	; 121
    2992:	32 e0       	ldi	r19, 0x02	; 2
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
	for (int i=0;i<tmrCount;i++) {
    2994:	40 e0       	ldi	r20, 0x00	; 0
    2996:	50 e0       	ldi	r21, 0x00	; 0
    2998:	4f 5f       	subi	r20, 0xFF	; 255
    299a:	5f 4f       	sbci	r21, 0xFF	; 255
    299c:	46 17       	cp	r20, r22
    299e:	57 07       	cpc	r21, r23
    29a0:	d9 f6       	brne	.-74     	; 0x2958 <TimerUnSet+0x20>
    29a2:	08 95       	ret

000029a4 <TimerCheck>:
			return;
		}
	}
}

void TimerCheck(SMO* handle) {
    29a4:	cf 92       	push	r12
    29a6:	df 92       	push	r13
    29a8:	ef 92       	push	r14
    29aa:	ff 92       	push	r15
    29ac:	0f 93       	push	r16
    29ae:	1f 93       	push	r17
    29b0:	cf 93       	push	r28
    29b2:	df 93       	push	r29
    29b4:	6c 01       	movw	r12, r24
	for (int i=0;i<tmrCount;i++) {
    29b6:	80 91 5c 02 	lds	r24, 0x025C
    29ba:	90 91 5d 02 	lds	r25, 0x025D
    29be:	18 16       	cp	r1, r24
    29c0:	19 06       	cpc	r1, r25
    29c2:	94 f5       	brge	.+100    	; 0x2a28 <TimerCheck+0x84>
    29c4:	c8 e7       	ldi	r28, 0x78	; 120
    29c6:	d2 e0       	ldi	r29, 0x02	; 2
    29c8:	8e 01       	movw	r16, r28
    29ca:	06 50       	subi	r16, 0x06	; 6
    29cc:	10 40       	sbci	r17, 0x00	; 0
    29ce:	ee 24       	eor	r14, r14
    29d0:	ff 24       	eor	r15, r15
		if (tmrEvent[i].enabled) {
    29d2:	88 81       	ld	r24, Y
    29d4:	88 23       	and	r24, r24
    29d6:	d9 f0       	breq	.+54     	; 0x2a0e <TimerCheck+0x6a>
			tmrEvent[i].count++;
    29d8:	d8 01       	movw	r26, r16
    29da:	12 96       	adiw	r26, 0x02	; 2
    29dc:	8d 91       	ld	r24, X+
    29de:	9c 91       	ld	r25, X
    29e0:	13 97       	sbiw	r26, 0x03	; 3
    29e2:	01 96       	adiw	r24, 0x01	; 1
    29e4:	13 96       	adiw	r26, 0x03	; 3
    29e6:	9c 93       	st	X, r25
    29e8:	8e 93       	st	-X, r24
    29ea:	12 97       	sbiw	r26, 0x02	; 2
			if (tmrEvent[i].count==tmrEvent[i].max) {
    29ec:	14 96       	adiw	r26, 0x04	; 4
    29ee:	2d 91       	ld	r18, X+
    29f0:	3c 91       	ld	r19, X
    29f2:	15 97       	sbiw	r26, 0x05	; 5
    29f4:	82 17       	cp	r24, r18
    29f6:	93 07       	cpc	r25, r19
    29f8:	51 f4       	brne	.+20     	; 0x2a0e <TimerCheck+0x6a>
				tmrEvent[i].count=0;
    29fa:	13 96       	adiw	r26, 0x03	; 3
    29fc:	1c 92       	st	X, r1
    29fe:	1e 92       	st	-X, r1
    2a00:	12 97       	sbiw	r26, 0x02	; 2
				tmrEvent[i].enabled=false;
    2a02:	18 82       	st	Y, r1
				sMO_raiseTimeEvent(handle,tmrEvent[i].EventId);
    2a04:	6d 91       	ld	r22, X+
    2a06:	7c 91       	ld	r23, X
    2a08:	c6 01       	movw	r24, r12
    2a0a:	0e 94 9c 12 	call	0x2538	; 0x2538 <sMO_raiseTimeEvent>
		}
	}
}

void TimerCheck(SMO* handle) {
	for (int i=0;i<tmrCount;i++) {
    2a0e:	08 94       	sec
    2a10:	e1 1c       	adc	r14, r1
    2a12:	f1 1c       	adc	r15, r1
    2a14:	27 96       	adiw	r28, 0x07	; 7
    2a16:	09 5f       	subi	r16, 0xF9	; 249
    2a18:	1f 4f       	sbci	r17, 0xFF	; 255
    2a1a:	80 91 5c 02 	lds	r24, 0x025C
    2a1e:	90 91 5d 02 	lds	r25, 0x025D
    2a22:	e8 16       	cp	r14, r24
    2a24:	f9 06       	cpc	r15, r25
    2a26:	ac f2       	brlt	.-86     	; 0x29d2 <TimerCheck+0x2e>
				tmrEvent[i].enabled=false;
				sMO_raiseTimeEvent(handle,tmrEvent[i].EventId);
			}
		}
	}
}
    2a28:	df 91       	pop	r29
    2a2a:	cf 91       	pop	r28
    2a2c:	1f 91       	pop	r17
    2a2e:	0f 91       	pop	r16
    2a30:	ff 90       	pop	r15
    2a32:	ef 90       	pop	r14
    2a34:	df 90       	pop	r13
    2a36:	cf 90       	pop	r12
    2a38:	08 95       	ret

00002a3a <TimerClear>:

void TimerClear() {
	free(tmrEvent);
    2a3a:	82 e7       	ldi	r24, 0x72	; 114
    2a3c:	92 e0       	ldi	r25, 0x02	; 2
    2a3e:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <free>
	tmrCount=0;
    2a42:	10 92 5d 02 	sts	0x025D, r1
    2a46:	10 92 5c 02 	sts	0x025C, r1
    2a4a:	08 95       	ret

00002a4c <__mulsi3>:
    2a4c:	62 9f       	mul	r22, r18
    2a4e:	d0 01       	movw	r26, r0
    2a50:	73 9f       	mul	r23, r19
    2a52:	f0 01       	movw	r30, r0
    2a54:	82 9f       	mul	r24, r18
    2a56:	e0 0d       	add	r30, r0
    2a58:	f1 1d       	adc	r31, r1
    2a5a:	64 9f       	mul	r22, r20
    2a5c:	e0 0d       	add	r30, r0
    2a5e:	f1 1d       	adc	r31, r1
    2a60:	92 9f       	mul	r25, r18
    2a62:	f0 0d       	add	r31, r0
    2a64:	83 9f       	mul	r24, r19
    2a66:	f0 0d       	add	r31, r0
    2a68:	74 9f       	mul	r23, r20
    2a6a:	f0 0d       	add	r31, r0
    2a6c:	65 9f       	mul	r22, r21
    2a6e:	f0 0d       	add	r31, r0
    2a70:	99 27       	eor	r25, r25
    2a72:	72 9f       	mul	r23, r18
    2a74:	b0 0d       	add	r27, r0
    2a76:	e1 1d       	adc	r30, r1
    2a78:	f9 1f       	adc	r31, r25
    2a7a:	63 9f       	mul	r22, r19
    2a7c:	b0 0d       	add	r27, r0
    2a7e:	e1 1d       	adc	r30, r1
    2a80:	f9 1f       	adc	r31, r25
    2a82:	bd 01       	movw	r22, r26
    2a84:	cf 01       	movw	r24, r30
    2a86:	11 24       	eor	r1, r1
    2a88:	08 95       	ret

00002a8a <__udivmodqi4>:
    2a8a:	99 1b       	sub	r25, r25
    2a8c:	79 e0       	ldi	r23, 0x09	; 9
    2a8e:	04 c0       	rjmp	.+8      	; 0x2a98 <__udivmodqi4_ep>

00002a90 <__udivmodqi4_loop>:
    2a90:	99 1f       	adc	r25, r25
    2a92:	96 17       	cp	r25, r22
    2a94:	08 f0       	brcs	.+2      	; 0x2a98 <__udivmodqi4_ep>
    2a96:	96 1b       	sub	r25, r22

00002a98 <__udivmodqi4_ep>:
    2a98:	88 1f       	adc	r24, r24
    2a9a:	7a 95       	dec	r23
    2a9c:	c9 f7       	brne	.-14     	; 0x2a90 <__udivmodqi4_loop>
    2a9e:	80 95       	com	r24
    2aa0:	08 95       	ret

00002aa2 <__divmodhi4>:
    2aa2:	97 fb       	bst	r25, 7
    2aa4:	09 2e       	mov	r0, r25
    2aa6:	07 26       	eor	r0, r23
    2aa8:	0a d0       	rcall	.+20     	; 0x2abe <__divmodhi4_neg1>
    2aaa:	77 fd       	sbrc	r23, 7
    2aac:	04 d0       	rcall	.+8      	; 0x2ab6 <__divmodhi4_neg2>
    2aae:	0c d0       	rcall	.+24     	; 0x2ac8 <__udivmodhi4>
    2ab0:	06 d0       	rcall	.+12     	; 0x2abe <__divmodhi4_neg1>
    2ab2:	00 20       	and	r0, r0
    2ab4:	1a f4       	brpl	.+6      	; 0x2abc <__divmodhi4_exit>

00002ab6 <__divmodhi4_neg2>:
    2ab6:	70 95       	com	r23
    2ab8:	61 95       	neg	r22
    2aba:	7f 4f       	sbci	r23, 0xFF	; 255

00002abc <__divmodhi4_exit>:
    2abc:	08 95       	ret

00002abe <__divmodhi4_neg1>:
    2abe:	f6 f7       	brtc	.-4      	; 0x2abc <__divmodhi4_exit>
    2ac0:	90 95       	com	r25
    2ac2:	81 95       	neg	r24
    2ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ac6:	08 95       	ret

00002ac8 <__udivmodhi4>:
    2ac8:	aa 1b       	sub	r26, r26
    2aca:	bb 1b       	sub	r27, r27
    2acc:	51 e1       	ldi	r21, 0x11	; 17
    2ace:	07 c0       	rjmp	.+14     	; 0x2ade <__udivmodhi4_ep>

00002ad0 <__udivmodhi4_loop>:
    2ad0:	aa 1f       	adc	r26, r26
    2ad2:	bb 1f       	adc	r27, r27
    2ad4:	a6 17       	cp	r26, r22
    2ad6:	b7 07       	cpc	r27, r23
    2ad8:	10 f0       	brcs	.+4      	; 0x2ade <__udivmodhi4_ep>
    2ada:	a6 1b       	sub	r26, r22
    2adc:	b7 0b       	sbc	r27, r23

00002ade <__udivmodhi4_ep>:
    2ade:	88 1f       	adc	r24, r24
    2ae0:	99 1f       	adc	r25, r25
    2ae2:	5a 95       	dec	r21
    2ae4:	a9 f7       	brne	.-22     	; 0x2ad0 <__udivmodhi4_loop>
    2ae6:	80 95       	com	r24
    2ae8:	90 95       	com	r25
    2aea:	bc 01       	movw	r22, r24
    2aec:	cd 01       	movw	r24, r26
    2aee:	08 95       	ret

00002af0 <malloc>:
    2af0:	cf 93       	push	r28
    2af2:	df 93       	push	r29
    2af4:	ac 01       	movw	r20, r24
    2af6:	82 30       	cpi	r24, 0x02	; 2
    2af8:	91 05       	cpc	r25, r1
    2afa:	10 f4       	brcc	.+4      	; 0x2b00 <malloc+0x10>
    2afc:	42 e0       	ldi	r20, 0x02	; 2
    2afe:	50 e0       	ldi	r21, 0x00	; 0
    2b00:	e0 91 ba 02 	lds	r30, 0x02BA
    2b04:	f0 91 bb 02 	lds	r31, 0x02BB
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	a0 e0       	ldi	r26, 0x00	; 0
    2b0e:	b0 e0       	ldi	r27, 0x00	; 0
    2b10:	24 c0       	rjmp	.+72     	; 0x2b5a <malloc+0x6a>
    2b12:	80 81       	ld	r24, Z
    2b14:	91 81       	ldd	r25, Z+1	; 0x01
    2b16:	84 17       	cp	r24, r20
    2b18:	95 07       	cpc	r25, r21
    2b1a:	d0 f0       	brcs	.+52     	; 0x2b50 <malloc+0x60>
    2b1c:	84 17       	cp	r24, r20
    2b1e:	95 07       	cpc	r25, r21
    2b20:	71 f4       	brne	.+28     	; 0x2b3e <malloc+0x4e>
    2b22:	82 81       	ldd	r24, Z+2	; 0x02
    2b24:	93 81       	ldd	r25, Z+3	; 0x03
    2b26:	10 97       	sbiw	r26, 0x00	; 0
    2b28:	29 f0       	breq	.+10     	; 0x2b34 <malloc+0x44>
    2b2a:	13 96       	adiw	r26, 0x03	; 3
    2b2c:	9c 93       	st	X, r25
    2b2e:	8e 93       	st	-X, r24
    2b30:	12 97       	sbiw	r26, 0x02	; 2
    2b32:	2c c0       	rjmp	.+88     	; 0x2b8c <malloc+0x9c>
    2b34:	90 93 bb 02 	sts	0x02BB, r25
    2b38:	80 93 ba 02 	sts	0x02BA, r24
    2b3c:	27 c0       	rjmp	.+78     	; 0x2b8c <malloc+0x9c>
    2b3e:	21 15       	cp	r18, r1
    2b40:	31 05       	cpc	r19, r1
    2b42:	19 f0       	breq	.+6      	; 0x2b4a <malloc+0x5a>
    2b44:	82 17       	cp	r24, r18
    2b46:	93 07       	cpc	r25, r19
    2b48:	18 f4       	brcc	.+6      	; 0x2b50 <malloc+0x60>
    2b4a:	9c 01       	movw	r18, r24
    2b4c:	bd 01       	movw	r22, r26
    2b4e:	ef 01       	movw	r28, r30
    2b50:	92 81       	ldd	r25, Z+2	; 0x02
    2b52:	83 81       	ldd	r24, Z+3	; 0x03
    2b54:	df 01       	movw	r26, r30
    2b56:	e9 2f       	mov	r30, r25
    2b58:	f8 2f       	mov	r31, r24
    2b5a:	30 97       	sbiw	r30, 0x00	; 0
    2b5c:	d1 f6       	brne	.-76     	; 0x2b12 <malloc+0x22>
    2b5e:	21 15       	cp	r18, r1
    2b60:	31 05       	cpc	r19, r1
    2b62:	f9 f0       	breq	.+62     	; 0x2ba2 <malloc+0xb2>
    2b64:	c9 01       	movw	r24, r18
    2b66:	84 1b       	sub	r24, r20
    2b68:	95 0b       	sbc	r25, r21
    2b6a:	84 30       	cpi	r24, 0x04	; 4
    2b6c:	91 05       	cpc	r25, r1
    2b6e:	80 f4       	brcc	.+32     	; 0x2b90 <malloc+0xa0>
    2b70:	8a 81       	ldd	r24, Y+2	; 0x02
    2b72:	9b 81       	ldd	r25, Y+3	; 0x03
    2b74:	61 15       	cp	r22, r1
    2b76:	71 05       	cpc	r23, r1
    2b78:	21 f0       	breq	.+8      	; 0x2b82 <malloc+0x92>
    2b7a:	fb 01       	movw	r30, r22
    2b7c:	93 83       	std	Z+3, r25	; 0x03
    2b7e:	82 83       	std	Z+2, r24	; 0x02
    2b80:	04 c0       	rjmp	.+8      	; 0x2b8a <malloc+0x9a>
    2b82:	90 93 bb 02 	sts	0x02BB, r25
    2b86:	80 93 ba 02 	sts	0x02BA, r24
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	32 96       	adiw	r30, 0x02	; 2
    2b8e:	42 c0       	rjmp	.+132    	; 0x2c14 <malloc+0x124>
    2b90:	fe 01       	movw	r30, r28
    2b92:	e8 0f       	add	r30, r24
    2b94:	f9 1f       	adc	r31, r25
    2b96:	41 93       	st	Z+, r20
    2b98:	51 93       	st	Z+, r21
    2b9a:	02 97       	sbiw	r24, 0x02	; 2
    2b9c:	99 83       	std	Y+1, r25	; 0x01
    2b9e:	88 83       	st	Y, r24
    2ba0:	39 c0       	rjmp	.+114    	; 0x2c14 <malloc+0x124>
    2ba2:	80 91 b8 02 	lds	r24, 0x02B8
    2ba6:	90 91 b9 02 	lds	r25, 0x02B9
    2baa:	00 97       	sbiw	r24, 0x00	; 0
    2bac:	41 f4       	brne	.+16     	; 0x2bbe <malloc+0xce>
    2bae:	80 91 57 02 	lds	r24, 0x0257
    2bb2:	90 91 58 02 	lds	r25, 0x0258
    2bb6:	90 93 b9 02 	sts	0x02B9, r25
    2bba:	80 93 b8 02 	sts	0x02B8, r24
    2bbe:	20 91 55 02 	lds	r18, 0x0255
    2bc2:	30 91 56 02 	lds	r19, 0x0256
    2bc6:	21 15       	cp	r18, r1
    2bc8:	31 05       	cpc	r19, r1
    2bca:	41 f4       	brne	.+16     	; 0x2bdc <malloc+0xec>
    2bcc:	2d b7       	in	r18, 0x3d	; 61
    2bce:	3e b7       	in	r19, 0x3e	; 62
    2bd0:	80 91 59 02 	lds	r24, 0x0259
    2bd4:	90 91 5a 02 	lds	r25, 0x025A
    2bd8:	28 1b       	sub	r18, r24
    2bda:	39 0b       	sbc	r19, r25
    2bdc:	e0 91 b8 02 	lds	r30, 0x02B8
    2be0:	f0 91 b9 02 	lds	r31, 0x02B9
    2be4:	e2 17       	cp	r30, r18
    2be6:	f3 07       	cpc	r31, r19
    2be8:	98 f4       	brcc	.+38     	; 0x2c10 <malloc+0x120>
    2bea:	2e 1b       	sub	r18, r30
    2bec:	3f 0b       	sbc	r19, r31
    2bee:	24 17       	cp	r18, r20
    2bf0:	35 07       	cpc	r19, r21
    2bf2:	70 f0       	brcs	.+28     	; 0x2c10 <malloc+0x120>
    2bf4:	ca 01       	movw	r24, r20
    2bf6:	02 96       	adiw	r24, 0x02	; 2
    2bf8:	28 17       	cp	r18, r24
    2bfa:	39 07       	cpc	r19, r25
    2bfc:	48 f0       	brcs	.+18     	; 0x2c10 <malloc+0x120>
    2bfe:	8e 0f       	add	r24, r30
    2c00:	9f 1f       	adc	r25, r31
    2c02:	90 93 b9 02 	sts	0x02B9, r25
    2c06:	80 93 b8 02 	sts	0x02B8, r24
    2c0a:	41 93       	st	Z+, r20
    2c0c:	51 93       	st	Z+, r21
    2c0e:	02 c0       	rjmp	.+4      	; 0x2c14 <malloc+0x124>
    2c10:	e0 e0       	ldi	r30, 0x00	; 0
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	cf 01       	movw	r24, r30
    2c16:	df 91       	pop	r29
    2c18:	cf 91       	pop	r28
    2c1a:	08 95       	ret

00002c1c <free>:
    2c1c:	0f 93       	push	r16
    2c1e:	1f 93       	push	r17
    2c20:	cf 93       	push	r28
    2c22:	df 93       	push	r29
    2c24:	9c 01       	movw	r18, r24
    2c26:	00 97       	sbiw	r24, 0x00	; 0
    2c28:	09 f4       	brne	.+2      	; 0x2c2c <free+0x10>
    2c2a:	8c c0       	rjmp	.+280    	; 0x2d44 <free+0x128>
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	12 97       	sbiw	r26, 0x02	; 2
    2c30:	13 96       	adiw	r26, 0x03	; 3
    2c32:	1c 92       	st	X, r1
    2c34:	1e 92       	st	-X, r1
    2c36:	12 97       	sbiw	r26, 0x02	; 2
    2c38:	60 91 ba 02 	lds	r22, 0x02BA
    2c3c:	70 91 bb 02 	lds	r23, 0x02BB
    2c40:	61 15       	cp	r22, r1
    2c42:	71 05       	cpc	r23, r1
    2c44:	89 f4       	brne	.+34     	; 0x2c68 <free+0x4c>
    2c46:	8d 91       	ld	r24, X+
    2c48:	9c 91       	ld	r25, X
    2c4a:	11 97       	sbiw	r26, 0x01	; 1
    2c4c:	82 0f       	add	r24, r18
    2c4e:	93 1f       	adc	r25, r19
    2c50:	20 91 b8 02 	lds	r18, 0x02B8
    2c54:	30 91 b9 02 	lds	r19, 0x02B9
    2c58:	28 17       	cp	r18, r24
    2c5a:	39 07       	cpc	r19, r25
    2c5c:	69 f5       	brne	.+90     	; 0x2cb8 <free+0x9c>
    2c5e:	b0 93 b9 02 	sts	0x02B9, r27
    2c62:	a0 93 b8 02 	sts	0x02B8, r26
    2c66:	6e c0       	rjmp	.+220    	; 0x2d44 <free+0x128>
    2c68:	fb 01       	movw	r30, r22
    2c6a:	40 e0       	ldi	r20, 0x00	; 0
    2c6c:	50 e0       	ldi	r21, 0x00	; 0
    2c6e:	01 c0       	rjmp	.+2      	; 0x2c72 <free+0x56>
    2c70:	fc 01       	movw	r30, r24
    2c72:	ea 17       	cp	r30, r26
    2c74:	fb 07       	cpc	r31, r27
    2c76:	30 f4       	brcc	.+12     	; 0x2c84 <free+0x68>
    2c78:	82 81       	ldd	r24, Z+2	; 0x02
    2c7a:	93 81       	ldd	r25, Z+3	; 0x03
    2c7c:	af 01       	movw	r20, r30
    2c7e:	00 97       	sbiw	r24, 0x00	; 0
    2c80:	b9 f7       	brne	.-18     	; 0x2c70 <free+0x54>
    2c82:	1f c0       	rjmp	.+62     	; 0x2cc2 <free+0xa6>
    2c84:	e9 01       	movw	r28, r18
    2c86:	22 97       	sbiw	r28, 0x02	; 2
    2c88:	fb 83       	std	Y+3, r31	; 0x03
    2c8a:	ea 83       	std	Y+2, r30	; 0x02
    2c8c:	08 81       	ld	r16, Y
    2c8e:	19 81       	ldd	r17, Y+1	; 0x01
    2c90:	c9 01       	movw	r24, r18
    2c92:	80 0f       	add	r24, r16
    2c94:	91 1f       	adc	r25, r17
    2c96:	8e 17       	cp	r24, r30
    2c98:	9f 07       	cpc	r25, r31
    2c9a:	59 f4       	brne	.+22     	; 0x2cb2 <free+0x96>
    2c9c:	80 81       	ld	r24, Z
    2c9e:	91 81       	ldd	r25, Z+1	; 0x01
    2ca0:	80 0f       	add	r24, r16
    2ca2:	91 1f       	adc	r25, r17
    2ca4:	02 96       	adiw	r24, 0x02	; 2
    2ca6:	99 83       	std	Y+1, r25	; 0x01
    2ca8:	88 83       	st	Y, r24
    2caa:	82 81       	ldd	r24, Z+2	; 0x02
    2cac:	93 81       	ldd	r25, Z+3	; 0x03
    2cae:	9b 83       	std	Y+3, r25	; 0x03
    2cb0:	8a 83       	std	Y+2, r24	; 0x02
    2cb2:	41 15       	cp	r20, r1
    2cb4:	51 05       	cpc	r21, r1
    2cb6:	29 f4       	brne	.+10     	; 0x2cc2 <free+0xa6>
    2cb8:	b0 93 bb 02 	sts	0x02BB, r27
    2cbc:	a0 93 ba 02 	sts	0x02BA, r26
    2cc0:	41 c0       	rjmp	.+130    	; 0x2d44 <free+0x128>
    2cc2:	fa 01       	movw	r30, r20
    2cc4:	b3 83       	std	Z+3, r27	; 0x03
    2cc6:	a2 83       	std	Z+2, r26	; 0x02
    2cc8:	c1 91       	ld	r28, Z+
    2cca:	d1 91       	ld	r29, Z+
    2ccc:	ec 0f       	add	r30, r28
    2cce:	fd 1f       	adc	r31, r29
    2cd0:	ae 17       	cp	r26, r30
    2cd2:	bf 07       	cpc	r27, r31
    2cd4:	81 f4       	brne	.+32     	; 0x2cf6 <free+0xda>
    2cd6:	f9 01       	movw	r30, r18
    2cd8:	92 91       	ld	r25, -Z
    2cda:	82 91       	ld	r24, -Z
    2cdc:	8c 0f       	add	r24, r28
    2cde:	9d 1f       	adc	r25, r29
    2ce0:	02 96       	adiw	r24, 0x02	; 2
    2ce2:	da 01       	movw	r26, r20
    2ce4:	11 96       	adiw	r26, 0x01	; 1
    2ce6:	9c 93       	st	X, r25
    2ce8:	8e 93       	st	-X, r24
    2cea:	82 81       	ldd	r24, Z+2	; 0x02
    2cec:	93 81       	ldd	r25, Z+3	; 0x03
    2cee:	13 96       	adiw	r26, 0x03	; 3
    2cf0:	9c 93       	st	X, r25
    2cf2:	8e 93       	st	-X, r24
    2cf4:	12 97       	sbiw	r26, 0x02	; 2
    2cf6:	e0 e0       	ldi	r30, 0x00	; 0
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	02 c0       	rjmp	.+4      	; 0x2d00 <free+0xe4>
    2cfc:	fb 01       	movw	r30, r22
    2cfe:	bc 01       	movw	r22, r24
    2d00:	db 01       	movw	r26, r22
    2d02:	12 96       	adiw	r26, 0x02	; 2
    2d04:	8d 91       	ld	r24, X+
    2d06:	9c 91       	ld	r25, X
    2d08:	13 97       	sbiw	r26, 0x03	; 3
    2d0a:	00 97       	sbiw	r24, 0x00	; 0
    2d0c:	b9 f7       	brne	.-18     	; 0x2cfc <free+0xe0>
    2d0e:	cb 01       	movw	r24, r22
    2d10:	02 96       	adiw	r24, 0x02	; 2
    2d12:	2d 91       	ld	r18, X+
    2d14:	3c 91       	ld	r19, X
    2d16:	11 97       	sbiw	r26, 0x01	; 1
    2d18:	82 0f       	add	r24, r18
    2d1a:	93 1f       	adc	r25, r19
    2d1c:	20 91 b8 02 	lds	r18, 0x02B8
    2d20:	30 91 b9 02 	lds	r19, 0x02B9
    2d24:	28 17       	cp	r18, r24
    2d26:	39 07       	cpc	r19, r25
    2d28:	69 f4       	brne	.+26     	; 0x2d44 <free+0x128>
    2d2a:	30 97       	sbiw	r30, 0x00	; 0
    2d2c:	29 f4       	brne	.+10     	; 0x2d38 <free+0x11c>
    2d2e:	10 92 bb 02 	sts	0x02BB, r1
    2d32:	10 92 ba 02 	sts	0x02BA, r1
    2d36:	02 c0       	rjmp	.+4      	; 0x2d3c <free+0x120>
    2d38:	13 82       	std	Z+3, r1	; 0x03
    2d3a:	12 82       	std	Z+2, r1	; 0x02
    2d3c:	70 93 b9 02 	sts	0x02B9, r23
    2d40:	60 93 b8 02 	sts	0x02B8, r22
    2d44:	df 91       	pop	r29
    2d46:	cf 91       	pop	r28
    2d48:	1f 91       	pop	r17
    2d4a:	0f 91       	pop	r16
    2d4c:	08 95       	ret

00002d4e <sprintf>:
    2d4e:	0f 93       	push	r16
    2d50:	1f 93       	push	r17
    2d52:	cf 93       	push	r28
    2d54:	df 93       	push	r29
    2d56:	cd b7       	in	r28, 0x3d	; 61
    2d58:	de b7       	in	r29, 0x3e	; 62
    2d5a:	2e 97       	sbiw	r28, 0x0e	; 14
    2d5c:	0f b6       	in	r0, 0x3f	; 63
    2d5e:	f8 94       	cli
    2d60:	de bf       	out	0x3e, r29	; 62
    2d62:	0f be       	out	0x3f, r0	; 63
    2d64:	cd bf       	out	0x3d, r28	; 61
    2d66:	0d 89       	ldd	r16, Y+21	; 0x15
    2d68:	1e 89       	ldd	r17, Y+22	; 0x16
    2d6a:	86 e0       	ldi	r24, 0x06	; 6
    2d6c:	8c 83       	std	Y+4, r24	; 0x04
    2d6e:	1a 83       	std	Y+2, r17	; 0x02
    2d70:	09 83       	std	Y+1, r16	; 0x01
    2d72:	8f ef       	ldi	r24, 0xFF	; 255
    2d74:	9f e7       	ldi	r25, 0x7F	; 127
    2d76:	9e 83       	std	Y+6, r25	; 0x06
    2d78:	8d 83       	std	Y+5, r24	; 0x05
    2d7a:	ae 01       	movw	r20, r28
    2d7c:	47 5e       	subi	r20, 0xE7	; 231
    2d7e:	5f 4f       	sbci	r21, 0xFF	; 255
    2d80:	ce 01       	movw	r24, r28
    2d82:	01 96       	adiw	r24, 0x01	; 1
    2d84:	6f 89       	ldd	r22, Y+23	; 0x17
    2d86:	78 8d       	ldd	r23, Y+24	; 0x18
    2d88:	0e 94 d6 16 	call	0x2dac	; 0x2dac <vfprintf>
    2d8c:	ef 81       	ldd	r30, Y+7	; 0x07
    2d8e:	f8 85       	ldd	r31, Y+8	; 0x08
    2d90:	e0 0f       	add	r30, r16
    2d92:	f1 1f       	adc	r31, r17
    2d94:	10 82       	st	Z, r1
    2d96:	2e 96       	adiw	r28, 0x0e	; 14
    2d98:	0f b6       	in	r0, 0x3f	; 63
    2d9a:	f8 94       	cli
    2d9c:	de bf       	out	0x3e, r29	; 62
    2d9e:	0f be       	out	0x3f, r0	; 63
    2da0:	cd bf       	out	0x3d, r28	; 61
    2da2:	df 91       	pop	r29
    2da4:	cf 91       	pop	r28
    2da6:	1f 91       	pop	r17
    2da8:	0f 91       	pop	r16
    2daa:	08 95       	ret

00002dac <vfprintf>:
    2dac:	2f 92       	push	r2
    2dae:	3f 92       	push	r3
    2db0:	4f 92       	push	r4
    2db2:	5f 92       	push	r5
    2db4:	6f 92       	push	r6
    2db6:	7f 92       	push	r7
    2db8:	8f 92       	push	r8
    2dba:	9f 92       	push	r9
    2dbc:	af 92       	push	r10
    2dbe:	bf 92       	push	r11
    2dc0:	cf 92       	push	r12
    2dc2:	df 92       	push	r13
    2dc4:	ef 92       	push	r14
    2dc6:	ff 92       	push	r15
    2dc8:	0f 93       	push	r16
    2dca:	1f 93       	push	r17
    2dcc:	cf 93       	push	r28
    2dce:	df 93       	push	r29
    2dd0:	cd b7       	in	r28, 0x3d	; 61
    2dd2:	de b7       	in	r29, 0x3e	; 62
    2dd4:	2d 97       	sbiw	r28, 0x0d	; 13
    2dd6:	0f b6       	in	r0, 0x3f	; 63
    2dd8:	f8 94       	cli
    2dda:	de bf       	out	0x3e, r29	; 62
    2ddc:	0f be       	out	0x3f, r0	; 63
    2dde:	cd bf       	out	0x3d, r28	; 61
    2de0:	3c 01       	movw	r6, r24
    2de2:	7d 87       	std	Y+13, r23	; 0x0d
    2de4:	6c 87       	std	Y+12, r22	; 0x0c
    2de6:	5a 01       	movw	r10, r20
    2de8:	fc 01       	movw	r30, r24
    2dea:	17 82       	std	Z+7, r1	; 0x07
    2dec:	16 82       	std	Z+6, r1	; 0x06
    2dee:	83 81       	ldd	r24, Z+3	; 0x03
    2df0:	81 ff       	sbrs	r24, 1
    2df2:	c8 c1       	rjmp	.+912    	; 0x3184 <vfprintf+0x3d8>
    2df4:	2e 01       	movw	r4, r28
    2df6:	08 94       	sec
    2df8:	41 1c       	adc	r4, r1
    2dfa:	51 1c       	adc	r5, r1
    2dfc:	f3 01       	movw	r30, r6
    2dfe:	93 81       	ldd	r25, Z+3	; 0x03
    2e00:	ec 85       	ldd	r30, Y+12	; 0x0c
    2e02:	fd 85       	ldd	r31, Y+13	; 0x0d
    2e04:	93 fd       	sbrc	r25, 3
    2e06:	85 91       	lpm	r24, Z+
    2e08:	93 ff       	sbrs	r25, 3
    2e0a:	81 91       	ld	r24, Z+
    2e0c:	fd 87       	std	Y+13, r31	; 0x0d
    2e0e:	ec 87       	std	Y+12, r30	; 0x0c
    2e10:	88 23       	and	r24, r24
    2e12:	09 f4       	brne	.+2      	; 0x2e16 <vfprintf+0x6a>
    2e14:	b3 c1       	rjmp	.+870    	; 0x317c <vfprintf+0x3d0>
    2e16:	85 32       	cpi	r24, 0x25	; 37
    2e18:	41 f4       	brne	.+16     	; 0x2e2a <vfprintf+0x7e>
    2e1a:	93 fd       	sbrc	r25, 3
    2e1c:	85 91       	lpm	r24, Z+
    2e1e:	93 ff       	sbrs	r25, 3
    2e20:	81 91       	ld	r24, Z+
    2e22:	fd 87       	std	Y+13, r31	; 0x0d
    2e24:	ec 87       	std	Y+12, r30	; 0x0c
    2e26:	85 32       	cpi	r24, 0x25	; 37
    2e28:	29 f4       	brne	.+10     	; 0x2e34 <vfprintf+0x88>
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	b3 01       	movw	r22, r6
    2e2e:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <fputc>
    2e32:	e4 cf       	rjmp	.-56     	; 0x2dfc <vfprintf+0x50>
    2e34:	ff 24       	eor	r15, r15
    2e36:	ee 24       	eor	r14, r14
    2e38:	10 e0       	ldi	r17, 0x00	; 0
    2e3a:	10 32       	cpi	r17, 0x20	; 32
    2e3c:	b0 f4       	brcc	.+44     	; 0x2e6a <vfprintf+0xbe>
    2e3e:	8b 32       	cpi	r24, 0x2B	; 43
    2e40:	69 f0       	breq	.+26     	; 0x2e5c <vfprintf+0xb0>
    2e42:	8c 32       	cpi	r24, 0x2C	; 44
    2e44:	28 f4       	brcc	.+10     	; 0x2e50 <vfprintf+0xa4>
    2e46:	80 32       	cpi	r24, 0x20	; 32
    2e48:	51 f0       	breq	.+20     	; 0x2e5e <vfprintf+0xb2>
    2e4a:	83 32       	cpi	r24, 0x23	; 35
    2e4c:	71 f4       	brne	.+28     	; 0x2e6a <vfprintf+0xbe>
    2e4e:	0b c0       	rjmp	.+22     	; 0x2e66 <vfprintf+0xba>
    2e50:	8d 32       	cpi	r24, 0x2D	; 45
    2e52:	39 f0       	breq	.+14     	; 0x2e62 <vfprintf+0xb6>
    2e54:	80 33       	cpi	r24, 0x30	; 48
    2e56:	49 f4       	brne	.+18     	; 0x2e6a <vfprintf+0xbe>
    2e58:	11 60       	ori	r17, 0x01	; 1
    2e5a:	2c c0       	rjmp	.+88     	; 0x2eb4 <vfprintf+0x108>
    2e5c:	12 60       	ori	r17, 0x02	; 2
    2e5e:	14 60       	ori	r17, 0x04	; 4
    2e60:	29 c0       	rjmp	.+82     	; 0x2eb4 <vfprintf+0x108>
    2e62:	18 60       	ori	r17, 0x08	; 8
    2e64:	27 c0       	rjmp	.+78     	; 0x2eb4 <vfprintf+0x108>
    2e66:	10 61       	ori	r17, 0x10	; 16
    2e68:	25 c0       	rjmp	.+74     	; 0x2eb4 <vfprintf+0x108>
    2e6a:	17 fd       	sbrc	r17, 7
    2e6c:	2e c0       	rjmp	.+92     	; 0x2eca <vfprintf+0x11e>
    2e6e:	28 2f       	mov	r18, r24
    2e70:	20 53       	subi	r18, 0x30	; 48
    2e72:	2a 30       	cpi	r18, 0x0A	; 10
    2e74:	98 f4       	brcc	.+38     	; 0x2e9c <vfprintf+0xf0>
    2e76:	16 ff       	sbrs	r17, 6
    2e78:	08 c0       	rjmp	.+16     	; 0x2e8a <vfprintf+0xde>
    2e7a:	8f 2d       	mov	r24, r15
    2e7c:	88 0f       	add	r24, r24
    2e7e:	f8 2e       	mov	r15, r24
    2e80:	ff 0c       	add	r15, r15
    2e82:	ff 0c       	add	r15, r15
    2e84:	f8 0e       	add	r15, r24
    2e86:	f2 0e       	add	r15, r18
    2e88:	15 c0       	rjmp	.+42     	; 0x2eb4 <vfprintf+0x108>
    2e8a:	8e 2d       	mov	r24, r14
    2e8c:	88 0f       	add	r24, r24
    2e8e:	e8 2e       	mov	r14, r24
    2e90:	ee 0c       	add	r14, r14
    2e92:	ee 0c       	add	r14, r14
    2e94:	e8 0e       	add	r14, r24
    2e96:	e2 0e       	add	r14, r18
    2e98:	10 62       	ori	r17, 0x20	; 32
    2e9a:	0c c0       	rjmp	.+24     	; 0x2eb4 <vfprintf+0x108>
    2e9c:	8e 32       	cpi	r24, 0x2E	; 46
    2e9e:	21 f4       	brne	.+8      	; 0x2ea8 <vfprintf+0xfc>
    2ea0:	16 fd       	sbrc	r17, 6
    2ea2:	6c c1       	rjmp	.+728    	; 0x317c <vfprintf+0x3d0>
    2ea4:	10 64       	ori	r17, 0x40	; 64
    2ea6:	06 c0       	rjmp	.+12     	; 0x2eb4 <vfprintf+0x108>
    2ea8:	8c 36       	cpi	r24, 0x6C	; 108
    2eaa:	11 f4       	brne	.+4      	; 0x2eb0 <vfprintf+0x104>
    2eac:	10 68       	ori	r17, 0x80	; 128
    2eae:	02 c0       	rjmp	.+4      	; 0x2eb4 <vfprintf+0x108>
    2eb0:	88 36       	cpi	r24, 0x68	; 104
    2eb2:	59 f4       	brne	.+22     	; 0x2eca <vfprintf+0x11e>
    2eb4:	ec 85       	ldd	r30, Y+12	; 0x0c
    2eb6:	fd 85       	ldd	r31, Y+13	; 0x0d
    2eb8:	93 fd       	sbrc	r25, 3
    2eba:	85 91       	lpm	r24, Z+
    2ebc:	93 ff       	sbrs	r25, 3
    2ebe:	81 91       	ld	r24, Z+
    2ec0:	fd 87       	std	Y+13, r31	; 0x0d
    2ec2:	ec 87       	std	Y+12, r30	; 0x0c
    2ec4:	88 23       	and	r24, r24
    2ec6:	09 f0       	breq	.+2      	; 0x2eca <vfprintf+0x11e>
    2ec8:	b8 cf       	rjmp	.-144    	; 0x2e3a <vfprintf+0x8e>
    2eca:	98 2f       	mov	r25, r24
    2ecc:	95 54       	subi	r25, 0x45	; 69
    2ece:	93 30       	cpi	r25, 0x03	; 3
    2ed0:	18 f0       	brcs	.+6      	; 0x2ed8 <vfprintf+0x12c>
    2ed2:	90 52       	subi	r25, 0x20	; 32
    2ed4:	93 30       	cpi	r25, 0x03	; 3
    2ed6:	38 f4       	brcc	.+14     	; 0x2ee6 <vfprintf+0x13a>
    2ed8:	24 e0       	ldi	r18, 0x04	; 4
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	a2 0e       	add	r10, r18
    2ede:	b3 1e       	adc	r11, r19
    2ee0:	3f e3       	ldi	r19, 0x3F	; 63
    2ee2:	39 83       	std	Y+1, r19	; 0x01
    2ee4:	0f c0       	rjmp	.+30     	; 0x2f04 <vfprintf+0x158>
    2ee6:	83 36       	cpi	r24, 0x63	; 99
    2ee8:	31 f0       	breq	.+12     	; 0x2ef6 <vfprintf+0x14a>
    2eea:	83 37       	cpi	r24, 0x73	; 115
    2eec:	81 f0       	breq	.+32     	; 0x2f0e <vfprintf+0x162>
    2eee:	83 35       	cpi	r24, 0x53	; 83
    2ef0:	09 f0       	breq	.+2      	; 0x2ef4 <vfprintf+0x148>
    2ef2:	5a c0       	rjmp	.+180    	; 0x2fa8 <vfprintf+0x1fc>
    2ef4:	22 c0       	rjmp	.+68     	; 0x2f3a <vfprintf+0x18e>
    2ef6:	f5 01       	movw	r30, r10
    2ef8:	80 81       	ld	r24, Z
    2efa:	89 83       	std	Y+1, r24	; 0x01
    2efc:	22 e0       	ldi	r18, 0x02	; 2
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	a2 0e       	add	r10, r18
    2f02:	b3 1e       	adc	r11, r19
    2f04:	21 e0       	ldi	r18, 0x01	; 1
    2f06:	c2 2e       	mov	r12, r18
    2f08:	d1 2c       	mov	r13, r1
    2f0a:	42 01       	movw	r8, r4
    2f0c:	14 c0       	rjmp	.+40     	; 0x2f36 <vfprintf+0x18a>
    2f0e:	92 e0       	ldi	r25, 0x02	; 2
    2f10:	29 2e       	mov	r2, r25
    2f12:	31 2c       	mov	r3, r1
    2f14:	2a 0c       	add	r2, r10
    2f16:	3b 1c       	adc	r3, r11
    2f18:	f5 01       	movw	r30, r10
    2f1a:	80 80       	ld	r8, Z
    2f1c:	91 80       	ldd	r9, Z+1	; 0x01
    2f1e:	16 ff       	sbrs	r17, 6
    2f20:	03 c0       	rjmp	.+6      	; 0x2f28 <vfprintf+0x17c>
    2f22:	6f 2d       	mov	r22, r15
    2f24:	70 e0       	ldi	r23, 0x00	; 0
    2f26:	02 c0       	rjmp	.+4      	; 0x2f2c <vfprintf+0x180>
    2f28:	6f ef       	ldi	r22, 0xFF	; 255
    2f2a:	7f ef       	ldi	r23, 0xFF	; 255
    2f2c:	c4 01       	movw	r24, r8
    2f2e:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <strnlen>
    2f32:	6c 01       	movw	r12, r24
    2f34:	51 01       	movw	r10, r2
    2f36:	1f 77       	andi	r17, 0x7F	; 127
    2f38:	15 c0       	rjmp	.+42     	; 0x2f64 <vfprintf+0x1b8>
    2f3a:	82 e0       	ldi	r24, 0x02	; 2
    2f3c:	28 2e       	mov	r2, r24
    2f3e:	31 2c       	mov	r3, r1
    2f40:	2a 0c       	add	r2, r10
    2f42:	3b 1c       	adc	r3, r11
    2f44:	f5 01       	movw	r30, r10
    2f46:	80 80       	ld	r8, Z
    2f48:	91 80       	ldd	r9, Z+1	; 0x01
    2f4a:	16 ff       	sbrs	r17, 6
    2f4c:	03 c0       	rjmp	.+6      	; 0x2f54 <vfprintf+0x1a8>
    2f4e:	6f 2d       	mov	r22, r15
    2f50:	70 e0       	ldi	r23, 0x00	; 0
    2f52:	02 c0       	rjmp	.+4      	; 0x2f58 <vfprintf+0x1ac>
    2f54:	6f ef       	ldi	r22, 0xFF	; 255
    2f56:	7f ef       	ldi	r23, 0xFF	; 255
    2f58:	c4 01       	movw	r24, r8
    2f5a:	0e 94 dd 18 	call	0x31ba	; 0x31ba <strnlen_P>
    2f5e:	6c 01       	movw	r12, r24
    2f60:	10 68       	ori	r17, 0x80	; 128
    2f62:	51 01       	movw	r10, r2
    2f64:	13 fd       	sbrc	r17, 3
    2f66:	1c c0       	rjmp	.+56     	; 0x2fa0 <vfprintf+0x1f4>
    2f68:	06 c0       	rjmp	.+12     	; 0x2f76 <vfprintf+0x1ca>
    2f6a:	80 e2       	ldi	r24, 0x20	; 32
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	b3 01       	movw	r22, r6
    2f70:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <fputc>
    2f74:	ea 94       	dec	r14
    2f76:	8e 2d       	mov	r24, r14
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	c8 16       	cp	r12, r24
    2f7c:	d9 06       	cpc	r13, r25
    2f7e:	a8 f3       	brcs	.-22     	; 0x2f6a <vfprintf+0x1be>
    2f80:	0f c0       	rjmp	.+30     	; 0x2fa0 <vfprintf+0x1f4>
    2f82:	f4 01       	movw	r30, r8
    2f84:	17 fd       	sbrc	r17, 7
    2f86:	85 91       	lpm	r24, Z+
    2f88:	17 ff       	sbrs	r17, 7
    2f8a:	81 91       	ld	r24, Z+
    2f8c:	4f 01       	movw	r8, r30
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	b3 01       	movw	r22, r6
    2f92:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <fputc>
    2f96:	e1 10       	cpse	r14, r1
    2f98:	ea 94       	dec	r14
    2f9a:	08 94       	sec
    2f9c:	c1 08       	sbc	r12, r1
    2f9e:	d1 08       	sbc	r13, r1
    2fa0:	c1 14       	cp	r12, r1
    2fa2:	d1 04       	cpc	r13, r1
    2fa4:	71 f7       	brne	.-36     	; 0x2f82 <vfprintf+0x1d6>
    2fa6:	e7 c0       	rjmp	.+462    	; 0x3176 <vfprintf+0x3ca>
    2fa8:	84 36       	cpi	r24, 0x64	; 100
    2faa:	11 f0       	breq	.+4      	; 0x2fb0 <vfprintf+0x204>
    2fac:	89 36       	cpi	r24, 0x69	; 105
    2fae:	51 f5       	brne	.+84     	; 0x3004 <vfprintf+0x258>
    2fb0:	f5 01       	movw	r30, r10
    2fb2:	17 ff       	sbrs	r17, 7
    2fb4:	07 c0       	rjmp	.+14     	; 0x2fc4 <vfprintf+0x218>
    2fb6:	80 81       	ld	r24, Z
    2fb8:	91 81       	ldd	r25, Z+1	; 0x01
    2fba:	a2 81       	ldd	r26, Z+2	; 0x02
    2fbc:	b3 81       	ldd	r27, Z+3	; 0x03
    2fbe:	24 e0       	ldi	r18, 0x04	; 4
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	08 c0       	rjmp	.+16     	; 0x2fd4 <vfprintf+0x228>
    2fc4:	80 81       	ld	r24, Z
    2fc6:	91 81       	ldd	r25, Z+1	; 0x01
    2fc8:	aa 27       	eor	r26, r26
    2fca:	97 fd       	sbrc	r25, 7
    2fcc:	a0 95       	com	r26
    2fce:	ba 2f       	mov	r27, r26
    2fd0:	22 e0       	ldi	r18, 0x02	; 2
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	a2 0e       	add	r10, r18
    2fd6:	b3 1e       	adc	r11, r19
    2fd8:	01 2f       	mov	r16, r17
    2fda:	0f 76       	andi	r16, 0x6F	; 111
    2fdc:	b7 ff       	sbrs	r27, 7
    2fde:	08 c0       	rjmp	.+16     	; 0x2ff0 <vfprintf+0x244>
    2fe0:	b0 95       	com	r27
    2fe2:	a0 95       	com	r26
    2fe4:	90 95       	com	r25
    2fe6:	81 95       	neg	r24
    2fe8:	9f 4f       	sbci	r25, 0xFF	; 255
    2fea:	af 4f       	sbci	r26, 0xFF	; 255
    2fec:	bf 4f       	sbci	r27, 0xFF	; 255
    2fee:	00 68       	ori	r16, 0x80	; 128
    2ff0:	bc 01       	movw	r22, r24
    2ff2:	cd 01       	movw	r24, r26
    2ff4:	a2 01       	movw	r20, r4
    2ff6:	2a e0       	ldi	r18, 0x0A	; 10
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	0e 94 1f 19 	call	0x323e	; 0x323e <__ultoa_invert>
    2ffe:	d8 2e       	mov	r13, r24
    3000:	d4 18       	sub	r13, r4
    3002:	3f c0       	rjmp	.+126    	; 0x3082 <vfprintf+0x2d6>
    3004:	85 37       	cpi	r24, 0x75	; 117
    3006:	21 f4       	brne	.+8      	; 0x3010 <vfprintf+0x264>
    3008:	1f 7e       	andi	r17, 0xEF	; 239
    300a:	2a e0       	ldi	r18, 0x0A	; 10
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	20 c0       	rjmp	.+64     	; 0x3050 <vfprintf+0x2a4>
    3010:	19 7f       	andi	r17, 0xF9	; 249
    3012:	8f 36       	cpi	r24, 0x6F	; 111
    3014:	a9 f0       	breq	.+42     	; 0x3040 <vfprintf+0x294>
    3016:	80 37       	cpi	r24, 0x70	; 112
    3018:	20 f4       	brcc	.+8      	; 0x3022 <vfprintf+0x276>
    301a:	88 35       	cpi	r24, 0x58	; 88
    301c:	09 f0       	breq	.+2      	; 0x3020 <vfprintf+0x274>
    301e:	ae c0       	rjmp	.+348    	; 0x317c <vfprintf+0x3d0>
    3020:	0b c0       	rjmp	.+22     	; 0x3038 <vfprintf+0x28c>
    3022:	80 37       	cpi	r24, 0x70	; 112
    3024:	21 f0       	breq	.+8      	; 0x302e <vfprintf+0x282>
    3026:	88 37       	cpi	r24, 0x78	; 120
    3028:	09 f0       	breq	.+2      	; 0x302c <vfprintf+0x280>
    302a:	a8 c0       	rjmp	.+336    	; 0x317c <vfprintf+0x3d0>
    302c:	01 c0       	rjmp	.+2      	; 0x3030 <vfprintf+0x284>
    302e:	10 61       	ori	r17, 0x10	; 16
    3030:	14 ff       	sbrs	r17, 4
    3032:	09 c0       	rjmp	.+18     	; 0x3046 <vfprintf+0x29a>
    3034:	14 60       	ori	r17, 0x04	; 4
    3036:	07 c0       	rjmp	.+14     	; 0x3046 <vfprintf+0x29a>
    3038:	14 ff       	sbrs	r17, 4
    303a:	08 c0       	rjmp	.+16     	; 0x304c <vfprintf+0x2a0>
    303c:	16 60       	ori	r17, 0x06	; 6
    303e:	06 c0       	rjmp	.+12     	; 0x304c <vfprintf+0x2a0>
    3040:	28 e0       	ldi	r18, 0x08	; 8
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	05 c0       	rjmp	.+10     	; 0x3050 <vfprintf+0x2a4>
    3046:	20 e1       	ldi	r18, 0x10	; 16
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	02 c0       	rjmp	.+4      	; 0x3050 <vfprintf+0x2a4>
    304c:	20 e1       	ldi	r18, 0x10	; 16
    304e:	32 e0       	ldi	r19, 0x02	; 2
    3050:	f5 01       	movw	r30, r10
    3052:	17 ff       	sbrs	r17, 7
    3054:	07 c0       	rjmp	.+14     	; 0x3064 <vfprintf+0x2b8>
    3056:	60 81       	ld	r22, Z
    3058:	71 81       	ldd	r23, Z+1	; 0x01
    305a:	82 81       	ldd	r24, Z+2	; 0x02
    305c:	93 81       	ldd	r25, Z+3	; 0x03
    305e:	44 e0       	ldi	r20, 0x04	; 4
    3060:	50 e0       	ldi	r21, 0x00	; 0
    3062:	06 c0       	rjmp	.+12     	; 0x3070 <vfprintf+0x2c4>
    3064:	60 81       	ld	r22, Z
    3066:	71 81       	ldd	r23, Z+1	; 0x01
    3068:	80 e0       	ldi	r24, 0x00	; 0
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	42 e0       	ldi	r20, 0x02	; 2
    306e:	50 e0       	ldi	r21, 0x00	; 0
    3070:	a4 0e       	add	r10, r20
    3072:	b5 1e       	adc	r11, r21
    3074:	a2 01       	movw	r20, r4
    3076:	0e 94 1f 19 	call	0x323e	; 0x323e <__ultoa_invert>
    307a:	d8 2e       	mov	r13, r24
    307c:	d4 18       	sub	r13, r4
    307e:	01 2f       	mov	r16, r17
    3080:	0f 77       	andi	r16, 0x7F	; 127
    3082:	06 ff       	sbrs	r16, 6
    3084:	09 c0       	rjmp	.+18     	; 0x3098 <vfprintf+0x2ec>
    3086:	0e 7f       	andi	r16, 0xFE	; 254
    3088:	df 14       	cp	r13, r15
    308a:	30 f4       	brcc	.+12     	; 0x3098 <vfprintf+0x2ec>
    308c:	04 ff       	sbrs	r16, 4
    308e:	06 c0       	rjmp	.+12     	; 0x309c <vfprintf+0x2f0>
    3090:	02 fd       	sbrc	r16, 2
    3092:	04 c0       	rjmp	.+8      	; 0x309c <vfprintf+0x2f0>
    3094:	0f 7e       	andi	r16, 0xEF	; 239
    3096:	02 c0       	rjmp	.+4      	; 0x309c <vfprintf+0x2f0>
    3098:	1d 2d       	mov	r17, r13
    309a:	01 c0       	rjmp	.+2      	; 0x309e <vfprintf+0x2f2>
    309c:	1f 2d       	mov	r17, r15
    309e:	80 2f       	mov	r24, r16
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	04 ff       	sbrs	r16, 4
    30a4:	0c c0       	rjmp	.+24     	; 0x30be <vfprintf+0x312>
    30a6:	fe 01       	movw	r30, r28
    30a8:	ed 0d       	add	r30, r13
    30aa:	f1 1d       	adc	r31, r1
    30ac:	20 81       	ld	r18, Z
    30ae:	20 33       	cpi	r18, 0x30	; 48
    30b0:	11 f4       	brne	.+4      	; 0x30b6 <vfprintf+0x30a>
    30b2:	09 7e       	andi	r16, 0xE9	; 233
    30b4:	09 c0       	rjmp	.+18     	; 0x30c8 <vfprintf+0x31c>
    30b6:	02 ff       	sbrs	r16, 2
    30b8:	06 c0       	rjmp	.+12     	; 0x30c6 <vfprintf+0x31a>
    30ba:	1e 5f       	subi	r17, 0xFE	; 254
    30bc:	05 c0       	rjmp	.+10     	; 0x30c8 <vfprintf+0x31c>
    30be:	86 78       	andi	r24, 0x86	; 134
    30c0:	90 70       	andi	r25, 0x00	; 0
    30c2:	00 97       	sbiw	r24, 0x00	; 0
    30c4:	09 f0       	breq	.+2      	; 0x30c8 <vfprintf+0x31c>
    30c6:	1f 5f       	subi	r17, 0xFF	; 255
    30c8:	80 2e       	mov	r8, r16
    30ca:	99 24       	eor	r9, r9
    30cc:	03 fd       	sbrc	r16, 3
    30ce:	12 c0       	rjmp	.+36     	; 0x30f4 <vfprintf+0x348>
    30d0:	00 ff       	sbrs	r16, 0
    30d2:	0d c0       	rjmp	.+26     	; 0x30ee <vfprintf+0x342>
    30d4:	fd 2c       	mov	r15, r13
    30d6:	1e 15       	cp	r17, r14
    30d8:	50 f4       	brcc	.+20     	; 0x30ee <vfprintf+0x342>
    30da:	fe 0c       	add	r15, r14
    30dc:	f1 1a       	sub	r15, r17
    30de:	1e 2d       	mov	r17, r14
    30e0:	06 c0       	rjmp	.+12     	; 0x30ee <vfprintf+0x342>
    30e2:	80 e2       	ldi	r24, 0x20	; 32
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	b3 01       	movw	r22, r6
    30e8:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <fputc>
    30ec:	1f 5f       	subi	r17, 0xFF	; 255
    30ee:	1e 15       	cp	r17, r14
    30f0:	c0 f3       	brcs	.-16     	; 0x30e2 <vfprintf+0x336>
    30f2:	04 c0       	rjmp	.+8      	; 0x30fc <vfprintf+0x350>
    30f4:	1e 15       	cp	r17, r14
    30f6:	10 f4       	brcc	.+4      	; 0x30fc <vfprintf+0x350>
    30f8:	e1 1a       	sub	r14, r17
    30fa:	01 c0       	rjmp	.+2      	; 0x30fe <vfprintf+0x352>
    30fc:	ee 24       	eor	r14, r14
    30fe:	84 fe       	sbrs	r8, 4
    3100:	0f c0       	rjmp	.+30     	; 0x3120 <vfprintf+0x374>
    3102:	80 e3       	ldi	r24, 0x30	; 48
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	b3 01       	movw	r22, r6
    3108:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <fputc>
    310c:	82 fe       	sbrs	r8, 2
    310e:	1f c0       	rjmp	.+62     	; 0x314e <vfprintf+0x3a2>
    3110:	81 fe       	sbrs	r8, 1
    3112:	03 c0       	rjmp	.+6      	; 0x311a <vfprintf+0x36e>
    3114:	88 e5       	ldi	r24, 0x58	; 88
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	10 c0       	rjmp	.+32     	; 0x313a <vfprintf+0x38e>
    311a:	88 e7       	ldi	r24, 0x78	; 120
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	0d c0       	rjmp	.+26     	; 0x313a <vfprintf+0x38e>
    3120:	c4 01       	movw	r24, r8
    3122:	86 78       	andi	r24, 0x86	; 134
    3124:	90 70       	andi	r25, 0x00	; 0
    3126:	00 97       	sbiw	r24, 0x00	; 0
    3128:	91 f0       	breq	.+36     	; 0x314e <vfprintf+0x3a2>
    312a:	81 fc       	sbrc	r8, 1
    312c:	02 c0       	rjmp	.+4      	; 0x3132 <vfprintf+0x386>
    312e:	80 e2       	ldi	r24, 0x20	; 32
    3130:	01 c0       	rjmp	.+2      	; 0x3134 <vfprintf+0x388>
    3132:	8b e2       	ldi	r24, 0x2B	; 43
    3134:	07 fd       	sbrc	r16, 7
    3136:	8d e2       	ldi	r24, 0x2D	; 45
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	b3 01       	movw	r22, r6
    313c:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <fputc>
    3140:	06 c0       	rjmp	.+12     	; 0x314e <vfprintf+0x3a2>
    3142:	80 e3       	ldi	r24, 0x30	; 48
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	b3 01       	movw	r22, r6
    3148:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <fputc>
    314c:	fa 94       	dec	r15
    314e:	df 14       	cp	r13, r15
    3150:	c0 f3       	brcs	.-16     	; 0x3142 <vfprintf+0x396>
    3152:	da 94       	dec	r13
    3154:	f2 01       	movw	r30, r4
    3156:	ed 0d       	add	r30, r13
    3158:	f1 1d       	adc	r31, r1
    315a:	80 81       	ld	r24, Z
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	b3 01       	movw	r22, r6
    3160:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <fputc>
    3164:	dd 20       	and	r13, r13
    3166:	a9 f7       	brne	.-22     	; 0x3152 <vfprintf+0x3a6>
    3168:	06 c0       	rjmp	.+12     	; 0x3176 <vfprintf+0x3ca>
    316a:	80 e2       	ldi	r24, 0x20	; 32
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	b3 01       	movw	r22, r6
    3170:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <fputc>
    3174:	ea 94       	dec	r14
    3176:	ee 20       	and	r14, r14
    3178:	c1 f7       	brne	.-16     	; 0x316a <vfprintf+0x3be>
    317a:	40 ce       	rjmp	.-896    	; 0x2dfc <vfprintf+0x50>
    317c:	f3 01       	movw	r30, r6
    317e:	86 81       	ldd	r24, Z+6	; 0x06
    3180:	97 81       	ldd	r25, Z+7	; 0x07
    3182:	02 c0       	rjmp	.+4      	; 0x3188 <vfprintf+0x3dc>
    3184:	8f ef       	ldi	r24, 0xFF	; 255
    3186:	9f ef       	ldi	r25, 0xFF	; 255
    3188:	2d 96       	adiw	r28, 0x0d	; 13
    318a:	0f b6       	in	r0, 0x3f	; 63
    318c:	f8 94       	cli
    318e:	de bf       	out	0x3e, r29	; 62
    3190:	0f be       	out	0x3f, r0	; 63
    3192:	cd bf       	out	0x3d, r28	; 61
    3194:	df 91       	pop	r29
    3196:	cf 91       	pop	r28
    3198:	1f 91       	pop	r17
    319a:	0f 91       	pop	r16
    319c:	ff 90       	pop	r15
    319e:	ef 90       	pop	r14
    31a0:	df 90       	pop	r13
    31a2:	cf 90       	pop	r12
    31a4:	bf 90       	pop	r11
    31a6:	af 90       	pop	r10
    31a8:	9f 90       	pop	r9
    31aa:	8f 90       	pop	r8
    31ac:	7f 90       	pop	r7
    31ae:	6f 90       	pop	r6
    31b0:	5f 90       	pop	r5
    31b2:	4f 90       	pop	r4
    31b4:	3f 90       	pop	r3
    31b6:	2f 90       	pop	r2
    31b8:	08 95       	ret

000031ba <strnlen_P>:
    31ba:	fc 01       	movw	r30, r24
    31bc:	05 90       	lpm	r0, Z+
    31be:	61 50       	subi	r22, 0x01	; 1
    31c0:	70 40       	sbci	r23, 0x00	; 0
    31c2:	01 10       	cpse	r0, r1
    31c4:	d8 f7       	brcc	.-10     	; 0x31bc <strnlen_P+0x2>
    31c6:	80 95       	com	r24
    31c8:	90 95       	com	r25
    31ca:	8e 0f       	add	r24, r30
    31cc:	9f 1f       	adc	r25, r31
    31ce:	08 95       	ret

000031d0 <strnlen>:
    31d0:	fc 01       	movw	r30, r24
    31d2:	61 50       	subi	r22, 0x01	; 1
    31d4:	70 40       	sbci	r23, 0x00	; 0
    31d6:	01 90       	ld	r0, Z+
    31d8:	01 10       	cpse	r0, r1
    31da:	d8 f7       	brcc	.-10     	; 0x31d2 <strnlen+0x2>
    31dc:	80 95       	com	r24
    31de:	90 95       	com	r25
    31e0:	8e 0f       	add	r24, r30
    31e2:	9f 1f       	adc	r25, r31
    31e4:	08 95       	ret

000031e6 <fputc>:
    31e6:	0f 93       	push	r16
    31e8:	1f 93       	push	r17
    31ea:	cf 93       	push	r28
    31ec:	df 93       	push	r29
    31ee:	8c 01       	movw	r16, r24
    31f0:	eb 01       	movw	r28, r22
    31f2:	8b 81       	ldd	r24, Y+3	; 0x03
    31f4:	81 ff       	sbrs	r24, 1
    31f6:	1b c0       	rjmp	.+54     	; 0x322e <fputc+0x48>
    31f8:	82 ff       	sbrs	r24, 2
    31fa:	0d c0       	rjmp	.+26     	; 0x3216 <fputc+0x30>
    31fc:	2e 81       	ldd	r18, Y+6	; 0x06
    31fe:	3f 81       	ldd	r19, Y+7	; 0x07
    3200:	8c 81       	ldd	r24, Y+4	; 0x04
    3202:	9d 81       	ldd	r25, Y+5	; 0x05
    3204:	28 17       	cp	r18, r24
    3206:	39 07       	cpc	r19, r25
    3208:	64 f4       	brge	.+24     	; 0x3222 <fputc+0x3c>
    320a:	e8 81       	ld	r30, Y
    320c:	f9 81       	ldd	r31, Y+1	; 0x01
    320e:	01 93       	st	Z+, r16
    3210:	f9 83       	std	Y+1, r31	; 0x01
    3212:	e8 83       	st	Y, r30
    3214:	06 c0       	rjmp	.+12     	; 0x3222 <fputc+0x3c>
    3216:	e8 85       	ldd	r30, Y+8	; 0x08
    3218:	f9 85       	ldd	r31, Y+9	; 0x09
    321a:	80 2f       	mov	r24, r16
    321c:	09 95       	icall
    321e:	00 97       	sbiw	r24, 0x00	; 0
    3220:	31 f4       	brne	.+12     	; 0x322e <fputc+0x48>
    3222:	8e 81       	ldd	r24, Y+6	; 0x06
    3224:	9f 81       	ldd	r25, Y+7	; 0x07
    3226:	01 96       	adiw	r24, 0x01	; 1
    3228:	9f 83       	std	Y+7, r25	; 0x07
    322a:	8e 83       	std	Y+6, r24	; 0x06
    322c:	02 c0       	rjmp	.+4      	; 0x3232 <fputc+0x4c>
    322e:	0f ef       	ldi	r16, 0xFF	; 255
    3230:	1f ef       	ldi	r17, 0xFF	; 255
    3232:	c8 01       	movw	r24, r16
    3234:	df 91       	pop	r29
    3236:	cf 91       	pop	r28
    3238:	1f 91       	pop	r17
    323a:	0f 91       	pop	r16
    323c:	08 95       	ret

0000323e <__ultoa_invert>:
    323e:	fa 01       	movw	r30, r20
    3240:	aa 27       	eor	r26, r26
    3242:	28 30       	cpi	r18, 0x08	; 8
    3244:	51 f1       	breq	.+84     	; 0x329a <__ultoa_invert+0x5c>
    3246:	20 31       	cpi	r18, 0x10	; 16
    3248:	81 f1       	breq	.+96     	; 0x32aa <__ultoa_invert+0x6c>
    324a:	e8 94       	clt
    324c:	6f 93       	push	r22
    324e:	6e 7f       	andi	r22, 0xFE	; 254
    3250:	6e 5f       	subi	r22, 0xFE	; 254
    3252:	7f 4f       	sbci	r23, 0xFF	; 255
    3254:	8f 4f       	sbci	r24, 0xFF	; 255
    3256:	9f 4f       	sbci	r25, 0xFF	; 255
    3258:	af 4f       	sbci	r26, 0xFF	; 255
    325a:	b1 e0       	ldi	r27, 0x01	; 1
    325c:	3e d0       	rcall	.+124    	; 0x32da <__ultoa_invert+0x9c>
    325e:	b4 e0       	ldi	r27, 0x04	; 4
    3260:	3c d0       	rcall	.+120    	; 0x32da <__ultoa_invert+0x9c>
    3262:	67 0f       	add	r22, r23
    3264:	78 1f       	adc	r23, r24
    3266:	89 1f       	adc	r24, r25
    3268:	9a 1f       	adc	r25, r26
    326a:	a1 1d       	adc	r26, r1
    326c:	68 0f       	add	r22, r24
    326e:	79 1f       	adc	r23, r25
    3270:	8a 1f       	adc	r24, r26
    3272:	91 1d       	adc	r25, r1
    3274:	a1 1d       	adc	r26, r1
    3276:	6a 0f       	add	r22, r26
    3278:	71 1d       	adc	r23, r1
    327a:	81 1d       	adc	r24, r1
    327c:	91 1d       	adc	r25, r1
    327e:	a1 1d       	adc	r26, r1
    3280:	20 d0       	rcall	.+64     	; 0x32c2 <__ultoa_invert+0x84>
    3282:	09 f4       	brne	.+2      	; 0x3286 <__ultoa_invert+0x48>
    3284:	68 94       	set
    3286:	3f 91       	pop	r19
    3288:	2a e0       	ldi	r18, 0x0A	; 10
    328a:	26 9f       	mul	r18, r22
    328c:	11 24       	eor	r1, r1
    328e:	30 19       	sub	r19, r0
    3290:	30 5d       	subi	r19, 0xD0	; 208
    3292:	31 93       	st	Z+, r19
    3294:	de f6       	brtc	.-74     	; 0x324c <__ultoa_invert+0xe>
    3296:	cf 01       	movw	r24, r30
    3298:	08 95       	ret
    329a:	46 2f       	mov	r20, r22
    329c:	47 70       	andi	r20, 0x07	; 7
    329e:	40 5d       	subi	r20, 0xD0	; 208
    32a0:	41 93       	st	Z+, r20
    32a2:	b3 e0       	ldi	r27, 0x03	; 3
    32a4:	0f d0       	rcall	.+30     	; 0x32c4 <__ultoa_invert+0x86>
    32a6:	c9 f7       	brne	.-14     	; 0x329a <__ultoa_invert+0x5c>
    32a8:	f6 cf       	rjmp	.-20     	; 0x3296 <__ultoa_invert+0x58>
    32aa:	46 2f       	mov	r20, r22
    32ac:	4f 70       	andi	r20, 0x0F	; 15
    32ae:	40 5d       	subi	r20, 0xD0	; 208
    32b0:	4a 33       	cpi	r20, 0x3A	; 58
    32b2:	18 f0       	brcs	.+6      	; 0x32ba <__ultoa_invert+0x7c>
    32b4:	49 5d       	subi	r20, 0xD9	; 217
    32b6:	31 fd       	sbrc	r19, 1
    32b8:	40 52       	subi	r20, 0x20	; 32
    32ba:	41 93       	st	Z+, r20
    32bc:	02 d0       	rcall	.+4      	; 0x32c2 <__ultoa_invert+0x84>
    32be:	a9 f7       	brne	.-22     	; 0x32aa <__ultoa_invert+0x6c>
    32c0:	ea cf       	rjmp	.-44     	; 0x3296 <__ultoa_invert+0x58>
    32c2:	b4 e0       	ldi	r27, 0x04	; 4
    32c4:	a6 95       	lsr	r26
    32c6:	97 95       	ror	r25
    32c8:	87 95       	ror	r24
    32ca:	77 95       	ror	r23
    32cc:	67 95       	ror	r22
    32ce:	ba 95       	dec	r27
    32d0:	c9 f7       	brne	.-14     	; 0x32c4 <__ultoa_invert+0x86>
    32d2:	00 97       	sbiw	r24, 0x00	; 0
    32d4:	61 05       	cpc	r22, r1
    32d6:	71 05       	cpc	r23, r1
    32d8:	08 95       	ret
    32da:	9b 01       	movw	r18, r22
    32dc:	ac 01       	movw	r20, r24
    32de:	0a 2e       	mov	r0, r26
    32e0:	06 94       	lsr	r0
    32e2:	57 95       	ror	r21
    32e4:	47 95       	ror	r20
    32e6:	37 95       	ror	r19
    32e8:	27 95       	ror	r18
    32ea:	ba 95       	dec	r27
    32ec:	c9 f7       	brne	.-14     	; 0x32e0 <__ultoa_invert+0xa2>
    32ee:	62 0f       	add	r22, r18
    32f0:	73 1f       	adc	r23, r19
    32f2:	84 1f       	adc	r24, r20
    32f4:	95 1f       	adc	r25, r21
    32f6:	a0 1d       	adc	r26, r0
    32f8:	08 95       	ret

000032fa <_exit>:
    32fa:	f8 94       	cli

000032fc <__stop_program>:
    32fc:	ff cf       	rjmp	.-2      	; 0x32fc <__stop_program>
