
SMO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000017a  00800100  00003dae  00003e42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003dae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000060  0080027a  0080027a  00003fbc  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00003fbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  00004c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000248  00000000  00000000  00004df8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003e9c  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ff5  00000000  00000000  00008edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a8b  00000000  00000000  00009ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000af4  00000000  00000000  0000b95c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001fb0  00000000  00000000  0000c450  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000281b  00000000  00000000  0000e400  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00010c1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b2 00 	jmp	0x164	; 0x164 <__ctors_end>
       4:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
       8:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
       c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      10:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      14:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      18:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      1c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      20:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      24:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      28:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      2c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      30:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      34:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      38:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      3c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      40:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__vector_16>
      44:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      48:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      4c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      50:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      54:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      58:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      5c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      60:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      64:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      68:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      6c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      70:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      74:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      78:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      7c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      80:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      84:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      88:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      8c:	22 08       	sbc	r2, r2
      8e:	f1 08       	sbc	r15, r1
      90:	29 08       	sbc	r2, r9
      92:	30 08       	sbc	r3, r0
      94:	37 08       	sbc	r3, r7
      96:	3e 08       	sbc	r3, r14
      98:	45 08       	sbc	r4, r5
      9a:	4c 08       	sbc	r4, r12
      9c:	f1 08       	sbc	r15, r1
      9e:	53 08       	sbc	r5, r3
      a0:	5a 08       	sbc	r5, r10
      a2:	61 08       	sbc	r6, r1
      a4:	68 08       	sbc	r6, r8
      a6:	f1 08       	sbc	r15, r1
      a8:	6f 08       	sbc	r6, r15
      aa:	76 08       	sbc	r7, r6
      ac:	7d 08       	sbc	r7, r13
      ae:	84 08       	sbc	r8, r4
      b0:	8f 08       	sbc	r8, r15
      b2:	96 08       	sbc	r9, r6
      b4:	9d 08       	sbc	r9, r13
      b6:	a4 08       	sbc	r10, r4
      b8:	f1 08       	sbc	r15, r1
      ba:	ab 08       	sbc	r10, r11
      bc:	b2 08       	sbc	r11, r2
      be:	bd 08       	sbc	r11, r13
      c0:	c4 08       	sbc	r12, r4
      c2:	f1 08       	sbc	r15, r1
      c4:	cb 08       	sbc	r12, r11
      c6:	d2 08       	sbc	r13, r2
      c8:	d9 08       	sbc	r13, r9
      ca:	e0 08       	sbc	r14, r0
      cc:	eb 08       	sbc	r14, r11
      ce:	3d 09       	sbc	r19, r13
      d0:	39 17       	cp	r19, r25
      d2:	74 09       	sbc	r23, r4
      d4:	a3 09       	sbc	r26, r3
      d6:	d0 09       	sbc	r29, r0
      d8:	39 17       	cp	r19, r25
      da:	da 09       	sbc	r29, r10
      dc:	57 0a       	sbc	r5, r23
      de:	d4 0a       	sbc	r13, r20
      e0:	03 0c       	add	r0, r3
      e2:	c0 0c       	add	r12, r0
      e4:	3d 0d       	add	r19, r13
      e6:	ec 0e       	add	r14, r28
      e8:	a8 0f       	add	r26, r24
      ea:	23 10       	cpse	r2, r3
      ec:	95 10       	cpse	r9, r5
      ee:	ba 10       	cpse	r11, r10
      f0:	39 17       	cp	r19, r25
      f2:	08 11       	cpse	r16, r8
      f4:	7b 11       	cpse	r23, r11
      f6:	00 12       	cpse	r0, r16
      f8:	59 12       	cpse	r5, r25
      fa:	cb 12       	cpse	r12, r27
      fc:	29 13       	cpse	r18, r25
      fe:	4e 13       	cpse	r20, r30
     100:	6f 13       	cpse	r22, r31
     102:	39 17       	cp	r19, r25
     104:	90 13       	cpse	r25, r16
     106:	e9 13       	cpse	r30, r25
     108:	51 14       	cp	r5, r1
     10a:	e8 14       	cp	r14, r8
     10c:	39 17       	cp	r19, r25
     10e:	39 15       	cp	r19, r9
     110:	a8 15       	cp	r26, r8
     112:	1e 16       	cp	r1, r30
     114:	73 16       	cp	r7, r19
     116:	e1 16       	cp	r14, r17
     118:	83 17       	cp	r24, r19
     11a:	8a 17       	cp	r24, r26
     11c:	91 17       	cp	r25, r17
     11e:	99 17       	cp	r25, r25
     120:	a0 17       	cp	r26, r16
     122:	a7 17       	cp	r26, r23
     124:	b0 17       	cp	r27, r16
     126:	ba 17       	cp	r27, r26
     128:	c3 17       	cp	r28, r19
     12a:	cc 17       	cp	r28, r28
     12c:	d5 17       	cp	r29, r21
     12e:	de 17       	cp	r29, r30
     130:	e7 17       	cp	r30, r23
     132:	f0 17       	cp	r31, r16
     134:	f9 17       	cp	r31, r25
     136:	02 18       	sub	r0, r2
     138:	0b 18       	sub	r0, r11
     13a:	14 18       	sub	r1, r4
     13c:	1d 18       	sub	r1, r13
     13e:	27 18       	sub	r2, r7
     140:	30 18       	sub	r3, r0
     142:	39 18       	sub	r3, r9
     144:	42 18       	sub	r4, r2
     146:	4b 18       	sub	r4, r11
     148:	54 18       	sub	r5, r4
     14a:	5d 18       	sub	r5, r13
     14c:	66 18       	sub	r6, r6
     14e:	6f 18       	sub	r6, r15
     150:	79 18       	sub	r7, r9
     152:	82 18       	sub	r8, r2
     154:	8b 18       	sub	r8, r11
     156:	93 18       	sub	r9, r3
     158:	9b 18       	sub	r9, r11
     15a:	a4 18       	sub	r10, r4
     15c:	ac 18       	sub	r10, r12
     15e:	b4 18       	sub	r11, r4
     160:	bc 18       	sub	r11, r12
     162:	c4 18       	sub	r12, r4

00000164 <__ctors_end>:
     164:	11 24       	eor	r1, r1
     166:	1f be       	out	0x3f, r1	; 63
     168:	cf ef       	ldi	r28, 0xFF	; 255
     16a:	d0 e1       	ldi	r29, 0x10	; 16
     16c:	de bf       	out	0x3e, r29	; 62
     16e:	cd bf       	out	0x3d, r28	; 61

00000170 <__do_copy_data>:
     170:	12 e0       	ldi	r17, 0x02	; 2
     172:	a0 e0       	ldi	r26, 0x00	; 0
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	ee ea       	ldi	r30, 0xAE	; 174
     178:	fd e3       	ldi	r31, 0x3D	; 61
     17a:	00 e0       	ldi	r16, 0x00	; 0
     17c:	0b bf       	out	0x3b, r16	; 59
     17e:	02 c0       	rjmp	.+4      	; 0x184 <__do_copy_data+0x14>
     180:	07 90       	elpm	r0, Z+
     182:	0d 92       	st	X+, r0
     184:	aa 37       	cpi	r26, 0x7A	; 122
     186:	b1 07       	cpc	r27, r17
     188:	d9 f7       	brne	.-10     	; 0x180 <__do_copy_data+0x10>

0000018a <__do_clear_bss>:
     18a:	12 e0       	ldi	r17, 0x02	; 2
     18c:	aa e7       	ldi	r26, 0x7A	; 122
     18e:	b2 e0       	ldi	r27, 0x02	; 2
     190:	01 c0       	rjmp	.+2      	; 0x194 <.do_clear_bss_start>

00000192 <.do_clear_bss_loop>:
     192:	1d 92       	st	X+, r1

00000194 <.do_clear_bss_start>:
     194:	aa 3d       	cpi	r26, 0xDA	; 218
     196:	b1 07       	cpc	r27, r17
     198:	e1 f7       	brne	.-8      	; 0x192 <.do_clear_bss_loop>
     19a:	0e 94 b9 03 	call	0x772	; 0x772 <main>
     19e:	0c 94 d5 1e 	jmp	0x3daa	; 0x3daa <_exit>

000001a2 <__bad_interrupt>:
     1a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a6 <KEYPAD_Check>:
//uint8_t ascii_code[4][4]={16,15,14,13,
						  //12,9,6,3,
						  //10,8,5,2,
						  //11,7,4,1};

uint8_t KEYPAD_Check() {
     1a6:	af 92       	push	r10
     1a8:	bf 92       	push	r11
     1aa:	cf 92       	push	r12
     1ac:	df 92       	push	r13
     1ae:	ef 92       	push	r14
     1b0:	ff 92       	push	r15
     1b2:	0f 93       	push	r16
     1b4:	1f 93       	push	r17
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	20 e0       	ldi	r18, 0x00	; 0
     1bc:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     1be:	41 e0       	ldi	r20, 0x01	; 1
     1c0:	50 e0       	ldi	r21, 0x00	; 0
     1c2:	e2 e6       	ldi	r30, 0x62	; 98
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
		_delay_us(10);
		keyin=KEYPAD_PIN & 0x0F;
		if (keyin!=0x0F)
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
     1c6:	a0 e1       	ldi	r26, 0x10	; 16
     1c8:	b1 e0       	ldi	r27, 0x01	; 1
     1ca:	0f 2e       	mov	r0, r31
     1cc:	f1 e1       	ldi	r31, 0x11	; 17
     1ce:	af 2e       	mov	r10, r31
     1d0:	f1 e0       	ldi	r31, 0x01	; 1
     1d2:	bf 2e       	mov	r11, r31
     1d4:	f0 2d       	mov	r31, r0
     1d6:	02 e1       	ldi	r16, 0x12	; 18
     1d8:	11 e0       	ldi	r17, 0x01	; 1
     1da:	0f 2e       	mov	r0, r31
     1dc:	f3 e1       	ldi	r31, 0x13	; 19
     1de:	ef 2e       	mov	r14, r31
     1e0:	f1 e0       	ldi	r31, 0x01	; 1
     1e2:	ff 2e       	mov	r15, r31
     1e4:	f0 2d       	mov	r31, r0
						  //11,7,4,1};

uint8_t KEYPAD_Check() {
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     1e6:	b9 01       	movw	r22, r18
//uint8_t ascii_code[4][4]={16,15,14,13,
						  //12,9,6,3,
						  //10,8,5,2,
						  //11,7,4,1};

uint8_t KEYPAD_Check() {
     1e8:	c9 01       	movw	r24, r18
     1ea:	04 96       	adiw	r24, 0x04	; 4
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     1ec:	6a 01       	movw	r12, r20
     1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <KEYPAD_Check+0x4e>
     1f0:	cc 0c       	add	r12, r12
     1f2:	dd 1c       	adc	r13, r13
     1f4:	8a 95       	dec	r24
     1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <KEYPAD_Check+0x4a>
     1f8:	c6 01       	movw	r24, r12
     1fa:	80 95       	com	r24
     1fc:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1fe:	83 e0       	ldi	r24, 0x03	; 3
     200:	8a 95       	dec	r24
     202:	f1 f7       	brne	.-4      	; 0x200 <KEYPAD_Check+0x5a>
     204:	00 00       	nop
		_delay_us(10);
		keyin=KEYPAD_PIN & 0x0F;
     206:	80 b1       	in	r24, 0x00	; 0
     208:	8f 70       	andi	r24, 0x0F	; 15
		if (keyin!=0x0F)
     20a:	8f 30       	cpi	r24, 0x0F	; 15
     20c:	29 f1       	breq	.+74     	; 0x258 <KEYPAD_Check+0xb2>
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
     20e:	9c 91       	ld	r25, X
     210:	98 17       	cp	r25, r24
     212:	a9 f0       	breq	.+42     	; 0x23e <KEYPAD_Check+0x98>
     214:	e5 01       	movw	r28, r10
     216:	98 81       	ld	r25, Y
     218:	98 17       	cp	r25, r24
     21a:	59 f0       	breq	.+22     	; 0x232 <KEYPAD_Check+0x8c>
     21c:	e8 01       	movw	r28, r16
     21e:	98 81       	ld	r25, Y
     220:	98 17       	cp	r25, r24
     222:	51 f0       	breq	.+20     	; 0x238 <KEYPAD_Check+0x92>
     224:	e7 01       	movw	r28, r14
     226:	98 81       	ld	r25, Y
     228:	98 17       	cp	r25, r24
     22a:	b1 f4       	brne	.+44     	; 0x258 <KEYPAD_Check+0xb2>
     22c:	e3 e0       	ldi	r30, 0x03	; 3
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	08 c0       	rjmp	.+16     	; 0x242 <KEYPAD_Check+0x9c>
     232:	e1 e0       	ldi	r30, 0x01	; 1
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	05 c0       	rjmp	.+10     	; 0x242 <KEYPAD_Check+0x9c>
     238:	e2 e0       	ldi	r30, 0x02	; 2
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	02 c0       	rjmp	.+4      	; 0x242 <KEYPAD_Check+0x9c>
     23e:	e0 e0       	ldi	r30, 0x00	; 0
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	ee 0f       	add	r30, r30
     244:	ff 1f       	adc	r31, r31
     246:	ee 0f       	add	r30, r30
     248:	ff 1f       	adc	r31, r31
     24a:	6e 0f       	add	r22, r30
     24c:	7f 1f       	adc	r23, r31
     24e:	fb 01       	movw	r30, r22
     250:	e0 50       	subi	r30, 0x00	; 0
     252:	ff 4f       	sbci	r31, 0xFF	; 255
     254:	80 81       	ld	r24, Z
     256:	06 c0       	rjmp	.+12     	; 0x264 <KEYPAD_Check+0xbe>
     258:	2f 5f       	subi	r18, 0xFF	; 255
     25a:	3f 4f       	sbci	r19, 0xFF	; 255
						  //10,8,5,2,
						  //11,7,4,1};

uint8_t KEYPAD_Check() {
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
     25c:	24 30       	cpi	r18, 0x04	; 4
     25e:	31 05       	cpc	r19, r1
     260:	11 f6       	brne	.-124    	; 0x1e6 <KEYPAD_Check+0x40>
		keyin=KEYPAD_PIN & 0x0F;
		if (keyin!=0x0F)
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
	}
	return 0;
     262:	80 e0       	ldi	r24, 0x00	; 0
}
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	1f 91       	pop	r17
     26a:	0f 91       	pop	r16
     26c:	ff 90       	pop	r15
     26e:	ef 90       	pop	r14
     270:	df 90       	pop	r13
     272:	cf 90       	pop	r12
     274:	bf 90       	pop	r11
     276:	af 90       	pop	r10
     278:	08 95       	ret

0000027a <KEYPAD_Init>:

void KEYPAD_Init()
{
	//Khai bao huong cho cac chan ket noi keypad
	KEYPAD_DDR=0xF0;
     27a:	80 ef       	ldi	r24, 0xF0	; 240
     27c:	80 93 61 00 	sts	0x0061, r24
	KEYPAD_PORT=0x0F;
     280:	8f e0       	ldi	r24, 0x0F	; 15
     282:	80 93 62 00 	sts	0x0062, r24
     286:	08 95       	ret

00000288 <LCDBusyLoop>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     288:	8f ec       	ldi	r24, 0xCF	; 207
     28a:	97 e0       	ldi	r25, 0x07	; 7
     28c:	01 97       	sbiw	r24, 0x01	; 1
     28e:	f1 f7       	brne	.-4      	; 0x28c <LCDBusyLoop+0x4>
     290:	00 c0       	rjmp	.+0      	; 0x292 <LCDBusyLoop+0xa>
     292:	00 00       	nop
}

void LCDBusyLoop()
{
	_delay_ms(8);
}
     294:	08 95       	ret

00000296 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
     296:	28 2f       	mov	r18, r24
     298:	22 95       	swap	r18
     29a:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
     29c:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
     29e:	66 23       	and	r22, r22
     2a0:	11 f4       	brne	.+4      	; 0x2a6 <LCDByte+0x10>
CLEAR_RS();
     2a2:	d8 98       	cbi	0x1b, 0	; 27
     2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <LCDByte+0x12>
else
SET_RS();
     2a6:	d8 9a       	sbi	0x1b, 0	; 27

//_delay_ms(0.500);		//tAS

SET_E();
     2a8:	d9 9a       	sbi	0x1b, 1	; 27

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
     2aa:	9b b3       	in	r25, 0x1b	; 27
     2ac:	22 0f       	add	r18, r18
     2ae:	22 0f       	add	r18, r18
     2b0:	93 7c       	andi	r25, 0xC3	; 195
     2b2:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
     2b4:	9b bb       	out	0x1b, r25	; 27

//_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
     2b6:	d9 98       	cbi	0x1b, 1	; 27

//_delay_us(1);

//Send the lower nibble
SET_E();
     2b8:	d9 9a       	sbi	0x1b, 1	; 27

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
     2ba:	9b b3       	in	r25, 0x1b	; 27
     2bc:	88 0f       	add	r24, r24
     2be:	88 0f       	add	r24, r24
     2c0:	93 7c       	andi	r25, 0xC3	; 195
     2c2:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     2c4:	8b bb       	out	0x1b, r24	; 27

//_delay_us(1);			//tEH

//SEND

CLEAR_E();
     2c6:	d9 98       	cbi	0x1b, 1	; 27

//_delay_us(1);			//tEL

LCDBusyLoop();
     2c8:	0e 94 44 01 	call	0x288	; 0x288 <LCDBusyLoop>
}
     2cc:	08 95       	ret

000002ce <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
     2ce:	0f 93       	push	r16
     2d0:	1f 93       	push	r17
     2d2:	cf 93       	push	r28
     2d4:	df 93       	push	r29
     2d6:	8c 01       	movw	r16, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     2d8:	fc 01       	movw	r30, r24
     2da:	80 81       	ld	r24, Z
     2dc:	88 23       	and	r24, r24
     2de:	09 f1       	breq	.+66     	; 0x322 <LCDWriteString+0x54>
 {
 	//Custom Char Support
	if(*msg=='%')
     2e0:	85 32       	cpi	r24, 0x25	; 37
     2e2:	a9 f4       	brne	.+42     	; 0x30e <LCDWriteString+0x40>
	{
		msg++;
     2e4:	e8 01       	movw	r28, r16
     2e6:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
     2e8:	f8 01       	movw	r30, r16
     2ea:	81 81       	ldd	r24, Z+1	; 0x01
     2ec:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
     2ee:	88 30       	cpi	r24, 0x08	; 8
     2f0:	20 f4       	brcc	.+8      	; 0x2fa <LCDWriteString+0x2c>
		{
			LCDData(cc);
     2f2:	61 e0       	ldi	r22, 0x01	; 1
     2f4:	0e 94 4b 01 	call	0x296	; 0x296 <LCDByte>
     2f8:	0e c0       	rjmp	.+28     	; 0x316 <LCDWriteString+0x48>
		}
		else
		{
			LCDData('%');
     2fa:	85 e2       	ldi	r24, 0x25	; 37
     2fc:	61 e0       	ldi	r22, 0x01	; 1
     2fe:	0e 94 4b 01 	call	0x296	; 0x296 <LCDByte>
			LCDData(*msg);
     302:	f8 01       	movw	r30, r16
     304:	81 81       	ldd	r24, Z+1	; 0x01
     306:	61 e0       	ldi	r22, 0x01	; 1
     308:	0e 94 4b 01 	call	0x296	; 0x296 <LCDByte>
     30c:	04 c0       	rjmp	.+8      	; 0x316 <LCDWriteString+0x48>
		}
	}
	else
	{
		LCDData(*msg);
     30e:	61 e0       	ldi	r22, 0x01	; 1
     310:	0e 94 4b 01 	call	0x296	; 0x296 <LCDByte>
     314:	e8 01       	movw	r28, r16
	}
	msg++;
     316:	8e 01       	movw	r16, r28
     318:	0f 5f       	subi	r16, 0xFF	; 255
     31a:	1f 4f       	sbci	r17, 0xFF	; 255
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     31c:	89 81       	ldd	r24, Y+1	; 0x01
     31e:	88 23       	and	r24, r24
     320:	f9 f6       	brne	.-66     	; 0x2e0 <LCDWriteString+0x12>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	1f 91       	pop	r17
     328:	0f 91       	pop	r16
     32a:	08 95       	ret

0000032c <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	00 d0       	rcall	.+0      	; 0x33a <LCDWriteInt+0xe>
     33a:	00 d0       	rcall	.+0      	; 0x33c <LCDWriteInt+0x10>
     33c:	0f 92       	push	r0
     33e:	cd b7       	in	r28, 0x3d	; 61
     340:	de b7       	in	r29, 0x3e	; 62
     342:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     344:	fe 01       	movw	r30, r28
     346:	31 96       	adiw	r30, 0x01	; 1
     348:	25 e0       	ldi	r18, 0x05	; 5
     34a:	df 01       	movw	r26, r30
     34c:	1d 92       	st	X+, r1
     34e:	2a 95       	dec	r18
     350:	e9 f7       	brne	.-6      	; 0x34c <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
     352:	00 97       	sbiw	r24, 0x00	; 0
     354:	61 f0       	breq	.+24     	; 0x36e <LCDWriteInt+0x42>
     356:	fe 01       	movw	r30, r28
     358:	36 96       	adiw	r30, 0x06	; 6
	{
	str[i]=val%10;
     35a:	2a e0       	ldi	r18, 0x0A	; 10
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	b9 01       	movw	r22, r18
     360:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__divmodhi4>
     364:	82 93       	st	-Z, r24
	val=val/10;
     366:	86 2f       	mov	r24, r22
     368:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     36a:	00 97       	sbiw	r24, 0x00	; 0
     36c:	c1 f7       	brne	.-16     	; 0x35e <LCDWriteInt+0x32>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     36e:	bf ef       	ldi	r27, 0xFF	; 255
     370:	eb 16       	cp	r14, r27
     372:	bf ef       	ldi	r27, 0xFF	; 255
     374:	fb 06       	cpc	r15, r27
     376:	69 f4       	brne	.+26     	; 0x392 <LCDWriteInt+0x66>
		while(str[j]==0) j++;
     378:	29 81       	ldd	r18, Y+1	; 0x01
     37a:	22 23       	and	r18, r18
     37c:	79 f4       	brne	.+30     	; 0x39c <LCDWriteInt+0x70>
     37e:	fe 01       	movw	r30, r28
     380:	32 96       	adiw	r30, 0x02	; 2
     382:	00 e0       	ldi	r16, 0x00	; 0
     384:	10 e0       	ldi	r17, 0x00	; 0
     386:	0f 5f       	subi	r16, 0xFF	; 255
     388:	1f 4f       	sbci	r17, 0xFF	; 255
     38a:	21 91       	ld	r18, Z+
     38c:	22 23       	and	r18, r18
     38e:	d9 f3       	breq	.-10     	; 0x386 <LCDWriteInt+0x5a>
     390:	07 c0       	rjmp	.+14     	; 0x3a0 <LCDWriteInt+0x74>
	else
		j=5-field_length;
     392:	05 e0       	ldi	r16, 0x05	; 5
     394:	10 e0       	ldi	r17, 0x00	; 0
     396:	0e 19       	sub	r16, r14
     398:	1f 09       	sbc	r17, r15
     39a:	02 c0       	rjmp	.+4      	; 0x3a0 <LCDWriteInt+0x74>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
     39c:	00 e0       	ldi	r16, 0x00	; 0
     39e:	10 e0       	ldi	r17, 0x00	; 0
	else
		j=5-field_length;

	if(val<0) LCDData('-');
     3a0:	99 23       	and	r25, r25
     3a2:	24 f4       	brge	.+8      	; 0x3ac <LCDWriteInt+0x80>
     3a4:	8d e2       	ldi	r24, 0x2D	; 45
     3a6:	61 e0       	ldi	r22, 0x01	; 1
     3a8:	0e 94 4b 01 	call	0x296	; 0x296 <LCDByte>
	for(i=j;i<5;i++)
     3ac:	05 30       	cpi	r16, 0x05	; 5
     3ae:	11 05       	cpc	r17, r1
     3b0:	bc f4       	brge	.+46     	; 0x3e0 <LCDWriteInt+0xb4>
	}
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
     3b2:	e1 e0       	ldi	r30, 0x01	; 1
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	ec 0f       	add	r30, r28
     3b8:	fd 1f       	adc	r31, r29
     3ba:	0e 0f       	add	r16, r30
     3bc:	1f 1f       	adc	r17, r31
     3be:	0f 2e       	mov	r0, r31
     3c0:	f6 e0       	ldi	r31, 0x06	; 6
     3c2:	ef 2e       	mov	r14, r31
     3c4:	ff 24       	eor	r15, r15
     3c6:	f0 2d       	mov	r31, r0
     3c8:	ec 0e       	add	r14, r28
     3ca:	fd 1e       	adc	r15, r29
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     3cc:	d8 01       	movw	r26, r16
     3ce:	8d 91       	ld	r24, X+
     3d0:	8d 01       	movw	r16, r26
     3d2:	80 5d       	subi	r24, 0xD0	; 208
     3d4:	61 e0       	ldi	r22, 0x01	; 1
     3d6:	0e 94 4b 01 	call	0x296	; 0x296 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     3da:	0e 15       	cp	r16, r14
     3dc:	1f 05       	cpc	r17, r15
     3de:	b1 f7       	brne	.-20     	; 0x3cc <LCDWriteInt+0xa0>
	{
	LCDData(48+str[i]);
	}
}
     3e0:	0f 90       	pop	r0
     3e2:	0f 90       	pop	r0
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	1f 91       	pop	r17
     3f0:	0f 91       	pop	r16
     3f2:	ff 90       	pop	r15
     3f4:	ef 90       	pop	r14
     3f6:	08 95       	ret

000003f8 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
     3f8:	84 31       	cpi	r24, 0x14	; 20
     3fa:	78 f4       	brcc	.+30     	; 0x41a <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
     3fc:	62 30       	cpi	r22, 0x02	; 2
     3fe:	31 f0       	breq	.+12     	; 0x40c <LCDGotoXY+0x14>
     400:	63 30       	cpi	r22, 0x03	; 3
     402:	31 f0       	breq	.+12     	; 0x410 <LCDGotoXY+0x18>
     404:	61 30       	cpi	r22, 0x01	; 1
     406:	29 f4       	brne	.+10     	; 0x412 <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
     408:	80 64       	ori	r24, 0x40	; 64
			break;
     40a:	03 c0       	rjmp	.+6      	; 0x412 <LCDGotoXY+0x1a>
		case 2:
			x+=0x14;
     40c:	8c 5e       	subi	r24, 0xEC	; 236
			break;
     40e:	01 c0       	rjmp	.+2      	; 0x412 <LCDGotoXY+0x1a>
		case 3:
			x+=0x54;
     410:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
     412:	80 68       	ori	r24, 0x80	; 128
     414:	60 e0       	ldi	r22, 0x00	; 0
     416:	0e 94 4b 01 	call	0x296	; 0x296 <LCDByte>
     41a:	08 95       	ret

0000041c <LCDInit>:
{
	_delay_ms(8);
}

void LCDInit(uint8_t style)
{
     41c:	0f 93       	push	r16
     41e:	1f 93       	push	r17
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	c8 2f       	mov	r28, r24
     426:	8b e4       	ldi	r24, 0x4B	; 75
     428:	9d e1       	ldi	r25, 0x1D	; 29
     42a:	01 97       	sbiw	r24, 0x01	; 1
     42c:	f1 f7       	brne	.-4      	; 0x42a <LCDInit+0xe>
     42e:	00 c0       	rjmp	.+0      	; 0x430 <LCDInit+0x14>
     430:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
     432:	8a b3       	in	r24, 0x1a	; 26
     434:	8c 63       	ori	r24, 0x3C	; 60
     436:	8a bb       	out	0x1a, r24	; 26
	LCD_E_DDR|=(1<<LCD_E_POS);
     438:	d1 9a       	sbi	0x1a, 1	; 26
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     43a:	d0 9a       	sbi	0x1a, 0	; 26

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
     43c:	8b b3       	in	r24, 0x1b	; 27
     43e:	83 7c       	andi	r24, 0xC3	; 195
     440:	8b bb       	out	0x1b, r24	; 27
	CLEAR_E();
     442:	d9 98       	cbi	0x1b, 1	; 27
	CLEAR_RS();
     444:	d8 98       	cbi	0x1b, 0	; 27

	//Set 4-bit mode
	//_delay_us(0.3);	//tAS

	SET_E();
     446:	d9 9a       	sbi	0x1b, 1	; 27
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     448:	db 9a       	sbi	0x1b, 3	; 27
	//_delay_us(1);
	CLEAR_E();
     44a:	d9 98       	cbi	0x1b, 1	; 27
	//_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     44c:	0e 94 44 01 	call	0x288	; 0x288 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     450:	8c 2f       	mov	r24, r28
     452:	8c 60       	ori	r24, 0x0C	; 12
     454:	60 e0       	ldi	r22, 0x00	; 0
     456:	0e 94 4b 01 	call	0x296	; 0x296 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     45a:	88 e2       	ldi	r24, 0x28	; 40
     45c:	60 e0       	ldi	r22, 0x00	; 0
     45e:	0e 94 4b 01 	call	0x296	; 0x296 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
     462:	80 e4       	ldi	r24, 0x40	; 64
     464:	60 e0       	ldi	r22, 0x00	; 0
     466:	0e 94 4b 01 	call	0x296	; 0x296 <LCDByte>
     46a:	c4 e1       	ldi	r28, 0x14	; 20
     46c:	d1 e0       	ldi	r29, 0x01	; 1
void LCDBusyLoop()
{
	_delay_ms(8);
}

void LCDInit(uint8_t style)
     46e:	04 e5       	ldi	r16, 0x54	; 84
     470:	11 e0       	ldi	r17, 0x01	; 1
	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
     472:	89 91       	ld	r24, Y+
     474:	61 e0       	ldi	r22, 0x01	; 1
     476:	0e 94 4b 01 	call	0x296	; 0x296 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
     47a:	c0 17       	cp	r28, r16
     47c:	d1 07       	cpc	r29, r17
     47e:	c9 f7       	brne	.-14     	; 0x472 <LCDInit+0x56>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	60 e0       	ldi	r22, 0x00	; 0
     484:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCDGotoXY>

}
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	08 95       	ret

00000492 <sMOIfaceKEYPAD_checkpress>:

static uint8_t nrf24l01_addr5[NRF24L01_ADDRSIZE] = NRF24L01_ADDRP5;
static uint8_t nrf24l01_addrtx[NRF24L01_ADDRSIZE] = NRF24L01_ADDRTX;

sc_integer sMOIfaceKEYPAD_checkpress() {
	return KEYPAD_Check();
     492:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <KEYPAD_Check>
}
     496:	68 2f       	mov	r22, r24
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	08 95       	ret

000004a0 <sMOIfaceKEYPAD_init>:
void sMOIfaceKEYPAD_init() {
	KEYPAD_Init();
     4a0:	0e 94 3d 01 	call	0x27a	; 0x27a <KEYPAD_Init>
}
     4a4:	08 95       	ret

000004a6 <sMOIfaceLCD_writeString>:
void sMOIfaceLCD_writeString(const sc_string chr) {
	LCDWriteString(chr);
     4a6:	0e 94 67 01 	call	0x2ce	; 0x2ce <LCDWriteString>
}
     4aa:	08 95       	ret

000004ac <sMOIfaceLCD_writeStringXY>:
void sMOIfaceLCD_writeStringXY(const sc_string chr, const sc_integer x, const sc_integer y) {
     4ac:	0f 93       	push	r16
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	ec 01       	movw	r28, r24
     4b4:	84 2f       	mov	r24, r20
     4b6:	60 2f       	mov	r22, r16
	LCDWriteStringXY(x,y,chr);
     4b8:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCDGotoXY>
     4bc:	ce 01       	movw	r24, r28
     4be:	0e 94 67 01 	call	0x2ce	; 0x2ce <LCDWriteString>
}
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	0f 91       	pop	r16
     4c8:	08 95       	ret

000004ca <sMOIfaceLCD_writeNumberXY>:
void sMOIfaceLCD_writeNumberXY(const sc_integer num, const sc_integer x, const sc_integer y, const sc_integer l) {
     4ca:	4f 92       	push	r4
     4cc:	5f 92       	push	r5
     4ce:	6f 92       	push	r6
     4d0:	7f 92       	push	r7
     4d2:	af 92       	push	r10
     4d4:	bf 92       	push	r11
     4d6:	cf 92       	push	r12
     4d8:	df 92       	push	r13
     4da:	ef 92       	push	r14
     4dc:	ff 92       	push	r15
     4de:	2b 01       	movw	r4, r22
     4e0:	3c 01       	movw	r6, r24
     4e2:	82 2f       	mov	r24, r18
     4e4:	6e 2d       	mov	r22, r14
     4e6:	76 01       	movw	r14, r12
     4e8:	65 01       	movw	r12, r10
	LCDWriteIntXY(x,y,num,l);
     4ea:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCDGotoXY>
     4ee:	c2 01       	movw	r24, r4
     4f0:	b6 01       	movw	r22, r12
     4f2:	0e 94 96 01 	call	0x32c	; 0x32c <LCDWriteInt>
}
     4f6:	ff 90       	pop	r15
     4f8:	ef 90       	pop	r14
     4fa:	df 90       	pop	r13
     4fc:	cf 90       	pop	r12
     4fe:	bf 90       	pop	r11
     500:	af 90       	pop	r10
     502:	7f 90       	pop	r7
     504:	6f 90       	pop	r6
     506:	5f 90       	pop	r5
     508:	4f 90       	pop	r4
     50a:	08 95       	ret

0000050c <sMOIfaceLCD_clear>:
void sMOIfaceLCD_clear() {
	LCDClear();
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	60 e0       	ldi	r22, 0x00	; 0
     510:	0e 94 4b 01 	call	0x296	; 0x296 <LCDByte>
     514:	82 e0       	ldi	r24, 0x02	; 2
     516:	60 e0       	ldi	r22, 0x00	; 0
     518:	0e 94 4b 01 	call	0x296	; 0x296 <LCDByte>
}
     51c:	08 95       	ret

0000051e <sMOIfaceLCD_init>:
void sMOIfaceLCD_init() {
	LCDInit(0);
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	0e 94 0e 02 	call	0x41c	; 0x41c <LCDInit>
}
     524:	08 95       	ret

00000526 <sMOIfaceRF_getData>:

sc_string sMOIfaceRF_getData() {
     526:	0f 93       	push	r16
     528:	1f 93       	push	r17
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	0f 92       	push	r0
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
	uint8_t pipe = 0;
     534:	19 82       	std	Y+1, r1	; 0x01
	if (nrf24l01_readready(&pipe)) {
     536:	ce 01       	movw	r24, r28
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <nrf24l01_readready>
     53e:	88 23       	and	r24, r24
     540:	99 f0       	breq	.+38     	; 0x568 <sMOIfaceRF_getData+0x42>
		if (pipe==0) {
     542:	89 81       	ldd	r24, Y+1	; 0x01
     544:	88 23       	and	r24, r24
     546:	99 f4       	brne	.+38     	; 0x56e <sMOIfaceRF_getData+0x48>
     548:	ec e7       	ldi	r30, 0x7C	; 124
     54a:	f2 e0       	ldi	r31, 0x02	; 2
}
void sMOIfaceLCD_init() {
	LCDInit(0);
}

sc_string sMOIfaceRF_getData() {
     54c:	cf 01       	movw	r24, r30
     54e:	09 96       	adiw	r24, 0x09	; 9
	uint8_t pipe = 0;
	if (nrf24l01_readready(&pipe)) {
		if (pipe==0) {
		//clear buffer
		for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
     550:	11 92       	st	Z+, r1
     552:	e8 17       	cp	r30, r24
     554:	f9 07       	cpc	r31, r25
     556:	e1 f7       	brne	.-8      	; 0x550 <sMOIfaceRF_getData+0x2a>
		
		//read buffer
		nrf24l01_read(pipe,bufferin);
     558:	0c e7       	ldi	r16, 0x7C	; 124
     55a:	12 e0       	ldi	r17, 0x02	; 2
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	b8 01       	movw	r22, r16
     560:	0e 94 8b 06 	call	0xd16	; 0xd16 <nrf24l01_read>
		return bufferin;
     564:	c8 01       	movw	r24, r16
     566:	05 c0       	rjmp	.+10     	; 0x572 <sMOIfaceRF_getData+0x4c>
		}
	}
	return "";
     568:	84 e5       	ldi	r24, 0x54	; 84
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	02 c0       	rjmp	.+4      	; 0x572 <sMOIfaceRF_getData+0x4c>
     56e:	84 e5       	ldi	r24, 0x54	; 84
     570:	91 e0       	ldi	r25, 0x01	; 1
}
     572:	0f 90       	pop	r0
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	1f 91       	pop	r17
     57a:	0f 91       	pop	r16
     57c:	08 95       	ret

0000057e <sMOIfaceRF_sendMsg>:

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
     582:	9c 01       	movw	r18, r24
     584:	c7 e8       	ldi	r28, 0x87	; 135
     586:	d2 e0       	ldi	r29, 0x02	; 2
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
		if (i<strlen(msg)) bufferout[i]=msg[i];
     58c:	a2 2f       	mov	r26, r18
     58e:	b3 2f       	mov	r27, r19
     590:	fd 01       	movw	r30, r26
     592:	01 90       	ld	r0, Z+
     594:	00 20       	and	r0, r0
     596:	e9 f7       	brne	.-6      	; 0x592 <sMOIfaceRF_sendMsg+0x14>
     598:	31 97       	sbiw	r30, 0x01	; 1
     59a:	ea 1b       	sub	r30, r26
     59c:	fb 0b       	sbc	r31, r27
     59e:	8e 17       	cp	r24, r30
     5a0:	9f 07       	cpc	r25, r31
     5a2:	30 f4       	brcc	.+12     	; 0x5b0 <sMOIfaceRF_sendMsg+0x32>
		}
	}
	return "";
}

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
     5a4:	f9 01       	movw	r30, r18
     5a6:	e8 0f       	add	r30, r24
     5a8:	f9 1f       	adc	r31, r25
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
		if (i<strlen(msg)) bufferout[i]=msg[i];
     5aa:	40 81       	ld	r20, Z
     5ac:	48 83       	st	Y, r20
     5ae:	01 c0       	rjmp	.+2      	; 0x5b2 <sMOIfaceRF_sendMsg+0x34>
		else bufferout[i] = 0;
     5b0:	18 82       	st	Y, r1
     5b2:	01 96       	adiw	r24, 0x01	; 1
     5b4:	21 96       	adiw	r28, 0x01	; 1
	return "";
}

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
     5b6:	89 30       	cpi	r24, 0x09	; 9
     5b8:	91 05       	cpc	r25, r1
     5ba:	41 f7       	brne	.-48     	; 0x58c <sMOIfaceRF_sendMsg+0xe>
		if (i<strlen(msg)) bufferout[i]=msg[i];
		else bufferout[i] = 0;
	}
	
	//Set Address for Data
	nrf24l01_settxaddr(nrf24l01_addrtx);
     5bc:	85 e5       	ldi	r24, 0x55	; 85
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     5c4:	87 e8       	ldi	r24, 0x87	; 135
     5c6:	92 e0       	ldi	r25, 0x02	; 2
     5c8:	0e 94 b1 06 	call	0xd62	; 0xd62 <nrf24l01_write>
     5cc:	98 2f       	mov	r25, r24
     5ce:	ef ec       	ldi	r30, 0xCF	; 207
     5d0:	f7 e0       	ldi	r31, 0x07	; 7
     5d2:	31 97       	sbiw	r30, 0x01	; 1
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <sMOIfaceRF_sendMsg+0x54>
     5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <sMOIfaceRF_sendMsg+0x5a>
     5d8:	00 00       	nop
		}
	}
	return "";
}

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	91 30       	cpi	r25, 0x01	; 1
     5de:	09 f0       	breq	.+2      	; 0x5e2 <sMOIfaceRF_sendMsg+0x64>
     5e0:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	08 95       	ret

000005e8 <sMOIfaceRF_sendCheck>:

sc_boolean sMOIfaceRF_sendCheck() {
     5e8:	e7 e8       	ldi	r30, 0x87	; 135
     5ea:	f2 e0       	ldi	r31, 0x02	; 2
     5ec:	cf 01       	movw	r24, r30
     5ee:	09 96       	adiw	r24, 0x09	; 9
	//set all buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferout[i] = 1;
     5f0:	21 e0       	ldi	r18, 0x01	; 1
     5f2:	21 93       	st	Z+, r18
     5f4:	e8 17       	cp	r30, r24
     5f6:	f9 07       	cpc	r31, r25
     5f8:	e1 f7       	brne	.-8      	; 0x5f2 <sMOIfaceRF_sendCheck+0xa>
	//Set Address for check
	nrf24l01_settxaddr(nrf24l01_addr5);
     5fa:	8a e5       	ldi	r24, 0x5A	; 90
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     602:	87 e8       	ldi	r24, 0x87	; 135
     604:	92 e0       	ldi	r25, 0x02	; 2
     606:	0e 94 b1 06 	call	0xd62	; 0xd62 <nrf24l01_write>
     60a:	98 2f       	mov	r25, r24
     60c:	ef ec       	ldi	r30, 0xCF	; 207
     60e:	f7 e0       	ldi	r31, 0x07	; 7
     610:	31 97       	sbiw	r30, 0x01	; 1
     612:	f1 f7       	brne	.-4      	; 0x610 <sMOIfaceRF_sendCheck+0x28>
     614:	00 c0       	rjmp	.+0      	; 0x616 <sMOIfaceRF_sendCheck+0x2e>
     616:	00 00       	nop
	} else {
		return false;
	}
}

sc_boolean sMOIfaceRF_sendCheck() {
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	91 30       	cpi	r25, 0x01	; 1
     61c:	09 f0       	breq	.+2      	; 0x620 <sMOIfaceRF_sendCheck+0x38>
     61e:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     620:	08 95       	ret

00000622 <sMOIfaceRF_getCheck>:

sc_boolean sMOIfaceRF_getCheck() {
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	0f 92       	push	r0
     62c:	cd b7       	in	r28, 0x3d	; 61
     62e:	de b7       	in	r29, 0x3e	; 62
	uint8_t pipe = 0;
     630:	19 82       	std	Y+1, r1	; 0x01
	if (nrf24l01_readready(&pipe)) {
     632:	ce 01       	movw	r24, r28
     634:	01 96       	adiw	r24, 0x01	; 1
     636:	0e 94 79 06 	call	0xcf2	; 0xcf2 <nrf24l01_readready>
     63a:	88 23       	and	r24, r24
     63c:	f1 f0       	breq	.+60     	; 0x67a <sMOIfaceRF_getCheck+0x58>
		if (pipe==5) {
     63e:	89 81       	ldd	r24, Y+1	; 0x01
     640:	85 30       	cpi	r24, 0x05	; 5
     642:	e9 f4       	brne	.+58     	; 0x67e <sMOIfaceRF_getCheck+0x5c>
     644:	ec e7       	ldi	r30, 0x7C	; 124
     646:	f2 e0       	ldi	r31, 0x02	; 2
	} else {
		return false;
	}
}

sc_boolean sMOIfaceRF_getCheck() {
     648:	8f 01       	movw	r16, r30
     64a:	07 5f       	subi	r16, 0xF7	; 247
     64c:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t pipe = 0;
	if (nrf24l01_readready(&pipe)) {
		if (pipe==5) {
			//clear buffer
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
     64e:	11 92       	st	Z+, r1
     650:	e0 17       	cp	r30, r16
     652:	f1 07       	cpc	r31, r17
     654:	e1 f7       	brne	.-8      	; 0x64e <sMOIfaceRF_getCheck+0x2c>
			
			//read buffer
			nrf24l01_read(pipe,bufferin);
     656:	85 e0       	ldi	r24, 0x05	; 5
     658:	6c e7       	ldi	r22, 0x7C	; 124
     65a:	72 e0       	ldi	r23, 0x02	; 2
     65c:	0e 94 8b 06 	call	0xd16	; 0xd16 <nrf24l01_read>
			
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) if (bufferin[i]!=1) return false;
     660:	80 91 7c 02 	lds	r24, 0x027C
     664:	81 30       	cpi	r24, 0x01	; 1
     666:	69 f4       	brne	.+26     	; 0x682 <sMOIfaceRF_getCheck+0x60>
     668:	ed e7       	ldi	r30, 0x7D	; 125
     66a:	f2 e0       	ldi	r31, 0x02	; 2
     66c:	81 91       	ld	r24, Z+
     66e:	81 30       	cpi	r24, 0x01	; 1
     670:	51 f4       	brne	.+20     	; 0x686 <sMOIfaceRF_getCheck+0x64>
     672:	e0 17       	cp	r30, r16
     674:	f1 07       	cpc	r31, r17
     676:	d1 f7       	brne	.-12     	; 0x66c <sMOIfaceRF_getCheck+0x4a>
     678:	07 c0       	rjmp	.+14     	; 0x688 <sMOIfaceRF_getCheck+0x66>
			return true;
		}
	}
	return false;
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	05 c0       	rjmp	.+10     	; 0x688 <sMOIfaceRF_getCheck+0x66>
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	03 c0       	rjmp	.+6      	; 0x688 <sMOIfaceRF_getCheck+0x66>
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
			
			//read buffer
			nrf24l01_read(pipe,bufferin);
			
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) if (bufferin[i]!=1) return false;
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	01 c0       	rjmp	.+2      	; 0x688 <sMOIfaceRF_getCheck+0x66>
     686:	80 e0       	ldi	r24, 0x00	; 0
			return true;
		}
	}
	return false;
}
     688:	0f 90       	pop	r0
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	1f 91       	pop	r17
     690:	0f 91       	pop	r16
     692:	08 95       	ret

00000694 <sMOIfaceRF_sendData>:

sc_boolean sMOIfaceRF_sendData(const sc_integer cmd, const sc_integer id, const sc_integer dish_id, const sc_integer amount) {
     694:	af 92       	push	r10
     696:	ef 92       	push	r14
     698:	82 2f       	mov	r24, r18
     69a:	e7 e8       	ldi	r30, 0x87	; 135
     69c:	f2 e0       	ldi	r31, 0x02	; 2
     69e:	af 01       	movw	r20, r30
     6a0:	47 5f       	subi	r20, 0xF7	; 247
     6a2:	5f 4f       	sbci	r21, 0xFF	; 255
	
	unsigned char num;
	unsigned char mod;
	//clear buffer
	for(uint8_t i=0; i<sizeof(bufferout); i++) bufferout[i] = 0;
     6a4:	11 92       	st	Z+, r1
     6a6:	e4 17       	cp	r30, r20
     6a8:	f5 07       	cpc	r31, r21
     6aa:	e1 f7       	brne	.-8      	; 0x6a4 <sMOIfaceRF_sendData+0x10>
	
	//Lenh cho data: 1-goi mon, 2-huy mon, 3-thanh toan, 4-goi boi ban
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
     6ac:	60 5d       	subi	r22, 0xD0	; 208
     6ae:	60 93 87 02 	sts	0x0287, r22
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     6b2:	3a e0       	ldi	r19, 0x0A	; 10
     6b4:	63 2f       	mov	r22, r19
     6b6:	0e 94 9d 1a 	call	0x353a	; 0x353a <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     6ba:	90 5d       	subi	r25, 0xD0	; 208
     6bc:	90 93 89 02 	sts	0x0289, r25
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     6c0:	0e 94 9d 1a 	call	0x353a	; 0x353a <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     6c4:	90 5d       	subi	r25, 0xD0	; 208
     6c6:	90 93 88 02 	sts	0x0288, r25
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
		num/=10;
     6ca:	8e 2d       	mov	r24, r14
     6cc:	0e 94 9d 1a 	call	0x353a	; 0x353a <__udivmodqi4>
		bufferout[3+i]=mod+'0';
     6d0:	90 5d       	subi	r25, 0xD0	; 208
     6d2:	90 93 8c 02 	sts	0x028C, r25
	}
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
     6d6:	0e 94 9d 1a 	call	0x353a	; 0x353a <__udivmodqi4>
		num/=10;
		bufferout[3+i]=mod+'0';
     6da:	90 5d       	subi	r25, 0xD0	; 208
     6dc:	90 93 8b 02 	sts	0x028B, r25
	}
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
     6e0:	0e 94 9d 1a 	call	0x353a	; 0x353a <__udivmodqi4>
		num/=10;
		bufferout[3+i]=mod+'0';
     6e4:	90 5d       	subi	r25, 0xD0	; 208
     6e6:	90 93 8a 02 	sts	0x028A, r25
	}
	
	//Chuyen doi so luong mon an
	num=amount;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     6ea:	8a 2d       	mov	r24, r10
     6ec:	0e 94 9d 1a 	call	0x353a	; 0x353a <__udivmodqi4>
		num/=10;
		bufferout[6+i]=mod+'0';
     6f0:	90 5d       	subi	r25, 0xD0	; 208
     6f2:	90 93 8e 02 	sts	0x028E, r25
	}
	
	//Chuyen doi so luong mon an
	num=amount;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     6f6:	0e 94 9d 1a 	call	0x353a	; 0x353a <__udivmodqi4>
		num/=10;
		bufferout[6+i]=mod+'0';
     6fa:	90 5d       	subi	r25, 0xD0	; 208
     6fc:	90 93 8d 02 	sts	0x028D, r25
	}
	
	//Set Address for Data
	nrf24l01_settxaddr(nrf24l01_addrtx);
     700:	85 e5       	ldi	r24, 0x55	; 85
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     708:	87 e8       	ldi	r24, 0x87	; 135
     70a:	92 e0       	ldi	r25, 0x02	; 2
     70c:	0e 94 b1 06 	call	0xd62	; 0xd62 <nrf24l01_write>
     710:	98 2f       	mov	r25, r24
     712:	ef ec       	ldi	r30, 0xCF	; 207
     714:	f7 e0       	ldi	r31, 0x07	; 7
     716:	31 97       	sbiw	r30, 0x01	; 1
     718:	f1 f7       	brne	.-4      	; 0x716 <sMOIfaceRF_sendData+0x82>
     71a:	00 c0       	rjmp	.+0      	; 0x71c <sMOIfaceRF_sendData+0x88>
     71c:	00 00       	nop
		}
	}
	return false;
}

sc_boolean sMOIfaceRF_sendData(const sc_integer cmd, const sc_integer id, const sc_integer dish_id, const sc_integer amount) {
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	91 30       	cpi	r25, 0x01	; 1
     722:	09 f0       	breq	.+2      	; 0x726 <sMOIfaceRF_sendData+0x92>
     724:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     726:	ef 90       	pop	r14
     728:	af 90       	pop	r10
     72a:	08 95       	ret

0000072c <sMOIfaceRF_sendConf>:

sc_boolean sMOIfaceRF_sendConf(const sc_integer cmd, const sc_integer id) {
     72c:	82 2f       	mov	r24, r18
     72e:	e7 e8       	ldi	r30, 0x87	; 135
     730:	f2 e0       	ldi	r31, 0x02	; 2
     732:	af 01       	movw	r20, r30
     734:	47 5f       	subi	r20, 0xF7	; 247
     736:	5f 4f       	sbci	r21, 0xFF	; 255
	
	unsigned char num;
	unsigned char mod;
	//clear buffer
	for(uint8_t i=0; i<sizeof(bufferout); i++) bufferout[i] = 0;
     738:	11 92       	st	Z+, r1
     73a:	e4 17       	cp	r30, r20
     73c:	f5 07       	cpc	r31, r21
     73e:	e1 f7       	brne	.-8      	; 0x738 <sMOIfaceRF_sendConf+0xc>
	
	//Lenh cho data: 3-thanh toan, 4-goi boi ban
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
     740:	60 5d       	subi	r22, 0xD0	; 208
     742:	60 93 87 02 	sts	0x0287, r22
	
	//Chuyen doi ma ban an
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     746:	3a e0       	ldi	r19, 0x0A	; 10
     748:	63 2f       	mov	r22, r19
     74a:	0e 94 9d 1a 	call	0x353a	; 0x353a <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     74e:	90 5d       	subi	r25, 0xD0	; 208
     750:	90 93 89 02 	sts	0x0289, r25
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
	
	//Chuyen doi ma ban an
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     754:	0e 94 9d 1a 	call	0x353a	; 0x353a <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     758:	90 5d       	subi	r25, 0xD0	; 208
     75a:	90 93 88 02 	sts	0x0288, r25
	}
}
     75e:	08 95       	ret

00000760 <sMO_setTimer>:

void sMO_setTimer(const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
	TimerSet(evid,time_ms);
     760:	0e 94 a8 19 	call	0x3350	; 0x3350 <TimerSet>
}
     764:	08 95       	ret

00000766 <sMO_unsetTimer>:
void sMO_unsetTimer(const sc_eventid evid) {
	TimerUnSet(evid);
     766:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <TimerUnSet>
}
     76a:	08 95       	ret

0000076c <sMOIfaceRF_init>:

void sMOIfaceRF_init() {
	nrf24l01_init();
     76c:	0e 94 07 07 	call	0xe0e	; 0xe0e <nrf24l01_init>
}
     770:	08 95       	ret

00000772 <main>:

int main(void)
{
	uint8_t i;
	DDRC=0x0F;
     772:	8f e0       	ldi	r24, 0x0F	; 15
     774:	84 bb       	out	0x14, r24	; 20
	PORTC=0x0F;
     776:	85 bb       	out	0x15, r24	; 21
	l=malloc(sizeof(SMO*)) ;
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <malloc>
     780:	80 93 85 02 	sts	0x0285, r24
     784:	90 93 86 02 	sts	0x0286, r25
	TimerInit();
     788:	0e 94 9c 19 	call	0x3338	; 0x3338 <TimerInit>
	sMO_init(l);
     78c:	80 91 85 02 	lds	r24, 0x0285
     790:	90 91 86 02 	lds	r25, 0x0286
     794:	0e 94 c6 07 	call	0xf8c	; 0xf8c <sMO_init>
	sMO_enter(l);
     798:	80 91 85 02 	lds	r24, 0x0285
     79c:	90 91 86 02 	lds	r25, 0x0286
     7a0:	0e 94 cd 07 	call	0xf9a	; 0xf9a <sMO_enter>
	
	while(1)
	{
		sMO_runCycle(l);
     7a4:	80 91 85 02 	lds	r24, 0x0285
     7a8:	90 91 86 02 	lds	r25, 0x0286
     7ac:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <sMO_runCycle>
     7b0:	f9 cf       	rjmp	.-14     	; 0x7a4 <main+0x32>

000007b2 <__vector_16>:
	}
}

ISR (TIMER0_OVF_vect) {
     7b2:	1f 92       	push	r1
     7b4:	0f 92       	push	r0
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	0f 92       	push	r0
     7ba:	0b b6       	in	r0, 0x3b	; 59
     7bc:	0f 92       	push	r0
     7be:	11 24       	eor	r1, r1
     7c0:	2f 93       	push	r18
     7c2:	3f 93       	push	r19
     7c4:	4f 93       	push	r20
     7c6:	5f 93       	push	r21
     7c8:	6f 93       	push	r22
     7ca:	7f 93       	push	r23
     7cc:	8f 93       	push	r24
     7ce:	9f 93       	push	r25
     7d0:	af 93       	push	r26
     7d2:	bf 93       	push	r27
     7d4:	ef 93       	push	r30
     7d6:	ff 93       	push	r31
	TCNT0=131;
     7d8:	83 e8       	ldi	r24, 0x83	; 131
     7da:	82 bf       	out	0x32, r24	; 50
	TimerCheck(l);
     7dc:	80 91 85 02 	lds	r24, 0x0285
     7e0:	90 91 86 02 	lds	r25, 0x0286
     7e4:	0e 94 2a 1a 	call	0x3454	; 0x3454 <TimerCheck>
     7e8:	ff 91       	pop	r31
     7ea:	ef 91       	pop	r30
     7ec:	bf 91       	pop	r27
     7ee:	af 91       	pop	r26
     7f0:	9f 91       	pop	r25
     7f2:	8f 91       	pop	r24
     7f4:	7f 91       	pop	r23
     7f6:	6f 91       	pop	r22
     7f8:	5f 91       	pop	r21
     7fa:	4f 91       	pop	r20
     7fc:	3f 91       	pop	r19
     7fe:	2f 91       	pop	r18
     800:	0f 90       	pop	r0
     802:	0b be       	out	0x3b, r0	; 59
     804:	0f 90       	pop	r0
     806:	0f be       	out	0x3f, r0	; 63
     808:	0f 90       	pop	r0
     80a:	1f 90       	pop	r1
     80c:	18 95       	reti

0000080e <nrf24l01_readregister>:

/*
 * read one register
 */
uint8_t nrf24l01_readregister(uint8_t reg) {
	nrf24l01_CSNlo; //low CSN
     80e:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     810:	8f 71       	andi	r24, 0x1F	; 31
     812:	0e 94 97 19 	call	0x332e	; 0x332e <spi_writereadbyte>
    uint8_t result = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
     816:	8f ef       	ldi	r24, 0xFF	; 255
     818:	0e 94 97 19 	call	0x332e	; 0x332e <spi_writereadbyte>
    nrf24l01_CSNhi; //high CSN
     81c:	ae 9a       	sbi	0x15, 6	; 21
    return result;
}
     81e:	08 95       	ret

00000820 <nrf24l01_readregisters>:

/*
 * read many registers
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
     820:	ff 92       	push	r15
     822:	0f 93       	push	r16
     824:	1f 93       	push	r17
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	06 2f       	mov	r16, r22
     82c:	f7 2e       	mov	r15, r23
     82e:	14 2f       	mov	r17, r20
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
     830:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     832:	8f 71       	andi	r24, 0x1F	; 31
     834:	0e 94 97 19 	call	0x332e	; 0x332e <spi_writereadbyte>
	for(i=0; i<len; i++)
     838:	11 23       	and	r17, r17
     83a:	51 f0       	breq	.+20     	; 0x850 <nrf24l01_readregisters+0x30>
     83c:	c0 2f       	mov	r28, r16
     83e:	df 2d       	mov	r29, r15
     840:	00 e0       	ldi	r16, 0x00	; 0
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
     842:	8f ef       	ldi	r24, 0xFF	; 255
     844:	0e 94 97 19 	call	0x332e	; 0x332e <spi_writereadbyte>
     848:	89 93       	st	Y+, r24
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     84a:	0f 5f       	subi	r16, 0xFF	; 255
     84c:	01 17       	cp	r16, r17
     84e:	c9 f7       	brne	.-14     	; 0x842 <nrf24l01_readregisters+0x22>
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
	nrf24l01_CSNhi; //high CSN
     850:	ae 9a       	sbi	0x15, 6	; 21
}
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	1f 91       	pop	r17
     858:	0f 91       	pop	r16
     85a:	ff 90       	pop	r15
     85c:	08 95       	ret

0000085e <nrf24l01_writeregister>:

/*
 * write one register
 */
void nrf24l01_writeregister(uint8_t reg, uint8_t value) {
     85e:	cf 93       	push	r28
     860:	c6 2f       	mov	r28, r22
	nrf24l01_CSNlo; //low CSN
     862:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     864:	8f 71       	andi	r24, 0x1F	; 31
     866:	80 62       	ori	r24, 0x20	; 32
     868:	0e 94 97 19 	call	0x332e	; 0x332e <spi_writereadbyte>
	spi_writereadbyte(value); //write register
     86c:	8c 2f       	mov	r24, r28
     86e:	0e 94 97 19 	call	0x332e	; 0x332e <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     872:	ae 9a       	sbi	0x15, 6	; 21
}
     874:	cf 91       	pop	r28
     876:	08 95       	ret

00000878 <nrf24l01_writeregisters>:

/*
 * write many registers
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
     878:	ff 92       	push	r15
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	06 2f       	mov	r16, r22
     884:	f7 2e       	mov	r15, r23
     886:	14 2f       	mov	r17, r20
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
     888:	ae 98       	cbi	0x15, 6	; 21
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     88a:	8f 71       	andi	r24, 0x1F	; 31
     88c:	80 62       	ori	r24, 0x20	; 32
     88e:	0e 94 97 19 	call	0x332e	; 0x332e <spi_writereadbyte>
	for(i=0; i<len; i++)
     892:	11 23       	and	r17, r17
     894:	49 f0       	breq	.+18     	; 0x8a8 <nrf24l01_writeregisters+0x30>
     896:	c0 2f       	mov	r28, r16
     898:	df 2d       	mov	r29, r15
     89a:	00 e0       	ldi	r16, 0x00	; 0
		 spi_writereadbyte(value[i]); //write register
     89c:	89 91       	ld	r24, Y+
     89e:	0e 94 97 19 	call	0x332e	; 0x332e <spi_writereadbyte>
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     8a2:	0f 5f       	subi	r16, 0xFF	; 255
     8a4:	01 17       	cp	r16, r17
     8a6:	d1 f7       	brne	.-12     	; 0x89c <nrf24l01_writeregisters+0x24>
		 spi_writereadbyte(value[i]); //write register
	nrf24l01_CSNhi; //high CSN
     8a8:	ae 9a       	sbi	0x15, 6	; 21
}
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	1f 91       	pop	r17
     8b0:	0f 91       	pop	r16
     8b2:	ff 90       	pop	r15
     8b4:	08 95       	ret

000008b6 <nrf24l01_revaddress>:

/*
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
     8b6:	20 e0       	ldi	r18, 0x00	; 0
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	04 96       	adiw	r24, 0x04	; 4
     8bc:	db 01       	movw	r26, r22
     8be:	a2 0f       	add	r26, r18
     8c0:	b3 1f       	adc	r27, r19
     8c2:	fc 01       	movw	r30, r24
     8c4:	e2 1b       	sub	r30, r18
     8c6:	f3 0b       	sbc	r31, r19
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
     8c8:	40 81       	ld	r20, Z
     8ca:	4c 93       	st	X, r20
     8cc:	2f 5f       	subi	r18, 0xFF	; 255
     8ce:	3f 4f       	sbci	r19, 0xFF	; 255
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
     8d0:	25 30       	cpi	r18, 0x05	; 5
     8d2:	31 05       	cpc	r19, r1
     8d4:	99 f7       	brne	.-26     	; 0x8bc <nrf24l01_revaddress+0x6>
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
}
     8d6:	08 95       	ret

000008d8 <nrf24l01_setrxaddr>:

/*
 * set rx address
 */
void nrf24l01_setrxaddr(uint8_t pipe, uint8_t *addr) {
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
     8dc:	00 d0       	rcall	.+0      	; 0x8de <nrf24l01_setrxaddr+0x6>
     8de:	00 d0       	rcall	.+0      	; 0x8e0 <nrf24l01_setrxaddr+0x8>
     8e0:	0f 92       	push	r0
     8e2:	cd b7       	in	r28, 0x3d	; 61
     8e4:	de b7       	in	r29, 0x3e	; 62
	if(pipe == 0) {
     8e6:	88 23       	and	r24, r24
     8e8:	b1 f4       	brne	.+44     	; 0x916 <nrf24l01_setrxaddr+0x3e>
		memcpy(&nrf24l01_addr0, addr, NRF24L01_ADDRSIZE); //cache address
     8ea:	a9 ed       	ldi	r26, 0xD9	; 217
     8ec:	b1 e0       	ldi	r27, 0x01	; 1
     8ee:	fb 01       	movw	r30, r22
     8f0:	85 e0       	ldi	r24, 0x05	; 5
     8f2:	01 90       	ld	r0, Z+
     8f4:	0d 92       	st	X+, r0
     8f6:	81 50       	subi	r24, 0x01	; 1
     8f8:	e1 f7       	brne	.-8      	; 0x8f2 <nrf24l01_setrxaddr+0x1a>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     8fa:	cb 01       	movw	r24, r22
     8fc:	be 01       	movw	r22, r28
     8fe:	6f 5f       	subi	r22, 0xFF	; 255
     900:	7f 4f       	sbci	r23, 0xFF	; 255
     902:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE);
     906:	8a e0       	ldi	r24, 0x0A	; 10
     908:	be 01       	movw	r22, r28
     90a:	6f 5f       	subi	r22, 0xFF	; 255
     90c:	7f 4f       	sbci	r23, 0xFF	; 255
     90e:	45 e0       	ldi	r20, 0x05	; 5
     910:	0e 94 3c 04 	call	0x878	; 0x878 <nrf24l01_writeregisters>
     914:	56 c0       	rjmp	.+172    	; 0x9c2 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 1) {
     916:	81 30       	cpi	r24, 0x01	; 1
     918:	b1 f4       	brne	.+44     	; 0x946 <nrf24l01_setrxaddr+0x6e>
		memcpy(&nrf24l01_addr1, addr, NRF24L01_ADDRSIZE); //cache address
     91a:	ae ed       	ldi	r26, 0xDE	; 222
     91c:	b1 e0       	ldi	r27, 0x01	; 1
     91e:	fb 01       	movw	r30, r22
     920:	85 e0       	ldi	r24, 0x05	; 5
     922:	01 90       	ld	r0, Z+
     924:	0d 92       	st	X+, r0
     926:	81 50       	subi	r24, 0x01	; 1
     928:	e1 f7       	brne	.-8      	; 0x922 <nrf24l01_setrxaddr+0x4a>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     92a:	cb 01       	movw	r24, r22
     92c:	be 01       	movw	r22, r28
     92e:	6f 5f       	subi	r22, 0xFF	; 255
     930:	7f 4f       	sbci	r23, 0xFF	; 255
     932:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P1, addrrev, NRF24L01_ADDRSIZE);
     936:	8b e0       	ldi	r24, 0x0B	; 11
     938:	be 01       	movw	r22, r28
     93a:	6f 5f       	subi	r22, 0xFF	; 255
     93c:	7f 4f       	sbci	r23, 0xFF	; 255
     93e:	45 e0       	ldi	r20, 0x05	; 5
     940:	0e 94 3c 04 	call	0x878	; 0x878 <nrf24l01_writeregisters>
     944:	3e c0       	rjmp	.+124    	; 0x9c2 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 2) {
     946:	82 30       	cpi	r24, 0x02	; 2
     948:	71 f4       	brne	.+28     	; 0x966 <nrf24l01_setrxaddr+0x8e>
		memcpy(&nrf24l01_addr2, addr, NRF24L01_ADDRSIZE); //cache address
     94a:	a3 ee       	ldi	r26, 0xE3	; 227
     94c:	b1 e0       	ldi	r27, 0x01	; 1
     94e:	fb 01       	movw	r30, r22
     950:	85 e0       	ldi	r24, 0x05	; 5
     952:	01 90       	ld	r0, Z+
     954:	0d 92       	st	X+, r0
     956:	81 50       	subi	r24, 0x01	; 1
     958:	e1 f7       	brne	.-8      	; 0x952 <nrf24l01_setrxaddr+0x7a>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P2, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     95a:	8c e0       	ldi	r24, 0x0C	; 12
     95c:	fb 01       	movw	r30, r22
     95e:	64 81       	ldd	r22, Z+4	; 0x04
     960:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
     964:	2e c0       	rjmp	.+92     	; 0x9c2 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 3) {
     966:	83 30       	cpi	r24, 0x03	; 3
     968:	71 f4       	brne	.+28     	; 0x986 <nrf24l01_setrxaddr+0xae>
		memcpy(&nrf24l01_addr3, addr, NRF24L01_ADDRSIZE); //cache address
     96a:	a8 ee       	ldi	r26, 0xE8	; 232
     96c:	b1 e0       	ldi	r27, 0x01	; 1
     96e:	fb 01       	movw	r30, r22
     970:	85 e0       	ldi	r24, 0x05	; 5
     972:	01 90       	ld	r0, Z+
     974:	0d 92       	st	X+, r0
     976:	81 50       	subi	r24, 0x01	; 1
     978:	e1 f7       	brne	.-8      	; 0x972 <nrf24l01_setrxaddr+0x9a>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P3, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     97a:	8d e0       	ldi	r24, 0x0D	; 13
     97c:	fb 01       	movw	r30, r22
     97e:	64 81       	ldd	r22, Z+4	; 0x04
     980:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
     984:	1e c0       	rjmp	.+60     	; 0x9c2 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 4) {
     986:	84 30       	cpi	r24, 0x04	; 4
     988:	71 f4       	brne	.+28     	; 0x9a6 <nrf24l01_setrxaddr+0xce>
		memcpy(&nrf24l01_addr4, addr, NRF24L01_ADDRSIZE); //cache address
     98a:	ad ee       	ldi	r26, 0xED	; 237
     98c:	b1 e0       	ldi	r27, 0x01	; 1
     98e:	fb 01       	movw	r30, r22
     990:	85 e0       	ldi	r24, 0x05	; 5
     992:	01 90       	ld	r0, Z+
     994:	0d 92       	st	X+, r0
     996:	81 50       	subi	r24, 0x01	; 1
     998:	e1 f7       	brne	.-8      	; 0x992 <nrf24l01_setrxaddr+0xba>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P4, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     99a:	8e e0       	ldi	r24, 0x0E	; 14
     99c:	fb 01       	movw	r30, r22
     99e:	64 81       	ldd	r22, Z+4	; 0x04
     9a0:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
     9a4:	0e c0       	rjmp	.+28     	; 0x9c2 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 5) {
     9a6:	85 30       	cpi	r24, 0x05	; 5
     9a8:	61 f4       	brne	.+24     	; 0x9c2 <nrf24l01_setrxaddr+0xea>
		memcpy(&nrf24l01_addr5, addr, NRF24L01_ADDRSIZE); //cache address
     9aa:	a2 ef       	ldi	r26, 0xF2	; 242
     9ac:	b1 e0       	ldi	r27, 0x01	; 1
     9ae:	fb 01       	movw	r30, r22
     9b0:	01 90       	ld	r0, Z+
     9b2:	0d 92       	st	X+, r0
     9b4:	81 50       	subi	r24, 0x01	; 1
     9b6:	e1 f7       	brne	.-8      	; 0x9b0 <nrf24l01_setrxaddr+0xd8>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P5, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     9b8:	8f e0       	ldi	r24, 0x0F	; 15
     9ba:	fb 01       	movw	r30, r22
     9bc:	64 81       	ldd	r22, Z+4	; 0x04
     9be:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
	}
}
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	08 95       	ret

000009d2 <nrf24l01_settxaddr>:

/*
 * set tx address
 */
void nrf24l01_settxaddr(uint8_t *addr) {
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	00 d0       	rcall	.+0      	; 0x9d8 <nrf24l01_settxaddr+0x6>
     9d8:	00 d0       	rcall	.+0      	; 0x9da <nrf24l01_settxaddr+0x8>
     9da:	0f 92       	push	r0
     9dc:	cd b7       	in	r28, 0x3d	; 61
     9de:	de b7       	in	r29, 0x3e	; 62
	memcpy(&nrf24l01_addrtx, addr, NRF24L01_ADDRSIZE); //cache address
     9e0:	a7 ef       	ldi	r26, 0xF7	; 247
     9e2:	b1 e0       	ldi	r27, 0x01	; 1
     9e4:	e8 2f       	mov	r30, r24
     9e6:	f9 2f       	mov	r31, r25
     9e8:	25 e0       	ldi	r18, 0x05	; 5
     9ea:	01 90       	ld	r0, Z+
     9ec:	0d 92       	st	X+, r0
     9ee:	21 50       	subi	r18, 0x01	; 1
     9f0:	e1 f7       	brne	.-8      	; 0x9ea <nrf24l01_settxaddr+0x18>
	uint8_t addrrev[NRF24L01_ADDRSIZE];
	nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     9f2:	be 01       	movw	r22, r28
     9f4:	6f 5f       	subi	r22, 0xFF	; 255
     9f6:	7f 4f       	sbci	r23, 0xFF	; 255
     9f8:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <nrf24l01_revaddress>
	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE); //set rx address for ack on pipe 0
     9fc:	8a e0       	ldi	r24, 0x0A	; 10
     9fe:	be 01       	movw	r22, r28
     a00:	6f 5f       	subi	r22, 0xFF	; 255
     a02:	7f 4f       	sbci	r23, 0xFF	; 255
     a04:	45 e0       	ldi	r20, 0x05	; 5
     a06:	0e 94 3c 04 	call	0x878	; 0x878 <nrf24l01_writeregisters>
	nrf24l01_writeregisters(NRF24L01_REG_TX_ADDR, addrrev, NRF24L01_ADDRSIZE); //set tx address
     a0a:	80 e1       	ldi	r24, 0x10	; 16
     a0c:	be 01       	movw	r22, r28
     a0e:	6f 5f       	subi	r22, 0xFF	; 255
     a10:	7f 4f       	sbci	r23, 0xFF	; 255
     a12:	45 e0       	ldi	r20, 0x05	; 5
     a14:	0e 94 3c 04 	call	0x878	; 0x878 <nrf24l01_writeregisters>
}
     a18:	0f 90       	pop	r0
     a1a:	0f 90       	pop	r0
     a1c:	0f 90       	pop	r0
     a1e:	0f 90       	pop	r0
     a20:	0f 90       	pop	r0
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	08 95       	ret

00000a28 <nrf24l01_flushRXfifo>:

/*
 * flush RX fifo
 */
void nrf24l01_flushRXfifo() {
	nrf24l01_CSNlo; //low CSN
     a28:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_FLUSH_RX);
     a2a:	82 ee       	ldi	r24, 0xE2	; 226
     a2c:	0e 94 97 19 	call	0x332e	; 0x332e <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     a30:	ae 9a       	sbi	0x15, 6	; 21
}
     a32:	08 95       	ret

00000a34 <nrf24l01_flushTXfifo>:

/*
 * flush TX fifo
 */
void nrf24l01_flushTXfifo() {
	nrf24l01_CSNlo; //low CSN
     a34:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_FLUSH_TX);
     a36:	81 ee       	ldi	r24, 0xE1	; 225
     a38:	0e 94 97 19 	call	0x332e	; 0x332e <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     a3c:	ae 9a       	sbi	0x15, 6	; 21
}
     a3e:	08 95       	ret

00000a40 <nrf24l01_setRX>:

/*
 * set chip as RX
 */
void nrf24l01_setRX() {
	nrf24l01_setrxaddr(0, nrf24l01_addr0); //restore pipe 0 address
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	69 ed       	ldi	r22, 0xD9	; 217
     a44:	71 e0       	ldi	r23, 0x01	; 1
     a46:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <nrf24l01_setrxaddr>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PRIM_RX)); //prx mode
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	0e 94 07 04 	call	0x80e	; 0x80e <nrf24l01_readregister>
     a50:	68 2f       	mov	r22, r24
     a52:	61 60       	ori	r22, 0x01	; 1
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	0e 94 07 04 	call	0x80e	; 0x80e <nrf24l01_readregister>
     a60:	68 2f       	mov	r22, r24
     a62:	62 60       	ori	r22, 0x02	; 2
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     a6a:	87 e0       	ldi	r24, 0x07	; 7
     a6c:	60 e7       	ldi	r22, 0x70	; 112
     a6e:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
	nrf24l01_flushRXfifo(); //flush rx fifo
     a72:	0e 94 14 05 	call	0xa28	; 0xa28 <nrf24l01_flushRXfifo>
	nrf24l01_flushTXfifo(); //flush tx fifo
     a76:	0e 94 1a 05 	call	0xa34	; 0xa34 <nrf24l01_flushTXfifo>
	nrf24l01_CEhi; //start listening
     a7a:	af 9a       	sbi	0x15, 7	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a7c:	82 e3       	ldi	r24, 0x32	; 50
     a7e:	8a 95       	dec	r24
     a80:	f1 f7       	brne	.-4      	; 0xa7e <nrf24l01_setRX+0x3e>
	_delay_us(150); //wait for the radio to power up
}
     a82:	08 95       	ret

00000a84 <nrf24l01_setTX>:

/*
 * set chip as TX
 */
void nrf24l01_setTX() {
	nrf24l01_CElo; //stop listening
     a84:	af 98       	cbi	0x15, 7	; 21
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PRIM_RX)); //ptx mode
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	0e 94 07 04 	call	0x80e	; 0x80e <nrf24l01_readregister>
     a8c:	68 2f       	mov	r22, r24
     a8e:	6e 7f       	andi	r22, 0xFE	; 254
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	0e 94 07 04 	call	0x80e	; 0x80e <nrf24l01_readregister>
     a9c:	68 2f       	mov	r22, r24
     a9e:	62 60       	ori	r22, 0x02	; 2
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     aa6:	87 e0       	ldi	r24, 0x07	; 7
     aa8:	60 e7       	ldi	r22, 0x70	; 112
     aaa:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
	nrf24l01_flushTXfifo(); //flush tx fifo
     aae:	0e 94 1a 05 	call	0xa34	; 0xa34 <nrf24l01_flushTXfifo>
     ab2:	82 e3       	ldi	r24, 0x32	; 50
     ab4:	8a 95       	dec	r24
     ab6:	f1 f7       	brne	.-4      	; 0xab4 <nrf24l01_setTX+0x30>
	_delay_us(150); //wait for the radio to power up
}
     ab8:	08 95       	ret

00000aba <nrf24l01_getstatus>:
/*
 * get status register
 */
uint8_t nrf24l01_getstatus() {
	uint8_t status = 0;
	nrf24l01_CSNlo; //low CSN
     aba:	ae 98       	cbi	0x15, 6	; 21
	status = spi_writereadbyte(NRF24L01_CMD_NOP); //get status, send NOP request
     abc:	8f ef       	ldi	r24, 0xFF	; 255
     abe:	0e 94 97 19 	call	0x332e	; 0x332e <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     ac2:	ae 9a       	sbi	0x15, 6	; 21
	return status;
}
     ac4:	08 95       	ret

00000ac6 <nrf24l01_printinfo>:

#if NRF24L01_PRINTENABLE == 1
/*
 * print info
 */
void nrf24l01_printinfo(void(*prints)(const char *), void(*printc)(unsigned char data)) {
     ac6:	ef 92       	push	r14
     ac8:	ff 92       	push	r15
     aca:	0f 93       	push	r16
     acc:	1f 93       	push	r17
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	cd b7       	in	r28, 0x3d	; 61
     ad4:	de b7       	in	r29, 0x3e	; 62
     ad6:	c4 56       	subi	r28, 0x64	; 100
     ad8:	d0 40       	sbci	r29, 0x00	; 0
     ada:	0f b6       	in	r0, 0x3f	; 63
     adc:	f8 94       	cli
     ade:	de bf       	out	0x3e, r29	; 62
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	cd bf       	out	0x3d, r28	; 61
     ae4:	7c 01       	movw	r14, r24
	char buff[100];
	prints("info\r\n");
     ae6:	8f e5       	ldi	r24, 0x5F	; 95
     ae8:	91 e0       	ldi	r25, 0x01	; 1
     aea:	f7 01       	movw	r30, r14
     aec:	09 95       	icall
	sprintf(buff,"STATUS: %02X\r\n", nrf24l01_getstatus()); prints(buff);
     aee:	0e 94 5d 05 	call	0xaba	; 0xaba <nrf24l01_getstatus>
     af2:	00 d0       	rcall	.+0      	; 0xaf4 <nrf24l01_printinfo+0x2e>
     af4:	00 d0       	rcall	.+0      	; 0xaf6 <nrf24l01_printinfo+0x30>
     af6:	00 d0       	rcall	.+0      	; 0xaf8 <nrf24l01_printinfo+0x32>
     af8:	ed b7       	in	r30, 0x3d	; 61
     afa:	fe b7       	in	r31, 0x3e	; 62
     afc:	31 96       	adiw	r30, 0x01	; 1
     afe:	8e 01       	movw	r16, r28
     b00:	0f 5f       	subi	r16, 0xFF	; 255
     b02:	1f 4f       	sbci	r17, 0xFF	; 255
     b04:	ad b7       	in	r26, 0x3d	; 61
     b06:	be b7       	in	r27, 0x3e	; 62
     b08:	12 96       	adiw	r26, 0x02	; 2
     b0a:	1c 93       	st	X, r17
     b0c:	0e 93       	st	-X, r16
     b0e:	11 97       	sbiw	r26, 0x01	; 1
     b10:	26 e6       	ldi	r18, 0x66	; 102
     b12:	31 e0       	ldi	r19, 0x01	; 1
     b14:	33 83       	std	Z+3, r19	; 0x03
     b16:	22 83       	std	Z+2, r18	; 0x02
     b18:	84 83       	std	Z+4, r24	; 0x04
     b1a:	15 82       	std	Z+5, r1	; 0x05
     b1c:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <sprintf>
     b20:	8d b7       	in	r24, 0x3d	; 61
     b22:	9e b7       	in	r25, 0x3e	; 62
     b24:	06 96       	adiw	r24, 0x06	; 6
     b26:	0f b6       	in	r0, 0x3f	; 63
     b28:	f8 94       	cli
     b2a:	9e bf       	out	0x3e, r25	; 62
     b2c:	0f be       	out	0x3f, r0	; 63
     b2e:	8d bf       	out	0x3d, r24	; 61
     b30:	c8 01       	movw	r24, r16
     b32:	f7 01       	movw	r30, r14
     b34:	09 95       	icall
	sprintf(buff,"CONFIG: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_CONFIG)); prints(buff);
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	0e 94 07 04 	call	0x80e	; 0x80e <nrf24l01_readregister>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <nrf24l01_printinfo+0x78>
     b3e:	00 d0       	rcall	.+0      	; 0xb40 <nrf24l01_printinfo+0x7a>
     b40:	00 d0       	rcall	.+0      	; 0xb42 <nrf24l01_printinfo+0x7c>
     b42:	ed b7       	in	r30, 0x3d	; 61
     b44:	fe b7       	in	r31, 0x3e	; 62
     b46:	31 96       	adiw	r30, 0x01	; 1
     b48:	ad b7       	in	r26, 0x3d	; 61
     b4a:	be b7       	in	r27, 0x3e	; 62
     b4c:	12 96       	adiw	r26, 0x02	; 2
     b4e:	1c 93       	st	X, r17
     b50:	0e 93       	st	-X, r16
     b52:	11 97       	sbiw	r26, 0x01	; 1
     b54:	25 e7       	ldi	r18, 0x75	; 117
     b56:	31 e0       	ldi	r19, 0x01	; 1
     b58:	33 83       	std	Z+3, r19	; 0x03
     b5a:	22 83       	std	Z+2, r18	; 0x02
     b5c:	84 83       	std	Z+4, r24	; 0x04
     b5e:	15 82       	std	Z+5, r1	; 0x05
     b60:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <sprintf>
     b64:	8d b7       	in	r24, 0x3d	; 61
     b66:	9e b7       	in	r25, 0x3e	; 62
     b68:	06 96       	adiw	r24, 0x06	; 6
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	9e bf       	out	0x3e, r25	; 62
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	8d bf       	out	0x3d, r24	; 61
     b74:	c8 01       	movw	r24, r16
     b76:	f7 01       	movw	r30, r14
     b78:	09 95       	icall
	sprintf(buff,"RF_CH: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_CH)); prints(buff);
     b7a:	85 e0       	ldi	r24, 0x05	; 5
     b7c:	0e 94 07 04 	call	0x80e	; 0x80e <nrf24l01_readregister>
     b80:	00 d0       	rcall	.+0      	; 0xb82 <nrf24l01_printinfo+0xbc>
     b82:	00 d0       	rcall	.+0      	; 0xb84 <nrf24l01_printinfo+0xbe>
     b84:	00 d0       	rcall	.+0      	; 0xb86 <nrf24l01_printinfo+0xc0>
     b86:	ed b7       	in	r30, 0x3d	; 61
     b88:	fe b7       	in	r31, 0x3e	; 62
     b8a:	31 96       	adiw	r30, 0x01	; 1
     b8c:	ad b7       	in	r26, 0x3d	; 61
     b8e:	be b7       	in	r27, 0x3e	; 62
     b90:	12 96       	adiw	r26, 0x02	; 2
     b92:	1c 93       	st	X, r17
     b94:	0e 93       	st	-X, r16
     b96:	11 97       	sbiw	r26, 0x01	; 1
     b98:	24 e8       	ldi	r18, 0x84	; 132
     b9a:	31 e0       	ldi	r19, 0x01	; 1
     b9c:	33 83       	std	Z+3, r19	; 0x03
     b9e:	22 83       	std	Z+2, r18	; 0x02
     ba0:	84 83       	std	Z+4, r24	; 0x04
     ba2:	15 82       	std	Z+5, r1	; 0x05
     ba4:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <sprintf>
     ba8:	8d b7       	in	r24, 0x3d	; 61
     baa:	9e b7       	in	r25, 0x3e	; 62
     bac:	06 96       	adiw	r24, 0x06	; 6
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	f8 94       	cli
     bb2:	9e bf       	out	0x3e, r25	; 62
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	8d bf       	out	0x3d, r24	; 61
     bb8:	c8 01       	movw	r24, r16
     bba:	f7 01       	movw	r30, r14
     bbc:	09 95       	icall
	sprintf(buff,"RF_SETUP: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_SETUP)); prints(buff);
     bbe:	86 e0       	ldi	r24, 0x06	; 6
     bc0:	0e 94 07 04 	call	0x80e	; 0x80e <nrf24l01_readregister>
     bc4:	00 d0       	rcall	.+0      	; 0xbc6 <nrf24l01_printinfo+0x100>
     bc6:	00 d0       	rcall	.+0      	; 0xbc8 <nrf24l01_printinfo+0x102>
     bc8:	00 d0       	rcall	.+0      	; 0xbca <nrf24l01_printinfo+0x104>
     bca:	ed b7       	in	r30, 0x3d	; 61
     bcc:	fe b7       	in	r31, 0x3e	; 62
     bce:	31 96       	adiw	r30, 0x01	; 1
     bd0:	ad b7       	in	r26, 0x3d	; 61
     bd2:	be b7       	in	r27, 0x3e	; 62
     bd4:	12 96       	adiw	r26, 0x02	; 2
     bd6:	1c 93       	st	X, r17
     bd8:	0e 93       	st	-X, r16
     bda:	11 97       	sbiw	r26, 0x01	; 1
     bdc:	22 e9       	ldi	r18, 0x92	; 146
     bde:	31 e0       	ldi	r19, 0x01	; 1
     be0:	33 83       	std	Z+3, r19	; 0x03
     be2:	22 83       	std	Z+2, r18	; 0x02
     be4:	84 83       	std	Z+4, r24	; 0x04
     be6:	15 82       	std	Z+5, r1	; 0x05
     be8:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <sprintf>
     bec:	8d b7       	in	r24, 0x3d	; 61
     bee:	9e b7       	in	r25, 0x3e	; 62
     bf0:	06 96       	adiw	r24, 0x06	; 6
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	f8 94       	cli
     bf6:	9e bf       	out	0x3e, r25	; 62
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	8d bf       	out	0x3d, r24	; 61
     bfc:	c8 01       	movw	r24, r16
     bfe:	f7 01       	movw	r30, r14
     c00:	09 95       	icall
	sprintf(buff,"EN_AA: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_AA)); prints(buff);
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	0e 94 07 04 	call	0x80e	; 0x80e <nrf24l01_readregister>
     c08:	00 d0       	rcall	.+0      	; 0xc0a <nrf24l01_printinfo+0x144>
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <nrf24l01_printinfo+0x146>
     c0c:	00 d0       	rcall	.+0      	; 0xc0e <nrf24l01_printinfo+0x148>
     c0e:	ed b7       	in	r30, 0x3d	; 61
     c10:	fe b7       	in	r31, 0x3e	; 62
     c12:	31 96       	adiw	r30, 0x01	; 1
     c14:	ad b7       	in	r26, 0x3d	; 61
     c16:	be b7       	in	r27, 0x3e	; 62
     c18:	12 96       	adiw	r26, 0x02	; 2
     c1a:	1c 93       	st	X, r17
     c1c:	0e 93       	st	-X, r16
     c1e:	11 97       	sbiw	r26, 0x01	; 1
     c20:	23 ea       	ldi	r18, 0xA3	; 163
     c22:	31 e0       	ldi	r19, 0x01	; 1
     c24:	33 83       	std	Z+3, r19	; 0x03
     c26:	22 83       	std	Z+2, r18	; 0x02
     c28:	84 83       	std	Z+4, r24	; 0x04
     c2a:	15 82       	std	Z+5, r1	; 0x05
     c2c:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <sprintf>
     c30:	8d b7       	in	r24, 0x3d	; 61
     c32:	9e b7       	in	r25, 0x3e	; 62
     c34:	06 96       	adiw	r24, 0x06	; 6
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	f8 94       	cli
     c3a:	9e bf       	out	0x3e, r25	; 62
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	8d bf       	out	0x3d, r24	; 61
     c40:	c8 01       	movw	r24, r16
     c42:	f7 01       	movw	r30, r14
     c44:	09 95       	icall
	sprintf(buff,"EN_RXADDR: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_RXADDR)); prints(buff);
     c46:	82 e0       	ldi	r24, 0x02	; 2
     c48:	0e 94 07 04 	call	0x80e	; 0x80e <nrf24l01_readregister>
     c4c:	00 d0       	rcall	.+0      	; 0xc4e <nrf24l01_printinfo+0x188>
     c4e:	00 d0       	rcall	.+0      	; 0xc50 <nrf24l01_printinfo+0x18a>
     c50:	00 d0       	rcall	.+0      	; 0xc52 <nrf24l01_printinfo+0x18c>
     c52:	ed b7       	in	r30, 0x3d	; 61
     c54:	fe b7       	in	r31, 0x3e	; 62
     c56:	31 96       	adiw	r30, 0x01	; 1
     c58:	ad b7       	in	r26, 0x3d	; 61
     c5a:	be b7       	in	r27, 0x3e	; 62
     c5c:	12 96       	adiw	r26, 0x02	; 2
     c5e:	1c 93       	st	X, r17
     c60:	0e 93       	st	-X, r16
     c62:	11 97       	sbiw	r26, 0x01	; 1
     c64:	21 eb       	ldi	r18, 0xB1	; 177
     c66:	31 e0       	ldi	r19, 0x01	; 1
     c68:	33 83       	std	Z+3, r19	; 0x03
     c6a:	22 83       	std	Z+2, r18	; 0x02
     c6c:	84 83       	std	Z+4, r24	; 0x04
     c6e:	15 82       	std	Z+5, r1	; 0x05
     c70:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <sprintf>
     c74:	8d b7       	in	r24, 0x3d	; 61
     c76:	9e b7       	in	r25, 0x3e	; 62
     c78:	06 96       	adiw	r24, 0x06	; 6
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	f8 94       	cli
     c7e:	9e bf       	out	0x3e, r25	; 62
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	8d bf       	out	0x3d, r24	; 61
     c84:	c8 01       	movw	r24, r16
     c86:	f7 01       	movw	r30, r14
     c88:	09 95       	icall
	sprintf(buff,"OBSERVE_TX: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_OBSERVE_TX)); prints(buff);
     c8a:	88 e0       	ldi	r24, 0x08	; 8
     c8c:	0e 94 07 04 	call	0x80e	; 0x80e <nrf24l01_readregister>
     c90:	00 d0       	rcall	.+0      	; 0xc92 <nrf24l01_printinfo+0x1cc>
     c92:	00 d0       	rcall	.+0      	; 0xc94 <nrf24l01_printinfo+0x1ce>
     c94:	00 d0       	rcall	.+0      	; 0xc96 <nrf24l01_printinfo+0x1d0>
     c96:	ed b7       	in	r30, 0x3d	; 61
     c98:	fe b7       	in	r31, 0x3e	; 62
     c9a:	31 96       	adiw	r30, 0x01	; 1
     c9c:	ad b7       	in	r26, 0x3d	; 61
     c9e:	be b7       	in	r27, 0x3e	; 62
     ca0:	12 96       	adiw	r26, 0x02	; 2
     ca2:	1c 93       	st	X, r17
     ca4:	0e 93       	st	-X, r16
     ca6:	11 97       	sbiw	r26, 0x01	; 1
     ca8:	23 ec       	ldi	r18, 0xC3	; 195
     caa:	31 e0       	ldi	r19, 0x01	; 1
     cac:	33 83       	std	Z+3, r19	; 0x03
     cae:	22 83       	std	Z+2, r18	; 0x02
     cb0:	84 83       	std	Z+4, r24	; 0x04
     cb2:	15 82       	std	Z+5, r1	; 0x05
     cb4:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <sprintf>
     cb8:	8d b7       	in	r24, 0x3d	; 61
     cba:	9e b7       	in	r25, 0x3e	; 62
     cbc:	06 96       	adiw	r24, 0x06	; 6
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	9e bf       	out	0x3e, r25	; 62
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	8d bf       	out	0x3d, r24	; 61
     cc8:	c8 01       	movw	r24, r16
     cca:	f7 01       	movw	r30, r14
     ccc:	09 95       	icall
	prints("\r\n");
     cce:	86 ed       	ldi	r24, 0xD6	; 214
     cd0:	91 e0       	ldi	r25, 0x01	; 1
     cd2:	f7 01       	movw	r30, r14
     cd4:	09 95       	icall
}
     cd6:	cc 59       	subi	r28, 0x9C	; 156
     cd8:	df 4f       	sbci	r29, 0xFF	; 255
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	f8 94       	cli
     cde:	de bf       	out	0x3e, r29	; 62
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	cd bf       	out	0x3d, r28	; 61
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	ff 90       	pop	r15
     cee:	ef 90       	pop	r14
     cf0:	08 95       	ret

00000cf2 <nrf24l01_readready>:
}

/*
 * check if there is data ready
 */
uint8_t nrf24l01_readready(uint8_t* pipe) {
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	ec 01       	movw	r28, r24
    uint8_t status = nrf24l01_getstatus();
     cf8:	0e 94 5d 05 	call	0xaba	; 0xaba <nrf24l01_getstatus>
    uint8_t ret = status & (1<<NRF24L01_REG_RX_DR);
    if(ret) {
     cfc:	98 2f       	mov	r25, r24
     cfe:	90 74       	andi	r25, 0x40	; 64
     d00:	86 ff       	sbrs	r24, 6
     d02:	05 c0       	rjmp	.+10     	; 0xd0e <nrf24l01_readready+0x1c>
		//get the pipe number
		if(pipe)
     d04:	20 97       	sbiw	r28, 0x00	; 0
     d06:	19 f0       	breq	.+6      	; 0xd0e <nrf24l01_readready+0x1c>
			*pipe = (status >> NRF24L01_REG_RX_P_NO) & 0b111;
     d08:	86 95       	lsr	r24
     d0a:	87 70       	andi	r24, 0x07	; 7
     d0c:	88 83       	st	Y, r24
    }
    return ret;
}
     d0e:	89 2f       	mov	r24, r25
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	08 95       	ret

00000d16 <nrf24l01_read>:

/*
 * get data
 */
void nrf24l01_read(uint8_t pipe,uint8_t *data) {
     d16:	0f 93       	push	r16
     d18:	1f 93       	push	r17
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	06 2f       	mov	r16, r22
     d20:	17 2f       	mov	r17, r23
	uint8_t i = 0;
	//read rx register
	nrf24l01_CSNlo; //low CSN
     d22:	ae 98       	cbi	0x15, 6	; 21
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
     d24:	81 e6       	ldi	r24, 0x61	; 97
     d26:	0e 94 97 19 	call	0x332e	; 0x332e <spi_writereadbyte>
     d2a:	c0 2f       	mov	r28, r16
     d2c:	d1 2f       	mov	r29, r17
	//Thay doi lai command, lay PAYLOAD va write ACK
	//spi_writereadbyte(NRF24L01_CMD_W_ACK_PAYLOAD | pipe);
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     d2e:	10 e0       	ldi	r17, 0x00	; 0
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
     d30:	8f ef       	ldi	r24, 0xFF	; 255
     d32:	0e 94 97 19 	call	0x332e	; 0x332e <spi_writereadbyte>
     d36:	89 93       	st	Y+, r24
	//read rx register
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
	//Thay doi lai command, lay PAYLOAD va write ACK
	//spi_writereadbyte(NRF24L01_CMD_W_ACK_PAYLOAD | pipe);
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     d38:	1f 5f       	subi	r17, 0xFF	; 255
     d3a:	19 30       	cpi	r17, 0x09	; 9
     d3c:	c9 f7       	brne	.-14     	; 0xd30 <nrf24l01_read+0x1a>
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
    nrf24l01_CSNhi; //high CSN
     d3e:	ae 9a       	sbi	0x15, 6	; 21
    //reset register
    nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR));
     d40:	87 e0       	ldi	r24, 0x07	; 7
     d42:	60 e4       	ldi	r22, 0x40	; 64
     d44:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
    //handle ack payload receipt
	if (nrf24l01_getstatus() & (1<<NRF24L01_REG_TX_DS))
     d48:	0e 94 5d 05 	call	0xaba	; 0xaba <nrf24l01_getstatus>
     d4c:	85 ff       	sbrs	r24, 5
     d4e:	04 c0       	rjmp	.+8      	; 0xd58 <nrf24l01_read+0x42>
		nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_TX_DS));
     d50:	87 e0       	ldi	r24, 0x07	; 7
     d52:	60 e2       	ldi	r22, 0x20	; 32
     d54:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
}
     d58:	df 91       	pop	r29
     d5a:	cf 91       	pop	r28
     d5c:	1f 91       	pop	r17
     d5e:	0f 91       	pop	r16
     d60:	08 95       	ret

00000d62 <nrf24l01_write>:

/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	08 2f       	mov	r16, r24
     d6c:	19 2f       	mov	r17, r25
	uint8_t i = 0;
	uint8_t ret = 0;

	//set tx mode
	nrf24l01_setTX();
     d6e:	0e 94 42 05 	call	0xa84	; 0xa84 <nrf24l01_setTX>

	//write data
	nrf24l01_CSNlo; //low CSN
     d72:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
     d74:	80 ea       	ldi	r24, 0xA0	; 160
     d76:	0e 94 97 19 	call	0x332e	; 0x332e <spi_writereadbyte>
     d7a:	c0 2f       	mov	r28, r16
     d7c:	d1 2f       	mov	r29, r17
     d7e:	19 e0       	ldi	r17, 0x09	; 9
	for (i=0; i<NRF24L01_PAYLOAD; i++)
		spi_writereadbyte(data[i]);
     d80:	89 91       	ld	r24, Y+
     d82:	0e 94 97 19 	call	0x332e	; 0x332e <spi_writereadbyte>
     d86:	11 50       	subi	r17, 0x01	; 1
	nrf24l01_setTX();

	//write data
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
	for (i=0; i<NRF24L01_PAYLOAD; i++)
     d88:	d9 f7       	brne	.-10     	; 0xd80 <nrf24l01_write+0x1e>
		spi_writereadbyte(data[i]);
	nrf24l01_CSNhi; //high CSN
     d8a:	ae 9a       	sbi	0x15, 6	; 21

	//start transmission
	nrf24l01_CEhi; //high CE
     d8c:	af 9a       	sbi	0x15, 7	; 21
     d8e:	85 e0       	ldi	r24, 0x05	; 5
     d90:	8a 95       	dec	r24
     d92:	f1 f7       	brne	.-4      	; 0xd90 <nrf24l01_write+0x2e>
	_delay_us(15);
	nrf24l01_CElo; //low CE
     d94:	af 98       	cbi	0x15, 7	; 21
     d96:	83 e0       	ldi	r24, 0x03	; 3
     d98:	8a 95       	dec	r24
     d9a:	f1 f7       	brne	.-4      	; 0xd98 <nrf24l01_write+0x36>
     d9c:	00 00       	nop

	//stop if max_retries reached or send is ok
	do {
		_delay_us(10);
	}
	while( !(nrf24l01_getstatus() & (1<<NRF24L01_REG_MAX_RT | 1<<NRF24L01_REG_TX_DS)) );
     d9e:	0e 94 5d 05 	call	0xaba	; 0xaba <nrf24l01_getstatus>
     da2:	80 73       	andi	r24, 0x30	; 48
     da4:	c1 f3       	breq	.-16     	; 0xd96 <nrf24l01_write+0x34>

	if(nrf24l01_getstatus() & 1<<NRF24L01_REG_TX_DS)
     da6:	0e 94 5d 05 	call	0xaba	; 0xaba <nrf24l01_getstatus>
     daa:	c8 2f       	mov	r28, r24
		ret = 1;

	//reset PLOS_CNT
	nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH);
     dac:	85 e0       	ldi	r24, 0x05	; 5
     dae:	6c e4       	ldi	r22, 0x4C	; 76
     db0:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>

	//power down
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PWR_UP));
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	0e 94 07 04 	call	0x80e	; 0x80e <nrf24l01_readregister>
     dba:	68 2f       	mov	r22, r24
     dbc:	6d 7f       	andi	r22, 0xFD	; 253
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>

	//set rx mode
	nrf24l01_setRX();
     dc4:	0e 94 20 05 	call	0xa40	; 0xa40 <nrf24l01_setRX>
/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
	uint8_t i = 0;
	uint8_t ret = 0;
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	c5 ff       	sbrs	r28, 5
     dcc:	80 e0       	ldi	r24, 0x00	; 0

	//set rx mode
	nrf24l01_setRX();

	return ret;
}
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	1f 91       	pop	r17
     dd4:	0f 91       	pop	r16
     dd6:	08 95       	ret

00000dd8 <nrf24l01_setpalevel>:

/*
 * set power level
 */
void nrf24l01_setpalevel() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP);
     dd8:	86 e0       	ldi	r24, 0x06	; 6
     dda:	0e 94 07 04 	call	0x80e	; 0x80e <nrf24l01_readregister>
  setup &= ~((1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH));

  if (NRF24L01_RF24_PA == NRF24L01_RF24_PA_MAX) {
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
     dde:	68 2f       	mov	r22, r24
     de0:	66 60       	ori	r22, 0x06	; 6
  } else {
	  //default is max power
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     de2:	86 e0       	ldi	r24, 0x06	; 6
     de4:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
}
     de8:	08 95       	ret

00000dea <nrf24l01_setdatarate>:

/*
 * set datarate
 */
void nrf24l01_setdatarate() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP) ;
     dea:	86 e0       	ldi	r24, 0x06	; 6
     dec:	0e 94 07 04 	call	0x80e	; 0x80e <nrf24l01_readregister>

  setup &= ~((1<<NRF24L01_REG_RF_DR_LOW) | (1<<NRF24L01_REG_RF_DR_HIGH));
     df0:	68 2f       	mov	r22, r24
     df2:	67 7d       	andi	r22, 0xD7	; 215
    } else {
    	//default is 1Mbps
    }
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     df4:	86 e0       	ldi	r24, 0x06	; 6
     df6:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
}
     dfa:	08 95       	ret

00000dfc <nrf24l01_setcrclength>:

/*
 * set crc length
 */
void nrf24l01_setcrclength() {
  uint8_t config = nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~((1<<NRF24L01_REG_CRCO) | (1<<NRF24L01_REG_EN_CRC));
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	0e 94 07 04 	call	0x80e	; 0x80e <nrf24l01_readregister>
	  //nothing
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_8) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_16) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
	  config |= (1<<NRF24L01_REG_CRCO);
     e02:	68 2f       	mov	r22, r24
     e04:	6c 60       	ori	r22, 0x0C	; 12
  } else {
	  //default is disabled
  }

  nrf24l01_writeregister(NRF24L01_REG_CONFIG, config);
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
}
     e0c:	08 95       	ret

00000e0e <nrf24l01_init>:
/*
 * init nrf24l01
 */
void nrf24l01_init() {
	//setup port
	NRF24L01_DDR |= (1<<NRF24L01_CSN); //output
     e0e:	a6 9a       	sbi	0x14, 6	; 20
	NRF24L01_DDR |= (1<<NRF24L01_CE); //output
     e10:	a7 9a       	sbi	0x14, 7	; 20

    spi_init(); //init spi
     e12:	0e 94 8c 19 	call	0x3318	; 0x3318 <spi_init>

    nrf24l01_CElo; //low CE
     e16:	af 98       	cbi	0x15, 7	; 21
    nrf24l01_CSNhi; //high CSN
     e18:	ae 9a       	sbi	0x15, 6	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e1a:	81 ee       	ldi	r24, 0xE1	; 225
     e1c:	94 e0       	ldi	r25, 0x04	; 4
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	f1 f7       	brne	.-4      	; 0xe1e <nrf24l01_init+0x10>
     e22:	00 c0       	rjmp	.+0      	; 0xe24 <nrf24l01_init+0x16>
     e24:	00 00       	nop

    _delay_ms(5); //wait for the radio to init

    nrf24l01_setpalevel(); //set power level
     e26:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <nrf24l01_setpalevel>
    nrf24l01_setdatarate(); //set data rate
     e2a:	0e 94 f5 06 	call	0xdea	; 0xdea <nrf24l01_setdatarate>
    nrf24l01_setcrclength(); //set crc length
     e2e:	0e 94 fe 06 	call	0xdfc	; 0xdfc <nrf24l01_setcrclength>
    nrf24l01_writeregister(NRF24L01_REG_SETUP_RETR, NRF24L01_RETR); // set retries
     e32:	84 e0       	ldi	r24, 0x04	; 4
     e34:	67 e4       	ldi	r22, 0x47	; 71
     e36:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_DYNPD, 0); //disable dynamic payloads
     e3a:	8c e1       	ldi	r24, 0x1C	; 28
     e3c:	60 e0       	ldi	r22, 0x00	; 0
     e3e:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH); //set RF channel
     e42:	85 e0       	ldi	r24, 0x05	; 5
     e44:	6c e4       	ldi	r22, 0x4C	; 76
     e46:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>

	//payload size
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P0, NRF24L01_PAYLOAD);
     e4a:	81 e1       	ldi	r24, 0x11	; 17
     e4c:	69 e0       	ldi	r22, 0x09	; 9
     e4e:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P1, NRF24L01_PAYLOAD);
     e52:	82 e1       	ldi	r24, 0x12	; 18
     e54:	69 e0       	ldi	r22, 0x09	; 9
     e56:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P2, NRF24L01_PAYLOAD);
     e5a:	83 e1       	ldi	r24, 0x13	; 19
     e5c:	69 e0       	ldi	r22, 0x09	; 9
     e5e:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P3, NRF24L01_PAYLOAD);
     e62:	84 e1       	ldi	r24, 0x14	; 20
     e64:	69 e0       	ldi	r22, 0x09	; 9
     e66:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P4, NRF24L01_PAYLOAD);
     e6a:	85 e1       	ldi	r24, 0x15	; 21
     e6c:	69 e0       	ldi	r22, 0x09	; 9
     e6e:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P5, NRF24L01_PAYLOAD);
     e72:	86 e1       	ldi	r24, 0x16	; 22
     e74:	69 e0       	ldi	r22, 0x09	; 9
     e76:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
	#endif

	//enable pipe
	nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, 0);
     e7a:	82 e0       	ldi	r24, 0x02	; 2
     e7c:	60 e0       	ldi	r22, 0x00	; 0
     e7e:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P0));
     e82:	82 e0       	ldi	r24, 0x02	; 2
     e84:	0e 94 07 04 	call	0x80e	; 0x80e <nrf24l01_readregister>
     e88:	68 2f       	mov	r22, r24
     e8a:	61 60       	ori	r22, 0x01	; 1
     e8c:	82 e0       	ldi	r24, 0x02	; 2
     e8e:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P1));
     e92:	82 e0       	ldi	r24, 0x02	; 2
     e94:	0e 94 07 04 	call	0x80e	; 0x80e <nrf24l01_readregister>
     e98:	68 2f       	mov	r22, r24
     e9a:	62 60       	ori	r22, 0x02	; 2
     e9c:	82 e0       	ldi	r24, 0x02	; 2
     e9e:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P2));
     ea2:	82 e0       	ldi	r24, 0x02	; 2
     ea4:	0e 94 07 04 	call	0x80e	; 0x80e <nrf24l01_readregister>
     ea8:	68 2f       	mov	r22, r24
     eaa:	64 60       	ori	r22, 0x04	; 4
     eac:	82 e0       	ldi	r24, 0x02	; 2
     eae:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P3));
     eb2:	82 e0       	ldi	r24, 0x02	; 2
     eb4:	0e 94 07 04 	call	0x80e	; 0x80e <nrf24l01_readregister>
     eb8:	68 2f       	mov	r22, r24
     eba:	68 60       	ori	r22, 0x08	; 8
     ebc:	82 e0       	ldi	r24, 0x02	; 2
     ebe:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P4));
     ec2:	82 e0       	ldi	r24, 0x02	; 2
     ec4:	0e 94 07 04 	call	0x80e	; 0x80e <nrf24l01_readregister>
     ec8:	68 2f       	mov	r22, r24
     eca:	60 61       	ori	r22, 0x10	; 16
     ecc:	82 e0       	ldi	r24, 0x02	; 2
     ece:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P5));
     ed2:	82 e0       	ldi	r24, 0x02	; 2
     ed4:	0e 94 07 04 	call	0x80e	; 0x80e <nrf24l01_readregister>
     ed8:	68 2f       	mov	r22, r24
     eda:	60 62       	ori	r22, 0x20	; 32
     edc:	82 e0       	ldi	r24, 0x02	; 2
     ede:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
	#endif

	//auto ack
	#if NRF24L01_ACK == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P0));
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	0e 94 07 04 	call	0x80e	; 0x80e <nrf24l01_readregister>
     ee8:	68 2f       	mov	r22, r24
     eea:	61 60       	ori	r22, 0x01	; 1
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P1));
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	0e 94 07 04 	call	0x80e	; 0x80e <nrf24l01_readregister>
     ef8:	68 2f       	mov	r22, r24
     efa:	62 60       	ori	r22, 0x02	; 2
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P2));
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	0e 94 07 04 	call	0x80e	; 0x80e <nrf24l01_readregister>
     f08:	68 2f       	mov	r22, r24
     f0a:	64 60       	ori	r22, 0x04	; 4
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P3));
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	0e 94 07 04 	call	0x80e	; 0x80e <nrf24l01_readregister>
     f18:	68 2f       	mov	r22, r24
     f1a:	68 60       	ori	r22, 0x08	; 8
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P4));
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	0e 94 07 04 	call	0x80e	; 0x80e <nrf24l01_readregister>
     f28:	68 2f       	mov	r22, r24
     f2a:	60 61       	ori	r22, 0x10	; 16
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P5));
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	0e 94 07 04 	call	0x80e	; 0x80e <nrf24l01_readregister>
     f38:	68 2f       	mov	r22, r24
     f3a:	60 62       	ori	r22, 0x20	; 32
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	0e 94 2f 04 	call	0x85e	; 0x85e <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P4));
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P5));
	#endif

	//rx address
	nrf24l01_setrxaddr(0, nrf24l01_addr0);
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	69 ed       	ldi	r22, 0xD9	; 217
     f46:	71 e0       	ldi	r23, 0x01	; 1
     f48:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(1, nrf24l01_addr1);
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	6e ed       	ldi	r22, 0xDE	; 222
     f50:	71 e0       	ldi	r23, 0x01	; 1
     f52:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(2, nrf24l01_addr2);
     f56:	82 e0       	ldi	r24, 0x02	; 2
     f58:	63 ee       	ldi	r22, 0xE3	; 227
     f5a:	71 e0       	ldi	r23, 0x01	; 1
     f5c:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(3, nrf24l01_addr3);
     f60:	83 e0       	ldi	r24, 0x03	; 3
     f62:	68 ee       	ldi	r22, 0xE8	; 232
     f64:	71 e0       	ldi	r23, 0x01	; 1
     f66:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(4, nrf24l01_addr4);
     f6a:	84 e0       	ldi	r24, 0x04	; 4
     f6c:	6d ee       	ldi	r22, 0xED	; 237
     f6e:	71 e0       	ldi	r23, 0x01	; 1
     f70:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(5, nrf24l01_addr5);
     f74:	85 e0       	ldi	r24, 0x05	; 5
     f76:	62 ef       	ldi	r22, 0xF2	; 242
     f78:	71 e0       	ldi	r23, 0x01	; 1
     f7a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <nrf24l01_setrxaddr>

	//tx address
	nrf24l01_settxaddr(nrf24l01_addrtx);
     f7e:	87 ef       	ldi	r24, 0xF7	; 247
     f80:	91 e0       	ldi	r25, 0x01	; 1
     f82:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <nrf24l01_settxaddr>

	//set rx mode
	nrf24l01_setRX();
     f86:	0e 94 20 05 	call	0xa40	; 0xa40 <nrf24l01_setRX>
}
     f8a:	08 95       	ret

00000f8c <sMO_init>:
static void clearInEvents(SMO* handle);
static void clearOutEvents(SMO* handle);


void sMO_init(SMO* handle)
{
     f8c:	fc 01       	movw	r30, r24
	int i;

	for (i = 0; i < SMO_MAX_ORTHOGONAL_STATES; ++i)
		handle->stateConfVector[i] = SMO_last_state;
     f8e:	86 e2       	ldi	r24, 0x26	; 38
     f90:	80 83       	st	Z, r24
     f92:	81 83       	std	Z+1, r24	; 0x01
	
	
	handle->stateConfVectorPosition = 0;
     f94:	13 82       	std	Z+3, r1	; 0x03
     f96:	12 82       	std	Z+2, r1	; 0x02

	// TODO: initialize all events ...
	// TODO: initialize all variables ... (set default values - here or inenter sequence ?!?)

}
     f98:	08 95       	ret

00000f9a <sMO_enter>:

void sMO_enter(SMO* handle)
{
     f9a:	1f 93       	push	r17
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	ec 01       	movw	r28, r24
	sMO_entryaction(handle);
	/* Default enter sequence for region main region */
	/* Default react sequence for initial entry  */
	/* Default enter sequence for state on */
	/* Entry action for state 'on'. */
	handle->iface.lightOn = bool_true;
     fa2:	11 e0       	ldi	r17, 0x01	; 1
     fa4:	1d a7       	lds	r17, 0x7d
	/* Default enter sequence for region r1 */
	/* Default react sequence for initial entry  */
	/* Default enter sequence for state Init */
	/* Entry action for state 'Init'. */
	sMO_setTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) , 3 * 1000, bool_false);
     fa6:	cc 96       	adiw	r24, 0x3c	; 60
     fa8:	48 eb       	ldi	r20, 0xB8	; 184
     faa:	5b e0       	ldi	r21, 0x0B	; 11
     fac:	60 e0       	ldi	r22, 0x00	; 0
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	0e 94 b0 03 	call	0x760	; 0x760 <sMO_setTimer>
	handle->iface.tableId = 1;
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	a0 e0       	ldi	r26, 0x00	; 0
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	8a ab       	sts	0x5a, r24
     fc0:	9b ab       	sts	0x5b, r25
     fc2:	ac ab       	sts	0x5c, r26
     fc4:	bd ab       	sts	0x5d, r27
	sMOIfaceLCD_init();
     fc6:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_init>
	sMOIfaceKEYPAD_init();
     fca:	0e 94 50 02 	call	0x4a0	; 0x4a0 <sMOIfaceKEYPAD_init>
	sMOIfaceRF_init();
     fce:	0e 94 b6 03 	call	0x76c	; 0x76c <sMOIfaceRF_init>
	sMOIfaceLCD_clear();
     fd2:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
	sMOIfaceLCD_writeString("Waitting...");
     fd6:	8c ef       	ldi	r24, 0xFC	; 252
     fd8:	91 e0       	ldi	r25, 0x01	; 1
     fda:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
	handle->stateConfVector[0] = SMO_main_region_on_r1_Init;
     fde:	18 83       	st	Y, r17
	handle->stateConfVectorPosition = 0;
     fe0:	1b 82       	std	Y+3, r1	; 0x03
     fe2:	1a 82       	std	Y+2, r1	; 0x02
}
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	08 95       	ret

00000fec <sMO_exit>:

void sMO_exit(SMO* handle)
{
     fec:	cf 93       	push	r28
     fee:	df 93       	push	r29
     ff0:	ec 01       	movw	r28, r24
	/* Default exit sequence for statechart SMO */
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of main region) at position 0... */
	switch(handle->stateConfVector[ 0 ]) {
     ff2:	88 81       	ld	r24, Y
     ff4:	83 30       	cpi	r24, 0x03	; 3
     ff6:	69 f0       	breq	.+26     	; 0x1012 <sMO_exit+0x26>
     ff8:	84 30       	cpi	r24, 0x04	; 4
     ffa:	81 f0       	breq	.+32     	; 0x101c <sMO_exit+0x30>
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	91 f4       	brne	.+36     	; 0x1024 <sMO_exit+0x38>
		case SMO_main_region_on_r1_Init : {
			/* Default exit sequence for state Init */
			handle->stateConfVector[0] = SMO_last_state;
    1000:	86 e2       	ldi	r24, 0x26	; 38
    1002:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    1004:	1b 82       	std	Y+3, r1	; 0x03
    1006:	1a 82       	std	Y+2, r1	; 0x02
			/* Exit action for state 'Init'. */
			sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) );		
    1008:	ce 01       	movw	r24, r28
    100a:	cc 96       	adiw	r24, 0x3c	; 60
    100c:	0e 94 b3 03 	call	0x766	; 0x766 <sMO_unsetTimer>
			break;
    1010:	09 c0       	rjmp	.+18     	; 0x1024 <sMO_exit+0x38>
		}
		case SMO_main_region_on_r1_Running_keypad_CheckKey : {
			/* Default exit sequence for state CheckKey */
			handle->stateConfVector[0] = SMO_last_state;
    1012:	86 e2       	ldi	r24, 0x26	; 38
    1014:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    1016:	1b 82       	std	Y+3, r1	; 0x03
    1018:	1a 82       	std	Y+2, r1	; 0x02
			break;
    101a:	04 c0       	rjmp	.+8      	; 0x1024 <sMO_exit+0x38>
		}
		case SMO_main_region_on_r1_Running_keypad_CheckKeyDown : {
			/* Default exit sequence for state CheckKeyDown */
			handle->stateConfVector[0] = SMO_last_state;
    101c:	86 e2       	ldi	r24, 0x26	; 38
    101e:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    1020:	1b 82       	std	Y+3, r1	; 0x03
    1022:	1a 82       	std	Y+2, r1	; 0x02
			break;
		}
		default: break;
	}
	/* Handle exit of all possible states (of main region) at position 1... */
	switch(handle->stateConfVector[ 1 ]) {
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	05 97       	sbiw	r24, 0x05	; 5
    102a:	81 32       	cpi	r24, 0x21	; 33
    102c:	91 05       	cpc	r25, r1
    102e:	08 f0       	brcs	.+2      	; 0x1032 <sMO_exit+0x46>
    1030:	d8 c0       	rjmp	.+432    	; 0x11e2 <__stack+0xe3>
    1032:	8a 5b       	subi	r24, 0xBA	; 186
    1034:	9f 4f       	sbci	r25, 0xFF	; 255
    1036:	fc 01       	movw	r30, r24
    1038:	ee 0f       	add	r30, r30
    103a:	ff 1f       	adc	r31, r31
    103c:	05 90       	lpm	r0, Z+
    103e:	f4 91       	lpm	r31, Z
    1040:	e0 2d       	mov	r30, r0
    1042:	09 94       	ijmp
		case SMO_main_region_on_r1_Running_running_main_ShowMenu : {
			/* Default exit sequence for state ShowMenu */
			handle->stateConfVector[1] = SMO_last_state;
    1044:	86 e2       	ldi	r24, 0x26	; 38
    1046:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	9b 83       	std	Y+3, r25	; 0x03
    104e:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1050:	c8 c0       	rjmp	.+400    	; 0x11e2 <__stack+0xe3>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
			/* Default exit sequence for state ShowCode */
			handle->stateConfVector[1] = SMO_last_state;
    1052:	86 e2       	ldi	r24, 0x26	; 38
    1054:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	9b 83       	std	Y+3, r25	; 0x03
    105c:	8a 83       	std	Y+2, r24	; 0x02
			break;
    105e:	c1 c0       	rjmp	.+386    	; 0x11e2 <__stack+0xe3>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
			/* Default exit sequence for state EnterCode */
			handle->stateConfVector[1] = SMO_last_state;
    1060:	86 e2       	ldi	r24, 0x26	; 38
    1062:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	9b 83       	std	Y+3, r25	; 0x03
    106a:	8a 83       	std	Y+2, r24	; 0x02
			break;
    106c:	ba c0       	rjmp	.+372    	; 0x11e2 <__stack+0xe3>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
			/* Default exit sequence for state CheckKeyPress1 */
			handle->stateConfVector[1] = SMO_last_state;
    106e:	86 e2       	ldi	r24, 0x26	; 38
    1070:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	9b 83       	std	Y+3, r25	; 0x03
    1078:	8a 83       	std	Y+2, r24	; 0x02
			break;
    107a:	b3 c0       	rjmp	.+358    	; 0x11e2 <__stack+0xe3>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
			/* Default exit sequence for state CheckCode0 */
			handle->stateConfVector[1] = SMO_last_state;
    107c:	86 e2       	ldi	r24, 0x26	; 38
    107e:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	9b 83       	std	Y+3, r25	; 0x03
    1086:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1088:	ac c0       	rjmp	.+344    	; 0x11e2 <__stack+0xe3>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
			/* Default exit sequence for state ShowAmount */
			handle->stateConfVector[1] = SMO_last_state;
    108a:	86 e2       	ldi	r24, 0x26	; 38
    108c:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	9b 83       	std	Y+3, r25	; 0x03
    1094:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1096:	a5 c0       	rjmp	.+330    	; 0x11e2 <__stack+0xe3>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
			/* Default exit sequence for state CheckKeyPress2 */
			handle->stateConfVector[1] = SMO_last_state;
    1098:	86 e2       	ldi	r24, 0x26	; 38
    109a:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	9b 83       	std	Y+3, r25	; 0x03
    10a2:	8a 83       	std	Y+2, r24	; 0x02
			break;
    10a4:	9e c0       	rjmp	.+316    	; 0x11e2 <__stack+0xe3>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
			/* Default exit sequence for state EnterAmount */
			handle->stateConfVector[1] = SMO_last_state;
    10a6:	86 e2       	ldi	r24, 0x26	; 38
    10a8:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	9b 83       	std	Y+3, r25	; 0x03
    10b0:	8a 83       	std	Y+2, r24	; 0x02
			break;
    10b2:	97 c0       	rjmp	.+302    	; 0x11e2 <__stack+0xe3>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
			/* Default exit sequence for final state. */
			handle->stateConfVector[1] = SMO_last_state;
    10b4:	86 e2       	ldi	r24, 0x26	; 38
    10b6:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	9b 83       	std	Y+3, r25	; 0x03
    10be:	8a 83       	std	Y+2, r24	; 0x02
			break;
    10c0:	90 c0       	rjmp	.+288    	; 0x11e2 <__stack+0xe3>
		}
		case SMO_main_region_on_r1_Running_running_main_MenuA : {
			/* Default exit sequence for state MenuA */
			handle->stateConfVector[1] = SMO_last_state;
    10c2:	86 e2       	ldi	r24, 0x26	; 38
    10c4:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	9b 83       	std	Y+3, r25	; 0x03
    10cc:	8a 83       	std	Y+2, r24	; 0x02
			break;
    10ce:	89 c0       	rjmp	.+274    	; 0x11e2 <__stack+0xe3>
		}
		case SMO_main_region_on_r1_Running_running_main_CheckKeyPress : {
			/* Default exit sequence for state CheckKeyPress */
			handle->stateConfVector[1] = SMO_last_state;
    10d0:	86 e2       	ldi	r24, 0x26	; 38
    10d2:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	9b 83       	std	Y+3, r25	; 0x03
    10da:	8a 83       	std	Y+2, r24	; 0x02
			break;
    10dc:	82 c0       	rjmp	.+260    	; 0x11e2 <__stack+0xe3>
		}
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
			/* Default exit sequence for state Send */
			handle->stateConfVector[1] = SMO_last_state;
    10de:	86 e2       	ldi	r24, 0x26	; 38
    10e0:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	9b 83       	std	Y+3, r25	; 0x03
    10e8:	8a 83       	std	Y+2, r24	; 0x02
			break;
    10ea:	7b c0       	rjmp	.+246    	; 0x11e2 <__stack+0xe3>
		}
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
			/* Default exit sequence for state Check */
			handle->stateConfVector[1] = SMO_last_state;
    10ec:	86 e2       	ldi	r24, 0x26	; 38
    10ee:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	9b 83       	std	Y+3, r25	; 0x03
    10f6:	8a 83       	std	Y+2, r24	; 0x02
			break;
    10f8:	74 c0       	rjmp	.+232    	; 0x11e2 <__stack+0xe3>
		}
		case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
			/* Default exit sequence for final state. */
			handle->stateConfVector[1] = SMO_last_state;
    10fa:	86 e2       	ldi	r24, 0x26	; 38
    10fc:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	9b 83       	std	Y+3, r25	; 0x03
    1104:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1106:	6d c0       	rjmp	.+218    	; 0x11e2 <__stack+0xe3>
		}
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail1 : {
			/* Default exit sequence for state SendFail1 */
			handle->stateConfVector[1] = SMO_last_state;
    1108:	86 e2       	ldi	r24, 0x26	; 38
    110a:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	9b 83       	std	Y+3, r25	; 0x03
    1112:	8a 83       	std	Y+2, r24	; 0x02
			/* Exit action for state 'SendFail1'. */
			sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail1_time_event_0_raised) );		
    1114:	ce 01       	movw	r24, r28
    1116:	cd 96       	adiw	r24, 0x3d	; 61
    1118:	0e 94 b3 03 	call	0x766	; 0x766 <sMO_unsetTimer>
			break;
    111c:	62 c0       	rjmp	.+196    	; 0x11e2 <__stack+0xe3>
		}
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult : {
			/* Default exit sequence for state ResetResult */
			handle->stateConfVector[1] = SMO_last_state;
    111e:	86 e2       	ldi	r24, 0x26	; 38
    1120:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	9b 83       	std	Y+3, r25	; 0x03
    1128:	8a 83       	std	Y+2, r24	; 0x02
			break;
    112a:	5b c0       	rjmp	.+182    	; 0x11e2 <__stack+0xe3>
		}
		case SMO_main_region_on_r1_Running_running_main_MenuB : {
			/* Default exit sequence for state MenuB */
			handle->stateConfVector[1] = SMO_last_state;
    112c:	86 e2       	ldi	r24, 0x26	; 38
    112e:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	9b 83       	std	Y+3, r25	; 0x03
    1136:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1138:	54 c0       	rjmp	.+168    	; 0x11e2 <__stack+0xe3>
		}
		case SMO_main_region_on_r1_Running_running_main_MenuC : {
			/* Default exit sequence for state MenuC */
			handle->stateConfVector[1] = SMO_last_state;
    113a:	86 e2       	ldi	r24, 0x26	; 38
    113c:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	9b 83       	std	Y+3, r25	; 0x03
    1144:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1146:	4d c0       	rjmp	.+154    	; 0x11e2 <__stack+0xe3>
		}
		case SMO_main_region_on_r1_Running_running_main_MenuD : {
			/* Default exit sequence for state MenuD */
			handle->stateConfVector[1] = SMO_last_state;
    1148:	86 e2       	ldi	r24, 0x26	; 38
    114a:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	9b 83       	std	Y+3, r25	; 0x03
    1152:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1154:	46 c0       	rjmp	.+140    	; 0x11e2 <__stack+0xe3>
		}
		case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation : {
			/* Default exit sequence for state RequestConfirmation */
			handle->stateConfVector[1] = SMO_last_state;
    1156:	86 e2       	ldi	r24, 0x26	; 38
    1158:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	9b 83       	std	Y+3, r25	; 0x03
    1160:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1162:	3f c0       	rjmp	.+126    	; 0x11e2 <__stack+0xe3>
		}
		case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_Confirm : {
			/* Default exit sequence for state Confirm */
			handle->stateConfVector[1] = SMO_last_state;
    1164:	86 e2       	ldi	r24, 0x26	; 38
    1166:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	9b 83       	std	Y+3, r25	; 0x03
    116e:	8a 83       	std	Y+2, r24	; 0x02
			/* Exit action for state 'Confirm'. */
			sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Confirm_time_event_0_raised) );		
    1170:	ce 01       	movw	r24, r28
    1172:	ce 96       	adiw	r24, 0x3e	; 62
    1174:	0e 94 b3 03 	call	0x766	; 0x766 <sMO_unsetTimer>
			break;
    1178:	34 c0       	rjmp	.+104    	; 0x11e2 <__stack+0xe3>
		}
		case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress : {
			/* Default exit sequence for state CheckKeyPress */
			handle->stateConfVector[1] = SMO_last_state;
    117a:	86 e2       	ldi	r24, 0x26	; 38
    117c:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	9b 83       	std	Y+3, r25	; 0x03
    1184:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1186:	2d c0       	rjmp	.+90     	; 0x11e2 <__stack+0xe3>
		}
		case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_ : {
			/* Default exit sequence for final state. */
			handle->stateConfVector[1] = SMO_last_state;
    1188:	86 e2       	ldi	r24, 0x26	; 38
    118a:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	9b 83       	std	Y+3, r25	; 0x03
    1192:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1194:	26 c0       	rjmp	.+76     	; 0x11e2 <__stack+0xe3>
		}
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Send : {
			/* Default exit sequence for state Send */
			handle->stateConfVector[1] = SMO_last_state;
    1196:	86 e2       	ldi	r24, 0x26	; 38
    1198:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	9b 83       	std	Y+3, r25	; 0x03
    11a0:	8a 83       	std	Y+2, r24	; 0x02
			break;
    11a2:	1f c0       	rjmp	.+62     	; 0x11e2 <__stack+0xe3>
		}
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Check : {
			/* Default exit sequence for state Check */
			handle->stateConfVector[1] = SMO_last_state;
    11a4:	86 e2       	ldi	r24, 0x26	; 38
    11a6:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	9b 83       	std	Y+3, r25	; 0x03
    11ae:	8a 83       	std	Y+2, r24	; 0x02
			break;
    11b0:	18 c0       	rjmp	.+48     	; 0x11e2 <__stack+0xe3>
		}
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_ : {
			/* Default exit sequence for final state. */
			handle->stateConfVector[1] = SMO_last_state;
    11b2:	86 e2       	ldi	r24, 0x26	; 38
    11b4:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	9b 83       	std	Y+3, r25	; 0x03
    11bc:	8a 83       	std	Y+2, r24	; 0x02
			break;
    11be:	11 c0       	rjmp	.+34     	; 0x11e2 <__stack+0xe3>
		}
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2 : {
			/* Default exit sequence for state SendFail2 */
			handle->stateConfVector[1] = SMO_last_state;
    11c0:	86 e2       	ldi	r24, 0x26	; 38
    11c2:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	9b 83       	std	Y+3, r25	; 0x03
    11ca:	8a 83       	std	Y+2, r24	; 0x02
			/* Exit action for state 'SendFail2'. */
			sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail2_time_event_0_raised) );		
    11cc:	ce 01       	movw	r24, r28
    11ce:	cf 96       	adiw	r24, 0x3f	; 63
    11d0:	0e 94 b3 03 	call	0x766	; 0x766 <sMO_unsetTimer>
			break;
    11d4:	06 c0       	rjmp	.+12     	; 0x11e2 <__stack+0xe3>
		}
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult : {
			/* Default exit sequence for state ResetResult */
			handle->stateConfVector[1] = SMO_last_state;
    11d6:	86 e2       	ldi	r24, 0x26	; 38
    11d8:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	9b 83       	std	Y+3, r25	; 0x03
    11e0:	8a 83       	std	Y+2, r24	; 0x02
			break;
		}
		default: break;
	}
	sMO_exitaction(handle);
}
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	08 95       	ret

000011e8 <sMO_runCycle>:
}

static void clearOutEvents(SMO* handle) {
}

void sMO_runCycle(SMO* handle) {
    11e8:	2f 92       	push	r2
    11ea:	3f 92       	push	r3
    11ec:	4f 92       	push	r4
    11ee:	5f 92       	push	r5
    11f0:	6f 92       	push	r6
    11f2:	7f 92       	push	r7
    11f4:	8f 92       	push	r8
    11f6:	9f 92       	push	r9
    11f8:	af 92       	push	r10
    11fa:	bf 92       	push	r11
    11fc:	cf 92       	push	r12
    11fe:	df 92       	push	r13
    1200:	ef 92       	push	r14
    1202:	ff 92       	push	r15
    1204:	0f 93       	push	r16
    1206:	1f 93       	push	r17
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
    120c:	ec 01       	movw	r28, r24
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
    120e:	1b 82       	std	Y+3, r1	; 0x03
    1210:	1a 82       	std	Y+2, r1	; 0x02
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	90 e0       	ldi	r25, 0x00	; 0
		handle->stateConfVectorPosition = 1;
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state ResetResult */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    1216:	01 e0       	ldi	r16, 0x01	; 1
    1218:	10 e0       	ldi	r17, 0x00	; 0
			/* Default enter sequence for state null */
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_;
    121a:	0f 2e       	mov	r0, r31
    121c:	f3 e2       	ldi	r31, 0x23	; 35
    121e:	3f 2e       	mov	r3, r31
    1220:	f0 2d       	mov	r31, r0
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
			/* Default enter sequence for state CheckKeyPress */
			/* Entry action for state 'CheckKeyPress'. */
			handle->ifaceKEYPAD.lastkey = 0;
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress;
    1222:	0f 2e       	mov	r0, r31
    1224:	fe e1       	ldi	r31, 0x1E	; 30
    1226:	2f 2e       	mov	r2, r31
    1228:	f0 2d       	mov	r31, r0
					/* Default exit sequence for state CheckKeyPress */
					handle->stateConfVector[1] = SMO_last_state;
					handle->stateConfVectorPosition = 1;
					/* Default enter sequence for state MenuD */
					/* Entry action for state 'MenuD'. */
					handle->iface.menuId = 4;
    122a:	cc 24       	eor	r12, r12
    122c:	dd 24       	eor	r13, r13
    122e:	76 01       	movw	r14, r12
    1230:	68 94       	set
    1232:	c2 f8       	bld	r12, 2
				/* Default exit sequence for state CheckKeyPress */
				handle->stateConfVector[1] = SMO_last_state;
				handle->stateConfVectorPosition = 1;
				/* Default enter sequence for state MenuC */
				/* Entry action for state 'MenuC'. */
				handle->iface.menuId = 3;
    1234:	0f 2e       	mov	r0, r31
    1236:	f3 e0       	ldi	r31, 0x03	; 3
    1238:	4f 2e       	mov	r4, r31
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	5f 2e       	mov	r5, r31
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	6f 2e       	mov	r6, r31
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	7f 2e       	mov	r7, r31
    1246:	f0 2d       	mov	r31, r0
		/* Default exit sequence for state CheckKeyPress */
		handle->stateConfVector[1] = SMO_last_state;
		handle->stateConfVectorPosition = 1;
		/* Default enter sequence for state MenuA */
		/* Entry action for state 'MenuA'. */
		handle->iface.menuId = 1;
    1248:	88 24       	eor	r8, r8
    124a:	99 24       	eor	r9, r9
    124c:	54 01       	movw	r10, r8
    124e:	83 94       	inc	r8
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
			
		switch (handle->stateConfVector[handle->stateConfVectorPosition]) {
    1250:	8c 0f       	add	r24, r28
    1252:	9d 1f       	adc	r25, r29
    1254:	dc 01       	movw	r26, r24
    1256:	ec 91       	ld	r30, X
    1258:	8e 2f       	mov	r24, r30
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	fc 01       	movw	r30, r24
    125e:	31 97       	sbiw	r30, 0x01	; 1
    1260:	e5 32       	cpi	r30, 0x25	; 37
    1262:	f1 05       	cpc	r31, r1
    1264:	10 f0       	brcs	.+4      	; 0x126a <sMO_runCycle+0x82>
    1266:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <sMO_runCycle+0x1c8a>
    126a:	e9 59       	subi	r30, 0x99	; 153
    126c:	ff 4f       	sbci	r31, 0xFF	; 255
    126e:	ee 0f       	add	r30, r30
    1270:	ff 1f       	adc	r31, r31
    1272:	05 90       	lpm	r0, Z+
    1274:	f4 91       	lpm	r31, Z
    1276:	e0 2d       	mov	r30, r0
    1278:	09 94       	ijmp
}

/* The reactions of state Init. */
static void sMO_react_main_region_on_r1_Init(SMO* handle) {
	/* The reactions of state Init. */
	if (handle->timeEvents.Init_time_event_0_raised) { 
    127a:	8c ad       	sts	0x6c, r24
    127c:	88 23       	and	r24, r24
    127e:	11 f4       	brne	.+4      	; 0x1284 <sMO_runCycle+0x9c>
    1280:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <sMO_runCycle+0x1c8a>
		/* Default exit sequence for state Init */
		handle->stateConfVector[0] = SMO_last_state;
    1284:	86 e2       	ldi	r24, 0x26	; 38
    1286:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    1288:	1b 82       	std	Y+3, r1	; 0x03
    128a:	1a 82       	std	Y+2, r1	; 0x02
		/* Exit action for state 'Init'. */
		sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) );		
    128c:	ce 01       	movw	r24, r28
    128e:	cc 96       	adiw	r24, 0x3c	; 60
    1290:	0e 94 b3 03 	call	0x766	; 0x766 <sMO_unsetTimer>
		/* Default enter sequence for state Running */
		/* Default enter sequence for region keypad */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    1294:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceKEYPAD_checkpress>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	8c 83       	std	Y+4, r24	; 0x04
    129e:	9d 83       	std	Y+5, r25	; 0x05
    12a0:	ae 83       	std	Y+6, r26	; 0x06
    12a2:	bf 83       	std	Y+7, r27	; 0x07
		handle->ifaceKEYPAD.key_down = bool_false;
    12a4:	1c 86       	std	Y+12, r1	; 0x0c
		handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKey;
    12a6:	83 e0       	ldi	r24, 0x03	; 3
    12a8:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    12aa:	1b 82       	std	Y+3, r1	; 0x03
    12ac:	1a 82       	std	Y+2, r1	; 0x02
		/* Default enter sequence for region running main */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    12ae:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    12b2:	88 e0       	ldi	r24, 0x08	; 8
    12b4:	92 e0       	ldi	r25, 0x02	; 2
    12b6:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    12ba:	86 e1       	ldi	r24, 0x16	; 22
    12bc:	92 e0       	ldi	r25, 0x02	; 2
    12be:	40 e0       	ldi	r20, 0x00	; 0
    12c0:	50 e0       	ldi	r21, 0x00	; 0
    12c2:	ba 01       	movw	r22, r20
    12c4:	01 e0       	ldi	r16, 0x01	; 1
    12c6:	10 e0       	ldi	r17, 0x00	; 0
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    12d0:	1e a6       	lds	r17, 0xbe
    12d2:	1f a6       	lds	r17, 0xbf
    12d4:	18 aa       	sts	0x98, r17
    12d6:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    12d8:	85 e0       	ldi	r24, 0x05	; 5
    12da:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	9b 83       	std	Y+3, r25	; 0x03
    12e2:	8a 83       	std	Y+2, r24	; 0x02
    12e4:	0c 94 62 17 	jmp	0x2ec4	; 0x2ec4 <sMO_runCycle+0x1cdc>
}

/* The reactions of state CheckKey. */
static void sMO_react_main_region_on_r1_Running_keypad_CheckKey(SMO* handle) {
	/* The reactions of state CheckKey. */
	if (handle->ifaceKEYPAD.key != 0) { 
    12e8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ea:	9d 81       	ldd	r25, Y+5	; 0x05
    12ec:	ae 81       	ldd	r26, Y+6	; 0x06
    12ee:	bf 81       	ldd	r27, Y+7	; 0x07
    12f0:	00 97       	sbiw	r24, 0x00	; 0
    12f2:	a1 05       	cpc	r26, r1
    12f4:	b1 05       	cpc	r27, r1
    12f6:	c1 f0       	breq	.+48     	; 0x1328 <sMO_runCycle+0x140>
		/* Default exit sequence for state CheckKey */
		handle->stateConfVector[0] = SMO_last_state;
    12f8:	26 e2       	ldi	r18, 0x26	; 38
    12fa:	28 83       	st	Y, r18
		handle->stateConfVectorPosition = 0;
    12fc:	1b 82       	std	Y+3, r1	; 0x03
    12fe:	1a 82       	std	Y+2, r1	; 0x02
		handle->ifaceKEYPAD.lastkey = handle->ifaceKEYPAD.key;
    1300:	88 87       	std	Y+8, r24	; 0x08
    1302:	99 87       	std	Y+9, r25	; 0x09
    1304:	aa 87       	std	Y+10, r26	; 0x0a
    1306:	bb 87       	std	Y+11, r27	; 0x0b
		/* Default enter sequence for state CheckKeyDown */
		/* Entry action for state 'CheckKeyDown'. */
		handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    1308:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceKEYPAD_checkpress>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	8c 83       	std	Y+4, r24	; 0x04
    1312:	9d 83       	std	Y+5, r25	; 0x05
    1314:	ae 83       	std	Y+6, r26	; 0x06
    1316:	bf 83       	std	Y+7, r27	; 0x07
		handle->ifaceKEYPAD.key_down = bool_true;
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	8c 87       	std	Y+12, r24	; 0x0c
		handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKeyDown;
    131c:	84 e0       	ldi	r24, 0x04	; 4
    131e:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    1320:	1b 82       	std	Y+3, r1	; 0x03
    1322:	1a 82       	std	Y+2, r1	; 0x02
    1324:	0c 94 5b 17 	jmp	0x2eb6	; 0x2eb6 <sMO_runCycle+0x1cce>
	}  else {
		if (handle->ifaceKEYPAD.key == 0) { 
			/* Default enter sequence for state CheckKey */
			/* Entry action for state 'CheckKey'. */
			handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    1328:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceKEYPAD_checkpress>
    132c:	dc 01       	movw	r26, r24
    132e:	cb 01       	movw	r24, r22
    1330:	8c 83       	std	Y+4, r24	; 0x04
    1332:	9d 83       	std	Y+5, r25	; 0x05
    1334:	ae 83       	std	Y+6, r26	; 0x06
    1336:	bf 83       	std	Y+7, r27	; 0x07
			handle->ifaceKEYPAD.key_down = bool_false;
    1338:	1c 86       	std	Y+12, r1	; 0x0c
			handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKey;
    133a:	83 e0       	ldi	r24, 0x03	; 3
    133c:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    133e:	1b 82       	std	Y+3, r1	; 0x03
    1340:	1a 82       	std	Y+2, r1	; 0x02
    1342:	0c 94 5b 17 	jmp	0x2eb6	; 0x2eb6 <sMO_runCycle+0x1cce>
}

/* The reactions of state CheckKeyDown. */
static void sMO_react_main_region_on_r1_Running_keypad_CheckKeyDown(SMO* handle) {
	/* The reactions of state CheckKeyDown. */
	if (handle->ifaceKEYPAD.key == 0) { 
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	9d 81       	ldd	r25, Y+5	; 0x05
    134a:	ae 81       	ldd	r26, Y+6	; 0x06
    134c:	bf 81       	ldd	r27, Y+7	; 0x07
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	a1 05       	cpc	r26, r1
    1352:	b1 05       	cpc	r27, r1
    1354:	a9 f4       	brne	.+42     	; 0x1380 <sMO_runCycle+0x198>
		/* Default exit sequence for state CheckKeyDown */
		handle->stateConfVector[0] = SMO_last_state;
    1356:	86 e2       	ldi	r24, 0x26	; 38
    1358:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    135a:	1b 82       	std	Y+3, r1	; 0x03
    135c:	1a 82       	std	Y+2, r1	; 0x02
		handle->ifaceKEYPAD.key_pressed_raised = bool_true;
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	8d 87       	std	Y+13, r24	; 0x0d
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    1362:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceKEYPAD_checkpress>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	8c 83       	std	Y+4, r24	; 0x04
    136c:	9d 83       	std	Y+5, r25	; 0x05
    136e:	ae 83       	std	Y+6, r26	; 0x06
    1370:	bf 83       	std	Y+7, r27	; 0x07
		handle->ifaceKEYPAD.key_down = bool_false;
    1372:	1c 86       	std	Y+12, r1	; 0x0c
		handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKey;
    1374:	83 e0       	ldi	r24, 0x03	; 3
    1376:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    1378:	1b 82       	std	Y+3, r1	; 0x03
    137a:	1a 82       	std	Y+2, r1	; 0x02
    137c:	0c 94 5b 17 	jmp	0x2eb6	; 0x2eb6 <sMO_runCycle+0x1cce>
	}  else {
		if (handle->ifaceKEYPAD.key != 0) { 
			/* Default enter sequence for state CheckKeyDown */
			/* Entry action for state 'CheckKeyDown'. */
			handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    1380:	0e 94 49 02 	call	0x492	; 0x492 <sMOIfaceKEYPAD_checkpress>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	8c 83       	std	Y+4, r24	; 0x04
    138a:	9d 83       	std	Y+5, r25	; 0x05
    138c:	ae 83       	std	Y+6, r26	; 0x06
    138e:	bf 83       	std	Y+7, r27	; 0x07
			handle->ifaceKEYPAD.key_down = bool_true;
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	8c 87       	std	Y+12, r24	; 0x0c
			handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKeyDown;
    1394:	84 e0       	ldi	r24, 0x04	; 4
    1396:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    1398:	1b 82       	std	Y+3, r1	; 0x03
    139a:	1a 82       	std	Y+2, r1	; 0x02
    139c:	0c 94 5b 17 	jmp	0x2eb6	; 0x2eb6 <sMO_runCycle+0x1cce>
static void sMO_react_main_region_on_r1_Running_running_main_ShowMenu(SMO* handle) {
	/* The reactions of state ShowMenu. */
	if (bool_true) { 
		/* Default exit sequence for state ShowMenu */
		handle->stateConfVector[1] = SMO_last_state;
		handle->stateConfVectorPosition = 1;
    13a0:	1b 83       	std	Y+3, r17	; 0x03
    13a2:	0a 83       	std	Y+2, r16	; 0x02
		/* Default enter sequence for state CheckKeyPress */
		/* Entry action for state 'CheckKeyPress'. */
		handle->ifaceKEYPAD.lastkey = 0;
    13a4:	18 86       	std	Y+8, r1	; 0x08
    13a6:	19 86       	std	Y+9, r1	; 0x09
    13a8:	1a 86       	std	Y+10, r1	; 0x0a
    13aa:	1b 86       	std	Y+11, r1	; 0x0b
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_CheckKeyPress;
    13ac:	81 e1       	ldi	r24, 0x11	; 17
    13ae:	89 83       	std	Y+1, r24	; 0x01
    13b0:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <sMO_runCycle+0x1c8a>
}

/* The reactions of state ShowCode. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode(SMO* handle) {
	/* The reactions of state ShowCode. */
	if (handle->iface.menuId == 0) { 
    13b4:	8e a5       	lds	r24, 0x6e
    13b6:	9f a5       	lds	r25, 0x6f
    13b8:	a8 a9       	sts	0x48, r26
    13ba:	b9 a9       	sts	0x49, r27
    13bc:	00 97       	sbiw	r24, 0x00	; 0
    13be:	a1 05       	cpc	r26, r1
    13c0:	b1 05       	cpc	r27, r1
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <sMO_runCycle+0x1de>
    13c4:	6a c0       	rjmp	.+212    	; 0x149a <sMO_runCycle+0x2b2>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	8a 30       	cpi	r24, 0x0A	; 10
    13ca:	41 f1       	breq	.+80     	; 0x141c <sMO_runCycle+0x234>
    13cc:	8b 30       	cpi	r24, 0x0B	; 11
    13ce:	40 f4       	brcc	.+16     	; 0x13e0 <sMO_runCycle+0x1f8>
    13d0:	88 30       	cpi	r24, 0x08	; 8
    13d2:	b1 f0       	breq	.+44     	; 0x1400 <sMO_runCycle+0x218>
    13d4:	89 30       	cpi	r24, 0x09	; 9
    13d6:	d8 f4       	brcc	.+54     	; 0x140e <sMO_runCycle+0x226>
    13d8:	87 30       	cpi	r24, 0x07	; 7
    13da:	09 f0       	breq	.+2      	; 0x13de <sMO_runCycle+0x1f6>
    13dc:	41 c0       	rjmp	.+130    	; 0x1460 <sMO_runCycle+0x278>
    13de:	09 c0       	rjmp	.+18     	; 0x13f2 <sMO_runCycle+0x20a>
    13e0:	8c 30       	cpi	r24, 0x0C	; 12
    13e2:	51 f1       	breq	.+84     	; 0x1438 <sMO_runCycle+0x250>
    13e4:	8c 30       	cpi	r24, 0x0C	; 12
    13e6:	08 f1       	brcs	.+66     	; 0x142a <sMO_runCycle+0x242>
    13e8:	8e 30       	cpi	r24, 0x0E	; 14
    13ea:	69 f1       	breq	.+90     	; 0x1446 <sMO_runCycle+0x25e>
    13ec:	8f 30       	cpi	r24, 0x0F	; 15
    13ee:	c1 f5       	brne	.+112    	; 0x1460 <sMO_runCycle+0x278>
    13f0:	31 c0       	rjmp	.+98     	; 0x1454 <sMO_runCycle+0x26c>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    13f2:	86 e2       	ldi	r24, 0x26	; 38
    13f4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	9b 83       	std	Y+3, r25	; 0x03
    13fc:	8a 83       	std	Y+2, r24	; 0x02
    13fe:	30 c0       	rjmp	.+96     	; 0x1460 <sMO_runCycle+0x278>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1400:	86 e2       	ldi	r24, 0x26	; 38
    1402:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	9b 83       	std	Y+3, r25	; 0x03
    140a:	8a 83       	std	Y+2, r24	; 0x02
    140c:	29 c0       	rjmp	.+82     	; 0x1460 <sMO_runCycle+0x278>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    140e:	86 e2       	ldi	r24, 0x26	; 38
    1410:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	9b 83       	std	Y+3, r25	; 0x03
    1418:	8a 83       	std	Y+2, r24	; 0x02
    141a:	22 c0       	rjmp	.+68     	; 0x1460 <sMO_runCycle+0x278>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    141c:	86 e2       	ldi	r24, 0x26	; 38
    141e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	9b 83       	std	Y+3, r25	; 0x03
    1426:	8a 83       	std	Y+2, r24	; 0x02
    1428:	1b c0       	rjmp	.+54     	; 0x1460 <sMO_runCycle+0x278>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    142a:	86 e2       	ldi	r24, 0x26	; 38
    142c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	9b 83       	std	Y+3, r25	; 0x03
    1434:	8a 83       	std	Y+2, r24	; 0x02
    1436:	14 c0       	rjmp	.+40     	; 0x1460 <sMO_runCycle+0x278>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1438:	86 e2       	ldi	r24, 0x26	; 38
    143a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	9b 83       	std	Y+3, r25	; 0x03
    1442:	8a 83       	std	Y+2, r24	; 0x02
    1444:	0d c0       	rjmp	.+26     	; 0x1460 <sMO_runCycle+0x278>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1446:	86 e2       	ldi	r24, 0x26	; 38
    1448:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	9b 83       	std	Y+3, r25	; 0x03
    1450:	8a 83       	std	Y+2, r24	; 0x02
    1452:	06 c0       	rjmp	.+12     	; 0x1460 <sMO_runCycle+0x278>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1454:	86 e2       	ldi	r24, 0x26	; 38
    1456:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	9b 83       	std	Y+3, r25	; 0x03
    145e:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1460:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1464:	88 e0       	ldi	r24, 0x08	; 8
    1466:	92 e0       	ldi	r25, 0x02	; 2
    1468:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    146c:	86 e1       	ldi	r24, 0x16	; 22
    146e:	92 e0       	ldi	r25, 0x02	; 2
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	50 e0       	ldi	r21, 0x00	; 0
    1474:	ba 01       	movw	r22, r20
    1476:	01 e0       	ldi	r16, 0x01	; 1
    1478:	10 e0       	ldi	r17, 0x00	; 0
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1482:	1e a6       	lds	r17, 0xbe
    1484:	1f a6       	lds	r17, 0xbf
    1486:	18 aa       	sts	0x98, r17
    1488:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    148a:	85 e0       	ldi	r24, 0x05	; 5
    148c:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	9b 83       	std	Y+3, r25	; 0x03
    1494:	8a 83       	std	Y+2, r24	; 0x02
    1496:	0c 94 62 17 	jmp	0x2ec4	; 0x2ec4 <sMO_runCycle+0x1cdc>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state ShowCode */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    149a:	1b 83       	std	Y+3, r17	; 0x03
    149c:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress1 */
			/* Entry action for state 'CheckKeyPress1'. */
			handle->ifaceKEYPAD.lastkey = 0;
    149e:	18 86       	std	Y+8, r1	; 0x08
    14a0:	19 86       	std	Y+9, r1	; 0x09
    14a2:	1a 86       	std	Y+10, r1	; 0x0a
    14a4:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1;
    14a6:	89 e0       	ldi	r24, 0x09	; 9
    14a8:	89 83       	std	Y+1, r24	; 0x01
    14aa:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <sMO_runCycle+0x1c8a>
}

/* The reactions of state EnterCode. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode(SMO* handle) {
	/* The reactions of state EnterCode. */
	if (handle->iface.menuId == 0) { 
    14ae:	8e a5       	lds	r24, 0x6e
    14b0:	9f a5       	lds	r25, 0x6f
    14b2:	a8 a9       	sts	0x48, r26
    14b4:	b9 a9       	sts	0x49, r27
    14b6:	00 97       	sbiw	r24, 0x00	; 0
    14b8:	a1 05       	cpc	r26, r1
    14ba:	b1 05       	cpc	r27, r1
    14bc:	09 f0       	breq	.+2      	; 0x14c0 <sMO_runCycle+0x2d8>
    14be:	6a c0       	rjmp	.+212    	; 0x1594 <sMO_runCycle+0x3ac>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	8a 30       	cpi	r24, 0x0A	; 10
    14c4:	41 f1       	breq	.+80     	; 0x1516 <sMO_runCycle+0x32e>
    14c6:	8b 30       	cpi	r24, 0x0B	; 11
    14c8:	40 f4       	brcc	.+16     	; 0x14da <sMO_runCycle+0x2f2>
    14ca:	88 30       	cpi	r24, 0x08	; 8
    14cc:	b1 f0       	breq	.+44     	; 0x14fa <sMO_runCycle+0x312>
    14ce:	89 30       	cpi	r24, 0x09	; 9
    14d0:	d8 f4       	brcc	.+54     	; 0x1508 <sMO_runCycle+0x320>
    14d2:	87 30       	cpi	r24, 0x07	; 7
    14d4:	09 f0       	breq	.+2      	; 0x14d8 <sMO_runCycle+0x2f0>
    14d6:	41 c0       	rjmp	.+130    	; 0x155a <sMO_runCycle+0x372>
    14d8:	09 c0       	rjmp	.+18     	; 0x14ec <sMO_runCycle+0x304>
    14da:	8c 30       	cpi	r24, 0x0C	; 12
    14dc:	51 f1       	breq	.+84     	; 0x1532 <sMO_runCycle+0x34a>
    14de:	8c 30       	cpi	r24, 0x0C	; 12
    14e0:	08 f1       	brcs	.+66     	; 0x1524 <sMO_runCycle+0x33c>
    14e2:	8e 30       	cpi	r24, 0x0E	; 14
    14e4:	69 f1       	breq	.+90     	; 0x1540 <sMO_runCycle+0x358>
    14e6:	8f 30       	cpi	r24, 0x0F	; 15
    14e8:	c1 f5       	brne	.+112    	; 0x155a <sMO_runCycle+0x372>
    14ea:	31 c0       	rjmp	.+98     	; 0x154e <sMO_runCycle+0x366>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    14ec:	86 e2       	ldi	r24, 0x26	; 38
    14ee:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	9b 83       	std	Y+3, r25	; 0x03
    14f6:	8a 83       	std	Y+2, r24	; 0x02
    14f8:	30 c0       	rjmp	.+96     	; 0x155a <sMO_runCycle+0x372>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    14fa:	86 e2       	ldi	r24, 0x26	; 38
    14fc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	9b 83       	std	Y+3, r25	; 0x03
    1504:	8a 83       	std	Y+2, r24	; 0x02
    1506:	29 c0       	rjmp	.+82     	; 0x155a <sMO_runCycle+0x372>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1508:	86 e2       	ldi	r24, 0x26	; 38
    150a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	9b 83       	std	Y+3, r25	; 0x03
    1512:	8a 83       	std	Y+2, r24	; 0x02
    1514:	22 c0       	rjmp	.+68     	; 0x155a <sMO_runCycle+0x372>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1516:	86 e2       	ldi	r24, 0x26	; 38
    1518:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	9b 83       	std	Y+3, r25	; 0x03
    1520:	8a 83       	std	Y+2, r24	; 0x02
    1522:	1b c0       	rjmp	.+54     	; 0x155a <sMO_runCycle+0x372>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1524:	86 e2       	ldi	r24, 0x26	; 38
    1526:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	9b 83       	std	Y+3, r25	; 0x03
    152e:	8a 83       	std	Y+2, r24	; 0x02
    1530:	14 c0       	rjmp	.+40     	; 0x155a <sMO_runCycle+0x372>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1532:	86 e2       	ldi	r24, 0x26	; 38
    1534:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	9b 83       	std	Y+3, r25	; 0x03
    153c:	8a 83       	std	Y+2, r24	; 0x02
    153e:	0d c0       	rjmp	.+26     	; 0x155a <sMO_runCycle+0x372>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1540:	86 e2       	ldi	r24, 0x26	; 38
    1542:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	9b 83       	std	Y+3, r25	; 0x03
    154a:	8a 83       	std	Y+2, r24	; 0x02
    154c:	06 c0       	rjmp	.+12     	; 0x155a <sMO_runCycle+0x372>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    154e:	86 e2       	ldi	r24, 0x26	; 38
    1550:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	9b 83       	std	Y+3, r25	; 0x03
    1558:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    155a:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    155e:	88 e0       	ldi	r24, 0x08	; 8
    1560:	92 e0       	ldi	r25, 0x02	; 2
    1562:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    1566:	86 e1       	ldi	r24, 0x16	; 22
    1568:	92 e0       	ldi	r25, 0x02	; 2
    156a:	40 e0       	ldi	r20, 0x00	; 0
    156c:	50 e0       	ldi	r21, 0x00	; 0
    156e:	ba 01       	movw	r22, r20
    1570:	01 e0       	ldi	r16, 0x01	; 1
    1572:	10 e0       	ldi	r17, 0x00	; 0
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    157c:	1e a6       	lds	r17, 0xbe
    157e:	1f a6       	lds	r17, 0xbf
    1580:	18 aa       	sts	0x98, r17
    1582:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1584:	85 e0       	ldi	r24, 0x05	; 5
    1586:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	9b 83       	std	Y+3, r25	; 0x03
    158e:	8a 83       	std	Y+2, r24	; 0x02
    1590:	0c 94 62 17 	jmp	0x2ec4	; 0x2ec4 <sMO_runCycle+0x1cdc>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state EnterCode */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    1594:	1b 83       	std	Y+3, r17	; 0x03
    1596:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress1 */
			/* Entry action for state 'CheckKeyPress1'. */
			handle->ifaceKEYPAD.lastkey = 0;
    1598:	18 86       	std	Y+8, r1	; 0x08
    159a:	19 86       	std	Y+9, r1	; 0x09
    159c:	1a 86       	std	Y+10, r1	; 0x0a
    159e:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1;
    15a0:	89 e0       	ldi	r24, 0x09	; 9
    15a2:	89 83       	std	Y+1, r24	; 0x01
    15a4:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <sMO_runCycle+0x1c8a>
}

/* The reactions of state CheckKeyPress1. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1(SMO* handle) {
	/* The reactions of state CheckKeyPress1. */
	if (handle->iface.menuId == 0) { 
    15a8:	8e a5       	lds	r24, 0x6e
    15aa:	9f a5       	lds	r25, 0x6f
    15ac:	a8 a9       	sts	0x48, r26
    15ae:	b9 a9       	sts	0x49, r27
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	a1 05       	cpc	r26, r1
    15b4:	b1 05       	cpc	r27, r1
    15b6:	09 f0       	breq	.+2      	; 0x15ba <sMO_runCycle+0x3d2>
    15b8:	6a c0       	rjmp	.+212    	; 0x168e <sMO_runCycle+0x4a6>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	8a 30       	cpi	r24, 0x0A	; 10
    15be:	41 f1       	breq	.+80     	; 0x1610 <sMO_runCycle+0x428>
    15c0:	8b 30       	cpi	r24, 0x0B	; 11
    15c2:	40 f4       	brcc	.+16     	; 0x15d4 <sMO_runCycle+0x3ec>
    15c4:	88 30       	cpi	r24, 0x08	; 8
    15c6:	b1 f0       	breq	.+44     	; 0x15f4 <sMO_runCycle+0x40c>
    15c8:	89 30       	cpi	r24, 0x09	; 9
    15ca:	d8 f4       	brcc	.+54     	; 0x1602 <sMO_runCycle+0x41a>
    15cc:	87 30       	cpi	r24, 0x07	; 7
    15ce:	09 f0       	breq	.+2      	; 0x15d2 <sMO_runCycle+0x3ea>
    15d0:	41 c0       	rjmp	.+130    	; 0x1654 <sMO_runCycle+0x46c>
    15d2:	09 c0       	rjmp	.+18     	; 0x15e6 <sMO_runCycle+0x3fe>
    15d4:	8c 30       	cpi	r24, 0x0C	; 12
    15d6:	51 f1       	breq	.+84     	; 0x162c <sMO_runCycle+0x444>
    15d8:	8c 30       	cpi	r24, 0x0C	; 12
    15da:	08 f1       	brcs	.+66     	; 0x161e <sMO_runCycle+0x436>
    15dc:	8e 30       	cpi	r24, 0x0E	; 14
    15de:	69 f1       	breq	.+90     	; 0x163a <sMO_runCycle+0x452>
    15e0:	8f 30       	cpi	r24, 0x0F	; 15
    15e2:	c1 f5       	brne	.+112    	; 0x1654 <sMO_runCycle+0x46c>
    15e4:	31 c0       	rjmp	.+98     	; 0x1648 <sMO_runCycle+0x460>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    15e6:	86 e2       	ldi	r24, 0x26	; 38
    15e8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	9b 83       	std	Y+3, r25	; 0x03
    15f0:	8a 83       	std	Y+2, r24	; 0x02
    15f2:	30 c0       	rjmp	.+96     	; 0x1654 <sMO_runCycle+0x46c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    15f4:	86 e2       	ldi	r24, 0x26	; 38
    15f6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	9b 83       	std	Y+3, r25	; 0x03
    15fe:	8a 83       	std	Y+2, r24	; 0x02
    1600:	29 c0       	rjmp	.+82     	; 0x1654 <sMO_runCycle+0x46c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1602:	86 e2       	ldi	r24, 0x26	; 38
    1604:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	9b 83       	std	Y+3, r25	; 0x03
    160c:	8a 83       	std	Y+2, r24	; 0x02
    160e:	22 c0       	rjmp	.+68     	; 0x1654 <sMO_runCycle+0x46c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1610:	86 e2       	ldi	r24, 0x26	; 38
    1612:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	9b 83       	std	Y+3, r25	; 0x03
    161a:	8a 83       	std	Y+2, r24	; 0x02
    161c:	1b c0       	rjmp	.+54     	; 0x1654 <sMO_runCycle+0x46c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    161e:	86 e2       	ldi	r24, 0x26	; 38
    1620:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	9b 83       	std	Y+3, r25	; 0x03
    1628:	8a 83       	std	Y+2, r24	; 0x02
    162a:	14 c0       	rjmp	.+40     	; 0x1654 <sMO_runCycle+0x46c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    162c:	86 e2       	ldi	r24, 0x26	; 38
    162e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	9b 83       	std	Y+3, r25	; 0x03
    1636:	8a 83       	std	Y+2, r24	; 0x02
    1638:	0d c0       	rjmp	.+26     	; 0x1654 <sMO_runCycle+0x46c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    163a:	86 e2       	ldi	r24, 0x26	; 38
    163c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	9b 83       	std	Y+3, r25	; 0x03
    1644:	8a 83       	std	Y+2, r24	; 0x02
    1646:	06 c0       	rjmp	.+12     	; 0x1654 <sMO_runCycle+0x46c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1648:	86 e2       	ldi	r24, 0x26	; 38
    164a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	9b 83       	std	Y+3, r25	; 0x03
    1652:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1654:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1658:	88 e0       	ldi	r24, 0x08	; 8
    165a:	92 e0       	ldi	r25, 0x02	; 2
    165c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    1660:	86 e1       	ldi	r24, 0x16	; 22
    1662:	92 e0       	ldi	r25, 0x02	; 2
    1664:	40 e0       	ldi	r20, 0x00	; 0
    1666:	50 e0       	ldi	r21, 0x00	; 0
    1668:	ba 01       	movw	r22, r20
    166a:	01 e0       	ldi	r16, 0x01	; 1
    166c:	10 e0       	ldi	r17, 0x00	; 0
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1676:	1e a6       	lds	r17, 0xbe
    1678:	1f a6       	lds	r17, 0xbf
    167a:	18 aa       	sts	0x98, r17
    167c:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    167e:	85 e0       	ldi	r24, 0x05	; 5
    1680:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	9b 83       	std	Y+3, r25	; 0x03
    1688:	8a 83       	std	Y+2, r24	; 0x02
    168a:	0c 94 62 17 	jmp	0x2ec4	; 0x2ec4 <sMO_runCycle+0x1cdc>
	}  else {
		if (handle->ifaceDISH.pos < 3 && handle->ifaceKEYPAD.lastkey <= 9 && handle->ifaceKEYPAD.lastkey >= 1 && handle->ifaceKEYPAD.key_pressed_raised) { 
    168e:	89 a5       	lds	r24, 0x69
    1690:	9a a5       	lds	r25, 0x6a
    1692:	ab a5       	lds	r26, 0x6b
    1694:	bc a5       	lds	r27, 0x6c
    1696:	83 30       	cpi	r24, 0x03	; 3
    1698:	91 05       	cpc	r25, r1
    169a:	a1 05       	cpc	r26, r1
    169c:	b1 05       	cpc	r27, r1
    169e:	0c f0       	brlt	.+2      	; 0x16a2 <sMO_runCycle+0x4ba>
    16a0:	6a c0       	rjmp	.+212    	; 0x1776 <sMO_runCycle+0x58e>
    16a2:	48 85       	ldd	r20, Y+8	; 0x08
    16a4:	59 85       	ldd	r21, Y+9	; 0x09
    16a6:	6a 85       	ldd	r22, Y+10	; 0x0a
    16a8:	7b 85       	ldd	r23, Y+11	; 0x0b
    16aa:	4a 30       	cpi	r20, 0x0A	; 10
    16ac:	51 05       	cpc	r21, r1
    16ae:	61 05       	cpc	r22, r1
    16b0:	71 05       	cpc	r23, r1
    16b2:	0c f0       	brlt	.+2      	; 0x16b6 <sMO_runCycle+0x4ce>
    16b4:	4e c0       	rjmp	.+156    	; 0x1752 <sMO_runCycle+0x56a>
    16b6:	14 16       	cp	r1, r20
    16b8:	15 06       	cpc	r1, r21
    16ba:	16 06       	cpc	r1, r22
    16bc:	17 06       	cpc	r1, r23
    16be:	0c f0       	brlt	.+2      	; 0x16c2 <sMO_runCycle+0x4da>
    16c0:	48 c0       	rjmp	.+144    	; 0x1752 <sMO_runCycle+0x56a>
    16c2:	2d 85       	ldd	r18, Y+13	; 0x0d
    16c4:	22 23       	and	r18, r18
    16c6:	09 f4       	brne	.+2      	; 0x16ca <sMO_runCycle+0x4e2>
    16c8:	44 c0       	rjmp	.+136    	; 0x1752 <sMO_runCycle+0x56a>
    16ca:	6a 01       	movw	r12, r20
    16cc:	7b 01       	movw	r14, r22
			/* Default exit sequence for state CheckKeyPress1 */
			handle->stateConfVector[1] = SMO_last_state;
    16ce:	26 e2       	ldi	r18, 0x26	; 38
    16d0:	29 83       	std	Y+1, r18	; 0x01
			handle->stateConfVectorPosition = 1;
    16d2:	88 24       	eor	r8, r8
    16d4:	99 24       	eor	r9, r9
    16d6:	83 94       	inc	r8
    16d8:	9b 82       	std	Y+3, r9	; 0x03
    16da:	8a 82       	std	Y+2, r8	; 0x02
			/* Default enter sequence for state EnterCode */
			/* Entry action for state 'EnterCode'. */
			sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    16dc:	9c 01       	movw	r18, r24
    16de:	ad 01       	movw	r20, r26
    16e0:	22 0f       	add	r18, r18
    16e2:	33 1f       	adc	r19, r19
    16e4:	44 1f       	adc	r20, r20
    16e6:	55 1f       	adc	r21, r21
    16e8:	c7 01       	movw	r24, r14
    16ea:	b6 01       	movw	r22, r12
    16ec:	ee 24       	eor	r14, r14
    16ee:	ff 24       	eor	r15, r15
    16f0:	87 01       	movw	r16, r14
    16f2:	e3 94       	inc	r14
    16f4:	aa 24       	eor	r10, r10
    16f6:	bb 24       	eor	r11, r11
    16f8:	65 01       	movw	r12, r10
    16fa:	a3 94       	inc	r10
    16fc:	0e 94 65 02 	call	0x4ca	; 0x4ca <sMOIfaceLCD_writeNumberXY>
			handle->ifaceDISH.pos += 1;
    1700:	89 a5       	lds	r24, 0x69
    1702:	9a a5       	lds	r25, 0x6a
    1704:	ab a5       	lds	r26, 0x6b
    1706:	bc a5       	lds	r27, 0x6c
    1708:	01 96       	adiw	r24, 0x01	; 1
    170a:	a1 1d       	adc	r26, r1
    170c:	b1 1d       	adc	r27, r1
    170e:	89 a7       	lds	r24, 0x79
    1710:	9a a7       	lds	r25, 0x7a
    1712:	ab a7       	lds	r26, 0x7b
    1714:	bc a7       	lds	r27, 0x7c
			handle->ifaceDISH.ID = handle->ifaceDISH.ID * 10 + handle->ifaceKEYPAD.lastkey;
    1716:	69 a1       	lds	r22, 0x49
    1718:	7a a1       	lds	r23, 0x4a
    171a:	8b a1       	lds	r24, 0x4b
    171c:	9c a1       	lds	r25, 0x4c
    171e:	2a e0       	ldi	r18, 0x0A	; 10
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	40 e0       	ldi	r20, 0x00	; 0
    1724:	50 e0       	ldi	r21, 0x00	; 0
    1726:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <__mulsi3>
    172a:	ab 01       	movw	r20, r22
    172c:	bc 01       	movw	r22, r24
    172e:	88 85       	ldd	r24, Y+8	; 0x08
    1730:	99 85       	ldd	r25, Y+9	; 0x09
    1732:	aa 85       	ldd	r26, Y+10	; 0x0a
    1734:	bb 85       	ldd	r27, Y+11	; 0x0b
    1736:	84 0f       	add	r24, r20
    1738:	95 1f       	adc	r25, r21
    173a:	a6 1f       	adc	r26, r22
    173c:	b7 1f       	adc	r27, r23
    173e:	89 a3       	lds	r24, 0x59
    1740:	9a a3       	lds	r25, 0x5a
    1742:	ab a3       	lds	r26, 0x5b
    1744:	bc a3       	lds	r27, 0x5c
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode;
    1746:	88 e0       	ldi	r24, 0x08	; 8
    1748:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    174a:	9b 82       	std	Y+3, r9	; 0x03
    174c:	8a 82       	std	Y+2, r8	; 0x02
    174e:	0c 94 62 17 	jmp	0x2ec4	; 0x2ec4 <sMO_runCycle+0x1cdc>
		}  else {
			if (handle->ifaceDISH.pos < 3 && handle->ifaceKEYPAD.lastkey == 10 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1752:	4a 30       	cpi	r20, 0x0A	; 10
    1754:	51 05       	cpc	r21, r1
    1756:	61 05       	cpc	r22, r1
    1758:	71 05       	cpc	r23, r1
    175a:	69 f4       	brne	.+26     	; 0x1776 <sMO_runCycle+0x58e>
    175c:	8d 85       	ldd	r24, Y+13	; 0x0d
    175e:	88 23       	and	r24, r24
    1760:	51 f0       	breq	.+20     	; 0x1776 <sMO_runCycle+0x58e>
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
				handle->stateConfVectorPosition = 1;
    1762:	1b 83       	std	Y+3, r17	; 0x03
    1764:	0a 83       	std	Y+2, r16	; 0x02
				/* Default enter sequence for state CheckCode0 */
				/* Entry action for state 'CheckCode0'. */
				handle->ifaceKEYPAD.lastkey = 0;
    1766:	18 86       	std	Y+8, r1	; 0x08
    1768:	19 86       	std	Y+9, r1	; 0x09
    176a:	1a 86       	std	Y+10, r1	; 0x0a
    176c:	1b 86       	std	Y+11, r1	; 0x0b
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0;
    176e:	8a e0       	ldi	r24, 0x0A	; 10
    1770:	89 83       	std	Y+1, r24	; 0x01
    1772:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <sMO_runCycle+0x1c8a>
				handle->stateConfVectorPosition = 1;
			}  else {
				if (handle->ifaceKEYPAD.lastkey == 12 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1776:	88 85       	ldd	r24, Y+8	; 0x08
    1778:	99 85       	ldd	r25, Y+9	; 0x09
    177a:	aa 85       	ldd	r26, Y+10	; 0x0a
    177c:	bb 85       	ldd	r27, Y+11	; 0x0b
    177e:	8c 30       	cpi	r24, 0x0C	; 12
    1780:	91 05       	cpc	r25, r1
    1782:	a1 05       	cpc	r26, r1
    1784:	b1 05       	cpc	r27, r1
    1786:	49 f5       	brne	.+82     	; 0x17da <sMO_runCycle+0x5f2>
    1788:	2d 85       	ldd	r18, Y+13	; 0x0d
    178a:	22 23       	and	r18, r18
    178c:	31 f1       	breq	.+76     	; 0x17da <sMO_runCycle+0x5f2>
					/* Default exit sequence for state CheckKeyPress1 */
					handle->stateConfVector[1] = SMO_last_state;
    178e:	86 e2       	ldi	r24, 0x26	; 38
    1790:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    1792:	ee 24       	eor	r14, r14
    1794:	ff 24       	eor	r15, r15
    1796:	e3 94       	inc	r14
    1798:	fb 82       	std	Y+3, r15	; 0x03
    179a:	ea 82       	std	Y+2, r14	; 0x02
					/* Default enter sequence for state ShowCode */
					/* Entry action for state 'ShowCode'. */
					sMOIfaceLCD_clear();
    179c:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
					sMOIfaceLCD_writeString("Nhap ma mon an:");
    17a0:	82 e2       	ldi	r24, 0x22	; 34
    17a2:	92 e0       	ldi	r25, 0x02	; 2
    17a4:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
					sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    17a8:	82 e3       	ldi	r24, 0x32	; 50
    17aa:	92 e0       	ldi	r25, 0x02	; 2
    17ac:	40 e0       	ldi	r20, 0x00	; 0
    17ae:	50 e0       	ldi	r21, 0x00	; 0
    17b0:	ba 01       	movw	r22, r20
    17b2:	01 e0       	ldi	r16, 0x01	; 1
    17b4:	10 e0       	ldi	r17, 0x00	; 0
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
					handle->ifaceDISH.pos = 0;
    17be:	19 a6       	lds	r17, 0xb9
    17c0:	1a a6       	lds	r17, 0xba
    17c2:	1b a6       	lds	r17, 0xbb
    17c4:	1c a6       	lds	r17, 0xbc
					handle->ifaceDISH.ID = 0;
    17c6:	19 a2       	lds	r17, 0x99
    17c8:	1a a2       	lds	r17, 0x9a
    17ca:	1b a2       	lds	r17, 0x9b
    17cc:	1c a2       	lds	r17, 0x9c
					handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    17ce:	87 e0       	ldi	r24, 0x07	; 7
    17d0:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    17d2:	fb 82       	std	Y+3, r15	; 0x03
    17d4:	ea 82       	std	Y+2, r14	; 0x02
    17d6:	0c 94 62 17 	jmp	0x2ec4	; 0x2ec4 <sMO_runCycle+0x1cdc>
						handle->ifaceDISH.pos = 0;
						handle->ifaceDISH.amount = 0;
						handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount;
						handle->stateConfVectorPosition = 1;
					}  else {
						if (handle->ifaceKEYPAD.lastkey == 16 && handle->ifaceKEYPAD.key_pressed_raised) { 
    17da:	80 31       	cpi	r24, 0x10	; 16
    17dc:	91 05       	cpc	r25, r1
    17de:	a1 05       	cpc	r26, r1
    17e0:	b1 05       	cpc	r27, r1
    17e2:	11 f0       	breq	.+4      	; 0x17e8 <sMO_runCycle+0x600>
    17e4:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <sMO_runCycle+0x1c8a>
    17e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ea:	88 23       	and	r24, r24
    17ec:	11 f4       	brne	.+4      	; 0x17f2 <sMO_runCycle+0x60a>
    17ee:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <sMO_runCycle+0x1c8a>
							/* Default exit sequence for state CheckKeyPress1 */
							handle->stateConfVector[1] = SMO_last_state;
							handle->stateConfVectorPosition = 1;
    17f2:	1b 83       	std	Y+3, r17	; 0x03
    17f4:	0a 83       	std	Y+2, r16	; 0x02
							handle->iface.menuId = 0;
    17f6:	1e a6       	lds	r17, 0xbe
    17f8:	1f a6       	lds	r17, 0xbf
    17fa:	18 aa       	sts	0x98, r17
    17fc:	19 aa       	sts	0x99, r17
							/* Default enter sequence for state null */
							handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_;
    17fe:	8f e0       	ldi	r24, 0x0F	; 15
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <sMO_runCycle+0x1c8a>
}

/* The reactions of state CheckCode0. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0(SMO* handle) {
	/* The reactions of state CheckCode0. */
	if (handle->iface.menuId == 0) { 
    1806:	8e a5       	lds	r24, 0x6e
    1808:	9f a5       	lds	r25, 0x6f
    180a:	a8 a9       	sts	0x48, r26
    180c:	b9 a9       	sts	0x49, r27
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	a1 05       	cpc	r26, r1
    1812:	b1 05       	cpc	r27, r1
    1814:	09 f0       	breq	.+2      	; 0x1818 <sMO_runCycle+0x630>
    1816:	6a c0       	rjmp	.+212    	; 0x18ec <sMO_runCycle+0x704>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1818:	89 81       	ldd	r24, Y+1	; 0x01
    181a:	8a 30       	cpi	r24, 0x0A	; 10
    181c:	41 f1       	breq	.+80     	; 0x186e <sMO_runCycle+0x686>
    181e:	8b 30       	cpi	r24, 0x0B	; 11
    1820:	40 f4       	brcc	.+16     	; 0x1832 <sMO_runCycle+0x64a>
    1822:	88 30       	cpi	r24, 0x08	; 8
    1824:	b1 f0       	breq	.+44     	; 0x1852 <sMO_runCycle+0x66a>
    1826:	89 30       	cpi	r24, 0x09	; 9
    1828:	d8 f4       	brcc	.+54     	; 0x1860 <sMO_runCycle+0x678>
    182a:	87 30       	cpi	r24, 0x07	; 7
    182c:	09 f0       	breq	.+2      	; 0x1830 <sMO_runCycle+0x648>
    182e:	41 c0       	rjmp	.+130    	; 0x18b2 <sMO_runCycle+0x6ca>
    1830:	09 c0       	rjmp	.+18     	; 0x1844 <sMO_runCycle+0x65c>
    1832:	8c 30       	cpi	r24, 0x0C	; 12
    1834:	51 f1       	breq	.+84     	; 0x188a <sMO_runCycle+0x6a2>
    1836:	8c 30       	cpi	r24, 0x0C	; 12
    1838:	08 f1       	brcs	.+66     	; 0x187c <sMO_runCycle+0x694>
    183a:	8e 30       	cpi	r24, 0x0E	; 14
    183c:	69 f1       	breq	.+90     	; 0x1898 <sMO_runCycle+0x6b0>
    183e:	8f 30       	cpi	r24, 0x0F	; 15
    1840:	c1 f5       	brne	.+112    	; 0x18b2 <sMO_runCycle+0x6ca>
    1842:	31 c0       	rjmp	.+98     	; 0x18a6 <sMO_runCycle+0x6be>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1844:	86 e2       	ldi	r24, 0x26	; 38
    1846:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	9b 83       	std	Y+3, r25	; 0x03
    184e:	8a 83       	std	Y+2, r24	; 0x02
    1850:	30 c0       	rjmp	.+96     	; 0x18b2 <sMO_runCycle+0x6ca>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1852:	86 e2       	ldi	r24, 0x26	; 38
    1854:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	9b 83       	std	Y+3, r25	; 0x03
    185c:	8a 83       	std	Y+2, r24	; 0x02
    185e:	29 c0       	rjmp	.+82     	; 0x18b2 <sMO_runCycle+0x6ca>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1860:	86 e2       	ldi	r24, 0x26	; 38
    1862:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	9b 83       	std	Y+3, r25	; 0x03
    186a:	8a 83       	std	Y+2, r24	; 0x02
    186c:	22 c0       	rjmp	.+68     	; 0x18b2 <sMO_runCycle+0x6ca>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    186e:	86 e2       	ldi	r24, 0x26	; 38
    1870:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	9b 83       	std	Y+3, r25	; 0x03
    1878:	8a 83       	std	Y+2, r24	; 0x02
    187a:	1b c0       	rjmp	.+54     	; 0x18b2 <sMO_runCycle+0x6ca>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    187c:	86 e2       	ldi	r24, 0x26	; 38
    187e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	9b 83       	std	Y+3, r25	; 0x03
    1886:	8a 83       	std	Y+2, r24	; 0x02
    1888:	14 c0       	rjmp	.+40     	; 0x18b2 <sMO_runCycle+0x6ca>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    188a:	86 e2       	ldi	r24, 0x26	; 38
    188c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	9b 83       	std	Y+3, r25	; 0x03
    1894:	8a 83       	std	Y+2, r24	; 0x02
    1896:	0d c0       	rjmp	.+26     	; 0x18b2 <sMO_runCycle+0x6ca>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1898:	86 e2       	ldi	r24, 0x26	; 38
    189a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	9b 83       	std	Y+3, r25	; 0x03
    18a2:	8a 83       	std	Y+2, r24	; 0x02
    18a4:	06 c0       	rjmp	.+12     	; 0x18b2 <sMO_runCycle+0x6ca>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    18a6:	86 e2       	ldi	r24, 0x26	; 38
    18a8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	9b 83       	std	Y+3, r25	; 0x03
    18b0:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    18b2:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    18b6:	88 e0       	ldi	r24, 0x08	; 8
    18b8:	92 e0       	ldi	r25, 0x02	; 2
    18ba:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    18be:	86 e1       	ldi	r24, 0x16	; 22
    18c0:	92 e0       	ldi	r25, 0x02	; 2
    18c2:	40 e0       	ldi	r20, 0x00	; 0
    18c4:	50 e0       	ldi	r21, 0x00	; 0
    18c6:	ba 01       	movw	r22, r20
    18c8:	01 e0       	ldi	r16, 0x01	; 1
    18ca:	10 e0       	ldi	r17, 0x00	; 0
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    18d4:	1e a6       	lds	r17, 0xbe
    18d6:	1f a6       	lds	r17, 0xbf
    18d8:	18 aa       	sts	0x98, r17
    18da:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    18dc:	85 e0       	ldi	r24, 0x05	; 5
    18de:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	9b 83       	std	Y+3, r25	; 0x03
    18e6:	8a 83       	std	Y+2, r24	; 0x02
    18e8:	0c 94 62 17 	jmp	0x2ec4	; 0x2ec4 <sMO_runCycle+0x1cdc>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state CheckCode0 */
			handle->stateConfVector[1] = SMO_last_state;
    18ec:	86 e2       	ldi	r24, 0x26	; 38
    18ee:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    18f0:	88 24       	eor	r8, r8
    18f2:	99 24       	eor	r9, r9
    18f4:	83 94       	inc	r8
    18f6:	9b 82       	std	Y+3, r9	; 0x03
    18f8:	8a 82       	std	Y+2, r8	; 0x02
			/* Default enter sequence for state EnterCode */
			/* Entry action for state 'EnterCode'. */
			sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    18fa:	c8 84       	ldd	r12, Y+8	; 0x08
    18fc:	d9 84       	ldd	r13, Y+9	; 0x09
    18fe:	ea 84       	ldd	r14, Y+10	; 0x0a
    1900:	fb 84       	ldd	r15, Y+11	; 0x0b
    1902:	89 a5       	lds	r24, 0x69
    1904:	9a a5       	lds	r25, 0x6a
    1906:	ab a5       	lds	r26, 0x6b
    1908:	bc a5       	lds	r27, 0x6c
    190a:	9c 01       	movw	r18, r24
    190c:	ad 01       	movw	r20, r26
    190e:	22 0f       	add	r18, r18
    1910:	33 1f       	adc	r19, r19
    1912:	44 1f       	adc	r20, r20
    1914:	55 1f       	adc	r21, r21
    1916:	c7 01       	movw	r24, r14
    1918:	b6 01       	movw	r22, r12
    191a:	ee 24       	eor	r14, r14
    191c:	ff 24       	eor	r15, r15
    191e:	87 01       	movw	r16, r14
    1920:	e3 94       	inc	r14
    1922:	aa 24       	eor	r10, r10
    1924:	bb 24       	eor	r11, r11
    1926:	65 01       	movw	r12, r10
    1928:	a3 94       	inc	r10
    192a:	0e 94 65 02 	call	0x4ca	; 0x4ca <sMOIfaceLCD_writeNumberXY>
			handle->ifaceDISH.pos += 1;
    192e:	89 a5       	lds	r24, 0x69
    1930:	9a a5       	lds	r25, 0x6a
    1932:	ab a5       	lds	r26, 0x6b
    1934:	bc a5       	lds	r27, 0x6c
    1936:	01 96       	adiw	r24, 0x01	; 1
    1938:	a1 1d       	adc	r26, r1
    193a:	b1 1d       	adc	r27, r1
    193c:	89 a7       	lds	r24, 0x79
    193e:	9a a7       	lds	r25, 0x7a
    1940:	ab a7       	lds	r26, 0x7b
    1942:	bc a7       	lds	r27, 0x7c
			handle->ifaceDISH.ID = handle->ifaceDISH.ID * 10 + handle->ifaceKEYPAD.lastkey;
    1944:	69 a1       	lds	r22, 0x49
    1946:	7a a1       	lds	r23, 0x4a
    1948:	8b a1       	lds	r24, 0x4b
    194a:	9c a1       	lds	r25, 0x4c
    194c:	2a e0       	ldi	r18, 0x0A	; 10
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	40 e0       	ldi	r20, 0x00	; 0
    1952:	50 e0       	ldi	r21, 0x00	; 0
    1954:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <__mulsi3>
    1958:	ab 01       	movw	r20, r22
    195a:	bc 01       	movw	r22, r24
    195c:	88 85       	ldd	r24, Y+8	; 0x08
    195e:	99 85       	ldd	r25, Y+9	; 0x09
    1960:	aa 85       	ldd	r26, Y+10	; 0x0a
    1962:	bb 85       	ldd	r27, Y+11	; 0x0b
    1964:	84 0f       	add	r24, r20
    1966:	95 1f       	adc	r25, r21
    1968:	a6 1f       	adc	r26, r22
    196a:	b7 1f       	adc	r27, r23
    196c:	89 a3       	lds	r24, 0x59
    196e:	9a a3       	lds	r25, 0x5a
    1970:	ab a3       	lds	r26, 0x5b
    1972:	bc a3       	lds	r27, 0x5c
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode;
    1974:	88 e0       	ldi	r24, 0x08	; 8
    1976:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1978:	9b 82       	std	Y+3, r9	; 0x03
    197a:	8a 82       	std	Y+2, r8	; 0x02
    197c:	0c 94 62 17 	jmp	0x2ec4	; 0x2ec4 <sMO_runCycle+0x1cdc>
}

/* The reactions of state ShowAmount. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount(SMO* handle) {
	/* The reactions of state ShowAmount. */
	if (handle->iface.menuId == 0) { 
    1980:	8e a5       	lds	r24, 0x6e
    1982:	9f a5       	lds	r25, 0x6f
    1984:	a8 a9       	sts	0x48, r26
    1986:	b9 a9       	sts	0x49, r27
    1988:	00 97       	sbiw	r24, 0x00	; 0
    198a:	a1 05       	cpc	r26, r1
    198c:	b1 05       	cpc	r27, r1
    198e:	09 f0       	breq	.+2      	; 0x1992 <sMO_runCycle+0x7aa>
    1990:	6a c0       	rjmp	.+212    	; 0x1a66 <sMO_runCycle+0x87e>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	8a 30       	cpi	r24, 0x0A	; 10
    1996:	41 f1       	breq	.+80     	; 0x19e8 <sMO_runCycle+0x800>
    1998:	8b 30       	cpi	r24, 0x0B	; 11
    199a:	40 f4       	brcc	.+16     	; 0x19ac <sMO_runCycle+0x7c4>
    199c:	88 30       	cpi	r24, 0x08	; 8
    199e:	b1 f0       	breq	.+44     	; 0x19cc <sMO_runCycle+0x7e4>
    19a0:	89 30       	cpi	r24, 0x09	; 9
    19a2:	d8 f4       	brcc	.+54     	; 0x19da <sMO_runCycle+0x7f2>
    19a4:	87 30       	cpi	r24, 0x07	; 7
    19a6:	09 f0       	breq	.+2      	; 0x19aa <sMO_runCycle+0x7c2>
    19a8:	41 c0       	rjmp	.+130    	; 0x1a2c <sMO_runCycle+0x844>
    19aa:	09 c0       	rjmp	.+18     	; 0x19be <sMO_runCycle+0x7d6>
    19ac:	8c 30       	cpi	r24, 0x0C	; 12
    19ae:	51 f1       	breq	.+84     	; 0x1a04 <sMO_runCycle+0x81c>
    19b0:	8c 30       	cpi	r24, 0x0C	; 12
    19b2:	08 f1       	brcs	.+66     	; 0x19f6 <sMO_runCycle+0x80e>
    19b4:	8e 30       	cpi	r24, 0x0E	; 14
    19b6:	69 f1       	breq	.+90     	; 0x1a12 <sMO_runCycle+0x82a>
    19b8:	8f 30       	cpi	r24, 0x0F	; 15
    19ba:	c1 f5       	brne	.+112    	; 0x1a2c <sMO_runCycle+0x844>
    19bc:	31 c0       	rjmp	.+98     	; 0x1a20 <sMO_runCycle+0x838>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    19be:	86 e2       	ldi	r24, 0x26	; 38
    19c0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	9b 83       	std	Y+3, r25	; 0x03
    19c8:	8a 83       	std	Y+2, r24	; 0x02
    19ca:	30 c0       	rjmp	.+96     	; 0x1a2c <sMO_runCycle+0x844>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    19cc:	86 e2       	ldi	r24, 0x26	; 38
    19ce:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	9b 83       	std	Y+3, r25	; 0x03
    19d6:	8a 83       	std	Y+2, r24	; 0x02
    19d8:	29 c0       	rjmp	.+82     	; 0x1a2c <sMO_runCycle+0x844>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    19da:	86 e2       	ldi	r24, 0x26	; 38
    19dc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	9b 83       	std	Y+3, r25	; 0x03
    19e4:	8a 83       	std	Y+2, r24	; 0x02
    19e6:	22 c0       	rjmp	.+68     	; 0x1a2c <sMO_runCycle+0x844>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    19e8:	86 e2       	ldi	r24, 0x26	; 38
    19ea:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	9b 83       	std	Y+3, r25	; 0x03
    19f2:	8a 83       	std	Y+2, r24	; 0x02
    19f4:	1b c0       	rjmp	.+54     	; 0x1a2c <sMO_runCycle+0x844>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    19f6:	86 e2       	ldi	r24, 0x26	; 38
    19f8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	9b 83       	std	Y+3, r25	; 0x03
    1a00:	8a 83       	std	Y+2, r24	; 0x02
    1a02:	14 c0       	rjmp	.+40     	; 0x1a2c <sMO_runCycle+0x844>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1a04:	86 e2       	ldi	r24, 0x26	; 38
    1a06:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	9b 83       	std	Y+3, r25	; 0x03
    1a0e:	8a 83       	std	Y+2, r24	; 0x02
    1a10:	0d c0       	rjmp	.+26     	; 0x1a2c <sMO_runCycle+0x844>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1a12:	86 e2       	ldi	r24, 0x26	; 38
    1a14:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	9b 83       	std	Y+3, r25	; 0x03
    1a1c:	8a 83       	std	Y+2, r24	; 0x02
    1a1e:	06 c0       	rjmp	.+12     	; 0x1a2c <sMO_runCycle+0x844>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1a20:	86 e2       	ldi	r24, 0x26	; 38
    1a22:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	9b 83       	std	Y+3, r25	; 0x03
    1a2a:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1a2c:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1a30:	88 e0       	ldi	r24, 0x08	; 8
    1a32:	92 e0       	ldi	r25, 0x02	; 2
    1a34:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    1a38:	86 e1       	ldi	r24, 0x16	; 22
    1a3a:	92 e0       	ldi	r25, 0x02	; 2
    1a3c:	40 e0       	ldi	r20, 0x00	; 0
    1a3e:	50 e0       	ldi	r21, 0x00	; 0
    1a40:	ba 01       	movw	r22, r20
    1a42:	01 e0       	ldi	r16, 0x01	; 1
    1a44:	10 e0       	ldi	r17, 0x00	; 0
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1a4e:	1e a6       	lds	r17, 0xbe
    1a50:	1f a6       	lds	r17, 0xbf
    1a52:	18 aa       	sts	0x98, r17
    1a54:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1a56:	85 e0       	ldi	r24, 0x05	; 5
    1a58:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	9b 83       	std	Y+3, r25	; 0x03
    1a60:	8a 83       	std	Y+2, r24	; 0x02
    1a62:	0c 94 62 17 	jmp	0x2ec4	; 0x2ec4 <sMO_runCycle+0x1cdc>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state ShowAmount */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    1a66:	1b 83       	std	Y+3, r17	; 0x03
    1a68:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress2 */
			/* Entry action for state 'CheckKeyPress2'. */
			handle->ifaceKEYPAD.lastkey = 0;
    1a6a:	18 86       	std	Y+8, r1	; 0x08
    1a6c:	19 86       	std	Y+9, r1	; 0x09
    1a6e:	1a 86       	std	Y+10, r1	; 0x0a
    1a70:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2;
    1a72:	8c e0       	ldi	r24, 0x0C	; 12
    1a74:	89 83       	std	Y+1, r24	; 0x01
    1a76:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <sMO_runCycle+0x1c8a>
}

/* The reactions of state CheckKeyPress2. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2(SMO* handle) {
	/* The reactions of state CheckKeyPress2. */
	if (handle->iface.menuId == 0) { 
    1a7a:	8e a5       	lds	r24, 0x6e
    1a7c:	9f a5       	lds	r25, 0x6f
    1a7e:	a8 a9       	sts	0x48, r26
    1a80:	b9 a9       	sts	0x49, r27
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	a1 05       	cpc	r26, r1
    1a86:	b1 05       	cpc	r27, r1
    1a88:	09 f0       	breq	.+2      	; 0x1a8c <sMO_runCycle+0x8a4>
    1a8a:	6a c0       	rjmp	.+212    	; 0x1b60 <sMO_runCycle+0x978>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	8a 30       	cpi	r24, 0x0A	; 10
    1a90:	41 f1       	breq	.+80     	; 0x1ae2 <sMO_runCycle+0x8fa>
    1a92:	8b 30       	cpi	r24, 0x0B	; 11
    1a94:	40 f4       	brcc	.+16     	; 0x1aa6 <sMO_runCycle+0x8be>
    1a96:	88 30       	cpi	r24, 0x08	; 8
    1a98:	b1 f0       	breq	.+44     	; 0x1ac6 <sMO_runCycle+0x8de>
    1a9a:	89 30       	cpi	r24, 0x09	; 9
    1a9c:	d8 f4       	brcc	.+54     	; 0x1ad4 <sMO_runCycle+0x8ec>
    1a9e:	87 30       	cpi	r24, 0x07	; 7
    1aa0:	09 f0       	breq	.+2      	; 0x1aa4 <sMO_runCycle+0x8bc>
    1aa2:	41 c0       	rjmp	.+130    	; 0x1b26 <sMO_runCycle+0x93e>
    1aa4:	09 c0       	rjmp	.+18     	; 0x1ab8 <sMO_runCycle+0x8d0>
    1aa6:	8c 30       	cpi	r24, 0x0C	; 12
    1aa8:	51 f1       	breq	.+84     	; 0x1afe <sMO_runCycle+0x916>
    1aaa:	8c 30       	cpi	r24, 0x0C	; 12
    1aac:	08 f1       	brcs	.+66     	; 0x1af0 <sMO_runCycle+0x908>
    1aae:	8e 30       	cpi	r24, 0x0E	; 14
    1ab0:	69 f1       	breq	.+90     	; 0x1b0c <sMO_runCycle+0x924>
    1ab2:	8f 30       	cpi	r24, 0x0F	; 15
    1ab4:	c1 f5       	brne	.+112    	; 0x1b26 <sMO_runCycle+0x93e>
    1ab6:	31 c0       	rjmp	.+98     	; 0x1b1a <sMO_runCycle+0x932>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1ab8:	86 e2       	ldi	r24, 0x26	; 38
    1aba:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	9b 83       	std	Y+3, r25	; 0x03
    1ac2:	8a 83       	std	Y+2, r24	; 0x02
    1ac4:	30 c0       	rjmp	.+96     	; 0x1b26 <sMO_runCycle+0x93e>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1ac6:	86 e2       	ldi	r24, 0x26	; 38
    1ac8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	9b 83       	std	Y+3, r25	; 0x03
    1ad0:	8a 83       	std	Y+2, r24	; 0x02
    1ad2:	29 c0       	rjmp	.+82     	; 0x1b26 <sMO_runCycle+0x93e>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1ad4:	86 e2       	ldi	r24, 0x26	; 38
    1ad6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	9b 83       	std	Y+3, r25	; 0x03
    1ade:	8a 83       	std	Y+2, r24	; 0x02
    1ae0:	22 c0       	rjmp	.+68     	; 0x1b26 <sMO_runCycle+0x93e>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1ae2:	86 e2       	ldi	r24, 0x26	; 38
    1ae4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	9b 83       	std	Y+3, r25	; 0x03
    1aec:	8a 83       	std	Y+2, r24	; 0x02
    1aee:	1b c0       	rjmp	.+54     	; 0x1b26 <sMO_runCycle+0x93e>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1af0:	86 e2       	ldi	r24, 0x26	; 38
    1af2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	9b 83       	std	Y+3, r25	; 0x03
    1afa:	8a 83       	std	Y+2, r24	; 0x02
    1afc:	14 c0       	rjmp	.+40     	; 0x1b26 <sMO_runCycle+0x93e>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1afe:	86 e2       	ldi	r24, 0x26	; 38
    1b00:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	9b 83       	std	Y+3, r25	; 0x03
    1b08:	8a 83       	std	Y+2, r24	; 0x02
    1b0a:	0d c0       	rjmp	.+26     	; 0x1b26 <sMO_runCycle+0x93e>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1b0c:	86 e2       	ldi	r24, 0x26	; 38
    1b0e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	9b 83       	std	Y+3, r25	; 0x03
    1b16:	8a 83       	std	Y+2, r24	; 0x02
    1b18:	06 c0       	rjmp	.+12     	; 0x1b26 <sMO_runCycle+0x93e>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1b1a:	86 e2       	ldi	r24, 0x26	; 38
    1b1c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	9b 83       	std	Y+3, r25	; 0x03
    1b24:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1b26:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1b2a:	88 e0       	ldi	r24, 0x08	; 8
    1b2c:	92 e0       	ldi	r25, 0x02	; 2
    1b2e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    1b32:	86 e1       	ldi	r24, 0x16	; 22
    1b34:	92 e0       	ldi	r25, 0x02	; 2
    1b36:	40 e0       	ldi	r20, 0x00	; 0
    1b38:	50 e0       	ldi	r21, 0x00	; 0
    1b3a:	ba 01       	movw	r22, r20
    1b3c:	01 e0       	ldi	r16, 0x01	; 1
    1b3e:	10 e0       	ldi	r17, 0x00	; 0
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1b48:	1e a6       	lds	r17, 0xbe
    1b4a:	1f a6       	lds	r17, 0xbf
    1b4c:	18 aa       	sts	0x98, r17
    1b4e:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1b50:	85 e0       	ldi	r24, 0x05	; 5
    1b52:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	9b 83       	std	Y+3, r25	; 0x03
    1b5a:	8a 83       	std	Y+2, r24	; 0x02
    1b5c:	0c 94 62 17 	jmp	0x2ec4	; 0x2ec4 <sMO_runCycle+0x1cdc>
	}  else {
		if (handle->ifaceDISH.pos < 2 && handle->ifaceKEYPAD.lastkey == 10 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1b60:	89 a5       	lds	r24, 0x69
    1b62:	9a a5       	lds	r25, 0x6a
    1b64:	ab a5       	lds	r26, 0x6b
    1b66:	bc a5       	lds	r27, 0x6c
    1b68:	82 30       	cpi	r24, 0x02	; 2
    1b6a:	91 05       	cpc	r25, r1
    1b6c:	a1 05       	cpc	r26, r1
    1b6e:	b1 05       	cpc	r27, r1
    1b70:	0c f0       	brlt	.+2      	; 0x1b74 <sMO_runCycle+0x98c>
    1b72:	6a c0       	rjmp	.+212    	; 0x1c48 <sMO_runCycle+0xa60>
    1b74:	48 85       	ldd	r20, Y+8	; 0x08
    1b76:	59 85       	ldd	r21, Y+9	; 0x09
    1b78:	6a 85       	ldd	r22, Y+10	; 0x0a
    1b7a:	7b 85       	ldd	r23, Y+11	; 0x0b
    1b7c:	4a 30       	cpi	r20, 0x0A	; 10
    1b7e:	51 05       	cpc	r21, r1
    1b80:	61 05       	cpc	r22, r1
    1b82:	71 05       	cpc	r23, r1
    1b84:	69 f4       	brne	.+26     	; 0x1ba0 <sMO_runCycle+0x9b8>
    1b86:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b88:	22 23       	and	r18, r18
    1b8a:	51 f0       	breq	.+20     	; 0x1ba0 <sMO_runCycle+0x9b8>
			/* Default exit sequence for state CheckKeyPress2 */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    1b8c:	1b 83       	std	Y+3, r17	; 0x03
    1b8e:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckAmount0 */
			/* Entry action for state 'CheckAmount0'. */
			handle->ifaceKEYPAD.lastkey = 0;
    1b90:	18 86       	std	Y+8, r1	; 0x08
    1b92:	19 86       	std	Y+9, r1	; 0x09
    1b94:	1a 86       	std	Y+10, r1	; 0x0a
    1b96:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0;
    1b98:	8d e0       	ldi	r24, 0x0D	; 13
    1b9a:	89 83       	std	Y+1, r24	; 0x01
    1b9c:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <sMO_runCycle+0x1c8a>
			handle->stateConfVectorPosition = 1;
		}  else {
			if (handle->ifaceDISH.pos < 2 && handle->ifaceKEYPAD.lastkey <= 9 && handle->ifaceKEYPAD.lastkey >= 1 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1ba0:	4a 30       	cpi	r20, 0x0A	; 10
    1ba2:	51 05       	cpc	r21, r1
    1ba4:	61 05       	cpc	r22, r1
    1ba6:	71 05       	cpc	r23, r1
    1ba8:	0c f0       	brlt	.+2      	; 0x1bac <sMO_runCycle+0x9c4>
    1baa:	4e c0       	rjmp	.+156    	; 0x1c48 <sMO_runCycle+0xa60>
    1bac:	14 16       	cp	r1, r20
    1bae:	15 06       	cpc	r1, r21
    1bb0:	16 06       	cpc	r1, r22
    1bb2:	17 06       	cpc	r1, r23
    1bb4:	0c f0       	brlt	.+2      	; 0x1bb8 <sMO_runCycle+0x9d0>
    1bb6:	48 c0       	rjmp	.+144    	; 0x1c48 <sMO_runCycle+0xa60>
    1bb8:	2d 85       	ldd	r18, Y+13	; 0x0d
    1bba:	22 23       	and	r18, r18
    1bbc:	09 f4       	brne	.+2      	; 0x1bc0 <sMO_runCycle+0x9d8>
    1bbe:	44 c0       	rjmp	.+136    	; 0x1c48 <sMO_runCycle+0xa60>
    1bc0:	6a 01       	movw	r12, r20
    1bc2:	7b 01       	movw	r14, r22
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1bc4:	26 e2       	ldi	r18, 0x26	; 38
    1bc6:	29 83       	std	Y+1, r18	; 0x01
				handle->stateConfVectorPosition = 1;
    1bc8:	88 24       	eor	r8, r8
    1bca:	99 24       	eor	r9, r9
    1bcc:	83 94       	inc	r8
    1bce:	9b 82       	std	Y+3, r9	; 0x03
    1bd0:	8a 82       	std	Y+2, r8	; 0x02
				/* Default enter sequence for state EnterAmount */
				/* Entry action for state 'EnterAmount'. */
				sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    1bd2:	9c 01       	movw	r18, r24
    1bd4:	ad 01       	movw	r20, r26
    1bd6:	22 0f       	add	r18, r18
    1bd8:	33 1f       	adc	r19, r19
    1bda:	44 1f       	adc	r20, r20
    1bdc:	55 1f       	adc	r21, r21
    1bde:	c7 01       	movw	r24, r14
    1be0:	b6 01       	movw	r22, r12
    1be2:	ee 24       	eor	r14, r14
    1be4:	ff 24       	eor	r15, r15
    1be6:	87 01       	movw	r16, r14
    1be8:	e3 94       	inc	r14
    1bea:	aa 24       	eor	r10, r10
    1bec:	bb 24       	eor	r11, r11
    1bee:	65 01       	movw	r12, r10
    1bf0:	a3 94       	inc	r10
    1bf2:	0e 94 65 02 	call	0x4ca	; 0x4ca <sMOIfaceLCD_writeNumberXY>
				handle->ifaceDISH.pos += 1;
    1bf6:	89 a5       	lds	r24, 0x69
    1bf8:	9a a5       	lds	r25, 0x6a
    1bfa:	ab a5       	lds	r26, 0x6b
    1bfc:	bc a5       	lds	r27, 0x6c
    1bfe:	01 96       	adiw	r24, 0x01	; 1
    1c00:	a1 1d       	adc	r26, r1
    1c02:	b1 1d       	adc	r27, r1
    1c04:	89 a7       	lds	r24, 0x79
    1c06:	9a a7       	lds	r25, 0x7a
    1c08:	ab a7       	lds	r26, 0x7b
    1c0a:	bc a7       	lds	r27, 0x7c
				handle->ifaceDISH.amount = handle->ifaceDISH.amount * 10 + handle->ifaceKEYPAD.lastkey;
    1c0c:	6d a1       	lds	r22, 0x4d
    1c0e:	7e a1       	lds	r23, 0x4e
    1c10:	8f a1       	lds	r24, 0x4f
    1c12:	98 a5       	lds	r25, 0x68
    1c14:	2a e0       	ldi	r18, 0x0A	; 10
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	40 e0       	ldi	r20, 0x00	; 0
    1c1a:	50 e0       	ldi	r21, 0x00	; 0
    1c1c:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <__mulsi3>
    1c20:	ab 01       	movw	r20, r22
    1c22:	bc 01       	movw	r22, r24
    1c24:	88 85       	ldd	r24, Y+8	; 0x08
    1c26:	99 85       	ldd	r25, Y+9	; 0x09
    1c28:	aa 85       	ldd	r26, Y+10	; 0x0a
    1c2a:	bb 85       	ldd	r27, Y+11	; 0x0b
    1c2c:	84 0f       	add	r24, r20
    1c2e:	95 1f       	adc	r25, r21
    1c30:	a6 1f       	adc	r26, r22
    1c32:	b7 1f       	adc	r27, r23
    1c34:	8d a3       	lds	r24, 0x5d
    1c36:	9e a3       	lds	r25, 0x5e
    1c38:	af a3       	lds	r26, 0x5f
    1c3a:	b8 a7       	lds	r27, 0x78
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount;
    1c3c:	8e e0       	ldi	r24, 0x0E	; 14
    1c3e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1c40:	9b 82       	std	Y+3, r9	; 0x03
    1c42:	8a 82       	std	Y+2, r8	; 0x02
    1c44:	0c 94 62 17 	jmp	0x2ec4	; 0x2ec4 <sMO_runCycle+0x1cdc>
			}  else {
				if (handle->ifaceKEYPAD.lastkey == 11 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1c48:	88 85       	ldd	r24, Y+8	; 0x08
    1c4a:	99 85       	ldd	r25, Y+9	; 0x09
    1c4c:	aa 85       	ldd	r26, Y+10	; 0x0a
    1c4e:	bb 85       	ldd	r27, Y+11	; 0x0b
    1c50:	8b 30       	cpi	r24, 0x0B	; 11
    1c52:	91 05       	cpc	r25, r1
    1c54:	a1 05       	cpc	r26, r1
    1c56:	b1 05       	cpc	r27, r1
    1c58:	49 f5       	brne	.+82     	; 0x1cac <sMO_runCycle+0xac4>
    1c5a:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c5c:	22 23       	and	r18, r18
    1c5e:	31 f1       	breq	.+76     	; 0x1cac <sMO_runCycle+0xac4>
					/* Default exit sequence for state CheckKeyPress2 */
					handle->stateConfVector[1] = SMO_last_state;
    1c60:	86 e2       	ldi	r24, 0x26	; 38
    1c62:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    1c64:	ee 24       	eor	r14, r14
    1c66:	ff 24       	eor	r15, r15
    1c68:	e3 94       	inc	r14
    1c6a:	fb 82       	std	Y+3, r15	; 0x03
    1c6c:	ea 82       	std	Y+2, r14	; 0x02
					/* Default enter sequence for state ShowAmount */
					/* Entry action for state 'ShowAmount'. */
					sMOIfaceLCD_clear();
    1c6e:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
					sMOIfaceLCD_writeString("Nhap so luong:");
    1c72:	88 e3       	ldi	r24, 0x38	; 56
    1c74:	92 e0       	ldi	r25, 0x02	; 2
    1c76:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
					sMOIfaceLCD_writeStringXY("_ _", 0, 1);
    1c7a:	87 e4       	ldi	r24, 0x47	; 71
    1c7c:	92 e0       	ldi	r25, 0x02	; 2
    1c7e:	40 e0       	ldi	r20, 0x00	; 0
    1c80:	50 e0       	ldi	r21, 0x00	; 0
    1c82:	ba 01       	movw	r22, r20
    1c84:	01 e0       	ldi	r16, 0x01	; 1
    1c86:	10 e0       	ldi	r17, 0x00	; 0
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
					handle->ifaceDISH.pos = 0;
    1c90:	19 a6       	lds	r17, 0xb9
    1c92:	1a a6       	lds	r17, 0xba
    1c94:	1b a6       	lds	r17, 0xbb
    1c96:	1c a6       	lds	r17, 0xbc
					handle->ifaceDISH.amount = 0;
    1c98:	1d a2       	lds	r17, 0x9d
    1c9a:	1e a2       	lds	r17, 0x9e
    1c9c:	1f a2       	lds	r17, 0x9f
    1c9e:	18 a6       	lds	r17, 0xb8
					handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount;
    1ca0:	8b e0       	ldi	r24, 0x0B	; 11
    1ca2:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    1ca4:	fb 82       	std	Y+3, r15	; 0x03
    1ca6:	ea 82       	std	Y+2, r14	; 0x02
    1ca8:	0c 94 62 17 	jmp	0x2ec4	; 0x2ec4 <sMO_runCycle+0x1cdc>
				}  else {
					if (handle->ifaceKEYPAD.lastkey == 12 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1cac:	8c 30       	cpi	r24, 0x0C	; 12
    1cae:	91 05       	cpc	r25, r1
    1cb0:	a1 05       	cpc	r26, r1
    1cb2:	b1 05       	cpc	r27, r1
    1cb4:	09 f0       	breq	.+2      	; 0x1cb8 <sMO_runCycle+0xad0>
    1cb6:	7a c0       	rjmp	.+244    	; 0x1dac <sMO_runCycle+0xbc4>
    1cb8:	2d 85       	ldd	r18, Y+13	; 0x0d
    1cba:	22 23       	and	r18, r18
    1cbc:	09 f4       	brne	.+2      	; 0x1cc0 <sMO_runCycle+0xad8>
    1cbe:	76 c0       	rjmp	.+236    	; 0x1dac <sMO_runCycle+0xbc4>
						/* Default exit sequence for state EnterData */
						/* Default exit sequence for region r1 */
						/* Handle exit of all possible states (of r1) at position 1... */
						switch(handle->stateConfVector[ 1 ]) {
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	8a 30       	cpi	r24, 0x0A	; 10
    1cc4:	41 f1       	breq	.+80     	; 0x1d16 <sMO_runCycle+0xb2e>
    1cc6:	8b 30       	cpi	r24, 0x0B	; 11
    1cc8:	40 f4       	brcc	.+16     	; 0x1cda <sMO_runCycle+0xaf2>
    1cca:	88 30       	cpi	r24, 0x08	; 8
    1ccc:	b1 f0       	breq	.+44     	; 0x1cfa <sMO_runCycle+0xb12>
    1cce:	89 30       	cpi	r24, 0x09	; 9
    1cd0:	d8 f4       	brcc	.+54     	; 0x1d08 <sMO_runCycle+0xb20>
    1cd2:	87 30       	cpi	r24, 0x07	; 7
    1cd4:	09 f0       	breq	.+2      	; 0x1cd8 <sMO_runCycle+0xaf0>
    1cd6:	41 c0       	rjmp	.+130    	; 0x1d5a <sMO_runCycle+0xb72>
    1cd8:	09 c0       	rjmp	.+18     	; 0x1cec <sMO_runCycle+0xb04>
    1cda:	8c 30       	cpi	r24, 0x0C	; 12
    1cdc:	51 f1       	breq	.+84     	; 0x1d32 <sMO_runCycle+0xb4a>
    1cde:	8c 30       	cpi	r24, 0x0C	; 12
    1ce0:	08 f1       	brcs	.+66     	; 0x1d24 <sMO_runCycle+0xb3c>
    1ce2:	8e 30       	cpi	r24, 0x0E	; 14
    1ce4:	69 f1       	breq	.+90     	; 0x1d40 <sMO_runCycle+0xb58>
    1ce6:	8f 30       	cpi	r24, 0x0F	; 15
    1ce8:	c1 f5       	brne	.+112    	; 0x1d5a <sMO_runCycle+0xb72>
    1cea:	31 c0       	rjmp	.+98     	; 0x1d4e <sMO_runCycle+0xb66>
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
								/* Default exit sequence for state ShowCode */
								handle->stateConfVector[1] = SMO_last_state;
    1cec:	86 e2       	ldi	r24, 0x26	; 38
    1cee:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	9b 83       	std	Y+3, r25	; 0x03
    1cf6:	8a 83       	std	Y+2, r24	; 0x02
    1cf8:	30 c0       	rjmp	.+96     	; 0x1d5a <sMO_runCycle+0xb72>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
								/* Default exit sequence for state EnterCode */
								handle->stateConfVector[1] = SMO_last_state;
    1cfa:	86 e2       	ldi	r24, 0x26	; 38
    1cfc:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	9b 83       	std	Y+3, r25	; 0x03
    1d04:	8a 83       	std	Y+2, r24	; 0x02
    1d06:	29 c0       	rjmp	.+82     	; 0x1d5a <sMO_runCycle+0xb72>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
								/* Default exit sequence for state CheckKeyPress1 */
								handle->stateConfVector[1] = SMO_last_state;
    1d08:	86 e2       	ldi	r24, 0x26	; 38
    1d0a:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	9b 83       	std	Y+3, r25	; 0x03
    1d12:	8a 83       	std	Y+2, r24	; 0x02
    1d14:	22 c0       	rjmp	.+68     	; 0x1d5a <sMO_runCycle+0xb72>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
								/* Default exit sequence for state CheckCode0 */
								handle->stateConfVector[1] = SMO_last_state;
    1d16:	86 e2       	ldi	r24, 0x26	; 38
    1d18:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	9b 83       	std	Y+3, r25	; 0x03
    1d20:	8a 83       	std	Y+2, r24	; 0x02
    1d22:	1b c0       	rjmp	.+54     	; 0x1d5a <sMO_runCycle+0xb72>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
								/* Default exit sequence for state ShowAmount */
								handle->stateConfVector[1] = SMO_last_state;
    1d24:	86 e2       	ldi	r24, 0x26	; 38
    1d26:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	9b 83       	std	Y+3, r25	; 0x03
    1d2e:	8a 83       	std	Y+2, r24	; 0x02
    1d30:	14 c0       	rjmp	.+40     	; 0x1d5a <sMO_runCycle+0xb72>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
								/* Default exit sequence for state CheckKeyPress2 */
								handle->stateConfVector[1] = SMO_last_state;
    1d32:	86 e2       	ldi	r24, 0x26	; 38
    1d34:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	9b 83       	std	Y+3, r25	; 0x03
    1d3c:	8a 83       	std	Y+2, r24	; 0x02
    1d3e:	0d c0       	rjmp	.+26     	; 0x1d5a <sMO_runCycle+0xb72>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
								/* Default exit sequence for state EnterAmount */
								handle->stateConfVector[1] = SMO_last_state;
    1d40:	86 e2       	ldi	r24, 0x26	; 38
    1d42:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	9b 83       	std	Y+3, r25	; 0x03
    1d4a:	8a 83       	std	Y+2, r24	; 0x02
    1d4c:	06 c0       	rjmp	.+12     	; 0x1d5a <sMO_runCycle+0xb72>
								break;
							}
							case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
								/* Default exit sequence for final state. */
								handle->stateConfVector[1] = SMO_last_state;
    1d4e:	86 e2       	ldi	r24, 0x26	; 38
    1d50:	89 83       	std	Y+1, r24	; 0x01
								handle->stateConfVectorPosition = 1;
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	9b 83       	std	Y+3, r25	; 0x03
    1d58:	8a 83       	std	Y+2, r24	; 0x02
								break;
							}
							default: break;
						}
						handle->ifaceRF.result = bool_false;
    1d5a:	1f 8a       	std	Y+23, r1	; 0x17
						/* Default enter sequence for state SendData */
						/* Default enter sequence for region r1 */
						/* Default react sequence for initial entry  */
						/* Default enter sequence for state Send */
						/* Entry action for state 'Send'. */
						handle->ifaceRF.retry += 1;
    1d5c:	88 8d       	ldd	r24, Y+24	; 0x18
    1d5e:	99 8d       	ldd	r25, Y+25	; 0x19
    1d60:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1d62:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1d64:	01 96       	adiw	r24, 0x01	; 1
    1d66:	a1 1d       	adc	r26, r1
    1d68:	b1 1d       	adc	r27, r1
    1d6a:	88 8f       	std	Y+24, r24	; 0x18
    1d6c:	99 8f       	std	Y+25, r25	; 0x19
    1d6e:	aa 8f       	std	Y+26, r26	; 0x1a
    1d70:	bb 8f       	std	Y+27, r27	; 0x1b
						handle->ifaceRF.result = sMOIfaceRF_sendData(handle->iface.menuId, handle->iface.tableId, handle->ifaceDISH.ID, handle->ifaceDISH.amount);
    1d72:	6e a5       	lds	r22, 0x6e
    1d74:	7f a5       	lds	r23, 0x6f
    1d76:	88 a9       	sts	0x48, r24
    1d78:	99 a9       	sts	0x49, r25
    1d7a:	2a a9       	sts	0x4a, r18
    1d7c:	3b a9       	sts	0x4b, r19
    1d7e:	4c a9       	sts	0x4c, r20
    1d80:	5d a9       	sts	0x4d, r21
    1d82:	e9 a0       	lds	r30, 0x89
    1d84:	fa a0       	lds	r31, 0x8a
    1d86:	0b a1       	lds	r16, 0x4b
    1d88:	1c a1       	lds	r17, 0x4c
    1d8a:	8d a0       	lds	r24, 0x8d
    1d8c:	9e a0       	lds	r25, 0x8e
    1d8e:	af a0       	lds	r26, 0x8f
    1d90:	b8 a4       	lds	r27, 0xa8
    1d92:	65 01       	movw	r12, r10
    1d94:	54 01       	movw	r10, r8
    1d96:	0e 94 4a 03 	call	0x694	; 0x694 <sMOIfaceRF_sendData>
    1d9a:	8f 8b       	std	Y+23, r24	; 0x17
						handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_Send;
    1d9c:	83 e1       	ldi	r24, 0x13	; 19
    1d9e:	89 83       	std	Y+1, r24	; 0x01
						handle->stateConfVectorPosition = 1;
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	9b 83       	std	Y+3, r25	; 0x03
    1da6:	8a 83       	std	Y+2, r24	; 0x02
    1da8:	0c 94 62 17 	jmp	0x2ec4	; 0x2ec4 <sMO_runCycle+0x1cdc>
					}  else {
						if (handle->ifaceKEYPAD.lastkey == 16 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1dac:	80 31       	cpi	r24, 0x10	; 16
    1dae:	91 05       	cpc	r25, r1
    1db0:	a1 05       	cpc	r26, r1
    1db2:	b1 05       	cpc	r27, r1
    1db4:	11 f0       	breq	.+4      	; 0x1dba <sMO_runCycle+0xbd2>
    1db6:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <sMO_runCycle+0x1c8a>
    1dba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dbc:	88 23       	and	r24, r24
    1dbe:	11 f4       	brne	.+4      	; 0x1dc4 <sMO_runCycle+0xbdc>
    1dc0:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <sMO_runCycle+0x1c8a>
							/* Default exit sequence for state CheckKeyPress2 */
							handle->stateConfVector[1] = SMO_last_state;
							handle->stateConfVectorPosition = 1;
    1dc4:	1b 83       	std	Y+3, r17	; 0x03
    1dc6:	0a 83       	std	Y+2, r16	; 0x02
							handle->iface.menuId = 0;
    1dc8:	1e a6       	lds	r17, 0xbe
    1dca:	1f a6       	lds	r17, 0xbf
    1dcc:	18 aa       	sts	0x98, r17
    1dce:	19 aa       	sts	0x99, r17
							/* Default enter sequence for state null */
							handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_;
    1dd0:	8f e0       	ldi	r24, 0x0F	; 15
    1dd2:	89 83       	std	Y+1, r24	; 0x01
    1dd4:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <sMO_runCycle+0x1c8a>
}

/* The reactions of state CheckAmount0. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0(SMO* handle) {
	/* The reactions of state CheckAmount0. */
	if (handle->iface.menuId == 0) { 
    1dd8:	8e a5       	lds	r24, 0x6e
    1dda:	9f a5       	lds	r25, 0x6f
    1ddc:	a8 a9       	sts	0x48, r26
    1dde:	b9 a9       	sts	0x49, r27
    1de0:	00 97       	sbiw	r24, 0x00	; 0
    1de2:	a1 05       	cpc	r26, r1
    1de4:	b1 05       	cpc	r27, r1
    1de6:	09 f0       	breq	.+2      	; 0x1dea <sMO_runCycle+0xc02>
    1de8:	6a c0       	rjmp	.+212    	; 0x1ebe <sMO_runCycle+0xcd6>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
    1dec:	8a 30       	cpi	r24, 0x0A	; 10
    1dee:	41 f1       	breq	.+80     	; 0x1e40 <sMO_runCycle+0xc58>
    1df0:	8b 30       	cpi	r24, 0x0B	; 11
    1df2:	40 f4       	brcc	.+16     	; 0x1e04 <sMO_runCycle+0xc1c>
    1df4:	88 30       	cpi	r24, 0x08	; 8
    1df6:	b1 f0       	breq	.+44     	; 0x1e24 <sMO_runCycle+0xc3c>
    1df8:	89 30       	cpi	r24, 0x09	; 9
    1dfa:	d8 f4       	brcc	.+54     	; 0x1e32 <sMO_runCycle+0xc4a>
    1dfc:	87 30       	cpi	r24, 0x07	; 7
    1dfe:	09 f0       	breq	.+2      	; 0x1e02 <sMO_runCycle+0xc1a>
    1e00:	41 c0       	rjmp	.+130    	; 0x1e84 <sMO_runCycle+0xc9c>
    1e02:	09 c0       	rjmp	.+18     	; 0x1e16 <sMO_runCycle+0xc2e>
    1e04:	8c 30       	cpi	r24, 0x0C	; 12
    1e06:	51 f1       	breq	.+84     	; 0x1e5c <sMO_runCycle+0xc74>
    1e08:	8c 30       	cpi	r24, 0x0C	; 12
    1e0a:	08 f1       	brcs	.+66     	; 0x1e4e <sMO_runCycle+0xc66>
    1e0c:	8e 30       	cpi	r24, 0x0E	; 14
    1e0e:	69 f1       	breq	.+90     	; 0x1e6a <sMO_runCycle+0xc82>
    1e10:	8f 30       	cpi	r24, 0x0F	; 15
    1e12:	c1 f5       	brne	.+112    	; 0x1e84 <sMO_runCycle+0xc9c>
    1e14:	31 c0       	rjmp	.+98     	; 0x1e78 <sMO_runCycle+0xc90>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1e16:	86 e2       	ldi	r24, 0x26	; 38
    1e18:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	9b 83       	std	Y+3, r25	; 0x03
    1e20:	8a 83       	std	Y+2, r24	; 0x02
    1e22:	30 c0       	rjmp	.+96     	; 0x1e84 <sMO_runCycle+0xc9c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1e24:	86 e2       	ldi	r24, 0x26	; 38
    1e26:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	9b 83       	std	Y+3, r25	; 0x03
    1e2e:	8a 83       	std	Y+2, r24	; 0x02
    1e30:	29 c0       	rjmp	.+82     	; 0x1e84 <sMO_runCycle+0xc9c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1e32:	86 e2       	ldi	r24, 0x26	; 38
    1e34:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	9b 83       	std	Y+3, r25	; 0x03
    1e3c:	8a 83       	std	Y+2, r24	; 0x02
    1e3e:	22 c0       	rjmp	.+68     	; 0x1e84 <sMO_runCycle+0xc9c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1e40:	86 e2       	ldi	r24, 0x26	; 38
    1e42:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	9b 83       	std	Y+3, r25	; 0x03
    1e4a:	8a 83       	std	Y+2, r24	; 0x02
    1e4c:	1b c0       	rjmp	.+54     	; 0x1e84 <sMO_runCycle+0xc9c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1e4e:	86 e2       	ldi	r24, 0x26	; 38
    1e50:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	9b 83       	std	Y+3, r25	; 0x03
    1e58:	8a 83       	std	Y+2, r24	; 0x02
    1e5a:	14 c0       	rjmp	.+40     	; 0x1e84 <sMO_runCycle+0xc9c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1e5c:	86 e2       	ldi	r24, 0x26	; 38
    1e5e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	9b 83       	std	Y+3, r25	; 0x03
    1e66:	8a 83       	std	Y+2, r24	; 0x02
    1e68:	0d c0       	rjmp	.+26     	; 0x1e84 <sMO_runCycle+0xc9c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1e6a:	86 e2       	ldi	r24, 0x26	; 38
    1e6c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	9b 83       	std	Y+3, r25	; 0x03
    1e74:	8a 83       	std	Y+2, r24	; 0x02
    1e76:	06 c0       	rjmp	.+12     	; 0x1e84 <sMO_runCycle+0xc9c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1e78:	86 e2       	ldi	r24, 0x26	; 38
    1e7a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	9b 83       	std	Y+3, r25	; 0x03
    1e82:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1e84:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    1e88:	88 e0       	ldi	r24, 0x08	; 8
    1e8a:	92 e0       	ldi	r25, 0x02	; 2
    1e8c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    1e90:	86 e1       	ldi	r24, 0x16	; 22
    1e92:	92 e0       	ldi	r25, 0x02	; 2
    1e94:	40 e0       	ldi	r20, 0x00	; 0
    1e96:	50 e0       	ldi	r21, 0x00	; 0
    1e98:	ba 01       	movw	r22, r20
    1e9a:	01 e0       	ldi	r16, 0x01	; 1
    1e9c:	10 e0       	ldi	r17, 0x00	; 0
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1ea6:	1e a6       	lds	r17, 0xbe
    1ea8:	1f a6       	lds	r17, 0xbf
    1eaa:	18 aa       	sts	0x98, r17
    1eac:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1eae:	85 e0       	ldi	r24, 0x05	; 5
    1eb0:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	9b 83       	std	Y+3, r25	; 0x03
    1eb8:	8a 83       	std	Y+2, r24	; 0x02
    1eba:	0c 94 62 17 	jmp	0x2ec4	; 0x2ec4 <sMO_runCycle+0x1cdc>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state CheckAmount0 */
			handle->stateConfVector[1] = SMO_last_state;
    1ebe:	86 e2       	ldi	r24, 0x26	; 38
    1ec0:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1ec2:	88 24       	eor	r8, r8
    1ec4:	99 24       	eor	r9, r9
    1ec6:	83 94       	inc	r8
    1ec8:	9b 82       	std	Y+3, r9	; 0x03
    1eca:	8a 82       	std	Y+2, r8	; 0x02
			/* Default enter sequence for state EnterAmount */
			/* Entry action for state 'EnterAmount'. */
			sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    1ecc:	c8 84       	ldd	r12, Y+8	; 0x08
    1ece:	d9 84       	ldd	r13, Y+9	; 0x09
    1ed0:	ea 84       	ldd	r14, Y+10	; 0x0a
    1ed2:	fb 84       	ldd	r15, Y+11	; 0x0b
    1ed4:	89 a5       	lds	r24, 0x69
    1ed6:	9a a5       	lds	r25, 0x6a
    1ed8:	ab a5       	lds	r26, 0x6b
    1eda:	bc a5       	lds	r27, 0x6c
    1edc:	9c 01       	movw	r18, r24
    1ede:	ad 01       	movw	r20, r26
    1ee0:	22 0f       	add	r18, r18
    1ee2:	33 1f       	adc	r19, r19
    1ee4:	44 1f       	adc	r20, r20
    1ee6:	55 1f       	adc	r21, r21
    1ee8:	c7 01       	movw	r24, r14
    1eea:	b6 01       	movw	r22, r12
    1eec:	ee 24       	eor	r14, r14
    1eee:	ff 24       	eor	r15, r15
    1ef0:	87 01       	movw	r16, r14
    1ef2:	e3 94       	inc	r14
    1ef4:	aa 24       	eor	r10, r10
    1ef6:	bb 24       	eor	r11, r11
    1ef8:	65 01       	movw	r12, r10
    1efa:	a3 94       	inc	r10
    1efc:	0e 94 65 02 	call	0x4ca	; 0x4ca <sMOIfaceLCD_writeNumberXY>
			handle->ifaceDISH.pos += 1;
    1f00:	89 a5       	lds	r24, 0x69
    1f02:	9a a5       	lds	r25, 0x6a
    1f04:	ab a5       	lds	r26, 0x6b
    1f06:	bc a5       	lds	r27, 0x6c
    1f08:	01 96       	adiw	r24, 0x01	; 1
    1f0a:	a1 1d       	adc	r26, r1
    1f0c:	b1 1d       	adc	r27, r1
    1f0e:	89 a7       	lds	r24, 0x79
    1f10:	9a a7       	lds	r25, 0x7a
    1f12:	ab a7       	lds	r26, 0x7b
    1f14:	bc a7       	lds	r27, 0x7c
			handle->ifaceDISH.amount = handle->ifaceDISH.amount * 10 + handle->ifaceKEYPAD.lastkey;
    1f16:	6d a1       	lds	r22, 0x4d
    1f18:	7e a1       	lds	r23, 0x4e
    1f1a:	8f a1       	lds	r24, 0x4f
    1f1c:	98 a5       	lds	r25, 0x68
    1f1e:	2a e0       	ldi	r18, 0x0A	; 10
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e0       	ldi	r20, 0x00	; 0
    1f24:	50 e0       	ldi	r21, 0x00	; 0
    1f26:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <__mulsi3>
    1f2a:	ab 01       	movw	r20, r22
    1f2c:	bc 01       	movw	r22, r24
    1f2e:	88 85       	ldd	r24, Y+8	; 0x08
    1f30:	99 85       	ldd	r25, Y+9	; 0x09
    1f32:	aa 85       	ldd	r26, Y+10	; 0x0a
    1f34:	bb 85       	ldd	r27, Y+11	; 0x0b
    1f36:	84 0f       	add	r24, r20
    1f38:	95 1f       	adc	r25, r21
    1f3a:	a6 1f       	adc	r26, r22
    1f3c:	b7 1f       	adc	r27, r23
    1f3e:	8d a3       	lds	r24, 0x5d
    1f40:	9e a3       	lds	r25, 0x5e
    1f42:	af a3       	lds	r26, 0x5f
    1f44:	b8 a7       	lds	r27, 0x78
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount;
    1f46:	8e e0       	ldi	r24, 0x0E	; 14
    1f48:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1f4a:	9b 82       	std	Y+3, r9	; 0x03
    1f4c:	8a 82       	std	Y+2, r8	; 0x02
    1f4e:	ba c7       	rjmp	.+3956   	; 0x2ec4 <sMO_runCycle+0x1cdc>
}

/* The reactions of state EnterAmount. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount(SMO* handle) {
	/* The reactions of state EnterAmount. */
	if (handle->iface.menuId == 0) { 
    1f50:	8e a5       	lds	r24, 0x6e
    1f52:	9f a5       	lds	r25, 0x6f
    1f54:	a8 a9       	sts	0x48, r26
    1f56:	b9 a9       	sts	0x49, r27
    1f58:	00 97       	sbiw	r24, 0x00	; 0
    1f5a:	a1 05       	cpc	r26, r1
    1f5c:	b1 05       	cpc	r27, r1
    1f5e:	09 f0       	breq	.+2      	; 0x1f62 <sMO_runCycle+0xd7a>
    1f60:	69 c0       	rjmp	.+210    	; 0x2034 <sMO_runCycle+0xe4c>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	8a 30       	cpi	r24, 0x0A	; 10
    1f66:	41 f1       	breq	.+80     	; 0x1fb8 <sMO_runCycle+0xdd0>
    1f68:	8b 30       	cpi	r24, 0x0B	; 11
    1f6a:	40 f4       	brcc	.+16     	; 0x1f7c <sMO_runCycle+0xd94>
    1f6c:	88 30       	cpi	r24, 0x08	; 8
    1f6e:	b1 f0       	breq	.+44     	; 0x1f9c <sMO_runCycle+0xdb4>
    1f70:	89 30       	cpi	r24, 0x09	; 9
    1f72:	d8 f4       	brcc	.+54     	; 0x1faa <sMO_runCycle+0xdc2>
    1f74:	87 30       	cpi	r24, 0x07	; 7
    1f76:	09 f0       	breq	.+2      	; 0x1f7a <sMO_runCycle+0xd92>
    1f78:	41 c0       	rjmp	.+130    	; 0x1ffc <sMO_runCycle+0xe14>
    1f7a:	09 c0       	rjmp	.+18     	; 0x1f8e <sMO_runCycle+0xda6>
    1f7c:	8c 30       	cpi	r24, 0x0C	; 12
    1f7e:	51 f1       	breq	.+84     	; 0x1fd4 <sMO_runCycle+0xdec>
    1f80:	8c 30       	cpi	r24, 0x0C	; 12
    1f82:	08 f1       	brcs	.+66     	; 0x1fc6 <sMO_runCycle+0xdde>
    1f84:	8e 30       	cpi	r24, 0x0E	; 14
    1f86:	69 f1       	breq	.+90     	; 0x1fe2 <sMO_runCycle+0xdfa>
    1f88:	8f 30       	cpi	r24, 0x0F	; 15
    1f8a:	c1 f5       	brne	.+112    	; 0x1ffc <sMO_runCycle+0xe14>
    1f8c:	31 c0       	rjmp	.+98     	; 0x1ff0 <sMO_runCycle+0xe08>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1f8e:	86 e2       	ldi	r24, 0x26	; 38
    1f90:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	9b 83       	std	Y+3, r25	; 0x03
    1f98:	8a 83       	std	Y+2, r24	; 0x02
    1f9a:	30 c0       	rjmp	.+96     	; 0x1ffc <sMO_runCycle+0xe14>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1f9c:	86 e2       	ldi	r24, 0x26	; 38
    1f9e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	9b 83       	std	Y+3, r25	; 0x03
    1fa6:	8a 83       	std	Y+2, r24	; 0x02
    1fa8:	29 c0       	rjmp	.+82     	; 0x1ffc <sMO_runCycle+0xe14>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1faa:	86 e2       	ldi	r24, 0x26	; 38
    1fac:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	9b 83       	std	Y+3, r25	; 0x03
    1fb4:	8a 83       	std	Y+2, r24	; 0x02
    1fb6:	22 c0       	rjmp	.+68     	; 0x1ffc <sMO_runCycle+0xe14>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1fb8:	86 e2       	ldi	r24, 0x26	; 38
    1fba:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	9b 83       	std	Y+3, r25	; 0x03
    1fc2:	8a 83       	std	Y+2, r24	; 0x02
    1fc4:	1b c0       	rjmp	.+54     	; 0x1ffc <sMO_runCycle+0xe14>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1fc6:	86 e2       	ldi	r24, 0x26	; 38
    1fc8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	9b 83       	std	Y+3, r25	; 0x03
    1fd0:	8a 83       	std	Y+2, r24	; 0x02
    1fd2:	14 c0       	rjmp	.+40     	; 0x1ffc <sMO_runCycle+0xe14>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1fd4:	86 e2       	ldi	r24, 0x26	; 38
    1fd6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	9b 83       	std	Y+3, r25	; 0x03
    1fde:	8a 83       	std	Y+2, r24	; 0x02
    1fe0:	0d c0       	rjmp	.+26     	; 0x1ffc <sMO_runCycle+0xe14>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1fe2:	86 e2       	ldi	r24, 0x26	; 38
    1fe4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	9b 83       	std	Y+3, r25	; 0x03
    1fec:	8a 83       	std	Y+2, r24	; 0x02
    1fee:	06 c0       	rjmp	.+12     	; 0x1ffc <sMO_runCycle+0xe14>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1ff0:	86 e2       	ldi	r24, 0x26	; 38
    1ff2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	9b 83       	std	Y+3, r25	; 0x03
    1ffa:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1ffc:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    2000:	88 e0       	ldi	r24, 0x08	; 8
    2002:	92 e0       	ldi	r25, 0x02	; 2
    2004:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    2008:	86 e1       	ldi	r24, 0x16	; 22
    200a:	92 e0       	ldi	r25, 0x02	; 2
    200c:	40 e0       	ldi	r20, 0x00	; 0
    200e:	50 e0       	ldi	r21, 0x00	; 0
    2010:	ba 01       	movw	r22, r20
    2012:	01 e0       	ldi	r16, 0x01	; 1
    2014:	10 e0       	ldi	r17, 0x00	; 0
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    201e:	1e a6       	lds	r17, 0xbe
    2020:	1f a6       	lds	r17, 0xbf
    2022:	18 aa       	sts	0x98, r17
    2024:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    2026:	85 e0       	ldi	r24, 0x05	; 5
    2028:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	9b 83       	std	Y+3, r25	; 0x03
    2030:	8a 83       	std	Y+2, r24	; 0x02
    2032:	48 c7       	rjmp	.+3728   	; 0x2ec4 <sMO_runCycle+0x1cdc>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state EnterAmount */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    2034:	1b 83       	std	Y+3, r17	; 0x03
    2036:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress2 */
			/* Entry action for state 'CheckKeyPress2'. */
			handle->ifaceKEYPAD.lastkey = 0;
    2038:	18 86       	std	Y+8, r1	; 0x08
    203a:	19 86       	std	Y+9, r1	; 0x09
    203c:	1a 86       	std	Y+10, r1	; 0x0a
    203e:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2;
    2040:	8c e0       	ldi	r24, 0x0C	; 12
    2042:	89 83       	std	Y+1, r24	; 0x01
    2044:	16 c7       	rjmp	.+3628   	; 0x2e72 <sMO_runCycle+0x1c8a>
}

/* The reactions of state null. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1__final_0(SMO* handle) {
	/* The reactions of state null. */
	if (handle->iface.menuId == 0) { 
    2046:	8e a5       	lds	r24, 0x6e
    2048:	9f a5       	lds	r25, 0x6f
    204a:	a8 a9       	sts	0x48, r26
    204c:	b9 a9       	sts	0x49, r27
    204e:	00 97       	sbiw	r24, 0x00	; 0
    2050:	a1 05       	cpc	r26, r1
    2052:	b1 05       	cpc	r27, r1
    2054:	09 f0       	breq	.+2      	; 0x2058 <sMO_runCycle+0xe70>
    2056:	0d c7       	rjmp	.+3610   	; 0x2e72 <sMO_runCycle+0x1c8a>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	8a 30       	cpi	r24, 0x0A	; 10
    205c:	41 f1       	breq	.+80     	; 0x20ae <sMO_runCycle+0xec6>
    205e:	8b 30       	cpi	r24, 0x0B	; 11
    2060:	40 f4       	brcc	.+16     	; 0x2072 <sMO_runCycle+0xe8a>
    2062:	88 30       	cpi	r24, 0x08	; 8
    2064:	b1 f0       	breq	.+44     	; 0x2092 <sMO_runCycle+0xeaa>
    2066:	89 30       	cpi	r24, 0x09	; 9
    2068:	d8 f4       	brcc	.+54     	; 0x20a0 <sMO_runCycle+0xeb8>
    206a:	87 30       	cpi	r24, 0x07	; 7
    206c:	09 f0       	breq	.+2      	; 0x2070 <sMO_runCycle+0xe88>
    206e:	41 c0       	rjmp	.+130    	; 0x20f2 <sMO_runCycle+0xf0a>
    2070:	09 c0       	rjmp	.+18     	; 0x2084 <sMO_runCycle+0xe9c>
    2072:	8c 30       	cpi	r24, 0x0C	; 12
    2074:	51 f1       	breq	.+84     	; 0x20ca <sMO_runCycle+0xee2>
    2076:	8c 30       	cpi	r24, 0x0C	; 12
    2078:	08 f1       	brcs	.+66     	; 0x20bc <sMO_runCycle+0xed4>
    207a:	8e 30       	cpi	r24, 0x0E	; 14
    207c:	69 f1       	breq	.+90     	; 0x20d8 <sMO_runCycle+0xef0>
    207e:	8f 30       	cpi	r24, 0x0F	; 15
    2080:	c1 f5       	brne	.+112    	; 0x20f2 <sMO_runCycle+0xf0a>
    2082:	31 c0       	rjmp	.+98     	; 0x20e6 <sMO_runCycle+0xefe>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    2084:	86 e2       	ldi	r24, 0x26	; 38
    2086:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	9b 83       	std	Y+3, r25	; 0x03
    208e:	8a 83       	std	Y+2, r24	; 0x02
    2090:	30 c0       	rjmp	.+96     	; 0x20f2 <sMO_runCycle+0xf0a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    2092:	86 e2       	ldi	r24, 0x26	; 38
    2094:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	9b 83       	std	Y+3, r25	; 0x03
    209c:	8a 83       	std	Y+2, r24	; 0x02
    209e:	29 c0       	rjmp	.+82     	; 0x20f2 <sMO_runCycle+0xf0a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    20a0:	86 e2       	ldi	r24, 0x26	; 38
    20a2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	9b 83       	std	Y+3, r25	; 0x03
    20aa:	8a 83       	std	Y+2, r24	; 0x02
    20ac:	22 c0       	rjmp	.+68     	; 0x20f2 <sMO_runCycle+0xf0a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    20ae:	86 e2       	ldi	r24, 0x26	; 38
    20b0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	9b 83       	std	Y+3, r25	; 0x03
    20b8:	8a 83       	std	Y+2, r24	; 0x02
    20ba:	1b c0       	rjmp	.+54     	; 0x20f2 <sMO_runCycle+0xf0a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    20bc:	86 e2       	ldi	r24, 0x26	; 38
    20be:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	9b 83       	std	Y+3, r25	; 0x03
    20c6:	8a 83       	std	Y+2, r24	; 0x02
    20c8:	14 c0       	rjmp	.+40     	; 0x20f2 <sMO_runCycle+0xf0a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    20ca:	86 e2       	ldi	r24, 0x26	; 38
    20cc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	9b 83       	std	Y+3, r25	; 0x03
    20d4:	8a 83       	std	Y+2, r24	; 0x02
    20d6:	0d c0       	rjmp	.+26     	; 0x20f2 <sMO_runCycle+0xf0a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    20d8:	86 e2       	ldi	r24, 0x26	; 38
    20da:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	9b 83       	std	Y+3, r25	; 0x03
    20e2:	8a 83       	std	Y+2, r24	; 0x02
    20e4:	06 c0       	rjmp	.+12     	; 0x20f2 <sMO_runCycle+0xf0a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    20e6:	86 e2       	ldi	r24, 0x26	; 38
    20e8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	9b 83       	std	Y+3, r25	; 0x03
    20f0:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    20f2:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    20f6:	88 e0       	ldi	r24, 0x08	; 8
    20f8:	92 e0       	ldi	r25, 0x02	; 2
    20fa:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    20fe:	86 e1       	ldi	r24, 0x16	; 22
    2100:	92 e0       	ldi	r25, 0x02	; 2
    2102:	40 e0       	ldi	r20, 0x00	; 0
    2104:	50 e0       	ldi	r21, 0x00	; 0
    2106:	ba 01       	movw	r22, r20
    2108:	01 e0       	ldi	r16, 0x01	; 1
    210a:	10 e0       	ldi	r17, 0x00	; 0
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    2114:	1e a6       	lds	r17, 0xbe
    2116:	1f a6       	lds	r17, 0xbf
    2118:	18 aa       	sts	0x98, r17
    211a:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    211c:	85 e0       	ldi	r24, 0x05	; 5
    211e:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	9b 83       	std	Y+3, r25	; 0x03
    2126:	8a 83       	std	Y+2, r24	; 0x02
    2128:	cd c6       	rjmp	.+3482   	; 0x2ec4 <sMO_runCycle+0x1cdc>
/* The reactions of state MenuA. */
static void sMO_react_main_region_on_r1_Running_running_main_MenuA(SMO* handle) {
	/* The reactions of state MenuA. */
	if (bool_true) { 
		/* Default exit sequence for state MenuA */
		handle->stateConfVector[1] = SMO_last_state;
    212a:	86 e2       	ldi	r24, 0x26	; 38
    212c:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    212e:	ee 24       	eor	r14, r14
    2130:	ff 24       	eor	r15, r15
    2132:	e3 94       	inc	r14
    2134:	fb 82       	std	Y+3, r15	; 0x03
    2136:	ea 82       	std	Y+2, r14	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    2138:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Nhap ma mon an:");
    213c:	82 e2       	ldi	r24, 0x22	; 34
    213e:	92 e0       	ldi	r25, 0x02	; 2
    2140:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    2144:	82 e3       	ldi	r24, 0x32	; 50
    2146:	92 e0       	ldi	r25, 0x02	; 2
    2148:	40 e0       	ldi	r20, 0x00	; 0
    214a:	50 e0       	ldi	r21, 0x00	; 0
    214c:	ba 01       	movw	r22, r20
    214e:	01 e0       	ldi	r16, 0x01	; 1
    2150:	10 e0       	ldi	r17, 0x00	; 0
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    215a:	19 a6       	lds	r17, 0xb9
    215c:	1a a6       	lds	r17, 0xba
    215e:	1b a6       	lds	r17, 0xbb
    2160:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    2162:	19 a2       	lds	r17, 0x99
    2164:	1a a2       	lds	r17, 0x9a
    2166:	1b a2       	lds	r17, 0x9b
    2168:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    216a:	87 e0       	ldi	r24, 0x07	; 7
    216c:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    216e:	fb 82       	std	Y+3, r15	; 0x03
    2170:	ea 82       	std	Y+2, r14	; 0x02
    2172:	a8 c6       	rjmp	.+3408   	; 0x2ec4 <sMO_runCycle+0x1cdc>
}

/* The reactions of state CheckKeyPress. */
static void sMO_react_main_region_on_r1_Running_running_main_CheckKeyPress(SMO* handle) {
	/* The reactions of state CheckKeyPress. */
	if (handle->ifaceKEYPAD.lastkey == 13 && handle->ifaceKEYPAD.key_pressed_raised) { 
    2174:	88 85       	ldd	r24, Y+8	; 0x08
    2176:	99 85       	ldd	r25, Y+9	; 0x09
    2178:	aa 85       	ldd	r26, Y+10	; 0x0a
    217a:	bb 85       	ldd	r27, Y+11	; 0x0b
    217c:	8d 30       	cpi	r24, 0x0D	; 13
    217e:	91 05       	cpc	r25, r1
    2180:	a1 05       	cpc	r26, r1
    2182:	b1 05       	cpc	r27, r1
    2184:	61 f4       	brne	.+24     	; 0x219e <sMO_runCycle+0xfb6>
    2186:	2d 85       	ldd	r18, Y+13	; 0x0d
    2188:	22 23       	and	r18, r18
    218a:	49 f0       	breq	.+18     	; 0x219e <sMO_runCycle+0xfb6>
		/* Default exit sequence for state CheckKeyPress */
		handle->stateConfVector[1] = SMO_last_state;
		handle->stateConfVectorPosition = 1;
    218c:	1b 83       	std	Y+3, r17	; 0x03
    218e:	0a 83       	std	Y+2, r16	; 0x02
		/* Default enter sequence for state MenuA */
		/* Entry action for state 'MenuA'. */
		handle->iface.menuId = 1;
    2190:	8e a6       	lds	r24, 0xbe
    2192:	9f a6       	lds	r25, 0xbf
    2194:	a8 aa       	sts	0x98, r26
    2196:	b9 aa       	sts	0x99, r27
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_MenuA;
    2198:	b0 e1       	ldi	r27, 0x10	; 16
    219a:	b9 83       	std	Y+1, r27	; 0x01
    219c:	6a c6       	rjmp	.+3284   	; 0x2e72 <sMO_runCycle+0x1c8a>
		handle->stateConfVectorPosition = 1;
	}  else {
		if (handle->ifaceKEYPAD.lastkey == 14 && handle->ifaceKEYPAD.key_pressed_raised) { 
    219e:	8e 30       	cpi	r24, 0x0E	; 14
    21a0:	91 05       	cpc	r25, r1
    21a2:	a1 05       	cpc	r26, r1
    21a4:	b1 05       	cpc	r27, r1
    21a6:	81 f4       	brne	.+32     	; 0x21c8 <sMO_runCycle+0xfe0>
    21a8:	2d 85       	ldd	r18, Y+13	; 0x0d
    21aa:	22 23       	and	r18, r18
    21ac:	69 f0       	breq	.+26     	; 0x21c8 <sMO_runCycle+0xfe0>
			/* Default exit sequence for state CheckKeyPress */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    21ae:	1b 83       	std	Y+3, r17	; 0x03
    21b0:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state MenuB */
			/* Entry action for state 'MenuB'. */
			handle->iface.menuId = 2;
    21b2:	82 e0       	ldi	r24, 0x02	; 2
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	a0 e0       	ldi	r26, 0x00	; 0
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	8e a7       	lds	r24, 0x7e
    21bc:	9f a7       	lds	r25, 0x7f
    21be:	a8 ab       	sts	0x58, r26
    21c0:	b9 ab       	sts	0x59, r27
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_MenuB;
    21c2:	98 e1       	ldi	r25, 0x18	; 24
    21c4:	99 83       	std	Y+1, r25	; 0x01
    21c6:	55 c6       	rjmp	.+3242   	; 0x2e72 <sMO_runCycle+0x1c8a>
			handle->stateConfVectorPosition = 1;
		}  else {
			if (handle->ifaceKEYPAD.lastkey == 15 && handle->ifaceKEYPAD.key_pressed_raised) { 
    21c8:	8f 30       	cpi	r24, 0x0F	; 15
    21ca:	91 05       	cpc	r25, r1
    21cc:	a1 05       	cpc	r26, r1
    21ce:	b1 05       	cpc	r27, r1
    21d0:	61 f4       	brne	.+24     	; 0x21ea <sMO_runCycle+0x1002>
    21d2:	2d 85       	ldd	r18, Y+13	; 0x0d
    21d4:	22 23       	and	r18, r18
    21d6:	49 f0       	breq	.+18     	; 0x21ea <sMO_runCycle+0x1002>
				/* Default exit sequence for state CheckKeyPress */
				handle->stateConfVector[1] = SMO_last_state;
				handle->stateConfVectorPosition = 1;
    21d8:	1b 83       	std	Y+3, r17	; 0x03
    21da:	0a 83       	std	Y+2, r16	; 0x02
				/* Default enter sequence for state MenuC */
				/* Entry action for state 'MenuC'. */
				handle->iface.menuId = 3;
    21dc:	4e a6       	lds	r20, 0xbe
    21de:	5f a6       	lds	r21, 0xbf
    21e0:	68 aa       	sts	0x98, r22
    21e2:	79 aa       	sts	0x99, r23
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_MenuC;
    21e4:	a9 e1       	ldi	r26, 0x19	; 25
    21e6:	a9 83       	std	Y+1, r26	; 0x01
    21e8:	44 c6       	rjmp	.+3208   	; 0x2e72 <sMO_runCycle+0x1c8a>
				handle->stateConfVectorPosition = 1;
			}  else {
				if (handle->ifaceKEYPAD.lastkey == 16 && handle->ifaceKEYPAD.key_pressed_raised) { 
    21ea:	80 31       	cpi	r24, 0x10	; 16
    21ec:	91 05       	cpc	r25, r1
    21ee:	a1 05       	cpc	r26, r1
    21f0:	b1 05       	cpc	r27, r1
    21f2:	09 f0       	breq	.+2      	; 0x21f6 <sMO_runCycle+0x100e>
    21f4:	3e c6       	rjmp	.+3196   	; 0x2e72 <sMO_runCycle+0x1c8a>
    21f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f8:	88 23       	and	r24, r24
    21fa:	09 f4       	brne	.+2      	; 0x21fe <sMO_runCycle+0x1016>
    21fc:	3a c6       	rjmp	.+3188   	; 0x2e72 <sMO_runCycle+0x1c8a>
					/* Default exit sequence for state CheckKeyPress */
					handle->stateConfVector[1] = SMO_last_state;
					handle->stateConfVectorPosition = 1;
    21fe:	1b 83       	std	Y+3, r17	; 0x03
    2200:	0a 83       	std	Y+2, r16	; 0x02
					/* Default enter sequence for state MenuD */
					/* Entry action for state 'MenuD'. */
					handle->iface.menuId = 4;
    2202:	ce a6       	lds	r28, 0xbe
    2204:	df a6       	lds	r29, 0xbf
    2206:	e8 aa       	sts	0x98, r30
    2208:	f9 aa       	sts	0x99, r31
					handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_MenuD;
    220a:	ba e1       	ldi	r27, 0x1A	; 26
    220c:	b9 83       	std	Y+1, r27	; 0x01
    220e:	31 c6       	rjmp	.+3170   	; 0x2e72 <sMO_runCycle+0x1c8a>
}

/* The reactions of state Send. */
static void sMO_react_main_region_on_r1_Running_running_main_SendData_r1_Send(SMO* handle) {
	/* The reactions of state Send. */
	if (handle->ifaceRF.result == bool_true) { 
    2210:	8f 89       	ldd	r24, Y+23	; 0x17
    2212:	88 23       	and	r24, r24
    2214:	09 f4       	brne	.+2      	; 0x2218 <sMO_runCycle+0x1030>
    2216:	55 c0       	rjmp	.+170    	; 0x22c2 <sMO_runCycle+0x10da>
		/* Default exit sequence for state SendData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	85 31       	cpi	r24, 0x15	; 21
    221c:	d1 f0       	breq	.+52     	; 0x2252 <sMO_runCycle+0x106a>
    221e:	86 31       	cpi	r24, 0x16	; 22
    2220:	28 f4       	brcc	.+10     	; 0x222c <sMO_runCycle+0x1044>
    2222:	83 31       	cpi	r24, 0x13	; 19
    2224:	41 f0       	breq	.+16     	; 0x2236 <sMO_runCycle+0x104e>
    2226:	84 31       	cpi	r24, 0x14	; 20
    2228:	61 f5       	brne	.+88     	; 0x2282 <sMO_runCycle+0x109a>
    222a:	0c c0       	rjmp	.+24     	; 0x2244 <sMO_runCycle+0x105c>
    222c:	86 31       	cpi	r24, 0x16	; 22
    222e:	c1 f0       	breq	.+48     	; 0x2260 <sMO_runCycle+0x1078>
    2230:	87 31       	cpi	r24, 0x17	; 23
    2232:	39 f5       	brne	.+78     	; 0x2282 <sMO_runCycle+0x109a>
    2234:	20 c0       	rjmp	.+64     	; 0x2276 <sMO_runCycle+0x108e>
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    2236:	86 e2       	ldi	r24, 0x26	; 38
    2238:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	9b 83       	std	Y+3, r25	; 0x03
    2240:	8a 83       	std	Y+2, r24	; 0x02
    2242:	1f c0       	rjmp	.+62     	; 0x2282 <sMO_runCycle+0x109a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    2244:	86 e2       	ldi	r24, 0x26	; 38
    2246:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	9b 83       	std	Y+3, r25	; 0x03
    224e:	8a 83       	std	Y+2, r24	; 0x02
    2250:	18 c0       	rjmp	.+48     	; 0x2282 <sMO_runCycle+0x109a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2252:	86 e2       	ldi	r24, 0x26	; 38
    2254:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	9b 83       	std	Y+3, r25	; 0x03
    225c:	8a 83       	std	Y+2, r24	; 0x02
    225e:	11 c0       	rjmp	.+34     	; 0x2282 <sMO_runCycle+0x109a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail1 : {
				/* Default exit sequence for state SendFail1 */
				handle->stateConfVector[1] = SMO_last_state;
    2260:	86 e2       	ldi	r24, 0x26	; 38
    2262:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	9b 83       	std	Y+3, r25	; 0x03
    226a:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail1'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail1_time_event_0_raised) );		
    226c:	ce 01       	movw	r24, r28
    226e:	cd 96       	adiw	r24, 0x3d	; 61
    2270:	0e 94 b3 03 	call	0x766	; 0x766 <sMO_unsetTimer>
    2274:	06 c0       	rjmp	.+12     	; 0x2282 <sMO_runCycle+0x109a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    2276:	86 e2       	ldi	r24, 0x26	; 38
    2278:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	9b 83       	std	Y+3, r25	; 0x03
    2280:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    2282:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Nhap ma mon an:");
    2286:	82 e2       	ldi	r24, 0x22	; 34
    2288:	92 e0       	ldi	r25, 0x02	; 2
    228a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    228e:	82 e3       	ldi	r24, 0x32	; 50
    2290:	92 e0       	ldi	r25, 0x02	; 2
    2292:	40 e0       	ldi	r20, 0x00	; 0
    2294:	50 e0       	ldi	r21, 0x00	; 0
    2296:	ba 01       	movw	r22, r20
    2298:	01 e0       	ldi	r16, 0x01	; 1
    229a:	10 e0       	ldi	r17, 0x00	; 0
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    22a4:	19 a6       	lds	r17, 0xb9
    22a6:	1a a6       	lds	r17, 0xba
    22a8:	1b a6       	lds	r17, 0xbb
    22aa:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    22ac:	19 a2       	lds	r17, 0x99
    22ae:	1a a2       	lds	r17, 0x9a
    22b0:	1b a2       	lds	r17, 0x9b
    22b2:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    22b4:	87 e0       	ldi	r24, 0x07	; 7
    22b6:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	9b 83       	std	Y+3, r25	; 0x03
    22be:	8a 83       	std	Y+2, r24	; 0x02
    22c0:	01 c6       	rjmp	.+3074   	; 0x2ec4 <sMO_runCycle+0x1cdc>
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_Check;
			handle->stateConfVectorPosition = 1;
		}  else {
			if (handle->ifaceRF.result == bool_false) { 
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    22c2:	86 e2       	ldi	r24, 0x26	; 38
    22c4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    22c6:	01 e0       	ldi	r16, 0x01	; 1
    22c8:	10 e0       	ldi	r17, 0x00	; 0
    22ca:	1b 83       	std	Y+3, r17	; 0x03
    22cc:	0a 83       	std	Y+2, r16	; 0x02
				/* Default enter sequence for state SendFail1 */
				/* Entry action for state 'SendFail1'. */
				sMO_setTimer( (sc_eventid) &(handle->timeEvents.SendFail1_time_event_0_raised) , 2 * 1000, bool_false);
    22ce:	ce 01       	movw	r24, r28
    22d0:	cd 96       	adiw	r24, 0x3d	; 61
    22d2:	40 ed       	ldi	r20, 0xD0	; 208
    22d4:	57 e0       	ldi	r21, 0x07	; 7
    22d6:	60 e0       	ldi	r22, 0x00	; 0
    22d8:	70 e0       	ldi	r23, 0x00	; 0
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	0e 94 b0 03 	call	0x760	; 0x760 <sMO_setTimer>
				sMOIfaceLCD_clear();
    22e0:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
				sMOIfaceLCD_writeString("Send fail");
    22e4:	8b e4       	ldi	r24, 0x4B	; 75
    22e6:	92 e0       	ldi	r25, 0x02	; 2
    22e8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail1;
    22ec:	86 e1       	ldi	r24, 0x16	; 22
    22ee:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    22f0:	1b 83       	std	Y+3, r17	; 0x03
    22f2:	0a 83       	std	Y+2, r16	; 0x02
    22f4:	e7 c5       	rjmp	.+3022   	; 0x2ec4 <sMO_runCycle+0x1cdc>
}

/* The reactions of state Check. */
static void sMO_react_main_region_on_r1_Running_running_main_SendData_r1_Check(SMO* handle) {
	/* The reactions of state Check. */
	if (handle->ifaceRF.result == bool_true) { 
    22f6:	8f 89       	ldd	r24, Y+23	; 0x17
    22f8:	88 23       	and	r24, r24
    22fa:	09 f4       	brne	.+2      	; 0x22fe <sMO_runCycle+0x1116>
    22fc:	55 c0       	rjmp	.+170    	; 0x23a8 <sMO_runCycle+0x11c0>
		/* Default exit sequence for state SendData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	85 31       	cpi	r24, 0x15	; 21
    2302:	d1 f0       	breq	.+52     	; 0x2338 <sMO_runCycle+0x1150>
    2304:	86 31       	cpi	r24, 0x16	; 22
    2306:	28 f4       	brcc	.+10     	; 0x2312 <sMO_runCycle+0x112a>
    2308:	83 31       	cpi	r24, 0x13	; 19
    230a:	41 f0       	breq	.+16     	; 0x231c <sMO_runCycle+0x1134>
    230c:	84 31       	cpi	r24, 0x14	; 20
    230e:	61 f5       	brne	.+88     	; 0x2368 <sMO_runCycle+0x1180>
    2310:	0c c0       	rjmp	.+24     	; 0x232a <sMO_runCycle+0x1142>
    2312:	86 31       	cpi	r24, 0x16	; 22
    2314:	c1 f0       	breq	.+48     	; 0x2346 <sMO_runCycle+0x115e>
    2316:	87 31       	cpi	r24, 0x17	; 23
    2318:	39 f5       	brne	.+78     	; 0x2368 <sMO_runCycle+0x1180>
    231a:	20 c0       	rjmp	.+64     	; 0x235c <sMO_runCycle+0x1174>
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    231c:	86 e2       	ldi	r24, 0x26	; 38
    231e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	9b 83       	std	Y+3, r25	; 0x03
    2326:	8a 83       	std	Y+2, r24	; 0x02
    2328:	1f c0       	rjmp	.+62     	; 0x2368 <sMO_runCycle+0x1180>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    232a:	86 e2       	ldi	r24, 0x26	; 38
    232c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	9b 83       	std	Y+3, r25	; 0x03
    2334:	8a 83       	std	Y+2, r24	; 0x02
    2336:	18 c0       	rjmp	.+48     	; 0x2368 <sMO_runCycle+0x1180>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2338:	86 e2       	ldi	r24, 0x26	; 38
    233a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	9b 83       	std	Y+3, r25	; 0x03
    2342:	8a 83       	std	Y+2, r24	; 0x02
    2344:	11 c0       	rjmp	.+34     	; 0x2368 <sMO_runCycle+0x1180>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail1 : {
				/* Default exit sequence for state SendFail1 */
				handle->stateConfVector[1] = SMO_last_state;
    2346:	86 e2       	ldi	r24, 0x26	; 38
    2348:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	9b 83       	std	Y+3, r25	; 0x03
    2350:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail1'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail1_time_event_0_raised) );		
    2352:	ce 01       	movw	r24, r28
    2354:	cd 96       	adiw	r24, 0x3d	; 61
    2356:	0e 94 b3 03 	call	0x766	; 0x766 <sMO_unsetTimer>
    235a:	06 c0       	rjmp	.+12     	; 0x2368 <sMO_runCycle+0x1180>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    235c:	86 e2       	ldi	r24, 0x26	; 38
    235e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	9b 83       	std	Y+3, r25	; 0x03
    2366:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    2368:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Nhap ma mon an:");
    236c:	82 e2       	ldi	r24, 0x22	; 34
    236e:	92 e0       	ldi	r25, 0x02	; 2
    2370:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    2374:	82 e3       	ldi	r24, 0x32	; 50
    2376:	92 e0       	ldi	r25, 0x02	; 2
    2378:	40 e0       	ldi	r20, 0x00	; 0
    237a:	50 e0       	ldi	r21, 0x00	; 0
    237c:	ba 01       	movw	r22, r20
    237e:	01 e0       	ldi	r16, 0x01	; 1
    2380:	10 e0       	ldi	r17, 0x00	; 0
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    238a:	19 a6       	lds	r17, 0xb9
    238c:	1a a6       	lds	r17, 0xba
    238e:	1b a6       	lds	r17, 0xbb
    2390:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    2392:	19 a2       	lds	r17, 0x99
    2394:	1a a2       	lds	r17, 0x9a
    2396:	1b a2       	lds	r17, 0x9b
    2398:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    239a:	87 e0       	ldi	r24, 0x07	; 7
    239c:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	9b 83       	std	Y+3, r25	; 0x03
    23a4:	8a 83       	std	Y+2, r24	; 0x02
    23a6:	8e c5       	rjmp	.+2844   	; 0x2ec4 <sMO_runCycle+0x1cdc>
	}  else {
		if (handle->ifaceRF.result == bool_false) { 
			/* Default exit sequence for state Check */
			handle->stateConfVector[1] = SMO_last_state;
    23a8:	86 e2       	ldi	r24, 0x26	; 38
    23aa:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    23ac:	44 24       	eor	r4, r4
    23ae:	55 24       	eor	r5, r5
    23b0:	43 94       	inc	r4
    23b2:	5b 82       	std	Y+3, r5	; 0x03
    23b4:	4a 82       	std	Y+2, r4	; 0x02
			/* Default enter sequence for state Send */
			/* Entry action for state 'Send'. */
			handle->ifaceRF.retry += 1;
    23b6:	88 8d       	ldd	r24, Y+24	; 0x18
    23b8:	99 8d       	ldd	r25, Y+25	; 0x19
    23ba:	aa 8d       	ldd	r26, Y+26	; 0x1a
    23bc:	bb 8d       	ldd	r27, Y+27	; 0x1b
    23be:	01 96       	adiw	r24, 0x01	; 1
    23c0:	a1 1d       	adc	r26, r1
    23c2:	b1 1d       	adc	r27, r1
    23c4:	88 8f       	std	Y+24, r24	; 0x18
    23c6:	99 8f       	std	Y+25, r25	; 0x19
    23c8:	aa 8f       	std	Y+26, r26	; 0x1a
    23ca:	bb 8f       	std	Y+27, r27	; 0x1b
			handle->ifaceRF.result = sMOIfaceRF_sendData(handle->iface.menuId, handle->iface.tableId, handle->ifaceDISH.ID, handle->ifaceDISH.amount);
    23cc:	6e a5       	lds	r22, 0x6e
    23ce:	7f a5       	lds	r23, 0x6f
    23d0:	88 a9       	sts	0x48, r24
    23d2:	99 a9       	sts	0x49, r25
    23d4:	2a a9       	sts	0x4a, r18
    23d6:	3b a9       	sts	0x4b, r19
    23d8:	4c a9       	sts	0x4c, r20
    23da:	5d a9       	sts	0x4d, r21
    23dc:	e9 a0       	lds	r30, 0x89
    23de:	fa a0       	lds	r31, 0x8a
    23e0:	0b a1       	lds	r16, 0x4b
    23e2:	1c a1       	lds	r17, 0x4c
    23e4:	8d a0       	lds	r24, 0x8d
    23e6:	9e a0       	lds	r25, 0x8e
    23e8:	af a0       	lds	r26, 0x8f
    23ea:	b8 a4       	lds	r27, 0xa8
    23ec:	65 01       	movw	r12, r10
    23ee:	54 01       	movw	r10, r8
    23f0:	0e 94 4a 03 	call	0x694	; 0x694 <sMOIfaceRF_sendData>
    23f4:	8f 8b       	std	Y+23, r24	; 0x17
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_Send;
    23f6:	83 e1       	ldi	r24, 0x13	; 19
    23f8:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    23fa:	5b 82       	std	Y+3, r5	; 0x03
    23fc:	4a 82       	std	Y+2, r4	; 0x02
    23fe:	62 c5       	rjmp	.+2756   	; 0x2ec4 <sMO_runCycle+0x1cdc>
}

/* The reactions of state null. */
static void sMO_react_main_region_on_r1_Running_running_main_SendData_r1__final_0(SMO* handle) {
	/* The reactions of state null. */
	if (handle->ifaceRF.result == bool_true) { 
    2400:	8f 89       	ldd	r24, Y+23	; 0x17
    2402:	88 23       	and	r24, r24
    2404:	09 f4       	brne	.+2      	; 0x2408 <sMO_runCycle+0x1220>
    2406:	35 c5       	rjmp	.+2666   	; 0x2e72 <sMO_runCycle+0x1c8a>
		/* Default exit sequence for state SendData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2408:	89 81       	ldd	r24, Y+1	; 0x01
    240a:	85 31       	cpi	r24, 0x15	; 21
    240c:	d1 f0       	breq	.+52     	; 0x2442 <sMO_runCycle+0x125a>
    240e:	86 31       	cpi	r24, 0x16	; 22
    2410:	28 f4       	brcc	.+10     	; 0x241c <sMO_runCycle+0x1234>
    2412:	83 31       	cpi	r24, 0x13	; 19
    2414:	41 f0       	breq	.+16     	; 0x2426 <sMO_runCycle+0x123e>
    2416:	84 31       	cpi	r24, 0x14	; 20
    2418:	61 f5       	brne	.+88     	; 0x2472 <sMO_runCycle+0x128a>
    241a:	0c c0       	rjmp	.+24     	; 0x2434 <sMO_runCycle+0x124c>
    241c:	86 31       	cpi	r24, 0x16	; 22
    241e:	c1 f0       	breq	.+48     	; 0x2450 <sMO_runCycle+0x1268>
    2420:	87 31       	cpi	r24, 0x17	; 23
    2422:	39 f5       	brne	.+78     	; 0x2472 <sMO_runCycle+0x128a>
    2424:	20 c0       	rjmp	.+64     	; 0x2466 <sMO_runCycle+0x127e>
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    2426:	86 e2       	ldi	r24, 0x26	; 38
    2428:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	9b 83       	std	Y+3, r25	; 0x03
    2430:	8a 83       	std	Y+2, r24	; 0x02
    2432:	1f c0       	rjmp	.+62     	; 0x2472 <sMO_runCycle+0x128a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    2434:	86 e2       	ldi	r24, 0x26	; 38
    2436:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	9b 83       	std	Y+3, r25	; 0x03
    243e:	8a 83       	std	Y+2, r24	; 0x02
    2440:	18 c0       	rjmp	.+48     	; 0x2472 <sMO_runCycle+0x128a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2442:	86 e2       	ldi	r24, 0x26	; 38
    2444:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	9b 83       	std	Y+3, r25	; 0x03
    244c:	8a 83       	std	Y+2, r24	; 0x02
    244e:	11 c0       	rjmp	.+34     	; 0x2472 <sMO_runCycle+0x128a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail1 : {
				/* Default exit sequence for state SendFail1 */
				handle->stateConfVector[1] = SMO_last_state;
    2450:	86 e2       	ldi	r24, 0x26	; 38
    2452:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	9b 83       	std	Y+3, r25	; 0x03
    245a:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail1'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail1_time_event_0_raised) );		
    245c:	ce 01       	movw	r24, r28
    245e:	cd 96       	adiw	r24, 0x3d	; 61
    2460:	0e 94 b3 03 	call	0x766	; 0x766 <sMO_unsetTimer>
    2464:	06 c0       	rjmp	.+12     	; 0x2472 <sMO_runCycle+0x128a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    2466:	86 e2       	ldi	r24, 0x26	; 38
    2468:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	9b 83       	std	Y+3, r25	; 0x03
    2470:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    2472:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Nhap ma mon an:");
    2476:	82 e2       	ldi	r24, 0x22	; 34
    2478:	92 e0       	ldi	r25, 0x02	; 2
    247a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    247e:	82 e3       	ldi	r24, 0x32	; 50
    2480:	92 e0       	ldi	r25, 0x02	; 2
    2482:	40 e0       	ldi	r20, 0x00	; 0
    2484:	50 e0       	ldi	r21, 0x00	; 0
    2486:	ba 01       	movw	r22, r20
    2488:	01 e0       	ldi	r16, 0x01	; 1
    248a:	10 e0       	ldi	r17, 0x00	; 0
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    2494:	19 a6       	lds	r17, 0xb9
    2496:	1a a6       	lds	r17, 0xba
    2498:	1b a6       	lds	r17, 0xbb
    249a:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    249c:	19 a2       	lds	r17, 0x99
    249e:	1a a2       	lds	r17, 0x9a
    24a0:	1b a2       	lds	r17, 0x9b
    24a2:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    24a4:	87 e0       	ldi	r24, 0x07	; 7
    24a6:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	9b 83       	std	Y+3, r25	; 0x03
    24ae:	8a 83       	std	Y+2, r24	; 0x02
    24b0:	09 c5       	rjmp	.+2578   	; 0x2ec4 <sMO_runCycle+0x1cdc>
}

/* The reactions of state SendFail1. */
static void sMO_react_main_region_on_r1_Running_running_main_SendData_r1_SendFail1(SMO* handle) {
	/* The reactions of state SendFail1. */
	if (handle->ifaceRF.result == bool_true) { 
    24b2:	8f 89       	ldd	r24, Y+23	; 0x17
    24b4:	88 23       	and	r24, r24
    24b6:	09 f4       	brne	.+2      	; 0x24ba <sMO_runCycle+0x12d2>
    24b8:	55 c0       	rjmp	.+170    	; 0x2564 <sMO_runCycle+0x137c>
		/* Default exit sequence for state SendData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    24ba:	89 81       	ldd	r24, Y+1	; 0x01
    24bc:	85 31       	cpi	r24, 0x15	; 21
    24be:	d1 f0       	breq	.+52     	; 0x24f4 <sMO_runCycle+0x130c>
    24c0:	86 31       	cpi	r24, 0x16	; 22
    24c2:	28 f4       	brcc	.+10     	; 0x24ce <sMO_runCycle+0x12e6>
    24c4:	83 31       	cpi	r24, 0x13	; 19
    24c6:	41 f0       	breq	.+16     	; 0x24d8 <sMO_runCycle+0x12f0>
    24c8:	84 31       	cpi	r24, 0x14	; 20
    24ca:	61 f5       	brne	.+88     	; 0x2524 <sMO_runCycle+0x133c>
    24cc:	0c c0       	rjmp	.+24     	; 0x24e6 <sMO_runCycle+0x12fe>
    24ce:	86 31       	cpi	r24, 0x16	; 22
    24d0:	c1 f0       	breq	.+48     	; 0x2502 <sMO_runCycle+0x131a>
    24d2:	87 31       	cpi	r24, 0x17	; 23
    24d4:	39 f5       	brne	.+78     	; 0x2524 <sMO_runCycle+0x133c>
    24d6:	20 c0       	rjmp	.+64     	; 0x2518 <sMO_runCycle+0x1330>
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    24d8:	86 e2       	ldi	r24, 0x26	; 38
    24da:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	9b 83       	std	Y+3, r25	; 0x03
    24e2:	8a 83       	std	Y+2, r24	; 0x02
    24e4:	1f c0       	rjmp	.+62     	; 0x2524 <sMO_runCycle+0x133c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    24e6:	86 e2       	ldi	r24, 0x26	; 38
    24e8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	9b 83       	std	Y+3, r25	; 0x03
    24f0:	8a 83       	std	Y+2, r24	; 0x02
    24f2:	18 c0       	rjmp	.+48     	; 0x2524 <sMO_runCycle+0x133c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    24f4:	86 e2       	ldi	r24, 0x26	; 38
    24f6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	9b 83       	std	Y+3, r25	; 0x03
    24fe:	8a 83       	std	Y+2, r24	; 0x02
    2500:	11 c0       	rjmp	.+34     	; 0x2524 <sMO_runCycle+0x133c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail1 : {
				/* Default exit sequence for state SendFail1 */
				handle->stateConfVector[1] = SMO_last_state;
    2502:	86 e2       	ldi	r24, 0x26	; 38
    2504:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	9b 83       	std	Y+3, r25	; 0x03
    250c:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail1'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail1_time_event_0_raised) );		
    250e:	ce 01       	movw	r24, r28
    2510:	cd 96       	adiw	r24, 0x3d	; 61
    2512:	0e 94 b3 03 	call	0x766	; 0x766 <sMO_unsetTimer>
    2516:	06 c0       	rjmp	.+12     	; 0x2524 <sMO_runCycle+0x133c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    2518:	86 e2       	ldi	r24, 0x26	; 38
    251a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	9b 83       	std	Y+3, r25	; 0x03
    2522:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    2524:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Nhap ma mon an:");
    2528:	82 e2       	ldi	r24, 0x22	; 34
    252a:	92 e0       	ldi	r25, 0x02	; 2
    252c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    2530:	82 e3       	ldi	r24, 0x32	; 50
    2532:	92 e0       	ldi	r25, 0x02	; 2
    2534:	40 e0       	ldi	r20, 0x00	; 0
    2536:	50 e0       	ldi	r21, 0x00	; 0
    2538:	ba 01       	movw	r22, r20
    253a:	01 e0       	ldi	r16, 0x01	; 1
    253c:	10 e0       	ldi	r17, 0x00	; 0
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    2546:	19 a6       	lds	r17, 0xb9
    2548:	1a a6       	lds	r17, 0xba
    254a:	1b a6       	lds	r17, 0xbb
    254c:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    254e:	19 a2       	lds	r17, 0x99
    2550:	1a a2       	lds	r17, 0x9a
    2552:	1b a2       	lds	r17, 0x9b
    2554:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    2556:	87 e0       	ldi	r24, 0x07	; 7
    2558:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	9b 83       	std	Y+3, r25	; 0x03
    2560:	8a 83       	std	Y+2, r24	; 0x02
    2562:	b0 c4       	rjmp	.+2400   	; 0x2ec4 <sMO_runCycle+0x1cdc>
	}  else {
		if (handle->timeEvents.SendFail1_time_event_0_raised) { 
    2564:	8d ad       	sts	0x6d, r24
    2566:	88 23       	and	r24, r24
    2568:	09 f4       	brne	.+2      	; 0x256c <sMO_runCycle+0x1384>
    256a:	83 c4       	rjmp	.+2310   	; 0x2e72 <sMO_runCycle+0x1c8a>
			/* Default exit sequence for state SendFail1 */
			handle->stateConfVector[1] = SMO_last_state;
    256c:	86 e2       	ldi	r24, 0x26	; 38
    256e:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    2570:	01 e0       	ldi	r16, 0x01	; 1
    2572:	10 e0       	ldi	r17, 0x00	; 0
    2574:	1b 83       	std	Y+3, r17	; 0x03
    2576:	0a 83       	std	Y+2, r16	; 0x02
			/* Exit action for state 'SendFail1'. */
			sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail1_time_event_0_raised) );		
    2578:	ce 01       	movw	r24, r28
    257a:	cd 96       	adiw	r24, 0x3d	; 61
    257c:	0e 94 b3 03 	call	0x766	; 0x766 <sMO_unsetTimer>
			/* Default enter sequence for state ResetResult */
			/* Entry action for state 'ResetResult'. */
			handle->ifaceRF.result = bool_true;
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	8f 8b       	std	Y+23, r24	; 0x17
			handle->ifaceRF.retry = 0;
    2584:	18 8e       	std	Y+24, r1	; 0x18
    2586:	19 8e       	std	Y+25, r1	; 0x19
    2588:	1a 8e       	std	Y+26, r1	; 0x1a
    258a:	1b 8e       	std	Y+27, r1	; 0x1b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult;
    258c:	87 e1       	ldi	r24, 0x17	; 23
    258e:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    2590:	1b 83       	std	Y+3, r17	; 0x03
    2592:	0a 83       	std	Y+2, r16	; 0x02
    2594:	97 c4       	rjmp	.+2350   	; 0x2ec4 <sMO_runCycle+0x1cdc>
}

/* The reactions of state ResetResult. */
static void sMO_react_main_region_on_r1_Running_running_main_SendData_r1_ResetResult(SMO* handle) {
	/* The reactions of state ResetResult. */
	if (handle->ifaceRF.result == bool_true) { 
    2596:	8f 89       	ldd	r24, Y+23	; 0x17
    2598:	88 23       	and	r24, r24
    259a:	09 f4       	brne	.+2      	; 0x259e <sMO_runCycle+0x13b6>
    259c:	55 c0       	rjmp	.+170    	; 0x2648 <sMO_runCycle+0x1460>
		/* Default exit sequence for state SendData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	85 31       	cpi	r24, 0x15	; 21
    25a2:	d1 f0       	breq	.+52     	; 0x25d8 <sMO_runCycle+0x13f0>
    25a4:	86 31       	cpi	r24, 0x16	; 22
    25a6:	28 f4       	brcc	.+10     	; 0x25b2 <sMO_runCycle+0x13ca>
    25a8:	83 31       	cpi	r24, 0x13	; 19
    25aa:	41 f0       	breq	.+16     	; 0x25bc <sMO_runCycle+0x13d4>
    25ac:	84 31       	cpi	r24, 0x14	; 20
    25ae:	61 f5       	brne	.+88     	; 0x2608 <sMO_runCycle+0x1420>
    25b0:	0c c0       	rjmp	.+24     	; 0x25ca <sMO_runCycle+0x13e2>
    25b2:	86 31       	cpi	r24, 0x16	; 22
    25b4:	c1 f0       	breq	.+48     	; 0x25e6 <sMO_runCycle+0x13fe>
    25b6:	87 31       	cpi	r24, 0x17	; 23
    25b8:	39 f5       	brne	.+78     	; 0x2608 <sMO_runCycle+0x1420>
    25ba:	20 c0       	rjmp	.+64     	; 0x25fc <sMO_runCycle+0x1414>
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    25bc:	86 e2       	ldi	r24, 0x26	; 38
    25be:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	9b 83       	std	Y+3, r25	; 0x03
    25c6:	8a 83       	std	Y+2, r24	; 0x02
    25c8:	1f c0       	rjmp	.+62     	; 0x2608 <sMO_runCycle+0x1420>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    25ca:	86 e2       	ldi	r24, 0x26	; 38
    25cc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	9b 83       	std	Y+3, r25	; 0x03
    25d4:	8a 83       	std	Y+2, r24	; 0x02
    25d6:	18 c0       	rjmp	.+48     	; 0x2608 <sMO_runCycle+0x1420>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    25d8:	86 e2       	ldi	r24, 0x26	; 38
    25da:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	9b 83       	std	Y+3, r25	; 0x03
    25e2:	8a 83       	std	Y+2, r24	; 0x02
    25e4:	11 c0       	rjmp	.+34     	; 0x2608 <sMO_runCycle+0x1420>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail1 : {
				/* Default exit sequence for state SendFail1 */
				handle->stateConfVector[1] = SMO_last_state;
    25e6:	86 e2       	ldi	r24, 0x26	; 38
    25e8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	9b 83       	std	Y+3, r25	; 0x03
    25f0:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail1'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail1_time_event_0_raised) );		
    25f2:	ce 01       	movw	r24, r28
    25f4:	cd 96       	adiw	r24, 0x3d	; 61
    25f6:	0e 94 b3 03 	call	0x766	; 0x766 <sMO_unsetTimer>
    25fa:	06 c0       	rjmp	.+12     	; 0x2608 <sMO_runCycle+0x1420>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    25fc:	86 e2       	ldi	r24, 0x26	; 38
    25fe:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	9b 83       	std	Y+3, r25	; 0x03
    2606:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    2608:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Nhap ma mon an:");
    260c:	82 e2       	ldi	r24, 0x22	; 34
    260e:	92 e0       	ldi	r25, 0x02	; 2
    2610:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    2614:	82 e3       	ldi	r24, 0x32	; 50
    2616:	92 e0       	ldi	r25, 0x02	; 2
    2618:	40 e0       	ldi	r20, 0x00	; 0
    261a:	50 e0       	ldi	r21, 0x00	; 0
    261c:	ba 01       	movw	r22, r20
    261e:	01 e0       	ldi	r16, 0x01	; 1
    2620:	10 e0       	ldi	r17, 0x00	; 0
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    262a:	19 a6       	lds	r17, 0xb9
    262c:	1a a6       	lds	r17, 0xba
    262e:	1b a6       	lds	r17, 0xbb
    2630:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    2632:	19 a2       	lds	r17, 0x99
    2634:	1a a2       	lds	r17, 0x9a
    2636:	1b a2       	lds	r17, 0x9b
    2638:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    263a:	87 e0       	ldi	r24, 0x07	; 7
    263c:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	9b 83       	std	Y+3, r25	; 0x03
    2644:	8a 83       	std	Y+2, r24	; 0x02
    2646:	3e c4       	rjmp	.+2172   	; 0x2ec4 <sMO_runCycle+0x1cdc>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state ResetResult */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    2648:	1b 83       	std	Y+3, r17	; 0x03
    264a:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state null */
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1__final_;
    264c:	85 e1       	ldi	r24, 0x15	; 21
    264e:	89 83       	std	Y+1, r24	; 0x01
    2650:	10 c4       	rjmp	.+2080   	; 0x2e72 <sMO_runCycle+0x1c8a>
/* The reactions of state MenuB. */
static void sMO_react_main_region_on_r1_Running_running_main_MenuB(SMO* handle) {
	/* The reactions of state MenuB. */
	if (bool_true) { 
		/* Default exit sequence for state MenuB */
		handle->stateConfVector[1] = SMO_last_state;
    2652:	86 e2       	ldi	r24, 0x26	; 38
    2654:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2656:	ee 24       	eor	r14, r14
    2658:	ff 24       	eor	r15, r15
    265a:	e3 94       	inc	r14
    265c:	fb 82       	std	Y+3, r15	; 0x03
    265e:	ea 82       	std	Y+2, r14	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    2660:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Nhap ma mon an:");
    2664:	82 e2       	ldi	r24, 0x22	; 34
    2666:	92 e0       	ldi	r25, 0x02	; 2
    2668:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    266c:	82 e3       	ldi	r24, 0x32	; 50
    266e:	92 e0       	ldi	r25, 0x02	; 2
    2670:	40 e0       	ldi	r20, 0x00	; 0
    2672:	50 e0       	ldi	r21, 0x00	; 0
    2674:	ba 01       	movw	r22, r20
    2676:	01 e0       	ldi	r16, 0x01	; 1
    2678:	10 e0       	ldi	r17, 0x00	; 0
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    2682:	19 a6       	lds	r17, 0xb9
    2684:	1a a6       	lds	r17, 0xba
    2686:	1b a6       	lds	r17, 0xbb
    2688:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    268a:	19 a2       	lds	r17, 0x99
    268c:	1a a2       	lds	r17, 0x9a
    268e:	1b a2       	lds	r17, 0x9b
    2690:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    2692:	87 e0       	ldi	r24, 0x07	; 7
    2694:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2696:	fb 82       	std	Y+3, r15	; 0x03
    2698:	ea 82       	std	Y+2, r14	; 0x02
    269a:	14 c4       	rjmp	.+2088   	; 0x2ec4 <sMO_runCycle+0x1cdc>
/* The reactions of state MenuC. */
static void sMO_react_main_region_on_r1_Running_running_main_MenuC(SMO* handle) {
	/* The reactions of state MenuC. */
	if (bool_true) { 
		/* Default exit sequence for state MenuC */
		handle->stateConfVector[1] = SMO_last_state;
    269c:	86 e2       	ldi	r24, 0x26	; 38
    269e:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    26a0:	ee 24       	eor	r14, r14
    26a2:	ff 24       	eor	r15, r15
    26a4:	e3 94       	inc	r14
    26a6:	fb 82       	std	Y+3, r15	; 0x03
    26a8:	ea 82       	std	Y+2, r14	; 0x02
		/* Default enter sequence for state ConfirmRequest */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state RequestConfirmation */
		/* Entry action for state 'RequestConfirmation'. */
		sMOIfaceLCD_clear();
    26aa:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("PROCEED?");
    26ae:	85 e5       	ldi	r24, 0x55	; 85
    26b0:	92 e0       	ldi	r25, 0x02	; 2
    26b2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("11-NO  12-YES", 0, 1);
    26b6:	8e e5       	ldi	r24, 0x5E	; 94
    26b8:	92 e0       	ldi	r25, 0x02	; 2
    26ba:	40 e0       	ldi	r20, 0x00	; 0
    26bc:	50 e0       	ldi	r21, 0x00	; 0
    26be:	ba 01       	movw	r22, r20
    26c0:	01 e0       	ldi	r16, 0x01	; 1
    26c2:	10 e0       	ldi	r17, 0x00	; 0
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.confirmId = 0;
    26cc:	1e aa       	sts	0x9e, r17
    26ce:	1f aa       	sts	0x9f, r17
    26d0:	18 ae       	sts	0xb8, r17
    26d2:	19 ae       	sts	0xb9, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation;
    26d4:	8c e1       	ldi	r24, 0x1C	; 28
    26d6:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    26d8:	fb 82       	std	Y+3, r15	; 0x03
    26da:	ea 82       	std	Y+2, r14	; 0x02
    26dc:	f3 c3       	rjmp	.+2022   	; 0x2ec4 <sMO_runCycle+0x1cdc>
/* The reactions of state MenuD. */
static void sMO_react_main_region_on_r1_Running_running_main_MenuD(SMO* handle) {
	/* The reactions of state MenuD. */
	if (bool_true) { 
		/* Default exit sequence for state MenuD */
		handle->stateConfVector[1] = SMO_last_state;
    26de:	86 e2       	ldi	r24, 0x26	; 38
    26e0:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    26e2:	ee 24       	eor	r14, r14
    26e4:	ff 24       	eor	r15, r15
    26e6:	e3 94       	inc	r14
    26e8:	fb 82       	std	Y+3, r15	; 0x03
    26ea:	ea 82       	std	Y+2, r14	; 0x02
		/* Default enter sequence for state ConfirmRequest */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state RequestConfirmation */
		/* Entry action for state 'RequestConfirmation'. */
		sMOIfaceLCD_clear();
    26ec:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("PROCEED?");
    26f0:	85 e5       	ldi	r24, 0x55	; 85
    26f2:	92 e0       	ldi	r25, 0x02	; 2
    26f4:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("11-NO  12-YES", 0, 1);
    26f8:	8e e5       	ldi	r24, 0x5E	; 94
    26fa:	92 e0       	ldi	r25, 0x02	; 2
    26fc:	40 e0       	ldi	r20, 0x00	; 0
    26fe:	50 e0       	ldi	r21, 0x00	; 0
    2700:	ba 01       	movw	r22, r20
    2702:	01 e0       	ldi	r16, 0x01	; 1
    2704:	10 e0       	ldi	r17, 0x00	; 0
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.confirmId = 0;
    270e:	1e aa       	sts	0x9e, r17
    2710:	1f aa       	sts	0x9f, r17
    2712:	18 ae       	sts	0xb8, r17
    2714:	19 ae       	sts	0xb9, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation;
    2716:	8c e1       	ldi	r24, 0x1C	; 28
    2718:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    271a:	fb 82       	std	Y+3, r15	; 0x03
    271c:	ea 82       	std	Y+2, r14	; 0x02
    271e:	d2 c3       	rjmp	.+1956   	; 0x2ec4 <sMO_runCycle+0x1cdc>
}

/* The reactions of state RequestConfirmation. */
static void sMO_react_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation(SMO* handle) {
	/* The reactions of state RequestConfirmation. */
	if (handle->iface.menuId == 0) { 
    2720:	8e a5       	lds	r24, 0x6e
    2722:	9f a5       	lds	r25, 0x6f
    2724:	a8 a9       	sts	0x48, r26
    2726:	b9 a9       	sts	0x49, r27
    2728:	00 97       	sbiw	r24, 0x00	; 0
    272a:	a1 05       	cpc	r26, r1
    272c:	b1 05       	cpc	r27, r1
    272e:	09 f0       	breq	.+2      	; 0x2732 <sMO_runCycle+0x154a>
    2730:	48 c0       	rjmp	.+144    	; 0x27c2 <sMO_runCycle+0x15da>
		/* Default exit sequence for state ConfirmRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2732:	89 81       	ldd	r24, Y+1	; 0x01
    2734:	8d 31       	cpi	r24, 0x1D	; 29
    2736:	89 f0       	breq	.+34     	; 0x275a <sMO_runCycle+0x1572>
    2738:	8e 31       	cpi	r24, 0x1E	; 30
    273a:	18 f4       	brcc	.+6      	; 0x2742 <sMO_runCycle+0x155a>
    273c:	8c 31       	cpi	r24, 0x1C	; 28
    273e:	29 f5       	brne	.+74     	; 0x278a <sMO_runCycle+0x15a2>
    2740:	05 c0       	rjmp	.+10     	; 0x274c <sMO_runCycle+0x1564>
    2742:	8e 31       	cpi	r24, 0x1E	; 30
    2744:	a9 f0       	breq	.+42     	; 0x2770 <sMO_runCycle+0x1588>
    2746:	8f 31       	cpi	r24, 0x1F	; 31
    2748:	01 f5       	brne	.+64     	; 0x278a <sMO_runCycle+0x15a2>
    274a:	19 c0       	rjmp	.+50     	; 0x277e <sMO_runCycle+0x1596>
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation : {
				/* Default exit sequence for state RequestConfirmation */
				handle->stateConfVector[1] = SMO_last_state;
    274c:	86 e2       	ldi	r24, 0x26	; 38
    274e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	9b 83       	std	Y+3, r25	; 0x03
    2756:	8a 83       	std	Y+2, r24	; 0x02
    2758:	18 c0       	rjmp	.+48     	; 0x278a <sMO_runCycle+0x15a2>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_Confirm : {
				/* Default exit sequence for state Confirm */
				handle->stateConfVector[1] = SMO_last_state;
    275a:	86 e2       	ldi	r24, 0x26	; 38
    275c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	9b 83       	std	Y+3, r25	; 0x03
    2764:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'Confirm'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Confirm_time_event_0_raised) );		
    2766:	ce 01       	movw	r24, r28
    2768:	ce 96       	adiw	r24, 0x3e	; 62
    276a:	0e 94 b3 03 	call	0x766	; 0x766 <sMO_unsetTimer>
    276e:	0d c0       	rjmp	.+26     	; 0x278a <sMO_runCycle+0x15a2>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress : {
				/* Default exit sequence for state CheckKeyPress */
				handle->stateConfVector[1] = SMO_last_state;
    2770:	86 e2       	ldi	r24, 0x26	; 38
    2772:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	9b 83       	std	Y+3, r25	; 0x03
    277a:	8a 83       	std	Y+2, r24	; 0x02
    277c:	06 c0       	rjmp	.+12     	; 0x278a <sMO_runCycle+0x15a2>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    277e:	86 e2       	ldi	r24, 0x26	; 38
    2780:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	9b 83       	std	Y+3, r25	; 0x03
    2788:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    278a:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    278e:	88 e0       	ldi	r24, 0x08	; 8
    2790:	92 e0       	ldi	r25, 0x02	; 2
    2792:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    2796:	86 e1       	ldi	r24, 0x16	; 22
    2798:	92 e0       	ldi	r25, 0x02	; 2
    279a:	40 e0       	ldi	r20, 0x00	; 0
    279c:	50 e0       	ldi	r21, 0x00	; 0
    279e:	ba 01       	movw	r22, r20
    27a0:	01 e0       	ldi	r16, 0x01	; 1
    27a2:	10 e0       	ldi	r17, 0x00	; 0
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    27ac:	1e a6       	lds	r17, 0xbe
    27ae:	1f a6       	lds	r17, 0xbf
    27b0:	18 aa       	sts	0x98, r17
    27b2:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    27b4:	85 e0       	ldi	r24, 0x05	; 5
    27b6:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	9b 83       	std	Y+3, r25	; 0x03
    27be:	8a 83       	std	Y+2, r24	; 0x02
    27c0:	81 c3       	rjmp	.+1794   	; 0x2ec4 <sMO_runCycle+0x1cdc>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state RequestConfirmation */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    27c2:	1b 83       	std	Y+3, r17	; 0x03
    27c4:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress */
			/* Entry action for state 'CheckKeyPress'. */
			handle->ifaceKEYPAD.lastkey = 0;
    27c6:	18 86       	std	Y+8, r1	; 0x08
    27c8:	19 86       	std	Y+9, r1	; 0x09
    27ca:	1a 86       	std	Y+10, r1	; 0x0a
    27cc:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress;
    27ce:	29 82       	std	Y+1, r2	; 0x01
    27d0:	50 c3       	rjmp	.+1696   	; 0x2e72 <sMO_runCycle+0x1c8a>
}

/* The reactions of state Confirm. */
static void sMO_react_main_region_on_r1_Running_running_main_ConfirmRequest_r1_Confirm(SMO* handle) {
	/* The reactions of state Confirm. */
	if (handle->iface.menuId == 0) { 
    27d2:	8e a5       	lds	r24, 0x6e
    27d4:	9f a5       	lds	r25, 0x6f
    27d6:	a8 a9       	sts	0x48, r26
    27d8:	b9 a9       	sts	0x49, r27
    27da:	00 97       	sbiw	r24, 0x00	; 0
    27dc:	a1 05       	cpc	r26, r1
    27de:	b1 05       	cpc	r27, r1
    27e0:	09 f0       	breq	.+2      	; 0x27e4 <sMO_runCycle+0x15fc>
    27e2:	48 c0       	rjmp	.+144    	; 0x2874 <sMO_runCycle+0x168c>
		/* Default exit sequence for state ConfirmRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	8d 31       	cpi	r24, 0x1D	; 29
    27e8:	89 f0       	breq	.+34     	; 0x280c <sMO_runCycle+0x1624>
    27ea:	8e 31       	cpi	r24, 0x1E	; 30
    27ec:	18 f4       	brcc	.+6      	; 0x27f4 <sMO_runCycle+0x160c>
    27ee:	8c 31       	cpi	r24, 0x1C	; 28
    27f0:	29 f5       	brne	.+74     	; 0x283c <sMO_runCycle+0x1654>
    27f2:	05 c0       	rjmp	.+10     	; 0x27fe <sMO_runCycle+0x1616>
    27f4:	8e 31       	cpi	r24, 0x1E	; 30
    27f6:	a9 f0       	breq	.+42     	; 0x2822 <sMO_runCycle+0x163a>
    27f8:	8f 31       	cpi	r24, 0x1F	; 31
    27fa:	01 f5       	brne	.+64     	; 0x283c <sMO_runCycle+0x1654>
    27fc:	19 c0       	rjmp	.+50     	; 0x2830 <sMO_runCycle+0x1648>
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation : {
				/* Default exit sequence for state RequestConfirmation */
				handle->stateConfVector[1] = SMO_last_state;
    27fe:	86 e2       	ldi	r24, 0x26	; 38
    2800:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	9b 83       	std	Y+3, r25	; 0x03
    2808:	8a 83       	std	Y+2, r24	; 0x02
    280a:	18 c0       	rjmp	.+48     	; 0x283c <sMO_runCycle+0x1654>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_Confirm : {
				/* Default exit sequence for state Confirm */
				handle->stateConfVector[1] = SMO_last_state;
    280c:	86 e2       	ldi	r24, 0x26	; 38
    280e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	9b 83       	std	Y+3, r25	; 0x03
    2816:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'Confirm'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Confirm_time_event_0_raised) );		
    2818:	ce 01       	movw	r24, r28
    281a:	ce 96       	adiw	r24, 0x3e	; 62
    281c:	0e 94 b3 03 	call	0x766	; 0x766 <sMO_unsetTimer>
    2820:	0d c0       	rjmp	.+26     	; 0x283c <sMO_runCycle+0x1654>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress : {
				/* Default exit sequence for state CheckKeyPress */
				handle->stateConfVector[1] = SMO_last_state;
    2822:	86 e2       	ldi	r24, 0x26	; 38
    2824:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	9b 83       	std	Y+3, r25	; 0x03
    282c:	8a 83       	std	Y+2, r24	; 0x02
    282e:	06 c0       	rjmp	.+12     	; 0x283c <sMO_runCycle+0x1654>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2830:	86 e2       	ldi	r24, 0x26	; 38
    2832:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	9b 83       	std	Y+3, r25	; 0x03
    283a:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    283c:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    2840:	88 e0       	ldi	r24, 0x08	; 8
    2842:	92 e0       	ldi	r25, 0x02	; 2
    2844:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    2848:	86 e1       	ldi	r24, 0x16	; 22
    284a:	92 e0       	ldi	r25, 0x02	; 2
    284c:	40 e0       	ldi	r20, 0x00	; 0
    284e:	50 e0       	ldi	r21, 0x00	; 0
    2850:	ba 01       	movw	r22, r20
    2852:	01 e0       	ldi	r16, 0x01	; 1
    2854:	10 e0       	ldi	r17, 0x00	; 0
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    285e:	1e a6       	lds	r17, 0xbe
    2860:	1f a6       	lds	r17, 0xbf
    2862:	18 aa       	sts	0x98, r17
    2864:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    2866:	85 e0       	ldi	r24, 0x05	; 5
    2868:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	9b 83       	std	Y+3, r25	; 0x03
    2870:	8a 83       	std	Y+2, r24	; 0x02
    2872:	28 c3       	rjmp	.+1616   	; 0x2ec4 <sMO_runCycle+0x1cdc>
	}  else {
		if (handle->timeEvents.Confirm_time_event_0_raised) { 
    2874:	8e ad       	sts	0x6e, r24
    2876:	88 23       	and	r24, r24
    2878:	09 f4       	brne	.+2      	; 0x287c <sMO_runCycle+0x1694>
    287a:	fb c2       	rjmp	.+1526   	; 0x2e72 <sMO_runCycle+0x1c8a>
			/* Default exit sequence for state Confirm */
			handle->stateConfVector[1] = SMO_last_state;
    287c:	86 e2       	ldi	r24, 0x26	; 38
    287e:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    2880:	01 e0       	ldi	r16, 0x01	; 1
    2882:	10 e0       	ldi	r17, 0x00	; 0
    2884:	1b 83       	std	Y+3, r17	; 0x03
    2886:	0a 83       	std	Y+2, r16	; 0x02
			/* Exit action for state 'Confirm'. */
			sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Confirm_time_event_0_raised) );		
    2888:	ce 01       	movw	r24, r28
    288a:	ce 96       	adiw	r24, 0x3e	; 62
    288c:	0e 94 b3 03 	call	0x766	; 0x766 <sMO_unsetTimer>
			/* Default enter sequence for state CheckKeyPress */
			/* Entry action for state 'CheckKeyPress'. */
			handle->ifaceKEYPAD.lastkey = 0;
    2890:	18 86       	std	Y+8, r1	; 0x08
    2892:	19 86       	std	Y+9, r1	; 0x09
    2894:	1a 86       	std	Y+10, r1	; 0x0a
    2896:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress;
    2898:	8e e1       	ldi	r24, 0x1E	; 30
    289a:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    289c:	1b 83       	std	Y+3, r17	; 0x03
    289e:	0a 83       	std	Y+2, r16	; 0x02
    28a0:	11 c3       	rjmp	.+1570   	; 0x2ec4 <sMO_runCycle+0x1cdc>
}

/* The reactions of state CheckKeyPress. */
static void sMO_react_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress(SMO* handle) {
	/* The reactions of state CheckKeyPress. */
	if (handle->iface.menuId == 0) { 
    28a2:	8e a5       	lds	r24, 0x6e
    28a4:	9f a5       	lds	r25, 0x6f
    28a6:	a8 a9       	sts	0x48, r26
    28a8:	b9 a9       	sts	0x49, r27
    28aa:	00 97       	sbiw	r24, 0x00	; 0
    28ac:	a1 05       	cpc	r26, r1
    28ae:	b1 05       	cpc	r27, r1
    28b0:	09 f0       	breq	.+2      	; 0x28b4 <sMO_runCycle+0x16cc>
    28b2:	48 c0       	rjmp	.+144    	; 0x2944 <sMO_runCycle+0x175c>
		/* Default exit sequence for state ConfirmRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
    28b6:	8d 31       	cpi	r24, 0x1D	; 29
    28b8:	89 f0       	breq	.+34     	; 0x28dc <sMO_runCycle+0x16f4>
    28ba:	8e 31       	cpi	r24, 0x1E	; 30
    28bc:	18 f4       	brcc	.+6      	; 0x28c4 <sMO_runCycle+0x16dc>
    28be:	8c 31       	cpi	r24, 0x1C	; 28
    28c0:	29 f5       	brne	.+74     	; 0x290c <sMO_runCycle+0x1724>
    28c2:	05 c0       	rjmp	.+10     	; 0x28ce <sMO_runCycle+0x16e6>
    28c4:	8e 31       	cpi	r24, 0x1E	; 30
    28c6:	a9 f0       	breq	.+42     	; 0x28f2 <sMO_runCycle+0x170a>
    28c8:	8f 31       	cpi	r24, 0x1F	; 31
    28ca:	01 f5       	brne	.+64     	; 0x290c <sMO_runCycle+0x1724>
    28cc:	19 c0       	rjmp	.+50     	; 0x2900 <sMO_runCycle+0x1718>
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation : {
				/* Default exit sequence for state RequestConfirmation */
				handle->stateConfVector[1] = SMO_last_state;
    28ce:	86 e2       	ldi	r24, 0x26	; 38
    28d0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	9b 83       	std	Y+3, r25	; 0x03
    28d8:	8a 83       	std	Y+2, r24	; 0x02
    28da:	18 c0       	rjmp	.+48     	; 0x290c <sMO_runCycle+0x1724>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_Confirm : {
				/* Default exit sequence for state Confirm */
				handle->stateConfVector[1] = SMO_last_state;
    28dc:	86 e2       	ldi	r24, 0x26	; 38
    28de:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	9b 83       	std	Y+3, r25	; 0x03
    28e6:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'Confirm'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Confirm_time_event_0_raised) );		
    28e8:	ce 01       	movw	r24, r28
    28ea:	ce 96       	adiw	r24, 0x3e	; 62
    28ec:	0e 94 b3 03 	call	0x766	; 0x766 <sMO_unsetTimer>
    28f0:	0d c0       	rjmp	.+26     	; 0x290c <sMO_runCycle+0x1724>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress : {
				/* Default exit sequence for state CheckKeyPress */
				handle->stateConfVector[1] = SMO_last_state;
    28f2:	86 e2       	ldi	r24, 0x26	; 38
    28f4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	9b 83       	std	Y+3, r25	; 0x03
    28fc:	8a 83       	std	Y+2, r24	; 0x02
    28fe:	06 c0       	rjmp	.+12     	; 0x290c <sMO_runCycle+0x1724>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2900:	86 e2       	ldi	r24, 0x26	; 38
    2902:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	9b 83       	std	Y+3, r25	; 0x03
    290a:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    290c:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    2910:	88 e0       	ldi	r24, 0x08	; 8
    2912:	92 e0       	ldi	r25, 0x02	; 2
    2914:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    2918:	86 e1       	ldi	r24, 0x16	; 22
    291a:	92 e0       	ldi	r25, 0x02	; 2
    291c:	40 e0       	ldi	r20, 0x00	; 0
    291e:	50 e0       	ldi	r21, 0x00	; 0
    2920:	ba 01       	movw	r22, r20
    2922:	01 e0       	ldi	r16, 0x01	; 1
    2924:	10 e0       	ldi	r17, 0x00	; 0
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    292e:	1e a6       	lds	r17, 0xbe
    2930:	1f a6       	lds	r17, 0xbf
    2932:	18 aa       	sts	0x98, r17
    2934:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    2936:	85 e0       	ldi	r24, 0x05	; 5
    2938:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	9b 83       	std	Y+3, r25	; 0x03
    2940:	8a 83       	std	Y+2, r24	; 0x02
    2942:	c0 c2       	rjmp	.+1408   	; 0x2ec4 <sMO_runCycle+0x1cdc>
	}  else {
		if (handle->ifaceKEYPAD.lastkey == 2 && handle->ifaceKEYPAD.key_pressed_raised) { 
    2944:	88 85       	ldd	r24, Y+8	; 0x08
    2946:	99 85       	ldd	r25, Y+9	; 0x09
    2948:	aa 85       	ldd	r26, Y+10	; 0x0a
    294a:	bb 85       	ldd	r27, Y+11	; 0x0b
    294c:	82 30       	cpi	r24, 0x02	; 2
    294e:	91 05       	cpc	r25, r1
    2950:	a1 05       	cpc	r26, r1
    2952:	b1 05       	cpc	r27, r1
    2954:	29 f5       	brne	.+74     	; 0x29a0 <sMO_runCycle+0x17b8>
    2956:	2d 85       	ldd	r18, Y+13	; 0x0d
    2958:	22 23       	and	r18, r18
    295a:	11 f1       	breq	.+68     	; 0x29a0 <sMO_runCycle+0x17b8>
			/* Default exit sequence for state CheckKeyPress */
			handle->stateConfVector[1] = SMO_last_state;
    295c:	86 e2       	ldi	r24, 0x26	; 38
    295e:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    2960:	01 e0       	ldi	r16, 0x01	; 1
    2962:	10 e0       	ldi	r17, 0x00	; 0
    2964:	1b 83       	std	Y+3, r17	; 0x03
    2966:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state Confirm */
			/* Entry action for state 'Confirm'. */
			sMO_setTimer( (sc_eventid) &(handle->timeEvents.Confirm_time_event_0_raised) , 3 * 1000, bool_false);
    2968:	ce 01       	movw	r24, r28
    296a:	ce 96       	adiw	r24, 0x3e	; 62
    296c:	48 eb       	ldi	r20, 0xB8	; 184
    296e:	5b e0       	ldi	r21, 0x0B	; 11
    2970:	60 e0       	ldi	r22, 0x00	; 0
    2972:	70 e0       	ldi	r23, 0x00	; 0
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	0e 94 b0 03 	call	0x760	; 0x760 <sMO_setTimer>
			sMOIfaceLCD_clear();
    297a:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
			sMOIfaceLCD_writeString("SENDING");
    297e:	8c e6       	ldi	r24, 0x6C	; 108
    2980:	92 e0       	ldi	r25, 0x02	; 2
    2982:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
			handle->iface.confirmId = 1;
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	a0 e0       	ldi	r26, 0x00	; 0
    298c:	b0 e0       	ldi	r27, 0x00	; 0
    298e:	8e ab       	sts	0x5e, r24
    2990:	9f ab       	sts	0x5f, r25
    2992:	a8 af       	sts	0x78, r26
    2994:	b9 af       	sts	0x79, r27
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_Confirm;
    2996:	8d e1       	ldi	r24, 0x1D	; 29
    2998:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    299a:	1b 83       	std	Y+3, r17	; 0x03
    299c:	0a 83       	std	Y+2, r16	; 0x02
    299e:	92 c2       	rjmp	.+1316   	; 0x2ec4 <sMO_runCycle+0x1cdc>
		}  else {
			if (handle->ifaceKEYPAD.lastkey == 12 || handle->ifaceKEYPAD.lastkey == 11 && handle->ifaceKEYPAD.key_pressed_raised) { 
    29a0:	8c 30       	cpi	r24, 0x0C	; 12
    29a2:	91 05       	cpc	r25, r1
    29a4:	a1 05       	cpc	r26, r1
    29a6:	b1 05       	cpc	r27, r1
    29a8:	51 f0       	breq	.+20     	; 0x29be <sMO_runCycle+0x17d6>
    29aa:	8b 30       	cpi	r24, 0x0B	; 11
    29ac:	91 05       	cpc	r25, r1
    29ae:	a1 05       	cpc	r26, r1
    29b0:	b1 05       	cpc	r27, r1
    29b2:	09 f0       	breq	.+2      	; 0x29b6 <sMO_runCycle+0x17ce>
    29b4:	5e c2       	rjmp	.+1212   	; 0x2e72 <sMO_runCycle+0x1c8a>
    29b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b8:	88 23       	and	r24, r24
    29ba:	09 f4       	brne	.+2      	; 0x29be <sMO_runCycle+0x17d6>
    29bc:	5a c2       	rjmp	.+1204   	; 0x2e72 <sMO_runCycle+0x1c8a>
				/* Default exit sequence for state CheckKeyPress */
				handle->stateConfVector[1] = SMO_last_state;
				handle->stateConfVectorPosition = 1;
    29be:	1b 83       	std	Y+3, r17	; 0x03
    29c0:	0a 83       	std	Y+2, r16	; 0x02
				handle->iface.menuId = 0;
    29c2:	1e a6       	lds	r17, 0xbe
    29c4:	1f a6       	lds	r17, 0xbf
    29c6:	18 aa       	sts	0x98, r17
    29c8:	19 aa       	sts	0x99, r17
				/* Default enter sequence for state null */
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_;
    29ca:	9f e1       	ldi	r25, 0x1F	; 31
    29cc:	99 83       	std	Y+1, r25	; 0x01
    29ce:	51 c2       	rjmp	.+1186   	; 0x2e72 <sMO_runCycle+0x1c8a>
}

/* The reactions of state null. */
static void sMO_react_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_0(SMO* handle) {
	/* The reactions of state null. */
	if (handle->iface.menuId == 0) { 
    29d0:	8e a5       	lds	r24, 0x6e
    29d2:	9f a5       	lds	r25, 0x6f
    29d4:	a8 a9       	sts	0x48, r26
    29d6:	b9 a9       	sts	0x49, r27
    29d8:	00 97       	sbiw	r24, 0x00	; 0
    29da:	a1 05       	cpc	r26, r1
    29dc:	b1 05       	cpc	r27, r1
    29de:	09 f0       	breq	.+2      	; 0x29e2 <sMO_runCycle+0x17fa>
    29e0:	48 c2       	rjmp	.+1168   	; 0x2e72 <sMO_runCycle+0x1c8a>
		/* Default exit sequence for state ConfirmRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    29e2:	89 81       	ldd	r24, Y+1	; 0x01
    29e4:	8d 31       	cpi	r24, 0x1D	; 29
    29e6:	89 f0       	breq	.+34     	; 0x2a0a <sMO_runCycle+0x1822>
    29e8:	8e 31       	cpi	r24, 0x1E	; 30
    29ea:	18 f4       	brcc	.+6      	; 0x29f2 <sMO_runCycle+0x180a>
    29ec:	8c 31       	cpi	r24, 0x1C	; 28
    29ee:	29 f5       	brne	.+74     	; 0x2a3a <sMO_runCycle+0x1852>
    29f0:	05 c0       	rjmp	.+10     	; 0x29fc <sMO_runCycle+0x1814>
    29f2:	8e 31       	cpi	r24, 0x1E	; 30
    29f4:	a9 f0       	breq	.+42     	; 0x2a20 <sMO_runCycle+0x1838>
    29f6:	8f 31       	cpi	r24, 0x1F	; 31
    29f8:	01 f5       	brne	.+64     	; 0x2a3a <sMO_runCycle+0x1852>
    29fa:	19 c0       	rjmp	.+50     	; 0x2a2e <sMO_runCycle+0x1846>
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation : {
				/* Default exit sequence for state RequestConfirmation */
				handle->stateConfVector[1] = SMO_last_state;
    29fc:	86 e2       	ldi	r24, 0x26	; 38
    29fe:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	9b 83       	std	Y+3, r25	; 0x03
    2a06:	8a 83       	std	Y+2, r24	; 0x02
    2a08:	18 c0       	rjmp	.+48     	; 0x2a3a <sMO_runCycle+0x1852>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_Confirm : {
				/* Default exit sequence for state Confirm */
				handle->stateConfVector[1] = SMO_last_state;
    2a0a:	86 e2       	ldi	r24, 0x26	; 38
    2a0c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	9b 83       	std	Y+3, r25	; 0x03
    2a14:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'Confirm'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Confirm_time_event_0_raised) );		
    2a16:	ce 01       	movw	r24, r28
    2a18:	ce 96       	adiw	r24, 0x3e	; 62
    2a1a:	0e 94 b3 03 	call	0x766	; 0x766 <sMO_unsetTimer>
    2a1e:	0d c0       	rjmp	.+26     	; 0x2a3a <sMO_runCycle+0x1852>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress : {
				/* Default exit sequence for state CheckKeyPress */
				handle->stateConfVector[1] = SMO_last_state;
    2a20:	86 e2       	ldi	r24, 0x26	; 38
    2a22:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	9b 83       	std	Y+3, r25	; 0x03
    2a2a:	8a 83       	std	Y+2, r24	; 0x02
    2a2c:	06 c0       	rjmp	.+12     	; 0x2a3a <sMO_runCycle+0x1852>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2a2e:	86 e2       	ldi	r24, 0x26	; 38
    2a30:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2a32:	81 e0       	ldi	r24, 0x01	; 1
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	9b 83       	std	Y+3, r25	; 0x03
    2a38:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    2a3a:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-CALL  B-DEL");
    2a3e:	88 e0       	ldi	r24, 0x08	; 8
    2a40:	92 e0       	ldi	r25, 0x02	; 2
    2a42:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-PAY  D-WT", 0, 1);
    2a46:	86 e1       	ldi	r24, 0x16	; 22
    2a48:	92 e0       	ldi	r25, 0x02	; 2
    2a4a:	40 e0       	ldi	r20, 0x00	; 0
    2a4c:	50 e0       	ldi	r21, 0x00	; 0
    2a4e:	ba 01       	movw	r22, r20
    2a50:	01 e0       	ldi	r16, 0x01	; 1
    2a52:	10 e0       	ldi	r17, 0x00	; 0
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    2a5c:	1e a6       	lds	r17, 0xbe
    2a5e:	1f a6       	lds	r17, 0xbf
    2a60:	18 aa       	sts	0x98, r17
    2a62:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    2a64:	85 e0       	ldi	r24, 0x05	; 5
    2a66:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	9b 83       	std	Y+3, r25	; 0x03
    2a6e:	8a 83       	std	Y+2, r24	; 0x02
    2a70:	29 c2       	rjmp	.+1106   	; 0x2ec4 <sMO_runCycle+0x1cdc>
}

/* The reactions of state Send. */
static void sMO_react_main_region_on_r1_Running_running_main_SendRequest_r1_Send(SMO* handle) {
	/* The reactions of state Send. */
	if (handle->ifaceRF.result == bool_true) { 
    2a72:	8f 89       	ldd	r24, Y+23	; 0x17
    2a74:	88 23       	and	r24, r24
    2a76:	09 f4       	brne	.+2      	; 0x2a7a <sMO_runCycle+0x1892>
    2a78:	51 c0       	rjmp	.+162    	; 0x2b1c <sMO_runCycle+0x1934>
		/* Default exit sequence for state SendRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2a7a:	89 81       	ldd	r24, Y+1	; 0x01
    2a7c:	83 32       	cpi	r24, 0x23	; 35
    2a7e:	d1 f0       	breq	.+52     	; 0x2ab4 <sMO_runCycle+0x18cc>
    2a80:	84 32       	cpi	r24, 0x24	; 36
    2a82:	28 f4       	brcc	.+10     	; 0x2a8e <sMO_runCycle+0x18a6>
    2a84:	81 32       	cpi	r24, 0x21	; 33
    2a86:	41 f0       	breq	.+16     	; 0x2a98 <sMO_runCycle+0x18b0>
    2a88:	82 32       	cpi	r24, 0x22	; 34
    2a8a:	61 f5       	brne	.+88     	; 0x2ae4 <sMO_runCycle+0x18fc>
    2a8c:	0c c0       	rjmp	.+24     	; 0x2aa6 <sMO_runCycle+0x18be>
    2a8e:	84 32       	cpi	r24, 0x24	; 36
    2a90:	c1 f0       	breq	.+48     	; 0x2ac2 <sMO_runCycle+0x18da>
    2a92:	85 32       	cpi	r24, 0x25	; 37
    2a94:	39 f5       	brne	.+78     	; 0x2ae4 <sMO_runCycle+0x18fc>
    2a96:	20 c0       	rjmp	.+64     	; 0x2ad8 <sMO_runCycle+0x18f0>
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    2a98:	86 e2       	ldi	r24, 0x26	; 38
    2a9a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	9b 83       	std	Y+3, r25	; 0x03
    2aa2:	8a 83       	std	Y+2, r24	; 0x02
    2aa4:	1f c0       	rjmp	.+62     	; 0x2ae4 <sMO_runCycle+0x18fc>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    2aa6:	86 e2       	ldi	r24, 0x26	; 38
    2aa8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	9b 83       	std	Y+3, r25	; 0x03
    2ab0:	8a 83       	std	Y+2, r24	; 0x02
    2ab2:	18 c0       	rjmp	.+48     	; 0x2ae4 <sMO_runCycle+0x18fc>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2ab4:	86 e2       	ldi	r24, 0x26	; 38
    2ab6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	9b 83       	std	Y+3, r25	; 0x03
    2abe:	8a 83       	std	Y+2, r24	; 0x02
    2ac0:	11 c0       	rjmp	.+34     	; 0x2ae4 <sMO_runCycle+0x18fc>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2 : {
				/* Default exit sequence for state SendFail2 */
				handle->stateConfVector[1] = SMO_last_state;
    2ac2:	86 e2       	ldi	r24, 0x26	; 38
    2ac4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	9b 83       	std	Y+3, r25	; 0x03
    2acc:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail2'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail2_time_event_0_raised) );		
    2ace:	ce 01       	movw	r24, r28
    2ad0:	cf 96       	adiw	r24, 0x3f	; 63
    2ad2:	0e 94 b3 03 	call	0x766	; 0x766 <sMO_unsetTimer>
    2ad6:	06 c0       	rjmp	.+12     	; 0x2ae4 <sMO_runCycle+0x18fc>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    2ad8:	86 e2       	ldi	r24, 0x26	; 38
    2ada:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	9b 83       	std	Y+3, r25	; 0x03
    2ae2:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state ConfirmRequest */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state RequestConfirmation */
		/* Entry action for state 'RequestConfirmation'. */
		sMOIfaceLCD_clear();
    2ae4:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("PROCEED?");
    2ae8:	85 e5       	ldi	r24, 0x55	; 85
    2aea:	92 e0       	ldi	r25, 0x02	; 2
    2aec:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("11-NO  12-YES", 0, 1);
    2af0:	8e e5       	ldi	r24, 0x5E	; 94
    2af2:	92 e0       	ldi	r25, 0x02	; 2
    2af4:	40 e0       	ldi	r20, 0x00	; 0
    2af6:	50 e0       	ldi	r21, 0x00	; 0
    2af8:	ba 01       	movw	r22, r20
    2afa:	01 e0       	ldi	r16, 0x01	; 1
    2afc:	10 e0       	ldi	r17, 0x00	; 0
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.confirmId = 0;
    2b06:	1e aa       	sts	0x9e, r17
    2b08:	1f aa       	sts	0x9f, r17
    2b0a:	18 ae       	sts	0xb8, r17
    2b0c:	19 ae       	sts	0xb9, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation;
    2b0e:	8c e1       	ldi	r24, 0x1C	; 28
    2b10:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2b12:	81 e0       	ldi	r24, 0x01	; 1
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	9b 83       	std	Y+3, r25	; 0x03
    2b18:	8a 83       	std	Y+2, r24	; 0x02
    2b1a:	d4 c1       	rjmp	.+936    	; 0x2ec4 <sMO_runCycle+0x1cdc>
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Check;
			handle->stateConfVectorPosition = 1;
		}  else {
			if (handle->ifaceRF.result == bool_false) { 
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    2b1c:	86 e2       	ldi	r24, 0x26	; 38
    2b1e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2b20:	01 e0       	ldi	r16, 0x01	; 1
    2b22:	10 e0       	ldi	r17, 0x00	; 0
    2b24:	1b 83       	std	Y+3, r17	; 0x03
    2b26:	0a 83       	std	Y+2, r16	; 0x02
				/* Default enter sequence for state SendFail2 */
				/* Entry action for state 'SendFail2'. */
				sMO_setTimer( (sc_eventid) &(handle->timeEvents.SendFail2_time_event_0_raised) , 2 * 1000, bool_false);
    2b28:	ce 01       	movw	r24, r28
    2b2a:	cf 96       	adiw	r24, 0x3f	; 63
    2b2c:	40 ed       	ldi	r20, 0xD0	; 208
    2b2e:	57 e0       	ldi	r21, 0x07	; 7
    2b30:	60 e0       	ldi	r22, 0x00	; 0
    2b32:	70 e0       	ldi	r23, 0x00	; 0
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	0e 94 b0 03 	call	0x760	; 0x760 <sMO_setTimer>
				sMOIfaceLCD_clear();
    2b3a:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
				sMOIfaceLCD_writeString("Send fail");
    2b3e:	8b e4       	ldi	r24, 0x4B	; 75
    2b40:	92 e0       	ldi	r25, 0x02	; 2
    2b42:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2;
    2b46:	84 e2       	ldi	r24, 0x24	; 36
    2b48:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2b4a:	1b 83       	std	Y+3, r17	; 0x03
    2b4c:	0a 83       	std	Y+2, r16	; 0x02
    2b4e:	ba c1       	rjmp	.+884    	; 0x2ec4 <sMO_runCycle+0x1cdc>
}

/* The reactions of state Check. */
static void sMO_react_main_region_on_r1_Running_running_main_SendRequest_r1_Check(SMO* handle) {
	/* The reactions of state Check. */
	if (handle->ifaceRF.result == bool_true) { 
    2b50:	8f 89       	ldd	r24, Y+23	; 0x17
    2b52:	88 23       	and	r24, r24
    2b54:	09 f4       	brne	.+2      	; 0x2b58 <sMO_runCycle+0x1970>
    2b56:	51 c0       	rjmp	.+162    	; 0x2bfa <sMO_runCycle+0x1a12>
		/* Default exit sequence for state SendRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2b58:	89 81       	ldd	r24, Y+1	; 0x01
    2b5a:	83 32       	cpi	r24, 0x23	; 35
    2b5c:	d1 f0       	breq	.+52     	; 0x2b92 <sMO_runCycle+0x19aa>
    2b5e:	84 32       	cpi	r24, 0x24	; 36
    2b60:	28 f4       	brcc	.+10     	; 0x2b6c <sMO_runCycle+0x1984>
    2b62:	81 32       	cpi	r24, 0x21	; 33
    2b64:	41 f0       	breq	.+16     	; 0x2b76 <sMO_runCycle+0x198e>
    2b66:	82 32       	cpi	r24, 0x22	; 34
    2b68:	61 f5       	brne	.+88     	; 0x2bc2 <sMO_runCycle+0x19da>
    2b6a:	0c c0       	rjmp	.+24     	; 0x2b84 <sMO_runCycle+0x199c>
    2b6c:	84 32       	cpi	r24, 0x24	; 36
    2b6e:	c1 f0       	breq	.+48     	; 0x2ba0 <sMO_runCycle+0x19b8>
    2b70:	85 32       	cpi	r24, 0x25	; 37
    2b72:	39 f5       	brne	.+78     	; 0x2bc2 <sMO_runCycle+0x19da>
    2b74:	20 c0       	rjmp	.+64     	; 0x2bb6 <sMO_runCycle+0x19ce>
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    2b76:	86 e2       	ldi	r24, 0x26	; 38
    2b78:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	9b 83       	std	Y+3, r25	; 0x03
    2b80:	8a 83       	std	Y+2, r24	; 0x02
    2b82:	1f c0       	rjmp	.+62     	; 0x2bc2 <sMO_runCycle+0x19da>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    2b84:	86 e2       	ldi	r24, 0x26	; 38
    2b86:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	9b 83       	std	Y+3, r25	; 0x03
    2b8e:	8a 83       	std	Y+2, r24	; 0x02
    2b90:	18 c0       	rjmp	.+48     	; 0x2bc2 <sMO_runCycle+0x19da>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2b92:	86 e2       	ldi	r24, 0x26	; 38
    2b94:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	9b 83       	std	Y+3, r25	; 0x03
    2b9c:	8a 83       	std	Y+2, r24	; 0x02
    2b9e:	11 c0       	rjmp	.+34     	; 0x2bc2 <sMO_runCycle+0x19da>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2 : {
				/* Default exit sequence for state SendFail2 */
				handle->stateConfVector[1] = SMO_last_state;
    2ba0:	86 e2       	ldi	r24, 0x26	; 38
    2ba2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	9b 83       	std	Y+3, r25	; 0x03
    2baa:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail2'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail2_time_event_0_raised) );		
    2bac:	ce 01       	movw	r24, r28
    2bae:	cf 96       	adiw	r24, 0x3f	; 63
    2bb0:	0e 94 b3 03 	call	0x766	; 0x766 <sMO_unsetTimer>
    2bb4:	06 c0       	rjmp	.+12     	; 0x2bc2 <sMO_runCycle+0x19da>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    2bb6:	86 e2       	ldi	r24, 0x26	; 38
    2bb8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	9b 83       	std	Y+3, r25	; 0x03
    2bc0:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state ConfirmRequest */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state RequestConfirmation */
		/* Entry action for state 'RequestConfirmation'. */
		sMOIfaceLCD_clear();
    2bc2:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("PROCEED?");
    2bc6:	85 e5       	ldi	r24, 0x55	; 85
    2bc8:	92 e0       	ldi	r25, 0x02	; 2
    2bca:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("11-NO  12-YES", 0, 1);
    2bce:	8e e5       	ldi	r24, 0x5E	; 94
    2bd0:	92 e0       	ldi	r25, 0x02	; 2
    2bd2:	40 e0       	ldi	r20, 0x00	; 0
    2bd4:	50 e0       	ldi	r21, 0x00	; 0
    2bd6:	ba 01       	movw	r22, r20
    2bd8:	01 e0       	ldi	r16, 0x01	; 1
    2bda:	10 e0       	ldi	r17, 0x00	; 0
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.confirmId = 0;
    2be4:	1e aa       	sts	0x9e, r17
    2be6:	1f aa       	sts	0x9f, r17
    2be8:	18 ae       	sts	0xb8, r17
    2bea:	19 ae       	sts	0xb9, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation;
    2bec:	8c e1       	ldi	r24, 0x1C	; 28
    2bee:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	9b 83       	std	Y+3, r25	; 0x03
    2bf6:	8a 83       	std	Y+2, r24	; 0x02
    2bf8:	65 c1       	rjmp	.+714    	; 0x2ec4 <sMO_runCycle+0x1cdc>
	}  else {
		if (handle->ifaceRF.result == bool_false) { 
			/* Default exit sequence for state Check */
			handle->stateConfVector[1] = SMO_last_state;
    2bfa:	86 e2       	ldi	r24, 0x26	; 38
    2bfc:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    2bfe:	01 e0       	ldi	r16, 0x01	; 1
    2c00:	10 e0       	ldi	r17, 0x00	; 0
    2c02:	1b 83       	std	Y+3, r17	; 0x03
    2c04:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state Send */
			/* Entry action for state 'Send'. */
			handle->ifaceRF.retry += 1;
    2c06:	88 8d       	ldd	r24, Y+24	; 0x18
    2c08:	99 8d       	ldd	r25, Y+25	; 0x19
    2c0a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2c0c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2c0e:	01 96       	adiw	r24, 0x01	; 1
    2c10:	a1 1d       	adc	r26, r1
    2c12:	b1 1d       	adc	r27, r1
    2c14:	88 8f       	std	Y+24, r24	; 0x18
    2c16:	99 8f       	std	Y+25, r25	; 0x19
    2c18:	aa 8f       	std	Y+26, r26	; 0x1a
    2c1a:	bb 8f       	std	Y+27, r27	; 0x1b
			handle->ifaceRF.result = sMOIfaceRF_sendConf(handle->iface.menuId, handle->iface.tableId);
    2c1c:	6e a5       	lds	r22, 0x6e
    2c1e:	7f a5       	lds	r23, 0x6f
    2c20:	88 a9       	sts	0x48, r24
    2c22:	99 a9       	sts	0x49, r25
    2c24:	2a a9       	sts	0x4a, r18
    2c26:	3b a9       	sts	0x4b, r19
    2c28:	4c a9       	sts	0x4c, r20
    2c2a:	5d a9       	sts	0x4d, r21
    2c2c:	0e 94 96 03 	call	0x72c	; 0x72c <sMOIfaceRF_sendConf>
    2c30:	8f 8b       	std	Y+23, r24	; 0x17
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Send;
    2c32:	81 e2       	ldi	r24, 0x21	; 33
    2c34:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    2c36:	1b 83       	std	Y+3, r17	; 0x03
    2c38:	0a 83       	std	Y+2, r16	; 0x02
    2c3a:	44 c1       	rjmp	.+648    	; 0x2ec4 <sMO_runCycle+0x1cdc>
}

/* The reactions of state null. */
static void sMO_react_main_region_on_r1_Running_running_main_SendRequest_r1__final_0(SMO* handle) {
	/* The reactions of state null. */
	if (handle->ifaceRF.result == bool_true) { 
    2c3c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c3e:	88 23       	and	r24, r24
    2c40:	09 f4       	brne	.+2      	; 0x2c44 <sMO_runCycle+0x1a5c>
    2c42:	17 c1       	rjmp	.+558    	; 0x2e72 <sMO_runCycle+0x1c8a>
		/* Default exit sequence for state SendRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2c44:	89 81       	ldd	r24, Y+1	; 0x01
    2c46:	83 32       	cpi	r24, 0x23	; 35
    2c48:	d1 f0       	breq	.+52     	; 0x2c7e <sMO_runCycle+0x1a96>
    2c4a:	84 32       	cpi	r24, 0x24	; 36
    2c4c:	28 f4       	brcc	.+10     	; 0x2c58 <sMO_runCycle+0x1a70>
    2c4e:	81 32       	cpi	r24, 0x21	; 33
    2c50:	41 f0       	breq	.+16     	; 0x2c62 <sMO_runCycle+0x1a7a>
    2c52:	82 32       	cpi	r24, 0x22	; 34
    2c54:	61 f5       	brne	.+88     	; 0x2cae <sMO_runCycle+0x1ac6>
    2c56:	0c c0       	rjmp	.+24     	; 0x2c70 <sMO_runCycle+0x1a88>
    2c58:	84 32       	cpi	r24, 0x24	; 36
    2c5a:	c1 f0       	breq	.+48     	; 0x2c8c <sMO_runCycle+0x1aa4>
    2c5c:	85 32       	cpi	r24, 0x25	; 37
    2c5e:	39 f5       	brne	.+78     	; 0x2cae <sMO_runCycle+0x1ac6>
    2c60:	20 c0       	rjmp	.+64     	; 0x2ca2 <sMO_runCycle+0x1aba>
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    2c62:	86 e2       	ldi	r24, 0x26	; 38
    2c64:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	9b 83       	std	Y+3, r25	; 0x03
    2c6c:	8a 83       	std	Y+2, r24	; 0x02
    2c6e:	1f c0       	rjmp	.+62     	; 0x2cae <sMO_runCycle+0x1ac6>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    2c70:	86 e2       	ldi	r24, 0x26	; 38
    2c72:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	9b 83       	std	Y+3, r25	; 0x03
    2c7a:	8a 83       	std	Y+2, r24	; 0x02
    2c7c:	18 c0       	rjmp	.+48     	; 0x2cae <sMO_runCycle+0x1ac6>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2c7e:	86 e2       	ldi	r24, 0x26	; 38
    2c80:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	9b 83       	std	Y+3, r25	; 0x03
    2c88:	8a 83       	std	Y+2, r24	; 0x02
    2c8a:	11 c0       	rjmp	.+34     	; 0x2cae <sMO_runCycle+0x1ac6>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2 : {
				/* Default exit sequence for state SendFail2 */
				handle->stateConfVector[1] = SMO_last_state;
    2c8c:	86 e2       	ldi	r24, 0x26	; 38
    2c8e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	9b 83       	std	Y+3, r25	; 0x03
    2c96:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail2'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail2_time_event_0_raised) );		
    2c98:	ce 01       	movw	r24, r28
    2c9a:	cf 96       	adiw	r24, 0x3f	; 63
    2c9c:	0e 94 b3 03 	call	0x766	; 0x766 <sMO_unsetTimer>
    2ca0:	06 c0       	rjmp	.+12     	; 0x2cae <sMO_runCycle+0x1ac6>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    2ca2:	86 e2       	ldi	r24, 0x26	; 38
    2ca4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	9b 83       	std	Y+3, r25	; 0x03
    2cac:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state ConfirmRequest */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state RequestConfirmation */
		/* Entry action for state 'RequestConfirmation'. */
		sMOIfaceLCD_clear();
    2cae:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("PROCEED?");
    2cb2:	85 e5       	ldi	r24, 0x55	; 85
    2cb4:	92 e0       	ldi	r25, 0x02	; 2
    2cb6:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("11-NO  12-YES", 0, 1);
    2cba:	8e e5       	ldi	r24, 0x5E	; 94
    2cbc:	92 e0       	ldi	r25, 0x02	; 2
    2cbe:	40 e0       	ldi	r20, 0x00	; 0
    2cc0:	50 e0       	ldi	r21, 0x00	; 0
    2cc2:	ba 01       	movw	r22, r20
    2cc4:	01 e0       	ldi	r16, 0x01	; 1
    2cc6:	10 e0       	ldi	r17, 0x00	; 0
    2cc8:	20 e0       	ldi	r18, 0x00	; 0
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.confirmId = 0;
    2cd0:	1e aa       	sts	0x9e, r17
    2cd2:	1f aa       	sts	0x9f, r17
    2cd4:	18 ae       	sts	0xb8, r17
    2cd6:	19 ae       	sts	0xb9, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation;
    2cd8:	8c e1       	ldi	r24, 0x1C	; 28
    2cda:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	9b 83       	std	Y+3, r25	; 0x03
    2ce2:	8a 83       	std	Y+2, r24	; 0x02
    2ce4:	ef c0       	rjmp	.+478    	; 0x2ec4 <sMO_runCycle+0x1cdc>
}

/* The reactions of state SendFail2. */
static void sMO_react_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2(SMO* handle) {
	/* The reactions of state SendFail2. */
	if (handle->ifaceRF.result == bool_true) { 
    2ce6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ce8:	88 23       	and	r24, r24
    2cea:	09 f4       	brne	.+2      	; 0x2cee <sMO_runCycle+0x1b06>
    2cec:	51 c0       	rjmp	.+162    	; 0x2d90 <sMO_runCycle+0x1ba8>
		/* Default exit sequence for state SendRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2cee:	89 81       	ldd	r24, Y+1	; 0x01
    2cf0:	83 32       	cpi	r24, 0x23	; 35
    2cf2:	d1 f0       	breq	.+52     	; 0x2d28 <sMO_runCycle+0x1b40>
    2cf4:	84 32       	cpi	r24, 0x24	; 36
    2cf6:	28 f4       	brcc	.+10     	; 0x2d02 <sMO_runCycle+0x1b1a>
    2cf8:	81 32       	cpi	r24, 0x21	; 33
    2cfa:	41 f0       	breq	.+16     	; 0x2d0c <sMO_runCycle+0x1b24>
    2cfc:	82 32       	cpi	r24, 0x22	; 34
    2cfe:	61 f5       	brne	.+88     	; 0x2d58 <sMO_runCycle+0x1b70>
    2d00:	0c c0       	rjmp	.+24     	; 0x2d1a <sMO_runCycle+0x1b32>
    2d02:	84 32       	cpi	r24, 0x24	; 36
    2d04:	c1 f0       	breq	.+48     	; 0x2d36 <sMO_runCycle+0x1b4e>
    2d06:	85 32       	cpi	r24, 0x25	; 37
    2d08:	39 f5       	brne	.+78     	; 0x2d58 <sMO_runCycle+0x1b70>
    2d0a:	20 c0       	rjmp	.+64     	; 0x2d4c <sMO_runCycle+0x1b64>
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    2d0c:	86 e2       	ldi	r24, 0x26	; 38
    2d0e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	9b 83       	std	Y+3, r25	; 0x03
    2d16:	8a 83       	std	Y+2, r24	; 0x02
    2d18:	1f c0       	rjmp	.+62     	; 0x2d58 <sMO_runCycle+0x1b70>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    2d1a:	86 e2       	ldi	r24, 0x26	; 38
    2d1c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	9b 83       	std	Y+3, r25	; 0x03
    2d24:	8a 83       	std	Y+2, r24	; 0x02
    2d26:	18 c0       	rjmp	.+48     	; 0x2d58 <sMO_runCycle+0x1b70>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2d28:	86 e2       	ldi	r24, 0x26	; 38
    2d2a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	9b 83       	std	Y+3, r25	; 0x03
    2d32:	8a 83       	std	Y+2, r24	; 0x02
    2d34:	11 c0       	rjmp	.+34     	; 0x2d58 <sMO_runCycle+0x1b70>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2 : {
				/* Default exit sequence for state SendFail2 */
				handle->stateConfVector[1] = SMO_last_state;
    2d36:	86 e2       	ldi	r24, 0x26	; 38
    2d38:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2d3a:	81 e0       	ldi	r24, 0x01	; 1
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	9b 83       	std	Y+3, r25	; 0x03
    2d40:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail2'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail2_time_event_0_raised) );		
    2d42:	ce 01       	movw	r24, r28
    2d44:	cf 96       	adiw	r24, 0x3f	; 63
    2d46:	0e 94 b3 03 	call	0x766	; 0x766 <sMO_unsetTimer>
    2d4a:	06 c0       	rjmp	.+12     	; 0x2d58 <sMO_runCycle+0x1b70>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    2d4c:	86 e2       	ldi	r24, 0x26	; 38
    2d4e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	9b 83       	std	Y+3, r25	; 0x03
    2d56:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state ConfirmRequest */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state RequestConfirmation */
		/* Entry action for state 'RequestConfirmation'. */
		sMOIfaceLCD_clear();
    2d58:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("PROCEED?");
    2d5c:	85 e5       	ldi	r24, 0x55	; 85
    2d5e:	92 e0       	ldi	r25, 0x02	; 2
    2d60:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("11-NO  12-YES", 0, 1);
    2d64:	8e e5       	ldi	r24, 0x5E	; 94
    2d66:	92 e0       	ldi	r25, 0x02	; 2
    2d68:	40 e0       	ldi	r20, 0x00	; 0
    2d6a:	50 e0       	ldi	r21, 0x00	; 0
    2d6c:	ba 01       	movw	r22, r20
    2d6e:	01 e0       	ldi	r16, 0x01	; 1
    2d70:	10 e0       	ldi	r17, 0x00	; 0
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.confirmId = 0;
    2d7a:	1e aa       	sts	0x9e, r17
    2d7c:	1f aa       	sts	0x9f, r17
    2d7e:	18 ae       	sts	0xb8, r17
    2d80:	19 ae       	sts	0xb9, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation;
    2d82:	8c e1       	ldi	r24, 0x1C	; 28
    2d84:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2d86:	81 e0       	ldi	r24, 0x01	; 1
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	9b 83       	std	Y+3, r25	; 0x03
    2d8c:	8a 83       	std	Y+2, r24	; 0x02
    2d8e:	9a c0       	rjmp	.+308    	; 0x2ec4 <sMO_runCycle+0x1cdc>
	}  else {
		if (handle->timeEvents.SendFail2_time_event_0_raised) { 
    2d90:	8f ad       	sts	0x6f, r24
    2d92:	88 23       	and	r24, r24
    2d94:	09 f4       	brne	.+2      	; 0x2d98 <sMO_runCycle+0x1bb0>
    2d96:	6d c0       	rjmp	.+218    	; 0x2e72 <sMO_runCycle+0x1c8a>
			/* Default exit sequence for state SendFail2 */
			handle->stateConfVector[1] = SMO_last_state;
    2d98:	86 e2       	ldi	r24, 0x26	; 38
    2d9a:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    2d9c:	01 e0       	ldi	r16, 0x01	; 1
    2d9e:	10 e0       	ldi	r17, 0x00	; 0
    2da0:	1b 83       	std	Y+3, r17	; 0x03
    2da2:	0a 83       	std	Y+2, r16	; 0x02
			/* Exit action for state 'SendFail2'. */
			sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail2_time_event_0_raised) );		
    2da4:	ce 01       	movw	r24, r28
    2da6:	cf 96       	adiw	r24, 0x3f	; 63
    2da8:	0e 94 b3 03 	call	0x766	; 0x766 <sMO_unsetTimer>
			/* Default enter sequence for state ResetResult */
			/* Entry action for state 'ResetResult'. */
			handle->ifaceRF.result = bool_true;
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	8f 8b       	std	Y+23, r24	; 0x17
			handle->ifaceRF.retry = 0;
    2db0:	18 8e       	std	Y+24, r1	; 0x18
    2db2:	19 8e       	std	Y+25, r1	; 0x19
    2db4:	1a 8e       	std	Y+26, r1	; 0x1a
    2db6:	1b 8e       	std	Y+27, r1	; 0x1b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult;
    2db8:	85 e2       	ldi	r24, 0x25	; 37
    2dba:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    2dbc:	1b 83       	std	Y+3, r17	; 0x03
    2dbe:	0a 83       	std	Y+2, r16	; 0x02
    2dc0:	81 c0       	rjmp	.+258    	; 0x2ec4 <sMO_runCycle+0x1cdc>
}

/* The reactions of state ResetResult. */
static void sMO_react_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult(SMO* handle) {
	/* The reactions of state ResetResult. */
	if (handle->ifaceRF.result == bool_true) { 
    2dc2:	8f 89       	ldd	r24, Y+23	; 0x17
    2dc4:	88 23       	and	r24, r24
    2dc6:	09 f4       	brne	.+2      	; 0x2dca <sMO_runCycle+0x1be2>
    2dc8:	51 c0       	rjmp	.+162    	; 0x2e6c <sMO_runCycle+0x1c84>
		/* Default exit sequence for state SendRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2dca:	89 81       	ldd	r24, Y+1	; 0x01
    2dcc:	83 32       	cpi	r24, 0x23	; 35
    2dce:	d1 f0       	breq	.+52     	; 0x2e04 <sMO_runCycle+0x1c1c>
    2dd0:	84 32       	cpi	r24, 0x24	; 36
    2dd2:	28 f4       	brcc	.+10     	; 0x2dde <sMO_runCycle+0x1bf6>
    2dd4:	81 32       	cpi	r24, 0x21	; 33
    2dd6:	41 f0       	breq	.+16     	; 0x2de8 <sMO_runCycle+0x1c00>
    2dd8:	82 32       	cpi	r24, 0x22	; 34
    2dda:	61 f5       	brne	.+88     	; 0x2e34 <sMO_runCycle+0x1c4c>
    2ddc:	0c c0       	rjmp	.+24     	; 0x2df6 <sMO_runCycle+0x1c0e>
    2dde:	84 32       	cpi	r24, 0x24	; 36
    2de0:	c1 f0       	breq	.+48     	; 0x2e12 <sMO_runCycle+0x1c2a>
    2de2:	85 32       	cpi	r24, 0x25	; 37
    2de4:	39 f5       	brne	.+78     	; 0x2e34 <sMO_runCycle+0x1c4c>
    2de6:	20 c0       	rjmp	.+64     	; 0x2e28 <sMO_runCycle+0x1c40>
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    2de8:	86 e2       	ldi	r24, 0x26	; 38
    2dea:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	9b 83       	std	Y+3, r25	; 0x03
    2df2:	8a 83       	std	Y+2, r24	; 0x02
    2df4:	1f c0       	rjmp	.+62     	; 0x2e34 <sMO_runCycle+0x1c4c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    2df6:	86 e2       	ldi	r24, 0x26	; 38
    2df8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	9b 83       	std	Y+3, r25	; 0x03
    2e00:	8a 83       	std	Y+2, r24	; 0x02
    2e02:	18 c0       	rjmp	.+48     	; 0x2e34 <sMO_runCycle+0x1c4c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2e04:	86 e2       	ldi	r24, 0x26	; 38
    2e06:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2e08:	81 e0       	ldi	r24, 0x01	; 1
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	9b 83       	std	Y+3, r25	; 0x03
    2e0e:	8a 83       	std	Y+2, r24	; 0x02
    2e10:	11 c0       	rjmp	.+34     	; 0x2e34 <sMO_runCycle+0x1c4c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2 : {
				/* Default exit sequence for state SendFail2 */
				handle->stateConfVector[1] = SMO_last_state;
    2e12:	86 e2       	ldi	r24, 0x26	; 38
    2e14:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2e16:	81 e0       	ldi	r24, 0x01	; 1
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	9b 83       	std	Y+3, r25	; 0x03
    2e1c:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail2'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail2_time_event_0_raised) );		
    2e1e:	ce 01       	movw	r24, r28
    2e20:	cf 96       	adiw	r24, 0x3f	; 63
    2e22:	0e 94 b3 03 	call	0x766	; 0x766 <sMO_unsetTimer>
    2e26:	06 c0       	rjmp	.+12     	; 0x2e34 <sMO_runCycle+0x1c4c>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    2e28:	86 e2       	ldi	r24, 0x26	; 38
    2e2a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2e2c:	81 e0       	ldi	r24, 0x01	; 1
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	9b 83       	std	Y+3, r25	; 0x03
    2e32:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state ConfirmRequest */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state RequestConfirmation */
		/* Entry action for state 'RequestConfirmation'. */
		sMOIfaceLCD_clear();
    2e34:	0e 94 86 02 	call	0x50c	; 0x50c <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("PROCEED?");
    2e38:	85 e5       	ldi	r24, 0x55	; 85
    2e3a:	92 e0       	ldi	r25, 0x02	; 2
    2e3c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("11-NO  12-YES", 0, 1);
    2e40:	8e e5       	ldi	r24, 0x5E	; 94
    2e42:	92 e0       	ldi	r25, 0x02	; 2
    2e44:	40 e0       	ldi	r20, 0x00	; 0
    2e46:	50 e0       	ldi	r21, 0x00	; 0
    2e48:	ba 01       	movw	r22, r20
    2e4a:	01 e0       	ldi	r16, 0x01	; 1
    2e4c:	10 e0       	ldi	r17, 0x00	; 0
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	0e 94 56 02 	call	0x4ac	; 0x4ac <sMOIfaceLCD_writeStringXY>
		handle->iface.confirmId = 0;
    2e56:	1e aa       	sts	0x9e, r17
    2e58:	1f aa       	sts	0x9f, r17
    2e5a:	18 ae       	sts	0xb8, r17
    2e5c:	19 ae       	sts	0xb9, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation;
    2e5e:	8c e1       	ldi	r24, 0x1C	; 28
    2e60:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	9b 83       	std	Y+3, r25	; 0x03
    2e68:	8a 83       	std	Y+2, r24	; 0x02
    2e6a:	2c c0       	rjmp	.+88     	; 0x2ec4 <sMO_runCycle+0x1cdc>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state ResetResult */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    2e6c:	1b 83       	std	Y+3, r17	; 0x03
    2e6e:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state null */
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_;
    2e70:	39 82       	std	Y+1, r3	; 0x01
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
    2e72:	8a 81       	ldd	r24, Y+2	; 0x02
    2e74:	9b 81       	ldd	r25, Y+3	; 0x03
    2e76:	01 96       	adiw	r24, 0x01	; 1
    2e78:	9b 83       	std	Y+3, r25	; 0x03
    2e7a:	8a 83       	std	Y+2, r24	; 0x02

void sMO_runCycle(SMO* handle) {
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
    2e7c:	82 30       	cpi	r24, 0x02	; 2
    2e7e:	91 05       	cpc	r25, r1
    2e80:	10 f4       	brcc	.+4      	; 0x2e86 <sMO_runCycle+0x1c9e>
    2e82:	0c 94 28 09 	jmp	0x1250	; 0x1250 <sMO_runCycle+0x68>
	}
	sMO_exitaction(handle);
}

static void clearInEvents(SMO* handle) {
	handle->ifaceKEYPAD.key_pressed_raised = bool_false;
    2e86:	1d 86       	std	Y+13, r1	; 0x0d
	handle->ifaceUART.DataRecieved_raised = bool_false;
    2e88:	1a 8a       	std	Y+18, r1	; 0x12
	handle->ifaceRF.DataRecieved_raised = bool_false;
    2e8a:	18 a2       	lds	r17, 0x98
	handle->iface.switchOff_raised = bool_false;
    2e8c:	1a ae       	sts	0xba, r17
	handle->iface.switchOn_raised = bool_false;
    2e8e:	1b ae       	sts	0xbb, r17
			break;
		}
	}
	
	clearInEvents(handle);
}
    2e90:	df 91       	pop	r29
    2e92:	cf 91       	pop	r28
    2e94:	1f 91       	pop	r17
    2e96:	0f 91       	pop	r16
    2e98:	ff 90       	pop	r15
    2e9a:	ef 90       	pop	r14
    2e9c:	df 90       	pop	r13
    2e9e:	cf 90       	pop	r12
    2ea0:	bf 90       	pop	r11
    2ea2:	af 90       	pop	r10
    2ea4:	9f 90       	pop	r9
    2ea6:	8f 90       	pop	r8
    2ea8:	7f 90       	pop	r7
    2eaa:	6f 90       	pop	r6
    2eac:	5f 90       	pop	r5
    2eae:	4f 90       	pop	r4
    2eb0:	3f 90       	pop	r3
    2eb2:	2f 90       	pop	r2
    2eb4:	08 95       	ret
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
    2eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eba:	01 96       	adiw	r24, 0x01	; 1
    2ebc:	9b 83       	std	Y+3, r25	; 0x03
    2ebe:	8a 83       	std	Y+2, r24	; 0x02
    2ec0:	0c 94 28 09 	jmp	0x1250	; 0x1250 <sMO_runCycle+0x68>
    2ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ec8:	01 96       	adiw	r24, 0x01	; 1
    2eca:	9b 83       	std	Y+3, r25	; 0x03
    2ecc:	8a 83       	std	Y+2, r24	; 0x02
    2ece:	db cf       	rjmp	.-74     	; 0x2e86 <sMO_runCycle+0x1c9e>

00002ed0 <sMO_raiseTimeEvent>:
	
	clearInEvents(handle);
}

void sMO_raiseTimeEvent(SMO* handle, sc_eventid evid) {
	if ( ((intptr_t)evid) >= ((intptr_t)&(handle->timeEvents))
    2ed0:	cc 96       	adiw	r24, 0x3c	; 60
    2ed2:	68 17       	cp	r22, r24
    2ed4:	79 07       	cpc	r23, r25
    2ed6:	3c f0       	brlt	.+14     	; 0x2ee6 <sMO_raiseTimeEvent+0x16>
		&&  ((intptr_t)evid) < ((intptr_t)&(handle->timeEvents)) + sizeof(SMOTimeEvents)) {
    2ed8:	04 96       	adiw	r24, 0x04	; 4
    2eda:	68 17       	cp	r22, r24
    2edc:	79 07       	cpc	r23, r25
    2ede:	18 f4       	brcc	.+6      	; 0x2ee6 <sMO_raiseTimeEvent+0x16>
		*(sc_boolean*)evid = bool_true;
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
    2ee2:	fb 01       	movw	r30, r22
    2ee4:	80 83       	st	Z, r24
    2ee6:	08 95       	ret

00002ee8 <sMO_isActive>:
	}		
}

sc_boolean sMO_isActive(SMO* handle, SMOStates state) {
    2ee8:	dc 01       	movw	r26, r24
	switch (state) {
    2eea:	e6 2f       	mov	r30, r22
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	e6 32       	cpi	r30, 0x26	; 38
    2ef0:	f1 05       	cpc	r31, r1
    2ef2:	08 f0       	brcs	.+2      	; 0x2ef6 <sMO_isActive+0xe>
    2ef4:	51 c1       	rjmp	.+674    	; 0x3198 <sMO_isActive+0x2b0>
    2ef6:	e4 57       	subi	r30, 0x74	; 116
    2ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    2efa:	ee 0f       	add	r30, r30
    2efc:	ff 1f       	adc	r31, r31
    2efe:	05 90       	lpm	r0, Z+
    2f00:	f4 91       	lpm	r31, Z
    2f02:	e0 2d       	mov	r30, r0
    2f04:	09 94       	ijmp
		case SMO_main_region_on : 
			return (sc_boolean) (handle->stateConfVector[0] >= SMO_main_region_on
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	9c 91       	ld	r25, X
    2f0a:	96 32       	cpi	r25, 0x26	; 38
    2f0c:	08 f4       	brcc	.+2      	; 0x2f10 <sMO_isActive+0x28>
    2f0e:	45 c1       	rjmp	.+650    	; 0x319a <sMO_isActive+0x2b2>
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	08 95       	ret
				&& handle->stateConfVector[0] <= SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult);
		case SMO_main_region_on_r1_Init : 
			return (sc_boolean) (handle->stateConfVector[0] == SMO_main_region_on_r1_Init
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    2f16:	9c 91       	ld	r25, X
    2f18:	91 30       	cpi	r25, 0x01	; 1
    2f1a:	09 f4       	brne	.+2      	; 0x2f1e <sMO_isActive+0x36>
    2f1c:	3e c1       	rjmp	.+636    	; 0x319a <sMO_isActive+0x2b2>
    2f1e:	80 e0       	ldi	r24, 0x00	; 0
    2f20:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running : 
			return (sc_boolean) (handle->stateConfVector[0] >= SMO_main_region_on_r1_Running
    2f22:	9c 91       	ld	r25, X
    2f24:	92 50       	subi	r25, 0x02	; 2
    2f26:	81 e0       	ldi	r24, 0x01	; 1
    2f28:	94 32       	cpi	r25, 0x24	; 36
    2f2a:	08 f4       	brcc	.+2      	; 0x2f2e <sMO_isActive+0x46>
    2f2c:	36 c1       	rjmp	.+620    	; 0x319a <sMO_isActive+0x2b2>
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
    2f30:	08 95       	ret
				&& handle->stateConfVector[0] <= SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult);
		case SMO_main_region_on_r1_Running_keypad_CheckKey : 
			return (sc_boolean) (handle->stateConfVector[0] == SMO_main_region_on_r1_Running_keypad_CheckKey
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	9c 91       	ld	r25, X
    2f36:	93 30       	cpi	r25, 0x03	; 3
    2f38:	09 f4       	brne	.+2      	; 0x2f3c <sMO_isActive+0x54>
    2f3a:	2f c1       	rjmp	.+606    	; 0x319a <sMO_isActive+0x2b2>
    2f3c:	80 e0       	ldi	r24, 0x00	; 0
    2f3e:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_keypad_CheckKeyDown : 
			return (sc_boolean) (handle->stateConfVector[0] == SMO_main_region_on_r1_Running_keypad_CheckKeyDown
    2f40:	81 e0       	ldi	r24, 0x01	; 1
    2f42:	9c 91       	ld	r25, X
    2f44:	94 30       	cpi	r25, 0x04	; 4
    2f46:	09 f4       	brne	.+2      	; 0x2f4a <sMO_isActive+0x62>
    2f48:	28 c1       	rjmp	.+592    	; 0x319a <sMO_isActive+0x2b2>
    2f4a:	80 e0       	ldi	r24, 0x00	; 0
    2f4c:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_ShowMenu : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_ShowMenu
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	11 96       	adiw	r26, 0x01	; 1
    2f52:	9c 91       	ld	r25, X
    2f54:	11 97       	sbiw	r26, 0x01	; 1
    2f56:	95 30       	cpi	r25, 0x05	; 5
    2f58:	09 f4       	brne	.+2      	; 0x2f5c <sMO_isActive+0x74>
    2f5a:	1f c1       	rjmp	.+574    	; 0x319a <sMO_isActive+0x2b2>
    2f5c:	80 e0       	ldi	r24, 0x00	; 0
    2f5e:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData : 
			return (sc_boolean) (handle->stateConfVector[1] >= SMO_main_region_on_r1_Running_running_main_EnterData
    2f60:	11 96       	adiw	r26, 0x01	; 1
    2f62:	9c 91       	ld	r25, X
    2f64:	11 97       	sbiw	r26, 0x01	; 1
    2f66:	96 50       	subi	r25, 0x06	; 6
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	9a 30       	cpi	r25, 0x0A	; 10
    2f6c:	08 f4       	brcc	.+2      	; 0x2f70 <sMO_isActive+0x88>
    2f6e:	15 c1       	rjmp	.+554    	; 0x319a <sMO_isActive+0x2b2>
    2f70:	80 e0       	ldi	r24, 0x00	; 0
    2f72:	08 95       	ret
				&& handle->stateConfVector[1] <= SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	11 96       	adiw	r26, 0x01	; 1
    2f78:	9c 91       	ld	r25, X
    2f7a:	11 97       	sbiw	r26, 0x01	; 1
    2f7c:	97 30       	cpi	r25, 0x07	; 7
    2f7e:	09 f4       	brne	.+2      	; 0x2f82 <sMO_isActive+0x9a>
    2f80:	0c c1       	rjmp	.+536    	; 0x319a <sMO_isActive+0x2b2>
    2f82:	80 e0       	ldi	r24, 0x00	; 0
    2f84:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	11 96       	adiw	r26, 0x01	; 1
    2f8a:	9c 91       	ld	r25, X
    2f8c:	11 97       	sbiw	r26, 0x01	; 1
    2f8e:	98 30       	cpi	r25, 0x08	; 8
    2f90:	09 f4       	brne	.+2      	; 0x2f94 <sMO_isActive+0xac>
    2f92:	03 c1       	rjmp	.+518    	; 0x319a <sMO_isActive+0x2b2>
    2f94:	80 e0       	ldi	r24, 0x00	; 0
    2f96:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	11 96       	adiw	r26, 0x01	; 1
    2f9c:	9c 91       	ld	r25, X
    2f9e:	11 97       	sbiw	r26, 0x01	; 1
    2fa0:	99 30       	cpi	r25, 0x09	; 9
    2fa2:	09 f4       	brne	.+2      	; 0x2fa6 <sMO_isActive+0xbe>
    2fa4:	fa c0       	rjmp	.+500    	; 0x319a <sMO_isActive+0x2b2>
    2fa6:	80 e0       	ldi	r24, 0x00	; 0
    2fa8:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0
    2faa:	81 e0       	ldi	r24, 0x01	; 1
    2fac:	11 96       	adiw	r26, 0x01	; 1
    2fae:	9c 91       	ld	r25, X
    2fb0:	11 97       	sbiw	r26, 0x01	; 1
    2fb2:	9a 30       	cpi	r25, 0x0A	; 10
    2fb4:	09 f4       	brne	.+2      	; 0x2fb8 <sMO_isActive+0xd0>
    2fb6:	f1 c0       	rjmp	.+482    	; 0x319a <sMO_isActive+0x2b2>
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount
    2fbc:	81 e0       	ldi	r24, 0x01	; 1
    2fbe:	11 96       	adiw	r26, 0x01	; 1
    2fc0:	9c 91       	ld	r25, X
    2fc2:	11 97       	sbiw	r26, 0x01	; 1
    2fc4:	9b 30       	cpi	r25, 0x0B	; 11
    2fc6:	09 f4       	brne	.+2      	; 0x2fca <sMO_isActive+0xe2>
    2fc8:	e8 c0       	rjmp	.+464    	; 0x319a <sMO_isActive+0x2b2>
    2fca:	80 e0       	ldi	r24, 0x00	; 0
    2fcc:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2
    2fce:	81 e0       	ldi	r24, 0x01	; 1
    2fd0:	11 96       	adiw	r26, 0x01	; 1
    2fd2:	9c 91       	ld	r25, X
    2fd4:	11 97       	sbiw	r26, 0x01	; 1
    2fd6:	9c 30       	cpi	r25, 0x0C	; 12
    2fd8:	09 f4       	brne	.+2      	; 0x2fdc <sMO_isActive+0xf4>
    2fda:	df c0       	rjmp	.+446    	; 0x319a <sMO_isActive+0x2b2>
    2fdc:	80 e0       	ldi	r24, 0x00	; 0
    2fde:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	11 96       	adiw	r26, 0x01	; 1
    2fe4:	9c 91       	ld	r25, X
    2fe6:	11 97       	sbiw	r26, 0x01	; 1
    2fe8:	9d 30       	cpi	r25, 0x0D	; 13
    2fea:	09 f4       	brne	.+2      	; 0x2fee <sMO_isActive+0x106>
    2fec:	d6 c0       	rjmp	.+428    	; 0x319a <sMO_isActive+0x2b2>
    2fee:	80 e0       	ldi	r24, 0x00	; 0
    2ff0:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    2ff4:	11 96       	adiw	r26, 0x01	; 1
    2ff6:	9c 91       	ld	r25, X
    2ff8:	11 97       	sbiw	r26, 0x01	; 1
    2ffa:	9e 30       	cpi	r25, 0x0E	; 14
    2ffc:	09 f4       	brne	.+2      	; 0x3000 <sMO_isActive+0x118>
    2ffe:	cd c0       	rjmp	.+410    	; 0x319a <sMO_isActive+0x2b2>
    3000:	80 e0       	ldi	r24, 0x00	; 0
    3002:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	11 96       	adiw	r26, 0x01	; 1
    3008:	9c 91       	ld	r25, X
    300a:	11 97       	sbiw	r26, 0x01	; 1
    300c:	9f 30       	cpi	r25, 0x0F	; 15
    300e:	09 f4       	brne	.+2      	; 0x3012 <sMO_isActive+0x12a>
    3010:	c4 c0       	rjmp	.+392    	; 0x319a <sMO_isActive+0x2b2>
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_MenuA : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_MenuA
    3016:	81 e0       	ldi	r24, 0x01	; 1
    3018:	11 96       	adiw	r26, 0x01	; 1
    301a:	9c 91       	ld	r25, X
    301c:	11 97       	sbiw	r26, 0x01	; 1
    301e:	90 31       	cpi	r25, 0x10	; 16
    3020:	09 f4       	brne	.+2      	; 0x3024 <sMO_isActive+0x13c>
    3022:	bb c0       	rjmp	.+374    	; 0x319a <sMO_isActive+0x2b2>
    3024:	80 e0       	ldi	r24, 0x00	; 0
    3026:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_CheckKeyPress : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_CheckKeyPress
    3028:	81 e0       	ldi	r24, 0x01	; 1
    302a:	11 96       	adiw	r26, 0x01	; 1
    302c:	9c 91       	ld	r25, X
    302e:	11 97       	sbiw	r26, 0x01	; 1
    3030:	91 31       	cpi	r25, 0x11	; 17
    3032:	09 f4       	brne	.+2      	; 0x3036 <sMO_isActive+0x14e>
    3034:	b2 c0       	rjmp	.+356    	; 0x319a <sMO_isActive+0x2b2>
    3036:	80 e0       	ldi	r24, 0x00	; 0
    3038:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendData : 
			return (sc_boolean) (handle->stateConfVector[1] >= SMO_main_region_on_r1_Running_running_main_SendData
    303a:	11 96       	adiw	r26, 0x01	; 1
    303c:	9c 91       	ld	r25, X
    303e:	11 97       	sbiw	r26, 0x01	; 1
    3040:	92 51       	subi	r25, 0x12	; 18
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	96 30       	cpi	r25, 0x06	; 6
    3046:	08 f4       	brcc	.+2      	; 0x304a <sMO_isActive+0x162>
    3048:	a8 c0       	rjmp	.+336    	; 0x319a <sMO_isActive+0x2b2>
    304a:	80 e0       	ldi	r24, 0x00	; 0
    304c:	08 95       	ret
				&& handle->stateConfVector[1] <= SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult);
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendData_r1_Send
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	11 96       	adiw	r26, 0x01	; 1
    3052:	9c 91       	ld	r25, X
    3054:	11 97       	sbiw	r26, 0x01	; 1
    3056:	93 31       	cpi	r25, 0x13	; 19
    3058:	09 f4       	brne	.+2      	; 0x305c <sMO_isActive+0x174>
    305a:	9f c0       	rjmp	.+318    	; 0x319a <sMO_isActive+0x2b2>
    305c:	80 e0       	ldi	r24, 0x00	; 0
    305e:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendData_r1_Check
    3060:	81 e0       	ldi	r24, 0x01	; 1
    3062:	11 96       	adiw	r26, 0x01	; 1
    3064:	9c 91       	ld	r25, X
    3066:	11 97       	sbiw	r26, 0x01	; 1
    3068:	94 31       	cpi	r25, 0x14	; 20
    306a:	09 f4       	brne	.+2      	; 0x306e <sMO_isActive+0x186>
    306c:	96 c0       	rjmp	.+300    	; 0x319a <sMO_isActive+0x2b2>
    306e:	80 e0       	ldi	r24, 0x00	; 0
    3070:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendData_r1__final_
    3072:	81 e0       	ldi	r24, 0x01	; 1
    3074:	11 96       	adiw	r26, 0x01	; 1
    3076:	9c 91       	ld	r25, X
    3078:	11 97       	sbiw	r26, 0x01	; 1
    307a:	95 31       	cpi	r25, 0x15	; 21
    307c:	09 f4       	brne	.+2      	; 0x3080 <sMO_isActive+0x198>
    307e:	8d c0       	rjmp	.+282    	; 0x319a <sMO_isActive+0x2b2>
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail1 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail1
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	11 96       	adiw	r26, 0x01	; 1
    3088:	9c 91       	ld	r25, X
    308a:	11 97       	sbiw	r26, 0x01	; 1
    308c:	96 31       	cpi	r25, 0x16	; 22
    308e:	09 f4       	brne	.+2      	; 0x3092 <sMO_isActive+0x1aa>
    3090:	84 c0       	rjmp	.+264    	; 0x319a <sMO_isActive+0x2b2>
    3092:	80 e0       	ldi	r24, 0x00	; 0
    3094:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	11 96       	adiw	r26, 0x01	; 1
    309a:	9c 91       	ld	r25, X
    309c:	11 97       	sbiw	r26, 0x01	; 1
    309e:	97 31       	cpi	r25, 0x17	; 23
    30a0:	09 f4       	brne	.+2      	; 0x30a4 <sMO_isActive+0x1bc>
    30a2:	7b c0       	rjmp	.+246    	; 0x319a <sMO_isActive+0x2b2>
    30a4:	80 e0       	ldi	r24, 0x00	; 0
    30a6:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_MenuB : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_MenuB
    30a8:	81 e0       	ldi	r24, 0x01	; 1
    30aa:	11 96       	adiw	r26, 0x01	; 1
    30ac:	9c 91       	ld	r25, X
    30ae:	11 97       	sbiw	r26, 0x01	; 1
    30b0:	98 31       	cpi	r25, 0x18	; 24
    30b2:	09 f4       	brne	.+2      	; 0x30b6 <sMO_isActive+0x1ce>
    30b4:	72 c0       	rjmp	.+228    	; 0x319a <sMO_isActive+0x2b2>
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_MenuC : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_MenuC
    30ba:	81 e0       	ldi	r24, 0x01	; 1
    30bc:	11 96       	adiw	r26, 0x01	; 1
    30be:	9c 91       	ld	r25, X
    30c0:	11 97       	sbiw	r26, 0x01	; 1
    30c2:	99 31       	cpi	r25, 0x19	; 25
    30c4:	09 f4       	brne	.+2      	; 0x30c8 <sMO_isActive+0x1e0>
    30c6:	69 c0       	rjmp	.+210    	; 0x319a <sMO_isActive+0x2b2>
    30c8:	80 e0       	ldi	r24, 0x00	; 0
    30ca:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_MenuD : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_MenuD
    30cc:	81 e0       	ldi	r24, 0x01	; 1
    30ce:	11 96       	adiw	r26, 0x01	; 1
    30d0:	9c 91       	ld	r25, X
    30d2:	11 97       	sbiw	r26, 0x01	; 1
    30d4:	9a 31       	cpi	r25, 0x1A	; 26
    30d6:	09 f4       	brne	.+2      	; 0x30da <sMO_isActive+0x1f2>
    30d8:	60 c0       	rjmp	.+192    	; 0x319a <sMO_isActive+0x2b2>
    30da:	80 e0       	ldi	r24, 0x00	; 0
    30dc:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_ConfirmRequest : 
			return (sc_boolean) (handle->stateConfVector[1] >= SMO_main_region_on_r1_Running_running_main_ConfirmRequest
    30de:	11 96       	adiw	r26, 0x01	; 1
    30e0:	9c 91       	ld	r25, X
    30e2:	11 97       	sbiw	r26, 0x01	; 1
    30e4:	9b 51       	subi	r25, 0x1B	; 27
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	95 30       	cpi	r25, 0x05	; 5
    30ea:	08 f4       	brcc	.+2      	; 0x30ee <sMO_isActive+0x206>
    30ec:	56 c0       	rjmp	.+172    	; 0x319a <sMO_isActive+0x2b2>
    30ee:	80 e0       	ldi	r24, 0x00	; 0
    30f0:	08 95       	ret
				&& handle->stateConfVector[1] <= SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_);
		case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation
    30f2:	81 e0       	ldi	r24, 0x01	; 1
    30f4:	11 96       	adiw	r26, 0x01	; 1
    30f6:	9c 91       	ld	r25, X
    30f8:	11 97       	sbiw	r26, 0x01	; 1
    30fa:	9c 31       	cpi	r25, 0x1C	; 28
    30fc:	09 f4       	brne	.+2      	; 0x3100 <sMO_isActive+0x218>
    30fe:	4d c0       	rjmp	.+154    	; 0x319a <sMO_isActive+0x2b2>
    3100:	80 e0       	ldi	r24, 0x00	; 0
    3102:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_Confirm : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_Confirm
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	11 96       	adiw	r26, 0x01	; 1
    3108:	9c 91       	ld	r25, X
    310a:	11 97       	sbiw	r26, 0x01	; 1
    310c:	9d 31       	cpi	r25, 0x1D	; 29
    310e:	09 f4       	brne	.+2      	; 0x3112 <sMO_isActive+0x22a>
    3110:	44 c0       	rjmp	.+136    	; 0x319a <sMO_isActive+0x2b2>
    3112:	80 e0       	ldi	r24, 0x00	; 0
    3114:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress
    3116:	81 e0       	ldi	r24, 0x01	; 1
    3118:	11 96       	adiw	r26, 0x01	; 1
    311a:	9c 91       	ld	r25, X
    311c:	11 97       	sbiw	r26, 0x01	; 1
    311e:	9e 31       	cpi	r25, 0x1E	; 30
    3120:	e1 f1       	breq	.+120    	; 0x319a <sMO_isActive+0x2b2>
    3122:	80 e0       	ldi	r24, 0x00	; 0
    3124:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_ : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	11 96       	adiw	r26, 0x01	; 1
    312a:	9c 91       	ld	r25, X
    312c:	11 97       	sbiw	r26, 0x01	; 1
    312e:	9f 31       	cpi	r25, 0x1F	; 31
    3130:	a1 f1       	breq	.+104    	; 0x319a <sMO_isActive+0x2b2>
    3132:	80 e0       	ldi	r24, 0x00	; 0
    3134:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendRequest : 
			return (sc_boolean) (handle->stateConfVector[1] >= SMO_main_region_on_r1_Running_running_main_SendRequest
    3136:	11 96       	adiw	r26, 0x01	; 1
    3138:	9c 91       	ld	r25, X
    313a:	11 97       	sbiw	r26, 0x01	; 1
    313c:	90 52       	subi	r25, 0x20	; 32
    313e:	81 e0       	ldi	r24, 0x01	; 1
    3140:	96 30       	cpi	r25, 0x06	; 6
    3142:	58 f1       	brcs	.+86     	; 0x319a <sMO_isActive+0x2b2>
    3144:	80 e0       	ldi	r24, 0x00	; 0
    3146:	08 95       	ret
				&& handle->stateConfVector[1] <= SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult);
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Send : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Send
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	11 96       	adiw	r26, 0x01	; 1
    314c:	9c 91       	ld	r25, X
    314e:	11 97       	sbiw	r26, 0x01	; 1
    3150:	91 32       	cpi	r25, 0x21	; 33
    3152:	19 f1       	breq	.+70     	; 0x319a <sMO_isActive+0x2b2>
    3154:	80 e0       	ldi	r24, 0x00	; 0
    3156:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Check : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Check
    3158:	81 e0       	ldi	r24, 0x01	; 1
    315a:	11 96       	adiw	r26, 0x01	; 1
    315c:	9c 91       	ld	r25, X
    315e:	11 97       	sbiw	r26, 0x01	; 1
    3160:	92 32       	cpi	r25, 0x22	; 34
    3162:	d9 f0       	breq	.+54     	; 0x319a <sMO_isActive+0x2b2>
    3164:	80 e0       	ldi	r24, 0x00	; 0
    3166:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_ : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_
    3168:	81 e0       	ldi	r24, 0x01	; 1
    316a:	11 96       	adiw	r26, 0x01	; 1
    316c:	9c 91       	ld	r25, X
    316e:	11 97       	sbiw	r26, 0x01	; 1
    3170:	93 32       	cpi	r25, 0x23	; 35
    3172:	99 f0       	breq	.+38     	; 0x319a <sMO_isActive+0x2b2>
    3174:	80 e0       	ldi	r24, 0x00	; 0
    3176:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2
    3178:	81 e0       	ldi	r24, 0x01	; 1
    317a:	11 96       	adiw	r26, 0x01	; 1
    317c:	9c 91       	ld	r25, X
    317e:	11 97       	sbiw	r26, 0x01	; 1
    3180:	94 32       	cpi	r25, 0x24	; 36
    3182:	59 f0       	breq	.+22     	; 0x319a <sMO_isActive+0x2b2>
    3184:	80 e0       	ldi	r24, 0x00	; 0
    3186:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult
    3188:	81 e0       	ldi	r24, 0x01	; 1
    318a:	11 96       	adiw	r26, 0x01	; 1
    318c:	9c 91       	ld	r25, X
    318e:	11 97       	sbiw	r26, 0x01	; 1
    3190:	95 32       	cpi	r25, 0x25	; 37
    3192:	19 f0       	breq	.+6      	; 0x319a <sMO_isActive+0x2b2>
    3194:	80 e0       	ldi	r24, 0x00	; 0
    3196:	08 95       	ret
			);
		default: return bool_false;
    3198:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    319a:	08 95       	ret

0000319c <sMOIfaceKEYPAD_raise_key_pressed>:



void sMOIfaceKEYPAD_raise_key_pressed(SMO* handle) {
	handle->ifaceKEYPAD.key_pressed_raised = bool_true;
    319c:	21 e0       	ldi	r18, 0x01	; 1
    319e:	fc 01       	movw	r30, r24
    31a0:	25 87       	std	Z+13, r18	; 0x0d
}
    31a2:	08 95       	ret

000031a4 <sMOIfaceKEYPAD_get_key>:


sc_integer sMOIfaceKEYPAD_get_key(SMO* handle) {
    31a4:	fc 01       	movw	r30, r24
	return handle->ifaceKEYPAD.key;
    31a6:	64 81       	ldd	r22, Z+4	; 0x04
    31a8:	75 81       	ldd	r23, Z+5	; 0x05
}
    31aa:	86 81       	ldd	r24, Z+6	; 0x06
    31ac:	97 81       	ldd	r25, Z+7	; 0x07
    31ae:	08 95       	ret

000031b0 <sMOIfaceKEYPAD_set_key>:
void sMOIfaceKEYPAD_set_key(SMO* handle, sc_integer value) {
	handle->ifaceKEYPAD.key = value;
    31b0:	fc 01       	movw	r30, r24
    31b2:	44 83       	std	Z+4, r20	; 0x04
    31b4:	55 83       	std	Z+5, r21	; 0x05
    31b6:	66 83       	std	Z+6, r22	; 0x06
    31b8:	77 83       	std	Z+7, r23	; 0x07
}
    31ba:	08 95       	ret

000031bc <sMOIfaceKEYPAD_get_lastkey>:
sc_integer sMOIfaceKEYPAD_get_lastkey(SMO* handle) {
    31bc:	fc 01       	movw	r30, r24
	return handle->ifaceKEYPAD.lastkey;
    31be:	60 85       	ldd	r22, Z+8	; 0x08
    31c0:	71 85       	ldd	r23, Z+9	; 0x09
}
    31c2:	82 85       	ldd	r24, Z+10	; 0x0a
    31c4:	93 85       	ldd	r25, Z+11	; 0x0b
    31c6:	08 95       	ret

000031c8 <sMOIfaceKEYPAD_set_lastkey>:
void sMOIfaceKEYPAD_set_lastkey(SMO* handle, sc_integer value) {
	handle->ifaceKEYPAD.lastkey = value;
    31c8:	fc 01       	movw	r30, r24
    31ca:	40 87       	std	Z+8, r20	; 0x08
    31cc:	51 87       	std	Z+9, r21	; 0x09
    31ce:	62 87       	std	Z+10, r22	; 0x0a
    31d0:	73 87       	std	Z+11, r23	; 0x0b
}
    31d2:	08 95       	ret

000031d4 <sMOIfaceKEYPAD_get_key_down>:
sc_boolean sMOIfaceKEYPAD_get_key_down(SMO* handle) {
	return handle->ifaceKEYPAD.key_down;
}
    31d4:	fc 01       	movw	r30, r24
    31d6:	84 85       	ldd	r24, Z+12	; 0x0c
    31d8:	08 95       	ret

000031da <sMOIfaceKEYPAD_set_key_down>:
void sMOIfaceKEYPAD_set_key_down(SMO* handle, sc_boolean value) {
	handle->ifaceKEYPAD.key_down = value;
    31da:	fc 01       	movw	r30, r24
    31dc:	64 87       	std	Z+12, r22	; 0x0c
}
    31de:	08 95       	ret

000031e0 <sMOIfaceUART_raise_dataRecieved>:
void sMOIfaceUART_raise_dataRecieved(SMO* handle) {
	handle->ifaceUART.DataRecieved_raised = bool_true;
    31e0:	21 e0       	ldi	r18, 0x01	; 1
    31e2:	fc 01       	movw	r30, r24
    31e4:	22 8b       	std	Z+18, r18	; 0x12
}
    31e6:	08 95       	ret

000031e8 <sMOIfaceUART_get_data>:


sc_string sMOIfaceUART_get_data(SMO* handle) {
    31e8:	fc 01       	movw	r30, r24
	return handle->ifaceUART.data;
}
    31ea:	86 85       	ldd	r24, Z+14	; 0x0e
    31ec:	97 85       	ldd	r25, Z+15	; 0x0f
    31ee:	08 95       	ret

000031f0 <sMOIfaceUART_set_data>:
void sMOIfaceUART_set_data(SMO* handle, sc_string value) {
	handle->ifaceUART.data = value;
    31f0:	fc 01       	movw	r30, r24
    31f2:	77 87       	std	Z+15, r23	; 0x0f
    31f4:	66 87       	std	Z+14, r22	; 0x0e
}
    31f6:	08 95       	ret

000031f8 <sMOIfaceUART_get_lastdata>:
sc_string sMOIfaceUART_get_lastdata(SMO* handle) {
    31f8:	fc 01       	movw	r30, r24
	return handle->ifaceUART.lastdata;
}
    31fa:	80 89       	ldd	r24, Z+16	; 0x10
    31fc:	91 89       	ldd	r25, Z+17	; 0x11
    31fe:	08 95       	ret

00003200 <sMOIfaceUART_set_lastdata>:
void sMOIfaceUART_set_lastdata(SMO* handle, sc_string value) {
	handle->ifaceUART.lastdata = value;
    3200:	fc 01       	movw	r30, r24
    3202:	71 8b       	std	Z+17, r23	; 0x11
    3204:	60 8b       	std	Z+16, r22	; 0x10
}
    3206:	08 95       	ret

00003208 <sMOIfaceRF_raise_dataRecieved>:
void sMOIfaceRF_raise_dataRecieved(SMO* handle) {
	handle->ifaceRF.DataRecieved_raised = bool_true;
    3208:	21 e0       	ldi	r18, 0x01	; 1
    320a:	fc 01       	movw	r30, r24
    320c:	20 a3       	lds	r18, 0x50
}
    320e:	08 95       	ret

00003210 <sMOIfaceRF_get_data>:


sc_string sMOIfaceRF_get_data(SMO* handle) {
    3210:	fc 01       	movw	r30, r24
	return handle->ifaceRF.data;
}
    3212:	83 89       	ldd	r24, Z+19	; 0x13
    3214:	94 89       	ldd	r25, Z+20	; 0x14
    3216:	08 95       	ret

00003218 <sMOIfaceRF_set_data>:
void sMOIfaceRF_set_data(SMO* handle, sc_string value) {
	handle->ifaceRF.data = value;
    3218:	fc 01       	movw	r30, r24
    321a:	74 8b       	std	Z+20, r23	; 0x14
    321c:	63 8b       	std	Z+19, r22	; 0x13
}
    321e:	08 95       	ret

00003220 <sMOIfaceRF_get_lastdata>:
sc_string sMOIfaceRF_get_lastdata(SMO* handle) {
    3220:	fc 01       	movw	r30, r24
	return handle->ifaceRF.lastdata;
}
    3222:	85 89       	ldd	r24, Z+21	; 0x15
    3224:	96 89       	ldd	r25, Z+22	; 0x16
    3226:	08 95       	ret

00003228 <sMOIfaceRF_set_lastdata>:
void sMOIfaceRF_set_lastdata(SMO* handle, sc_string value) {
	handle->ifaceRF.lastdata = value;
    3228:	fc 01       	movw	r30, r24
    322a:	76 8b       	std	Z+22, r23	; 0x16
    322c:	65 8b       	std	Z+21, r22	; 0x15
}
    322e:	08 95       	ret

00003230 <sMOIfaceRF_get_result>:
sc_boolean sMOIfaceRF_get_result(SMO* handle) {
	return handle->ifaceRF.result;
}
    3230:	fc 01       	movw	r30, r24
    3232:	87 89       	ldd	r24, Z+23	; 0x17
    3234:	08 95       	ret

00003236 <sMOIfaceRF_set_result>:
void sMOIfaceRF_set_result(SMO* handle, sc_boolean value) {
	handle->ifaceRF.result = value;
    3236:	fc 01       	movw	r30, r24
    3238:	67 8b       	std	Z+23, r22	; 0x17
}
    323a:	08 95       	ret

0000323c <sMOIfaceRF_get_retry>:
sc_integer sMOIfaceRF_get_retry(SMO* handle) {
    323c:	fc 01       	movw	r30, r24
	return handle->ifaceRF.retry;
    323e:	60 8d       	ldd	r22, Z+24	; 0x18
    3240:	71 8d       	ldd	r23, Z+25	; 0x19
}
    3242:	82 8d       	ldd	r24, Z+26	; 0x1a
    3244:	93 8d       	ldd	r25, Z+27	; 0x1b
    3246:	08 95       	ret

00003248 <sMOIfaceRF_set_retry>:
void sMOIfaceRF_set_retry(SMO* handle, sc_integer value) {
	handle->ifaceRF.retry = value;
    3248:	fc 01       	movw	r30, r24
    324a:	40 8f       	std	Z+24, r20	; 0x18
    324c:	51 8f       	std	Z+25, r21	; 0x19
    324e:	62 8f       	std	Z+26, r22	; 0x1a
    3250:	73 8f       	std	Z+27, r23	; 0x1b
}
    3252:	08 95       	ret

00003254 <sMOIfaceRF_get_iD>:
sc_integer sMOIfaceRF_get_iD(SMO* handle) {
    3254:	fc 01       	movw	r30, r24
	return handle->ifaceRF.ID;
    3256:	64 8d       	ldd	r22, Z+28	; 0x1c
    3258:	75 8d       	ldd	r23, Z+29	; 0x1d
}
    325a:	86 8d       	ldd	r24, Z+30	; 0x1e
    325c:	97 8d       	ldd	r25, Z+31	; 0x1f
    325e:	08 95       	ret

00003260 <sMOIfaceRF_set_iD>:
void sMOIfaceRF_set_iD(SMO* handle, sc_integer value) {
	handle->ifaceRF.ID = value;
    3260:	fc 01       	movw	r30, r24
    3262:	44 8f       	std	Z+28, r20	; 0x1c
    3264:	55 8f       	std	Z+29, r21	; 0x1d
    3266:	66 8f       	std	Z+30, r22	; 0x1e
    3268:	77 8f       	std	Z+31, r23	; 0x1f
}
    326a:	08 95       	ret

0000326c <sMOIfaceDISH_get_iD>:


sc_integer sMOIfaceDISH_get_iD(SMO* handle) {
    326c:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.ID;
    326e:	61 a1       	lds	r22, 0x41
    3270:	72 a1       	lds	r23, 0x42
}
    3272:	83 a1       	lds	r24, 0x43
    3274:	94 a1       	lds	r25, 0x44
    3276:	08 95       	ret

00003278 <sMOIfaceDISH_set_iD>:
void sMOIfaceDISH_set_iD(SMO* handle, sc_integer value) {
	handle->ifaceDISH.ID = value;
    3278:	fc 01       	movw	r30, r24
    327a:	41 a3       	lds	r20, 0x51
    327c:	52 a3       	lds	r21, 0x52
    327e:	63 a3       	lds	r22, 0x53
    3280:	74 a3       	lds	r23, 0x54
}
    3282:	08 95       	ret

00003284 <sMOIfaceDISH_get_amount>:
sc_integer sMOIfaceDISH_get_amount(SMO* handle) {
    3284:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.amount;
    3286:	65 a1       	lds	r22, 0x45
    3288:	76 a1       	lds	r23, 0x46
}
    328a:	87 a1       	lds	r24, 0x47
    328c:	90 a5       	lds	r25, 0x60
    328e:	08 95       	ret

00003290 <sMOIfaceDISH_set_amount>:
void sMOIfaceDISH_set_amount(SMO* handle, sc_integer value) {
	handle->ifaceDISH.amount = value;
    3290:	fc 01       	movw	r30, r24
    3292:	45 a3       	lds	r20, 0x55
    3294:	56 a3       	lds	r21, 0x56
    3296:	67 a3       	lds	r22, 0x57
    3298:	70 a7       	lds	r23, 0x70
}
    329a:	08 95       	ret

0000329c <sMOIfaceDISH_get_pos>:
sc_integer sMOIfaceDISH_get_pos(SMO* handle) {
    329c:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.pos;
    329e:	61 a5       	lds	r22, 0x61
    32a0:	72 a5       	lds	r23, 0x62
}
    32a2:	83 a5       	lds	r24, 0x63
    32a4:	94 a5       	lds	r25, 0x64
    32a6:	08 95       	ret

000032a8 <sMOIfaceDISH_set_pos>:
void sMOIfaceDISH_set_pos(SMO* handle, sc_integer value) {
	handle->ifaceDISH.pos = value;
    32a8:	fc 01       	movw	r30, r24
    32aa:	41 a7       	lds	r20, 0x71
    32ac:	52 a7       	lds	r21, 0x72
    32ae:	63 a7       	lds	r22, 0x73
    32b0:	74 a7       	lds	r23, 0x74
}
    32b2:	08 95       	ret

000032b4 <sMOIface_raise_switchOff>:
void sMOIface_raise_switchOff(SMO* handle) {
	handle->iface.switchOff_raised = bool_true;
    32b4:	21 e0       	ldi	r18, 0x01	; 1
    32b6:	fc 01       	movw	r30, r24
    32b8:	22 af       	sts	0x72, r18
}
    32ba:	08 95       	ret

000032bc <sMOIface_raise_switchOn>:
void sMOIface_raise_switchOn(SMO* handle) {
	handle->iface.switchOn_raised = bool_true;
    32bc:	21 e0       	ldi	r18, 0x01	; 1
    32be:	fc 01       	movw	r30, r24
    32c0:	23 af       	sts	0x73, r18
}
    32c2:	08 95       	ret

000032c4 <sMOIface_get_lightOn>:


sc_boolean sMOIface_get_lightOn(SMO* handle) {
	return handle->iface.lightOn;
}
    32c4:	fc 01       	movw	r30, r24
    32c6:	85 a5       	lds	r24, 0x65
    32c8:	08 95       	ret

000032ca <sMOIface_set_lightOn>:
void sMOIface_set_lightOn(SMO* handle, sc_boolean value) {
	handle->iface.lightOn = value;
    32ca:	fc 01       	movw	r30, r24
    32cc:	65 a7       	lds	r22, 0x75
}
    32ce:	08 95       	ret

000032d0 <sMOIface_get_menuId>:
sc_integer sMOIface_get_menuId(SMO* handle) {
    32d0:	fc 01       	movw	r30, r24
	return handle->iface.menuId;
    32d2:	66 a5       	lds	r22, 0x66
    32d4:	77 a5       	lds	r23, 0x67
}
    32d6:	80 a9       	sts	0x40, r24
    32d8:	91 a9       	sts	0x41, r25
    32da:	08 95       	ret

000032dc <sMOIface_set_menuId>:
void sMOIface_set_menuId(SMO* handle, sc_integer value) {
	handle->iface.menuId = value;
    32dc:	fc 01       	movw	r30, r24
    32de:	46 a7       	lds	r20, 0x76
    32e0:	57 a7       	lds	r21, 0x77
    32e2:	60 ab       	sts	0x50, r22
    32e4:	71 ab       	sts	0x51, r23
}
    32e6:	08 95       	ret

000032e8 <sMOIface_get_tableId>:
sc_integer sMOIface_get_tableId(SMO* handle) {
    32e8:	fc 01       	movw	r30, r24
	return handle->iface.tableId;
    32ea:	62 a9       	sts	0x42, r22
    32ec:	73 a9       	sts	0x43, r23
}
    32ee:	84 a9       	sts	0x44, r24
    32f0:	95 a9       	sts	0x45, r25
    32f2:	08 95       	ret

000032f4 <sMOIface_set_tableId>:
void sMOIface_set_tableId(SMO* handle, sc_integer value) {
	handle->iface.tableId = value;
    32f4:	fc 01       	movw	r30, r24
    32f6:	42 ab       	sts	0x52, r20
    32f8:	53 ab       	sts	0x53, r21
    32fa:	64 ab       	sts	0x54, r22
    32fc:	75 ab       	sts	0x55, r23
}
    32fe:	08 95       	ret

00003300 <sMOIface_get_confirmId>:
sc_integer sMOIface_get_confirmId(SMO* handle) {
    3300:	fc 01       	movw	r30, r24
	return handle->iface.confirmId;
    3302:	66 a9       	sts	0x46, r22
    3304:	77 a9       	sts	0x47, r23
}
    3306:	80 ad       	sts	0x60, r24
    3308:	91 ad       	sts	0x61, r25
    330a:	08 95       	ret

0000330c <sMOIface_set_confirmId>:
void sMOIface_set_confirmId(SMO* handle, sc_integer value) {
	handle->iface.confirmId = value;
    330c:	fc 01       	movw	r30, r24
    330e:	46 ab       	sts	0x56, r20
    3310:	57 ab       	sts	0x57, r21
    3312:	60 af       	sts	0x70, r22
    3314:	71 af       	sts	0x71, r23
}
    3316:	08 95       	ret

00003318 <spi_init>:

/*
 * spi initialize
 */
void spi_init() {
    SPI_DDR &= ~((1<<SPI_MOSI) | (1<<SPI_MISO) | (1<<SPI_SS) | (1<<SPI_SCK)); //input
    3318:	87 b3       	in	r24, 0x17	; 23
    331a:	80 7f       	andi	r24, 0xF0	; 240
    331c:	87 bb       	out	0x17, r24	; 23
    SPI_DDR |= ((1<<SPI_MOSI) | (1<<SPI_SS) | (1<<SPI_SCK)); //output
    331e:	87 b3       	in	r24, 0x17	; 23
    3320:	87 60       	ori	r24, 0x07	; 7
    3322:	87 bb       	out	0x17, r24	; 23

    SPCR = ((1<<SPE)|               // SPI Enable
    3324:	81 e5       	ldi	r24, 0x51	; 81
    3326:	8d b9       	out	0x0d, r24	; 13
            (1<<MSTR)|              // Master/Slave select
            (0<<SPR1)|(1<<SPR0)|    // SPI Clock Rate
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR = (1<<SPI2X); // Double SPI Speed Bit
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	8e b9       	out	0x0e, r24	; 14
}
    332c:	08 95       	ret

0000332e <spi_writereadbyte>:

/*
 * spi write one byte and read it back
 */
uint8_t spi_writereadbyte(uint8_t data) {
    SPDR = data;
    332e:	8f b9       	out	0x0f, r24	; 15
    while((SPSR & (1<<SPIF)) == 0);
    3330:	77 9b       	sbis	0x0e, 7	; 14
    3332:	fe cf       	rjmp	.-4      	; 0x3330 <spi_writereadbyte+0x2>
    return SPDR;
    3334:	8f b1       	in	r24, 0x0f	; 15
}
    3336:	08 95       	ret

00003338 <TimerInit>:

TimeEvent tmrEvent[10];
int tmrCount=0;

void TimerInit() {
	TCCR0 = 0b011; //CS02=0, CS01=1, CS00=0, chon Prescaler=64
    3338:	83 e0       	ldi	r24, 0x03	; 3
    333a:	83 bf       	out	0x33, r24	; 51
	//Xung chip la 8MHZ -> 1 xung mat 1us/8 = 0.125 us
	//Prescaler=64, kich 256 lan moi tang 1 lan trong bo dem Timer-> Ton 8us
	//Vay, de Timer ngat moi 1ms, ta can: 1000/8=125 lan dem.
	//Ma Timer ngat khi bo dem toi 255, ta can set gia tri ban dau cho bo dem la: 255-125+1=131
	TCNT0=131;
    333c:	83 e8       	ldi	r24, 0x83	; 131
    333e:	82 bf       	out	0x32, r24	; 50
	TIMSK=(1<<TOIE0); //Cho phep ngat khi cho tran o T/C0
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	87 bf       	out	0x37, r24	; 55
	tmrCount=0;
    3344:	10 92 7b 02 	sts	0x027B, r1
    3348:	10 92 7a 02 	sts	0x027A, r1
	sei();
    334c:	78 94       	sei
}
    334e:	08 95       	ret

00003350 <TimerSet>:

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
    3350:	cf 92       	push	r12
    3352:	df 92       	push	r13
    3354:	ef 92       	push	r14
    3356:	ff 92       	push	r15
    3358:	cf 93       	push	r28
    335a:	df 93       	push	r29
    335c:	ec 01       	movw	r28, r24
    335e:	6a 01       	movw	r12, r20
    3360:	7b 01       	movw	r14, r22
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
    3362:	40 91 7a 02 	lds	r20, 0x027A
    3366:	50 91 7b 02 	lds	r21, 0x027B
    336a:	14 16       	cp	r1, r20
    336c:	15 06       	cpc	r1, r21
    336e:	e4 f4       	brge	.+56     	; 0x33a8 <TimerSet+0x58>
    3370:	e0 e9       	ldi	r30, 0x90	; 144
    3372:	f2 e0       	ldi	r31, 0x02	; 2
    3374:	df 01       	movw	r26, r30
    3376:	16 96       	adiw	r26, 0x06	; 6
    3378:	20 e0       	ldi	r18, 0x00	; 0
    337a:	30 e0       	ldi	r19, 0x00	; 0
	sei();
}

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
    337c:	70 e0       	ldi	r23, 0x00	; 0
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
			check=true;
			tmrEvent[i].count=0;
			tmrEvent[i].max=max;
			tmrEvent[i].enabled=true;
    337e:	61 e0       	ldi	r22, 0x01	; 1

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
    3380:	80 81       	ld	r24, Z
    3382:	91 81       	ldd	r25, Z+1	; 0x01
    3384:	8c 17       	cp	r24, r28
    3386:	9d 07       	cpc	r25, r29
    3388:	31 f4       	brne	.+12     	; 0x3396 <TimerSet+0x46>
			check=true;
			tmrEvent[i].count=0;
    338a:	13 82       	std	Z+3, r1	; 0x03
    338c:	12 82       	std	Z+2, r1	; 0x02
			tmrEvent[i].max=max;
    338e:	d5 82       	std	Z+5, r13	; 0x05
    3390:	c4 82       	std	Z+4, r12	; 0x04
			tmrEvent[i].enabled=true;
    3392:	6c 93       	st	X, r22
//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
			check=true;
    3394:	76 2f       	mov	r23, r22
}

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
    3396:	2f 5f       	subi	r18, 0xFF	; 255
    3398:	3f 4f       	sbci	r19, 0xFF	; 255
    339a:	37 96       	adiw	r30, 0x07	; 7
    339c:	17 96       	adiw	r26, 0x07	; 7
    339e:	24 17       	cp	r18, r20
    33a0:	35 07       	cpc	r19, r21
    33a2:	74 f3       	brlt	.-36     	; 0x3380 <TimerSet+0x30>
			tmrEvent[i].count=0;
			tmrEvent[i].max=max;
			tmrEvent[i].enabled=true;
		}
	}
	if (!check) {
    33a4:	77 23       	and	r23, r23
    33a6:	c9 f4       	brne	.+50     	; 0x33da <TimerSet+0x8a>
		tmrEvent[tmrCount].EventId=evenId;
    33a8:	fa 01       	movw	r30, r20
    33aa:	ee 0f       	add	r30, r30
    33ac:	ff 1f       	adc	r31, r31
    33ae:	ee 0f       	add	r30, r30
    33b0:	ff 1f       	adc	r31, r31
    33b2:	ee 0f       	add	r30, r30
    33b4:	ff 1f       	adc	r31, r31
    33b6:	e4 1b       	sub	r30, r20
    33b8:	f5 0b       	sbc	r31, r21
    33ba:	e0 57       	subi	r30, 0x70	; 112
    33bc:	fd 4f       	sbci	r31, 0xFD	; 253
    33be:	d1 83       	std	Z+1, r29	; 0x01
    33c0:	c0 83       	st	Z, r28
		tmrEvent[tmrCount].count=0;
    33c2:	13 82       	std	Z+3, r1	; 0x03
    33c4:	12 82       	std	Z+2, r1	; 0x02
		tmrEvent[tmrCount].max=max;
    33c6:	d5 82       	std	Z+5, r13	; 0x05
    33c8:	c4 82       	std	Z+4, r12	; 0x04
		tmrEvent[tmrCount].enabled=true;
    33ca:	81 e0       	ldi	r24, 0x01	; 1
    33cc:	86 83       	std	Z+6, r24	; 0x06
		tmrCount++;
    33ce:	4f 5f       	subi	r20, 0xFF	; 255
    33d0:	5f 4f       	sbci	r21, 0xFF	; 255
    33d2:	50 93 7b 02 	sts	0x027B, r21
    33d6:	40 93 7a 02 	sts	0x027A, r20
	}
}
    33da:	df 91       	pop	r29
    33dc:	cf 91       	pop	r28
    33de:	ff 90       	pop	r15
    33e0:	ef 90       	pop	r14
    33e2:	df 90       	pop	r13
    33e4:	cf 90       	pop	r12
    33e6:	08 95       	ret

000033e8 <TimerUnSet>:

void TimerUnSet(const sc_eventid evenId) {
    33e8:	dc 01       	movw	r26, r24
	for (int i=0;i<tmrCount;i++) {
    33ea:	60 91 7a 02 	lds	r22, 0x027A
    33ee:	70 91 7b 02 	lds	r23, 0x027B
    33f2:	16 16       	cp	r1, r22
    33f4:	17 06       	cpc	r1, r23
    33f6:	6c f5       	brge	.+90     	; 0x3452 <TimerUnSet+0x6a>
		if (tmrEvent[i].EventId==evenId) {
    33f8:	80 91 90 02 	lds	r24, 0x0290
    33fc:	90 91 91 02 	lds	r25, 0x0291
    3400:	8a 17       	cp	r24, r26
    3402:	9b 07       	cpc	r25, r27
    3404:	e9 f4       	brne	.+58     	; 0x3440 <TimerUnSet+0x58>
    3406:	0a c0       	rjmp	.+20     	; 0x341c <TimerUnSet+0x34>
    3408:	29 5f       	subi	r18, 0xF9	; 249
    340a:	3f 4f       	sbci	r19, 0xFF	; 255
		tmrEvent[tmrCount].enabled=true;
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
    340c:	f9 01       	movw	r30, r18
    340e:	37 97       	sbiw	r30, 0x07	; 7
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
    3410:	80 81       	ld	r24, Z
    3412:	91 81       	ldd	r25, Z+1	; 0x01
    3414:	8a 17       	cp	r24, r26
    3416:	9b 07       	cpc	r25, r27
    3418:	b9 f4       	brne	.+46     	; 0x3448 <TimerUnSet+0x60>
    341a:	02 c0       	rjmp	.+4      	; 0x3420 <TimerUnSet+0x38>
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
	for (int i=0;i<tmrCount;i++) {
    341c:	40 e0       	ldi	r20, 0x00	; 0
    341e:	50 e0       	ldi	r21, 0x00	; 0
		if (tmrEvent[i].EventId==evenId) {
			tmrEvent[i].count=0;
    3420:	fa 01       	movw	r30, r20
    3422:	ee 0f       	add	r30, r30
    3424:	ff 1f       	adc	r31, r31
    3426:	ee 0f       	add	r30, r30
    3428:	ff 1f       	adc	r31, r31
    342a:	ee 0f       	add	r30, r30
    342c:	ff 1f       	adc	r31, r31
    342e:	e4 1b       	sub	r30, r20
    3430:	f5 0b       	sbc	r31, r21
    3432:	e0 57       	subi	r30, 0x70	; 112
    3434:	fd 4f       	sbci	r31, 0xFD	; 253
    3436:	13 82       	std	Z+3, r1	; 0x03
    3438:	12 82       	std	Z+2, r1	; 0x02
			tmrEvent[i].enabled=false;
    343a:	16 82       	std	Z+6, r1	; 0x06
			*(sc_boolean*)evenId=bool_false;
    343c:	1c 92       	st	X, r1
			return;
    343e:	08 95       	ret
    3440:	27 e9       	ldi	r18, 0x97	; 151
    3442:	32 e0       	ldi	r19, 0x02	; 2
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
	for (int i=0;i<tmrCount;i++) {
    3444:	40 e0       	ldi	r20, 0x00	; 0
    3446:	50 e0       	ldi	r21, 0x00	; 0
    3448:	4f 5f       	subi	r20, 0xFF	; 255
    344a:	5f 4f       	sbci	r21, 0xFF	; 255
    344c:	46 17       	cp	r20, r22
    344e:	57 07       	cpc	r21, r23
    3450:	d9 f6       	brne	.-74     	; 0x3408 <TimerUnSet+0x20>
    3452:	08 95       	ret

00003454 <TimerCheck>:
			return;
		}
	}
}

void TimerCheck(SMO* handle) {
    3454:	cf 92       	push	r12
    3456:	df 92       	push	r13
    3458:	ef 92       	push	r14
    345a:	ff 92       	push	r15
    345c:	0f 93       	push	r16
    345e:	1f 93       	push	r17
    3460:	cf 93       	push	r28
    3462:	df 93       	push	r29
    3464:	6c 01       	movw	r12, r24
	for (int i=0;i<tmrCount;i++) {
    3466:	80 91 7a 02 	lds	r24, 0x027A
    346a:	90 91 7b 02 	lds	r25, 0x027B
    346e:	18 16       	cp	r1, r24
    3470:	19 06       	cpc	r1, r25
    3472:	94 f5       	brge	.+100    	; 0x34d8 <TimerCheck+0x84>
    3474:	c6 e9       	ldi	r28, 0x96	; 150
    3476:	d2 e0       	ldi	r29, 0x02	; 2
    3478:	8e 01       	movw	r16, r28
    347a:	06 50       	subi	r16, 0x06	; 6
    347c:	10 40       	sbci	r17, 0x00	; 0
    347e:	ee 24       	eor	r14, r14
    3480:	ff 24       	eor	r15, r15
		if (tmrEvent[i].enabled) {
    3482:	88 81       	ld	r24, Y
    3484:	88 23       	and	r24, r24
    3486:	d9 f0       	breq	.+54     	; 0x34be <TimerCheck+0x6a>
			tmrEvent[i].count++;
    3488:	d8 01       	movw	r26, r16
    348a:	12 96       	adiw	r26, 0x02	; 2
    348c:	8d 91       	ld	r24, X+
    348e:	9c 91       	ld	r25, X
    3490:	13 97       	sbiw	r26, 0x03	; 3
    3492:	01 96       	adiw	r24, 0x01	; 1
    3494:	13 96       	adiw	r26, 0x03	; 3
    3496:	9c 93       	st	X, r25
    3498:	8e 93       	st	-X, r24
    349a:	12 97       	sbiw	r26, 0x02	; 2
			if (tmrEvent[i].count==tmrEvent[i].max) {
    349c:	14 96       	adiw	r26, 0x04	; 4
    349e:	2d 91       	ld	r18, X+
    34a0:	3c 91       	ld	r19, X
    34a2:	15 97       	sbiw	r26, 0x05	; 5
    34a4:	82 17       	cp	r24, r18
    34a6:	93 07       	cpc	r25, r19
    34a8:	51 f4       	brne	.+20     	; 0x34be <TimerCheck+0x6a>
				tmrEvent[i].count=0;
    34aa:	13 96       	adiw	r26, 0x03	; 3
    34ac:	1c 92       	st	X, r1
    34ae:	1e 92       	st	-X, r1
    34b0:	12 97       	sbiw	r26, 0x02	; 2
				tmrEvent[i].enabled=false;
    34b2:	18 82       	st	Y, r1
				sMO_raiseTimeEvent(handle,tmrEvent[i].EventId);
    34b4:	6d 91       	ld	r22, X+
    34b6:	7c 91       	ld	r23, X
    34b8:	c6 01       	movw	r24, r12
    34ba:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <sMO_raiseTimeEvent>
		}
	}
}

void TimerCheck(SMO* handle) {
	for (int i=0;i<tmrCount;i++) {
    34be:	08 94       	sec
    34c0:	e1 1c       	adc	r14, r1
    34c2:	f1 1c       	adc	r15, r1
    34c4:	27 96       	adiw	r28, 0x07	; 7
    34c6:	09 5f       	subi	r16, 0xF9	; 249
    34c8:	1f 4f       	sbci	r17, 0xFF	; 255
    34ca:	80 91 7a 02 	lds	r24, 0x027A
    34ce:	90 91 7b 02 	lds	r25, 0x027B
    34d2:	e8 16       	cp	r14, r24
    34d4:	f9 06       	cpc	r15, r25
    34d6:	ac f2       	brlt	.-86     	; 0x3482 <TimerCheck+0x2e>
				tmrEvent[i].enabled=false;
				sMO_raiseTimeEvent(handle,tmrEvent[i].EventId);
			}
		}
	}
}
    34d8:	df 91       	pop	r29
    34da:	cf 91       	pop	r28
    34dc:	1f 91       	pop	r17
    34de:	0f 91       	pop	r16
    34e0:	ff 90       	pop	r15
    34e2:	ef 90       	pop	r14
    34e4:	df 90       	pop	r13
    34e6:	cf 90       	pop	r12
    34e8:	08 95       	ret

000034ea <TimerClear>:

void TimerClear() {
	free(tmrEvent);
    34ea:	80 e9       	ldi	r24, 0x90	; 144
    34ec:	92 e0       	ldi	r25, 0x02	; 2
    34ee:	0e 94 66 1b 	call	0x36cc	; 0x36cc <free>
	tmrCount=0;
    34f2:	10 92 7b 02 	sts	0x027B, r1
    34f6:	10 92 7a 02 	sts	0x027A, r1
    34fa:	08 95       	ret

000034fc <__mulsi3>:
    34fc:	62 9f       	mul	r22, r18
    34fe:	d0 01       	movw	r26, r0
    3500:	73 9f       	mul	r23, r19
    3502:	f0 01       	movw	r30, r0
    3504:	82 9f       	mul	r24, r18
    3506:	e0 0d       	add	r30, r0
    3508:	f1 1d       	adc	r31, r1
    350a:	64 9f       	mul	r22, r20
    350c:	e0 0d       	add	r30, r0
    350e:	f1 1d       	adc	r31, r1
    3510:	92 9f       	mul	r25, r18
    3512:	f0 0d       	add	r31, r0
    3514:	83 9f       	mul	r24, r19
    3516:	f0 0d       	add	r31, r0
    3518:	74 9f       	mul	r23, r20
    351a:	f0 0d       	add	r31, r0
    351c:	65 9f       	mul	r22, r21
    351e:	f0 0d       	add	r31, r0
    3520:	99 27       	eor	r25, r25
    3522:	72 9f       	mul	r23, r18
    3524:	b0 0d       	add	r27, r0
    3526:	e1 1d       	adc	r30, r1
    3528:	f9 1f       	adc	r31, r25
    352a:	63 9f       	mul	r22, r19
    352c:	b0 0d       	add	r27, r0
    352e:	e1 1d       	adc	r30, r1
    3530:	f9 1f       	adc	r31, r25
    3532:	bd 01       	movw	r22, r26
    3534:	cf 01       	movw	r24, r30
    3536:	11 24       	eor	r1, r1
    3538:	08 95       	ret

0000353a <__udivmodqi4>:
    353a:	99 1b       	sub	r25, r25
    353c:	79 e0       	ldi	r23, 0x09	; 9
    353e:	04 c0       	rjmp	.+8      	; 0x3548 <__udivmodqi4_ep>

00003540 <__udivmodqi4_loop>:
    3540:	99 1f       	adc	r25, r25
    3542:	96 17       	cp	r25, r22
    3544:	08 f0       	brcs	.+2      	; 0x3548 <__udivmodqi4_ep>
    3546:	96 1b       	sub	r25, r22

00003548 <__udivmodqi4_ep>:
    3548:	88 1f       	adc	r24, r24
    354a:	7a 95       	dec	r23
    354c:	c9 f7       	brne	.-14     	; 0x3540 <__udivmodqi4_loop>
    354e:	80 95       	com	r24
    3550:	08 95       	ret

00003552 <__divmodhi4>:
    3552:	97 fb       	bst	r25, 7
    3554:	09 2e       	mov	r0, r25
    3556:	07 26       	eor	r0, r23
    3558:	0a d0       	rcall	.+20     	; 0x356e <__divmodhi4_neg1>
    355a:	77 fd       	sbrc	r23, 7
    355c:	04 d0       	rcall	.+8      	; 0x3566 <__divmodhi4_neg2>
    355e:	0c d0       	rcall	.+24     	; 0x3578 <__udivmodhi4>
    3560:	06 d0       	rcall	.+12     	; 0x356e <__divmodhi4_neg1>
    3562:	00 20       	and	r0, r0
    3564:	1a f4       	brpl	.+6      	; 0x356c <__divmodhi4_exit>

00003566 <__divmodhi4_neg2>:
    3566:	70 95       	com	r23
    3568:	61 95       	neg	r22
    356a:	7f 4f       	sbci	r23, 0xFF	; 255

0000356c <__divmodhi4_exit>:
    356c:	08 95       	ret

0000356e <__divmodhi4_neg1>:
    356e:	f6 f7       	brtc	.-4      	; 0x356c <__divmodhi4_exit>
    3570:	90 95       	com	r25
    3572:	81 95       	neg	r24
    3574:	9f 4f       	sbci	r25, 0xFF	; 255
    3576:	08 95       	ret

00003578 <__udivmodhi4>:
    3578:	aa 1b       	sub	r26, r26
    357a:	bb 1b       	sub	r27, r27
    357c:	51 e1       	ldi	r21, 0x11	; 17
    357e:	07 c0       	rjmp	.+14     	; 0x358e <__udivmodhi4_ep>

00003580 <__udivmodhi4_loop>:
    3580:	aa 1f       	adc	r26, r26
    3582:	bb 1f       	adc	r27, r27
    3584:	a6 17       	cp	r26, r22
    3586:	b7 07       	cpc	r27, r23
    3588:	10 f0       	brcs	.+4      	; 0x358e <__udivmodhi4_ep>
    358a:	a6 1b       	sub	r26, r22
    358c:	b7 0b       	sbc	r27, r23

0000358e <__udivmodhi4_ep>:
    358e:	88 1f       	adc	r24, r24
    3590:	99 1f       	adc	r25, r25
    3592:	5a 95       	dec	r21
    3594:	a9 f7       	brne	.-22     	; 0x3580 <__udivmodhi4_loop>
    3596:	80 95       	com	r24
    3598:	90 95       	com	r25
    359a:	bc 01       	movw	r22, r24
    359c:	cd 01       	movw	r24, r26
    359e:	08 95       	ret

000035a0 <malloc>:
    35a0:	cf 93       	push	r28
    35a2:	df 93       	push	r29
    35a4:	ac 01       	movw	r20, r24
    35a6:	82 30       	cpi	r24, 0x02	; 2
    35a8:	91 05       	cpc	r25, r1
    35aa:	10 f4       	brcc	.+4      	; 0x35b0 <malloc+0x10>
    35ac:	42 e0       	ldi	r20, 0x02	; 2
    35ae:	50 e0       	ldi	r21, 0x00	; 0
    35b0:	e0 91 d8 02 	lds	r30, 0x02D8
    35b4:	f0 91 d9 02 	lds	r31, 0x02D9
    35b8:	20 e0       	ldi	r18, 0x00	; 0
    35ba:	30 e0       	ldi	r19, 0x00	; 0
    35bc:	a0 e0       	ldi	r26, 0x00	; 0
    35be:	b0 e0       	ldi	r27, 0x00	; 0
    35c0:	24 c0       	rjmp	.+72     	; 0x360a <malloc+0x6a>
    35c2:	80 81       	ld	r24, Z
    35c4:	91 81       	ldd	r25, Z+1	; 0x01
    35c6:	84 17       	cp	r24, r20
    35c8:	95 07       	cpc	r25, r21
    35ca:	d0 f0       	brcs	.+52     	; 0x3600 <malloc+0x60>
    35cc:	84 17       	cp	r24, r20
    35ce:	95 07       	cpc	r25, r21
    35d0:	71 f4       	brne	.+28     	; 0x35ee <malloc+0x4e>
    35d2:	82 81       	ldd	r24, Z+2	; 0x02
    35d4:	93 81       	ldd	r25, Z+3	; 0x03
    35d6:	10 97       	sbiw	r26, 0x00	; 0
    35d8:	29 f0       	breq	.+10     	; 0x35e4 <malloc+0x44>
    35da:	13 96       	adiw	r26, 0x03	; 3
    35dc:	9c 93       	st	X, r25
    35de:	8e 93       	st	-X, r24
    35e0:	12 97       	sbiw	r26, 0x02	; 2
    35e2:	2c c0       	rjmp	.+88     	; 0x363c <malloc+0x9c>
    35e4:	90 93 d9 02 	sts	0x02D9, r25
    35e8:	80 93 d8 02 	sts	0x02D8, r24
    35ec:	27 c0       	rjmp	.+78     	; 0x363c <malloc+0x9c>
    35ee:	21 15       	cp	r18, r1
    35f0:	31 05       	cpc	r19, r1
    35f2:	19 f0       	breq	.+6      	; 0x35fa <malloc+0x5a>
    35f4:	82 17       	cp	r24, r18
    35f6:	93 07       	cpc	r25, r19
    35f8:	18 f4       	brcc	.+6      	; 0x3600 <malloc+0x60>
    35fa:	9c 01       	movw	r18, r24
    35fc:	bd 01       	movw	r22, r26
    35fe:	ef 01       	movw	r28, r30
    3600:	92 81       	ldd	r25, Z+2	; 0x02
    3602:	83 81       	ldd	r24, Z+3	; 0x03
    3604:	df 01       	movw	r26, r30
    3606:	e9 2f       	mov	r30, r25
    3608:	f8 2f       	mov	r31, r24
    360a:	30 97       	sbiw	r30, 0x00	; 0
    360c:	d1 f6       	brne	.-76     	; 0x35c2 <malloc+0x22>
    360e:	21 15       	cp	r18, r1
    3610:	31 05       	cpc	r19, r1
    3612:	f9 f0       	breq	.+62     	; 0x3652 <malloc+0xb2>
    3614:	c9 01       	movw	r24, r18
    3616:	84 1b       	sub	r24, r20
    3618:	95 0b       	sbc	r25, r21
    361a:	84 30       	cpi	r24, 0x04	; 4
    361c:	91 05       	cpc	r25, r1
    361e:	80 f4       	brcc	.+32     	; 0x3640 <malloc+0xa0>
    3620:	8a 81       	ldd	r24, Y+2	; 0x02
    3622:	9b 81       	ldd	r25, Y+3	; 0x03
    3624:	61 15       	cp	r22, r1
    3626:	71 05       	cpc	r23, r1
    3628:	21 f0       	breq	.+8      	; 0x3632 <malloc+0x92>
    362a:	fb 01       	movw	r30, r22
    362c:	93 83       	std	Z+3, r25	; 0x03
    362e:	82 83       	std	Z+2, r24	; 0x02
    3630:	04 c0       	rjmp	.+8      	; 0x363a <malloc+0x9a>
    3632:	90 93 d9 02 	sts	0x02D9, r25
    3636:	80 93 d8 02 	sts	0x02D8, r24
    363a:	fe 01       	movw	r30, r28
    363c:	32 96       	adiw	r30, 0x02	; 2
    363e:	42 c0       	rjmp	.+132    	; 0x36c4 <malloc+0x124>
    3640:	fe 01       	movw	r30, r28
    3642:	e8 0f       	add	r30, r24
    3644:	f9 1f       	adc	r31, r25
    3646:	41 93       	st	Z+, r20
    3648:	51 93       	st	Z+, r21
    364a:	02 97       	sbiw	r24, 0x02	; 2
    364c:	99 83       	std	Y+1, r25	; 0x01
    364e:	88 83       	st	Y, r24
    3650:	39 c0       	rjmp	.+114    	; 0x36c4 <malloc+0x124>
    3652:	80 91 d6 02 	lds	r24, 0x02D6
    3656:	90 91 d7 02 	lds	r25, 0x02D7
    365a:	00 97       	sbiw	r24, 0x00	; 0
    365c:	41 f4       	brne	.+16     	; 0x366e <malloc+0xce>
    365e:	80 91 76 02 	lds	r24, 0x0276
    3662:	90 91 77 02 	lds	r25, 0x0277
    3666:	90 93 d7 02 	sts	0x02D7, r25
    366a:	80 93 d6 02 	sts	0x02D6, r24
    366e:	20 91 74 02 	lds	r18, 0x0274
    3672:	30 91 75 02 	lds	r19, 0x0275
    3676:	21 15       	cp	r18, r1
    3678:	31 05       	cpc	r19, r1
    367a:	41 f4       	brne	.+16     	; 0x368c <malloc+0xec>
    367c:	2d b7       	in	r18, 0x3d	; 61
    367e:	3e b7       	in	r19, 0x3e	; 62
    3680:	80 91 78 02 	lds	r24, 0x0278
    3684:	90 91 79 02 	lds	r25, 0x0279
    3688:	28 1b       	sub	r18, r24
    368a:	39 0b       	sbc	r19, r25
    368c:	e0 91 d6 02 	lds	r30, 0x02D6
    3690:	f0 91 d7 02 	lds	r31, 0x02D7
    3694:	e2 17       	cp	r30, r18
    3696:	f3 07       	cpc	r31, r19
    3698:	98 f4       	brcc	.+38     	; 0x36c0 <malloc+0x120>
    369a:	2e 1b       	sub	r18, r30
    369c:	3f 0b       	sbc	r19, r31
    369e:	24 17       	cp	r18, r20
    36a0:	35 07       	cpc	r19, r21
    36a2:	70 f0       	brcs	.+28     	; 0x36c0 <malloc+0x120>
    36a4:	ca 01       	movw	r24, r20
    36a6:	02 96       	adiw	r24, 0x02	; 2
    36a8:	28 17       	cp	r18, r24
    36aa:	39 07       	cpc	r19, r25
    36ac:	48 f0       	brcs	.+18     	; 0x36c0 <malloc+0x120>
    36ae:	8e 0f       	add	r24, r30
    36b0:	9f 1f       	adc	r25, r31
    36b2:	90 93 d7 02 	sts	0x02D7, r25
    36b6:	80 93 d6 02 	sts	0x02D6, r24
    36ba:	41 93       	st	Z+, r20
    36bc:	51 93       	st	Z+, r21
    36be:	02 c0       	rjmp	.+4      	; 0x36c4 <malloc+0x124>
    36c0:	e0 e0       	ldi	r30, 0x00	; 0
    36c2:	f0 e0       	ldi	r31, 0x00	; 0
    36c4:	cf 01       	movw	r24, r30
    36c6:	df 91       	pop	r29
    36c8:	cf 91       	pop	r28
    36ca:	08 95       	ret

000036cc <free>:
    36cc:	0f 93       	push	r16
    36ce:	1f 93       	push	r17
    36d0:	cf 93       	push	r28
    36d2:	df 93       	push	r29
    36d4:	9c 01       	movw	r18, r24
    36d6:	00 97       	sbiw	r24, 0x00	; 0
    36d8:	09 f4       	brne	.+2      	; 0x36dc <free+0x10>
    36da:	8c c0       	rjmp	.+280    	; 0x37f4 <free+0x128>
    36dc:	dc 01       	movw	r26, r24
    36de:	12 97       	sbiw	r26, 0x02	; 2
    36e0:	13 96       	adiw	r26, 0x03	; 3
    36e2:	1c 92       	st	X, r1
    36e4:	1e 92       	st	-X, r1
    36e6:	12 97       	sbiw	r26, 0x02	; 2
    36e8:	60 91 d8 02 	lds	r22, 0x02D8
    36ec:	70 91 d9 02 	lds	r23, 0x02D9
    36f0:	61 15       	cp	r22, r1
    36f2:	71 05       	cpc	r23, r1
    36f4:	89 f4       	brne	.+34     	; 0x3718 <free+0x4c>
    36f6:	8d 91       	ld	r24, X+
    36f8:	9c 91       	ld	r25, X
    36fa:	11 97       	sbiw	r26, 0x01	; 1
    36fc:	82 0f       	add	r24, r18
    36fe:	93 1f       	adc	r25, r19
    3700:	20 91 d6 02 	lds	r18, 0x02D6
    3704:	30 91 d7 02 	lds	r19, 0x02D7
    3708:	28 17       	cp	r18, r24
    370a:	39 07       	cpc	r19, r25
    370c:	69 f5       	brne	.+90     	; 0x3768 <free+0x9c>
    370e:	b0 93 d7 02 	sts	0x02D7, r27
    3712:	a0 93 d6 02 	sts	0x02D6, r26
    3716:	6e c0       	rjmp	.+220    	; 0x37f4 <free+0x128>
    3718:	fb 01       	movw	r30, r22
    371a:	40 e0       	ldi	r20, 0x00	; 0
    371c:	50 e0       	ldi	r21, 0x00	; 0
    371e:	01 c0       	rjmp	.+2      	; 0x3722 <free+0x56>
    3720:	fc 01       	movw	r30, r24
    3722:	ea 17       	cp	r30, r26
    3724:	fb 07       	cpc	r31, r27
    3726:	30 f4       	brcc	.+12     	; 0x3734 <free+0x68>
    3728:	82 81       	ldd	r24, Z+2	; 0x02
    372a:	93 81       	ldd	r25, Z+3	; 0x03
    372c:	af 01       	movw	r20, r30
    372e:	00 97       	sbiw	r24, 0x00	; 0
    3730:	b9 f7       	brne	.-18     	; 0x3720 <free+0x54>
    3732:	1f c0       	rjmp	.+62     	; 0x3772 <free+0xa6>
    3734:	e9 01       	movw	r28, r18
    3736:	22 97       	sbiw	r28, 0x02	; 2
    3738:	fb 83       	std	Y+3, r31	; 0x03
    373a:	ea 83       	std	Y+2, r30	; 0x02
    373c:	08 81       	ld	r16, Y
    373e:	19 81       	ldd	r17, Y+1	; 0x01
    3740:	c9 01       	movw	r24, r18
    3742:	80 0f       	add	r24, r16
    3744:	91 1f       	adc	r25, r17
    3746:	8e 17       	cp	r24, r30
    3748:	9f 07       	cpc	r25, r31
    374a:	59 f4       	brne	.+22     	; 0x3762 <free+0x96>
    374c:	80 81       	ld	r24, Z
    374e:	91 81       	ldd	r25, Z+1	; 0x01
    3750:	80 0f       	add	r24, r16
    3752:	91 1f       	adc	r25, r17
    3754:	02 96       	adiw	r24, 0x02	; 2
    3756:	99 83       	std	Y+1, r25	; 0x01
    3758:	88 83       	st	Y, r24
    375a:	82 81       	ldd	r24, Z+2	; 0x02
    375c:	93 81       	ldd	r25, Z+3	; 0x03
    375e:	9b 83       	std	Y+3, r25	; 0x03
    3760:	8a 83       	std	Y+2, r24	; 0x02
    3762:	41 15       	cp	r20, r1
    3764:	51 05       	cpc	r21, r1
    3766:	29 f4       	brne	.+10     	; 0x3772 <free+0xa6>
    3768:	b0 93 d9 02 	sts	0x02D9, r27
    376c:	a0 93 d8 02 	sts	0x02D8, r26
    3770:	41 c0       	rjmp	.+130    	; 0x37f4 <free+0x128>
    3772:	fa 01       	movw	r30, r20
    3774:	b3 83       	std	Z+3, r27	; 0x03
    3776:	a2 83       	std	Z+2, r26	; 0x02
    3778:	c1 91       	ld	r28, Z+
    377a:	d1 91       	ld	r29, Z+
    377c:	ec 0f       	add	r30, r28
    377e:	fd 1f       	adc	r31, r29
    3780:	ae 17       	cp	r26, r30
    3782:	bf 07       	cpc	r27, r31
    3784:	81 f4       	brne	.+32     	; 0x37a6 <free+0xda>
    3786:	f9 01       	movw	r30, r18
    3788:	92 91       	ld	r25, -Z
    378a:	82 91       	ld	r24, -Z
    378c:	8c 0f       	add	r24, r28
    378e:	9d 1f       	adc	r25, r29
    3790:	02 96       	adiw	r24, 0x02	; 2
    3792:	da 01       	movw	r26, r20
    3794:	11 96       	adiw	r26, 0x01	; 1
    3796:	9c 93       	st	X, r25
    3798:	8e 93       	st	-X, r24
    379a:	82 81       	ldd	r24, Z+2	; 0x02
    379c:	93 81       	ldd	r25, Z+3	; 0x03
    379e:	13 96       	adiw	r26, 0x03	; 3
    37a0:	9c 93       	st	X, r25
    37a2:	8e 93       	st	-X, r24
    37a4:	12 97       	sbiw	r26, 0x02	; 2
    37a6:	e0 e0       	ldi	r30, 0x00	; 0
    37a8:	f0 e0       	ldi	r31, 0x00	; 0
    37aa:	02 c0       	rjmp	.+4      	; 0x37b0 <free+0xe4>
    37ac:	fb 01       	movw	r30, r22
    37ae:	bc 01       	movw	r22, r24
    37b0:	db 01       	movw	r26, r22
    37b2:	12 96       	adiw	r26, 0x02	; 2
    37b4:	8d 91       	ld	r24, X+
    37b6:	9c 91       	ld	r25, X
    37b8:	13 97       	sbiw	r26, 0x03	; 3
    37ba:	00 97       	sbiw	r24, 0x00	; 0
    37bc:	b9 f7       	brne	.-18     	; 0x37ac <free+0xe0>
    37be:	cb 01       	movw	r24, r22
    37c0:	02 96       	adiw	r24, 0x02	; 2
    37c2:	2d 91       	ld	r18, X+
    37c4:	3c 91       	ld	r19, X
    37c6:	11 97       	sbiw	r26, 0x01	; 1
    37c8:	82 0f       	add	r24, r18
    37ca:	93 1f       	adc	r25, r19
    37cc:	20 91 d6 02 	lds	r18, 0x02D6
    37d0:	30 91 d7 02 	lds	r19, 0x02D7
    37d4:	28 17       	cp	r18, r24
    37d6:	39 07       	cpc	r19, r25
    37d8:	69 f4       	brne	.+26     	; 0x37f4 <free+0x128>
    37da:	30 97       	sbiw	r30, 0x00	; 0
    37dc:	29 f4       	brne	.+10     	; 0x37e8 <free+0x11c>
    37de:	10 92 d9 02 	sts	0x02D9, r1
    37e2:	10 92 d8 02 	sts	0x02D8, r1
    37e6:	02 c0       	rjmp	.+4      	; 0x37ec <free+0x120>
    37e8:	13 82       	std	Z+3, r1	; 0x03
    37ea:	12 82       	std	Z+2, r1	; 0x02
    37ec:	70 93 d7 02 	sts	0x02D7, r23
    37f0:	60 93 d6 02 	sts	0x02D6, r22
    37f4:	df 91       	pop	r29
    37f6:	cf 91       	pop	r28
    37f8:	1f 91       	pop	r17
    37fa:	0f 91       	pop	r16
    37fc:	08 95       	ret

000037fe <sprintf>:
    37fe:	0f 93       	push	r16
    3800:	1f 93       	push	r17
    3802:	cf 93       	push	r28
    3804:	df 93       	push	r29
    3806:	cd b7       	in	r28, 0x3d	; 61
    3808:	de b7       	in	r29, 0x3e	; 62
    380a:	2e 97       	sbiw	r28, 0x0e	; 14
    380c:	0f b6       	in	r0, 0x3f	; 63
    380e:	f8 94       	cli
    3810:	de bf       	out	0x3e, r29	; 62
    3812:	0f be       	out	0x3f, r0	; 63
    3814:	cd bf       	out	0x3d, r28	; 61
    3816:	0d 89       	ldd	r16, Y+21	; 0x15
    3818:	1e 89       	ldd	r17, Y+22	; 0x16
    381a:	86 e0       	ldi	r24, 0x06	; 6
    381c:	8c 83       	std	Y+4, r24	; 0x04
    381e:	1a 83       	std	Y+2, r17	; 0x02
    3820:	09 83       	std	Y+1, r16	; 0x01
    3822:	8f ef       	ldi	r24, 0xFF	; 255
    3824:	9f e7       	ldi	r25, 0x7F	; 127
    3826:	9e 83       	std	Y+6, r25	; 0x06
    3828:	8d 83       	std	Y+5, r24	; 0x05
    382a:	ae 01       	movw	r20, r28
    382c:	47 5e       	subi	r20, 0xE7	; 231
    382e:	5f 4f       	sbci	r21, 0xFF	; 255
    3830:	ce 01       	movw	r24, r28
    3832:	01 96       	adiw	r24, 0x01	; 1
    3834:	6f 89       	ldd	r22, Y+23	; 0x17
    3836:	78 8d       	ldd	r23, Y+24	; 0x18
    3838:	0e 94 2e 1c 	call	0x385c	; 0x385c <vfprintf>
    383c:	ef 81       	ldd	r30, Y+7	; 0x07
    383e:	f8 85       	ldd	r31, Y+8	; 0x08
    3840:	e0 0f       	add	r30, r16
    3842:	f1 1f       	adc	r31, r17
    3844:	10 82       	st	Z, r1
    3846:	2e 96       	adiw	r28, 0x0e	; 14
    3848:	0f b6       	in	r0, 0x3f	; 63
    384a:	f8 94       	cli
    384c:	de bf       	out	0x3e, r29	; 62
    384e:	0f be       	out	0x3f, r0	; 63
    3850:	cd bf       	out	0x3d, r28	; 61
    3852:	df 91       	pop	r29
    3854:	cf 91       	pop	r28
    3856:	1f 91       	pop	r17
    3858:	0f 91       	pop	r16
    385a:	08 95       	ret

0000385c <vfprintf>:
    385c:	2f 92       	push	r2
    385e:	3f 92       	push	r3
    3860:	4f 92       	push	r4
    3862:	5f 92       	push	r5
    3864:	6f 92       	push	r6
    3866:	7f 92       	push	r7
    3868:	8f 92       	push	r8
    386a:	9f 92       	push	r9
    386c:	af 92       	push	r10
    386e:	bf 92       	push	r11
    3870:	cf 92       	push	r12
    3872:	df 92       	push	r13
    3874:	ef 92       	push	r14
    3876:	ff 92       	push	r15
    3878:	0f 93       	push	r16
    387a:	1f 93       	push	r17
    387c:	cf 93       	push	r28
    387e:	df 93       	push	r29
    3880:	cd b7       	in	r28, 0x3d	; 61
    3882:	de b7       	in	r29, 0x3e	; 62
    3884:	2d 97       	sbiw	r28, 0x0d	; 13
    3886:	0f b6       	in	r0, 0x3f	; 63
    3888:	f8 94       	cli
    388a:	de bf       	out	0x3e, r29	; 62
    388c:	0f be       	out	0x3f, r0	; 63
    388e:	cd bf       	out	0x3d, r28	; 61
    3890:	3c 01       	movw	r6, r24
    3892:	7d 87       	std	Y+13, r23	; 0x0d
    3894:	6c 87       	std	Y+12, r22	; 0x0c
    3896:	5a 01       	movw	r10, r20
    3898:	fc 01       	movw	r30, r24
    389a:	17 82       	std	Z+7, r1	; 0x07
    389c:	16 82       	std	Z+6, r1	; 0x06
    389e:	83 81       	ldd	r24, Z+3	; 0x03
    38a0:	81 ff       	sbrs	r24, 1
    38a2:	c8 c1       	rjmp	.+912    	; 0x3c34 <vfprintf+0x3d8>
    38a4:	2e 01       	movw	r4, r28
    38a6:	08 94       	sec
    38a8:	41 1c       	adc	r4, r1
    38aa:	51 1c       	adc	r5, r1
    38ac:	f3 01       	movw	r30, r6
    38ae:	93 81       	ldd	r25, Z+3	; 0x03
    38b0:	ec 85       	ldd	r30, Y+12	; 0x0c
    38b2:	fd 85       	ldd	r31, Y+13	; 0x0d
    38b4:	93 fd       	sbrc	r25, 3
    38b6:	85 91       	lpm	r24, Z+
    38b8:	93 ff       	sbrs	r25, 3
    38ba:	81 91       	ld	r24, Z+
    38bc:	fd 87       	std	Y+13, r31	; 0x0d
    38be:	ec 87       	std	Y+12, r30	; 0x0c
    38c0:	88 23       	and	r24, r24
    38c2:	09 f4       	brne	.+2      	; 0x38c6 <vfprintf+0x6a>
    38c4:	b3 c1       	rjmp	.+870    	; 0x3c2c <vfprintf+0x3d0>
    38c6:	85 32       	cpi	r24, 0x25	; 37
    38c8:	41 f4       	brne	.+16     	; 0x38da <vfprintf+0x7e>
    38ca:	93 fd       	sbrc	r25, 3
    38cc:	85 91       	lpm	r24, Z+
    38ce:	93 ff       	sbrs	r25, 3
    38d0:	81 91       	ld	r24, Z+
    38d2:	fd 87       	std	Y+13, r31	; 0x0d
    38d4:	ec 87       	std	Y+12, r30	; 0x0c
    38d6:	85 32       	cpi	r24, 0x25	; 37
    38d8:	29 f4       	brne	.+10     	; 0x38e4 <vfprintf+0x88>
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	b3 01       	movw	r22, r6
    38de:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <fputc>
    38e2:	e4 cf       	rjmp	.-56     	; 0x38ac <vfprintf+0x50>
    38e4:	ff 24       	eor	r15, r15
    38e6:	ee 24       	eor	r14, r14
    38e8:	10 e0       	ldi	r17, 0x00	; 0
    38ea:	10 32       	cpi	r17, 0x20	; 32
    38ec:	b0 f4       	brcc	.+44     	; 0x391a <vfprintf+0xbe>
    38ee:	8b 32       	cpi	r24, 0x2B	; 43
    38f0:	69 f0       	breq	.+26     	; 0x390c <vfprintf+0xb0>
    38f2:	8c 32       	cpi	r24, 0x2C	; 44
    38f4:	28 f4       	brcc	.+10     	; 0x3900 <vfprintf+0xa4>
    38f6:	80 32       	cpi	r24, 0x20	; 32
    38f8:	51 f0       	breq	.+20     	; 0x390e <vfprintf+0xb2>
    38fa:	83 32       	cpi	r24, 0x23	; 35
    38fc:	71 f4       	brne	.+28     	; 0x391a <vfprintf+0xbe>
    38fe:	0b c0       	rjmp	.+22     	; 0x3916 <vfprintf+0xba>
    3900:	8d 32       	cpi	r24, 0x2D	; 45
    3902:	39 f0       	breq	.+14     	; 0x3912 <vfprintf+0xb6>
    3904:	80 33       	cpi	r24, 0x30	; 48
    3906:	49 f4       	brne	.+18     	; 0x391a <vfprintf+0xbe>
    3908:	11 60       	ori	r17, 0x01	; 1
    390a:	2c c0       	rjmp	.+88     	; 0x3964 <vfprintf+0x108>
    390c:	12 60       	ori	r17, 0x02	; 2
    390e:	14 60       	ori	r17, 0x04	; 4
    3910:	29 c0       	rjmp	.+82     	; 0x3964 <vfprintf+0x108>
    3912:	18 60       	ori	r17, 0x08	; 8
    3914:	27 c0       	rjmp	.+78     	; 0x3964 <vfprintf+0x108>
    3916:	10 61       	ori	r17, 0x10	; 16
    3918:	25 c0       	rjmp	.+74     	; 0x3964 <vfprintf+0x108>
    391a:	17 fd       	sbrc	r17, 7
    391c:	2e c0       	rjmp	.+92     	; 0x397a <vfprintf+0x11e>
    391e:	28 2f       	mov	r18, r24
    3920:	20 53       	subi	r18, 0x30	; 48
    3922:	2a 30       	cpi	r18, 0x0A	; 10
    3924:	98 f4       	brcc	.+38     	; 0x394c <vfprintf+0xf0>
    3926:	16 ff       	sbrs	r17, 6
    3928:	08 c0       	rjmp	.+16     	; 0x393a <vfprintf+0xde>
    392a:	8f 2d       	mov	r24, r15
    392c:	88 0f       	add	r24, r24
    392e:	f8 2e       	mov	r15, r24
    3930:	ff 0c       	add	r15, r15
    3932:	ff 0c       	add	r15, r15
    3934:	f8 0e       	add	r15, r24
    3936:	f2 0e       	add	r15, r18
    3938:	15 c0       	rjmp	.+42     	; 0x3964 <vfprintf+0x108>
    393a:	8e 2d       	mov	r24, r14
    393c:	88 0f       	add	r24, r24
    393e:	e8 2e       	mov	r14, r24
    3940:	ee 0c       	add	r14, r14
    3942:	ee 0c       	add	r14, r14
    3944:	e8 0e       	add	r14, r24
    3946:	e2 0e       	add	r14, r18
    3948:	10 62       	ori	r17, 0x20	; 32
    394a:	0c c0       	rjmp	.+24     	; 0x3964 <vfprintf+0x108>
    394c:	8e 32       	cpi	r24, 0x2E	; 46
    394e:	21 f4       	brne	.+8      	; 0x3958 <vfprintf+0xfc>
    3950:	16 fd       	sbrc	r17, 6
    3952:	6c c1       	rjmp	.+728    	; 0x3c2c <vfprintf+0x3d0>
    3954:	10 64       	ori	r17, 0x40	; 64
    3956:	06 c0       	rjmp	.+12     	; 0x3964 <vfprintf+0x108>
    3958:	8c 36       	cpi	r24, 0x6C	; 108
    395a:	11 f4       	brne	.+4      	; 0x3960 <vfprintf+0x104>
    395c:	10 68       	ori	r17, 0x80	; 128
    395e:	02 c0       	rjmp	.+4      	; 0x3964 <vfprintf+0x108>
    3960:	88 36       	cpi	r24, 0x68	; 104
    3962:	59 f4       	brne	.+22     	; 0x397a <vfprintf+0x11e>
    3964:	ec 85       	ldd	r30, Y+12	; 0x0c
    3966:	fd 85       	ldd	r31, Y+13	; 0x0d
    3968:	93 fd       	sbrc	r25, 3
    396a:	85 91       	lpm	r24, Z+
    396c:	93 ff       	sbrs	r25, 3
    396e:	81 91       	ld	r24, Z+
    3970:	fd 87       	std	Y+13, r31	; 0x0d
    3972:	ec 87       	std	Y+12, r30	; 0x0c
    3974:	88 23       	and	r24, r24
    3976:	09 f0       	breq	.+2      	; 0x397a <vfprintf+0x11e>
    3978:	b8 cf       	rjmp	.-144    	; 0x38ea <vfprintf+0x8e>
    397a:	98 2f       	mov	r25, r24
    397c:	95 54       	subi	r25, 0x45	; 69
    397e:	93 30       	cpi	r25, 0x03	; 3
    3980:	18 f0       	brcs	.+6      	; 0x3988 <vfprintf+0x12c>
    3982:	90 52       	subi	r25, 0x20	; 32
    3984:	93 30       	cpi	r25, 0x03	; 3
    3986:	38 f4       	brcc	.+14     	; 0x3996 <vfprintf+0x13a>
    3988:	24 e0       	ldi	r18, 0x04	; 4
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	a2 0e       	add	r10, r18
    398e:	b3 1e       	adc	r11, r19
    3990:	3f e3       	ldi	r19, 0x3F	; 63
    3992:	39 83       	std	Y+1, r19	; 0x01
    3994:	0f c0       	rjmp	.+30     	; 0x39b4 <vfprintf+0x158>
    3996:	83 36       	cpi	r24, 0x63	; 99
    3998:	31 f0       	breq	.+12     	; 0x39a6 <vfprintf+0x14a>
    399a:	83 37       	cpi	r24, 0x73	; 115
    399c:	81 f0       	breq	.+32     	; 0x39be <vfprintf+0x162>
    399e:	83 35       	cpi	r24, 0x53	; 83
    39a0:	09 f0       	breq	.+2      	; 0x39a4 <vfprintf+0x148>
    39a2:	5a c0       	rjmp	.+180    	; 0x3a58 <vfprintf+0x1fc>
    39a4:	22 c0       	rjmp	.+68     	; 0x39ea <vfprintf+0x18e>
    39a6:	f5 01       	movw	r30, r10
    39a8:	80 81       	ld	r24, Z
    39aa:	89 83       	std	Y+1, r24	; 0x01
    39ac:	22 e0       	ldi	r18, 0x02	; 2
    39ae:	30 e0       	ldi	r19, 0x00	; 0
    39b0:	a2 0e       	add	r10, r18
    39b2:	b3 1e       	adc	r11, r19
    39b4:	21 e0       	ldi	r18, 0x01	; 1
    39b6:	c2 2e       	mov	r12, r18
    39b8:	d1 2c       	mov	r13, r1
    39ba:	42 01       	movw	r8, r4
    39bc:	14 c0       	rjmp	.+40     	; 0x39e6 <vfprintf+0x18a>
    39be:	92 e0       	ldi	r25, 0x02	; 2
    39c0:	29 2e       	mov	r2, r25
    39c2:	31 2c       	mov	r3, r1
    39c4:	2a 0c       	add	r2, r10
    39c6:	3b 1c       	adc	r3, r11
    39c8:	f5 01       	movw	r30, r10
    39ca:	80 80       	ld	r8, Z
    39cc:	91 80       	ldd	r9, Z+1	; 0x01
    39ce:	16 ff       	sbrs	r17, 6
    39d0:	03 c0       	rjmp	.+6      	; 0x39d8 <vfprintf+0x17c>
    39d2:	6f 2d       	mov	r22, r15
    39d4:	70 e0       	ldi	r23, 0x00	; 0
    39d6:	02 c0       	rjmp	.+4      	; 0x39dc <vfprintf+0x180>
    39d8:	6f ef       	ldi	r22, 0xFF	; 255
    39da:	7f ef       	ldi	r23, 0xFF	; 255
    39dc:	c4 01       	movw	r24, r8
    39de:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <strnlen>
    39e2:	6c 01       	movw	r12, r24
    39e4:	51 01       	movw	r10, r2
    39e6:	1f 77       	andi	r17, 0x7F	; 127
    39e8:	15 c0       	rjmp	.+42     	; 0x3a14 <vfprintf+0x1b8>
    39ea:	82 e0       	ldi	r24, 0x02	; 2
    39ec:	28 2e       	mov	r2, r24
    39ee:	31 2c       	mov	r3, r1
    39f0:	2a 0c       	add	r2, r10
    39f2:	3b 1c       	adc	r3, r11
    39f4:	f5 01       	movw	r30, r10
    39f6:	80 80       	ld	r8, Z
    39f8:	91 80       	ldd	r9, Z+1	; 0x01
    39fa:	16 ff       	sbrs	r17, 6
    39fc:	03 c0       	rjmp	.+6      	; 0x3a04 <vfprintf+0x1a8>
    39fe:	6f 2d       	mov	r22, r15
    3a00:	70 e0       	ldi	r23, 0x00	; 0
    3a02:	02 c0       	rjmp	.+4      	; 0x3a08 <vfprintf+0x1ac>
    3a04:	6f ef       	ldi	r22, 0xFF	; 255
    3a06:	7f ef       	ldi	r23, 0xFF	; 255
    3a08:	c4 01       	movw	r24, r8
    3a0a:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <strnlen_P>
    3a0e:	6c 01       	movw	r12, r24
    3a10:	10 68       	ori	r17, 0x80	; 128
    3a12:	51 01       	movw	r10, r2
    3a14:	13 fd       	sbrc	r17, 3
    3a16:	1c c0       	rjmp	.+56     	; 0x3a50 <vfprintf+0x1f4>
    3a18:	06 c0       	rjmp	.+12     	; 0x3a26 <vfprintf+0x1ca>
    3a1a:	80 e2       	ldi	r24, 0x20	; 32
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	b3 01       	movw	r22, r6
    3a20:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <fputc>
    3a24:	ea 94       	dec	r14
    3a26:	8e 2d       	mov	r24, r14
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	c8 16       	cp	r12, r24
    3a2c:	d9 06       	cpc	r13, r25
    3a2e:	a8 f3       	brcs	.-22     	; 0x3a1a <vfprintf+0x1be>
    3a30:	0f c0       	rjmp	.+30     	; 0x3a50 <vfprintf+0x1f4>
    3a32:	f4 01       	movw	r30, r8
    3a34:	17 fd       	sbrc	r17, 7
    3a36:	85 91       	lpm	r24, Z+
    3a38:	17 ff       	sbrs	r17, 7
    3a3a:	81 91       	ld	r24, Z+
    3a3c:	4f 01       	movw	r8, r30
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	b3 01       	movw	r22, r6
    3a42:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <fputc>
    3a46:	e1 10       	cpse	r14, r1
    3a48:	ea 94       	dec	r14
    3a4a:	08 94       	sec
    3a4c:	c1 08       	sbc	r12, r1
    3a4e:	d1 08       	sbc	r13, r1
    3a50:	c1 14       	cp	r12, r1
    3a52:	d1 04       	cpc	r13, r1
    3a54:	71 f7       	brne	.-36     	; 0x3a32 <vfprintf+0x1d6>
    3a56:	e7 c0       	rjmp	.+462    	; 0x3c26 <vfprintf+0x3ca>
    3a58:	84 36       	cpi	r24, 0x64	; 100
    3a5a:	11 f0       	breq	.+4      	; 0x3a60 <vfprintf+0x204>
    3a5c:	89 36       	cpi	r24, 0x69	; 105
    3a5e:	51 f5       	brne	.+84     	; 0x3ab4 <vfprintf+0x258>
    3a60:	f5 01       	movw	r30, r10
    3a62:	17 ff       	sbrs	r17, 7
    3a64:	07 c0       	rjmp	.+14     	; 0x3a74 <vfprintf+0x218>
    3a66:	80 81       	ld	r24, Z
    3a68:	91 81       	ldd	r25, Z+1	; 0x01
    3a6a:	a2 81       	ldd	r26, Z+2	; 0x02
    3a6c:	b3 81       	ldd	r27, Z+3	; 0x03
    3a6e:	24 e0       	ldi	r18, 0x04	; 4
    3a70:	30 e0       	ldi	r19, 0x00	; 0
    3a72:	08 c0       	rjmp	.+16     	; 0x3a84 <vfprintf+0x228>
    3a74:	80 81       	ld	r24, Z
    3a76:	91 81       	ldd	r25, Z+1	; 0x01
    3a78:	aa 27       	eor	r26, r26
    3a7a:	97 fd       	sbrc	r25, 7
    3a7c:	a0 95       	com	r26
    3a7e:	ba 2f       	mov	r27, r26
    3a80:	22 e0       	ldi	r18, 0x02	; 2
    3a82:	30 e0       	ldi	r19, 0x00	; 0
    3a84:	a2 0e       	add	r10, r18
    3a86:	b3 1e       	adc	r11, r19
    3a88:	01 2f       	mov	r16, r17
    3a8a:	0f 76       	andi	r16, 0x6F	; 111
    3a8c:	b7 ff       	sbrs	r27, 7
    3a8e:	08 c0       	rjmp	.+16     	; 0x3aa0 <vfprintf+0x244>
    3a90:	b0 95       	com	r27
    3a92:	a0 95       	com	r26
    3a94:	90 95       	com	r25
    3a96:	81 95       	neg	r24
    3a98:	9f 4f       	sbci	r25, 0xFF	; 255
    3a9a:	af 4f       	sbci	r26, 0xFF	; 255
    3a9c:	bf 4f       	sbci	r27, 0xFF	; 255
    3a9e:	00 68       	ori	r16, 0x80	; 128
    3aa0:	bc 01       	movw	r22, r24
    3aa2:	cd 01       	movw	r24, r26
    3aa4:	a2 01       	movw	r20, r4
    3aa6:	2a e0       	ldi	r18, 0x0A	; 10
    3aa8:	30 e0       	ldi	r19, 0x00	; 0
    3aaa:	0e 94 77 1e 	call	0x3cee	; 0x3cee <__ultoa_invert>
    3aae:	d8 2e       	mov	r13, r24
    3ab0:	d4 18       	sub	r13, r4
    3ab2:	3f c0       	rjmp	.+126    	; 0x3b32 <vfprintf+0x2d6>
    3ab4:	85 37       	cpi	r24, 0x75	; 117
    3ab6:	21 f4       	brne	.+8      	; 0x3ac0 <vfprintf+0x264>
    3ab8:	1f 7e       	andi	r17, 0xEF	; 239
    3aba:	2a e0       	ldi	r18, 0x0A	; 10
    3abc:	30 e0       	ldi	r19, 0x00	; 0
    3abe:	20 c0       	rjmp	.+64     	; 0x3b00 <vfprintf+0x2a4>
    3ac0:	19 7f       	andi	r17, 0xF9	; 249
    3ac2:	8f 36       	cpi	r24, 0x6F	; 111
    3ac4:	a9 f0       	breq	.+42     	; 0x3af0 <vfprintf+0x294>
    3ac6:	80 37       	cpi	r24, 0x70	; 112
    3ac8:	20 f4       	brcc	.+8      	; 0x3ad2 <vfprintf+0x276>
    3aca:	88 35       	cpi	r24, 0x58	; 88
    3acc:	09 f0       	breq	.+2      	; 0x3ad0 <vfprintf+0x274>
    3ace:	ae c0       	rjmp	.+348    	; 0x3c2c <vfprintf+0x3d0>
    3ad0:	0b c0       	rjmp	.+22     	; 0x3ae8 <vfprintf+0x28c>
    3ad2:	80 37       	cpi	r24, 0x70	; 112
    3ad4:	21 f0       	breq	.+8      	; 0x3ade <vfprintf+0x282>
    3ad6:	88 37       	cpi	r24, 0x78	; 120
    3ad8:	09 f0       	breq	.+2      	; 0x3adc <vfprintf+0x280>
    3ada:	a8 c0       	rjmp	.+336    	; 0x3c2c <vfprintf+0x3d0>
    3adc:	01 c0       	rjmp	.+2      	; 0x3ae0 <vfprintf+0x284>
    3ade:	10 61       	ori	r17, 0x10	; 16
    3ae0:	14 ff       	sbrs	r17, 4
    3ae2:	09 c0       	rjmp	.+18     	; 0x3af6 <vfprintf+0x29a>
    3ae4:	14 60       	ori	r17, 0x04	; 4
    3ae6:	07 c0       	rjmp	.+14     	; 0x3af6 <vfprintf+0x29a>
    3ae8:	14 ff       	sbrs	r17, 4
    3aea:	08 c0       	rjmp	.+16     	; 0x3afc <vfprintf+0x2a0>
    3aec:	16 60       	ori	r17, 0x06	; 6
    3aee:	06 c0       	rjmp	.+12     	; 0x3afc <vfprintf+0x2a0>
    3af0:	28 e0       	ldi	r18, 0x08	; 8
    3af2:	30 e0       	ldi	r19, 0x00	; 0
    3af4:	05 c0       	rjmp	.+10     	; 0x3b00 <vfprintf+0x2a4>
    3af6:	20 e1       	ldi	r18, 0x10	; 16
    3af8:	30 e0       	ldi	r19, 0x00	; 0
    3afa:	02 c0       	rjmp	.+4      	; 0x3b00 <vfprintf+0x2a4>
    3afc:	20 e1       	ldi	r18, 0x10	; 16
    3afe:	32 e0       	ldi	r19, 0x02	; 2
    3b00:	f5 01       	movw	r30, r10
    3b02:	17 ff       	sbrs	r17, 7
    3b04:	07 c0       	rjmp	.+14     	; 0x3b14 <vfprintf+0x2b8>
    3b06:	60 81       	ld	r22, Z
    3b08:	71 81       	ldd	r23, Z+1	; 0x01
    3b0a:	82 81       	ldd	r24, Z+2	; 0x02
    3b0c:	93 81       	ldd	r25, Z+3	; 0x03
    3b0e:	44 e0       	ldi	r20, 0x04	; 4
    3b10:	50 e0       	ldi	r21, 0x00	; 0
    3b12:	06 c0       	rjmp	.+12     	; 0x3b20 <vfprintf+0x2c4>
    3b14:	60 81       	ld	r22, Z
    3b16:	71 81       	ldd	r23, Z+1	; 0x01
    3b18:	80 e0       	ldi	r24, 0x00	; 0
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	42 e0       	ldi	r20, 0x02	; 2
    3b1e:	50 e0       	ldi	r21, 0x00	; 0
    3b20:	a4 0e       	add	r10, r20
    3b22:	b5 1e       	adc	r11, r21
    3b24:	a2 01       	movw	r20, r4
    3b26:	0e 94 77 1e 	call	0x3cee	; 0x3cee <__ultoa_invert>
    3b2a:	d8 2e       	mov	r13, r24
    3b2c:	d4 18       	sub	r13, r4
    3b2e:	01 2f       	mov	r16, r17
    3b30:	0f 77       	andi	r16, 0x7F	; 127
    3b32:	06 ff       	sbrs	r16, 6
    3b34:	09 c0       	rjmp	.+18     	; 0x3b48 <vfprintf+0x2ec>
    3b36:	0e 7f       	andi	r16, 0xFE	; 254
    3b38:	df 14       	cp	r13, r15
    3b3a:	30 f4       	brcc	.+12     	; 0x3b48 <vfprintf+0x2ec>
    3b3c:	04 ff       	sbrs	r16, 4
    3b3e:	06 c0       	rjmp	.+12     	; 0x3b4c <vfprintf+0x2f0>
    3b40:	02 fd       	sbrc	r16, 2
    3b42:	04 c0       	rjmp	.+8      	; 0x3b4c <vfprintf+0x2f0>
    3b44:	0f 7e       	andi	r16, 0xEF	; 239
    3b46:	02 c0       	rjmp	.+4      	; 0x3b4c <vfprintf+0x2f0>
    3b48:	1d 2d       	mov	r17, r13
    3b4a:	01 c0       	rjmp	.+2      	; 0x3b4e <vfprintf+0x2f2>
    3b4c:	1f 2d       	mov	r17, r15
    3b4e:	80 2f       	mov	r24, r16
    3b50:	90 e0       	ldi	r25, 0x00	; 0
    3b52:	04 ff       	sbrs	r16, 4
    3b54:	0c c0       	rjmp	.+24     	; 0x3b6e <vfprintf+0x312>
    3b56:	fe 01       	movw	r30, r28
    3b58:	ed 0d       	add	r30, r13
    3b5a:	f1 1d       	adc	r31, r1
    3b5c:	20 81       	ld	r18, Z
    3b5e:	20 33       	cpi	r18, 0x30	; 48
    3b60:	11 f4       	brne	.+4      	; 0x3b66 <vfprintf+0x30a>
    3b62:	09 7e       	andi	r16, 0xE9	; 233
    3b64:	09 c0       	rjmp	.+18     	; 0x3b78 <vfprintf+0x31c>
    3b66:	02 ff       	sbrs	r16, 2
    3b68:	06 c0       	rjmp	.+12     	; 0x3b76 <vfprintf+0x31a>
    3b6a:	1e 5f       	subi	r17, 0xFE	; 254
    3b6c:	05 c0       	rjmp	.+10     	; 0x3b78 <vfprintf+0x31c>
    3b6e:	86 78       	andi	r24, 0x86	; 134
    3b70:	90 70       	andi	r25, 0x00	; 0
    3b72:	00 97       	sbiw	r24, 0x00	; 0
    3b74:	09 f0       	breq	.+2      	; 0x3b78 <vfprintf+0x31c>
    3b76:	1f 5f       	subi	r17, 0xFF	; 255
    3b78:	80 2e       	mov	r8, r16
    3b7a:	99 24       	eor	r9, r9
    3b7c:	03 fd       	sbrc	r16, 3
    3b7e:	12 c0       	rjmp	.+36     	; 0x3ba4 <vfprintf+0x348>
    3b80:	00 ff       	sbrs	r16, 0
    3b82:	0d c0       	rjmp	.+26     	; 0x3b9e <vfprintf+0x342>
    3b84:	fd 2c       	mov	r15, r13
    3b86:	1e 15       	cp	r17, r14
    3b88:	50 f4       	brcc	.+20     	; 0x3b9e <vfprintf+0x342>
    3b8a:	fe 0c       	add	r15, r14
    3b8c:	f1 1a       	sub	r15, r17
    3b8e:	1e 2d       	mov	r17, r14
    3b90:	06 c0       	rjmp	.+12     	; 0x3b9e <vfprintf+0x342>
    3b92:	80 e2       	ldi	r24, 0x20	; 32
    3b94:	90 e0       	ldi	r25, 0x00	; 0
    3b96:	b3 01       	movw	r22, r6
    3b98:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <fputc>
    3b9c:	1f 5f       	subi	r17, 0xFF	; 255
    3b9e:	1e 15       	cp	r17, r14
    3ba0:	c0 f3       	brcs	.-16     	; 0x3b92 <vfprintf+0x336>
    3ba2:	04 c0       	rjmp	.+8      	; 0x3bac <vfprintf+0x350>
    3ba4:	1e 15       	cp	r17, r14
    3ba6:	10 f4       	brcc	.+4      	; 0x3bac <vfprintf+0x350>
    3ba8:	e1 1a       	sub	r14, r17
    3baa:	01 c0       	rjmp	.+2      	; 0x3bae <vfprintf+0x352>
    3bac:	ee 24       	eor	r14, r14
    3bae:	84 fe       	sbrs	r8, 4
    3bb0:	0f c0       	rjmp	.+30     	; 0x3bd0 <vfprintf+0x374>
    3bb2:	80 e3       	ldi	r24, 0x30	; 48
    3bb4:	90 e0       	ldi	r25, 0x00	; 0
    3bb6:	b3 01       	movw	r22, r6
    3bb8:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <fputc>
    3bbc:	82 fe       	sbrs	r8, 2
    3bbe:	1f c0       	rjmp	.+62     	; 0x3bfe <vfprintf+0x3a2>
    3bc0:	81 fe       	sbrs	r8, 1
    3bc2:	03 c0       	rjmp	.+6      	; 0x3bca <vfprintf+0x36e>
    3bc4:	88 e5       	ldi	r24, 0x58	; 88
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	10 c0       	rjmp	.+32     	; 0x3bea <vfprintf+0x38e>
    3bca:	88 e7       	ldi	r24, 0x78	; 120
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	0d c0       	rjmp	.+26     	; 0x3bea <vfprintf+0x38e>
    3bd0:	c4 01       	movw	r24, r8
    3bd2:	86 78       	andi	r24, 0x86	; 134
    3bd4:	90 70       	andi	r25, 0x00	; 0
    3bd6:	00 97       	sbiw	r24, 0x00	; 0
    3bd8:	91 f0       	breq	.+36     	; 0x3bfe <vfprintf+0x3a2>
    3bda:	81 fc       	sbrc	r8, 1
    3bdc:	02 c0       	rjmp	.+4      	; 0x3be2 <vfprintf+0x386>
    3bde:	80 e2       	ldi	r24, 0x20	; 32
    3be0:	01 c0       	rjmp	.+2      	; 0x3be4 <vfprintf+0x388>
    3be2:	8b e2       	ldi	r24, 0x2B	; 43
    3be4:	07 fd       	sbrc	r16, 7
    3be6:	8d e2       	ldi	r24, 0x2D	; 45
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	b3 01       	movw	r22, r6
    3bec:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <fputc>
    3bf0:	06 c0       	rjmp	.+12     	; 0x3bfe <vfprintf+0x3a2>
    3bf2:	80 e3       	ldi	r24, 0x30	; 48
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	b3 01       	movw	r22, r6
    3bf8:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <fputc>
    3bfc:	fa 94       	dec	r15
    3bfe:	df 14       	cp	r13, r15
    3c00:	c0 f3       	brcs	.-16     	; 0x3bf2 <vfprintf+0x396>
    3c02:	da 94       	dec	r13
    3c04:	f2 01       	movw	r30, r4
    3c06:	ed 0d       	add	r30, r13
    3c08:	f1 1d       	adc	r31, r1
    3c0a:	80 81       	ld	r24, Z
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	b3 01       	movw	r22, r6
    3c10:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <fputc>
    3c14:	dd 20       	and	r13, r13
    3c16:	a9 f7       	brne	.-22     	; 0x3c02 <vfprintf+0x3a6>
    3c18:	06 c0       	rjmp	.+12     	; 0x3c26 <vfprintf+0x3ca>
    3c1a:	80 e2       	ldi	r24, 0x20	; 32
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	b3 01       	movw	r22, r6
    3c20:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <fputc>
    3c24:	ea 94       	dec	r14
    3c26:	ee 20       	and	r14, r14
    3c28:	c1 f7       	brne	.-16     	; 0x3c1a <vfprintf+0x3be>
    3c2a:	40 ce       	rjmp	.-896    	; 0x38ac <vfprintf+0x50>
    3c2c:	f3 01       	movw	r30, r6
    3c2e:	86 81       	ldd	r24, Z+6	; 0x06
    3c30:	97 81       	ldd	r25, Z+7	; 0x07
    3c32:	02 c0       	rjmp	.+4      	; 0x3c38 <vfprintf+0x3dc>
    3c34:	8f ef       	ldi	r24, 0xFF	; 255
    3c36:	9f ef       	ldi	r25, 0xFF	; 255
    3c38:	2d 96       	adiw	r28, 0x0d	; 13
    3c3a:	0f b6       	in	r0, 0x3f	; 63
    3c3c:	f8 94       	cli
    3c3e:	de bf       	out	0x3e, r29	; 62
    3c40:	0f be       	out	0x3f, r0	; 63
    3c42:	cd bf       	out	0x3d, r28	; 61
    3c44:	df 91       	pop	r29
    3c46:	cf 91       	pop	r28
    3c48:	1f 91       	pop	r17
    3c4a:	0f 91       	pop	r16
    3c4c:	ff 90       	pop	r15
    3c4e:	ef 90       	pop	r14
    3c50:	df 90       	pop	r13
    3c52:	cf 90       	pop	r12
    3c54:	bf 90       	pop	r11
    3c56:	af 90       	pop	r10
    3c58:	9f 90       	pop	r9
    3c5a:	8f 90       	pop	r8
    3c5c:	7f 90       	pop	r7
    3c5e:	6f 90       	pop	r6
    3c60:	5f 90       	pop	r5
    3c62:	4f 90       	pop	r4
    3c64:	3f 90       	pop	r3
    3c66:	2f 90       	pop	r2
    3c68:	08 95       	ret

00003c6a <strnlen_P>:
    3c6a:	fc 01       	movw	r30, r24
    3c6c:	05 90       	lpm	r0, Z+
    3c6e:	61 50       	subi	r22, 0x01	; 1
    3c70:	70 40       	sbci	r23, 0x00	; 0
    3c72:	01 10       	cpse	r0, r1
    3c74:	d8 f7       	brcc	.-10     	; 0x3c6c <strnlen_P+0x2>
    3c76:	80 95       	com	r24
    3c78:	90 95       	com	r25
    3c7a:	8e 0f       	add	r24, r30
    3c7c:	9f 1f       	adc	r25, r31
    3c7e:	08 95       	ret

00003c80 <strnlen>:
    3c80:	fc 01       	movw	r30, r24
    3c82:	61 50       	subi	r22, 0x01	; 1
    3c84:	70 40       	sbci	r23, 0x00	; 0
    3c86:	01 90       	ld	r0, Z+
    3c88:	01 10       	cpse	r0, r1
    3c8a:	d8 f7       	brcc	.-10     	; 0x3c82 <strnlen+0x2>
    3c8c:	80 95       	com	r24
    3c8e:	90 95       	com	r25
    3c90:	8e 0f       	add	r24, r30
    3c92:	9f 1f       	adc	r25, r31
    3c94:	08 95       	ret

00003c96 <fputc>:
    3c96:	0f 93       	push	r16
    3c98:	1f 93       	push	r17
    3c9a:	cf 93       	push	r28
    3c9c:	df 93       	push	r29
    3c9e:	8c 01       	movw	r16, r24
    3ca0:	eb 01       	movw	r28, r22
    3ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca4:	81 ff       	sbrs	r24, 1
    3ca6:	1b c0       	rjmp	.+54     	; 0x3cde <fputc+0x48>
    3ca8:	82 ff       	sbrs	r24, 2
    3caa:	0d c0       	rjmp	.+26     	; 0x3cc6 <fputc+0x30>
    3cac:	2e 81       	ldd	r18, Y+6	; 0x06
    3cae:	3f 81       	ldd	r19, Y+7	; 0x07
    3cb0:	8c 81       	ldd	r24, Y+4	; 0x04
    3cb2:	9d 81       	ldd	r25, Y+5	; 0x05
    3cb4:	28 17       	cp	r18, r24
    3cb6:	39 07       	cpc	r19, r25
    3cb8:	64 f4       	brge	.+24     	; 0x3cd2 <fputc+0x3c>
    3cba:	e8 81       	ld	r30, Y
    3cbc:	f9 81       	ldd	r31, Y+1	; 0x01
    3cbe:	01 93       	st	Z+, r16
    3cc0:	f9 83       	std	Y+1, r31	; 0x01
    3cc2:	e8 83       	st	Y, r30
    3cc4:	06 c0       	rjmp	.+12     	; 0x3cd2 <fputc+0x3c>
    3cc6:	e8 85       	ldd	r30, Y+8	; 0x08
    3cc8:	f9 85       	ldd	r31, Y+9	; 0x09
    3cca:	80 2f       	mov	r24, r16
    3ccc:	09 95       	icall
    3cce:	00 97       	sbiw	r24, 0x00	; 0
    3cd0:	31 f4       	brne	.+12     	; 0x3cde <fputc+0x48>
    3cd2:	8e 81       	ldd	r24, Y+6	; 0x06
    3cd4:	9f 81       	ldd	r25, Y+7	; 0x07
    3cd6:	01 96       	adiw	r24, 0x01	; 1
    3cd8:	9f 83       	std	Y+7, r25	; 0x07
    3cda:	8e 83       	std	Y+6, r24	; 0x06
    3cdc:	02 c0       	rjmp	.+4      	; 0x3ce2 <fputc+0x4c>
    3cde:	0f ef       	ldi	r16, 0xFF	; 255
    3ce0:	1f ef       	ldi	r17, 0xFF	; 255
    3ce2:	c8 01       	movw	r24, r16
    3ce4:	df 91       	pop	r29
    3ce6:	cf 91       	pop	r28
    3ce8:	1f 91       	pop	r17
    3cea:	0f 91       	pop	r16
    3cec:	08 95       	ret

00003cee <__ultoa_invert>:
    3cee:	fa 01       	movw	r30, r20
    3cf0:	aa 27       	eor	r26, r26
    3cf2:	28 30       	cpi	r18, 0x08	; 8
    3cf4:	51 f1       	breq	.+84     	; 0x3d4a <__ultoa_invert+0x5c>
    3cf6:	20 31       	cpi	r18, 0x10	; 16
    3cf8:	81 f1       	breq	.+96     	; 0x3d5a <__ultoa_invert+0x6c>
    3cfa:	e8 94       	clt
    3cfc:	6f 93       	push	r22
    3cfe:	6e 7f       	andi	r22, 0xFE	; 254
    3d00:	6e 5f       	subi	r22, 0xFE	; 254
    3d02:	7f 4f       	sbci	r23, 0xFF	; 255
    3d04:	8f 4f       	sbci	r24, 0xFF	; 255
    3d06:	9f 4f       	sbci	r25, 0xFF	; 255
    3d08:	af 4f       	sbci	r26, 0xFF	; 255
    3d0a:	b1 e0       	ldi	r27, 0x01	; 1
    3d0c:	3e d0       	rcall	.+124    	; 0x3d8a <__ultoa_invert+0x9c>
    3d0e:	b4 e0       	ldi	r27, 0x04	; 4
    3d10:	3c d0       	rcall	.+120    	; 0x3d8a <__ultoa_invert+0x9c>
    3d12:	67 0f       	add	r22, r23
    3d14:	78 1f       	adc	r23, r24
    3d16:	89 1f       	adc	r24, r25
    3d18:	9a 1f       	adc	r25, r26
    3d1a:	a1 1d       	adc	r26, r1
    3d1c:	68 0f       	add	r22, r24
    3d1e:	79 1f       	adc	r23, r25
    3d20:	8a 1f       	adc	r24, r26
    3d22:	91 1d       	adc	r25, r1
    3d24:	a1 1d       	adc	r26, r1
    3d26:	6a 0f       	add	r22, r26
    3d28:	71 1d       	adc	r23, r1
    3d2a:	81 1d       	adc	r24, r1
    3d2c:	91 1d       	adc	r25, r1
    3d2e:	a1 1d       	adc	r26, r1
    3d30:	20 d0       	rcall	.+64     	; 0x3d72 <__ultoa_invert+0x84>
    3d32:	09 f4       	brne	.+2      	; 0x3d36 <__ultoa_invert+0x48>
    3d34:	68 94       	set
    3d36:	3f 91       	pop	r19
    3d38:	2a e0       	ldi	r18, 0x0A	; 10
    3d3a:	26 9f       	mul	r18, r22
    3d3c:	11 24       	eor	r1, r1
    3d3e:	30 19       	sub	r19, r0
    3d40:	30 5d       	subi	r19, 0xD0	; 208
    3d42:	31 93       	st	Z+, r19
    3d44:	de f6       	brtc	.-74     	; 0x3cfc <__ultoa_invert+0xe>
    3d46:	cf 01       	movw	r24, r30
    3d48:	08 95       	ret
    3d4a:	46 2f       	mov	r20, r22
    3d4c:	47 70       	andi	r20, 0x07	; 7
    3d4e:	40 5d       	subi	r20, 0xD0	; 208
    3d50:	41 93       	st	Z+, r20
    3d52:	b3 e0       	ldi	r27, 0x03	; 3
    3d54:	0f d0       	rcall	.+30     	; 0x3d74 <__ultoa_invert+0x86>
    3d56:	c9 f7       	brne	.-14     	; 0x3d4a <__ultoa_invert+0x5c>
    3d58:	f6 cf       	rjmp	.-20     	; 0x3d46 <__ultoa_invert+0x58>
    3d5a:	46 2f       	mov	r20, r22
    3d5c:	4f 70       	andi	r20, 0x0F	; 15
    3d5e:	40 5d       	subi	r20, 0xD0	; 208
    3d60:	4a 33       	cpi	r20, 0x3A	; 58
    3d62:	18 f0       	brcs	.+6      	; 0x3d6a <__ultoa_invert+0x7c>
    3d64:	49 5d       	subi	r20, 0xD9	; 217
    3d66:	31 fd       	sbrc	r19, 1
    3d68:	40 52       	subi	r20, 0x20	; 32
    3d6a:	41 93       	st	Z+, r20
    3d6c:	02 d0       	rcall	.+4      	; 0x3d72 <__ultoa_invert+0x84>
    3d6e:	a9 f7       	brne	.-22     	; 0x3d5a <__ultoa_invert+0x6c>
    3d70:	ea cf       	rjmp	.-44     	; 0x3d46 <__ultoa_invert+0x58>
    3d72:	b4 e0       	ldi	r27, 0x04	; 4
    3d74:	a6 95       	lsr	r26
    3d76:	97 95       	ror	r25
    3d78:	87 95       	ror	r24
    3d7a:	77 95       	ror	r23
    3d7c:	67 95       	ror	r22
    3d7e:	ba 95       	dec	r27
    3d80:	c9 f7       	brne	.-14     	; 0x3d74 <__ultoa_invert+0x86>
    3d82:	00 97       	sbiw	r24, 0x00	; 0
    3d84:	61 05       	cpc	r22, r1
    3d86:	71 05       	cpc	r23, r1
    3d88:	08 95       	ret
    3d8a:	9b 01       	movw	r18, r22
    3d8c:	ac 01       	movw	r20, r24
    3d8e:	0a 2e       	mov	r0, r26
    3d90:	06 94       	lsr	r0
    3d92:	57 95       	ror	r21
    3d94:	47 95       	ror	r20
    3d96:	37 95       	ror	r19
    3d98:	27 95       	ror	r18
    3d9a:	ba 95       	dec	r27
    3d9c:	c9 f7       	brne	.-14     	; 0x3d90 <__ultoa_invert+0xa2>
    3d9e:	62 0f       	add	r22, r18
    3da0:	73 1f       	adc	r23, r19
    3da2:	84 1f       	adc	r24, r20
    3da4:	95 1f       	adc	r25, r21
    3da6:	a0 1d       	adc	r26, r0
    3da8:	08 95       	ret

00003daa <_exit>:
    3daa:	f8 94       	cli

00003dac <__stop_program>:
    3dac:	ff cf       	rjmp	.-2      	; 0x3dac <__stop_program>
