
SMO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000198  00800100  000042d6  0000436a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000042d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  00800298  00800298  00004502  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00004504  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  00005188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000248  00000000  00000000  00005340  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f1d  00000000  00000000  00005588  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fe6  00000000  00000000  000094a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001afe  00000000  00000000  0000a48b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ad4  00000000  00000000  0000bf8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002126  00000000  00000000  0000ca60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002877  00000000  00000000  0000eb86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000113fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bb 00 	jmp	0x176	; 0x176 <__ctors_end>
       4:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
       8:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
       c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      10:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      14:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      18:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      1c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      20:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      24:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      28:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      2c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      30:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      34:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      38:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      3c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      40:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__vector_16>
      44:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      48:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      4c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      50:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      54:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      58:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      5c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      60:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      64:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      68:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      6c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      70:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      74:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      78:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      7c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      80:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      84:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      88:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      8c:	3e 08       	sbc	r3, r14
      8e:	22 09       	sbc	r18, r2
      90:	45 08       	sbc	r4, r5
      92:	4c 08       	sbc	r4, r12
      94:	53 08       	sbc	r5, r3
      96:	5a 08       	sbc	r5, r10
      98:	61 08       	sbc	r6, r1
      9a:	68 08       	sbc	r6, r8
      9c:	22 09       	sbc	r18, r2
      9e:	6f 08       	sbc	r6, r15
      a0:	76 08       	sbc	r7, r6
      a2:	7d 08       	sbc	r7, r13
      a4:	84 08       	sbc	r8, r4
      a6:	8b 08       	sbc	r8, r11
      a8:	92 08       	sbc	r9, r2
      aa:	99 08       	sbc	r9, r9
      ac:	22 09       	sbc	r18, r2
      ae:	a0 08       	sbc	r10, r0
      b0:	a7 08       	sbc	r10, r7
      b2:	ae 08       	sbc	r10, r14
      b4:	b5 08       	sbc	r11, r5
      b6:	c0 08       	sbc	r12, r0
      b8:	c7 08       	sbc	r12, r7
      ba:	ce 08       	sbc	r12, r14
      bc:	d5 08       	sbc	r13, r5
      be:	22 09       	sbc	r18, r2
      c0:	dc 08       	sbc	r13, r12
      c2:	e3 08       	sbc	r14, r3
      c4:	ee 08       	sbc	r14, r14
      c6:	f5 08       	sbc	r15, r5
      c8:	22 09       	sbc	r18, r2
      ca:	fc 08       	sbc	r15, r12
      cc:	03 09       	sbc	r16, r3
      ce:	0a 09       	sbc	r16, r10
      d0:	11 09       	sbc	r17, r1
      d2:	1c 09       	sbc	r17, r12
      d4:	6f 09       	sbc	r22, r15
      d6:	bf 19       	sub	r27, r15
      d8:	a6 09       	sbc	r26, r6
      da:	d5 09       	sbc	r29, r5
      dc:	02 0a       	sbc	r0, r18
      de:	bf 19       	sub	r27, r15
      e0:	0c 0a       	sbc	r0, r28
      e2:	b0 0a       	sbc	r11, r16
      e4:	54 0b       	sbc	r21, r20
      e6:	ec 0c       	add	r14, r12
      e8:	d0 0d       	add	r29, r0
      ea:	74 0e       	add	r7, r20
      ec:	04 10       	cpse	r0, r4
      ee:	e8 10       	cpse	r14, r8
      f0:	8c 11       	cpse	r24, r12
      f2:	26 12       	cpse	r2, r22
      f4:	c8 12       	cpse	r12, r24
      f6:	78 13       	cpse	r23, r24
      f8:	b6 14       	cp	r11, r6
      fa:	db 14       	cp	r13, r11
      fc:	bf 19       	sub	r27, r15
      fe:	29 15       	cp	r18, r9
     100:	4c 15       	cp	r20, r12
     102:	6f 15       	cp	r22, r15
     104:	92 15       	cp	r25, r2
     106:	b5 15       	cp	r27, r5
     108:	d8 15       	cp	r29, r8
     10a:	fd 15       	cp	r31, r13
     10c:	1a 16       	cp	r1, r26
     10e:	bf 19       	sub	r27, r15
     110:	37 16       	cp	r3, r23
     112:	90 16       	cp	r9, r16
     114:	f8 16       	cp	r15, r24
     116:	82 17       	cp	r24, r18
     118:	bf 19       	sub	r27, r15
     11a:	d3 17       	cp	r29, r19
     11c:	3e 18       	sub	r3, r14
     11e:	b0 18       	sub	r11, r0
     120:	01 19       	sub	r16, r1
     122:	6b 19       	sub	r22, r11
     124:	09 1a       	sub	r0, r25
     126:	10 1a       	sub	r1, r16
     128:	17 1a       	sub	r1, r23
     12a:	1f 1a       	sub	r1, r31
     12c:	26 1a       	sub	r2, r22
     12e:	2d 1a       	sub	r2, r29
     130:	36 1a       	sub	r3, r22
     132:	40 1a       	sub	r4, r16
     134:	49 1a       	sub	r4, r25
     136:	52 1a       	sub	r5, r18
     138:	5b 1a       	sub	r5, r27
     13a:	64 1a       	sub	r6, r20
     13c:	6d 1a       	sub	r6, r29
     13e:	76 1a       	sub	r7, r22
     140:	7f 1a       	sub	r7, r31
     142:	88 1a       	sub	r8, r24
     144:	91 1a       	sub	r9, r17
     146:	9a 1a       	sub	r9, r26
     148:	a3 1a       	sub	r10, r19
     14a:	ac 1a       	sub	r10, r28
     14c:	b5 1a       	sub	r11, r21
     14e:	be 1a       	sub	r11, r30
     150:	c8 1a       	sub	r12, r24
     152:	d1 1a       	sub	r13, r17
     154:	da 1a       	sub	r13, r26
     156:	e3 1a       	sub	r14, r19
     158:	ec 1a       	sub	r14, r28
     15a:	f5 1a       	sub	r15, r21
     15c:	fe 1a       	sub	r15, r30
     15e:	07 1b       	sub	r16, r23
     160:	10 1b       	sub	r17, r16
     162:	1a 1b       	sub	r17, r26
     164:	23 1b       	sub	r18, r19
     166:	2c 1b       	sub	r18, r28
     168:	34 1b       	sub	r19, r20
     16a:	3c 1b       	sub	r19, r28
     16c:	45 1b       	sub	r20, r21
     16e:	4d 1b       	sub	r20, r29
     170:	55 1b       	sub	r21, r21
     172:	5d 1b       	sub	r21, r29
     174:	65 1b       	sub	r22, r21

00000176 <__ctors_end>:
     176:	11 24       	eor	r1, r1
     178:	1f be       	out	0x3f, r1	; 63
     17a:	cf ef       	ldi	r28, 0xFF	; 255
     17c:	d0 e1       	ldi	r29, 0x10	; 16
     17e:	de bf       	out	0x3e, r29	; 62
     180:	cd bf       	out	0x3d, r28	; 61

00000182 <__do_copy_data>:
     182:	12 e0       	ldi	r17, 0x02	; 2
     184:	a0 e0       	ldi	r26, 0x00	; 0
     186:	b1 e0       	ldi	r27, 0x01	; 1
     188:	e6 ed       	ldi	r30, 0xD6	; 214
     18a:	f2 e4       	ldi	r31, 0x42	; 66
     18c:	00 e0       	ldi	r16, 0x00	; 0
     18e:	0b bf       	out	0x3b, r16	; 59
     190:	02 c0       	rjmp	.+4      	; 0x196 <__do_copy_data+0x14>
     192:	07 90       	elpm	r0, Z+
     194:	0d 92       	st	X+, r0
     196:	a8 39       	cpi	r26, 0x98	; 152
     198:	b1 07       	cpc	r27, r17
     19a:	d9 f7       	brne	.-10     	; 0x192 <__do_copy_data+0x10>

0000019c <__do_clear_bss>:
     19c:	13 e0       	ldi	r17, 0x03	; 3
     19e:	a8 e9       	ldi	r26, 0x98	; 152
     1a0:	b2 e0       	ldi	r27, 0x02	; 2
     1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <.do_clear_bss_start>

000001a4 <.do_clear_bss_loop>:
     1a4:	1d 92       	st	X+, r1

000001a6 <.do_clear_bss_start>:
     1a6:	a6 30       	cpi	r26, 0x06	; 6
     1a8:	b1 07       	cpc	r27, r17
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <.do_clear_bss_loop>
     1ac:	0e 94 d5 03 	call	0x7aa	; 0x7aa <main>
     1b0:	0c 94 69 21 	jmp	0x42d2	; 0x42d2 <_exit>

000001b4 <__bad_interrupt>:
     1b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b8 <KEYPAD_Check>:
uint8_t ascii_code[4][4]={16,15,14,13,
						  12,9,6,3,
						  10,8,5,2,
						  11,7,4,1};

uint8_t KEYPAD_Check() {
     1b8:	af 92       	push	r10
     1ba:	bf 92       	push	r11
     1bc:	cf 92       	push	r12
     1be:	df 92       	push	r13
     1c0:	ef 92       	push	r14
     1c2:	ff 92       	push	r15
     1c4:	0f 93       	push	r16
     1c6:	1f 93       	push	r17
     1c8:	cf 93       	push	r28
     1ca:	df 93       	push	r29
     1cc:	20 e0       	ldi	r18, 0x00	; 0
     1ce:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     1d0:	41 e0       	ldi	r20, 0x01	; 1
     1d2:	50 e0       	ldi	r21, 0x00	; 0
     1d4:	e2 e6       	ldi	r30, 0x62	; 98
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
		_delay_us(10);
		keyin=KEYPAD_PIN & 0x0F;
		if (keyin!=0x0F)
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
     1d8:	a0 e1       	ldi	r26, 0x10	; 16
     1da:	b1 e0       	ldi	r27, 0x01	; 1
     1dc:	0f 2e       	mov	r0, r31
     1de:	f1 e1       	ldi	r31, 0x11	; 17
     1e0:	af 2e       	mov	r10, r31
     1e2:	f1 e0       	ldi	r31, 0x01	; 1
     1e4:	bf 2e       	mov	r11, r31
     1e6:	f0 2d       	mov	r31, r0
     1e8:	02 e1       	ldi	r16, 0x12	; 18
     1ea:	11 e0       	ldi	r17, 0x01	; 1
     1ec:	0f 2e       	mov	r0, r31
     1ee:	f3 e1       	ldi	r31, 0x13	; 19
     1f0:	ef 2e       	mov	r14, r31
     1f2:	f1 e0       	ldi	r31, 0x01	; 1
     1f4:	ff 2e       	mov	r15, r31
     1f6:	f0 2d       	mov	r31, r0
						  11,7,4,1};

uint8_t KEYPAD_Check() {
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     1f8:	b9 01       	movw	r22, r18
uint8_t ascii_code[4][4]={16,15,14,13,
						  12,9,6,3,
						  10,8,5,2,
						  11,7,4,1};

uint8_t KEYPAD_Check() {
     1fa:	c9 01       	movw	r24, r18
     1fc:	04 96       	adiw	r24, 0x04	; 4
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     1fe:	6a 01       	movw	r12, r20
     200:	02 c0       	rjmp	.+4      	; 0x206 <KEYPAD_Check+0x4e>
     202:	cc 0c       	add	r12, r12
     204:	dd 1c       	adc	r13, r13
     206:	8a 95       	dec	r24
     208:	e2 f7       	brpl	.-8      	; 0x202 <KEYPAD_Check+0x4a>
     20a:	c6 01       	movw	r24, r12
     20c:	80 95       	com	r24
     20e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     210:	83 e0       	ldi	r24, 0x03	; 3
     212:	8a 95       	dec	r24
     214:	f1 f7       	brne	.-4      	; 0x212 <KEYPAD_Check+0x5a>
     216:	00 00       	nop
		_delay_us(10);
		keyin=KEYPAD_PIN & 0x0F;
     218:	80 b1       	in	r24, 0x00	; 0
     21a:	8f 70       	andi	r24, 0x0F	; 15
		if (keyin!=0x0F)
     21c:	8f 30       	cpi	r24, 0x0F	; 15
     21e:	29 f1       	breq	.+74     	; 0x26a <KEYPAD_Check+0xb2>
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
     220:	9c 91       	ld	r25, X
     222:	98 17       	cp	r25, r24
     224:	a9 f0       	breq	.+42     	; 0x250 <KEYPAD_Check+0x98>
     226:	e5 01       	movw	r28, r10
     228:	98 81       	ld	r25, Y
     22a:	98 17       	cp	r25, r24
     22c:	59 f0       	breq	.+22     	; 0x244 <KEYPAD_Check+0x8c>
     22e:	e8 01       	movw	r28, r16
     230:	98 81       	ld	r25, Y
     232:	98 17       	cp	r25, r24
     234:	51 f0       	breq	.+20     	; 0x24a <KEYPAD_Check+0x92>
     236:	e7 01       	movw	r28, r14
     238:	98 81       	ld	r25, Y
     23a:	98 17       	cp	r25, r24
     23c:	b1 f4       	brne	.+44     	; 0x26a <KEYPAD_Check+0xb2>
     23e:	e3 e0       	ldi	r30, 0x03	; 3
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	08 c0       	rjmp	.+16     	; 0x254 <KEYPAD_Check+0x9c>
     244:	e1 e0       	ldi	r30, 0x01	; 1
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	05 c0       	rjmp	.+10     	; 0x254 <KEYPAD_Check+0x9c>
     24a:	e2 e0       	ldi	r30, 0x02	; 2
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	02 c0       	rjmp	.+4      	; 0x254 <KEYPAD_Check+0x9c>
     250:	e0 e0       	ldi	r30, 0x00	; 0
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	ee 0f       	add	r30, r30
     256:	ff 1f       	adc	r31, r31
     258:	ee 0f       	add	r30, r30
     25a:	ff 1f       	adc	r31, r31
     25c:	6e 0f       	add	r22, r30
     25e:	7f 1f       	adc	r23, r31
     260:	fb 01       	movw	r30, r22
     262:	e0 50       	subi	r30, 0x00	; 0
     264:	ff 4f       	sbci	r31, 0xFF	; 255
     266:	80 81       	ld	r24, Z
     268:	06 c0       	rjmp	.+12     	; 0x276 <KEYPAD_Check+0xbe>
     26a:	2f 5f       	subi	r18, 0xFF	; 255
     26c:	3f 4f       	sbci	r19, 0xFF	; 255
						  10,8,5,2,
						  11,7,4,1};

uint8_t KEYPAD_Check() {
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
     26e:	24 30       	cpi	r18, 0x04	; 4
     270:	31 05       	cpc	r19, r1
     272:	11 f6       	brne	.-124    	; 0x1f8 <KEYPAD_Check+0x40>
		keyin=KEYPAD_PIN & 0x0F;
		if (keyin!=0x0F)
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
	}
	return 0;
     274:	80 e0       	ldi	r24, 0x00	; 0
}
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	1f 91       	pop	r17
     27c:	0f 91       	pop	r16
     27e:	ff 90       	pop	r15
     280:	ef 90       	pop	r14
     282:	df 90       	pop	r13
     284:	cf 90       	pop	r12
     286:	bf 90       	pop	r11
     288:	af 90       	pop	r10
     28a:	08 95       	ret

0000028c <KEYPAD_Init>:

void KEYPAD_Init()
{
	//Khai bao huong cho cac chan ket noi keypad
	KEYPAD_DDR=0xF0;
     28c:	80 ef       	ldi	r24, 0xF0	; 240
     28e:	80 93 61 00 	sts	0x0061, r24
	KEYPAD_PORT=0x0F;
     292:	8f e0       	ldi	r24, 0x0F	; 15
     294:	80 93 62 00 	sts	0x0062, r24
     298:	08 95       	ret

0000029a <LCDBusyLoop>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     29a:	8f ec       	ldi	r24, 0xCF	; 207
     29c:	97 e0       	ldi	r25, 0x07	; 7
     29e:	01 97       	sbiw	r24, 0x01	; 1
     2a0:	f1 f7       	brne	.-4      	; 0x29e <LCDBusyLoop+0x4>
     2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <LCDBusyLoop+0xa>
     2a4:	00 00       	nop
}

void LCDBusyLoop()
{
	_delay_ms(8);
}
     2a6:	08 95       	ret

000002a8 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
     2a8:	28 2f       	mov	r18, r24
     2aa:	22 95       	swap	r18
     2ac:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
     2ae:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
     2b0:	66 23       	and	r22, r22
     2b2:	11 f4       	brne	.+4      	; 0x2b8 <LCDByte+0x10>
CLEAR_RS();
     2b4:	d8 98       	cbi	0x1b, 0	; 27
     2b6:	01 c0       	rjmp	.+2      	; 0x2ba <LCDByte+0x12>
else
SET_RS();
     2b8:	d8 9a       	sbi	0x1b, 0	; 27

//_delay_ms(0.500);		//tAS

SET_E();
     2ba:	d9 9a       	sbi	0x1b, 1	; 27

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
     2bc:	9b b3       	in	r25, 0x1b	; 27
     2be:	22 0f       	add	r18, r18
     2c0:	22 0f       	add	r18, r18
     2c2:	93 7c       	andi	r25, 0xC3	; 195
     2c4:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
     2c6:	9b bb       	out	0x1b, r25	; 27

//_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
     2c8:	d9 98       	cbi	0x1b, 1	; 27

//_delay_us(1);

//Send the lower nibble
SET_E();
     2ca:	d9 9a       	sbi	0x1b, 1	; 27

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
     2cc:	9b b3       	in	r25, 0x1b	; 27
     2ce:	88 0f       	add	r24, r24
     2d0:	88 0f       	add	r24, r24
     2d2:	93 7c       	andi	r25, 0xC3	; 195
     2d4:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     2d6:	8b bb       	out	0x1b, r24	; 27

//_delay_us(1);			//tEH

//SEND

CLEAR_E();
     2d8:	d9 98       	cbi	0x1b, 1	; 27

//_delay_us(1);			//tEL

LCDBusyLoop();
     2da:	0e 94 4d 01 	call	0x29a	; 0x29a <LCDBusyLoop>
}
     2de:	08 95       	ret

000002e0 <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
     2e0:	0f 93       	push	r16
     2e2:	1f 93       	push	r17
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	8c 01       	movw	r16, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     2ea:	fc 01       	movw	r30, r24
     2ec:	80 81       	ld	r24, Z
     2ee:	88 23       	and	r24, r24
     2f0:	09 f1       	breq	.+66     	; 0x334 <LCDWriteString+0x54>
 {
 	//Custom Char Support
	if(*msg=='%')
     2f2:	85 32       	cpi	r24, 0x25	; 37
     2f4:	a9 f4       	brne	.+42     	; 0x320 <LCDWriteString+0x40>
	{
		msg++;
     2f6:	e8 01       	movw	r28, r16
     2f8:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
     2fa:	f8 01       	movw	r30, r16
     2fc:	81 81       	ldd	r24, Z+1	; 0x01
     2fe:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
     300:	88 30       	cpi	r24, 0x08	; 8
     302:	20 f4       	brcc	.+8      	; 0x30c <LCDWriteString+0x2c>
		{
			LCDData(cc);
     304:	61 e0       	ldi	r22, 0x01	; 1
     306:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCDByte>
     30a:	0e c0       	rjmp	.+28     	; 0x328 <LCDWriteString+0x48>
		}
		else
		{
			LCDData('%');
     30c:	85 e2       	ldi	r24, 0x25	; 37
     30e:	61 e0       	ldi	r22, 0x01	; 1
     310:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCDByte>
			LCDData(*msg);
     314:	f8 01       	movw	r30, r16
     316:	81 81       	ldd	r24, Z+1	; 0x01
     318:	61 e0       	ldi	r22, 0x01	; 1
     31a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCDByte>
     31e:	04 c0       	rjmp	.+8      	; 0x328 <LCDWriteString+0x48>
		}
	}
	else
	{
		LCDData(*msg);
     320:	61 e0       	ldi	r22, 0x01	; 1
     322:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCDByte>
     326:	e8 01       	movw	r28, r16
	}
	msg++;
     328:	8e 01       	movw	r16, r28
     32a:	0f 5f       	subi	r16, 0xFF	; 255
     32c:	1f 4f       	sbci	r17, 0xFF	; 255
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	88 23       	and	r24, r24
     332:	f9 f6       	brne	.-66     	; 0x2f2 <LCDWriteString+0x12>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	1f 91       	pop	r17
     33a:	0f 91       	pop	r16
     33c:	08 95       	ret

0000033e <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     33e:	ef 92       	push	r14
     340:	ff 92       	push	r15
     342:	0f 93       	push	r16
     344:	1f 93       	push	r17
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	00 d0       	rcall	.+0      	; 0x34c <LCDWriteInt+0xe>
     34c:	00 d0       	rcall	.+0      	; 0x34e <LCDWriteInt+0x10>
     34e:	0f 92       	push	r0
     350:	cd b7       	in	r28, 0x3d	; 61
     352:	de b7       	in	r29, 0x3e	; 62
     354:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     356:	fe 01       	movw	r30, r28
     358:	31 96       	adiw	r30, 0x01	; 1
     35a:	25 e0       	ldi	r18, 0x05	; 5
     35c:	df 01       	movw	r26, r30
     35e:	1d 92       	st	X+, r1
     360:	2a 95       	dec	r18
     362:	e9 f7       	brne	.-6      	; 0x35e <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
     364:	00 97       	sbiw	r24, 0x00	; 0
     366:	61 f0       	breq	.+24     	; 0x380 <LCDWriteInt+0x42>
     368:	fe 01       	movw	r30, r28
     36a:	36 96       	adiw	r30, 0x06	; 6
	{
	str[i]=val%10;
     36c:	2a e0       	ldi	r18, 0x0A	; 10
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	b9 01       	movw	r22, r18
     372:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <__divmodhi4>
     376:	82 93       	st	-Z, r24
	val=val/10;
     378:	86 2f       	mov	r24, r22
     37a:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     37c:	00 97       	sbiw	r24, 0x00	; 0
     37e:	c1 f7       	brne	.-16     	; 0x370 <LCDWriteInt+0x32>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     380:	bf ef       	ldi	r27, 0xFF	; 255
     382:	eb 16       	cp	r14, r27
     384:	bf ef       	ldi	r27, 0xFF	; 255
     386:	fb 06       	cpc	r15, r27
     388:	69 f4       	brne	.+26     	; 0x3a4 <LCDWriteInt+0x66>
		while(str[j]==0) j++;
     38a:	29 81       	ldd	r18, Y+1	; 0x01
     38c:	22 23       	and	r18, r18
     38e:	79 f4       	brne	.+30     	; 0x3ae <LCDWriteInt+0x70>
     390:	fe 01       	movw	r30, r28
     392:	32 96       	adiw	r30, 0x02	; 2
     394:	00 e0       	ldi	r16, 0x00	; 0
     396:	10 e0       	ldi	r17, 0x00	; 0
     398:	0f 5f       	subi	r16, 0xFF	; 255
     39a:	1f 4f       	sbci	r17, 0xFF	; 255
     39c:	21 91       	ld	r18, Z+
     39e:	22 23       	and	r18, r18
     3a0:	d9 f3       	breq	.-10     	; 0x398 <LCDWriteInt+0x5a>
     3a2:	07 c0       	rjmp	.+14     	; 0x3b2 <LCDWriteInt+0x74>
	else
		j=5-field_length;
     3a4:	05 e0       	ldi	r16, 0x05	; 5
     3a6:	10 e0       	ldi	r17, 0x00	; 0
     3a8:	0e 19       	sub	r16, r14
     3aa:	1f 09       	sbc	r17, r15
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <LCDWriteInt+0x74>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
     3ae:	00 e0       	ldi	r16, 0x00	; 0
     3b0:	10 e0       	ldi	r17, 0x00	; 0
	else
		j=5-field_length;

	if(val<0) LCDData('-');
     3b2:	99 23       	and	r25, r25
     3b4:	24 f4       	brge	.+8      	; 0x3be <LCDWriteInt+0x80>
     3b6:	8d e2       	ldi	r24, 0x2D	; 45
     3b8:	61 e0       	ldi	r22, 0x01	; 1
     3ba:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCDByte>
	for(i=j;i<5;i++)
     3be:	05 30       	cpi	r16, 0x05	; 5
     3c0:	11 05       	cpc	r17, r1
     3c2:	bc f4       	brge	.+46     	; 0x3f2 <LCDWriteInt+0xb4>
	}
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
     3c4:	e1 e0       	ldi	r30, 0x01	; 1
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	ec 0f       	add	r30, r28
     3ca:	fd 1f       	adc	r31, r29
     3cc:	0e 0f       	add	r16, r30
     3ce:	1f 1f       	adc	r17, r31
     3d0:	0f 2e       	mov	r0, r31
     3d2:	f6 e0       	ldi	r31, 0x06	; 6
     3d4:	ef 2e       	mov	r14, r31
     3d6:	ff 24       	eor	r15, r15
     3d8:	f0 2d       	mov	r31, r0
     3da:	ec 0e       	add	r14, r28
     3dc:	fd 1e       	adc	r15, r29
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     3de:	d8 01       	movw	r26, r16
     3e0:	8d 91       	ld	r24, X+
     3e2:	8d 01       	movw	r16, r26
     3e4:	80 5d       	subi	r24, 0xD0	; 208
     3e6:	61 e0       	ldi	r22, 0x01	; 1
     3e8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     3ec:	0e 15       	cp	r16, r14
     3ee:	1f 05       	cpc	r17, r15
     3f0:	b1 f7       	brne	.-20     	; 0x3de <LCDWriteInt+0xa0>
	{
	LCDData(48+str[i]);
	}
}
     3f2:	0f 90       	pop	r0
     3f4:	0f 90       	pop	r0
     3f6:	0f 90       	pop	r0
     3f8:	0f 90       	pop	r0
     3fa:	0f 90       	pop	r0
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	1f 91       	pop	r17
     402:	0f 91       	pop	r16
     404:	ff 90       	pop	r15
     406:	ef 90       	pop	r14
     408:	08 95       	ret

0000040a <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
     40a:	84 31       	cpi	r24, 0x14	; 20
     40c:	78 f4       	brcc	.+30     	; 0x42c <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
     40e:	62 30       	cpi	r22, 0x02	; 2
     410:	31 f0       	breq	.+12     	; 0x41e <LCDGotoXY+0x14>
     412:	63 30       	cpi	r22, 0x03	; 3
     414:	31 f0       	breq	.+12     	; 0x422 <LCDGotoXY+0x18>
     416:	61 30       	cpi	r22, 0x01	; 1
     418:	29 f4       	brne	.+10     	; 0x424 <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
     41a:	80 64       	ori	r24, 0x40	; 64
			break;
     41c:	03 c0       	rjmp	.+6      	; 0x424 <LCDGotoXY+0x1a>
		case 2:
			x+=0x14;
     41e:	8c 5e       	subi	r24, 0xEC	; 236
			break;
     420:	01 c0       	rjmp	.+2      	; 0x424 <LCDGotoXY+0x1a>
		case 3:
			x+=0x54;
     422:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
     424:	80 68       	ori	r24, 0x80	; 128
     426:	60 e0       	ldi	r22, 0x00	; 0
     428:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCDByte>
     42c:	08 95       	ret

0000042e <LCDInit>:
{
	_delay_ms(8);
}

void LCDInit(uint8_t style)
{
     42e:	0f 93       	push	r16
     430:	1f 93       	push	r17
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	c8 2f       	mov	r28, r24
     438:	8b e4       	ldi	r24, 0x4B	; 75
     43a:	9d e1       	ldi	r25, 0x1D	; 29
     43c:	01 97       	sbiw	r24, 0x01	; 1
     43e:	f1 f7       	brne	.-4      	; 0x43c <LCDInit+0xe>
     440:	00 c0       	rjmp	.+0      	; 0x442 <LCDInit+0x14>
     442:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
     444:	8a b3       	in	r24, 0x1a	; 26
     446:	8c 63       	ori	r24, 0x3C	; 60
     448:	8a bb       	out	0x1a, r24	; 26
	LCD_E_DDR|=(1<<LCD_E_POS);
     44a:	d1 9a       	sbi	0x1a, 1	; 26
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     44c:	d0 9a       	sbi	0x1a, 0	; 26

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
     44e:	8b b3       	in	r24, 0x1b	; 27
     450:	83 7c       	andi	r24, 0xC3	; 195
     452:	8b bb       	out	0x1b, r24	; 27
	CLEAR_E();
     454:	d9 98       	cbi	0x1b, 1	; 27
	CLEAR_RS();
     456:	d8 98       	cbi	0x1b, 0	; 27

	//Set 4-bit mode
	//_delay_us(0.3);	//tAS

	SET_E();
     458:	d9 9a       	sbi	0x1b, 1	; 27
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     45a:	db 9a       	sbi	0x1b, 3	; 27
	//_delay_us(1);
	CLEAR_E();
     45c:	d9 98       	cbi	0x1b, 1	; 27
	//_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     45e:	0e 94 4d 01 	call	0x29a	; 0x29a <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     462:	8c 2f       	mov	r24, r28
     464:	8c 60       	ori	r24, 0x0C	; 12
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     46c:	88 e2       	ldi	r24, 0x28	; 40
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
     474:	80 e4       	ldi	r24, 0x40	; 64
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCDByte>
     47c:	c4 e1       	ldi	r28, 0x14	; 20
     47e:	d1 e0       	ldi	r29, 0x01	; 1
void LCDBusyLoop()
{
	_delay_ms(8);
}

void LCDInit(uint8_t style)
     480:	04 e5       	ldi	r16, 0x54	; 84
     482:	11 e0       	ldi	r17, 0x01	; 1
	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
     484:	89 91       	ld	r24, Y+
     486:	61 e0       	ldi	r22, 0x01	; 1
     488:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
     48c:	c0 17       	cp	r28, r16
     48e:	d1 07       	cpc	r29, r17
     490:	c9 f7       	brne	.-14     	; 0x484 <LCDInit+0x56>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	0e 94 05 02 	call	0x40a	; 0x40a <LCDGotoXY>

}
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	1f 91       	pop	r17
     4a0:	0f 91       	pop	r16
     4a2:	08 95       	ret

000004a4 <sMOIfaceKEYPAD_checkpress>:

static uint8_t nrf24l01_addr5[NRF24L01_ADDRSIZE] = NRF24L01_ADDRP5;
static uint8_t nrf24l01_addrtx[NRF24L01_ADDRSIZE] = NRF24L01_ADDRTX;

sc_integer sMOIfaceKEYPAD_checkpress() {
	return KEYPAD_Check();
     4a4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <KEYPAD_Check>
}
     4a8:	68 2f       	mov	r22, r24
     4aa:	70 e0       	ldi	r23, 0x00	; 0
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	08 95       	ret

000004b2 <sMOIfaceKEYPAD_init>:
void sMOIfaceKEYPAD_init() {
	KEYPAD_Init();
     4b2:	0e 94 46 01 	call	0x28c	; 0x28c <KEYPAD_Init>
}
     4b6:	08 95       	ret

000004b8 <sMOIfaceLCD_writeString>:
void sMOIfaceLCD_writeString(const sc_string chr) {
	LCDWriteString(chr);
     4b8:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCDWriteString>
}
     4bc:	08 95       	ret

000004be <sMOIfaceLCD_writeStringXY>:
void sMOIfaceLCD_writeStringXY(const sc_string chr, const sc_integer x, const sc_integer y) {
     4be:	0f 93       	push	r16
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	ec 01       	movw	r28, r24
     4c6:	84 2f       	mov	r24, r20
     4c8:	60 2f       	mov	r22, r16
	LCDWriteStringXY(x,y,chr);
     4ca:	0e 94 05 02 	call	0x40a	; 0x40a <LCDGotoXY>
     4ce:	ce 01       	movw	r24, r28
     4d0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCDWriteString>
}
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	0f 91       	pop	r16
     4da:	08 95       	ret

000004dc <sMOIfaceLCD_writeNumberXY>:
void sMOIfaceLCD_writeNumberXY(const sc_integer num, const sc_integer x, const sc_integer y, const sc_integer l) {
     4dc:	4f 92       	push	r4
     4de:	5f 92       	push	r5
     4e0:	6f 92       	push	r6
     4e2:	7f 92       	push	r7
     4e4:	af 92       	push	r10
     4e6:	bf 92       	push	r11
     4e8:	cf 92       	push	r12
     4ea:	df 92       	push	r13
     4ec:	ef 92       	push	r14
     4ee:	ff 92       	push	r15
     4f0:	2b 01       	movw	r4, r22
     4f2:	3c 01       	movw	r6, r24
     4f4:	82 2f       	mov	r24, r18
     4f6:	6e 2d       	mov	r22, r14
     4f8:	76 01       	movw	r14, r12
     4fa:	65 01       	movw	r12, r10
	LCDWriteIntXY(x,y,num,l);
     4fc:	0e 94 05 02 	call	0x40a	; 0x40a <LCDGotoXY>
     500:	c2 01       	movw	r24, r4
     502:	b6 01       	movw	r22, r12
     504:	0e 94 9f 01 	call	0x33e	; 0x33e <LCDWriteInt>
}
     508:	ff 90       	pop	r15
     50a:	ef 90       	pop	r14
     50c:	df 90       	pop	r13
     50e:	cf 90       	pop	r12
     510:	bf 90       	pop	r11
     512:	af 90       	pop	r10
     514:	7f 90       	pop	r7
     516:	6f 90       	pop	r6
     518:	5f 90       	pop	r5
     51a:	4f 90       	pop	r4
     51c:	08 95       	ret

0000051e <sMOIfaceLCD_clear>:
void sMOIfaceLCD_clear() {
	LCDClear();
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	60 e0       	ldi	r22, 0x00	; 0
     522:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCDByte>
     526:	82 e0       	ldi	r24, 0x02	; 2
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCDByte>
}
     52e:	08 95       	ret

00000530 <sMOIfaceLCD_init>:
void sMOIfaceLCD_init() {
	LCDInit(0);
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	0e 94 17 02 	call	0x42e	; 0x42e <LCDInit>
}
     536:	08 95       	ret

00000538 <sMOIfaceRF_getData>:

sc_string sMOIfaceRF_getData() {
     538:	0f 93       	push	r16
     53a:	1f 93       	push	r17
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	0f 92       	push	r0
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
	uint8_t pipe = 0;
     546:	19 82       	std	Y+1, r1	; 0x01
	if (nrf24l01_readready(&pipe)) {
     548:	ce 01       	movw	r24, r28
     54a:	01 96       	adiw	r24, 0x01	; 1
     54c:	0e 94 95 06 	call	0xd2a	; 0xd2a <nrf24l01_readready>
     550:	88 23       	and	r24, r24
     552:	99 f0       	breq	.+38     	; 0x57a <sMOIfaceRF_getData+0x42>
		if (pipe==0) {
     554:	89 81       	ldd	r24, Y+1	; 0x01
     556:	88 23       	and	r24, r24
     558:	99 f4       	brne	.+38     	; 0x580 <sMOIfaceRF_getData+0x48>
     55a:	ea e9       	ldi	r30, 0x9A	; 154
     55c:	f2 e0       	ldi	r31, 0x02	; 2
}
void sMOIfaceLCD_init() {
	LCDInit(0);
}

sc_string sMOIfaceRF_getData() {
     55e:	cf 01       	movw	r24, r30
     560:	40 96       	adiw	r24, 0x10	; 16
	uint8_t pipe = 0;
	if (nrf24l01_readready(&pipe)) {
		if (pipe==0) {
		//clear buffer
		for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
     562:	11 92       	st	Z+, r1
     564:	e8 17       	cp	r30, r24
     566:	f9 07       	cpc	r31, r25
     568:	e1 f7       	brne	.-8      	; 0x562 <sMOIfaceRF_getData+0x2a>
		
		//read buffer
		nrf24l01_read(pipe,bufferin);
     56a:	0a e9       	ldi	r16, 0x9A	; 154
     56c:	12 e0       	ldi	r17, 0x02	; 2
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	b8 01       	movw	r22, r16
     572:	0e 94 a7 06 	call	0xd4e	; 0xd4e <nrf24l01_read>
		return bufferin;
     576:	c8 01       	movw	r24, r16
     578:	05 c0       	rjmp	.+10     	; 0x584 <sMOIfaceRF_getData+0x4c>
		}
	}
	return "";
     57a:	84 e5       	ldi	r24, 0x54	; 84
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	02 c0       	rjmp	.+4      	; 0x584 <sMOIfaceRF_getData+0x4c>
     580:	84 e5       	ldi	r24, 0x54	; 84
     582:	91 e0       	ldi	r25, 0x01	; 1
}
     584:	0f 90       	pop	r0
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	1f 91       	pop	r17
     58c:	0f 91       	pop	r16
     58e:	08 95       	ret

00000590 <sMOIfaceRF_sendMsg>:

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	9c 01       	movw	r18, r24
     596:	cc ea       	ldi	r28, 0xAC	; 172
     598:	d2 e0       	ldi	r29, 0x02	; 2
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	90 e0       	ldi	r25, 0x00	; 0
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
		if (i<strlen(msg)) bufferout[i]=msg[i];
     59e:	a2 2f       	mov	r26, r18
     5a0:	b3 2f       	mov	r27, r19
     5a2:	fd 01       	movw	r30, r26
     5a4:	01 90       	ld	r0, Z+
     5a6:	00 20       	and	r0, r0
     5a8:	e9 f7       	brne	.-6      	; 0x5a4 <sMOIfaceRF_sendMsg+0x14>
     5aa:	31 97       	sbiw	r30, 0x01	; 1
     5ac:	ea 1b       	sub	r30, r26
     5ae:	fb 0b       	sbc	r31, r27
     5b0:	8e 17       	cp	r24, r30
     5b2:	9f 07       	cpc	r25, r31
     5b4:	30 f4       	brcc	.+12     	; 0x5c2 <sMOIfaceRF_sendMsg+0x32>
		}
	}
	return "";
}

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
     5b6:	f9 01       	movw	r30, r18
     5b8:	e8 0f       	add	r30, r24
     5ba:	f9 1f       	adc	r31, r25
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
		if (i<strlen(msg)) bufferout[i]=msg[i];
     5bc:	40 81       	ld	r20, Z
     5be:	48 83       	st	Y, r20
     5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <sMOIfaceRF_sendMsg+0x34>
		else bufferout[i] = 0;
     5c2:	18 82       	st	Y, r1
     5c4:	01 96       	adiw	r24, 0x01	; 1
     5c6:	21 96       	adiw	r28, 0x01	; 1
	return "";
}

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
     5c8:	80 31       	cpi	r24, 0x10	; 16
     5ca:	91 05       	cpc	r25, r1
     5cc:	41 f7       	brne	.-48     	; 0x59e <sMOIfaceRF_sendMsg+0xe>
		if (i<strlen(msg)) bufferout[i]=msg[i];
		else bufferout[i] = 0;
	}
	
	//Set Address for Data
	nrf24l01_settxaddr(nrf24l01_addrtx);
     5ce:	85 e5       	ldi	r24, 0x55	; 85
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	0e 94 05 05 	call	0xa0a	; 0xa0a <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     5d6:	8c ea       	ldi	r24, 0xAC	; 172
     5d8:	92 e0       	ldi	r25, 0x02	; 2
     5da:	0e 94 cd 06 	call	0xd9a	; 0xd9a <nrf24l01_write>
     5de:	98 2f       	mov	r25, r24
     5e0:	ef ec       	ldi	r30, 0xCF	; 207
     5e2:	f7 e0       	ldi	r31, 0x07	; 7
     5e4:	31 97       	sbiw	r30, 0x01	; 1
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <sMOIfaceRF_sendMsg+0x54>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <sMOIfaceRF_sendMsg+0x5a>
     5ea:	00 00       	nop
		}
	}
	return "";
}

sc_boolean sMOIfaceRF_sendMsg(const sc_string msg) {
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	91 30       	cpi	r25, 0x01	; 1
     5f0:	09 f0       	breq	.+2      	; 0x5f4 <sMOIfaceRF_sendMsg+0x64>
     5f2:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	08 95       	ret

000005fa <sMOIfaceRF_sendCheck>:

sc_boolean sMOIfaceRF_sendCheck() {
     5fa:	ec ea       	ldi	r30, 0xAC	; 172
     5fc:	f2 e0       	ldi	r31, 0x02	; 2
     5fe:	cf 01       	movw	r24, r30
     600:	40 96       	adiw	r24, 0x10	; 16
	//set all buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferout[i] = 1;
     602:	21 e0       	ldi	r18, 0x01	; 1
     604:	21 93       	st	Z+, r18
     606:	e8 17       	cp	r30, r24
     608:	f9 07       	cpc	r31, r25
     60a:	e1 f7       	brne	.-8      	; 0x604 <sMOIfaceRF_sendCheck+0xa>
	//Set Address for check
	nrf24l01_settxaddr(nrf24l01_addr5);
     60c:	8a e5       	ldi	r24, 0x5A	; 90
     60e:	91 e0       	ldi	r25, 0x01	; 1
     610:	0e 94 05 05 	call	0xa0a	; 0xa0a <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     614:	8c ea       	ldi	r24, 0xAC	; 172
     616:	92 e0       	ldi	r25, 0x02	; 2
     618:	0e 94 cd 06 	call	0xd9a	; 0xd9a <nrf24l01_write>
     61c:	98 2f       	mov	r25, r24
     61e:	ef ec       	ldi	r30, 0xCF	; 207
     620:	f7 e0       	ldi	r31, 0x07	; 7
     622:	31 97       	sbiw	r30, 0x01	; 1
     624:	f1 f7       	brne	.-4      	; 0x622 <sMOIfaceRF_sendCheck+0x28>
     626:	00 c0       	rjmp	.+0      	; 0x628 <sMOIfaceRF_sendCheck+0x2e>
     628:	00 00       	nop
	} else {
		return false;
	}
}

sc_boolean sMOIfaceRF_sendCheck() {
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	91 30       	cpi	r25, 0x01	; 1
     62e:	09 f0       	breq	.+2      	; 0x632 <sMOIfaceRF_sendCheck+0x38>
     630:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     632:	08 95       	ret

00000634 <sMOIfaceRF_getCheck>:

sc_boolean sMOIfaceRF_getCheck() {
     634:	0f 93       	push	r16
     636:	1f 93       	push	r17
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	0f 92       	push	r0
     63e:	cd b7       	in	r28, 0x3d	; 61
     640:	de b7       	in	r29, 0x3e	; 62
	uint8_t pipe = 0;
     642:	19 82       	std	Y+1, r1	; 0x01
	if (nrf24l01_readready(&pipe)) {
     644:	ce 01       	movw	r24, r28
     646:	01 96       	adiw	r24, 0x01	; 1
     648:	0e 94 95 06 	call	0xd2a	; 0xd2a <nrf24l01_readready>
     64c:	88 23       	and	r24, r24
     64e:	f1 f0       	breq	.+60     	; 0x68c <sMOIfaceRF_getCheck+0x58>
		if (pipe==5) {
     650:	89 81       	ldd	r24, Y+1	; 0x01
     652:	85 30       	cpi	r24, 0x05	; 5
     654:	e9 f4       	brne	.+58     	; 0x690 <sMOIfaceRF_getCheck+0x5c>
     656:	ea e9       	ldi	r30, 0x9A	; 154
     658:	f2 e0       	ldi	r31, 0x02	; 2
	} else {
		return false;
	}
}

sc_boolean sMOIfaceRF_getCheck() {
     65a:	8f 01       	movw	r16, r30
     65c:	00 5f       	subi	r16, 0xF0	; 240
     65e:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t pipe = 0;
	if (nrf24l01_readready(&pipe)) {
		if (pipe==5) {
			//clear buffer
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
     660:	11 92       	st	Z+, r1
     662:	e0 17       	cp	r30, r16
     664:	f1 07       	cpc	r31, r17
     666:	e1 f7       	brne	.-8      	; 0x660 <sMOIfaceRF_getCheck+0x2c>
			
			//read buffer
			nrf24l01_read(pipe,bufferin);
     668:	85 e0       	ldi	r24, 0x05	; 5
     66a:	6a e9       	ldi	r22, 0x9A	; 154
     66c:	72 e0       	ldi	r23, 0x02	; 2
     66e:	0e 94 a7 06 	call	0xd4e	; 0xd4e <nrf24l01_read>
			
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) if (bufferin[i]!=1) return false;
     672:	80 91 9a 02 	lds	r24, 0x029A
     676:	81 30       	cpi	r24, 0x01	; 1
     678:	69 f4       	brne	.+26     	; 0x694 <sMOIfaceRF_getCheck+0x60>
     67a:	eb e9       	ldi	r30, 0x9B	; 155
     67c:	f2 e0       	ldi	r31, 0x02	; 2
     67e:	81 91       	ld	r24, Z+
     680:	81 30       	cpi	r24, 0x01	; 1
     682:	51 f4       	brne	.+20     	; 0x698 <sMOIfaceRF_getCheck+0x64>
     684:	e0 17       	cp	r30, r16
     686:	f1 07       	cpc	r31, r17
     688:	d1 f7       	brne	.-12     	; 0x67e <sMOIfaceRF_getCheck+0x4a>
     68a:	07 c0       	rjmp	.+14     	; 0x69a <sMOIfaceRF_getCheck+0x66>
			return true;
		}
	}
	return false;
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	05 c0       	rjmp	.+10     	; 0x69a <sMOIfaceRF_getCheck+0x66>
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	03 c0       	rjmp	.+6      	; 0x69a <sMOIfaceRF_getCheck+0x66>
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
			
			//read buffer
			nrf24l01_read(pipe,bufferin);
			
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) if (bufferin[i]!=1) return false;
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	01 c0       	rjmp	.+2      	; 0x69a <sMOIfaceRF_getCheck+0x66>
     698:	80 e0       	ldi	r24, 0x00	; 0
			return true;
		}
	}
	return false;
}
     69a:	0f 90       	pop	r0
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	1f 91       	pop	r17
     6a2:	0f 91       	pop	r16
     6a4:	08 95       	ret

000006a6 <sMOIfaceRF_sendData>:

sc_boolean sMOIfaceRF_sendData(const sc_integer cmd, const sc_integer id, const sc_integer dish_id, const sc_integer amount) {
     6a6:	af 92       	push	r10
     6a8:	ef 92       	push	r14
     6aa:	82 2f       	mov	r24, r18
     6ac:	ec ea       	ldi	r30, 0xAC	; 172
     6ae:	f2 e0       	ldi	r31, 0x02	; 2
     6b0:	af 01       	movw	r20, r30
     6b2:	40 5f       	subi	r20, 0xF0	; 240
     6b4:	5f 4f       	sbci	r21, 0xFF	; 255
	
	unsigned char num;
	unsigned char mod;
	//clear buffer
	for(uint8_t i=0; i<sizeof(bufferout); i++) bufferout[i] = 0;
     6b6:	11 92       	st	Z+, r1
     6b8:	e4 17       	cp	r30, r20
     6ba:	f5 07       	cpc	r31, r21
     6bc:	e1 f7       	brne	.-8      	; 0x6b6 <sMOIfaceRF_sendData+0x10>
	
	//Lenh cho data: 1-goi mon, 2-huy mon, 3-thanh toan, 4-goi boi ban
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
     6be:	60 5d       	subi	r22, 0xD0	; 208
     6c0:	60 93 ac 02 	sts	0x02AC, r22
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     6c4:	3a e0       	ldi	r19, 0x0A	; 10
     6c6:	63 2f       	mov	r22, r19
     6c8:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     6cc:	90 5d       	subi	r25, 0xD0	; 208
     6ce:	90 93 ae 02 	sts	0x02AE, r25
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     6d2:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     6d6:	90 5d       	subi	r25, 0xD0	; 208
     6d8:	90 93 ad 02 	sts	0x02AD, r25
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
		num/=10;
     6dc:	8e 2d       	mov	r24, r14
     6de:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <__udivmodqi4>
		bufferout[3+i]=mod+'0';
     6e2:	90 5d       	subi	r25, 0xD0	; 208
     6e4:	90 93 b1 02 	sts	0x02B1, r25
	}
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
     6e8:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <__udivmodqi4>
		num/=10;
		bufferout[3+i]=mod+'0';
     6ec:	90 5d       	subi	r25, 0xD0	; 208
     6ee:	90 93 b0 02 	sts	0x02B0, r25
	}
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
     6f2:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <__udivmodqi4>
		num/=10;
		bufferout[3+i]=mod+'0';
     6f6:	90 5d       	subi	r25, 0xD0	; 208
     6f8:	90 93 af 02 	sts	0x02AF, r25
	}
	
	//Chuyen doi so luong mon an
	num=amount;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     6fc:	8a 2d       	mov	r24, r10
     6fe:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <__udivmodqi4>
		num/=10;
		bufferout[6+i]=mod+'0';
     702:	90 5d       	subi	r25, 0xD0	; 208
     704:	90 93 b3 02 	sts	0x02B3, r25
	}
	
	//Chuyen doi so luong mon an
	num=amount;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     708:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <__udivmodqi4>
		num/=10;
		bufferout[6+i]=mod+'0';
     70c:	90 5d       	subi	r25, 0xD0	; 208
     70e:	90 93 b2 02 	sts	0x02B2, r25
	}
	
	//Set Address for Data
	nrf24l01_settxaddr(nrf24l01_addrtx);
     712:	85 e5       	ldi	r24, 0x55	; 85
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	0e 94 05 05 	call	0xa0a	; 0xa0a <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     71a:	8c ea       	ldi	r24, 0xAC	; 172
     71c:	92 e0       	ldi	r25, 0x02	; 2
     71e:	0e 94 cd 06 	call	0xd9a	; 0xd9a <nrf24l01_write>
     722:	98 2f       	mov	r25, r24
     724:	ef ec       	ldi	r30, 0xCF	; 207
     726:	f7 e0       	ldi	r31, 0x07	; 7
     728:	31 97       	sbiw	r30, 0x01	; 1
     72a:	f1 f7       	brne	.-4      	; 0x728 <sMOIfaceRF_sendData+0x82>
     72c:	00 c0       	rjmp	.+0      	; 0x72e <sMOIfaceRF_sendData+0x88>
     72e:	00 00       	nop
		}
	}
	return false;
}

sc_boolean sMOIfaceRF_sendData(const sc_integer cmd, const sc_integer id, const sc_integer dish_id, const sc_integer amount) {
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	91 30       	cpi	r25, 0x01	; 1
     734:	09 f0       	breq	.+2      	; 0x738 <sMOIfaceRF_sendData+0x92>
     736:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     738:	ef 90       	pop	r14
     73a:	af 90       	pop	r10
     73c:	08 95       	ret

0000073e <sMOIfaceRF_sendConf>:

sc_boolean sMOIfaceRF_sendConf(const sc_integer cmd, const sc_integer id) {
     73e:	82 2f       	mov	r24, r18
     740:	ec ea       	ldi	r30, 0xAC	; 172
     742:	f2 e0       	ldi	r31, 0x02	; 2
     744:	af 01       	movw	r20, r30
     746:	40 5f       	subi	r20, 0xF0	; 240
     748:	5f 4f       	sbci	r21, 0xFF	; 255
	
	unsigned char num;
	unsigned char mod;
	//clear buffer
	for(uint8_t i=0; i<sizeof(bufferout); i++) bufferout[i] = 0;
     74a:	11 92       	st	Z+, r1
     74c:	e4 17       	cp	r30, r20
     74e:	f5 07       	cpc	r31, r21
     750:	e1 f7       	brne	.-8      	; 0x74a <sMOIfaceRF_sendConf+0xc>
	
	//Lenh cho data: 3-thanh toan, 4-goi boi ban
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
     752:	60 5d       	subi	r22, 0xD0	; 208
     754:	60 93 ac 02 	sts	0x02AC, r22
	
	//Chuyen doi ma ban an
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     758:	3a e0       	ldi	r19, 0x0A	; 10
     75a:	63 2f       	mov	r22, r19
     75c:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     760:	90 5d       	subi	r25, 0xD0	; 208
     762:	90 93 ae 02 	sts	0x02AE, r25
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
	
	//Chuyen doi ma ban an
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     766:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     76a:	90 5d       	subi	r25, 0xD0	; 208
     76c:	90 93 ad 02 	sts	0x02AD, r25
	}
	
	//Set Address for Data
	nrf24l01_settxaddr(nrf24l01_addrtx);
     770:	85 e5       	ldi	r24, 0x55	; 85
     772:	91 e0       	ldi	r25, 0x01	; 1
     774:	0e 94 05 05 	call	0xa0a	; 0xa0a <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     778:	8c ea       	ldi	r24, 0xAC	; 172
     77a:	92 e0       	ldi	r25, 0x02	; 2
     77c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <nrf24l01_write>
     780:	98 2f       	mov	r25, r24
     782:	ef ec       	ldi	r30, 0xCF	; 207
     784:	f7 e0       	ldi	r31, 0x07	; 7
     786:	31 97       	sbiw	r30, 0x01	; 1
     788:	f1 f7       	brne	.-4      	; 0x786 <sMOIfaceRF_sendConf+0x48>
     78a:	00 c0       	rjmp	.+0      	; 0x78c <sMOIfaceRF_sendConf+0x4e>
     78c:	00 00       	nop
	} else {
		return false;
	}
}

sc_boolean sMOIfaceRF_sendConf(const sc_integer cmd, const sc_integer id) {
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	91 30       	cpi	r25, 0x01	; 1
     792:	09 f0       	breq	.+2      	; 0x796 <sMOIfaceRF_sendConf+0x58>
     794:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     796:	08 95       	ret

00000798 <sMO_setTimer>:

void sMO_setTimer(const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
	TimerSet(evid,time_ms);
     798:	0e 94 3d 1c 	call	0x387a	; 0x387a <TimerSet>
}
     79c:	08 95       	ret

0000079e <sMO_unsetTimer>:
void sMO_unsetTimer(const sc_eventid evid) {
	TimerUnSet(evid);
     79e:	0e 94 89 1c 	call	0x3912	; 0x3912 <TimerUnSet>
}
     7a2:	08 95       	ret

000007a4 <sMOIfaceRF_init>:

void sMOIfaceRF_init() {
	nrf24l01_init();
     7a4:	0e 94 23 07 	call	0xe46	; 0xe46 <nrf24l01_init>
}
     7a8:	08 95       	ret

000007aa <main>:

int main(void)
{
	uint8_t i;
	DDRC=0x0F;
     7aa:	8f e0       	ldi	r24, 0x0F	; 15
     7ac:	84 bb       	out	0x14, r24	; 20
	PORTC=0x0F;
     7ae:	85 bb       	out	0x15, r24	; 21
	l=malloc(sizeof(SMO*)) ;
     7b0:	82 e0       	ldi	r24, 0x02	; 2
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <malloc>
     7b8:	80 93 aa 02 	sts	0x02AA, r24
     7bc:	90 93 ab 02 	sts	0x02AB, r25
	TimerInit();
     7c0:	0e 94 31 1c 	call	0x3862	; 0x3862 <TimerInit>
	sMO_init(l);
     7c4:	80 91 aa 02 	lds	r24, 0x02AA
     7c8:	90 91 ab 02 	lds	r25, 0x02AB
     7cc:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <sMO_init>
	sMO_enter(l);
     7d0:	80 91 aa 02 	lds	r24, 0x02AA
     7d4:	90 91 ab 02 	lds	r25, 0x02AB
     7d8:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <sMO_enter>
	
	while(1)
	{
		sMO_runCycle(l);
     7dc:	80 91 aa 02 	lds	r24, 0x02AA
     7e0:	90 91 ab 02 	lds	r25, 0x02AB
     7e4:	0e 94 25 09 	call	0x124a	; 0x124a <sMO_runCycle>
     7e8:	f9 cf       	rjmp	.-14     	; 0x7dc <main+0x32>

000007ea <__vector_16>:
	}
}

ISR (TIMER0_OVF_vect) {
     7ea:	1f 92       	push	r1
     7ec:	0f 92       	push	r0
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	0f 92       	push	r0
     7f2:	0b b6       	in	r0, 0x3b	; 59
     7f4:	0f 92       	push	r0
     7f6:	11 24       	eor	r1, r1
     7f8:	2f 93       	push	r18
     7fa:	3f 93       	push	r19
     7fc:	4f 93       	push	r20
     7fe:	5f 93       	push	r21
     800:	6f 93       	push	r22
     802:	7f 93       	push	r23
     804:	8f 93       	push	r24
     806:	9f 93       	push	r25
     808:	af 93       	push	r26
     80a:	bf 93       	push	r27
     80c:	ef 93       	push	r30
     80e:	ff 93       	push	r31
	TCNT0=131;
     810:	83 e8       	ldi	r24, 0x83	; 131
     812:	82 bf       	out	0x32, r24	; 50
	TimerCheck(l);
     814:	80 91 aa 02 	lds	r24, 0x02AA
     818:	90 91 ab 02 	lds	r25, 0x02AB
     81c:	0e 94 be 1c 	call	0x397c	; 0x397c <TimerCheck>
     820:	ff 91       	pop	r31
     822:	ef 91       	pop	r30
     824:	bf 91       	pop	r27
     826:	af 91       	pop	r26
     828:	9f 91       	pop	r25
     82a:	8f 91       	pop	r24
     82c:	7f 91       	pop	r23
     82e:	6f 91       	pop	r22
     830:	5f 91       	pop	r21
     832:	4f 91       	pop	r20
     834:	3f 91       	pop	r19
     836:	2f 91       	pop	r18
     838:	0f 90       	pop	r0
     83a:	0b be       	out	0x3b, r0	; 59
     83c:	0f 90       	pop	r0
     83e:	0f be       	out	0x3f, r0	; 63
     840:	0f 90       	pop	r0
     842:	1f 90       	pop	r1
     844:	18 95       	reti

00000846 <nrf24l01_readregister>:

/*
 * read one register
 */
uint8_t nrf24l01_readregister(uint8_t reg) {
	nrf24l01_CSNlo; //low CSN
     846:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     848:	8f 71       	andi	r24, 0x1F	; 31
     84a:	0e 94 2c 1c 	call	0x3858	; 0x3858 <spi_writereadbyte>
    uint8_t result = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
     84e:	8f ef       	ldi	r24, 0xFF	; 255
     850:	0e 94 2c 1c 	call	0x3858	; 0x3858 <spi_writereadbyte>
    nrf24l01_CSNhi; //high CSN
     854:	ae 9a       	sbi	0x15, 6	; 21
    return result;
}
     856:	08 95       	ret

00000858 <nrf24l01_readregisters>:

/*
 * read many registers
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
     858:	ff 92       	push	r15
     85a:	0f 93       	push	r16
     85c:	1f 93       	push	r17
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	06 2f       	mov	r16, r22
     864:	f7 2e       	mov	r15, r23
     866:	14 2f       	mov	r17, r20
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
     868:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     86a:	8f 71       	andi	r24, 0x1F	; 31
     86c:	0e 94 2c 1c 	call	0x3858	; 0x3858 <spi_writereadbyte>
	for(i=0; i<len; i++)
     870:	11 23       	and	r17, r17
     872:	51 f0       	breq	.+20     	; 0x888 <nrf24l01_readregisters+0x30>
     874:	c0 2f       	mov	r28, r16
     876:	df 2d       	mov	r29, r15
     878:	00 e0       	ldi	r16, 0x00	; 0
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
     87a:	8f ef       	ldi	r24, 0xFF	; 255
     87c:	0e 94 2c 1c 	call	0x3858	; 0x3858 <spi_writereadbyte>
     880:	89 93       	st	Y+, r24
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     882:	0f 5f       	subi	r16, 0xFF	; 255
     884:	01 17       	cp	r16, r17
     886:	c9 f7       	brne	.-14     	; 0x87a <nrf24l01_readregisters+0x22>
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
	nrf24l01_CSNhi; //high CSN
     888:	ae 9a       	sbi	0x15, 6	; 21
}
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	1f 91       	pop	r17
     890:	0f 91       	pop	r16
     892:	ff 90       	pop	r15
     894:	08 95       	ret

00000896 <nrf24l01_writeregister>:

/*
 * write one register
 */
void nrf24l01_writeregister(uint8_t reg, uint8_t value) {
     896:	cf 93       	push	r28
     898:	c6 2f       	mov	r28, r22
	nrf24l01_CSNlo; //low CSN
     89a:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     89c:	8f 71       	andi	r24, 0x1F	; 31
     89e:	80 62       	ori	r24, 0x20	; 32
     8a0:	0e 94 2c 1c 	call	0x3858	; 0x3858 <spi_writereadbyte>
	spi_writereadbyte(value); //write register
     8a4:	8c 2f       	mov	r24, r28
     8a6:	0e 94 2c 1c 	call	0x3858	; 0x3858 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     8aa:	ae 9a       	sbi	0x15, 6	; 21
}
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <nrf24l01_writeregisters>:

/*
 * write many registers
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
     8b0:	ff 92       	push	r15
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	06 2f       	mov	r16, r22
     8bc:	f7 2e       	mov	r15, r23
     8be:	14 2f       	mov	r17, r20
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
     8c0:	ae 98       	cbi	0x15, 6	; 21
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     8c2:	8f 71       	andi	r24, 0x1F	; 31
     8c4:	80 62       	ori	r24, 0x20	; 32
     8c6:	0e 94 2c 1c 	call	0x3858	; 0x3858 <spi_writereadbyte>
	for(i=0; i<len; i++)
     8ca:	11 23       	and	r17, r17
     8cc:	49 f0       	breq	.+18     	; 0x8e0 <nrf24l01_writeregisters+0x30>
     8ce:	c0 2f       	mov	r28, r16
     8d0:	df 2d       	mov	r29, r15
     8d2:	00 e0       	ldi	r16, 0x00	; 0
		 spi_writereadbyte(value[i]); //write register
     8d4:	89 91       	ld	r24, Y+
     8d6:	0e 94 2c 1c 	call	0x3858	; 0x3858 <spi_writereadbyte>
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     8da:	0f 5f       	subi	r16, 0xFF	; 255
     8dc:	01 17       	cp	r16, r17
     8de:	d1 f7       	brne	.-12     	; 0x8d4 <nrf24l01_writeregisters+0x24>
		 spi_writereadbyte(value[i]); //write register
	nrf24l01_CSNhi; //high CSN
     8e0:	ae 9a       	sbi	0x15, 6	; 21
}
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	ff 90       	pop	r15
     8ec:	08 95       	ret

000008ee <nrf24l01_revaddress>:

/*
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	04 96       	adiw	r24, 0x04	; 4
     8f4:	db 01       	movw	r26, r22
     8f6:	a2 0f       	add	r26, r18
     8f8:	b3 1f       	adc	r27, r19
     8fa:	fc 01       	movw	r30, r24
     8fc:	e2 1b       	sub	r30, r18
     8fe:	f3 0b       	sbc	r31, r19
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
     900:	40 81       	ld	r20, Z
     902:	4c 93       	st	X, r20
     904:	2f 5f       	subi	r18, 0xFF	; 255
     906:	3f 4f       	sbci	r19, 0xFF	; 255
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
     908:	25 30       	cpi	r18, 0x05	; 5
     90a:	31 05       	cpc	r19, r1
     90c:	99 f7       	brne	.-26     	; 0x8f4 <nrf24l01_revaddress+0x6>
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
}
     90e:	08 95       	ret

00000910 <nrf24l01_setrxaddr>:

/*
 * set rx address
 */
void nrf24l01_setrxaddr(uint8_t pipe, uint8_t *addr) {
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	00 d0       	rcall	.+0      	; 0x916 <nrf24l01_setrxaddr+0x6>
     916:	00 d0       	rcall	.+0      	; 0x918 <nrf24l01_setrxaddr+0x8>
     918:	0f 92       	push	r0
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
	if(pipe == 0) {
     91e:	88 23       	and	r24, r24
     920:	b1 f4       	brne	.+44     	; 0x94e <nrf24l01_setrxaddr+0x3e>
		memcpy(&nrf24l01_addr0, addr, NRF24L01_ADDRSIZE); //cache address
     922:	a9 ed       	ldi	r26, 0xD9	; 217
     924:	b1 e0       	ldi	r27, 0x01	; 1
     926:	fb 01       	movw	r30, r22
     928:	85 e0       	ldi	r24, 0x05	; 5
     92a:	01 90       	ld	r0, Z+
     92c:	0d 92       	st	X+, r0
     92e:	81 50       	subi	r24, 0x01	; 1
     930:	e1 f7       	brne	.-8      	; 0x92a <nrf24l01_setrxaddr+0x1a>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     932:	cb 01       	movw	r24, r22
     934:	be 01       	movw	r22, r28
     936:	6f 5f       	subi	r22, 0xFF	; 255
     938:	7f 4f       	sbci	r23, 0xFF	; 255
     93a:	0e 94 77 04 	call	0x8ee	; 0x8ee <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE);
     93e:	8a e0       	ldi	r24, 0x0A	; 10
     940:	be 01       	movw	r22, r28
     942:	6f 5f       	subi	r22, 0xFF	; 255
     944:	7f 4f       	sbci	r23, 0xFF	; 255
     946:	45 e0       	ldi	r20, 0x05	; 5
     948:	0e 94 58 04 	call	0x8b0	; 0x8b0 <nrf24l01_writeregisters>
     94c:	56 c0       	rjmp	.+172    	; 0x9fa <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 1) {
     94e:	81 30       	cpi	r24, 0x01	; 1
     950:	b1 f4       	brne	.+44     	; 0x97e <nrf24l01_setrxaddr+0x6e>
		memcpy(&nrf24l01_addr1, addr, NRF24L01_ADDRSIZE); //cache address
     952:	ae ed       	ldi	r26, 0xDE	; 222
     954:	b1 e0       	ldi	r27, 0x01	; 1
     956:	fb 01       	movw	r30, r22
     958:	85 e0       	ldi	r24, 0x05	; 5
     95a:	01 90       	ld	r0, Z+
     95c:	0d 92       	st	X+, r0
     95e:	81 50       	subi	r24, 0x01	; 1
     960:	e1 f7       	brne	.-8      	; 0x95a <nrf24l01_setrxaddr+0x4a>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     962:	cb 01       	movw	r24, r22
     964:	be 01       	movw	r22, r28
     966:	6f 5f       	subi	r22, 0xFF	; 255
     968:	7f 4f       	sbci	r23, 0xFF	; 255
     96a:	0e 94 77 04 	call	0x8ee	; 0x8ee <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P1, addrrev, NRF24L01_ADDRSIZE);
     96e:	8b e0       	ldi	r24, 0x0B	; 11
     970:	be 01       	movw	r22, r28
     972:	6f 5f       	subi	r22, 0xFF	; 255
     974:	7f 4f       	sbci	r23, 0xFF	; 255
     976:	45 e0       	ldi	r20, 0x05	; 5
     978:	0e 94 58 04 	call	0x8b0	; 0x8b0 <nrf24l01_writeregisters>
     97c:	3e c0       	rjmp	.+124    	; 0x9fa <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 2) {
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	71 f4       	brne	.+28     	; 0x99e <nrf24l01_setrxaddr+0x8e>
		memcpy(&nrf24l01_addr2, addr, NRF24L01_ADDRSIZE); //cache address
     982:	a3 ee       	ldi	r26, 0xE3	; 227
     984:	b1 e0       	ldi	r27, 0x01	; 1
     986:	fb 01       	movw	r30, r22
     988:	85 e0       	ldi	r24, 0x05	; 5
     98a:	01 90       	ld	r0, Z+
     98c:	0d 92       	st	X+, r0
     98e:	81 50       	subi	r24, 0x01	; 1
     990:	e1 f7       	brne	.-8      	; 0x98a <nrf24l01_setrxaddr+0x7a>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P2, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     992:	8c e0       	ldi	r24, 0x0C	; 12
     994:	fb 01       	movw	r30, r22
     996:	64 81       	ldd	r22, Z+4	; 0x04
     998:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 3) {
     99e:	83 30       	cpi	r24, 0x03	; 3
     9a0:	71 f4       	brne	.+28     	; 0x9be <nrf24l01_setrxaddr+0xae>
		memcpy(&nrf24l01_addr3, addr, NRF24L01_ADDRSIZE); //cache address
     9a2:	a8 ee       	ldi	r26, 0xE8	; 232
     9a4:	b1 e0       	ldi	r27, 0x01	; 1
     9a6:	fb 01       	movw	r30, r22
     9a8:	85 e0       	ldi	r24, 0x05	; 5
     9aa:	01 90       	ld	r0, Z+
     9ac:	0d 92       	st	X+, r0
     9ae:	81 50       	subi	r24, 0x01	; 1
     9b0:	e1 f7       	brne	.-8      	; 0x9aa <nrf24l01_setrxaddr+0x9a>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P3, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     9b2:	8d e0       	ldi	r24, 0x0D	; 13
     9b4:	fb 01       	movw	r30, r22
     9b6:	64 81       	ldd	r22, Z+4	; 0x04
     9b8:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
     9bc:	1e c0       	rjmp	.+60     	; 0x9fa <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 4) {
     9be:	84 30       	cpi	r24, 0x04	; 4
     9c0:	71 f4       	brne	.+28     	; 0x9de <nrf24l01_setrxaddr+0xce>
		memcpy(&nrf24l01_addr4, addr, NRF24L01_ADDRSIZE); //cache address
     9c2:	ad ee       	ldi	r26, 0xED	; 237
     9c4:	b1 e0       	ldi	r27, 0x01	; 1
     9c6:	fb 01       	movw	r30, r22
     9c8:	85 e0       	ldi	r24, 0x05	; 5
     9ca:	01 90       	ld	r0, Z+
     9cc:	0d 92       	st	X+, r0
     9ce:	81 50       	subi	r24, 0x01	; 1
     9d0:	e1 f7       	brne	.-8      	; 0x9ca <nrf24l01_setrxaddr+0xba>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P4, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     9d2:	8e e0       	ldi	r24, 0x0E	; 14
     9d4:	fb 01       	movw	r30, r22
     9d6:	64 81       	ldd	r22, Z+4	; 0x04
     9d8:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
     9dc:	0e c0       	rjmp	.+28     	; 0x9fa <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 5) {
     9de:	85 30       	cpi	r24, 0x05	; 5
     9e0:	61 f4       	brne	.+24     	; 0x9fa <nrf24l01_setrxaddr+0xea>
		memcpy(&nrf24l01_addr5, addr, NRF24L01_ADDRSIZE); //cache address
     9e2:	a2 ef       	ldi	r26, 0xF2	; 242
     9e4:	b1 e0       	ldi	r27, 0x01	; 1
     9e6:	fb 01       	movw	r30, r22
     9e8:	01 90       	ld	r0, Z+
     9ea:	0d 92       	st	X+, r0
     9ec:	81 50       	subi	r24, 0x01	; 1
     9ee:	e1 f7       	brne	.-8      	; 0x9e8 <nrf24l01_setrxaddr+0xd8>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P5, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     9f0:	8f e0       	ldi	r24, 0x0F	; 15
     9f2:	fb 01       	movw	r30, r22
     9f4:	64 81       	ldd	r22, Z+4	; 0x04
     9f6:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
	}
}
     9fa:	0f 90       	pop	r0
     9fc:	0f 90       	pop	r0
     9fe:	0f 90       	pop	r0
     a00:	0f 90       	pop	r0
     a02:	0f 90       	pop	r0
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	08 95       	ret

00000a0a <nrf24l01_settxaddr>:

/*
 * set tx address
 */
void nrf24l01_settxaddr(uint8_t *addr) {
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	00 d0       	rcall	.+0      	; 0xa10 <nrf24l01_settxaddr+0x6>
     a10:	00 d0       	rcall	.+0      	; 0xa12 <nrf24l01_settxaddr+0x8>
     a12:	0f 92       	push	r0
     a14:	cd b7       	in	r28, 0x3d	; 61
     a16:	de b7       	in	r29, 0x3e	; 62
	memcpy(&nrf24l01_addrtx, addr, NRF24L01_ADDRSIZE); //cache address
     a18:	a7 ef       	ldi	r26, 0xF7	; 247
     a1a:	b1 e0       	ldi	r27, 0x01	; 1
     a1c:	e8 2f       	mov	r30, r24
     a1e:	f9 2f       	mov	r31, r25
     a20:	25 e0       	ldi	r18, 0x05	; 5
     a22:	01 90       	ld	r0, Z+
     a24:	0d 92       	st	X+, r0
     a26:	21 50       	subi	r18, 0x01	; 1
     a28:	e1 f7       	brne	.-8      	; 0xa22 <nrf24l01_settxaddr+0x18>
	uint8_t addrrev[NRF24L01_ADDRSIZE];
	nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     a2a:	be 01       	movw	r22, r28
     a2c:	6f 5f       	subi	r22, 0xFF	; 255
     a2e:	7f 4f       	sbci	r23, 0xFF	; 255
     a30:	0e 94 77 04 	call	0x8ee	; 0x8ee <nrf24l01_revaddress>
	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE); //set rx address for ack on pipe 0
     a34:	8a e0       	ldi	r24, 0x0A	; 10
     a36:	be 01       	movw	r22, r28
     a38:	6f 5f       	subi	r22, 0xFF	; 255
     a3a:	7f 4f       	sbci	r23, 0xFF	; 255
     a3c:	45 e0       	ldi	r20, 0x05	; 5
     a3e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <nrf24l01_writeregisters>
	nrf24l01_writeregisters(NRF24L01_REG_TX_ADDR, addrrev, NRF24L01_ADDRSIZE); //set tx address
     a42:	80 e1       	ldi	r24, 0x10	; 16
     a44:	be 01       	movw	r22, r28
     a46:	6f 5f       	subi	r22, 0xFF	; 255
     a48:	7f 4f       	sbci	r23, 0xFF	; 255
     a4a:	45 e0       	ldi	r20, 0x05	; 5
     a4c:	0e 94 58 04 	call	0x8b0	; 0x8b0 <nrf24l01_writeregisters>
}
     a50:	0f 90       	pop	r0
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	0f 90       	pop	r0
     a58:	0f 90       	pop	r0
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	08 95       	ret

00000a60 <nrf24l01_flushRXfifo>:

/*
 * flush RX fifo
 */
void nrf24l01_flushRXfifo() {
	nrf24l01_CSNlo; //low CSN
     a60:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_FLUSH_RX);
     a62:	82 ee       	ldi	r24, 0xE2	; 226
     a64:	0e 94 2c 1c 	call	0x3858	; 0x3858 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     a68:	ae 9a       	sbi	0x15, 6	; 21
}
     a6a:	08 95       	ret

00000a6c <nrf24l01_flushTXfifo>:

/*
 * flush TX fifo
 */
void nrf24l01_flushTXfifo() {
	nrf24l01_CSNlo; //low CSN
     a6c:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_FLUSH_TX);
     a6e:	81 ee       	ldi	r24, 0xE1	; 225
     a70:	0e 94 2c 1c 	call	0x3858	; 0x3858 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     a74:	ae 9a       	sbi	0x15, 6	; 21
}
     a76:	08 95       	ret

00000a78 <nrf24l01_setRX>:

/*
 * set chip as RX
 */
void nrf24l01_setRX() {
	nrf24l01_setrxaddr(0, nrf24l01_addr0); //restore pipe 0 address
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	69 ed       	ldi	r22, 0xD9	; 217
     a7c:	71 e0       	ldi	r23, 0x01	; 1
     a7e:	0e 94 88 04 	call	0x910	; 0x910 <nrf24l01_setrxaddr>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PRIM_RX)); //prx mode
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	0e 94 23 04 	call	0x846	; 0x846 <nrf24l01_readregister>
     a88:	68 2f       	mov	r22, r24
     a8a:	61 60       	ori	r22, 0x01	; 1
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	0e 94 23 04 	call	0x846	; 0x846 <nrf24l01_readregister>
     a98:	68 2f       	mov	r22, r24
     a9a:	62 60       	ori	r22, 0x02	; 2
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     aa2:	87 e0       	ldi	r24, 0x07	; 7
     aa4:	60 e7       	ldi	r22, 0x70	; 112
     aa6:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
	nrf24l01_flushRXfifo(); //flush rx fifo
     aaa:	0e 94 30 05 	call	0xa60	; 0xa60 <nrf24l01_flushRXfifo>
	nrf24l01_flushTXfifo(); //flush tx fifo
     aae:	0e 94 36 05 	call	0xa6c	; 0xa6c <nrf24l01_flushTXfifo>
	nrf24l01_CEhi; //start listening
     ab2:	af 9a       	sbi	0x15, 7	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ab4:	82 e3       	ldi	r24, 0x32	; 50
     ab6:	8a 95       	dec	r24
     ab8:	f1 f7       	brne	.-4      	; 0xab6 <nrf24l01_setRX+0x3e>
	_delay_us(150); //wait for the radio to power up
}
     aba:	08 95       	ret

00000abc <nrf24l01_setTX>:

/*
 * set chip as TX
 */
void nrf24l01_setTX() {
	nrf24l01_CElo; //stop listening
     abc:	af 98       	cbi	0x15, 7	; 21
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PRIM_RX)); //ptx mode
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	0e 94 23 04 	call	0x846	; 0x846 <nrf24l01_readregister>
     ac4:	68 2f       	mov	r22, r24
     ac6:	6e 7f       	andi	r22, 0xFE	; 254
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	0e 94 23 04 	call	0x846	; 0x846 <nrf24l01_readregister>
     ad4:	68 2f       	mov	r22, r24
     ad6:	62 60       	ori	r22, 0x02	; 2
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     ade:	87 e0       	ldi	r24, 0x07	; 7
     ae0:	60 e7       	ldi	r22, 0x70	; 112
     ae2:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
	nrf24l01_flushTXfifo(); //flush tx fifo
     ae6:	0e 94 36 05 	call	0xa6c	; 0xa6c <nrf24l01_flushTXfifo>
     aea:	82 e3       	ldi	r24, 0x32	; 50
     aec:	8a 95       	dec	r24
     aee:	f1 f7       	brne	.-4      	; 0xaec <nrf24l01_setTX+0x30>
	_delay_us(150); //wait for the radio to power up
}
     af0:	08 95       	ret

00000af2 <nrf24l01_getstatus>:
/*
 * get status register
 */
uint8_t nrf24l01_getstatus() {
	uint8_t status = 0;
	nrf24l01_CSNlo; //low CSN
     af2:	ae 98       	cbi	0x15, 6	; 21
	status = spi_writereadbyte(NRF24L01_CMD_NOP); //get status, send NOP request
     af4:	8f ef       	ldi	r24, 0xFF	; 255
     af6:	0e 94 2c 1c 	call	0x3858	; 0x3858 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     afa:	ae 9a       	sbi	0x15, 6	; 21
	return status;
}
     afc:	08 95       	ret

00000afe <nrf24l01_printinfo>:

#if NRF24L01_PRINTENABLE == 1
/*
 * print info
 */
void nrf24l01_printinfo(void(*prints)(const char *), void(*printc)(unsigned char data)) {
     afe:	ef 92       	push	r14
     b00:	ff 92       	push	r15
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	cd b7       	in	r28, 0x3d	; 61
     b0c:	de b7       	in	r29, 0x3e	; 62
     b0e:	c4 56       	subi	r28, 0x64	; 100
     b10:	d0 40       	sbci	r29, 0x00	; 0
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	f8 94       	cli
     b16:	de bf       	out	0x3e, r29	; 62
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	cd bf       	out	0x3d, r28	; 61
     b1c:	7c 01       	movw	r14, r24
	char buff[100];
	prints("info\r\n");
     b1e:	8f e5       	ldi	r24, 0x5F	; 95
     b20:	91 e0       	ldi	r25, 0x01	; 1
     b22:	f7 01       	movw	r30, r14
     b24:	09 95       	icall
	sprintf(buff,"STATUS: %02X\r\n", nrf24l01_getstatus()); prints(buff);
     b26:	0e 94 79 05 	call	0xaf2	; 0xaf2 <nrf24l01_getstatus>
     b2a:	00 d0       	rcall	.+0      	; 0xb2c <nrf24l01_printinfo+0x2e>
     b2c:	00 d0       	rcall	.+0      	; 0xb2e <nrf24l01_printinfo+0x30>
     b2e:	00 d0       	rcall	.+0      	; 0xb30 <nrf24l01_printinfo+0x32>
     b30:	ed b7       	in	r30, 0x3d	; 61
     b32:	fe b7       	in	r31, 0x3e	; 62
     b34:	31 96       	adiw	r30, 0x01	; 1
     b36:	8e 01       	movw	r16, r28
     b38:	0f 5f       	subi	r16, 0xFF	; 255
     b3a:	1f 4f       	sbci	r17, 0xFF	; 255
     b3c:	ad b7       	in	r26, 0x3d	; 61
     b3e:	be b7       	in	r27, 0x3e	; 62
     b40:	12 96       	adiw	r26, 0x02	; 2
     b42:	1c 93       	st	X, r17
     b44:	0e 93       	st	-X, r16
     b46:	11 97       	sbiw	r26, 0x01	; 1
     b48:	26 e6       	ldi	r18, 0x66	; 102
     b4a:	31 e0       	ldi	r19, 0x01	; 1
     b4c:	33 83       	std	Z+3, r19	; 0x03
     b4e:	22 83       	std	Z+2, r18	; 0x02
     b50:	84 83       	std	Z+4, r24	; 0x04
     b52:	15 82       	std	Z+5, r1	; 0x05
     b54:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <sprintf>
     b58:	8d b7       	in	r24, 0x3d	; 61
     b5a:	9e b7       	in	r25, 0x3e	; 62
     b5c:	06 96       	adiw	r24, 0x06	; 6
     b5e:	0f b6       	in	r0, 0x3f	; 63
     b60:	f8 94       	cli
     b62:	9e bf       	out	0x3e, r25	; 62
     b64:	0f be       	out	0x3f, r0	; 63
     b66:	8d bf       	out	0x3d, r24	; 61
     b68:	c8 01       	movw	r24, r16
     b6a:	f7 01       	movw	r30, r14
     b6c:	09 95       	icall
	sprintf(buff,"CONFIG: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_CONFIG)); prints(buff);
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	0e 94 23 04 	call	0x846	; 0x846 <nrf24l01_readregister>
     b74:	00 d0       	rcall	.+0      	; 0xb76 <nrf24l01_printinfo+0x78>
     b76:	00 d0       	rcall	.+0      	; 0xb78 <nrf24l01_printinfo+0x7a>
     b78:	00 d0       	rcall	.+0      	; 0xb7a <nrf24l01_printinfo+0x7c>
     b7a:	ed b7       	in	r30, 0x3d	; 61
     b7c:	fe b7       	in	r31, 0x3e	; 62
     b7e:	31 96       	adiw	r30, 0x01	; 1
     b80:	ad b7       	in	r26, 0x3d	; 61
     b82:	be b7       	in	r27, 0x3e	; 62
     b84:	12 96       	adiw	r26, 0x02	; 2
     b86:	1c 93       	st	X, r17
     b88:	0e 93       	st	-X, r16
     b8a:	11 97       	sbiw	r26, 0x01	; 1
     b8c:	25 e7       	ldi	r18, 0x75	; 117
     b8e:	31 e0       	ldi	r19, 0x01	; 1
     b90:	33 83       	std	Z+3, r19	; 0x03
     b92:	22 83       	std	Z+2, r18	; 0x02
     b94:	84 83       	std	Z+4, r24	; 0x04
     b96:	15 82       	std	Z+5, r1	; 0x05
     b98:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <sprintf>
     b9c:	8d b7       	in	r24, 0x3d	; 61
     b9e:	9e b7       	in	r25, 0x3e	; 62
     ba0:	06 96       	adiw	r24, 0x06	; 6
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	9e bf       	out	0x3e, r25	; 62
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	8d bf       	out	0x3d, r24	; 61
     bac:	c8 01       	movw	r24, r16
     bae:	f7 01       	movw	r30, r14
     bb0:	09 95       	icall
	sprintf(buff,"RF_CH: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_CH)); prints(buff);
     bb2:	85 e0       	ldi	r24, 0x05	; 5
     bb4:	0e 94 23 04 	call	0x846	; 0x846 <nrf24l01_readregister>
     bb8:	00 d0       	rcall	.+0      	; 0xbba <nrf24l01_printinfo+0xbc>
     bba:	00 d0       	rcall	.+0      	; 0xbbc <nrf24l01_printinfo+0xbe>
     bbc:	00 d0       	rcall	.+0      	; 0xbbe <nrf24l01_printinfo+0xc0>
     bbe:	ed b7       	in	r30, 0x3d	; 61
     bc0:	fe b7       	in	r31, 0x3e	; 62
     bc2:	31 96       	adiw	r30, 0x01	; 1
     bc4:	ad b7       	in	r26, 0x3d	; 61
     bc6:	be b7       	in	r27, 0x3e	; 62
     bc8:	12 96       	adiw	r26, 0x02	; 2
     bca:	1c 93       	st	X, r17
     bcc:	0e 93       	st	-X, r16
     bce:	11 97       	sbiw	r26, 0x01	; 1
     bd0:	24 e8       	ldi	r18, 0x84	; 132
     bd2:	31 e0       	ldi	r19, 0x01	; 1
     bd4:	33 83       	std	Z+3, r19	; 0x03
     bd6:	22 83       	std	Z+2, r18	; 0x02
     bd8:	84 83       	std	Z+4, r24	; 0x04
     bda:	15 82       	std	Z+5, r1	; 0x05
     bdc:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <sprintf>
     be0:	8d b7       	in	r24, 0x3d	; 61
     be2:	9e b7       	in	r25, 0x3e	; 62
     be4:	06 96       	adiw	r24, 0x06	; 6
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	f8 94       	cli
     bea:	9e bf       	out	0x3e, r25	; 62
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	8d bf       	out	0x3d, r24	; 61
     bf0:	c8 01       	movw	r24, r16
     bf2:	f7 01       	movw	r30, r14
     bf4:	09 95       	icall
	sprintf(buff,"RF_SETUP: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_SETUP)); prints(buff);
     bf6:	86 e0       	ldi	r24, 0x06	; 6
     bf8:	0e 94 23 04 	call	0x846	; 0x846 <nrf24l01_readregister>
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <nrf24l01_printinfo+0x100>
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <nrf24l01_printinfo+0x102>
     c00:	00 d0       	rcall	.+0      	; 0xc02 <nrf24l01_printinfo+0x104>
     c02:	ed b7       	in	r30, 0x3d	; 61
     c04:	fe b7       	in	r31, 0x3e	; 62
     c06:	31 96       	adiw	r30, 0x01	; 1
     c08:	ad b7       	in	r26, 0x3d	; 61
     c0a:	be b7       	in	r27, 0x3e	; 62
     c0c:	12 96       	adiw	r26, 0x02	; 2
     c0e:	1c 93       	st	X, r17
     c10:	0e 93       	st	-X, r16
     c12:	11 97       	sbiw	r26, 0x01	; 1
     c14:	22 e9       	ldi	r18, 0x92	; 146
     c16:	31 e0       	ldi	r19, 0x01	; 1
     c18:	33 83       	std	Z+3, r19	; 0x03
     c1a:	22 83       	std	Z+2, r18	; 0x02
     c1c:	84 83       	std	Z+4, r24	; 0x04
     c1e:	15 82       	std	Z+5, r1	; 0x05
     c20:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <sprintf>
     c24:	8d b7       	in	r24, 0x3d	; 61
     c26:	9e b7       	in	r25, 0x3e	; 62
     c28:	06 96       	adiw	r24, 0x06	; 6
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	f8 94       	cli
     c2e:	9e bf       	out	0x3e, r25	; 62
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	8d bf       	out	0x3d, r24	; 61
     c34:	c8 01       	movw	r24, r16
     c36:	f7 01       	movw	r30, r14
     c38:	09 95       	icall
	sprintf(buff,"EN_AA: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_AA)); prints(buff);
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	0e 94 23 04 	call	0x846	; 0x846 <nrf24l01_readregister>
     c40:	00 d0       	rcall	.+0      	; 0xc42 <nrf24l01_printinfo+0x144>
     c42:	00 d0       	rcall	.+0      	; 0xc44 <nrf24l01_printinfo+0x146>
     c44:	00 d0       	rcall	.+0      	; 0xc46 <nrf24l01_printinfo+0x148>
     c46:	ed b7       	in	r30, 0x3d	; 61
     c48:	fe b7       	in	r31, 0x3e	; 62
     c4a:	31 96       	adiw	r30, 0x01	; 1
     c4c:	ad b7       	in	r26, 0x3d	; 61
     c4e:	be b7       	in	r27, 0x3e	; 62
     c50:	12 96       	adiw	r26, 0x02	; 2
     c52:	1c 93       	st	X, r17
     c54:	0e 93       	st	-X, r16
     c56:	11 97       	sbiw	r26, 0x01	; 1
     c58:	23 ea       	ldi	r18, 0xA3	; 163
     c5a:	31 e0       	ldi	r19, 0x01	; 1
     c5c:	33 83       	std	Z+3, r19	; 0x03
     c5e:	22 83       	std	Z+2, r18	; 0x02
     c60:	84 83       	std	Z+4, r24	; 0x04
     c62:	15 82       	std	Z+5, r1	; 0x05
     c64:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <sprintf>
     c68:	8d b7       	in	r24, 0x3d	; 61
     c6a:	9e b7       	in	r25, 0x3e	; 62
     c6c:	06 96       	adiw	r24, 0x06	; 6
     c6e:	0f b6       	in	r0, 0x3f	; 63
     c70:	f8 94       	cli
     c72:	9e bf       	out	0x3e, r25	; 62
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	8d bf       	out	0x3d, r24	; 61
     c78:	c8 01       	movw	r24, r16
     c7a:	f7 01       	movw	r30, r14
     c7c:	09 95       	icall
	sprintf(buff,"EN_RXADDR: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_RXADDR)); prints(buff);
     c7e:	82 e0       	ldi	r24, 0x02	; 2
     c80:	0e 94 23 04 	call	0x846	; 0x846 <nrf24l01_readregister>
     c84:	00 d0       	rcall	.+0      	; 0xc86 <nrf24l01_printinfo+0x188>
     c86:	00 d0       	rcall	.+0      	; 0xc88 <nrf24l01_printinfo+0x18a>
     c88:	00 d0       	rcall	.+0      	; 0xc8a <nrf24l01_printinfo+0x18c>
     c8a:	ed b7       	in	r30, 0x3d	; 61
     c8c:	fe b7       	in	r31, 0x3e	; 62
     c8e:	31 96       	adiw	r30, 0x01	; 1
     c90:	ad b7       	in	r26, 0x3d	; 61
     c92:	be b7       	in	r27, 0x3e	; 62
     c94:	12 96       	adiw	r26, 0x02	; 2
     c96:	1c 93       	st	X, r17
     c98:	0e 93       	st	-X, r16
     c9a:	11 97       	sbiw	r26, 0x01	; 1
     c9c:	21 eb       	ldi	r18, 0xB1	; 177
     c9e:	31 e0       	ldi	r19, 0x01	; 1
     ca0:	33 83       	std	Z+3, r19	; 0x03
     ca2:	22 83       	std	Z+2, r18	; 0x02
     ca4:	84 83       	std	Z+4, r24	; 0x04
     ca6:	15 82       	std	Z+5, r1	; 0x05
     ca8:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <sprintf>
     cac:	8d b7       	in	r24, 0x3d	; 61
     cae:	9e b7       	in	r25, 0x3e	; 62
     cb0:	06 96       	adiw	r24, 0x06	; 6
     cb2:	0f b6       	in	r0, 0x3f	; 63
     cb4:	f8 94       	cli
     cb6:	9e bf       	out	0x3e, r25	; 62
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	8d bf       	out	0x3d, r24	; 61
     cbc:	c8 01       	movw	r24, r16
     cbe:	f7 01       	movw	r30, r14
     cc0:	09 95       	icall
	sprintf(buff,"OBSERVE_TX: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_OBSERVE_TX)); prints(buff);
     cc2:	88 e0       	ldi	r24, 0x08	; 8
     cc4:	0e 94 23 04 	call	0x846	; 0x846 <nrf24l01_readregister>
     cc8:	00 d0       	rcall	.+0      	; 0xcca <nrf24l01_printinfo+0x1cc>
     cca:	00 d0       	rcall	.+0      	; 0xccc <nrf24l01_printinfo+0x1ce>
     ccc:	00 d0       	rcall	.+0      	; 0xcce <nrf24l01_printinfo+0x1d0>
     cce:	ed b7       	in	r30, 0x3d	; 61
     cd0:	fe b7       	in	r31, 0x3e	; 62
     cd2:	31 96       	adiw	r30, 0x01	; 1
     cd4:	ad b7       	in	r26, 0x3d	; 61
     cd6:	be b7       	in	r27, 0x3e	; 62
     cd8:	12 96       	adiw	r26, 0x02	; 2
     cda:	1c 93       	st	X, r17
     cdc:	0e 93       	st	-X, r16
     cde:	11 97       	sbiw	r26, 0x01	; 1
     ce0:	23 ec       	ldi	r18, 0xC3	; 195
     ce2:	31 e0       	ldi	r19, 0x01	; 1
     ce4:	33 83       	std	Z+3, r19	; 0x03
     ce6:	22 83       	std	Z+2, r18	; 0x02
     ce8:	84 83       	std	Z+4, r24	; 0x04
     cea:	15 82       	std	Z+5, r1	; 0x05
     cec:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <sprintf>
     cf0:	8d b7       	in	r24, 0x3d	; 61
     cf2:	9e b7       	in	r25, 0x3e	; 62
     cf4:	06 96       	adiw	r24, 0x06	; 6
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	f8 94       	cli
     cfa:	9e bf       	out	0x3e, r25	; 62
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	8d bf       	out	0x3d, r24	; 61
     d00:	c8 01       	movw	r24, r16
     d02:	f7 01       	movw	r30, r14
     d04:	09 95       	icall
	prints("\r\n");
     d06:	86 ed       	ldi	r24, 0xD6	; 214
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	f7 01       	movw	r30, r14
     d0c:	09 95       	icall
}
     d0e:	cc 59       	subi	r28, 0x9C	; 156
     d10:	df 4f       	sbci	r29, 0xFF	; 255
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	f8 94       	cli
     d16:	de bf       	out	0x3e, r29	; 62
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	cd bf       	out	0x3d, r28	; 61
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	ff 90       	pop	r15
     d26:	ef 90       	pop	r14
     d28:	08 95       	ret

00000d2a <nrf24l01_readready>:
}

/*
 * check if there is data ready
 */
uint8_t nrf24l01_readready(uint8_t* pipe) {
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	ec 01       	movw	r28, r24
    uint8_t status = nrf24l01_getstatus();
     d30:	0e 94 79 05 	call	0xaf2	; 0xaf2 <nrf24l01_getstatus>
    uint8_t ret = status & (1<<NRF24L01_REG_RX_DR);
    if(ret) {
     d34:	98 2f       	mov	r25, r24
     d36:	90 74       	andi	r25, 0x40	; 64
     d38:	86 ff       	sbrs	r24, 6
     d3a:	05 c0       	rjmp	.+10     	; 0xd46 <nrf24l01_readready+0x1c>
		//get the pipe number
		if(pipe)
     d3c:	20 97       	sbiw	r28, 0x00	; 0
     d3e:	19 f0       	breq	.+6      	; 0xd46 <nrf24l01_readready+0x1c>
			*pipe = (status >> NRF24L01_REG_RX_P_NO) & 0b111;
     d40:	86 95       	lsr	r24
     d42:	87 70       	andi	r24, 0x07	; 7
     d44:	88 83       	st	Y, r24
    }
    return ret;
}
     d46:	89 2f       	mov	r24, r25
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	08 95       	ret

00000d4e <nrf24l01_read>:

/*
 * get data
 */
void nrf24l01_read(uint8_t pipe,uint8_t *data) {
     d4e:	0f 93       	push	r16
     d50:	1f 93       	push	r17
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	06 2f       	mov	r16, r22
     d58:	17 2f       	mov	r17, r23
	uint8_t i = 0;
	//read rx register
	nrf24l01_CSNlo; //low CSN
     d5a:	ae 98       	cbi	0x15, 6	; 21
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
     d5c:	81 e6       	ldi	r24, 0x61	; 97
     d5e:	0e 94 2c 1c 	call	0x3858	; 0x3858 <spi_writereadbyte>
     d62:	c0 2f       	mov	r28, r16
     d64:	d1 2f       	mov	r29, r17
	//Thay doi lai command, lay PAYLOAD va write ACK
	//spi_writereadbyte(NRF24L01_CMD_W_ACK_PAYLOAD | pipe);
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     d66:	10 e0       	ldi	r17, 0x00	; 0
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
     d68:	8f ef       	ldi	r24, 0xFF	; 255
     d6a:	0e 94 2c 1c 	call	0x3858	; 0x3858 <spi_writereadbyte>
     d6e:	89 93       	st	Y+, r24
	//read rx register
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
	//Thay doi lai command, lay PAYLOAD va write ACK
	//spi_writereadbyte(NRF24L01_CMD_W_ACK_PAYLOAD | pipe);
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     d70:	1f 5f       	subi	r17, 0xFF	; 255
     d72:	10 31       	cpi	r17, 0x10	; 16
     d74:	c9 f7       	brne	.-14     	; 0xd68 <nrf24l01_read+0x1a>
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
    nrf24l01_CSNhi; //high CSN
     d76:	ae 9a       	sbi	0x15, 6	; 21
    //reset register
    nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR));
     d78:	87 e0       	ldi	r24, 0x07	; 7
     d7a:	60 e4       	ldi	r22, 0x40	; 64
     d7c:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
    //handle ack payload receipt
	if (nrf24l01_getstatus() & (1<<NRF24L01_REG_TX_DS))
     d80:	0e 94 79 05 	call	0xaf2	; 0xaf2 <nrf24l01_getstatus>
     d84:	85 ff       	sbrs	r24, 5
     d86:	04 c0       	rjmp	.+8      	; 0xd90 <nrf24l01_read+0x42>
		nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_TX_DS));
     d88:	87 e0       	ldi	r24, 0x07	; 7
     d8a:	60 e2       	ldi	r22, 0x20	; 32
     d8c:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
}
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	08 95       	ret

00000d9a <nrf24l01_write>:

/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	08 2f       	mov	r16, r24
     da4:	19 2f       	mov	r17, r25
	uint8_t i = 0;
	uint8_t ret = 0;

	//set tx mode
	nrf24l01_setTX();
     da6:	0e 94 5e 05 	call	0xabc	; 0xabc <nrf24l01_setTX>

	//write data
	nrf24l01_CSNlo; //low CSN
     daa:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
     dac:	80 ea       	ldi	r24, 0xA0	; 160
     dae:	0e 94 2c 1c 	call	0x3858	; 0x3858 <spi_writereadbyte>
     db2:	c0 2f       	mov	r28, r16
     db4:	d1 2f       	mov	r29, r17
     db6:	10 e1       	ldi	r17, 0x10	; 16
	for (i=0; i<NRF24L01_PAYLOAD; i++)
		spi_writereadbyte(data[i]);
     db8:	89 91       	ld	r24, Y+
     dba:	0e 94 2c 1c 	call	0x3858	; 0x3858 <spi_writereadbyte>
     dbe:	11 50       	subi	r17, 0x01	; 1
	nrf24l01_setTX();

	//write data
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
	for (i=0; i<NRF24L01_PAYLOAD; i++)
     dc0:	d9 f7       	brne	.-10     	; 0xdb8 <nrf24l01_write+0x1e>
		spi_writereadbyte(data[i]);
	nrf24l01_CSNhi; //high CSN
     dc2:	ae 9a       	sbi	0x15, 6	; 21

	//start transmission
	nrf24l01_CEhi; //high CE
     dc4:	af 9a       	sbi	0x15, 7	; 21
     dc6:	85 e0       	ldi	r24, 0x05	; 5
     dc8:	8a 95       	dec	r24
     dca:	f1 f7       	brne	.-4      	; 0xdc8 <nrf24l01_write+0x2e>
	_delay_us(15);
	nrf24l01_CElo; //low CE
     dcc:	af 98       	cbi	0x15, 7	; 21
     dce:	83 e0       	ldi	r24, 0x03	; 3
     dd0:	8a 95       	dec	r24
     dd2:	f1 f7       	brne	.-4      	; 0xdd0 <nrf24l01_write+0x36>
     dd4:	00 00       	nop

	//stop if max_retries reached or send is ok
	do {
		_delay_us(10);
	}
	while( !(nrf24l01_getstatus() & (1<<NRF24L01_REG_MAX_RT | 1<<NRF24L01_REG_TX_DS)) );
     dd6:	0e 94 79 05 	call	0xaf2	; 0xaf2 <nrf24l01_getstatus>
     dda:	80 73       	andi	r24, 0x30	; 48
     ddc:	c1 f3       	breq	.-16     	; 0xdce <nrf24l01_write+0x34>

	if(nrf24l01_getstatus() & 1<<NRF24L01_REG_TX_DS)
     dde:	0e 94 79 05 	call	0xaf2	; 0xaf2 <nrf24l01_getstatus>
     de2:	c8 2f       	mov	r28, r24
		ret = 1;

	//reset PLOS_CNT
	nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH);
     de4:	85 e0       	ldi	r24, 0x05	; 5
     de6:	6c e4       	ldi	r22, 0x4C	; 76
     de8:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>

	//power down
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PWR_UP));
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	0e 94 23 04 	call	0x846	; 0x846 <nrf24l01_readregister>
     df2:	68 2f       	mov	r22, r24
     df4:	6d 7f       	andi	r22, 0xFD	; 253
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>

	//set rx mode
	nrf24l01_setRX();
     dfc:	0e 94 3c 05 	call	0xa78	; 0xa78 <nrf24l01_setRX>
/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
	uint8_t i = 0;
	uint8_t ret = 0;
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	c5 ff       	sbrs	r28, 5
     e04:	80 e0       	ldi	r24, 0x00	; 0

	//set rx mode
	nrf24l01_setRX();

	return ret;
}
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	1f 91       	pop	r17
     e0c:	0f 91       	pop	r16
     e0e:	08 95       	ret

00000e10 <nrf24l01_setpalevel>:

/*
 * set power level
 */
void nrf24l01_setpalevel() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP);
     e10:	86 e0       	ldi	r24, 0x06	; 6
     e12:	0e 94 23 04 	call	0x846	; 0x846 <nrf24l01_readregister>
  setup &= ~((1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH));

  if (NRF24L01_RF24_PA == NRF24L01_RF24_PA_MAX) {
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
     e16:	68 2f       	mov	r22, r24
     e18:	66 60       	ori	r22, 0x06	; 6
  } else {
	  //default is max power
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     e1a:	86 e0       	ldi	r24, 0x06	; 6
     e1c:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
}
     e20:	08 95       	ret

00000e22 <nrf24l01_setdatarate>:

/*
 * set datarate
 */
void nrf24l01_setdatarate() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP) ;
     e22:	86 e0       	ldi	r24, 0x06	; 6
     e24:	0e 94 23 04 	call	0x846	; 0x846 <nrf24l01_readregister>

  setup &= ~((1<<NRF24L01_REG_RF_DR_LOW) | (1<<NRF24L01_REG_RF_DR_HIGH));
     e28:	68 2f       	mov	r22, r24
     e2a:	67 7d       	andi	r22, 0xD7	; 215
    } else {
    	//default is 1Mbps
    }
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     e2c:	86 e0       	ldi	r24, 0x06	; 6
     e2e:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
}
     e32:	08 95       	ret

00000e34 <nrf24l01_setcrclength>:

/*
 * set crc length
 */
void nrf24l01_setcrclength() {
  uint8_t config = nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~((1<<NRF24L01_REG_CRCO) | (1<<NRF24L01_REG_EN_CRC));
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	0e 94 23 04 	call	0x846	; 0x846 <nrf24l01_readregister>
	  //nothing
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_8) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_16) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
	  config |= (1<<NRF24L01_REG_CRCO);
     e3a:	68 2f       	mov	r22, r24
     e3c:	6c 60       	ori	r22, 0x0C	; 12
  } else {
	  //default is disabled
  }

  nrf24l01_writeregister(NRF24L01_REG_CONFIG, config);
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
}
     e44:	08 95       	ret

00000e46 <nrf24l01_init>:
/*
 * init nrf24l01
 */
void nrf24l01_init() {
	//setup port
	NRF24L01_DDR |= (1<<NRF24L01_CSN); //output
     e46:	a6 9a       	sbi	0x14, 6	; 20
	NRF24L01_DDR |= (1<<NRF24L01_CE); //output
     e48:	a7 9a       	sbi	0x14, 7	; 20

    spi_init(); //init spi
     e4a:	0e 94 21 1c 	call	0x3842	; 0x3842 <spi_init>

    nrf24l01_CElo; //low CE
     e4e:	af 98       	cbi	0x15, 7	; 21
    nrf24l01_CSNhi; //high CSN
     e50:	ae 9a       	sbi	0x15, 6	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e52:	81 ee       	ldi	r24, 0xE1	; 225
     e54:	94 e0       	ldi	r25, 0x04	; 4
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	f1 f7       	brne	.-4      	; 0xe56 <nrf24l01_init+0x10>
     e5a:	00 c0       	rjmp	.+0      	; 0xe5c <nrf24l01_init+0x16>
     e5c:	00 00       	nop

    _delay_ms(5); //wait for the radio to init

    nrf24l01_setpalevel(); //set power level
     e5e:	0e 94 08 07 	call	0xe10	; 0xe10 <nrf24l01_setpalevel>
    nrf24l01_setdatarate(); //set data rate
     e62:	0e 94 11 07 	call	0xe22	; 0xe22 <nrf24l01_setdatarate>
    nrf24l01_setcrclength(); //set crc length
     e66:	0e 94 1a 07 	call	0xe34	; 0xe34 <nrf24l01_setcrclength>
    nrf24l01_writeregister(NRF24L01_REG_SETUP_RETR, NRF24L01_RETR); // set retries
     e6a:	84 e0       	ldi	r24, 0x04	; 4
     e6c:	67 e4       	ldi	r22, 0x47	; 71
     e6e:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_DYNPD, 0); //disable dynamic payloads
     e72:	8c e1       	ldi	r24, 0x1C	; 28
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH); //set RF channel
     e7a:	85 e0       	ldi	r24, 0x05	; 5
     e7c:	6c e4       	ldi	r22, 0x4C	; 76
     e7e:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>

	//payload size
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P0, NRF24L01_PAYLOAD);
     e82:	81 e1       	ldi	r24, 0x11	; 17
     e84:	60 e1       	ldi	r22, 0x10	; 16
     e86:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P1, NRF24L01_PAYLOAD);
     e8a:	82 e1       	ldi	r24, 0x12	; 18
     e8c:	60 e1       	ldi	r22, 0x10	; 16
     e8e:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P2, NRF24L01_PAYLOAD);
     e92:	83 e1       	ldi	r24, 0x13	; 19
     e94:	60 e1       	ldi	r22, 0x10	; 16
     e96:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P3, NRF24L01_PAYLOAD);
     e9a:	84 e1       	ldi	r24, 0x14	; 20
     e9c:	60 e1       	ldi	r22, 0x10	; 16
     e9e:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P4, NRF24L01_PAYLOAD);
     ea2:	85 e1       	ldi	r24, 0x15	; 21
     ea4:	60 e1       	ldi	r22, 0x10	; 16
     ea6:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P5, NRF24L01_PAYLOAD);
     eaa:	86 e1       	ldi	r24, 0x16	; 22
     eac:	60 e1       	ldi	r22, 0x10	; 16
     eae:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
	#endif

	//enable pipe
	nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, 0);
     eb2:	82 e0       	ldi	r24, 0x02	; 2
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P0));
     eba:	82 e0       	ldi	r24, 0x02	; 2
     ebc:	0e 94 23 04 	call	0x846	; 0x846 <nrf24l01_readregister>
     ec0:	68 2f       	mov	r22, r24
     ec2:	61 60       	ori	r22, 0x01	; 1
     ec4:	82 e0       	ldi	r24, 0x02	; 2
     ec6:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P1));
     eca:	82 e0       	ldi	r24, 0x02	; 2
     ecc:	0e 94 23 04 	call	0x846	; 0x846 <nrf24l01_readregister>
     ed0:	68 2f       	mov	r22, r24
     ed2:	62 60       	ori	r22, 0x02	; 2
     ed4:	82 e0       	ldi	r24, 0x02	; 2
     ed6:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P2));
     eda:	82 e0       	ldi	r24, 0x02	; 2
     edc:	0e 94 23 04 	call	0x846	; 0x846 <nrf24l01_readregister>
     ee0:	68 2f       	mov	r22, r24
     ee2:	64 60       	ori	r22, 0x04	; 4
     ee4:	82 e0       	ldi	r24, 0x02	; 2
     ee6:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P3));
     eea:	82 e0       	ldi	r24, 0x02	; 2
     eec:	0e 94 23 04 	call	0x846	; 0x846 <nrf24l01_readregister>
     ef0:	68 2f       	mov	r22, r24
     ef2:	68 60       	ori	r22, 0x08	; 8
     ef4:	82 e0       	ldi	r24, 0x02	; 2
     ef6:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P4));
     efa:	82 e0       	ldi	r24, 0x02	; 2
     efc:	0e 94 23 04 	call	0x846	; 0x846 <nrf24l01_readregister>
     f00:	68 2f       	mov	r22, r24
     f02:	60 61       	ori	r22, 0x10	; 16
     f04:	82 e0       	ldi	r24, 0x02	; 2
     f06:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P5));
     f0a:	82 e0       	ldi	r24, 0x02	; 2
     f0c:	0e 94 23 04 	call	0x846	; 0x846 <nrf24l01_readregister>
     f10:	68 2f       	mov	r22, r24
     f12:	60 62       	ori	r22, 0x20	; 32
     f14:	82 e0       	ldi	r24, 0x02	; 2
     f16:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
	#endif

	//auto ack
	#if NRF24L01_ACK == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P0));
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	0e 94 23 04 	call	0x846	; 0x846 <nrf24l01_readregister>
     f20:	68 2f       	mov	r22, r24
     f22:	61 60       	ori	r22, 0x01	; 1
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P1));
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	0e 94 23 04 	call	0x846	; 0x846 <nrf24l01_readregister>
     f30:	68 2f       	mov	r22, r24
     f32:	62 60       	ori	r22, 0x02	; 2
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P2));
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	0e 94 23 04 	call	0x846	; 0x846 <nrf24l01_readregister>
     f40:	68 2f       	mov	r22, r24
     f42:	64 60       	ori	r22, 0x04	; 4
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P3));
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	0e 94 23 04 	call	0x846	; 0x846 <nrf24l01_readregister>
     f50:	68 2f       	mov	r22, r24
     f52:	68 60       	ori	r22, 0x08	; 8
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P4));
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	0e 94 23 04 	call	0x846	; 0x846 <nrf24l01_readregister>
     f60:	68 2f       	mov	r22, r24
     f62:	60 61       	ori	r22, 0x10	; 16
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P5));
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	0e 94 23 04 	call	0x846	; 0x846 <nrf24l01_readregister>
     f70:	68 2f       	mov	r22, r24
     f72:	60 62       	ori	r22, 0x20	; 32
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	0e 94 4b 04 	call	0x896	; 0x896 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P4));
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P5));
	#endif

	//rx address
	nrf24l01_setrxaddr(0, nrf24l01_addr0);
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	69 ed       	ldi	r22, 0xD9	; 217
     f7e:	71 e0       	ldi	r23, 0x01	; 1
     f80:	0e 94 88 04 	call	0x910	; 0x910 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(1, nrf24l01_addr1);
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	6e ed       	ldi	r22, 0xDE	; 222
     f88:	71 e0       	ldi	r23, 0x01	; 1
     f8a:	0e 94 88 04 	call	0x910	; 0x910 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(2, nrf24l01_addr2);
     f8e:	82 e0       	ldi	r24, 0x02	; 2
     f90:	63 ee       	ldi	r22, 0xE3	; 227
     f92:	71 e0       	ldi	r23, 0x01	; 1
     f94:	0e 94 88 04 	call	0x910	; 0x910 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(3, nrf24l01_addr3);
     f98:	83 e0       	ldi	r24, 0x03	; 3
     f9a:	68 ee       	ldi	r22, 0xE8	; 232
     f9c:	71 e0       	ldi	r23, 0x01	; 1
     f9e:	0e 94 88 04 	call	0x910	; 0x910 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(4, nrf24l01_addr4);
     fa2:	84 e0       	ldi	r24, 0x04	; 4
     fa4:	6d ee       	ldi	r22, 0xED	; 237
     fa6:	71 e0       	ldi	r23, 0x01	; 1
     fa8:	0e 94 88 04 	call	0x910	; 0x910 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(5, nrf24l01_addr5);
     fac:	85 e0       	ldi	r24, 0x05	; 5
     fae:	62 ef       	ldi	r22, 0xF2	; 242
     fb0:	71 e0       	ldi	r23, 0x01	; 1
     fb2:	0e 94 88 04 	call	0x910	; 0x910 <nrf24l01_setrxaddr>

	//tx address
	nrf24l01_settxaddr(nrf24l01_addrtx);
     fb6:	87 ef       	ldi	r24, 0xF7	; 247
     fb8:	91 e0       	ldi	r25, 0x01	; 1
     fba:	0e 94 05 05 	call	0xa0a	; 0xa0a <nrf24l01_settxaddr>

	//set rx mode
	nrf24l01_setRX();
     fbe:	0e 94 3c 05 	call	0xa78	; 0xa78 <nrf24l01_setRX>
}
     fc2:	08 95       	ret

00000fc4 <sMO_init>:
static void clearInEvents(SMO* handle);
static void clearOutEvents(SMO* handle);


void sMO_init(SMO* handle)
{
     fc4:	fc 01       	movw	r30, r24
	int i;

	for (i = 0; i < SMO_MAX_ORTHOGONAL_STATES; ++i)
		handle->stateConfVector[i] = SMO_last_state;
     fc6:	89 e2       	ldi	r24, 0x29	; 41
     fc8:	80 83       	st	Z, r24
     fca:	81 83       	std	Z+1, r24	; 0x01
	
	
	handle->stateConfVectorPosition = 0;
     fcc:	13 82       	std	Z+3, r1	; 0x03
     fce:	12 82       	std	Z+2, r1	; 0x02

	// TODO: initialize all events ...
	// TODO: initialize all variables ... (set default values - here or inenter sequence ?!?)

}
     fd0:	08 95       	ret

00000fd2 <sMO_enter>:

void sMO_enter(SMO* handle)
{
     fd2:	1f 93       	push	r17
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	ec 01       	movw	r28, r24
	sMO_entryaction(handle);
	/* Default enter sequence for region main region */
	/* Default react sequence for initial entry  */
	/* Default enter sequence for state on */
	/* Entry action for state 'on'. */
	handle->iface.lightOn = bool_true;
     fda:	11 e0       	ldi	r17, 0x01	; 1
     fdc:	1d a7       	lds	r17, 0x7d
	/* Default enter sequence for region r1 */
	/* Default react sequence for initial entry  */
	/* Default enter sequence for state Init */
	/* Entry action for state 'Init'. */
	sMO_setTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) , 3 * 1000, bool_false);
     fde:	c8 96       	adiw	r24, 0x38	; 56
     fe0:	48 eb       	ldi	r20, 0xB8	; 184
     fe2:	5b e0       	ldi	r21, 0x0B	; 11
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	0e 94 cc 03 	call	0x798	; 0x798 <sMO_setTimer>
	handle->iface.tableId = 1;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	a0 e0       	ldi	r26, 0x00	; 0
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	8a ab       	sts	0x5a, r24
     ff8:	9b ab       	sts	0x5b, r25
     ffa:	ac ab       	sts	0x5c, r26
     ffc:	bd ab       	sts	0x5d, r27
	sMOIfaceLCD_init();
     ffe:	0e 94 98 02 	call	0x530	; 0x530 <sMOIfaceLCD_init>
	sMOIfaceKEYPAD_init();
    1002:	0e 94 59 02 	call	0x4b2	; 0x4b2 <sMOIfaceKEYPAD_init>
	sMOIfaceRF_init();
    1006:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <sMOIfaceRF_init>
	sMOIfaceLCD_clear();
    100a:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
	sMOIfaceLCD_writeString("Waitting...");
    100e:	8c ef       	ldi	r24, 0xFC	; 252
    1010:	91 e0       	ldi	r25, 0x01	; 1
    1012:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
	handle->stateConfVector[0] = SMO_main_region_on_r1_Init;
    1016:	18 83       	st	Y, r17
	handle->stateConfVectorPosition = 0;
    1018:	1b 82       	std	Y+3, r1	; 0x03
    101a:	1a 82       	std	Y+2, r1	; 0x02
}
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	08 95       	ret

00001024 <sMO_exit>:

void sMO_exit(SMO* handle)
{
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	ec 01       	movw	r28, r24
	/* Default exit sequence for statechart SMO */
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of main region) at position 0... */
	switch(handle->stateConfVector[ 0 ]) {
    102a:	88 81       	ld	r24, Y
    102c:	83 30       	cpi	r24, 0x03	; 3
    102e:	69 f0       	breq	.+26     	; 0x104a <sMO_exit+0x26>
    1030:	84 30       	cpi	r24, 0x04	; 4
    1032:	81 f0       	breq	.+32     	; 0x1054 <sMO_exit+0x30>
    1034:	81 30       	cpi	r24, 0x01	; 1
    1036:	91 f4       	brne	.+36     	; 0x105c <sMO_exit+0x38>
		case SMO_main_region_on_r1_Init : {
			/* Default exit sequence for state Init */
			handle->stateConfVector[0] = SMO_last_state;
    1038:	89 e2       	ldi	r24, 0x29	; 41
    103a:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    103c:	1b 82       	std	Y+3, r1	; 0x03
    103e:	1a 82       	std	Y+2, r1	; 0x02
			/* Exit action for state 'Init'. */
			sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) );		
    1040:	ce 01       	movw	r24, r28
    1042:	c8 96       	adiw	r24, 0x38	; 56
    1044:	0e 94 cf 03 	call	0x79e	; 0x79e <sMO_unsetTimer>
			break;
    1048:	09 c0       	rjmp	.+18     	; 0x105c <sMO_exit+0x38>
		}
		case SMO_main_region_on_r1_Running_keypad_CheckKey : {
			/* Default exit sequence for state CheckKey */
			handle->stateConfVector[0] = SMO_last_state;
    104a:	89 e2       	ldi	r24, 0x29	; 41
    104c:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    104e:	1b 82       	std	Y+3, r1	; 0x03
    1050:	1a 82       	std	Y+2, r1	; 0x02
			break;
    1052:	04 c0       	rjmp	.+8      	; 0x105c <sMO_exit+0x38>
		}
		case SMO_main_region_on_r1_Running_keypad_CheckKeyDown : {
			/* Default exit sequence for state CheckKeyDown */
			handle->stateConfVector[0] = SMO_last_state;
    1054:	89 e2       	ldi	r24, 0x29	; 41
    1056:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    1058:	1b 82       	std	Y+3, r1	; 0x03
    105a:	1a 82       	std	Y+2, r1	; 0x02
			break;
		}
		default: break;
	}
	/* Handle exit of all possible states (of main region) at position 1... */
	switch(handle->stateConfVector[ 1 ]) {
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	05 97       	sbiw	r24, 0x05	; 5
    1062:	84 32       	cpi	r24, 0x24	; 36
    1064:	91 05       	cpc	r25, r1
    1066:	08 f0       	brcs	.+2      	; 0x106a <sMO_exit+0x46>
    1068:	ed c0       	rjmp	.+474    	; 0x1244 <__stack+0x145>
    106a:	8a 5b       	subi	r24, 0xBA	; 186
    106c:	9f 4f       	sbci	r25, 0xFF	; 255
    106e:	fc 01       	movw	r30, r24
    1070:	ee 0f       	add	r30, r30
    1072:	ff 1f       	adc	r31, r31
    1074:	05 90       	lpm	r0, Z+
    1076:	f4 91       	lpm	r31, Z
    1078:	e0 2d       	mov	r30, r0
    107a:	09 94       	ijmp
		case SMO_main_region_on_r1_Running_running_main_ShowMenu : {
			/* Default exit sequence for state ShowMenu */
			handle->stateConfVector[1] = SMO_last_state;
    107c:	89 e2       	ldi	r24, 0x29	; 41
    107e:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	9b 83       	std	Y+3, r25	; 0x03
    1086:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1088:	dd c0       	rjmp	.+442    	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
			/* Default exit sequence for state ShowCode */
			handle->stateConfVector[1] = SMO_last_state;
    108a:	89 e2       	ldi	r24, 0x29	; 41
    108c:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	9b 83       	std	Y+3, r25	; 0x03
    1094:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1096:	d6 c0       	rjmp	.+428    	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
			/* Default exit sequence for state EnterCode */
			handle->stateConfVector[1] = SMO_last_state;
    1098:	89 e2       	ldi	r24, 0x29	; 41
    109a:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	9b 83       	std	Y+3, r25	; 0x03
    10a2:	8a 83       	std	Y+2, r24	; 0x02
			break;
    10a4:	cf c0       	rjmp	.+414    	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
			/* Default exit sequence for state CheckKeyPress1 */
			handle->stateConfVector[1] = SMO_last_state;
    10a6:	89 e2       	ldi	r24, 0x29	; 41
    10a8:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	9b 83       	std	Y+3, r25	; 0x03
    10b0:	8a 83       	std	Y+2, r24	; 0x02
			break;
    10b2:	c8 c0       	rjmp	.+400    	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
			/* Default exit sequence for state CheckCode0 */
			handle->stateConfVector[1] = SMO_last_state;
    10b4:	89 e2       	ldi	r24, 0x29	; 41
    10b6:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	9b 83       	std	Y+3, r25	; 0x03
    10be:	8a 83       	std	Y+2, r24	; 0x02
			break;
    10c0:	c1 c0       	rjmp	.+386    	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
			/* Default exit sequence for state ShowAmount */
			handle->stateConfVector[1] = SMO_last_state;
    10c2:	89 e2       	ldi	r24, 0x29	; 41
    10c4:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	9b 83       	std	Y+3, r25	; 0x03
    10cc:	8a 83       	std	Y+2, r24	; 0x02
			break;
    10ce:	ba c0       	rjmp	.+372    	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
			/* Default exit sequence for state CheckKeyPress2 */
			handle->stateConfVector[1] = SMO_last_state;
    10d0:	89 e2       	ldi	r24, 0x29	; 41
    10d2:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	9b 83       	std	Y+3, r25	; 0x03
    10da:	8a 83       	std	Y+2, r24	; 0x02
			break;
    10dc:	b3 c0       	rjmp	.+358    	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
			/* Default exit sequence for state EnterAmount */
			handle->stateConfVector[1] = SMO_last_state;
    10de:	89 e2       	ldi	r24, 0x29	; 41
    10e0:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	9b 83       	std	Y+3, r25	; 0x03
    10e8:	8a 83       	std	Y+2, r24	; 0x02
			break;
    10ea:	ac c0       	rjmp	.+344    	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
			/* Default exit sequence for final state. */
			handle->stateConfVector[1] = SMO_last_state;
    10ec:	89 e2       	ldi	r24, 0x29	; 41
    10ee:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	9b 83       	std	Y+3, r25	; 0x03
    10f6:	8a 83       	std	Y+2, r24	; 0x02
			break;
    10f8:	a5 c0       	rjmp	.+330    	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_KeepOrdering : {
			/* Default exit sequence for state KeepOrdering */
			handle->stateConfVector[1] = SMO_last_state;
    10fa:	89 e2       	ldi	r24, 0x29	; 41
    10fc:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	9b 83       	std	Y+3, r25	; 0x03
    1104:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1106:	9e c0       	rjmp	.+316    	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_Exit : {
			/* Default exit sequence for state Exit */
			handle->stateConfVector[1] = SMO_last_state;
    1108:	89 e2       	ldi	r24, 0x29	; 41
    110a:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	9b 83       	std	Y+3, r25	; 0x03
    1112:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1114:	97 c0       	rjmp	.+302    	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress3 : {
			/* Default exit sequence for state CheckKeyPress3 */
			handle->stateConfVector[1] = SMO_last_state;
    1116:	89 e2       	ldi	r24, 0x29	; 41
    1118:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	9b 83       	std	Y+3, r25	; 0x03
    1120:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1122:	90 c0       	rjmp	.+288    	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_MenuA : {
			/* Default exit sequence for state MenuA */
			handle->stateConfVector[1] = SMO_last_state;
    1124:	89 e2       	ldi	r24, 0x29	; 41
    1126:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	9b 83       	std	Y+3, r25	; 0x03
    112e:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1130:	89 c0       	rjmp	.+274    	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_CheckKeyPress : {
			/* Default exit sequence for state CheckKeyPress */
			handle->stateConfVector[1] = SMO_last_state;
    1132:	89 e2       	ldi	r24, 0x29	; 41
    1134:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	9b 83       	std	Y+3, r25	; 0x03
    113c:	8a 83       	std	Y+2, r24	; 0x02
			break;
    113e:	82 c0       	rjmp	.+260    	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : {
			/* Default exit sequence for state Send */
			handle->stateConfVector[1] = SMO_last_state;
    1140:	89 e2       	ldi	r24, 0x29	; 41
    1142:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	9b 83       	std	Y+3, r25	; 0x03
    114a:	8a 83       	std	Y+2, r24	; 0x02
			break;
    114c:	7b c0       	rjmp	.+246    	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : {
			/* Default exit sequence for state Check */
			handle->stateConfVector[1] = SMO_last_state;
    114e:	89 e2       	ldi	r24, 0x29	; 41
    1150:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	9b 83       	std	Y+3, r25	; 0x03
    1158:	8a 83       	std	Y+2, r24	; 0x02
			break;
    115a:	74 c0       	rjmp	.+232    	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : {
			/* Default exit sequence for final state. */
			handle->stateConfVector[1] = SMO_last_state;
    115c:	89 e2       	ldi	r24, 0x29	; 41
    115e:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	9b 83       	std	Y+3, r25	; 0x03
    1166:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1168:	6d c0       	rjmp	.+218    	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail1 : {
			/* Default exit sequence for state SendFail1 */
			handle->stateConfVector[1] = SMO_last_state;
    116a:	89 e2       	ldi	r24, 0x29	; 41
    116c:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	9b 83       	std	Y+3, r25	; 0x03
    1174:	8a 83       	std	Y+2, r24	; 0x02
			/* Exit action for state 'SendFail1'. */
			sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail1_time_event_0_raised) );		
    1176:	ce 01       	movw	r24, r28
    1178:	c9 96       	adiw	r24, 0x39	; 57
    117a:	0e 94 cf 03 	call	0x79e	; 0x79e <sMO_unsetTimer>
			break;
    117e:	62 c0       	rjmp	.+196    	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult : {
			/* Default exit sequence for state ResetResult */
			handle->stateConfVector[1] = SMO_last_state;
    1180:	89 e2       	ldi	r24, 0x29	; 41
    1182:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	9b 83       	std	Y+3, r25	; 0x03
    118a:	8a 83       	std	Y+2, r24	; 0x02
			break;
    118c:	5b c0       	rjmp	.+182    	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_MenuB : {
			/* Default exit sequence for state MenuB */
			handle->stateConfVector[1] = SMO_last_state;
    118e:	89 e2       	ldi	r24, 0x29	; 41
    1190:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	9b 83       	std	Y+3, r25	; 0x03
    1198:	8a 83       	std	Y+2, r24	; 0x02
			break;
    119a:	54 c0       	rjmp	.+168    	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_MenuC : {
			/* Default exit sequence for state MenuC */
			handle->stateConfVector[1] = SMO_last_state;
    119c:	89 e2       	ldi	r24, 0x29	; 41
    119e:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	9b 83       	std	Y+3, r25	; 0x03
    11a6:	8a 83       	std	Y+2, r24	; 0x02
			break;
    11a8:	4d c0       	rjmp	.+154    	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_MenuD : {
			/* Default exit sequence for state MenuD */
			handle->stateConfVector[1] = SMO_last_state;
    11aa:	89 e2       	ldi	r24, 0x29	; 41
    11ac:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	9b 83       	std	Y+3, r25	; 0x03
    11b4:	8a 83       	std	Y+2, r24	; 0x02
			break;
    11b6:	46 c0       	rjmp	.+140    	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation : {
			/* Default exit sequence for state RequestConfirmation */
			handle->stateConfVector[1] = SMO_last_state;
    11b8:	89 e2       	ldi	r24, 0x29	; 41
    11ba:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	9b 83       	std	Y+3, r25	; 0x03
    11c2:	8a 83       	std	Y+2, r24	; 0x02
			break;
    11c4:	3f c0       	rjmp	.+126    	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_Confirm : {
			/* Default exit sequence for state Confirm */
			handle->stateConfVector[1] = SMO_last_state;
    11c6:	89 e2       	ldi	r24, 0x29	; 41
    11c8:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	9b 83       	std	Y+3, r25	; 0x03
    11d0:	8a 83       	std	Y+2, r24	; 0x02
			/* Exit action for state 'Confirm'. */
			sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Confirm_time_event_0_raised) );		
    11d2:	ce 01       	movw	r24, r28
    11d4:	ca 96       	adiw	r24, 0x3a	; 58
    11d6:	0e 94 cf 03 	call	0x79e	; 0x79e <sMO_unsetTimer>
			break;
    11da:	34 c0       	rjmp	.+104    	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress : {
			/* Default exit sequence for state CheckKeyPress */
			handle->stateConfVector[1] = SMO_last_state;
    11dc:	89 e2       	ldi	r24, 0x29	; 41
    11de:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	9b 83       	std	Y+3, r25	; 0x03
    11e6:	8a 83       	std	Y+2, r24	; 0x02
			break;
    11e8:	2d c0       	rjmp	.+90     	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_ : {
			/* Default exit sequence for final state. */
			handle->stateConfVector[1] = SMO_last_state;
    11ea:	89 e2       	ldi	r24, 0x29	; 41
    11ec:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	9b 83       	std	Y+3, r25	; 0x03
    11f4:	8a 83       	std	Y+2, r24	; 0x02
			break;
    11f6:	26 c0       	rjmp	.+76     	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Send : {
			/* Default exit sequence for state Send */
			handle->stateConfVector[1] = SMO_last_state;
    11f8:	89 e2       	ldi	r24, 0x29	; 41
    11fa:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	9b 83       	std	Y+3, r25	; 0x03
    1202:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1204:	1f c0       	rjmp	.+62     	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Check : {
			/* Default exit sequence for state Check */
			handle->stateConfVector[1] = SMO_last_state;
    1206:	89 e2       	ldi	r24, 0x29	; 41
    1208:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	9b 83       	std	Y+3, r25	; 0x03
    1210:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1212:	18 c0       	rjmp	.+48     	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_ : {
			/* Default exit sequence for final state. */
			handle->stateConfVector[1] = SMO_last_state;
    1214:	89 e2       	ldi	r24, 0x29	; 41
    1216:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	9b 83       	std	Y+3, r25	; 0x03
    121e:	8a 83       	std	Y+2, r24	; 0x02
			break;
    1220:	11 c0       	rjmp	.+34     	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2 : {
			/* Default exit sequence for state SendFail2 */
			handle->stateConfVector[1] = SMO_last_state;
    1222:	89 e2       	ldi	r24, 0x29	; 41
    1224:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	9b 83       	std	Y+3, r25	; 0x03
    122c:	8a 83       	std	Y+2, r24	; 0x02
			/* Exit action for state 'SendFail2'. */
			sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail2_time_event_0_raised) );		
    122e:	ce 01       	movw	r24, r28
    1230:	cb 96       	adiw	r24, 0x3b	; 59
    1232:	0e 94 cf 03 	call	0x79e	; 0x79e <sMO_unsetTimer>
			break;
    1236:	06 c0       	rjmp	.+12     	; 0x1244 <__stack+0x145>
		}
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult : {
			/* Default exit sequence for state ResetResult */
			handle->stateConfVector[1] = SMO_last_state;
    1238:	89 e2       	ldi	r24, 0x29	; 41
    123a:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	9b 83       	std	Y+3, r25	; 0x03
    1242:	8a 83       	std	Y+2, r24	; 0x02
			break;
		}
		default: break;
	}
	sMO_exitaction(handle);
}
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	08 95       	ret

0000124a <sMO_runCycle>:
}

static void clearOutEvents(SMO* handle) {
}

void sMO_runCycle(SMO* handle) {
    124a:	2f 92       	push	r2
    124c:	3f 92       	push	r3
    124e:	4f 92       	push	r4
    1250:	5f 92       	push	r5
    1252:	6f 92       	push	r6
    1254:	7f 92       	push	r7
    1256:	8f 92       	push	r8
    1258:	9f 92       	push	r9
    125a:	af 92       	push	r10
    125c:	bf 92       	push	r11
    125e:	cf 92       	push	r12
    1260:	df 92       	push	r13
    1262:	ef 92       	push	r14
    1264:	ff 92       	push	r15
    1266:	0f 93       	push	r16
    1268:	1f 93       	push	r17
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	ec 01       	movw	r28, r24
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
    1270:	1b 82       	std	Y+3, r1	; 0x03
    1272:	1a 82       	std	Y+2, r1	; 0x02
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 e0       	ldi	r25, 0x00	; 0
		handle->stateConfVectorPosition = 1;
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state ResetResult */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    1278:	01 e0       	ldi	r16, 0x01	; 1
    127a:	10 e0       	ldi	r17, 0x00	; 0
			/* Default enter sequence for state null */
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_;
    127c:	0f 2e       	mov	r0, r31
    127e:	f6 e2       	ldi	r31, 0x26	; 38
    1280:	3f 2e       	mov	r3, r31
    1282:	f0 2d       	mov	r31, r0
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
			/* Default enter sequence for state CheckKeyPress */
			/* Entry action for state 'CheckKeyPress'. */
			handle->ifaceKEYPAD.lastkey = 0;
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress;
    1284:	0f 2e       	mov	r0, r31
    1286:	f1 e2       	ldi	r31, 0x21	; 33
    1288:	2f 2e       	mov	r2, r31
    128a:	f0 2d       	mov	r31, r0
					/* Default exit sequence for state CheckKeyPress */
					handle->stateConfVector[1] = SMO_last_state;
					handle->stateConfVectorPosition = 1;
					/* Default enter sequence for state MenuD */
					/* Entry action for state 'MenuD'. */
					handle->iface.menuId = 4;
    128c:	cc 24       	eor	r12, r12
    128e:	dd 24       	eor	r13, r13
    1290:	76 01       	movw	r14, r12
    1292:	68 94       	set
    1294:	c2 f8       	bld	r12, 2
				/* Default exit sequence for state CheckKeyPress */
				handle->stateConfVector[1] = SMO_last_state;
				handle->stateConfVectorPosition = 1;
				/* Default enter sequence for state MenuC */
				/* Entry action for state 'MenuC'. */
				handle->iface.menuId = 3;
    1296:	0f 2e       	mov	r0, r31
    1298:	f3 e0       	ldi	r31, 0x03	; 3
    129a:	8f 2e       	mov	r8, r31
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	9f 2e       	mov	r9, r31
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	af 2e       	mov	r10, r31
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	bf 2e       	mov	r11, r31
    12a8:	f0 2d       	mov	r31, r0
			/* Default exit sequence for state CheckKeyPress */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
			/* Default enter sequence for state MenuB */
			/* Entry action for state 'MenuB'. */
			handle->iface.menuId = 2;
    12aa:	44 24       	eor	r4, r4
    12ac:	55 24       	eor	r5, r5
    12ae:	32 01       	movw	r6, r4
    12b0:	68 94       	set
    12b2:	41 f8       	bld	r4, 1
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
			
		switch (handle->stateConfVector[handle->stateConfVectorPosition]) {
    12b4:	8c 0f       	add	r24, r28
    12b6:	9d 1f       	adc	r25, r29
    12b8:	dc 01       	movw	r26, r24
    12ba:	ec 91       	ld	r30, X
    12bc:	8e 2f       	mov	r24, r30
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	fc 01       	movw	r30, r24
    12c2:	31 97       	sbiw	r30, 0x01	; 1
    12c4:	e8 32       	cpi	r30, 0x28	; 40
    12c6:	f1 05       	cpc	r31, r1
    12c8:	10 f0       	brcs	.+4      	; 0x12ce <sMO_runCycle+0x84>
    12ca:	0c 94 bf 19 	jmp	0x337e	; 0x337e <sMO_runCycle+0x2134>
    12ce:	e6 59       	subi	r30, 0x96	; 150
    12d0:	ff 4f       	sbci	r31, 0xFF	; 255
    12d2:	ee 0f       	add	r30, r30
    12d4:	ff 1f       	adc	r31, r31
    12d6:	05 90       	lpm	r0, Z+
    12d8:	f4 91       	lpm	r31, Z
    12da:	e0 2d       	mov	r30, r0
    12dc:	09 94       	ijmp
}

/* The reactions of state Init. */
static void sMO_react_main_region_on_r1_Init(SMO* handle) {
	/* The reactions of state Init. */
	if (handle->timeEvents.Init_time_event_0_raised) { 
    12de:	88 ad       	sts	0x68, r24
    12e0:	88 23       	and	r24, r24
    12e2:	11 f4       	brne	.+4      	; 0x12e8 <sMO_runCycle+0x9e>
    12e4:	0c 94 bf 19 	jmp	0x337e	; 0x337e <sMO_runCycle+0x2134>
		/* Default exit sequence for state Init */
		handle->stateConfVector[0] = SMO_last_state;
    12e8:	89 e2       	ldi	r24, 0x29	; 41
    12ea:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    12ec:	1b 82       	std	Y+3, r1	; 0x03
    12ee:	1a 82       	std	Y+2, r1	; 0x02
		/* Exit action for state 'Init'. */
		sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) );		
    12f0:	ce 01       	movw	r24, r28
    12f2:	c8 96       	adiw	r24, 0x38	; 56
    12f4:	0e 94 cf 03 	call	0x79e	; 0x79e <sMO_unsetTimer>
		/* Default enter sequence for state Running */
		/* Default enter sequence for region keypad */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    12f8:	0e 94 52 02 	call	0x4a4	; 0x4a4 <sMOIfaceKEYPAD_checkpress>
    12fc:	dc 01       	movw	r26, r24
    12fe:	cb 01       	movw	r24, r22
    1300:	8c 83       	std	Y+4, r24	; 0x04
    1302:	9d 83       	std	Y+5, r25	; 0x05
    1304:	ae 83       	std	Y+6, r26	; 0x06
    1306:	bf 83       	std	Y+7, r27	; 0x07
		handle->ifaceKEYPAD.key_down = bool_false;
    1308:	1c 86       	std	Y+12, r1	; 0x0c
		handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKey;
    130a:	83 e0       	ldi	r24, 0x03	; 3
    130c:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    130e:	1b 82       	std	Y+3, r1	; 0x03
    1310:	1a 82       	std	Y+2, r1	; 0x02
		/* Default enter sequence for region running main */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1312:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    1316:	88 e0       	ldi	r24, 0x08	; 8
    1318:	92 e0       	ldi	r25, 0x02	; 2
    131a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    131e:	87 e1       	ldi	r24, 0x17	; 23
    1320:	92 e0       	ldi	r25, 0x02	; 2
    1322:	40 e0       	ldi	r20, 0x00	; 0
    1324:	50 e0       	ldi	r21, 0x00	; 0
    1326:	ba 01       	movw	r22, r20
    1328:	01 e0       	ldi	r16, 0x01	; 1
    132a:	10 e0       	ldi	r17, 0x00	; 0
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1334:	1e a6       	lds	r17, 0xbe
    1336:	1f a6       	lds	r17, 0xbf
    1338:	18 aa       	sts	0x98, r17
    133a:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    133c:	85 e0       	ldi	r24, 0x05	; 5
    133e:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	9b 83       	std	Y+3, r25	; 0x03
    1346:	8a 83       	std	Y+2, r24	; 0x02
    1348:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <sMO_runCycle+0x2178>
}

/* The reactions of state CheckKey. */
static void sMO_react_main_region_on_r1_Running_keypad_CheckKey(SMO* handle) {
	/* The reactions of state CheckKey. */
	if (handle->ifaceKEYPAD.key != 0) { 
    134c:	8c 81       	ldd	r24, Y+4	; 0x04
    134e:	9d 81       	ldd	r25, Y+5	; 0x05
    1350:	ae 81       	ldd	r26, Y+6	; 0x06
    1352:	bf 81       	ldd	r27, Y+7	; 0x07
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	a1 05       	cpc	r26, r1
    1358:	b1 05       	cpc	r27, r1
    135a:	c1 f0       	breq	.+48     	; 0x138c <sMO_runCycle+0x142>
		/* Default exit sequence for state CheckKey */
		handle->stateConfVector[0] = SMO_last_state;
    135c:	29 e2       	ldi	r18, 0x29	; 41
    135e:	28 83       	st	Y, r18
		handle->stateConfVectorPosition = 0;
    1360:	1b 82       	std	Y+3, r1	; 0x03
    1362:	1a 82       	std	Y+2, r1	; 0x02
		handle->ifaceKEYPAD.lastkey = handle->ifaceKEYPAD.key;
    1364:	88 87       	std	Y+8, r24	; 0x08
    1366:	99 87       	std	Y+9, r25	; 0x09
    1368:	aa 87       	std	Y+10, r26	; 0x0a
    136a:	bb 87       	std	Y+11, r27	; 0x0b
		/* Default enter sequence for state CheckKeyDown */
		/* Entry action for state 'CheckKeyDown'. */
		handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    136c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <sMOIfaceKEYPAD_checkpress>
    1370:	dc 01       	movw	r26, r24
    1372:	cb 01       	movw	r24, r22
    1374:	8c 83       	std	Y+4, r24	; 0x04
    1376:	9d 83       	std	Y+5, r25	; 0x05
    1378:	ae 83       	std	Y+6, r26	; 0x06
    137a:	bf 83       	std	Y+7, r27	; 0x07
		handle->ifaceKEYPAD.key_down = bool_true;
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	8c 87       	std	Y+12, r24	; 0x0c
		handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKeyDown;
    1380:	84 e0       	ldi	r24, 0x04	; 4
    1382:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    1384:	1b 82       	std	Y+3, r1	; 0x03
    1386:	1a 82       	std	Y+2, r1	; 0x02
    1388:	0c 94 e7 19 	jmp	0x33ce	; 0x33ce <sMO_runCycle+0x2184>
	}  else {
		if (handle->ifaceKEYPAD.key == 0) { 
			/* Default enter sequence for state CheckKey */
			/* Entry action for state 'CheckKey'. */
			handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    138c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <sMOIfaceKEYPAD_checkpress>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	8c 83       	std	Y+4, r24	; 0x04
    1396:	9d 83       	std	Y+5, r25	; 0x05
    1398:	ae 83       	std	Y+6, r26	; 0x06
    139a:	bf 83       	std	Y+7, r27	; 0x07
			handle->ifaceKEYPAD.key_down = bool_false;
    139c:	1c 86       	std	Y+12, r1	; 0x0c
			handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKey;
    139e:	83 e0       	ldi	r24, 0x03	; 3
    13a0:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    13a2:	1b 82       	std	Y+3, r1	; 0x03
    13a4:	1a 82       	std	Y+2, r1	; 0x02
    13a6:	0c 94 e7 19 	jmp	0x33ce	; 0x33ce <sMO_runCycle+0x2184>
}

/* The reactions of state CheckKeyDown. */
static void sMO_react_main_region_on_r1_Running_keypad_CheckKeyDown(SMO* handle) {
	/* The reactions of state CheckKeyDown. */
	if (handle->ifaceKEYPAD.key == 0) { 
    13aa:	8c 81       	ldd	r24, Y+4	; 0x04
    13ac:	9d 81       	ldd	r25, Y+5	; 0x05
    13ae:	ae 81       	ldd	r26, Y+6	; 0x06
    13b0:	bf 81       	ldd	r27, Y+7	; 0x07
    13b2:	00 97       	sbiw	r24, 0x00	; 0
    13b4:	a1 05       	cpc	r26, r1
    13b6:	b1 05       	cpc	r27, r1
    13b8:	a9 f4       	brne	.+42     	; 0x13e4 <sMO_runCycle+0x19a>
		/* Default exit sequence for state CheckKeyDown */
		handle->stateConfVector[0] = SMO_last_state;
    13ba:	89 e2       	ldi	r24, 0x29	; 41
    13bc:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    13be:	1b 82       	std	Y+3, r1	; 0x03
    13c0:	1a 82       	std	Y+2, r1	; 0x02
		handle->ifaceKEYPAD.key_pressed_raised = bool_true;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	8d 87       	std	Y+13, r24	; 0x0d
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    13c6:	0e 94 52 02 	call	0x4a4	; 0x4a4 <sMOIfaceKEYPAD_checkpress>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	8c 83       	std	Y+4, r24	; 0x04
    13d0:	9d 83       	std	Y+5, r25	; 0x05
    13d2:	ae 83       	std	Y+6, r26	; 0x06
    13d4:	bf 83       	std	Y+7, r27	; 0x07
		handle->ifaceKEYPAD.key_down = bool_false;
    13d6:	1c 86       	std	Y+12, r1	; 0x0c
		handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKey;
    13d8:	83 e0       	ldi	r24, 0x03	; 3
    13da:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    13dc:	1b 82       	std	Y+3, r1	; 0x03
    13de:	1a 82       	std	Y+2, r1	; 0x02
    13e0:	0c 94 e7 19 	jmp	0x33ce	; 0x33ce <sMO_runCycle+0x2184>
	}  else {
		if (handle->ifaceKEYPAD.key != 0) { 
			/* Default enter sequence for state CheckKeyDown */
			/* Entry action for state 'CheckKeyDown'. */
			handle->ifaceKEYPAD.key = sMOIfaceKEYPAD_checkpress();
    13e4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <sMOIfaceKEYPAD_checkpress>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	8c 83       	std	Y+4, r24	; 0x04
    13ee:	9d 83       	std	Y+5, r25	; 0x05
    13f0:	ae 83       	std	Y+6, r26	; 0x06
    13f2:	bf 83       	std	Y+7, r27	; 0x07
			handle->ifaceKEYPAD.key_down = bool_true;
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	8c 87       	std	Y+12, r24	; 0x0c
			handle->stateConfVector[0] = SMO_main_region_on_r1_Running_keypad_CheckKeyDown;
    13f8:	84 e0       	ldi	r24, 0x04	; 4
    13fa:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    13fc:	1b 82       	std	Y+3, r1	; 0x03
    13fe:	1a 82       	std	Y+2, r1	; 0x02
    1400:	0c 94 e7 19 	jmp	0x33ce	; 0x33ce <sMO_runCycle+0x2184>
static void sMO_react_main_region_on_r1_Running_running_main_ShowMenu(SMO* handle) {
	/* The reactions of state ShowMenu. */
	if (bool_true) { 
		/* Default exit sequence for state ShowMenu */
		handle->stateConfVector[1] = SMO_last_state;
		handle->stateConfVectorPosition = 1;
    1404:	1b 83       	std	Y+3, r17	; 0x03
    1406:	0a 83       	std	Y+2, r16	; 0x02
		/* Default enter sequence for state CheckKeyPress */
		/* Entry action for state 'CheckKeyPress'. */
		handle->ifaceKEYPAD.lastkey = 0;
    1408:	18 86       	std	Y+8, r1	; 0x08
    140a:	19 86       	std	Y+9, r1	; 0x09
    140c:	1a 86       	std	Y+10, r1	; 0x0a
    140e:	1b 86       	std	Y+11, r1	; 0x0b
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_CheckKeyPress;
    1410:	84 e1       	ldi	r24, 0x14	; 20
    1412:	89 83       	std	Y+1, r24	; 0x01
    1414:	0c 94 bf 19 	jmp	0x337e	; 0x337e <sMO_runCycle+0x2134>
}

/* The reactions of state ShowCode. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode(SMO* handle) {
	/* The reactions of state ShowCode. */
	if (handle->iface.menuId == 0) { 
    1418:	8e a5       	lds	r24, 0x6e
    141a:	9f a5       	lds	r25, 0x6f
    141c:	a8 a9       	sts	0x48, r26
    141e:	b9 a9       	sts	0x49, r27
    1420:	00 97       	sbiw	r24, 0x00	; 0
    1422:	a1 05       	cpc	r26, r1
    1424:	b1 05       	cpc	r27, r1
    1426:	09 f0       	breq	.+2      	; 0x142a <sMO_runCycle+0x1e0>
    1428:	91 c0       	rjmp	.+290    	; 0x154c <sMO_runCycle+0x302>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	8c 30       	cpi	r24, 0x0C	; 12
    142e:	09 f4       	brne	.+2      	; 0x1432 <sMO_runCycle+0x1e8>
    1430:	47 c0       	rjmp	.+142    	; 0x14c0 <sMO_runCycle+0x276>
    1432:	8d 30       	cpi	r24, 0x0D	; 13
    1434:	80 f4       	brcc	.+32     	; 0x1456 <sMO_runCycle+0x20c>
    1436:	89 30       	cpi	r24, 0x09	; 9
    1438:	71 f1       	breq	.+92     	; 0x1496 <sMO_runCycle+0x24c>
    143a:	8a 30       	cpi	r24, 0x0A	; 10
    143c:	30 f4       	brcc	.+12     	; 0x144a <sMO_runCycle+0x200>
    143e:	87 30       	cpi	r24, 0x07	; 7
    1440:	e1 f0       	breq	.+56     	; 0x147a <sMO_runCycle+0x230>
    1442:	88 30       	cpi	r24, 0x08	; 8
    1444:	09 f0       	breq	.+2      	; 0x1448 <sMO_runCycle+0x1fe>
    1446:	65 c0       	rjmp	.+202    	; 0x1512 <sMO_runCycle+0x2c8>
    1448:	1f c0       	rjmp	.+62     	; 0x1488 <sMO_runCycle+0x23e>
    144a:	8a 30       	cpi	r24, 0x0A	; 10
    144c:	59 f1       	breq	.+86     	; 0x14a4 <sMO_runCycle+0x25a>
    144e:	8b 30       	cpi	r24, 0x0B	; 11
    1450:	09 f0       	breq	.+2      	; 0x1454 <sMO_runCycle+0x20a>
    1452:	5f c0       	rjmp	.+190    	; 0x1512 <sMO_runCycle+0x2c8>
    1454:	2e c0       	rjmp	.+92     	; 0x14b2 <sMO_runCycle+0x268>
    1456:	80 31       	cpi	r24, 0x10	; 16
    1458:	09 f4       	brne	.+2      	; 0x145c <sMO_runCycle+0x212>
    145a:	47 c0       	rjmp	.+142    	; 0x14ea <sMO_runCycle+0x2a0>
    145c:	81 31       	cpi	r24, 0x11	; 17
    145e:	30 f4       	brcc	.+12     	; 0x146c <sMO_runCycle+0x222>
    1460:	8e 30       	cpi	r24, 0x0E	; 14
    1462:	a9 f1       	breq	.+106    	; 0x14ce <sMO_runCycle+0x284>
    1464:	8f 30       	cpi	r24, 0x0F	; 15
    1466:	09 f0       	breq	.+2      	; 0x146a <sMO_runCycle+0x220>
    1468:	54 c0       	rjmp	.+168    	; 0x1512 <sMO_runCycle+0x2c8>
    146a:	38 c0       	rjmp	.+112    	; 0x14dc <sMO_runCycle+0x292>
    146c:	81 31       	cpi	r24, 0x11	; 17
    146e:	09 f4       	brne	.+2      	; 0x1472 <sMO_runCycle+0x228>
    1470:	43 c0       	rjmp	.+134    	; 0x14f8 <sMO_runCycle+0x2ae>
    1472:	82 31       	cpi	r24, 0x12	; 18
    1474:	09 f0       	breq	.+2      	; 0x1478 <sMO_runCycle+0x22e>
    1476:	4d c0       	rjmp	.+154    	; 0x1512 <sMO_runCycle+0x2c8>
    1478:	46 c0       	rjmp	.+140    	; 0x1506 <sMO_runCycle+0x2bc>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    147a:	89 e2       	ldi	r24, 0x29	; 41
    147c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	9b 83       	std	Y+3, r25	; 0x03
    1484:	8a 83       	std	Y+2, r24	; 0x02
    1486:	45 c0       	rjmp	.+138    	; 0x1512 <sMO_runCycle+0x2c8>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1488:	89 e2       	ldi	r24, 0x29	; 41
    148a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	9b 83       	std	Y+3, r25	; 0x03
    1492:	8a 83       	std	Y+2, r24	; 0x02
    1494:	3e c0       	rjmp	.+124    	; 0x1512 <sMO_runCycle+0x2c8>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1496:	89 e2       	ldi	r24, 0x29	; 41
    1498:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	9b 83       	std	Y+3, r25	; 0x03
    14a0:	8a 83       	std	Y+2, r24	; 0x02
    14a2:	37 c0       	rjmp	.+110    	; 0x1512 <sMO_runCycle+0x2c8>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    14a4:	89 e2       	ldi	r24, 0x29	; 41
    14a6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	9b 83       	std	Y+3, r25	; 0x03
    14ae:	8a 83       	std	Y+2, r24	; 0x02
    14b0:	30 c0       	rjmp	.+96     	; 0x1512 <sMO_runCycle+0x2c8>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    14b2:	89 e2       	ldi	r24, 0x29	; 41
    14b4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	9b 83       	std	Y+3, r25	; 0x03
    14bc:	8a 83       	std	Y+2, r24	; 0x02
    14be:	29 c0       	rjmp	.+82     	; 0x1512 <sMO_runCycle+0x2c8>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    14c0:	89 e2       	ldi	r24, 0x29	; 41
    14c2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	9b 83       	std	Y+3, r25	; 0x03
    14ca:	8a 83       	std	Y+2, r24	; 0x02
    14cc:	22 c0       	rjmp	.+68     	; 0x1512 <sMO_runCycle+0x2c8>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    14ce:	89 e2       	ldi	r24, 0x29	; 41
    14d0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	9b 83       	std	Y+3, r25	; 0x03
    14d8:	8a 83       	std	Y+2, r24	; 0x02
    14da:	1b c0       	rjmp	.+54     	; 0x1512 <sMO_runCycle+0x2c8>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    14dc:	89 e2       	ldi	r24, 0x29	; 41
    14de:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	9b 83       	std	Y+3, r25	; 0x03
    14e6:	8a 83       	std	Y+2, r24	; 0x02
    14e8:	14 c0       	rjmp	.+40     	; 0x1512 <sMO_runCycle+0x2c8>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_KeepOrdering : {
				/* Default exit sequence for state KeepOrdering */
				handle->stateConfVector[1] = SMO_last_state;
    14ea:	89 e2       	ldi	r24, 0x29	; 41
    14ec:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	9b 83       	std	Y+3, r25	; 0x03
    14f4:	8a 83       	std	Y+2, r24	; 0x02
    14f6:	0d c0       	rjmp	.+26     	; 0x1512 <sMO_runCycle+0x2c8>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_Exit : {
				/* Default exit sequence for state Exit */
				handle->stateConfVector[1] = SMO_last_state;
    14f8:	89 e2       	ldi	r24, 0x29	; 41
    14fa:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	9b 83       	std	Y+3, r25	; 0x03
    1502:	8a 83       	std	Y+2, r24	; 0x02
    1504:	06 c0       	rjmp	.+12     	; 0x1512 <sMO_runCycle+0x2c8>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress3 : {
				/* Default exit sequence for state CheckKeyPress3 */
				handle->stateConfVector[1] = SMO_last_state;
    1506:	89 e2       	ldi	r24, 0x29	; 41
    1508:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	9b 83       	std	Y+3, r25	; 0x03
    1510:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1512:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    1516:	88 e0       	ldi	r24, 0x08	; 8
    1518:	92 e0       	ldi	r25, 0x02	; 2
    151a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    151e:	87 e1       	ldi	r24, 0x17	; 23
    1520:	92 e0       	ldi	r25, 0x02	; 2
    1522:	40 e0       	ldi	r20, 0x00	; 0
    1524:	50 e0       	ldi	r21, 0x00	; 0
    1526:	ba 01       	movw	r22, r20
    1528:	01 e0       	ldi	r16, 0x01	; 1
    152a:	10 e0       	ldi	r17, 0x00	; 0
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1534:	1e a6       	lds	r17, 0xbe
    1536:	1f a6       	lds	r17, 0xbf
    1538:	18 aa       	sts	0x98, r17
    153a:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    153c:	85 e0       	ldi	r24, 0x05	; 5
    153e:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	9b 83       	std	Y+3, r25	; 0x03
    1546:	8a 83       	std	Y+2, r24	; 0x02
    1548:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <sMO_runCycle+0x2178>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state ShowCode */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    154c:	1b 83       	std	Y+3, r17	; 0x03
    154e:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress1 */
			/* Entry action for state 'CheckKeyPress1'. */
			handle->ifaceKEYPAD.lastkey = 0;
    1550:	18 86       	std	Y+8, r1	; 0x08
    1552:	19 86       	std	Y+9, r1	; 0x09
    1554:	1a 86       	std	Y+10, r1	; 0x0a
    1556:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1;
    1558:	89 e0       	ldi	r24, 0x09	; 9
    155a:	89 83       	std	Y+1, r24	; 0x01
    155c:	0c 94 bf 19 	jmp	0x337e	; 0x337e <sMO_runCycle+0x2134>
}

/* The reactions of state EnterCode. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode(SMO* handle) {
	/* The reactions of state EnterCode. */
	if (handle->iface.menuId == 0) { 
    1560:	8e a5       	lds	r24, 0x6e
    1562:	9f a5       	lds	r25, 0x6f
    1564:	a8 a9       	sts	0x48, r26
    1566:	b9 a9       	sts	0x49, r27
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	a1 05       	cpc	r26, r1
    156c:	b1 05       	cpc	r27, r1
    156e:	09 f0       	breq	.+2      	; 0x1572 <sMO_runCycle+0x328>
    1570:	91 c0       	rjmp	.+290    	; 0x1694 <sMO_runCycle+0x44a>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	8c 30       	cpi	r24, 0x0C	; 12
    1576:	09 f4       	brne	.+2      	; 0x157a <sMO_runCycle+0x330>
    1578:	47 c0       	rjmp	.+142    	; 0x1608 <sMO_runCycle+0x3be>
    157a:	8d 30       	cpi	r24, 0x0D	; 13
    157c:	80 f4       	brcc	.+32     	; 0x159e <sMO_runCycle+0x354>
    157e:	89 30       	cpi	r24, 0x09	; 9
    1580:	71 f1       	breq	.+92     	; 0x15de <sMO_runCycle+0x394>
    1582:	8a 30       	cpi	r24, 0x0A	; 10
    1584:	30 f4       	brcc	.+12     	; 0x1592 <sMO_runCycle+0x348>
    1586:	87 30       	cpi	r24, 0x07	; 7
    1588:	e1 f0       	breq	.+56     	; 0x15c2 <sMO_runCycle+0x378>
    158a:	88 30       	cpi	r24, 0x08	; 8
    158c:	09 f0       	breq	.+2      	; 0x1590 <sMO_runCycle+0x346>
    158e:	65 c0       	rjmp	.+202    	; 0x165a <sMO_runCycle+0x410>
    1590:	1f c0       	rjmp	.+62     	; 0x15d0 <sMO_runCycle+0x386>
    1592:	8a 30       	cpi	r24, 0x0A	; 10
    1594:	59 f1       	breq	.+86     	; 0x15ec <sMO_runCycle+0x3a2>
    1596:	8b 30       	cpi	r24, 0x0B	; 11
    1598:	09 f0       	breq	.+2      	; 0x159c <sMO_runCycle+0x352>
    159a:	5f c0       	rjmp	.+190    	; 0x165a <sMO_runCycle+0x410>
    159c:	2e c0       	rjmp	.+92     	; 0x15fa <sMO_runCycle+0x3b0>
    159e:	80 31       	cpi	r24, 0x10	; 16
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <sMO_runCycle+0x35a>
    15a2:	47 c0       	rjmp	.+142    	; 0x1632 <sMO_runCycle+0x3e8>
    15a4:	81 31       	cpi	r24, 0x11	; 17
    15a6:	30 f4       	brcc	.+12     	; 0x15b4 <sMO_runCycle+0x36a>
    15a8:	8e 30       	cpi	r24, 0x0E	; 14
    15aa:	a9 f1       	breq	.+106    	; 0x1616 <sMO_runCycle+0x3cc>
    15ac:	8f 30       	cpi	r24, 0x0F	; 15
    15ae:	09 f0       	breq	.+2      	; 0x15b2 <sMO_runCycle+0x368>
    15b0:	54 c0       	rjmp	.+168    	; 0x165a <sMO_runCycle+0x410>
    15b2:	38 c0       	rjmp	.+112    	; 0x1624 <sMO_runCycle+0x3da>
    15b4:	81 31       	cpi	r24, 0x11	; 17
    15b6:	09 f4       	brne	.+2      	; 0x15ba <sMO_runCycle+0x370>
    15b8:	43 c0       	rjmp	.+134    	; 0x1640 <sMO_runCycle+0x3f6>
    15ba:	82 31       	cpi	r24, 0x12	; 18
    15bc:	09 f0       	breq	.+2      	; 0x15c0 <sMO_runCycle+0x376>
    15be:	4d c0       	rjmp	.+154    	; 0x165a <sMO_runCycle+0x410>
    15c0:	46 c0       	rjmp	.+140    	; 0x164e <sMO_runCycle+0x404>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    15c2:	89 e2       	ldi	r24, 0x29	; 41
    15c4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	9b 83       	std	Y+3, r25	; 0x03
    15cc:	8a 83       	std	Y+2, r24	; 0x02
    15ce:	45 c0       	rjmp	.+138    	; 0x165a <sMO_runCycle+0x410>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    15d0:	89 e2       	ldi	r24, 0x29	; 41
    15d2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	9b 83       	std	Y+3, r25	; 0x03
    15da:	8a 83       	std	Y+2, r24	; 0x02
    15dc:	3e c0       	rjmp	.+124    	; 0x165a <sMO_runCycle+0x410>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    15de:	89 e2       	ldi	r24, 0x29	; 41
    15e0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	9b 83       	std	Y+3, r25	; 0x03
    15e8:	8a 83       	std	Y+2, r24	; 0x02
    15ea:	37 c0       	rjmp	.+110    	; 0x165a <sMO_runCycle+0x410>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    15ec:	89 e2       	ldi	r24, 0x29	; 41
    15ee:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	9b 83       	std	Y+3, r25	; 0x03
    15f6:	8a 83       	std	Y+2, r24	; 0x02
    15f8:	30 c0       	rjmp	.+96     	; 0x165a <sMO_runCycle+0x410>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    15fa:	89 e2       	ldi	r24, 0x29	; 41
    15fc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	9b 83       	std	Y+3, r25	; 0x03
    1604:	8a 83       	std	Y+2, r24	; 0x02
    1606:	29 c0       	rjmp	.+82     	; 0x165a <sMO_runCycle+0x410>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1608:	89 e2       	ldi	r24, 0x29	; 41
    160a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	9b 83       	std	Y+3, r25	; 0x03
    1612:	8a 83       	std	Y+2, r24	; 0x02
    1614:	22 c0       	rjmp	.+68     	; 0x165a <sMO_runCycle+0x410>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1616:	89 e2       	ldi	r24, 0x29	; 41
    1618:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	9b 83       	std	Y+3, r25	; 0x03
    1620:	8a 83       	std	Y+2, r24	; 0x02
    1622:	1b c0       	rjmp	.+54     	; 0x165a <sMO_runCycle+0x410>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1624:	89 e2       	ldi	r24, 0x29	; 41
    1626:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	9b 83       	std	Y+3, r25	; 0x03
    162e:	8a 83       	std	Y+2, r24	; 0x02
    1630:	14 c0       	rjmp	.+40     	; 0x165a <sMO_runCycle+0x410>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_KeepOrdering : {
				/* Default exit sequence for state KeepOrdering */
				handle->stateConfVector[1] = SMO_last_state;
    1632:	89 e2       	ldi	r24, 0x29	; 41
    1634:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	9b 83       	std	Y+3, r25	; 0x03
    163c:	8a 83       	std	Y+2, r24	; 0x02
    163e:	0d c0       	rjmp	.+26     	; 0x165a <sMO_runCycle+0x410>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_Exit : {
				/* Default exit sequence for state Exit */
				handle->stateConfVector[1] = SMO_last_state;
    1640:	89 e2       	ldi	r24, 0x29	; 41
    1642:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	9b 83       	std	Y+3, r25	; 0x03
    164a:	8a 83       	std	Y+2, r24	; 0x02
    164c:	06 c0       	rjmp	.+12     	; 0x165a <sMO_runCycle+0x410>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress3 : {
				/* Default exit sequence for state CheckKeyPress3 */
				handle->stateConfVector[1] = SMO_last_state;
    164e:	89 e2       	ldi	r24, 0x29	; 41
    1650:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	9b 83       	std	Y+3, r25	; 0x03
    1658:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    165a:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    165e:	88 e0       	ldi	r24, 0x08	; 8
    1660:	92 e0       	ldi	r25, 0x02	; 2
    1662:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    1666:	87 e1       	ldi	r24, 0x17	; 23
    1668:	92 e0       	ldi	r25, 0x02	; 2
    166a:	40 e0       	ldi	r20, 0x00	; 0
    166c:	50 e0       	ldi	r21, 0x00	; 0
    166e:	ba 01       	movw	r22, r20
    1670:	01 e0       	ldi	r16, 0x01	; 1
    1672:	10 e0       	ldi	r17, 0x00	; 0
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    167c:	1e a6       	lds	r17, 0xbe
    167e:	1f a6       	lds	r17, 0xbf
    1680:	18 aa       	sts	0x98, r17
    1682:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1684:	85 e0       	ldi	r24, 0x05	; 5
    1686:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	9b 83       	std	Y+3, r25	; 0x03
    168e:	8a 83       	std	Y+2, r24	; 0x02
    1690:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <sMO_runCycle+0x2178>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state EnterCode */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    1694:	1b 83       	std	Y+3, r17	; 0x03
    1696:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress1 */
			/* Entry action for state 'CheckKeyPress1'. */
			handle->ifaceKEYPAD.lastkey = 0;
    1698:	18 86       	std	Y+8, r1	; 0x08
    169a:	19 86       	std	Y+9, r1	; 0x09
    169c:	1a 86       	std	Y+10, r1	; 0x0a
    169e:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1;
    16a0:	89 e0       	ldi	r24, 0x09	; 9
    16a2:	89 83       	std	Y+1, r24	; 0x01
    16a4:	0c 94 bf 19 	jmp	0x337e	; 0x337e <sMO_runCycle+0x2134>
}

/* The reactions of state CheckKeyPress1. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1(SMO* handle) {
	/* The reactions of state CheckKeyPress1. */
	if (handle->iface.menuId == 0) { 
    16a8:	8e a5       	lds	r24, 0x6e
    16aa:	9f a5       	lds	r25, 0x6f
    16ac:	a8 a9       	sts	0x48, r26
    16ae:	b9 a9       	sts	0x49, r27
    16b0:	00 97       	sbiw	r24, 0x00	; 0
    16b2:	a1 05       	cpc	r26, r1
    16b4:	b1 05       	cpc	r27, r1
    16b6:	09 f0       	breq	.+2      	; 0x16ba <sMO_runCycle+0x470>
    16b8:	91 c0       	rjmp	.+290    	; 0x17dc <sMO_runCycle+0x592>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	8c 30       	cpi	r24, 0x0C	; 12
    16be:	09 f4       	brne	.+2      	; 0x16c2 <sMO_runCycle+0x478>
    16c0:	47 c0       	rjmp	.+142    	; 0x1750 <sMO_runCycle+0x506>
    16c2:	8d 30       	cpi	r24, 0x0D	; 13
    16c4:	80 f4       	brcc	.+32     	; 0x16e6 <sMO_runCycle+0x49c>
    16c6:	89 30       	cpi	r24, 0x09	; 9
    16c8:	71 f1       	breq	.+92     	; 0x1726 <sMO_runCycle+0x4dc>
    16ca:	8a 30       	cpi	r24, 0x0A	; 10
    16cc:	30 f4       	brcc	.+12     	; 0x16da <sMO_runCycle+0x490>
    16ce:	87 30       	cpi	r24, 0x07	; 7
    16d0:	e1 f0       	breq	.+56     	; 0x170a <sMO_runCycle+0x4c0>
    16d2:	88 30       	cpi	r24, 0x08	; 8
    16d4:	09 f0       	breq	.+2      	; 0x16d8 <sMO_runCycle+0x48e>
    16d6:	65 c0       	rjmp	.+202    	; 0x17a2 <sMO_runCycle+0x558>
    16d8:	1f c0       	rjmp	.+62     	; 0x1718 <sMO_runCycle+0x4ce>
    16da:	8a 30       	cpi	r24, 0x0A	; 10
    16dc:	59 f1       	breq	.+86     	; 0x1734 <sMO_runCycle+0x4ea>
    16de:	8b 30       	cpi	r24, 0x0B	; 11
    16e0:	09 f0       	breq	.+2      	; 0x16e4 <sMO_runCycle+0x49a>
    16e2:	5f c0       	rjmp	.+190    	; 0x17a2 <sMO_runCycle+0x558>
    16e4:	2e c0       	rjmp	.+92     	; 0x1742 <sMO_runCycle+0x4f8>
    16e6:	80 31       	cpi	r24, 0x10	; 16
    16e8:	09 f4       	brne	.+2      	; 0x16ec <sMO_runCycle+0x4a2>
    16ea:	47 c0       	rjmp	.+142    	; 0x177a <sMO_runCycle+0x530>
    16ec:	81 31       	cpi	r24, 0x11	; 17
    16ee:	30 f4       	brcc	.+12     	; 0x16fc <sMO_runCycle+0x4b2>
    16f0:	8e 30       	cpi	r24, 0x0E	; 14
    16f2:	a9 f1       	breq	.+106    	; 0x175e <sMO_runCycle+0x514>
    16f4:	8f 30       	cpi	r24, 0x0F	; 15
    16f6:	09 f0       	breq	.+2      	; 0x16fa <sMO_runCycle+0x4b0>
    16f8:	54 c0       	rjmp	.+168    	; 0x17a2 <sMO_runCycle+0x558>
    16fa:	38 c0       	rjmp	.+112    	; 0x176c <sMO_runCycle+0x522>
    16fc:	81 31       	cpi	r24, 0x11	; 17
    16fe:	09 f4       	brne	.+2      	; 0x1702 <sMO_runCycle+0x4b8>
    1700:	43 c0       	rjmp	.+134    	; 0x1788 <sMO_runCycle+0x53e>
    1702:	82 31       	cpi	r24, 0x12	; 18
    1704:	09 f0       	breq	.+2      	; 0x1708 <sMO_runCycle+0x4be>
    1706:	4d c0       	rjmp	.+154    	; 0x17a2 <sMO_runCycle+0x558>
    1708:	46 c0       	rjmp	.+140    	; 0x1796 <sMO_runCycle+0x54c>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    170a:	89 e2       	ldi	r24, 0x29	; 41
    170c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	9b 83       	std	Y+3, r25	; 0x03
    1714:	8a 83       	std	Y+2, r24	; 0x02
    1716:	45 c0       	rjmp	.+138    	; 0x17a2 <sMO_runCycle+0x558>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1718:	89 e2       	ldi	r24, 0x29	; 41
    171a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	9b 83       	std	Y+3, r25	; 0x03
    1722:	8a 83       	std	Y+2, r24	; 0x02
    1724:	3e c0       	rjmp	.+124    	; 0x17a2 <sMO_runCycle+0x558>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1726:	89 e2       	ldi	r24, 0x29	; 41
    1728:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	9b 83       	std	Y+3, r25	; 0x03
    1730:	8a 83       	std	Y+2, r24	; 0x02
    1732:	37 c0       	rjmp	.+110    	; 0x17a2 <sMO_runCycle+0x558>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1734:	89 e2       	ldi	r24, 0x29	; 41
    1736:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	9b 83       	std	Y+3, r25	; 0x03
    173e:	8a 83       	std	Y+2, r24	; 0x02
    1740:	30 c0       	rjmp	.+96     	; 0x17a2 <sMO_runCycle+0x558>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1742:	89 e2       	ldi	r24, 0x29	; 41
    1744:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	9b 83       	std	Y+3, r25	; 0x03
    174c:	8a 83       	std	Y+2, r24	; 0x02
    174e:	29 c0       	rjmp	.+82     	; 0x17a2 <sMO_runCycle+0x558>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1750:	89 e2       	ldi	r24, 0x29	; 41
    1752:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	9b 83       	std	Y+3, r25	; 0x03
    175a:	8a 83       	std	Y+2, r24	; 0x02
    175c:	22 c0       	rjmp	.+68     	; 0x17a2 <sMO_runCycle+0x558>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    175e:	89 e2       	ldi	r24, 0x29	; 41
    1760:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	9b 83       	std	Y+3, r25	; 0x03
    1768:	8a 83       	std	Y+2, r24	; 0x02
    176a:	1b c0       	rjmp	.+54     	; 0x17a2 <sMO_runCycle+0x558>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    176c:	89 e2       	ldi	r24, 0x29	; 41
    176e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	9b 83       	std	Y+3, r25	; 0x03
    1776:	8a 83       	std	Y+2, r24	; 0x02
    1778:	14 c0       	rjmp	.+40     	; 0x17a2 <sMO_runCycle+0x558>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_KeepOrdering : {
				/* Default exit sequence for state KeepOrdering */
				handle->stateConfVector[1] = SMO_last_state;
    177a:	89 e2       	ldi	r24, 0x29	; 41
    177c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	9b 83       	std	Y+3, r25	; 0x03
    1784:	8a 83       	std	Y+2, r24	; 0x02
    1786:	0d c0       	rjmp	.+26     	; 0x17a2 <sMO_runCycle+0x558>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_Exit : {
				/* Default exit sequence for state Exit */
				handle->stateConfVector[1] = SMO_last_state;
    1788:	89 e2       	ldi	r24, 0x29	; 41
    178a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	9b 83       	std	Y+3, r25	; 0x03
    1792:	8a 83       	std	Y+2, r24	; 0x02
    1794:	06 c0       	rjmp	.+12     	; 0x17a2 <sMO_runCycle+0x558>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress3 : {
				/* Default exit sequence for state CheckKeyPress3 */
				handle->stateConfVector[1] = SMO_last_state;
    1796:	89 e2       	ldi	r24, 0x29	; 41
    1798:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	9b 83       	std	Y+3, r25	; 0x03
    17a0:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    17a2:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    17a6:	88 e0       	ldi	r24, 0x08	; 8
    17a8:	92 e0       	ldi	r25, 0x02	; 2
    17aa:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    17ae:	87 e1       	ldi	r24, 0x17	; 23
    17b0:	92 e0       	ldi	r25, 0x02	; 2
    17b2:	40 e0       	ldi	r20, 0x00	; 0
    17b4:	50 e0       	ldi	r21, 0x00	; 0
    17b6:	ba 01       	movw	r22, r20
    17b8:	01 e0       	ldi	r16, 0x01	; 1
    17ba:	10 e0       	ldi	r17, 0x00	; 0
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    17c4:	1e a6       	lds	r17, 0xbe
    17c6:	1f a6       	lds	r17, 0xbf
    17c8:	18 aa       	sts	0x98, r17
    17ca:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    17cc:	85 e0       	ldi	r24, 0x05	; 5
    17ce:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	9b 83       	std	Y+3, r25	; 0x03
    17d6:	8a 83       	std	Y+2, r24	; 0x02
    17d8:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <sMO_runCycle+0x2178>
	}  else {
		if (handle->ifaceDISH.pos < 3 && handle->ifaceKEYPAD.lastkey <= 9 && handle->ifaceKEYPAD.lastkey >= 1 && handle->ifaceKEYPAD.key_pressed_raised) { 
    17dc:	49 a5       	lds	r20, 0x69
    17de:	5a a5       	lds	r21, 0x6a
    17e0:	6b a5       	lds	r22, 0x6b
    17e2:	7c a5       	lds	r23, 0x6c
    17e4:	43 30       	cpi	r20, 0x03	; 3
    17e6:	51 05       	cpc	r21, r1
    17e8:	61 05       	cpc	r22, r1
    17ea:	71 05       	cpc	r23, r1
    17ec:	0c f0       	brlt	.+2      	; 0x17f0 <sMO_runCycle+0x5a6>
    17ee:	6a c0       	rjmp	.+212    	; 0x18c4 <sMO_runCycle+0x67a>
    17f0:	88 85       	ldd	r24, Y+8	; 0x08
    17f2:	99 85       	ldd	r25, Y+9	; 0x09
    17f4:	aa 85       	ldd	r26, Y+10	; 0x0a
    17f6:	bb 85       	ldd	r27, Y+11	; 0x0b
    17f8:	8a 30       	cpi	r24, 0x0A	; 10
    17fa:	91 05       	cpc	r25, r1
    17fc:	a1 05       	cpc	r26, r1
    17fe:	b1 05       	cpc	r27, r1
    1800:	0c f0       	brlt	.+2      	; 0x1804 <sMO_runCycle+0x5ba>
    1802:	4e c0       	rjmp	.+156    	; 0x18a0 <sMO_runCycle+0x656>
    1804:	18 16       	cp	r1, r24
    1806:	19 06       	cpc	r1, r25
    1808:	1a 06       	cpc	r1, r26
    180a:	1b 06       	cpc	r1, r27
    180c:	0c f0       	brlt	.+2      	; 0x1810 <sMO_runCycle+0x5c6>
    180e:	48 c0       	rjmp	.+144    	; 0x18a0 <sMO_runCycle+0x656>
    1810:	2d 85       	ldd	r18, Y+13	; 0x0d
    1812:	22 23       	and	r18, r18
    1814:	09 f4       	brne	.+2      	; 0x1818 <sMO_runCycle+0x5ce>
    1816:	44 c0       	rjmp	.+136    	; 0x18a0 <sMO_runCycle+0x656>
    1818:	6c 01       	movw	r12, r24
    181a:	7d 01       	movw	r14, r26
			/* Default exit sequence for state CheckKeyPress1 */
			handle->stateConfVector[1] = SMO_last_state;
    181c:	89 e2       	ldi	r24, 0x29	; 41
    181e:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1820:	88 24       	eor	r8, r8
    1822:	99 24       	eor	r9, r9
    1824:	83 94       	inc	r8
    1826:	9b 82       	std	Y+3, r9	; 0x03
    1828:	8a 82       	std	Y+2, r8	; 0x02
			/* Default enter sequence for state EnterCode */
			/* Entry action for state 'EnterCode'. */
			sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    182a:	9a 01       	movw	r18, r20
    182c:	ab 01       	movw	r20, r22
    182e:	22 0f       	add	r18, r18
    1830:	33 1f       	adc	r19, r19
    1832:	44 1f       	adc	r20, r20
    1834:	55 1f       	adc	r21, r21
    1836:	c7 01       	movw	r24, r14
    1838:	b6 01       	movw	r22, r12
    183a:	ee 24       	eor	r14, r14
    183c:	ff 24       	eor	r15, r15
    183e:	87 01       	movw	r16, r14
    1840:	e3 94       	inc	r14
    1842:	aa 24       	eor	r10, r10
    1844:	bb 24       	eor	r11, r11
    1846:	65 01       	movw	r12, r10
    1848:	a3 94       	inc	r10
    184a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <sMOIfaceLCD_writeNumberXY>
			handle->ifaceDISH.pos += 1;
    184e:	89 a5       	lds	r24, 0x69
    1850:	9a a5       	lds	r25, 0x6a
    1852:	ab a5       	lds	r26, 0x6b
    1854:	bc a5       	lds	r27, 0x6c
    1856:	01 96       	adiw	r24, 0x01	; 1
    1858:	a1 1d       	adc	r26, r1
    185a:	b1 1d       	adc	r27, r1
    185c:	89 a7       	lds	r24, 0x79
    185e:	9a a7       	lds	r25, 0x7a
    1860:	ab a7       	lds	r26, 0x7b
    1862:	bc a7       	lds	r27, 0x7c
			handle->ifaceDISH.ID = handle->ifaceDISH.ID * 10 + handle->ifaceKEYPAD.lastkey;
    1864:	69 a1       	lds	r22, 0x49
    1866:	7a a1       	lds	r23, 0x4a
    1868:	8b a1       	lds	r24, 0x4b
    186a:	9c a1       	lds	r25, 0x4c
    186c:	2a e0       	ldi	r18, 0x0A	; 10
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	40 e0       	ldi	r20, 0x00	; 0
    1872:	50 e0       	ldi	r21, 0x00	; 0
    1874:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <__mulsi3>
    1878:	ab 01       	movw	r20, r22
    187a:	bc 01       	movw	r22, r24
    187c:	88 85       	ldd	r24, Y+8	; 0x08
    187e:	99 85       	ldd	r25, Y+9	; 0x09
    1880:	aa 85       	ldd	r26, Y+10	; 0x0a
    1882:	bb 85       	ldd	r27, Y+11	; 0x0b
    1884:	84 0f       	add	r24, r20
    1886:	95 1f       	adc	r25, r21
    1888:	a6 1f       	adc	r26, r22
    188a:	b7 1f       	adc	r27, r23
    188c:	89 a3       	lds	r24, 0x59
    188e:	9a a3       	lds	r25, 0x5a
    1890:	ab a3       	lds	r26, 0x5b
    1892:	bc a3       	lds	r27, 0x5c
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode;
    1894:	88 e0       	ldi	r24, 0x08	; 8
    1896:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1898:	9b 82       	std	Y+3, r9	; 0x03
    189a:	8a 82       	std	Y+2, r8	; 0x02
    189c:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <sMO_runCycle+0x2178>
		}  else {
			if (handle->ifaceDISH.pos < 3 && handle->ifaceKEYPAD.lastkey == 10 && handle->ifaceKEYPAD.key_pressed_raised) { 
    18a0:	8a 30       	cpi	r24, 0x0A	; 10
    18a2:	91 05       	cpc	r25, r1
    18a4:	a1 05       	cpc	r26, r1
    18a6:	b1 05       	cpc	r27, r1
    18a8:	69 f4       	brne	.+26     	; 0x18c4 <sMO_runCycle+0x67a>
    18aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ac:	88 23       	and	r24, r24
    18ae:	51 f0       	breq	.+20     	; 0x18c4 <sMO_runCycle+0x67a>
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
				handle->stateConfVectorPosition = 1;
    18b0:	1b 83       	std	Y+3, r17	; 0x03
    18b2:	0a 83       	std	Y+2, r16	; 0x02
				/* Default enter sequence for state CheckCode0 */
				/* Entry action for state 'CheckCode0'. */
				handle->ifaceKEYPAD.lastkey = 0;
    18b4:	18 86       	std	Y+8, r1	; 0x08
    18b6:	19 86       	std	Y+9, r1	; 0x09
    18b8:	1a 86       	std	Y+10, r1	; 0x0a
    18ba:	1b 86       	std	Y+11, r1	; 0x0b
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0;
    18bc:	8a e0       	ldi	r24, 0x0A	; 10
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	0c 94 bf 19 	jmp	0x337e	; 0x337e <sMO_runCycle+0x2134>
				handle->stateConfVectorPosition = 1;
			}  else {
				if (handle->ifaceKEYPAD.lastkey == 11 && handle->ifaceKEYPAD.key_pressed_raised) { 
    18c4:	88 85       	ldd	r24, Y+8	; 0x08
    18c6:	99 85       	ldd	r25, Y+9	; 0x09
    18c8:	aa 85       	ldd	r26, Y+10	; 0x0a
    18ca:	bb 85       	ldd	r27, Y+11	; 0x0b
    18cc:	8b 30       	cpi	r24, 0x0B	; 11
    18ce:	91 05       	cpc	r25, r1
    18d0:	a1 05       	cpc	r26, r1
    18d2:	b1 05       	cpc	r27, r1
    18d4:	49 f5       	brne	.+82     	; 0x1928 <sMO_runCycle+0x6de>
    18d6:	2d 85       	ldd	r18, Y+13	; 0x0d
    18d8:	22 23       	and	r18, r18
    18da:	31 f1       	breq	.+76     	; 0x1928 <sMO_runCycle+0x6de>
					/* Default exit sequence for state CheckKeyPress1 */
					handle->stateConfVector[1] = SMO_last_state;
    18dc:	89 e2       	ldi	r24, 0x29	; 41
    18de:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    18e0:	ee 24       	eor	r14, r14
    18e2:	ff 24       	eor	r15, r15
    18e4:	e3 94       	inc	r14
    18e6:	fb 82       	std	Y+3, r15	; 0x03
    18e8:	ea 82       	std	Y+2, r14	; 0x02
					/* Default enter sequence for state ShowCode */
					/* Entry action for state 'ShowCode'. */
					sMOIfaceLCD_clear();
    18ea:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
					sMOIfaceLCD_writeString("Dish Code:");
    18ee:	85 e2       	ldi	r24, 0x25	; 37
    18f0:	92 e0       	ldi	r25, 0x02	; 2
    18f2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
					sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    18f6:	80 e3       	ldi	r24, 0x30	; 48
    18f8:	92 e0       	ldi	r25, 0x02	; 2
    18fa:	40 e0       	ldi	r20, 0x00	; 0
    18fc:	50 e0       	ldi	r21, 0x00	; 0
    18fe:	ba 01       	movw	r22, r20
    1900:	01 e0       	ldi	r16, 0x01	; 1
    1902:	10 e0       	ldi	r17, 0x00	; 0
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
					handle->ifaceDISH.pos = 0;
    190c:	19 a6       	lds	r17, 0xb9
    190e:	1a a6       	lds	r17, 0xba
    1910:	1b a6       	lds	r17, 0xbb
    1912:	1c a6       	lds	r17, 0xbc
					handle->ifaceDISH.ID = 0;
    1914:	19 a2       	lds	r17, 0x99
    1916:	1a a2       	lds	r17, 0x9a
    1918:	1b a2       	lds	r17, 0x9b
    191a:	1c a2       	lds	r17, 0x9c
					handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    191c:	87 e0       	ldi	r24, 0x07	; 7
    191e:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    1920:	fb 82       	std	Y+3, r15	; 0x03
    1922:	ea 82       	std	Y+2, r14	; 0x02
    1924:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <sMO_runCycle+0x2178>
				}  else {
					if (handle->ifaceKEYPAD.lastkey == 12 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1928:	8c 30       	cpi	r24, 0x0C	; 12
    192a:	91 05       	cpc	r25, r1
    192c:	a1 05       	cpc	r26, r1
    192e:	b1 05       	cpc	r27, r1
    1930:	49 f5       	brne	.+82     	; 0x1984 <sMO_runCycle+0x73a>
    1932:	2d 85       	ldd	r18, Y+13	; 0x0d
    1934:	22 23       	and	r18, r18
    1936:	31 f1       	breq	.+76     	; 0x1984 <sMO_runCycle+0x73a>
						/* Default exit sequence for state CheckKeyPress1 */
						handle->stateConfVector[1] = SMO_last_state;
    1938:	89 e2       	ldi	r24, 0x29	; 41
    193a:	89 83       	std	Y+1, r24	; 0x01
						handle->stateConfVectorPosition = 1;
    193c:	ee 24       	eor	r14, r14
    193e:	ff 24       	eor	r15, r15
    1940:	e3 94       	inc	r14
    1942:	fb 82       	std	Y+3, r15	; 0x03
    1944:	ea 82       	std	Y+2, r14	; 0x02
						/* Default enter sequence for state ShowAmount */
						/* Entry action for state 'ShowAmount'. */
						sMOIfaceLCD_clear();
    1946:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
						sMOIfaceLCD_writeString("Amount:");
    194a:	86 e3       	ldi	r24, 0x36	; 54
    194c:	92 e0       	ldi	r25, 0x02	; 2
    194e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
						sMOIfaceLCD_writeStringXY("_ _", 0, 1);
    1952:	8e e3       	ldi	r24, 0x3E	; 62
    1954:	92 e0       	ldi	r25, 0x02	; 2
    1956:	40 e0       	ldi	r20, 0x00	; 0
    1958:	50 e0       	ldi	r21, 0x00	; 0
    195a:	ba 01       	movw	r22, r20
    195c:	01 e0       	ldi	r16, 0x01	; 1
    195e:	10 e0       	ldi	r17, 0x00	; 0
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
						handle->ifaceDISH.pos = 0;
    1968:	19 a6       	lds	r17, 0xb9
    196a:	1a a6       	lds	r17, 0xba
    196c:	1b a6       	lds	r17, 0xbb
    196e:	1c a6       	lds	r17, 0xbc
						handle->ifaceDISH.amount = 0;
    1970:	1d a2       	lds	r17, 0x9d
    1972:	1e a2       	lds	r17, 0x9e
    1974:	1f a2       	lds	r17, 0x9f
    1976:	18 a6       	lds	r17, 0xb8
						handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount;
    1978:	8b e0       	ldi	r24, 0x0B	; 11
    197a:	89 83       	std	Y+1, r24	; 0x01
						handle->stateConfVectorPosition = 1;
    197c:	fb 82       	std	Y+3, r15	; 0x03
    197e:	ea 82       	std	Y+2, r14	; 0x02
    1980:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <sMO_runCycle+0x2178>
					}  else {
						if (handle->ifaceKEYPAD.lastkey == 16 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1984:	80 31       	cpi	r24, 0x10	; 16
    1986:	91 05       	cpc	r25, r1
    1988:	a1 05       	cpc	r26, r1
    198a:	b1 05       	cpc	r27, r1
    198c:	11 f0       	breq	.+4      	; 0x1992 <sMO_runCycle+0x748>
    198e:	0c 94 bf 19 	jmp	0x337e	; 0x337e <sMO_runCycle+0x2134>
    1992:	8d 85       	ldd	r24, Y+13	; 0x0d
    1994:	88 23       	and	r24, r24
    1996:	11 f4       	brne	.+4      	; 0x199c <sMO_runCycle+0x752>
    1998:	0c 94 bf 19 	jmp	0x337e	; 0x337e <sMO_runCycle+0x2134>
							/* Default exit sequence for state CheckKeyPress1 */
							handle->stateConfVector[1] = SMO_last_state;
    199c:	89 e2       	ldi	r24, 0x29	; 41
    199e:	89 83       	std	Y+1, r24	; 0x01
							handle->stateConfVectorPosition = 1;
    19a0:	ee 24       	eor	r14, r14
    19a2:	ff 24       	eor	r15, r15
    19a4:	e3 94       	inc	r14
    19a6:	fb 82       	std	Y+3, r15	; 0x03
    19a8:	ea 82       	std	Y+2, r14	; 0x02
							/* Default enter sequence for state Exit */
							/* Entry action for state 'Exit'. */
							sMOIfaceLCD_clear();
    19aa:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
							sMOIfaceLCD_writeString("Finish Ordering?");
    19ae:	82 e4       	ldi	r24, 0x42	; 66
    19b0:	92 e0       	ldi	r25, 0x02	; 2
    19b2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
							sMOIfaceLCD_writeStringXY("*.No  #.Yes", 0, 1);
    19b6:	83 e5       	ldi	r24, 0x53	; 83
    19b8:	92 e0       	ldi	r25, 0x02	; 2
    19ba:	40 e0       	ldi	r20, 0x00	; 0
    19bc:	50 e0       	ldi	r21, 0x00	; 0
    19be:	ba 01       	movw	r22, r20
    19c0:	01 e0       	ldi	r16, 0x01	; 1
    19c2:	10 e0       	ldi	r17, 0x00	; 0
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
							handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_Exit;
    19cc:	81 e1       	ldi	r24, 0x11	; 17
    19ce:	89 83       	std	Y+1, r24	; 0x01
							handle->stateConfVectorPosition = 1;
    19d0:	fb 82       	std	Y+3, r15	; 0x03
    19d2:	ea 82       	std	Y+2, r14	; 0x02
    19d4:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <sMO_runCycle+0x2178>
}

/* The reactions of state CheckCode0. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0(SMO* handle) {
	/* The reactions of state CheckCode0. */
	if (handle->iface.menuId == 0) { 
    19d8:	8e a5       	lds	r24, 0x6e
    19da:	9f a5       	lds	r25, 0x6f
    19dc:	a8 a9       	sts	0x48, r26
    19de:	b9 a9       	sts	0x49, r27
    19e0:	00 97       	sbiw	r24, 0x00	; 0
    19e2:	a1 05       	cpc	r26, r1
    19e4:	b1 05       	cpc	r27, r1
    19e6:	09 f0       	breq	.+2      	; 0x19ea <sMO_runCycle+0x7a0>
    19e8:	91 c0       	rjmp	.+290    	; 0x1b0c <sMO_runCycle+0x8c2>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	8c 30       	cpi	r24, 0x0C	; 12
    19ee:	09 f4       	brne	.+2      	; 0x19f2 <sMO_runCycle+0x7a8>
    19f0:	47 c0       	rjmp	.+142    	; 0x1a80 <sMO_runCycle+0x836>
    19f2:	8d 30       	cpi	r24, 0x0D	; 13
    19f4:	80 f4       	brcc	.+32     	; 0x1a16 <sMO_runCycle+0x7cc>
    19f6:	89 30       	cpi	r24, 0x09	; 9
    19f8:	71 f1       	breq	.+92     	; 0x1a56 <sMO_runCycle+0x80c>
    19fa:	8a 30       	cpi	r24, 0x0A	; 10
    19fc:	30 f4       	brcc	.+12     	; 0x1a0a <sMO_runCycle+0x7c0>
    19fe:	87 30       	cpi	r24, 0x07	; 7
    1a00:	e1 f0       	breq	.+56     	; 0x1a3a <sMO_runCycle+0x7f0>
    1a02:	88 30       	cpi	r24, 0x08	; 8
    1a04:	09 f0       	breq	.+2      	; 0x1a08 <sMO_runCycle+0x7be>
    1a06:	65 c0       	rjmp	.+202    	; 0x1ad2 <sMO_runCycle+0x888>
    1a08:	1f c0       	rjmp	.+62     	; 0x1a48 <sMO_runCycle+0x7fe>
    1a0a:	8a 30       	cpi	r24, 0x0A	; 10
    1a0c:	59 f1       	breq	.+86     	; 0x1a64 <sMO_runCycle+0x81a>
    1a0e:	8b 30       	cpi	r24, 0x0B	; 11
    1a10:	09 f0       	breq	.+2      	; 0x1a14 <sMO_runCycle+0x7ca>
    1a12:	5f c0       	rjmp	.+190    	; 0x1ad2 <sMO_runCycle+0x888>
    1a14:	2e c0       	rjmp	.+92     	; 0x1a72 <sMO_runCycle+0x828>
    1a16:	80 31       	cpi	r24, 0x10	; 16
    1a18:	09 f4       	brne	.+2      	; 0x1a1c <sMO_runCycle+0x7d2>
    1a1a:	47 c0       	rjmp	.+142    	; 0x1aaa <sMO_runCycle+0x860>
    1a1c:	81 31       	cpi	r24, 0x11	; 17
    1a1e:	30 f4       	brcc	.+12     	; 0x1a2c <sMO_runCycle+0x7e2>
    1a20:	8e 30       	cpi	r24, 0x0E	; 14
    1a22:	a9 f1       	breq	.+106    	; 0x1a8e <sMO_runCycle+0x844>
    1a24:	8f 30       	cpi	r24, 0x0F	; 15
    1a26:	09 f0       	breq	.+2      	; 0x1a2a <sMO_runCycle+0x7e0>
    1a28:	54 c0       	rjmp	.+168    	; 0x1ad2 <sMO_runCycle+0x888>
    1a2a:	38 c0       	rjmp	.+112    	; 0x1a9c <sMO_runCycle+0x852>
    1a2c:	81 31       	cpi	r24, 0x11	; 17
    1a2e:	09 f4       	brne	.+2      	; 0x1a32 <sMO_runCycle+0x7e8>
    1a30:	43 c0       	rjmp	.+134    	; 0x1ab8 <sMO_runCycle+0x86e>
    1a32:	82 31       	cpi	r24, 0x12	; 18
    1a34:	09 f0       	breq	.+2      	; 0x1a38 <sMO_runCycle+0x7ee>
    1a36:	4d c0       	rjmp	.+154    	; 0x1ad2 <sMO_runCycle+0x888>
    1a38:	46 c0       	rjmp	.+140    	; 0x1ac6 <sMO_runCycle+0x87c>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1a3a:	89 e2       	ldi	r24, 0x29	; 41
    1a3c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	9b 83       	std	Y+3, r25	; 0x03
    1a44:	8a 83       	std	Y+2, r24	; 0x02
    1a46:	45 c0       	rjmp	.+138    	; 0x1ad2 <sMO_runCycle+0x888>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1a48:	89 e2       	ldi	r24, 0x29	; 41
    1a4a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	9b 83       	std	Y+3, r25	; 0x03
    1a52:	8a 83       	std	Y+2, r24	; 0x02
    1a54:	3e c0       	rjmp	.+124    	; 0x1ad2 <sMO_runCycle+0x888>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1a56:	89 e2       	ldi	r24, 0x29	; 41
    1a58:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	9b 83       	std	Y+3, r25	; 0x03
    1a60:	8a 83       	std	Y+2, r24	; 0x02
    1a62:	37 c0       	rjmp	.+110    	; 0x1ad2 <sMO_runCycle+0x888>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1a64:	89 e2       	ldi	r24, 0x29	; 41
    1a66:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	9b 83       	std	Y+3, r25	; 0x03
    1a6e:	8a 83       	std	Y+2, r24	; 0x02
    1a70:	30 c0       	rjmp	.+96     	; 0x1ad2 <sMO_runCycle+0x888>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1a72:	89 e2       	ldi	r24, 0x29	; 41
    1a74:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	9b 83       	std	Y+3, r25	; 0x03
    1a7c:	8a 83       	std	Y+2, r24	; 0x02
    1a7e:	29 c0       	rjmp	.+82     	; 0x1ad2 <sMO_runCycle+0x888>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1a80:	89 e2       	ldi	r24, 0x29	; 41
    1a82:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	9b 83       	std	Y+3, r25	; 0x03
    1a8a:	8a 83       	std	Y+2, r24	; 0x02
    1a8c:	22 c0       	rjmp	.+68     	; 0x1ad2 <sMO_runCycle+0x888>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1a8e:	89 e2       	ldi	r24, 0x29	; 41
    1a90:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	9b 83       	std	Y+3, r25	; 0x03
    1a98:	8a 83       	std	Y+2, r24	; 0x02
    1a9a:	1b c0       	rjmp	.+54     	; 0x1ad2 <sMO_runCycle+0x888>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1a9c:	89 e2       	ldi	r24, 0x29	; 41
    1a9e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	9b 83       	std	Y+3, r25	; 0x03
    1aa6:	8a 83       	std	Y+2, r24	; 0x02
    1aa8:	14 c0       	rjmp	.+40     	; 0x1ad2 <sMO_runCycle+0x888>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_KeepOrdering : {
				/* Default exit sequence for state KeepOrdering */
				handle->stateConfVector[1] = SMO_last_state;
    1aaa:	89 e2       	ldi	r24, 0x29	; 41
    1aac:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	9b 83       	std	Y+3, r25	; 0x03
    1ab4:	8a 83       	std	Y+2, r24	; 0x02
    1ab6:	0d c0       	rjmp	.+26     	; 0x1ad2 <sMO_runCycle+0x888>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_Exit : {
				/* Default exit sequence for state Exit */
				handle->stateConfVector[1] = SMO_last_state;
    1ab8:	89 e2       	ldi	r24, 0x29	; 41
    1aba:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	9b 83       	std	Y+3, r25	; 0x03
    1ac2:	8a 83       	std	Y+2, r24	; 0x02
    1ac4:	06 c0       	rjmp	.+12     	; 0x1ad2 <sMO_runCycle+0x888>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress3 : {
				/* Default exit sequence for state CheckKeyPress3 */
				handle->stateConfVector[1] = SMO_last_state;
    1ac6:	89 e2       	ldi	r24, 0x29	; 41
    1ac8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	9b 83       	std	Y+3, r25	; 0x03
    1ad0:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1ad2:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    1ad6:	88 e0       	ldi	r24, 0x08	; 8
    1ad8:	92 e0       	ldi	r25, 0x02	; 2
    1ada:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    1ade:	87 e1       	ldi	r24, 0x17	; 23
    1ae0:	92 e0       	ldi	r25, 0x02	; 2
    1ae2:	40 e0       	ldi	r20, 0x00	; 0
    1ae4:	50 e0       	ldi	r21, 0x00	; 0
    1ae6:	ba 01       	movw	r22, r20
    1ae8:	01 e0       	ldi	r16, 0x01	; 1
    1aea:	10 e0       	ldi	r17, 0x00	; 0
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1af4:	1e a6       	lds	r17, 0xbe
    1af6:	1f a6       	lds	r17, 0xbf
    1af8:	18 aa       	sts	0x98, r17
    1afa:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1afc:	85 e0       	ldi	r24, 0x05	; 5
    1afe:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	9b 83       	std	Y+3, r25	; 0x03
    1b06:	8a 83       	std	Y+2, r24	; 0x02
    1b08:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <sMO_runCycle+0x2178>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state CheckCode0 */
			handle->stateConfVector[1] = SMO_last_state;
    1b0c:	89 e2       	ldi	r24, 0x29	; 41
    1b0e:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1b10:	88 24       	eor	r8, r8
    1b12:	99 24       	eor	r9, r9
    1b14:	83 94       	inc	r8
    1b16:	9b 82       	std	Y+3, r9	; 0x03
    1b18:	8a 82       	std	Y+2, r8	; 0x02
			/* Default enter sequence for state EnterCode */
			/* Entry action for state 'EnterCode'. */
			sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    1b1a:	e8 84       	ldd	r14, Y+8	; 0x08
    1b1c:	f9 84       	ldd	r15, Y+9	; 0x09
    1b1e:	0a 85       	ldd	r16, Y+10	; 0x0a
    1b20:	1b 85       	ldd	r17, Y+11	; 0x0b
    1b22:	89 a5       	lds	r24, 0x69
    1b24:	9a a5       	lds	r25, 0x6a
    1b26:	ab a5       	lds	r26, 0x6b
    1b28:	bc a5       	lds	r27, 0x6c
    1b2a:	9c 01       	movw	r18, r24
    1b2c:	ad 01       	movw	r20, r26
    1b2e:	22 0f       	add	r18, r18
    1b30:	33 1f       	adc	r19, r19
    1b32:	44 1f       	adc	r20, r20
    1b34:	55 1f       	adc	r21, r21
    1b36:	c8 01       	movw	r24, r16
    1b38:	b7 01       	movw	r22, r14
    1b3a:	ee 24       	eor	r14, r14
    1b3c:	ff 24       	eor	r15, r15
    1b3e:	87 01       	movw	r16, r14
    1b40:	e3 94       	inc	r14
    1b42:	aa 24       	eor	r10, r10
    1b44:	bb 24       	eor	r11, r11
    1b46:	65 01       	movw	r12, r10
    1b48:	a3 94       	inc	r10
    1b4a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <sMOIfaceLCD_writeNumberXY>
			handle->ifaceDISH.pos += 1;
    1b4e:	89 a5       	lds	r24, 0x69
    1b50:	9a a5       	lds	r25, 0x6a
    1b52:	ab a5       	lds	r26, 0x6b
    1b54:	bc a5       	lds	r27, 0x6c
    1b56:	01 96       	adiw	r24, 0x01	; 1
    1b58:	a1 1d       	adc	r26, r1
    1b5a:	b1 1d       	adc	r27, r1
    1b5c:	89 a7       	lds	r24, 0x79
    1b5e:	9a a7       	lds	r25, 0x7a
    1b60:	ab a7       	lds	r26, 0x7b
    1b62:	bc a7       	lds	r27, 0x7c
			handle->ifaceDISH.ID = handle->ifaceDISH.ID * 10 + handle->ifaceKEYPAD.lastkey;
    1b64:	69 a1       	lds	r22, 0x49
    1b66:	7a a1       	lds	r23, 0x4a
    1b68:	8b a1       	lds	r24, 0x4b
    1b6a:	9c a1       	lds	r25, 0x4c
    1b6c:	2a e0       	ldi	r18, 0x0A	; 10
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	40 e0       	ldi	r20, 0x00	; 0
    1b72:	50 e0       	ldi	r21, 0x00	; 0
    1b74:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <__mulsi3>
    1b78:	ab 01       	movw	r20, r22
    1b7a:	bc 01       	movw	r22, r24
    1b7c:	88 85       	ldd	r24, Y+8	; 0x08
    1b7e:	99 85       	ldd	r25, Y+9	; 0x09
    1b80:	aa 85       	ldd	r26, Y+10	; 0x0a
    1b82:	bb 85       	ldd	r27, Y+11	; 0x0b
    1b84:	84 0f       	add	r24, r20
    1b86:	95 1f       	adc	r25, r21
    1b88:	a6 1f       	adc	r26, r22
    1b8a:	b7 1f       	adc	r27, r23
    1b8c:	89 a3       	lds	r24, 0x59
    1b8e:	9a a3       	lds	r25, 0x5a
    1b90:	ab a3       	lds	r26, 0x5b
    1b92:	bc a3       	lds	r27, 0x5c
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode;
    1b94:	88 e0       	ldi	r24, 0x08	; 8
    1b96:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1b98:	9b 82       	std	Y+3, r9	; 0x03
    1b9a:	8a 82       	std	Y+2, r8	; 0x02
    1b9c:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <sMO_runCycle+0x2178>
}

/* The reactions of state ShowAmount. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount(SMO* handle) {
	/* The reactions of state ShowAmount. */
	if (handle->iface.menuId == 0) { 
    1ba0:	8e a5       	lds	r24, 0x6e
    1ba2:	9f a5       	lds	r25, 0x6f
    1ba4:	a8 a9       	sts	0x48, r26
    1ba6:	b9 a9       	sts	0x49, r27
    1ba8:	00 97       	sbiw	r24, 0x00	; 0
    1baa:	a1 05       	cpc	r26, r1
    1bac:	b1 05       	cpc	r27, r1
    1bae:	09 f0       	breq	.+2      	; 0x1bb2 <sMO_runCycle+0x968>
    1bb0:	91 c0       	rjmp	.+290    	; 0x1cd4 <sMO_runCycle+0xa8a>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	8c 30       	cpi	r24, 0x0C	; 12
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <sMO_runCycle+0x970>
    1bb8:	47 c0       	rjmp	.+142    	; 0x1c48 <sMO_runCycle+0x9fe>
    1bba:	8d 30       	cpi	r24, 0x0D	; 13
    1bbc:	80 f4       	brcc	.+32     	; 0x1bde <sMO_runCycle+0x994>
    1bbe:	89 30       	cpi	r24, 0x09	; 9
    1bc0:	71 f1       	breq	.+92     	; 0x1c1e <sMO_runCycle+0x9d4>
    1bc2:	8a 30       	cpi	r24, 0x0A	; 10
    1bc4:	30 f4       	brcc	.+12     	; 0x1bd2 <sMO_runCycle+0x988>
    1bc6:	87 30       	cpi	r24, 0x07	; 7
    1bc8:	e1 f0       	breq	.+56     	; 0x1c02 <sMO_runCycle+0x9b8>
    1bca:	88 30       	cpi	r24, 0x08	; 8
    1bcc:	09 f0       	breq	.+2      	; 0x1bd0 <sMO_runCycle+0x986>
    1bce:	65 c0       	rjmp	.+202    	; 0x1c9a <sMO_runCycle+0xa50>
    1bd0:	1f c0       	rjmp	.+62     	; 0x1c10 <sMO_runCycle+0x9c6>
    1bd2:	8a 30       	cpi	r24, 0x0A	; 10
    1bd4:	59 f1       	breq	.+86     	; 0x1c2c <sMO_runCycle+0x9e2>
    1bd6:	8b 30       	cpi	r24, 0x0B	; 11
    1bd8:	09 f0       	breq	.+2      	; 0x1bdc <sMO_runCycle+0x992>
    1bda:	5f c0       	rjmp	.+190    	; 0x1c9a <sMO_runCycle+0xa50>
    1bdc:	2e c0       	rjmp	.+92     	; 0x1c3a <sMO_runCycle+0x9f0>
    1bde:	80 31       	cpi	r24, 0x10	; 16
    1be0:	09 f4       	brne	.+2      	; 0x1be4 <sMO_runCycle+0x99a>
    1be2:	47 c0       	rjmp	.+142    	; 0x1c72 <sMO_runCycle+0xa28>
    1be4:	81 31       	cpi	r24, 0x11	; 17
    1be6:	30 f4       	brcc	.+12     	; 0x1bf4 <sMO_runCycle+0x9aa>
    1be8:	8e 30       	cpi	r24, 0x0E	; 14
    1bea:	a9 f1       	breq	.+106    	; 0x1c56 <sMO_runCycle+0xa0c>
    1bec:	8f 30       	cpi	r24, 0x0F	; 15
    1bee:	09 f0       	breq	.+2      	; 0x1bf2 <sMO_runCycle+0x9a8>
    1bf0:	54 c0       	rjmp	.+168    	; 0x1c9a <sMO_runCycle+0xa50>
    1bf2:	38 c0       	rjmp	.+112    	; 0x1c64 <sMO_runCycle+0xa1a>
    1bf4:	81 31       	cpi	r24, 0x11	; 17
    1bf6:	09 f4       	brne	.+2      	; 0x1bfa <sMO_runCycle+0x9b0>
    1bf8:	43 c0       	rjmp	.+134    	; 0x1c80 <sMO_runCycle+0xa36>
    1bfa:	82 31       	cpi	r24, 0x12	; 18
    1bfc:	09 f0       	breq	.+2      	; 0x1c00 <sMO_runCycle+0x9b6>
    1bfe:	4d c0       	rjmp	.+154    	; 0x1c9a <sMO_runCycle+0xa50>
    1c00:	46 c0       	rjmp	.+140    	; 0x1c8e <sMO_runCycle+0xa44>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1c02:	89 e2       	ldi	r24, 0x29	; 41
    1c04:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	9b 83       	std	Y+3, r25	; 0x03
    1c0c:	8a 83       	std	Y+2, r24	; 0x02
    1c0e:	45 c0       	rjmp	.+138    	; 0x1c9a <sMO_runCycle+0xa50>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1c10:	89 e2       	ldi	r24, 0x29	; 41
    1c12:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	9b 83       	std	Y+3, r25	; 0x03
    1c1a:	8a 83       	std	Y+2, r24	; 0x02
    1c1c:	3e c0       	rjmp	.+124    	; 0x1c9a <sMO_runCycle+0xa50>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1c1e:	89 e2       	ldi	r24, 0x29	; 41
    1c20:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	9b 83       	std	Y+3, r25	; 0x03
    1c28:	8a 83       	std	Y+2, r24	; 0x02
    1c2a:	37 c0       	rjmp	.+110    	; 0x1c9a <sMO_runCycle+0xa50>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1c2c:	89 e2       	ldi	r24, 0x29	; 41
    1c2e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	9b 83       	std	Y+3, r25	; 0x03
    1c36:	8a 83       	std	Y+2, r24	; 0x02
    1c38:	30 c0       	rjmp	.+96     	; 0x1c9a <sMO_runCycle+0xa50>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1c3a:	89 e2       	ldi	r24, 0x29	; 41
    1c3c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	9b 83       	std	Y+3, r25	; 0x03
    1c44:	8a 83       	std	Y+2, r24	; 0x02
    1c46:	29 c0       	rjmp	.+82     	; 0x1c9a <sMO_runCycle+0xa50>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1c48:	89 e2       	ldi	r24, 0x29	; 41
    1c4a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	9b 83       	std	Y+3, r25	; 0x03
    1c52:	8a 83       	std	Y+2, r24	; 0x02
    1c54:	22 c0       	rjmp	.+68     	; 0x1c9a <sMO_runCycle+0xa50>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1c56:	89 e2       	ldi	r24, 0x29	; 41
    1c58:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	9b 83       	std	Y+3, r25	; 0x03
    1c60:	8a 83       	std	Y+2, r24	; 0x02
    1c62:	1b c0       	rjmp	.+54     	; 0x1c9a <sMO_runCycle+0xa50>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1c64:	89 e2       	ldi	r24, 0x29	; 41
    1c66:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	9b 83       	std	Y+3, r25	; 0x03
    1c6e:	8a 83       	std	Y+2, r24	; 0x02
    1c70:	14 c0       	rjmp	.+40     	; 0x1c9a <sMO_runCycle+0xa50>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_KeepOrdering : {
				/* Default exit sequence for state KeepOrdering */
				handle->stateConfVector[1] = SMO_last_state;
    1c72:	89 e2       	ldi	r24, 0x29	; 41
    1c74:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	9b 83       	std	Y+3, r25	; 0x03
    1c7c:	8a 83       	std	Y+2, r24	; 0x02
    1c7e:	0d c0       	rjmp	.+26     	; 0x1c9a <sMO_runCycle+0xa50>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_Exit : {
				/* Default exit sequence for state Exit */
				handle->stateConfVector[1] = SMO_last_state;
    1c80:	89 e2       	ldi	r24, 0x29	; 41
    1c82:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	9b 83       	std	Y+3, r25	; 0x03
    1c8a:	8a 83       	std	Y+2, r24	; 0x02
    1c8c:	06 c0       	rjmp	.+12     	; 0x1c9a <sMO_runCycle+0xa50>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress3 : {
				/* Default exit sequence for state CheckKeyPress3 */
				handle->stateConfVector[1] = SMO_last_state;
    1c8e:	89 e2       	ldi	r24, 0x29	; 41
    1c90:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	9b 83       	std	Y+3, r25	; 0x03
    1c98:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1c9a:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    1c9e:	88 e0       	ldi	r24, 0x08	; 8
    1ca0:	92 e0       	ldi	r25, 0x02	; 2
    1ca2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    1ca6:	87 e1       	ldi	r24, 0x17	; 23
    1ca8:	92 e0       	ldi	r25, 0x02	; 2
    1caa:	40 e0       	ldi	r20, 0x00	; 0
    1cac:	50 e0       	ldi	r21, 0x00	; 0
    1cae:	ba 01       	movw	r22, r20
    1cb0:	01 e0       	ldi	r16, 0x01	; 1
    1cb2:	10 e0       	ldi	r17, 0x00	; 0
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1cbc:	1e a6       	lds	r17, 0xbe
    1cbe:	1f a6       	lds	r17, 0xbf
    1cc0:	18 aa       	sts	0x98, r17
    1cc2:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1cc4:	85 e0       	ldi	r24, 0x05	; 5
    1cc6:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	9b 83       	std	Y+3, r25	; 0x03
    1cce:	8a 83       	std	Y+2, r24	; 0x02
    1cd0:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <sMO_runCycle+0x2178>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state ShowAmount */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    1cd4:	1b 83       	std	Y+3, r17	; 0x03
    1cd6:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress2 */
			/* Entry action for state 'CheckKeyPress2'. */
			handle->ifaceKEYPAD.lastkey = 0;
    1cd8:	18 86       	std	Y+8, r1	; 0x08
    1cda:	19 86       	std	Y+9, r1	; 0x09
    1cdc:	1a 86       	std	Y+10, r1	; 0x0a
    1cde:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2;
    1ce0:	8c e0       	ldi	r24, 0x0C	; 12
    1ce2:	89 83       	std	Y+1, r24	; 0x01
    1ce4:	0c 94 bf 19 	jmp	0x337e	; 0x337e <sMO_runCycle+0x2134>
}

/* The reactions of state CheckKeyPress2. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2(SMO* handle) {
	/* The reactions of state CheckKeyPress2. */
	if (handle->iface.menuId == 0) { 
    1ce8:	8e a5       	lds	r24, 0x6e
    1cea:	9f a5       	lds	r25, 0x6f
    1cec:	a8 a9       	sts	0x48, r26
    1cee:	b9 a9       	sts	0x49, r27
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	a1 05       	cpc	r26, r1
    1cf4:	b1 05       	cpc	r27, r1
    1cf6:	09 f0       	breq	.+2      	; 0x1cfa <sMO_runCycle+0xab0>
    1cf8:	91 c0       	rjmp	.+290    	; 0x1e1c <sMO_runCycle+0xbd2>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01
    1cfc:	8c 30       	cpi	r24, 0x0C	; 12
    1cfe:	09 f4       	brne	.+2      	; 0x1d02 <sMO_runCycle+0xab8>
    1d00:	47 c0       	rjmp	.+142    	; 0x1d90 <sMO_runCycle+0xb46>
    1d02:	8d 30       	cpi	r24, 0x0D	; 13
    1d04:	80 f4       	brcc	.+32     	; 0x1d26 <sMO_runCycle+0xadc>
    1d06:	89 30       	cpi	r24, 0x09	; 9
    1d08:	71 f1       	breq	.+92     	; 0x1d66 <sMO_runCycle+0xb1c>
    1d0a:	8a 30       	cpi	r24, 0x0A	; 10
    1d0c:	30 f4       	brcc	.+12     	; 0x1d1a <sMO_runCycle+0xad0>
    1d0e:	87 30       	cpi	r24, 0x07	; 7
    1d10:	e1 f0       	breq	.+56     	; 0x1d4a <sMO_runCycle+0xb00>
    1d12:	88 30       	cpi	r24, 0x08	; 8
    1d14:	09 f0       	breq	.+2      	; 0x1d18 <sMO_runCycle+0xace>
    1d16:	65 c0       	rjmp	.+202    	; 0x1de2 <sMO_runCycle+0xb98>
    1d18:	1f c0       	rjmp	.+62     	; 0x1d58 <sMO_runCycle+0xb0e>
    1d1a:	8a 30       	cpi	r24, 0x0A	; 10
    1d1c:	59 f1       	breq	.+86     	; 0x1d74 <sMO_runCycle+0xb2a>
    1d1e:	8b 30       	cpi	r24, 0x0B	; 11
    1d20:	09 f0       	breq	.+2      	; 0x1d24 <sMO_runCycle+0xada>
    1d22:	5f c0       	rjmp	.+190    	; 0x1de2 <sMO_runCycle+0xb98>
    1d24:	2e c0       	rjmp	.+92     	; 0x1d82 <sMO_runCycle+0xb38>
    1d26:	80 31       	cpi	r24, 0x10	; 16
    1d28:	09 f4       	brne	.+2      	; 0x1d2c <sMO_runCycle+0xae2>
    1d2a:	47 c0       	rjmp	.+142    	; 0x1dba <sMO_runCycle+0xb70>
    1d2c:	81 31       	cpi	r24, 0x11	; 17
    1d2e:	30 f4       	brcc	.+12     	; 0x1d3c <sMO_runCycle+0xaf2>
    1d30:	8e 30       	cpi	r24, 0x0E	; 14
    1d32:	a9 f1       	breq	.+106    	; 0x1d9e <sMO_runCycle+0xb54>
    1d34:	8f 30       	cpi	r24, 0x0F	; 15
    1d36:	09 f0       	breq	.+2      	; 0x1d3a <sMO_runCycle+0xaf0>
    1d38:	54 c0       	rjmp	.+168    	; 0x1de2 <sMO_runCycle+0xb98>
    1d3a:	38 c0       	rjmp	.+112    	; 0x1dac <sMO_runCycle+0xb62>
    1d3c:	81 31       	cpi	r24, 0x11	; 17
    1d3e:	09 f4       	brne	.+2      	; 0x1d42 <sMO_runCycle+0xaf8>
    1d40:	43 c0       	rjmp	.+134    	; 0x1dc8 <sMO_runCycle+0xb7e>
    1d42:	82 31       	cpi	r24, 0x12	; 18
    1d44:	09 f0       	breq	.+2      	; 0x1d48 <sMO_runCycle+0xafe>
    1d46:	4d c0       	rjmp	.+154    	; 0x1de2 <sMO_runCycle+0xb98>
    1d48:	46 c0       	rjmp	.+140    	; 0x1dd6 <sMO_runCycle+0xb8c>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    1d4a:	89 e2       	ldi	r24, 0x29	; 41
    1d4c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	9b 83       	std	Y+3, r25	; 0x03
    1d54:	8a 83       	std	Y+2, r24	; 0x02
    1d56:	45 c0       	rjmp	.+138    	; 0x1de2 <sMO_runCycle+0xb98>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    1d58:	89 e2       	ldi	r24, 0x29	; 41
    1d5a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	9b 83       	std	Y+3, r25	; 0x03
    1d62:	8a 83       	std	Y+2, r24	; 0x02
    1d64:	3e c0       	rjmp	.+124    	; 0x1de2 <sMO_runCycle+0xb98>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    1d66:	89 e2       	ldi	r24, 0x29	; 41
    1d68:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	9b 83       	std	Y+3, r25	; 0x03
    1d70:	8a 83       	std	Y+2, r24	; 0x02
    1d72:	37 c0       	rjmp	.+110    	; 0x1de2 <sMO_runCycle+0xb98>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    1d74:	89 e2       	ldi	r24, 0x29	; 41
    1d76:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	9b 83       	std	Y+3, r25	; 0x03
    1d7e:	8a 83       	std	Y+2, r24	; 0x02
    1d80:	30 c0       	rjmp	.+96     	; 0x1de2 <sMO_runCycle+0xb98>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1d82:	89 e2       	ldi	r24, 0x29	; 41
    1d84:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	9b 83       	std	Y+3, r25	; 0x03
    1d8c:	8a 83       	std	Y+2, r24	; 0x02
    1d8e:	29 c0       	rjmp	.+82     	; 0x1de2 <sMO_runCycle+0xb98>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1d90:	89 e2       	ldi	r24, 0x29	; 41
    1d92:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	9b 83       	std	Y+3, r25	; 0x03
    1d9a:	8a 83       	std	Y+2, r24	; 0x02
    1d9c:	22 c0       	rjmp	.+68     	; 0x1de2 <sMO_runCycle+0xb98>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    1d9e:	89 e2       	ldi	r24, 0x29	; 41
    1da0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	9b 83       	std	Y+3, r25	; 0x03
    1da8:	8a 83       	std	Y+2, r24	; 0x02
    1daa:	1b c0       	rjmp	.+54     	; 0x1de2 <sMO_runCycle+0xb98>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    1dac:	89 e2       	ldi	r24, 0x29	; 41
    1dae:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	9b 83       	std	Y+3, r25	; 0x03
    1db6:	8a 83       	std	Y+2, r24	; 0x02
    1db8:	14 c0       	rjmp	.+40     	; 0x1de2 <sMO_runCycle+0xb98>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_KeepOrdering : {
				/* Default exit sequence for state KeepOrdering */
				handle->stateConfVector[1] = SMO_last_state;
    1dba:	89 e2       	ldi	r24, 0x29	; 41
    1dbc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	9b 83       	std	Y+3, r25	; 0x03
    1dc4:	8a 83       	std	Y+2, r24	; 0x02
    1dc6:	0d c0       	rjmp	.+26     	; 0x1de2 <sMO_runCycle+0xb98>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_Exit : {
				/* Default exit sequence for state Exit */
				handle->stateConfVector[1] = SMO_last_state;
    1dc8:	89 e2       	ldi	r24, 0x29	; 41
    1dca:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	9b 83       	std	Y+3, r25	; 0x03
    1dd2:	8a 83       	std	Y+2, r24	; 0x02
    1dd4:	06 c0       	rjmp	.+12     	; 0x1de2 <sMO_runCycle+0xb98>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress3 : {
				/* Default exit sequence for state CheckKeyPress3 */
				handle->stateConfVector[1] = SMO_last_state;
    1dd6:	89 e2       	ldi	r24, 0x29	; 41
    1dd8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	9b 83       	std	Y+3, r25	; 0x03
    1de0:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    1de2:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    1de6:	88 e0       	ldi	r24, 0x08	; 8
    1de8:	92 e0       	ldi	r25, 0x02	; 2
    1dea:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    1dee:	87 e1       	ldi	r24, 0x17	; 23
    1df0:	92 e0       	ldi	r25, 0x02	; 2
    1df2:	40 e0       	ldi	r20, 0x00	; 0
    1df4:	50 e0       	ldi	r21, 0x00	; 0
    1df6:	ba 01       	movw	r22, r20
    1df8:	01 e0       	ldi	r16, 0x01	; 1
    1dfa:	10 e0       	ldi	r17, 0x00	; 0
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    1e04:	1e a6       	lds	r17, 0xbe
    1e06:	1f a6       	lds	r17, 0xbf
    1e08:	18 aa       	sts	0x98, r17
    1e0a:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    1e0c:	85 e0       	ldi	r24, 0x05	; 5
    1e0e:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	9b 83       	std	Y+3, r25	; 0x03
    1e16:	8a 83       	std	Y+2, r24	; 0x02
    1e18:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <sMO_runCycle+0x2178>
	}  else {
		if (handle->ifaceDISH.pos < 2 && handle->ifaceKEYPAD.lastkey == 10 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1e1c:	49 a5       	lds	r20, 0x69
    1e1e:	5a a5       	lds	r21, 0x6a
    1e20:	6b a5       	lds	r22, 0x6b
    1e22:	7c a5       	lds	r23, 0x6c
    1e24:	42 30       	cpi	r20, 0x02	; 2
    1e26:	51 05       	cpc	r21, r1
    1e28:	61 05       	cpc	r22, r1
    1e2a:	71 05       	cpc	r23, r1
    1e2c:	0c f0       	brlt	.+2      	; 0x1e30 <sMO_runCycle+0xbe6>
    1e2e:	6a c0       	rjmp	.+212    	; 0x1f04 <sMO_runCycle+0xcba>
    1e30:	88 85       	ldd	r24, Y+8	; 0x08
    1e32:	99 85       	ldd	r25, Y+9	; 0x09
    1e34:	aa 85       	ldd	r26, Y+10	; 0x0a
    1e36:	bb 85       	ldd	r27, Y+11	; 0x0b
    1e38:	8a 30       	cpi	r24, 0x0A	; 10
    1e3a:	91 05       	cpc	r25, r1
    1e3c:	a1 05       	cpc	r26, r1
    1e3e:	b1 05       	cpc	r27, r1
    1e40:	69 f4       	brne	.+26     	; 0x1e5c <sMO_runCycle+0xc12>
    1e42:	2d 85       	ldd	r18, Y+13	; 0x0d
    1e44:	22 23       	and	r18, r18
    1e46:	51 f0       	breq	.+20     	; 0x1e5c <sMO_runCycle+0xc12>
			/* Default exit sequence for state CheckKeyPress2 */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    1e48:	1b 83       	std	Y+3, r17	; 0x03
    1e4a:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckAmount0 */
			/* Entry action for state 'CheckAmount0'. */
			handle->ifaceKEYPAD.lastkey = 0;
    1e4c:	18 86       	std	Y+8, r1	; 0x08
    1e4e:	19 86       	std	Y+9, r1	; 0x09
    1e50:	1a 86       	std	Y+10, r1	; 0x0a
    1e52:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0;
    1e54:	8d e0       	ldi	r24, 0x0D	; 13
    1e56:	89 83       	std	Y+1, r24	; 0x01
    1e58:	0c 94 bf 19 	jmp	0x337e	; 0x337e <sMO_runCycle+0x2134>
			handle->stateConfVectorPosition = 1;
		}  else {
			if (handle->ifaceDISH.pos < 2 && handle->ifaceKEYPAD.lastkey <= 9 && handle->ifaceKEYPAD.lastkey >= 1 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1e5c:	8a 30       	cpi	r24, 0x0A	; 10
    1e5e:	91 05       	cpc	r25, r1
    1e60:	a1 05       	cpc	r26, r1
    1e62:	b1 05       	cpc	r27, r1
    1e64:	0c f0       	brlt	.+2      	; 0x1e68 <sMO_runCycle+0xc1e>
    1e66:	4e c0       	rjmp	.+156    	; 0x1f04 <sMO_runCycle+0xcba>
    1e68:	18 16       	cp	r1, r24
    1e6a:	19 06       	cpc	r1, r25
    1e6c:	1a 06       	cpc	r1, r26
    1e6e:	1b 06       	cpc	r1, r27
    1e70:	0c f0       	brlt	.+2      	; 0x1e74 <sMO_runCycle+0xc2a>
    1e72:	48 c0       	rjmp	.+144    	; 0x1f04 <sMO_runCycle+0xcba>
    1e74:	2d 85       	ldd	r18, Y+13	; 0x0d
    1e76:	22 23       	and	r18, r18
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <sMO_runCycle+0xc32>
    1e7a:	44 c0       	rjmp	.+136    	; 0x1f04 <sMO_runCycle+0xcba>
    1e7c:	6c 01       	movw	r12, r24
    1e7e:	7d 01       	movw	r14, r26
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    1e80:	89 e2       	ldi	r24, 0x29	; 41
    1e82:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1e84:	88 24       	eor	r8, r8
    1e86:	99 24       	eor	r9, r9
    1e88:	83 94       	inc	r8
    1e8a:	9b 82       	std	Y+3, r9	; 0x03
    1e8c:	8a 82       	std	Y+2, r8	; 0x02
				/* Default enter sequence for state EnterAmount */
				/* Entry action for state 'EnterAmount'. */
				sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    1e8e:	9a 01       	movw	r18, r20
    1e90:	ab 01       	movw	r20, r22
    1e92:	22 0f       	add	r18, r18
    1e94:	33 1f       	adc	r19, r19
    1e96:	44 1f       	adc	r20, r20
    1e98:	55 1f       	adc	r21, r21
    1e9a:	c7 01       	movw	r24, r14
    1e9c:	b6 01       	movw	r22, r12
    1e9e:	ee 24       	eor	r14, r14
    1ea0:	ff 24       	eor	r15, r15
    1ea2:	87 01       	movw	r16, r14
    1ea4:	e3 94       	inc	r14
    1ea6:	aa 24       	eor	r10, r10
    1ea8:	bb 24       	eor	r11, r11
    1eaa:	65 01       	movw	r12, r10
    1eac:	a3 94       	inc	r10
    1eae:	0e 94 6e 02 	call	0x4dc	; 0x4dc <sMOIfaceLCD_writeNumberXY>
				handle->ifaceDISH.pos += 1;
    1eb2:	89 a5       	lds	r24, 0x69
    1eb4:	9a a5       	lds	r25, 0x6a
    1eb6:	ab a5       	lds	r26, 0x6b
    1eb8:	bc a5       	lds	r27, 0x6c
    1eba:	01 96       	adiw	r24, 0x01	; 1
    1ebc:	a1 1d       	adc	r26, r1
    1ebe:	b1 1d       	adc	r27, r1
    1ec0:	89 a7       	lds	r24, 0x79
    1ec2:	9a a7       	lds	r25, 0x7a
    1ec4:	ab a7       	lds	r26, 0x7b
    1ec6:	bc a7       	lds	r27, 0x7c
				handle->ifaceDISH.amount = handle->ifaceDISH.amount * 10 + handle->ifaceKEYPAD.lastkey;
    1ec8:	6d a1       	lds	r22, 0x4d
    1eca:	7e a1       	lds	r23, 0x4e
    1ecc:	8f a1       	lds	r24, 0x4f
    1ece:	98 a5       	lds	r25, 0x68
    1ed0:	2a e0       	ldi	r18, 0x0A	; 10
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	40 e0       	ldi	r20, 0x00	; 0
    1ed6:	50 e0       	ldi	r21, 0x00	; 0
    1ed8:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <__mulsi3>
    1edc:	ab 01       	movw	r20, r22
    1ede:	bc 01       	movw	r22, r24
    1ee0:	88 85       	ldd	r24, Y+8	; 0x08
    1ee2:	99 85       	ldd	r25, Y+9	; 0x09
    1ee4:	aa 85       	ldd	r26, Y+10	; 0x0a
    1ee6:	bb 85       	ldd	r27, Y+11	; 0x0b
    1ee8:	84 0f       	add	r24, r20
    1eea:	95 1f       	adc	r25, r21
    1eec:	a6 1f       	adc	r26, r22
    1eee:	b7 1f       	adc	r27, r23
    1ef0:	8d a3       	lds	r24, 0x5d
    1ef2:	9e a3       	lds	r25, 0x5e
    1ef4:	af a3       	lds	r26, 0x5f
    1ef6:	b8 a7       	lds	r27, 0x78
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount;
    1ef8:	8e e0       	ldi	r24, 0x0E	; 14
    1efa:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1efc:	9b 82       	std	Y+3, r9	; 0x03
    1efe:	8a 82       	std	Y+2, r8	; 0x02
    1f00:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <sMO_runCycle+0x2178>
			}  else {
				if (handle->ifaceKEYPAD.lastkey == 11 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1f04:	88 85       	ldd	r24, Y+8	; 0x08
    1f06:	99 85       	ldd	r25, Y+9	; 0x09
    1f08:	aa 85       	ldd	r26, Y+10	; 0x0a
    1f0a:	bb 85       	ldd	r27, Y+11	; 0x0b
    1f0c:	8b 30       	cpi	r24, 0x0B	; 11
    1f0e:	91 05       	cpc	r25, r1
    1f10:	a1 05       	cpc	r26, r1
    1f12:	b1 05       	cpc	r27, r1
    1f14:	49 f5       	brne	.+82     	; 0x1f68 <sMO_runCycle+0xd1e>
    1f16:	2d 85       	ldd	r18, Y+13	; 0x0d
    1f18:	22 23       	and	r18, r18
    1f1a:	31 f1       	breq	.+76     	; 0x1f68 <sMO_runCycle+0xd1e>
					/* Default exit sequence for state CheckKeyPress2 */
					handle->stateConfVector[1] = SMO_last_state;
    1f1c:	89 e2       	ldi	r24, 0x29	; 41
    1f1e:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    1f20:	ee 24       	eor	r14, r14
    1f22:	ff 24       	eor	r15, r15
    1f24:	e3 94       	inc	r14
    1f26:	fb 82       	std	Y+3, r15	; 0x03
    1f28:	ea 82       	std	Y+2, r14	; 0x02
					/* Default enter sequence for state ShowAmount */
					/* Entry action for state 'ShowAmount'. */
					sMOIfaceLCD_clear();
    1f2a:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
					sMOIfaceLCD_writeString("Amount:");
    1f2e:	86 e3       	ldi	r24, 0x36	; 54
    1f30:	92 e0       	ldi	r25, 0x02	; 2
    1f32:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
					sMOIfaceLCD_writeStringXY("_ _", 0, 1);
    1f36:	8e e3       	ldi	r24, 0x3E	; 62
    1f38:	92 e0       	ldi	r25, 0x02	; 2
    1f3a:	40 e0       	ldi	r20, 0x00	; 0
    1f3c:	50 e0       	ldi	r21, 0x00	; 0
    1f3e:	ba 01       	movw	r22, r20
    1f40:	01 e0       	ldi	r16, 0x01	; 1
    1f42:	10 e0       	ldi	r17, 0x00	; 0
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
					handle->ifaceDISH.pos = 0;
    1f4c:	19 a6       	lds	r17, 0xb9
    1f4e:	1a a6       	lds	r17, 0xba
    1f50:	1b a6       	lds	r17, 0xbb
    1f52:	1c a6       	lds	r17, 0xbc
					handle->ifaceDISH.amount = 0;
    1f54:	1d a2       	lds	r17, 0x9d
    1f56:	1e a2       	lds	r17, 0x9e
    1f58:	1f a2       	lds	r17, 0x9f
    1f5a:	18 a6       	lds	r17, 0xb8
					handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount;
    1f5c:	8b e0       	ldi	r24, 0x0B	; 11
    1f5e:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    1f60:	fb 82       	std	Y+3, r15	; 0x03
    1f62:	ea 82       	std	Y+2, r14	; 0x02
    1f64:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <sMO_runCycle+0x2178>
				}  else {
					if (handle->ifaceKEYPAD.lastkey == 16 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1f68:	80 31       	cpi	r24, 0x10	; 16
    1f6a:	91 05       	cpc	r25, r1
    1f6c:	a1 05       	cpc	r26, r1
    1f6e:	b1 05       	cpc	r27, r1
    1f70:	09 f5       	brne	.+66     	; 0x1fb4 <sMO_runCycle+0xd6a>
    1f72:	2d 85       	ldd	r18, Y+13	; 0x0d
    1f74:	22 23       	and	r18, r18
    1f76:	f1 f0       	breq	.+60     	; 0x1fb4 <sMO_runCycle+0xd6a>
						/* Default exit sequence for state CheckKeyPress2 */
						handle->stateConfVector[1] = SMO_last_state;
    1f78:	89 e2       	ldi	r24, 0x29	; 41
    1f7a:	89 83       	std	Y+1, r24	; 0x01
						handle->stateConfVectorPosition = 1;
    1f7c:	ee 24       	eor	r14, r14
    1f7e:	ff 24       	eor	r15, r15
    1f80:	e3 94       	inc	r14
    1f82:	fb 82       	std	Y+3, r15	; 0x03
    1f84:	ea 82       	std	Y+2, r14	; 0x02
						/* Default enter sequence for state Exit */
						/* Entry action for state 'Exit'. */
						sMOIfaceLCD_clear();
    1f86:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
						sMOIfaceLCD_writeString("Finish Ordering?");
    1f8a:	82 e4       	ldi	r24, 0x42	; 66
    1f8c:	92 e0       	ldi	r25, 0x02	; 2
    1f8e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
						sMOIfaceLCD_writeStringXY("*.No  #.Yes", 0, 1);
    1f92:	83 e5       	ldi	r24, 0x53	; 83
    1f94:	92 e0       	ldi	r25, 0x02	; 2
    1f96:	40 e0       	ldi	r20, 0x00	; 0
    1f98:	50 e0       	ldi	r21, 0x00	; 0
    1f9a:	ba 01       	movw	r22, r20
    1f9c:	01 e0       	ldi	r16, 0x01	; 1
    1f9e:	10 e0       	ldi	r17, 0x00	; 0
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
						handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_Exit;
    1fa8:	81 e1       	ldi	r24, 0x11	; 17
    1faa:	89 83       	std	Y+1, r24	; 0x01
						handle->stateConfVectorPosition = 1;
    1fac:	fb 82       	std	Y+3, r15	; 0x03
    1fae:	ea 82       	std	Y+2, r14	; 0x02
    1fb0:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <sMO_runCycle+0x2178>
					}  else {
						if (handle->ifaceKEYPAD.lastkey == 12 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1fb4:	8c 30       	cpi	r24, 0x0C	; 12
    1fb6:	91 05       	cpc	r25, r1
    1fb8:	a1 05       	cpc	r26, r1
    1fba:	b1 05       	cpc	r27, r1
    1fbc:	11 f0       	breq	.+4      	; 0x1fc2 <sMO_runCycle+0xd78>
    1fbe:	0c 94 bf 19 	jmp	0x337e	; 0x337e <sMO_runCycle+0x2134>
    1fc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc4:	88 23       	and	r24, r24
    1fc6:	11 f4       	brne	.+4      	; 0x1fcc <sMO_runCycle+0xd82>
    1fc8:	0c 94 bf 19 	jmp	0x337e	; 0x337e <sMO_runCycle+0x2134>
							/* Default exit sequence for state CheckKeyPress2 */
							handle->stateConfVector[1] = SMO_last_state;
    1fcc:	89 e2       	ldi	r24, 0x29	; 41
    1fce:	89 83       	std	Y+1, r24	; 0x01
							handle->stateConfVectorPosition = 1;
    1fd0:	ee 24       	eor	r14, r14
    1fd2:	ff 24       	eor	r15, r15
    1fd4:	e3 94       	inc	r14
    1fd6:	fb 82       	std	Y+3, r15	; 0x03
    1fd8:	ea 82       	std	Y+2, r14	; 0x02
							/* Default enter sequence for state KeepOrdering */
							/* Entry action for state 'KeepOrdering'. */
							sMOIfaceLCD_clear();
    1fda:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
							sMOIfaceLCD_writeString("Order this?");
    1fde:	8f e5       	ldi	r24, 0x5F	; 95
    1fe0:	92 e0       	ldi	r25, 0x02	; 2
    1fe2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
							sMOIfaceLCD_writeStringXY("*.No  #.Yes", 0, 1);
    1fe6:	83 e5       	ldi	r24, 0x53	; 83
    1fe8:	92 e0       	ldi	r25, 0x02	; 2
    1fea:	40 e0       	ldi	r20, 0x00	; 0
    1fec:	50 e0       	ldi	r21, 0x00	; 0
    1fee:	ba 01       	movw	r22, r20
    1ff0:	01 e0       	ldi	r16, 0x01	; 1
    1ff2:	10 e0       	ldi	r17, 0x00	; 0
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
							handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_KeepOrdering;
    1ffc:	80 e1       	ldi	r24, 0x10	; 16
    1ffe:	89 83       	std	Y+1, r24	; 0x01
							handle->stateConfVectorPosition = 1;
    2000:	fb 82       	std	Y+3, r15	; 0x03
    2002:	ea 82       	std	Y+2, r14	; 0x02
    2004:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <sMO_runCycle+0x2178>
}

/* The reactions of state CheckAmount0. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0(SMO* handle) {
	/* The reactions of state CheckAmount0. */
	if (handle->iface.menuId == 0) { 
    2008:	8e a5       	lds	r24, 0x6e
    200a:	9f a5       	lds	r25, 0x6f
    200c:	a8 a9       	sts	0x48, r26
    200e:	b9 a9       	sts	0x49, r27
    2010:	00 97       	sbiw	r24, 0x00	; 0
    2012:	a1 05       	cpc	r26, r1
    2014:	b1 05       	cpc	r27, r1
    2016:	09 f0       	breq	.+2      	; 0x201a <sMO_runCycle+0xdd0>
    2018:	91 c0       	rjmp	.+290    	; 0x213c <sMO_runCycle+0xef2>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	8c 30       	cpi	r24, 0x0C	; 12
    201e:	09 f4       	brne	.+2      	; 0x2022 <sMO_runCycle+0xdd8>
    2020:	47 c0       	rjmp	.+142    	; 0x20b0 <sMO_runCycle+0xe66>
    2022:	8d 30       	cpi	r24, 0x0D	; 13
    2024:	80 f4       	brcc	.+32     	; 0x2046 <sMO_runCycle+0xdfc>
    2026:	89 30       	cpi	r24, 0x09	; 9
    2028:	71 f1       	breq	.+92     	; 0x2086 <sMO_runCycle+0xe3c>
    202a:	8a 30       	cpi	r24, 0x0A	; 10
    202c:	30 f4       	brcc	.+12     	; 0x203a <sMO_runCycle+0xdf0>
    202e:	87 30       	cpi	r24, 0x07	; 7
    2030:	e1 f0       	breq	.+56     	; 0x206a <sMO_runCycle+0xe20>
    2032:	88 30       	cpi	r24, 0x08	; 8
    2034:	09 f0       	breq	.+2      	; 0x2038 <sMO_runCycle+0xdee>
    2036:	65 c0       	rjmp	.+202    	; 0x2102 <sMO_runCycle+0xeb8>
    2038:	1f c0       	rjmp	.+62     	; 0x2078 <sMO_runCycle+0xe2e>
    203a:	8a 30       	cpi	r24, 0x0A	; 10
    203c:	59 f1       	breq	.+86     	; 0x2094 <sMO_runCycle+0xe4a>
    203e:	8b 30       	cpi	r24, 0x0B	; 11
    2040:	09 f0       	breq	.+2      	; 0x2044 <sMO_runCycle+0xdfa>
    2042:	5f c0       	rjmp	.+190    	; 0x2102 <sMO_runCycle+0xeb8>
    2044:	2e c0       	rjmp	.+92     	; 0x20a2 <sMO_runCycle+0xe58>
    2046:	80 31       	cpi	r24, 0x10	; 16
    2048:	09 f4       	brne	.+2      	; 0x204c <sMO_runCycle+0xe02>
    204a:	47 c0       	rjmp	.+142    	; 0x20da <sMO_runCycle+0xe90>
    204c:	81 31       	cpi	r24, 0x11	; 17
    204e:	30 f4       	brcc	.+12     	; 0x205c <sMO_runCycle+0xe12>
    2050:	8e 30       	cpi	r24, 0x0E	; 14
    2052:	a9 f1       	breq	.+106    	; 0x20be <sMO_runCycle+0xe74>
    2054:	8f 30       	cpi	r24, 0x0F	; 15
    2056:	09 f0       	breq	.+2      	; 0x205a <sMO_runCycle+0xe10>
    2058:	54 c0       	rjmp	.+168    	; 0x2102 <sMO_runCycle+0xeb8>
    205a:	38 c0       	rjmp	.+112    	; 0x20cc <sMO_runCycle+0xe82>
    205c:	81 31       	cpi	r24, 0x11	; 17
    205e:	09 f4       	brne	.+2      	; 0x2062 <sMO_runCycle+0xe18>
    2060:	43 c0       	rjmp	.+134    	; 0x20e8 <sMO_runCycle+0xe9e>
    2062:	82 31       	cpi	r24, 0x12	; 18
    2064:	09 f0       	breq	.+2      	; 0x2068 <sMO_runCycle+0xe1e>
    2066:	4d c0       	rjmp	.+154    	; 0x2102 <sMO_runCycle+0xeb8>
    2068:	46 c0       	rjmp	.+140    	; 0x20f6 <sMO_runCycle+0xeac>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    206a:	89 e2       	ldi	r24, 0x29	; 41
    206c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	9b 83       	std	Y+3, r25	; 0x03
    2074:	8a 83       	std	Y+2, r24	; 0x02
    2076:	45 c0       	rjmp	.+138    	; 0x2102 <sMO_runCycle+0xeb8>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    2078:	89 e2       	ldi	r24, 0x29	; 41
    207a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	9b 83       	std	Y+3, r25	; 0x03
    2082:	8a 83       	std	Y+2, r24	; 0x02
    2084:	3e c0       	rjmp	.+124    	; 0x2102 <sMO_runCycle+0xeb8>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    2086:	89 e2       	ldi	r24, 0x29	; 41
    2088:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	9b 83       	std	Y+3, r25	; 0x03
    2090:	8a 83       	std	Y+2, r24	; 0x02
    2092:	37 c0       	rjmp	.+110    	; 0x2102 <sMO_runCycle+0xeb8>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    2094:	89 e2       	ldi	r24, 0x29	; 41
    2096:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	9b 83       	std	Y+3, r25	; 0x03
    209e:	8a 83       	std	Y+2, r24	; 0x02
    20a0:	30 c0       	rjmp	.+96     	; 0x2102 <sMO_runCycle+0xeb8>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    20a2:	89 e2       	ldi	r24, 0x29	; 41
    20a4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	9b 83       	std	Y+3, r25	; 0x03
    20ac:	8a 83       	std	Y+2, r24	; 0x02
    20ae:	29 c0       	rjmp	.+82     	; 0x2102 <sMO_runCycle+0xeb8>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    20b0:	89 e2       	ldi	r24, 0x29	; 41
    20b2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	9b 83       	std	Y+3, r25	; 0x03
    20ba:	8a 83       	std	Y+2, r24	; 0x02
    20bc:	22 c0       	rjmp	.+68     	; 0x2102 <sMO_runCycle+0xeb8>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    20be:	89 e2       	ldi	r24, 0x29	; 41
    20c0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	9b 83       	std	Y+3, r25	; 0x03
    20c8:	8a 83       	std	Y+2, r24	; 0x02
    20ca:	1b c0       	rjmp	.+54     	; 0x2102 <sMO_runCycle+0xeb8>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    20cc:	89 e2       	ldi	r24, 0x29	; 41
    20ce:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	9b 83       	std	Y+3, r25	; 0x03
    20d6:	8a 83       	std	Y+2, r24	; 0x02
    20d8:	14 c0       	rjmp	.+40     	; 0x2102 <sMO_runCycle+0xeb8>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_KeepOrdering : {
				/* Default exit sequence for state KeepOrdering */
				handle->stateConfVector[1] = SMO_last_state;
    20da:	89 e2       	ldi	r24, 0x29	; 41
    20dc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	9b 83       	std	Y+3, r25	; 0x03
    20e4:	8a 83       	std	Y+2, r24	; 0x02
    20e6:	0d c0       	rjmp	.+26     	; 0x2102 <sMO_runCycle+0xeb8>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_Exit : {
				/* Default exit sequence for state Exit */
				handle->stateConfVector[1] = SMO_last_state;
    20e8:	89 e2       	ldi	r24, 0x29	; 41
    20ea:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	9b 83       	std	Y+3, r25	; 0x03
    20f2:	8a 83       	std	Y+2, r24	; 0x02
    20f4:	06 c0       	rjmp	.+12     	; 0x2102 <sMO_runCycle+0xeb8>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress3 : {
				/* Default exit sequence for state CheckKeyPress3 */
				handle->stateConfVector[1] = SMO_last_state;
    20f6:	89 e2       	ldi	r24, 0x29	; 41
    20f8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	9b 83       	std	Y+3, r25	; 0x03
    2100:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    2102:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    2106:	88 e0       	ldi	r24, 0x08	; 8
    2108:	92 e0       	ldi	r25, 0x02	; 2
    210a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    210e:	87 e1       	ldi	r24, 0x17	; 23
    2110:	92 e0       	ldi	r25, 0x02	; 2
    2112:	40 e0       	ldi	r20, 0x00	; 0
    2114:	50 e0       	ldi	r21, 0x00	; 0
    2116:	ba 01       	movw	r22, r20
    2118:	01 e0       	ldi	r16, 0x01	; 1
    211a:	10 e0       	ldi	r17, 0x00	; 0
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    2124:	1e a6       	lds	r17, 0xbe
    2126:	1f a6       	lds	r17, 0xbf
    2128:	18 aa       	sts	0x98, r17
    212a:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    212c:	85 e0       	ldi	r24, 0x05	; 5
    212e:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	9b 83       	std	Y+3, r25	; 0x03
    2136:	8a 83       	std	Y+2, r24	; 0x02
    2138:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <sMO_runCycle+0x2178>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state CheckAmount0 */
			handle->stateConfVector[1] = SMO_last_state;
    213c:	89 e2       	ldi	r24, 0x29	; 41
    213e:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    2140:	88 24       	eor	r8, r8
    2142:	99 24       	eor	r9, r9
    2144:	83 94       	inc	r8
    2146:	9b 82       	std	Y+3, r9	; 0x03
    2148:	8a 82       	std	Y+2, r8	; 0x02
			/* Default enter sequence for state EnterAmount */
			/* Entry action for state 'EnterAmount'. */
			sMOIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 1, 1);
    214a:	e8 84       	ldd	r14, Y+8	; 0x08
    214c:	f9 84       	ldd	r15, Y+9	; 0x09
    214e:	0a 85       	ldd	r16, Y+10	; 0x0a
    2150:	1b 85       	ldd	r17, Y+11	; 0x0b
    2152:	89 a5       	lds	r24, 0x69
    2154:	9a a5       	lds	r25, 0x6a
    2156:	ab a5       	lds	r26, 0x6b
    2158:	bc a5       	lds	r27, 0x6c
    215a:	9c 01       	movw	r18, r24
    215c:	ad 01       	movw	r20, r26
    215e:	22 0f       	add	r18, r18
    2160:	33 1f       	adc	r19, r19
    2162:	44 1f       	adc	r20, r20
    2164:	55 1f       	adc	r21, r21
    2166:	c8 01       	movw	r24, r16
    2168:	b7 01       	movw	r22, r14
    216a:	ee 24       	eor	r14, r14
    216c:	ff 24       	eor	r15, r15
    216e:	87 01       	movw	r16, r14
    2170:	e3 94       	inc	r14
    2172:	aa 24       	eor	r10, r10
    2174:	bb 24       	eor	r11, r11
    2176:	65 01       	movw	r12, r10
    2178:	a3 94       	inc	r10
    217a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <sMOIfaceLCD_writeNumberXY>
			handle->ifaceDISH.pos += 1;
    217e:	89 a5       	lds	r24, 0x69
    2180:	9a a5       	lds	r25, 0x6a
    2182:	ab a5       	lds	r26, 0x6b
    2184:	bc a5       	lds	r27, 0x6c
    2186:	01 96       	adiw	r24, 0x01	; 1
    2188:	a1 1d       	adc	r26, r1
    218a:	b1 1d       	adc	r27, r1
    218c:	89 a7       	lds	r24, 0x79
    218e:	9a a7       	lds	r25, 0x7a
    2190:	ab a7       	lds	r26, 0x7b
    2192:	bc a7       	lds	r27, 0x7c
			handle->ifaceDISH.amount = handle->ifaceDISH.amount * 10 + handle->ifaceKEYPAD.lastkey;
    2194:	6d a1       	lds	r22, 0x4d
    2196:	7e a1       	lds	r23, 0x4e
    2198:	8f a1       	lds	r24, 0x4f
    219a:	98 a5       	lds	r25, 0x68
    219c:	2a e0       	ldi	r18, 0x0A	; 10
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e0       	ldi	r20, 0x00	; 0
    21a2:	50 e0       	ldi	r21, 0x00	; 0
    21a4:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <__mulsi3>
    21a8:	ab 01       	movw	r20, r22
    21aa:	bc 01       	movw	r22, r24
    21ac:	88 85       	ldd	r24, Y+8	; 0x08
    21ae:	99 85       	ldd	r25, Y+9	; 0x09
    21b0:	aa 85       	ldd	r26, Y+10	; 0x0a
    21b2:	bb 85       	ldd	r27, Y+11	; 0x0b
    21b4:	84 0f       	add	r24, r20
    21b6:	95 1f       	adc	r25, r21
    21b8:	a6 1f       	adc	r26, r22
    21ba:	b7 1f       	adc	r27, r23
    21bc:	8d a3       	lds	r24, 0x5d
    21be:	9e a3       	lds	r25, 0x5e
    21c0:	af a3       	lds	r26, 0x5f
    21c2:	b8 a7       	lds	r27, 0x78
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount;
    21c4:	8e e0       	ldi	r24, 0x0E	; 14
    21c6:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    21c8:	9b 82       	std	Y+3, r9	; 0x03
    21ca:	8a 82       	std	Y+2, r8	; 0x02
    21cc:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <sMO_runCycle+0x2178>
}

/* The reactions of state EnterAmount. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount(SMO* handle) {
	/* The reactions of state EnterAmount. */
	if (handle->iface.menuId == 0) { 
    21d0:	8e a5       	lds	r24, 0x6e
    21d2:	9f a5       	lds	r25, 0x6f
    21d4:	a8 a9       	sts	0x48, r26
    21d6:	b9 a9       	sts	0x49, r27
    21d8:	00 97       	sbiw	r24, 0x00	; 0
    21da:	a1 05       	cpc	r26, r1
    21dc:	b1 05       	cpc	r27, r1
    21de:	09 f0       	breq	.+2      	; 0x21e2 <sMO_runCycle+0xf98>
    21e0:	91 c0       	rjmp	.+290    	; 0x2304 <sMO_runCycle+0x10ba>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	8c 30       	cpi	r24, 0x0C	; 12
    21e6:	09 f4       	brne	.+2      	; 0x21ea <sMO_runCycle+0xfa0>
    21e8:	47 c0       	rjmp	.+142    	; 0x2278 <sMO_runCycle+0x102e>
    21ea:	8d 30       	cpi	r24, 0x0D	; 13
    21ec:	80 f4       	brcc	.+32     	; 0x220e <sMO_runCycle+0xfc4>
    21ee:	89 30       	cpi	r24, 0x09	; 9
    21f0:	71 f1       	breq	.+92     	; 0x224e <sMO_runCycle+0x1004>
    21f2:	8a 30       	cpi	r24, 0x0A	; 10
    21f4:	30 f4       	brcc	.+12     	; 0x2202 <sMO_runCycle+0xfb8>
    21f6:	87 30       	cpi	r24, 0x07	; 7
    21f8:	e1 f0       	breq	.+56     	; 0x2232 <sMO_runCycle+0xfe8>
    21fa:	88 30       	cpi	r24, 0x08	; 8
    21fc:	09 f0       	breq	.+2      	; 0x2200 <sMO_runCycle+0xfb6>
    21fe:	65 c0       	rjmp	.+202    	; 0x22ca <sMO_runCycle+0x1080>
    2200:	1f c0       	rjmp	.+62     	; 0x2240 <sMO_runCycle+0xff6>
    2202:	8a 30       	cpi	r24, 0x0A	; 10
    2204:	59 f1       	breq	.+86     	; 0x225c <sMO_runCycle+0x1012>
    2206:	8b 30       	cpi	r24, 0x0B	; 11
    2208:	09 f0       	breq	.+2      	; 0x220c <sMO_runCycle+0xfc2>
    220a:	5f c0       	rjmp	.+190    	; 0x22ca <sMO_runCycle+0x1080>
    220c:	2e c0       	rjmp	.+92     	; 0x226a <sMO_runCycle+0x1020>
    220e:	80 31       	cpi	r24, 0x10	; 16
    2210:	09 f4       	brne	.+2      	; 0x2214 <sMO_runCycle+0xfca>
    2212:	47 c0       	rjmp	.+142    	; 0x22a2 <sMO_runCycle+0x1058>
    2214:	81 31       	cpi	r24, 0x11	; 17
    2216:	30 f4       	brcc	.+12     	; 0x2224 <sMO_runCycle+0xfda>
    2218:	8e 30       	cpi	r24, 0x0E	; 14
    221a:	a9 f1       	breq	.+106    	; 0x2286 <sMO_runCycle+0x103c>
    221c:	8f 30       	cpi	r24, 0x0F	; 15
    221e:	09 f0       	breq	.+2      	; 0x2222 <sMO_runCycle+0xfd8>
    2220:	54 c0       	rjmp	.+168    	; 0x22ca <sMO_runCycle+0x1080>
    2222:	38 c0       	rjmp	.+112    	; 0x2294 <sMO_runCycle+0x104a>
    2224:	81 31       	cpi	r24, 0x11	; 17
    2226:	09 f4       	brne	.+2      	; 0x222a <sMO_runCycle+0xfe0>
    2228:	43 c0       	rjmp	.+134    	; 0x22b0 <sMO_runCycle+0x1066>
    222a:	82 31       	cpi	r24, 0x12	; 18
    222c:	09 f0       	breq	.+2      	; 0x2230 <sMO_runCycle+0xfe6>
    222e:	4d c0       	rjmp	.+154    	; 0x22ca <sMO_runCycle+0x1080>
    2230:	46 c0       	rjmp	.+140    	; 0x22be <sMO_runCycle+0x1074>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    2232:	89 e2       	ldi	r24, 0x29	; 41
    2234:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	9b 83       	std	Y+3, r25	; 0x03
    223c:	8a 83       	std	Y+2, r24	; 0x02
    223e:	45 c0       	rjmp	.+138    	; 0x22ca <sMO_runCycle+0x1080>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    2240:	89 e2       	ldi	r24, 0x29	; 41
    2242:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	9b 83       	std	Y+3, r25	; 0x03
    224a:	8a 83       	std	Y+2, r24	; 0x02
    224c:	3e c0       	rjmp	.+124    	; 0x22ca <sMO_runCycle+0x1080>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    224e:	89 e2       	ldi	r24, 0x29	; 41
    2250:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	9b 83       	std	Y+3, r25	; 0x03
    2258:	8a 83       	std	Y+2, r24	; 0x02
    225a:	37 c0       	rjmp	.+110    	; 0x22ca <sMO_runCycle+0x1080>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    225c:	89 e2       	ldi	r24, 0x29	; 41
    225e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	9b 83       	std	Y+3, r25	; 0x03
    2266:	8a 83       	std	Y+2, r24	; 0x02
    2268:	30 c0       	rjmp	.+96     	; 0x22ca <sMO_runCycle+0x1080>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    226a:	89 e2       	ldi	r24, 0x29	; 41
    226c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	9b 83       	std	Y+3, r25	; 0x03
    2274:	8a 83       	std	Y+2, r24	; 0x02
    2276:	29 c0       	rjmp	.+82     	; 0x22ca <sMO_runCycle+0x1080>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    2278:	89 e2       	ldi	r24, 0x29	; 41
    227a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	9b 83       	std	Y+3, r25	; 0x03
    2282:	8a 83       	std	Y+2, r24	; 0x02
    2284:	22 c0       	rjmp	.+68     	; 0x22ca <sMO_runCycle+0x1080>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    2286:	89 e2       	ldi	r24, 0x29	; 41
    2288:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	9b 83       	std	Y+3, r25	; 0x03
    2290:	8a 83       	std	Y+2, r24	; 0x02
    2292:	1b c0       	rjmp	.+54     	; 0x22ca <sMO_runCycle+0x1080>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2294:	89 e2       	ldi	r24, 0x29	; 41
    2296:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	9b 83       	std	Y+3, r25	; 0x03
    229e:	8a 83       	std	Y+2, r24	; 0x02
    22a0:	14 c0       	rjmp	.+40     	; 0x22ca <sMO_runCycle+0x1080>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_KeepOrdering : {
				/* Default exit sequence for state KeepOrdering */
				handle->stateConfVector[1] = SMO_last_state;
    22a2:	89 e2       	ldi	r24, 0x29	; 41
    22a4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	9b 83       	std	Y+3, r25	; 0x03
    22ac:	8a 83       	std	Y+2, r24	; 0x02
    22ae:	0d c0       	rjmp	.+26     	; 0x22ca <sMO_runCycle+0x1080>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_Exit : {
				/* Default exit sequence for state Exit */
				handle->stateConfVector[1] = SMO_last_state;
    22b0:	89 e2       	ldi	r24, 0x29	; 41
    22b2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	9b 83       	std	Y+3, r25	; 0x03
    22ba:	8a 83       	std	Y+2, r24	; 0x02
    22bc:	06 c0       	rjmp	.+12     	; 0x22ca <sMO_runCycle+0x1080>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress3 : {
				/* Default exit sequence for state CheckKeyPress3 */
				handle->stateConfVector[1] = SMO_last_state;
    22be:	89 e2       	ldi	r24, 0x29	; 41
    22c0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	9b 83       	std	Y+3, r25	; 0x03
    22c8:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    22ca:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    22ce:	88 e0       	ldi	r24, 0x08	; 8
    22d0:	92 e0       	ldi	r25, 0x02	; 2
    22d2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    22d6:	87 e1       	ldi	r24, 0x17	; 23
    22d8:	92 e0       	ldi	r25, 0x02	; 2
    22da:	40 e0       	ldi	r20, 0x00	; 0
    22dc:	50 e0       	ldi	r21, 0x00	; 0
    22de:	ba 01       	movw	r22, r20
    22e0:	01 e0       	ldi	r16, 0x01	; 1
    22e2:	10 e0       	ldi	r17, 0x00	; 0
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    22ec:	1e a6       	lds	r17, 0xbe
    22ee:	1f a6       	lds	r17, 0xbf
    22f0:	18 aa       	sts	0x98, r17
    22f2:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    22f4:	85 e0       	ldi	r24, 0x05	; 5
    22f6:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	9b 83       	std	Y+3, r25	; 0x03
    22fe:	8a 83       	std	Y+2, r24	; 0x02
    2300:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <sMO_runCycle+0x2178>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state EnterAmount */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    2304:	1b 83       	std	Y+3, r17	; 0x03
    2306:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress2 */
			/* Entry action for state 'CheckKeyPress2'. */
			handle->ifaceKEYPAD.lastkey = 0;
    2308:	18 86       	std	Y+8, r1	; 0x08
    230a:	19 86       	std	Y+9, r1	; 0x09
    230c:	1a 86       	std	Y+10, r1	; 0x0a
    230e:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2;
    2310:	8c e0       	ldi	r24, 0x0C	; 12
    2312:	89 83       	std	Y+1, r24	; 0x01
    2314:	0c 94 bf 19 	jmp	0x337e	; 0x337e <sMO_runCycle+0x2134>
}

/* The reactions of state null. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1__final_0(SMO* handle) {
	/* The reactions of state null. */
	if (handle->iface.menuId == 0) { 
    2318:	8e a5       	lds	r24, 0x6e
    231a:	9f a5       	lds	r25, 0x6f
    231c:	a8 a9       	sts	0x48, r26
    231e:	b9 a9       	sts	0x49, r27
    2320:	00 97       	sbiw	r24, 0x00	; 0
    2322:	a1 05       	cpc	r26, r1
    2324:	b1 05       	cpc	r27, r1
    2326:	11 f0       	breq	.+4      	; 0x232c <sMO_runCycle+0x10e2>
    2328:	0c 94 bf 19 	jmp	0x337e	; 0x337e <sMO_runCycle+0x2134>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	8c 30       	cpi	r24, 0x0C	; 12
    2330:	09 f4       	brne	.+2      	; 0x2334 <sMO_runCycle+0x10ea>
    2332:	47 c0       	rjmp	.+142    	; 0x23c2 <sMO_runCycle+0x1178>
    2334:	8d 30       	cpi	r24, 0x0D	; 13
    2336:	80 f4       	brcc	.+32     	; 0x2358 <sMO_runCycle+0x110e>
    2338:	89 30       	cpi	r24, 0x09	; 9
    233a:	71 f1       	breq	.+92     	; 0x2398 <sMO_runCycle+0x114e>
    233c:	8a 30       	cpi	r24, 0x0A	; 10
    233e:	30 f4       	brcc	.+12     	; 0x234c <sMO_runCycle+0x1102>
    2340:	87 30       	cpi	r24, 0x07	; 7
    2342:	e1 f0       	breq	.+56     	; 0x237c <sMO_runCycle+0x1132>
    2344:	88 30       	cpi	r24, 0x08	; 8
    2346:	09 f0       	breq	.+2      	; 0x234a <sMO_runCycle+0x1100>
    2348:	65 c0       	rjmp	.+202    	; 0x2414 <sMO_runCycle+0x11ca>
    234a:	1f c0       	rjmp	.+62     	; 0x238a <sMO_runCycle+0x1140>
    234c:	8a 30       	cpi	r24, 0x0A	; 10
    234e:	59 f1       	breq	.+86     	; 0x23a6 <sMO_runCycle+0x115c>
    2350:	8b 30       	cpi	r24, 0x0B	; 11
    2352:	09 f0       	breq	.+2      	; 0x2356 <sMO_runCycle+0x110c>
    2354:	5f c0       	rjmp	.+190    	; 0x2414 <sMO_runCycle+0x11ca>
    2356:	2e c0       	rjmp	.+92     	; 0x23b4 <sMO_runCycle+0x116a>
    2358:	80 31       	cpi	r24, 0x10	; 16
    235a:	09 f4       	brne	.+2      	; 0x235e <sMO_runCycle+0x1114>
    235c:	47 c0       	rjmp	.+142    	; 0x23ec <sMO_runCycle+0x11a2>
    235e:	81 31       	cpi	r24, 0x11	; 17
    2360:	30 f4       	brcc	.+12     	; 0x236e <sMO_runCycle+0x1124>
    2362:	8e 30       	cpi	r24, 0x0E	; 14
    2364:	a9 f1       	breq	.+106    	; 0x23d0 <sMO_runCycle+0x1186>
    2366:	8f 30       	cpi	r24, 0x0F	; 15
    2368:	09 f0       	breq	.+2      	; 0x236c <sMO_runCycle+0x1122>
    236a:	54 c0       	rjmp	.+168    	; 0x2414 <sMO_runCycle+0x11ca>
    236c:	38 c0       	rjmp	.+112    	; 0x23de <sMO_runCycle+0x1194>
    236e:	81 31       	cpi	r24, 0x11	; 17
    2370:	09 f4       	brne	.+2      	; 0x2374 <sMO_runCycle+0x112a>
    2372:	43 c0       	rjmp	.+134    	; 0x23fa <sMO_runCycle+0x11b0>
    2374:	82 31       	cpi	r24, 0x12	; 18
    2376:	09 f0       	breq	.+2      	; 0x237a <sMO_runCycle+0x1130>
    2378:	4d c0       	rjmp	.+154    	; 0x2414 <sMO_runCycle+0x11ca>
    237a:	46 c0       	rjmp	.+140    	; 0x2408 <sMO_runCycle+0x11be>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    237c:	89 e2       	ldi	r24, 0x29	; 41
    237e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	9b 83       	std	Y+3, r25	; 0x03
    2386:	8a 83       	std	Y+2, r24	; 0x02
    2388:	45 c0       	rjmp	.+138    	; 0x2414 <sMO_runCycle+0x11ca>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    238a:	89 e2       	ldi	r24, 0x29	; 41
    238c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	9b 83       	std	Y+3, r25	; 0x03
    2394:	8a 83       	std	Y+2, r24	; 0x02
    2396:	3e c0       	rjmp	.+124    	; 0x2414 <sMO_runCycle+0x11ca>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    2398:	89 e2       	ldi	r24, 0x29	; 41
    239a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	9b 83       	std	Y+3, r25	; 0x03
    23a2:	8a 83       	std	Y+2, r24	; 0x02
    23a4:	37 c0       	rjmp	.+110    	; 0x2414 <sMO_runCycle+0x11ca>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    23a6:	89 e2       	ldi	r24, 0x29	; 41
    23a8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	9b 83       	std	Y+3, r25	; 0x03
    23b0:	8a 83       	std	Y+2, r24	; 0x02
    23b2:	30 c0       	rjmp	.+96     	; 0x2414 <sMO_runCycle+0x11ca>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    23b4:	89 e2       	ldi	r24, 0x29	; 41
    23b6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	9b 83       	std	Y+3, r25	; 0x03
    23be:	8a 83       	std	Y+2, r24	; 0x02
    23c0:	29 c0       	rjmp	.+82     	; 0x2414 <sMO_runCycle+0x11ca>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    23c2:	89 e2       	ldi	r24, 0x29	; 41
    23c4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	9b 83       	std	Y+3, r25	; 0x03
    23cc:	8a 83       	std	Y+2, r24	; 0x02
    23ce:	22 c0       	rjmp	.+68     	; 0x2414 <sMO_runCycle+0x11ca>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    23d0:	89 e2       	ldi	r24, 0x29	; 41
    23d2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	9b 83       	std	Y+3, r25	; 0x03
    23da:	8a 83       	std	Y+2, r24	; 0x02
    23dc:	1b c0       	rjmp	.+54     	; 0x2414 <sMO_runCycle+0x11ca>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    23de:	89 e2       	ldi	r24, 0x29	; 41
    23e0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	9b 83       	std	Y+3, r25	; 0x03
    23e8:	8a 83       	std	Y+2, r24	; 0x02
    23ea:	14 c0       	rjmp	.+40     	; 0x2414 <sMO_runCycle+0x11ca>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_KeepOrdering : {
				/* Default exit sequence for state KeepOrdering */
				handle->stateConfVector[1] = SMO_last_state;
    23ec:	89 e2       	ldi	r24, 0x29	; 41
    23ee:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	9b 83       	std	Y+3, r25	; 0x03
    23f6:	8a 83       	std	Y+2, r24	; 0x02
    23f8:	0d c0       	rjmp	.+26     	; 0x2414 <sMO_runCycle+0x11ca>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_Exit : {
				/* Default exit sequence for state Exit */
				handle->stateConfVector[1] = SMO_last_state;
    23fa:	89 e2       	ldi	r24, 0x29	; 41
    23fc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	9b 83       	std	Y+3, r25	; 0x03
    2404:	8a 83       	std	Y+2, r24	; 0x02
    2406:	06 c0       	rjmp	.+12     	; 0x2414 <sMO_runCycle+0x11ca>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress3 : {
				/* Default exit sequence for state CheckKeyPress3 */
				handle->stateConfVector[1] = SMO_last_state;
    2408:	89 e2       	ldi	r24, 0x29	; 41
    240a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	9b 83       	std	Y+3, r25	; 0x03
    2412:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    2414:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    2418:	88 e0       	ldi	r24, 0x08	; 8
    241a:	92 e0       	ldi	r25, 0x02	; 2
    241c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    2420:	87 e1       	ldi	r24, 0x17	; 23
    2422:	92 e0       	ldi	r25, 0x02	; 2
    2424:	40 e0       	ldi	r20, 0x00	; 0
    2426:	50 e0       	ldi	r21, 0x00	; 0
    2428:	ba 01       	movw	r22, r20
    242a:	01 e0       	ldi	r16, 0x01	; 1
    242c:	10 e0       	ldi	r17, 0x00	; 0
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    2436:	1e a6       	lds	r17, 0xbe
    2438:	1f a6       	lds	r17, 0xbf
    243a:	18 aa       	sts	0x98, r17
    243c:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    243e:	85 e0       	ldi	r24, 0x05	; 5
    2440:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	9b 83       	std	Y+3, r25	; 0x03
    2448:	8a 83       	std	Y+2, r24	; 0x02
    244a:	bb c7       	rjmp	.+3958   	; 0x33c2 <sMO_runCycle+0x2178>
}

/* The reactions of state KeepOrdering. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_KeepOrdering(SMO* handle) {
	/* The reactions of state KeepOrdering. */
	if (handle->iface.menuId == 0) { 
    244c:	8e a5       	lds	r24, 0x6e
    244e:	9f a5       	lds	r25, 0x6f
    2450:	a8 a9       	sts	0x48, r26
    2452:	b9 a9       	sts	0x49, r27
    2454:	00 97       	sbiw	r24, 0x00	; 0
    2456:	a1 05       	cpc	r26, r1
    2458:	b1 05       	cpc	r27, r1
    245a:	09 f0       	breq	.+2      	; 0x245e <sMO_runCycle+0x1214>
    245c:	90 c0       	rjmp	.+288    	; 0x257e <sMO_runCycle+0x1334>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	8c 30       	cpi	r24, 0x0C	; 12
    2462:	09 f4       	brne	.+2      	; 0x2466 <sMO_runCycle+0x121c>
    2464:	47 c0       	rjmp	.+142    	; 0x24f4 <sMO_runCycle+0x12aa>
    2466:	8d 30       	cpi	r24, 0x0D	; 13
    2468:	80 f4       	brcc	.+32     	; 0x248a <sMO_runCycle+0x1240>
    246a:	89 30       	cpi	r24, 0x09	; 9
    246c:	71 f1       	breq	.+92     	; 0x24ca <sMO_runCycle+0x1280>
    246e:	8a 30       	cpi	r24, 0x0A	; 10
    2470:	30 f4       	brcc	.+12     	; 0x247e <sMO_runCycle+0x1234>
    2472:	87 30       	cpi	r24, 0x07	; 7
    2474:	e1 f0       	breq	.+56     	; 0x24ae <sMO_runCycle+0x1264>
    2476:	88 30       	cpi	r24, 0x08	; 8
    2478:	09 f0       	breq	.+2      	; 0x247c <sMO_runCycle+0x1232>
    247a:	65 c0       	rjmp	.+202    	; 0x2546 <sMO_runCycle+0x12fc>
    247c:	1f c0       	rjmp	.+62     	; 0x24bc <sMO_runCycle+0x1272>
    247e:	8a 30       	cpi	r24, 0x0A	; 10
    2480:	59 f1       	breq	.+86     	; 0x24d8 <sMO_runCycle+0x128e>
    2482:	8b 30       	cpi	r24, 0x0B	; 11
    2484:	09 f0       	breq	.+2      	; 0x2488 <sMO_runCycle+0x123e>
    2486:	5f c0       	rjmp	.+190    	; 0x2546 <sMO_runCycle+0x12fc>
    2488:	2e c0       	rjmp	.+92     	; 0x24e6 <sMO_runCycle+0x129c>
    248a:	80 31       	cpi	r24, 0x10	; 16
    248c:	09 f4       	brne	.+2      	; 0x2490 <sMO_runCycle+0x1246>
    248e:	47 c0       	rjmp	.+142    	; 0x251e <sMO_runCycle+0x12d4>
    2490:	81 31       	cpi	r24, 0x11	; 17
    2492:	30 f4       	brcc	.+12     	; 0x24a0 <sMO_runCycle+0x1256>
    2494:	8e 30       	cpi	r24, 0x0E	; 14
    2496:	a9 f1       	breq	.+106    	; 0x2502 <sMO_runCycle+0x12b8>
    2498:	8f 30       	cpi	r24, 0x0F	; 15
    249a:	09 f0       	breq	.+2      	; 0x249e <sMO_runCycle+0x1254>
    249c:	54 c0       	rjmp	.+168    	; 0x2546 <sMO_runCycle+0x12fc>
    249e:	38 c0       	rjmp	.+112    	; 0x2510 <sMO_runCycle+0x12c6>
    24a0:	81 31       	cpi	r24, 0x11	; 17
    24a2:	09 f4       	brne	.+2      	; 0x24a6 <sMO_runCycle+0x125c>
    24a4:	43 c0       	rjmp	.+134    	; 0x252c <sMO_runCycle+0x12e2>
    24a6:	82 31       	cpi	r24, 0x12	; 18
    24a8:	09 f0       	breq	.+2      	; 0x24ac <sMO_runCycle+0x1262>
    24aa:	4d c0       	rjmp	.+154    	; 0x2546 <sMO_runCycle+0x12fc>
    24ac:	46 c0       	rjmp	.+140    	; 0x253a <sMO_runCycle+0x12f0>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    24ae:	89 e2       	ldi	r24, 0x29	; 41
    24b0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	9b 83       	std	Y+3, r25	; 0x03
    24b8:	8a 83       	std	Y+2, r24	; 0x02
    24ba:	45 c0       	rjmp	.+138    	; 0x2546 <sMO_runCycle+0x12fc>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    24bc:	89 e2       	ldi	r24, 0x29	; 41
    24be:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	9b 83       	std	Y+3, r25	; 0x03
    24c6:	8a 83       	std	Y+2, r24	; 0x02
    24c8:	3e c0       	rjmp	.+124    	; 0x2546 <sMO_runCycle+0x12fc>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    24ca:	89 e2       	ldi	r24, 0x29	; 41
    24cc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	9b 83       	std	Y+3, r25	; 0x03
    24d4:	8a 83       	std	Y+2, r24	; 0x02
    24d6:	37 c0       	rjmp	.+110    	; 0x2546 <sMO_runCycle+0x12fc>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    24d8:	89 e2       	ldi	r24, 0x29	; 41
    24da:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	9b 83       	std	Y+3, r25	; 0x03
    24e2:	8a 83       	std	Y+2, r24	; 0x02
    24e4:	30 c0       	rjmp	.+96     	; 0x2546 <sMO_runCycle+0x12fc>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    24e6:	89 e2       	ldi	r24, 0x29	; 41
    24e8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	9b 83       	std	Y+3, r25	; 0x03
    24f0:	8a 83       	std	Y+2, r24	; 0x02
    24f2:	29 c0       	rjmp	.+82     	; 0x2546 <sMO_runCycle+0x12fc>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    24f4:	89 e2       	ldi	r24, 0x29	; 41
    24f6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	9b 83       	std	Y+3, r25	; 0x03
    24fe:	8a 83       	std	Y+2, r24	; 0x02
    2500:	22 c0       	rjmp	.+68     	; 0x2546 <sMO_runCycle+0x12fc>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    2502:	89 e2       	ldi	r24, 0x29	; 41
    2504:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	9b 83       	std	Y+3, r25	; 0x03
    250c:	8a 83       	std	Y+2, r24	; 0x02
    250e:	1b c0       	rjmp	.+54     	; 0x2546 <sMO_runCycle+0x12fc>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2510:	89 e2       	ldi	r24, 0x29	; 41
    2512:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	9b 83       	std	Y+3, r25	; 0x03
    251a:	8a 83       	std	Y+2, r24	; 0x02
    251c:	14 c0       	rjmp	.+40     	; 0x2546 <sMO_runCycle+0x12fc>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_KeepOrdering : {
				/* Default exit sequence for state KeepOrdering */
				handle->stateConfVector[1] = SMO_last_state;
    251e:	89 e2       	ldi	r24, 0x29	; 41
    2520:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	9b 83       	std	Y+3, r25	; 0x03
    2528:	8a 83       	std	Y+2, r24	; 0x02
    252a:	0d c0       	rjmp	.+26     	; 0x2546 <sMO_runCycle+0x12fc>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_Exit : {
				/* Default exit sequence for state Exit */
				handle->stateConfVector[1] = SMO_last_state;
    252c:	89 e2       	ldi	r24, 0x29	; 41
    252e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	9b 83       	std	Y+3, r25	; 0x03
    2536:	8a 83       	std	Y+2, r24	; 0x02
    2538:	06 c0       	rjmp	.+12     	; 0x2546 <sMO_runCycle+0x12fc>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress3 : {
				/* Default exit sequence for state CheckKeyPress3 */
				handle->stateConfVector[1] = SMO_last_state;
    253a:	89 e2       	ldi	r24, 0x29	; 41
    253c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	9b 83       	std	Y+3, r25	; 0x03
    2544:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    2546:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    254a:	88 e0       	ldi	r24, 0x08	; 8
    254c:	92 e0       	ldi	r25, 0x02	; 2
    254e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    2552:	87 e1       	ldi	r24, 0x17	; 23
    2554:	92 e0       	ldi	r25, 0x02	; 2
    2556:	40 e0       	ldi	r20, 0x00	; 0
    2558:	50 e0       	ldi	r21, 0x00	; 0
    255a:	ba 01       	movw	r22, r20
    255c:	01 e0       	ldi	r16, 0x01	; 1
    255e:	10 e0       	ldi	r17, 0x00	; 0
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    2568:	1e a6       	lds	r17, 0xbe
    256a:	1f a6       	lds	r17, 0xbf
    256c:	18 aa       	sts	0x98, r17
    256e:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    2570:	85 e0       	ldi	r24, 0x05	; 5
    2572:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	9b 83       	std	Y+3, r25	; 0x03
    257a:	8a 83       	std	Y+2, r24	; 0x02
    257c:	22 c7       	rjmp	.+3652   	; 0x33c2 <sMO_runCycle+0x2178>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state KeepOrdering */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    257e:	1b 83       	std	Y+3, r17	; 0x03
    2580:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress3 */
			/* Entry action for state 'CheckKeyPress3'. */
			handle->ifaceKEYPAD.lastkey = 0;
    2582:	18 86       	std	Y+8, r1	; 0x08
    2584:	19 86       	std	Y+9, r1	; 0x09
    2586:	1a 86       	std	Y+10, r1	; 0x0a
    2588:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress3;
    258a:	82 e1       	ldi	r24, 0x12	; 18
    258c:	89 83       	std	Y+1, r24	; 0x01
    258e:	f7 c6       	rjmp	.+3566   	; 0x337e <sMO_runCycle+0x2134>
}

/* The reactions of state Exit. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_Exit(SMO* handle) {
	/* The reactions of state Exit. */
	if (handle->iface.menuId == 0) { 
    2590:	8e a5       	lds	r24, 0x6e
    2592:	9f a5       	lds	r25, 0x6f
    2594:	a8 a9       	sts	0x48, r26
    2596:	b9 a9       	sts	0x49, r27
    2598:	00 97       	sbiw	r24, 0x00	; 0
    259a:	a1 05       	cpc	r26, r1
    259c:	b1 05       	cpc	r27, r1
    259e:	09 f0       	breq	.+2      	; 0x25a2 <sMO_runCycle+0x1358>
    25a0:	90 c0       	rjmp	.+288    	; 0x26c2 <sMO_runCycle+0x1478>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    25a2:	89 81       	ldd	r24, Y+1	; 0x01
    25a4:	8c 30       	cpi	r24, 0x0C	; 12
    25a6:	09 f4       	brne	.+2      	; 0x25aa <sMO_runCycle+0x1360>
    25a8:	47 c0       	rjmp	.+142    	; 0x2638 <sMO_runCycle+0x13ee>
    25aa:	8d 30       	cpi	r24, 0x0D	; 13
    25ac:	80 f4       	brcc	.+32     	; 0x25ce <sMO_runCycle+0x1384>
    25ae:	89 30       	cpi	r24, 0x09	; 9
    25b0:	71 f1       	breq	.+92     	; 0x260e <sMO_runCycle+0x13c4>
    25b2:	8a 30       	cpi	r24, 0x0A	; 10
    25b4:	30 f4       	brcc	.+12     	; 0x25c2 <sMO_runCycle+0x1378>
    25b6:	87 30       	cpi	r24, 0x07	; 7
    25b8:	e1 f0       	breq	.+56     	; 0x25f2 <sMO_runCycle+0x13a8>
    25ba:	88 30       	cpi	r24, 0x08	; 8
    25bc:	09 f0       	breq	.+2      	; 0x25c0 <sMO_runCycle+0x1376>
    25be:	65 c0       	rjmp	.+202    	; 0x268a <sMO_runCycle+0x1440>
    25c0:	1f c0       	rjmp	.+62     	; 0x2600 <sMO_runCycle+0x13b6>
    25c2:	8a 30       	cpi	r24, 0x0A	; 10
    25c4:	59 f1       	breq	.+86     	; 0x261c <sMO_runCycle+0x13d2>
    25c6:	8b 30       	cpi	r24, 0x0B	; 11
    25c8:	09 f0       	breq	.+2      	; 0x25cc <sMO_runCycle+0x1382>
    25ca:	5f c0       	rjmp	.+190    	; 0x268a <sMO_runCycle+0x1440>
    25cc:	2e c0       	rjmp	.+92     	; 0x262a <sMO_runCycle+0x13e0>
    25ce:	80 31       	cpi	r24, 0x10	; 16
    25d0:	09 f4       	brne	.+2      	; 0x25d4 <sMO_runCycle+0x138a>
    25d2:	47 c0       	rjmp	.+142    	; 0x2662 <sMO_runCycle+0x1418>
    25d4:	81 31       	cpi	r24, 0x11	; 17
    25d6:	30 f4       	brcc	.+12     	; 0x25e4 <sMO_runCycle+0x139a>
    25d8:	8e 30       	cpi	r24, 0x0E	; 14
    25da:	a9 f1       	breq	.+106    	; 0x2646 <sMO_runCycle+0x13fc>
    25dc:	8f 30       	cpi	r24, 0x0F	; 15
    25de:	09 f0       	breq	.+2      	; 0x25e2 <sMO_runCycle+0x1398>
    25e0:	54 c0       	rjmp	.+168    	; 0x268a <sMO_runCycle+0x1440>
    25e2:	38 c0       	rjmp	.+112    	; 0x2654 <sMO_runCycle+0x140a>
    25e4:	81 31       	cpi	r24, 0x11	; 17
    25e6:	09 f4       	brne	.+2      	; 0x25ea <sMO_runCycle+0x13a0>
    25e8:	43 c0       	rjmp	.+134    	; 0x2670 <sMO_runCycle+0x1426>
    25ea:	82 31       	cpi	r24, 0x12	; 18
    25ec:	09 f0       	breq	.+2      	; 0x25f0 <sMO_runCycle+0x13a6>
    25ee:	4d c0       	rjmp	.+154    	; 0x268a <sMO_runCycle+0x1440>
    25f0:	46 c0       	rjmp	.+140    	; 0x267e <sMO_runCycle+0x1434>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    25f2:	89 e2       	ldi	r24, 0x29	; 41
    25f4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	9b 83       	std	Y+3, r25	; 0x03
    25fc:	8a 83       	std	Y+2, r24	; 0x02
    25fe:	45 c0       	rjmp	.+138    	; 0x268a <sMO_runCycle+0x1440>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    2600:	89 e2       	ldi	r24, 0x29	; 41
    2602:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	9b 83       	std	Y+3, r25	; 0x03
    260a:	8a 83       	std	Y+2, r24	; 0x02
    260c:	3e c0       	rjmp	.+124    	; 0x268a <sMO_runCycle+0x1440>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    260e:	89 e2       	ldi	r24, 0x29	; 41
    2610:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	9b 83       	std	Y+3, r25	; 0x03
    2618:	8a 83       	std	Y+2, r24	; 0x02
    261a:	37 c0       	rjmp	.+110    	; 0x268a <sMO_runCycle+0x1440>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    261c:	89 e2       	ldi	r24, 0x29	; 41
    261e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	9b 83       	std	Y+3, r25	; 0x03
    2626:	8a 83       	std	Y+2, r24	; 0x02
    2628:	30 c0       	rjmp	.+96     	; 0x268a <sMO_runCycle+0x1440>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    262a:	89 e2       	ldi	r24, 0x29	; 41
    262c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	9b 83       	std	Y+3, r25	; 0x03
    2634:	8a 83       	std	Y+2, r24	; 0x02
    2636:	29 c0       	rjmp	.+82     	; 0x268a <sMO_runCycle+0x1440>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    2638:	89 e2       	ldi	r24, 0x29	; 41
    263a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	9b 83       	std	Y+3, r25	; 0x03
    2642:	8a 83       	std	Y+2, r24	; 0x02
    2644:	22 c0       	rjmp	.+68     	; 0x268a <sMO_runCycle+0x1440>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    2646:	89 e2       	ldi	r24, 0x29	; 41
    2648:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	9b 83       	std	Y+3, r25	; 0x03
    2650:	8a 83       	std	Y+2, r24	; 0x02
    2652:	1b c0       	rjmp	.+54     	; 0x268a <sMO_runCycle+0x1440>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2654:	89 e2       	ldi	r24, 0x29	; 41
    2656:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	9b 83       	std	Y+3, r25	; 0x03
    265e:	8a 83       	std	Y+2, r24	; 0x02
    2660:	14 c0       	rjmp	.+40     	; 0x268a <sMO_runCycle+0x1440>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_KeepOrdering : {
				/* Default exit sequence for state KeepOrdering */
				handle->stateConfVector[1] = SMO_last_state;
    2662:	89 e2       	ldi	r24, 0x29	; 41
    2664:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	9b 83       	std	Y+3, r25	; 0x03
    266c:	8a 83       	std	Y+2, r24	; 0x02
    266e:	0d c0       	rjmp	.+26     	; 0x268a <sMO_runCycle+0x1440>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_Exit : {
				/* Default exit sequence for state Exit */
				handle->stateConfVector[1] = SMO_last_state;
    2670:	89 e2       	ldi	r24, 0x29	; 41
    2672:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	9b 83       	std	Y+3, r25	; 0x03
    267a:	8a 83       	std	Y+2, r24	; 0x02
    267c:	06 c0       	rjmp	.+12     	; 0x268a <sMO_runCycle+0x1440>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress3 : {
				/* Default exit sequence for state CheckKeyPress3 */
				handle->stateConfVector[1] = SMO_last_state;
    267e:	89 e2       	ldi	r24, 0x29	; 41
    2680:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	9b 83       	std	Y+3, r25	; 0x03
    2688:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    268a:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    268e:	88 e0       	ldi	r24, 0x08	; 8
    2690:	92 e0       	ldi	r25, 0x02	; 2
    2692:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    2696:	87 e1       	ldi	r24, 0x17	; 23
    2698:	92 e0       	ldi	r25, 0x02	; 2
    269a:	40 e0       	ldi	r20, 0x00	; 0
    269c:	50 e0       	ldi	r21, 0x00	; 0
    269e:	ba 01       	movw	r22, r20
    26a0:	01 e0       	ldi	r16, 0x01	; 1
    26a2:	10 e0       	ldi	r17, 0x00	; 0
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    26ac:	1e a6       	lds	r17, 0xbe
    26ae:	1f a6       	lds	r17, 0xbf
    26b0:	18 aa       	sts	0x98, r17
    26b2:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    26b4:	85 e0       	ldi	r24, 0x05	; 5
    26b6:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	9b 83       	std	Y+3, r25	; 0x03
    26be:	8a 83       	std	Y+2, r24	; 0x02
    26c0:	80 c6       	rjmp	.+3328   	; 0x33c2 <sMO_runCycle+0x2178>
	}  else {
		if (handle->ifaceKEYPAD.lastkey == 11 && handle->ifaceKEYPAD.key_pressed_raised) { 
    26c2:	88 85       	ldd	r24, Y+8	; 0x08
    26c4:	99 85       	ldd	r25, Y+9	; 0x09
    26c6:	aa 85       	ldd	r26, Y+10	; 0x0a
    26c8:	bb 85       	ldd	r27, Y+11	; 0x0b
    26ca:	8b 30       	cpi	r24, 0x0B	; 11
    26cc:	91 05       	cpc	r25, r1
    26ce:	a1 05       	cpc	r26, r1
    26d0:	b1 05       	cpc	r27, r1
    26d2:	09 f0       	breq	.+2      	; 0x26d6 <sMO_runCycle+0x148c>
    26d4:	54 c6       	rjmp	.+3240   	; 0x337e <sMO_runCycle+0x2134>
    26d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26d8:	88 23       	and	r24, r24
    26da:	09 f4       	brne	.+2      	; 0x26de <sMO_runCycle+0x1494>
    26dc:	50 c6       	rjmp	.+3232   	; 0x337e <sMO_runCycle+0x2134>
			/* Default exit sequence for state Exit */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    26de:	1b 83       	std	Y+3, r17	; 0x03
    26e0:	0a 83       	std	Y+2, r16	; 0x02
			handle->iface.menuId = 0;
    26e2:	1e a6       	lds	r17, 0xbe
    26e4:	1f a6       	lds	r17, 0xbf
    26e6:	18 aa       	sts	0x98, r17
    26e8:	19 aa       	sts	0x99, r17
			/* Default enter sequence for state null */
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_;
    26ea:	bf e0       	ldi	r27, 0x0F	; 15
    26ec:	b9 83       	std	Y+1, r27	; 0x01
    26ee:	47 c6       	rjmp	.+3214   	; 0x337e <sMO_runCycle+0x2134>
}

/* The reactions of state CheckKeyPress3. */
static void sMO_react_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress3(SMO* handle) {
	/* The reactions of state CheckKeyPress3. */
	if (handle->iface.menuId == 0) { 
    26f0:	8e a5       	lds	r24, 0x6e
    26f2:	9f a5       	lds	r25, 0x6f
    26f4:	a8 a9       	sts	0x48, r26
    26f6:	b9 a9       	sts	0x49, r27
    26f8:	00 97       	sbiw	r24, 0x00	; 0
    26fa:	a1 05       	cpc	r26, r1
    26fc:	b1 05       	cpc	r27, r1
    26fe:	09 f0       	breq	.+2      	; 0x2702 <sMO_runCycle+0x14b8>
    2700:	90 c0       	rjmp	.+288    	; 0x2822 <sMO_runCycle+0x15d8>
		/* Default exit sequence for state EnterData */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2702:	89 81       	ldd	r24, Y+1	; 0x01
    2704:	8c 30       	cpi	r24, 0x0C	; 12
    2706:	09 f4       	brne	.+2      	; 0x270a <sMO_runCycle+0x14c0>
    2708:	47 c0       	rjmp	.+142    	; 0x2798 <sMO_runCycle+0x154e>
    270a:	8d 30       	cpi	r24, 0x0D	; 13
    270c:	80 f4       	brcc	.+32     	; 0x272e <sMO_runCycle+0x14e4>
    270e:	89 30       	cpi	r24, 0x09	; 9
    2710:	71 f1       	breq	.+92     	; 0x276e <sMO_runCycle+0x1524>
    2712:	8a 30       	cpi	r24, 0x0A	; 10
    2714:	30 f4       	brcc	.+12     	; 0x2722 <sMO_runCycle+0x14d8>
    2716:	87 30       	cpi	r24, 0x07	; 7
    2718:	e1 f0       	breq	.+56     	; 0x2752 <sMO_runCycle+0x1508>
    271a:	88 30       	cpi	r24, 0x08	; 8
    271c:	09 f0       	breq	.+2      	; 0x2720 <sMO_runCycle+0x14d6>
    271e:	65 c0       	rjmp	.+202    	; 0x27ea <sMO_runCycle+0x15a0>
    2720:	1f c0       	rjmp	.+62     	; 0x2760 <sMO_runCycle+0x1516>
    2722:	8a 30       	cpi	r24, 0x0A	; 10
    2724:	59 f1       	breq	.+86     	; 0x277c <sMO_runCycle+0x1532>
    2726:	8b 30       	cpi	r24, 0x0B	; 11
    2728:	09 f0       	breq	.+2      	; 0x272c <sMO_runCycle+0x14e2>
    272a:	5f c0       	rjmp	.+190    	; 0x27ea <sMO_runCycle+0x15a0>
    272c:	2e c0       	rjmp	.+92     	; 0x278a <sMO_runCycle+0x1540>
    272e:	80 31       	cpi	r24, 0x10	; 16
    2730:	09 f4       	brne	.+2      	; 0x2734 <sMO_runCycle+0x14ea>
    2732:	47 c0       	rjmp	.+142    	; 0x27c2 <sMO_runCycle+0x1578>
    2734:	81 31       	cpi	r24, 0x11	; 17
    2736:	30 f4       	brcc	.+12     	; 0x2744 <sMO_runCycle+0x14fa>
    2738:	8e 30       	cpi	r24, 0x0E	; 14
    273a:	a9 f1       	breq	.+106    	; 0x27a6 <sMO_runCycle+0x155c>
    273c:	8f 30       	cpi	r24, 0x0F	; 15
    273e:	09 f0       	breq	.+2      	; 0x2742 <sMO_runCycle+0x14f8>
    2740:	54 c0       	rjmp	.+168    	; 0x27ea <sMO_runCycle+0x15a0>
    2742:	38 c0       	rjmp	.+112    	; 0x27b4 <sMO_runCycle+0x156a>
    2744:	81 31       	cpi	r24, 0x11	; 17
    2746:	09 f4       	brne	.+2      	; 0x274a <sMO_runCycle+0x1500>
    2748:	43 c0       	rjmp	.+134    	; 0x27d0 <sMO_runCycle+0x1586>
    274a:	82 31       	cpi	r24, 0x12	; 18
    274c:	09 f0       	breq	.+2      	; 0x2750 <sMO_runCycle+0x1506>
    274e:	4d c0       	rjmp	.+154    	; 0x27ea <sMO_runCycle+0x15a0>
    2750:	46 c0       	rjmp	.+140    	; 0x27de <sMO_runCycle+0x1594>
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
				/* Default exit sequence for state ShowCode */
				handle->stateConfVector[1] = SMO_last_state;
    2752:	89 e2       	ldi	r24, 0x29	; 41
    2754:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	9b 83       	std	Y+3, r25	; 0x03
    275c:	8a 83       	std	Y+2, r24	; 0x02
    275e:	45 c0       	rjmp	.+138    	; 0x27ea <sMO_runCycle+0x15a0>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
				/* Default exit sequence for state EnterCode */
				handle->stateConfVector[1] = SMO_last_state;
    2760:	89 e2       	ldi	r24, 0x29	; 41
    2762:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	9b 83       	std	Y+3, r25	; 0x03
    276a:	8a 83       	std	Y+2, r24	; 0x02
    276c:	3e c0       	rjmp	.+124    	; 0x27ea <sMO_runCycle+0x15a0>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
				/* Default exit sequence for state CheckKeyPress1 */
				handle->stateConfVector[1] = SMO_last_state;
    276e:	89 e2       	ldi	r24, 0x29	; 41
    2770:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	9b 83       	std	Y+3, r25	; 0x03
    2778:	8a 83       	std	Y+2, r24	; 0x02
    277a:	37 c0       	rjmp	.+110    	; 0x27ea <sMO_runCycle+0x15a0>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
				/* Default exit sequence for state CheckCode0 */
				handle->stateConfVector[1] = SMO_last_state;
    277c:	89 e2       	ldi	r24, 0x29	; 41
    277e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	9b 83       	std	Y+3, r25	; 0x03
    2786:	8a 83       	std	Y+2, r24	; 0x02
    2788:	30 c0       	rjmp	.+96     	; 0x27ea <sMO_runCycle+0x15a0>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
				/* Default exit sequence for state ShowAmount */
				handle->stateConfVector[1] = SMO_last_state;
    278a:	89 e2       	ldi	r24, 0x29	; 41
    278c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	9b 83       	std	Y+3, r25	; 0x03
    2794:	8a 83       	std	Y+2, r24	; 0x02
    2796:	29 c0       	rjmp	.+82     	; 0x27ea <sMO_runCycle+0x15a0>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
				/* Default exit sequence for state CheckKeyPress2 */
				handle->stateConfVector[1] = SMO_last_state;
    2798:	89 e2       	ldi	r24, 0x29	; 41
    279a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	9b 83       	std	Y+3, r25	; 0x03
    27a2:	8a 83       	std	Y+2, r24	; 0x02
    27a4:	22 c0       	rjmp	.+68     	; 0x27ea <sMO_runCycle+0x15a0>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
				/* Default exit sequence for state EnterAmount */
				handle->stateConfVector[1] = SMO_last_state;
    27a6:	89 e2       	ldi	r24, 0x29	; 41
    27a8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	9b 83       	std	Y+3, r25	; 0x03
    27b0:	8a 83       	std	Y+2, r24	; 0x02
    27b2:	1b c0       	rjmp	.+54     	; 0x27ea <sMO_runCycle+0x15a0>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    27b4:	89 e2       	ldi	r24, 0x29	; 41
    27b6:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	9b 83       	std	Y+3, r25	; 0x03
    27be:	8a 83       	std	Y+2, r24	; 0x02
    27c0:	14 c0       	rjmp	.+40     	; 0x27ea <sMO_runCycle+0x15a0>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_KeepOrdering : {
				/* Default exit sequence for state KeepOrdering */
				handle->stateConfVector[1] = SMO_last_state;
    27c2:	89 e2       	ldi	r24, 0x29	; 41
    27c4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	9b 83       	std	Y+3, r25	; 0x03
    27cc:	8a 83       	std	Y+2, r24	; 0x02
    27ce:	0d c0       	rjmp	.+26     	; 0x27ea <sMO_runCycle+0x15a0>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_Exit : {
				/* Default exit sequence for state Exit */
				handle->stateConfVector[1] = SMO_last_state;
    27d0:	89 e2       	ldi	r24, 0x29	; 41
    27d2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	9b 83       	std	Y+3, r25	; 0x03
    27da:	8a 83       	std	Y+2, r24	; 0x02
    27dc:	06 c0       	rjmp	.+12     	; 0x27ea <sMO_runCycle+0x15a0>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress3 : {
				/* Default exit sequence for state CheckKeyPress3 */
				handle->stateConfVector[1] = SMO_last_state;
    27de:	89 e2       	ldi	r24, 0x29	; 41
    27e0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	9b 83       	std	Y+3, r25	; 0x03
    27e8:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    27ea:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    27ee:	88 e0       	ldi	r24, 0x08	; 8
    27f0:	92 e0       	ldi	r25, 0x02	; 2
    27f2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    27f6:	87 e1       	ldi	r24, 0x17	; 23
    27f8:	92 e0       	ldi	r25, 0x02	; 2
    27fa:	40 e0       	ldi	r20, 0x00	; 0
    27fc:	50 e0       	ldi	r21, 0x00	; 0
    27fe:	ba 01       	movw	r22, r20
    2800:	01 e0       	ldi	r16, 0x01	; 1
    2802:	10 e0       	ldi	r17, 0x00	; 0
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    280c:	1e a6       	lds	r17, 0xbe
    280e:	1f a6       	lds	r17, 0xbf
    2810:	18 aa       	sts	0x98, r17
    2812:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    2814:	85 e0       	ldi	r24, 0x05	; 5
    2816:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	9b 83       	std	Y+3, r25	; 0x03
    281e:	8a 83       	std	Y+2, r24	; 0x02
    2820:	d0 c5       	rjmp	.+2976   	; 0x33c2 <sMO_runCycle+0x2178>
	}  else {
		if (handle->ifaceKEYPAD.lastkey == 12 && handle->ifaceKEYPAD.key_pressed_raised) { 
    2822:	88 85       	ldd	r24, Y+8	; 0x08
    2824:	99 85       	ldd	r25, Y+9	; 0x09
    2826:	aa 85       	ldd	r26, Y+10	; 0x0a
    2828:	bb 85       	ldd	r27, Y+11	; 0x0b
    282a:	8c 30       	cpi	r24, 0x0C	; 12
    282c:	91 05       	cpc	r25, r1
    282e:	a1 05       	cpc	r26, r1
    2830:	b1 05       	cpc	r27, r1
    2832:	09 f0       	breq	.+2      	; 0x2836 <sMO_runCycle+0x15ec>
    2834:	a4 c5       	rjmp	.+2888   	; 0x337e <sMO_runCycle+0x2134>
    2836:	8d 85       	ldd	r24, Y+13	; 0x0d
    2838:	88 23       	and	r24, r24
    283a:	09 f4       	brne	.+2      	; 0x283e <sMO_runCycle+0x15f4>
    283c:	a0 c5       	rjmp	.+2880   	; 0x337e <sMO_runCycle+0x2134>
			/* Default exit sequence for state EnterData */
			/* Default exit sequence for region r1 */
			/* Handle exit of all possible states (of r1) at position 1... */
			switch(handle->stateConfVector[ 1 ]) {
    283e:	89 81       	ldd	r24, Y+1	; 0x01
    2840:	8c 30       	cpi	r24, 0x0C	; 12
    2842:	09 f4       	brne	.+2      	; 0x2846 <sMO_runCycle+0x15fc>
    2844:	47 c0       	rjmp	.+142    	; 0x28d4 <sMO_runCycle+0x168a>
    2846:	8d 30       	cpi	r24, 0x0D	; 13
    2848:	80 f4       	brcc	.+32     	; 0x286a <sMO_runCycle+0x1620>
    284a:	89 30       	cpi	r24, 0x09	; 9
    284c:	71 f1       	breq	.+92     	; 0x28aa <sMO_runCycle+0x1660>
    284e:	8a 30       	cpi	r24, 0x0A	; 10
    2850:	30 f4       	brcc	.+12     	; 0x285e <sMO_runCycle+0x1614>
    2852:	87 30       	cpi	r24, 0x07	; 7
    2854:	e1 f0       	breq	.+56     	; 0x288e <sMO_runCycle+0x1644>
    2856:	88 30       	cpi	r24, 0x08	; 8
    2858:	09 f0       	breq	.+2      	; 0x285c <sMO_runCycle+0x1612>
    285a:	65 c0       	rjmp	.+202    	; 0x2926 <sMO_runCycle+0x16dc>
    285c:	1f c0       	rjmp	.+62     	; 0x289c <sMO_runCycle+0x1652>
    285e:	8a 30       	cpi	r24, 0x0A	; 10
    2860:	59 f1       	breq	.+86     	; 0x28b8 <sMO_runCycle+0x166e>
    2862:	8b 30       	cpi	r24, 0x0B	; 11
    2864:	09 f0       	breq	.+2      	; 0x2868 <sMO_runCycle+0x161e>
    2866:	5f c0       	rjmp	.+190    	; 0x2926 <sMO_runCycle+0x16dc>
    2868:	2e c0       	rjmp	.+92     	; 0x28c6 <sMO_runCycle+0x167c>
    286a:	80 31       	cpi	r24, 0x10	; 16
    286c:	09 f4       	brne	.+2      	; 0x2870 <sMO_runCycle+0x1626>
    286e:	47 c0       	rjmp	.+142    	; 0x28fe <sMO_runCycle+0x16b4>
    2870:	81 31       	cpi	r24, 0x11	; 17
    2872:	30 f4       	brcc	.+12     	; 0x2880 <sMO_runCycle+0x1636>
    2874:	8e 30       	cpi	r24, 0x0E	; 14
    2876:	a9 f1       	breq	.+106    	; 0x28e2 <sMO_runCycle+0x1698>
    2878:	8f 30       	cpi	r24, 0x0F	; 15
    287a:	09 f0       	breq	.+2      	; 0x287e <sMO_runCycle+0x1634>
    287c:	54 c0       	rjmp	.+168    	; 0x2926 <sMO_runCycle+0x16dc>
    287e:	38 c0       	rjmp	.+112    	; 0x28f0 <sMO_runCycle+0x16a6>
    2880:	81 31       	cpi	r24, 0x11	; 17
    2882:	09 f4       	brne	.+2      	; 0x2886 <sMO_runCycle+0x163c>
    2884:	43 c0       	rjmp	.+134    	; 0x290c <sMO_runCycle+0x16c2>
    2886:	82 31       	cpi	r24, 0x12	; 18
    2888:	09 f0       	breq	.+2      	; 0x288c <sMO_runCycle+0x1642>
    288a:	4d c0       	rjmp	.+154    	; 0x2926 <sMO_runCycle+0x16dc>
    288c:	46 c0       	rjmp	.+140    	; 0x291a <sMO_runCycle+0x16d0>
				case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : {
					/* Default exit sequence for state ShowCode */
					handle->stateConfVector[1] = SMO_last_state;
    288e:	89 e2       	ldi	r24, 0x29	; 41
    2890:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	9b 83       	std	Y+3, r25	; 0x03
    2898:	8a 83       	std	Y+2, r24	; 0x02
    289a:	45 c0       	rjmp	.+138    	; 0x2926 <sMO_runCycle+0x16dc>
					break;
				}
				case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : {
					/* Default exit sequence for state EnterCode */
					handle->stateConfVector[1] = SMO_last_state;
    289c:	89 e2       	ldi	r24, 0x29	; 41
    289e:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	9b 83       	std	Y+3, r25	; 0x03
    28a6:	8a 83       	std	Y+2, r24	; 0x02
    28a8:	3e c0       	rjmp	.+124    	; 0x2926 <sMO_runCycle+0x16dc>
					break;
				}
				case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
					/* Default exit sequence for state CheckKeyPress1 */
					handle->stateConfVector[1] = SMO_last_state;
    28aa:	89 e2       	ldi	r24, 0x29	; 41
    28ac:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	9b 83       	std	Y+3, r25	; 0x03
    28b4:	8a 83       	std	Y+2, r24	; 0x02
    28b6:	37 c0       	rjmp	.+110    	; 0x2926 <sMO_runCycle+0x16dc>
					break;
				}
				case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : {
					/* Default exit sequence for state CheckCode0 */
					handle->stateConfVector[1] = SMO_last_state;
    28b8:	89 e2       	ldi	r24, 0x29	; 41
    28ba:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	9b 83       	std	Y+3, r25	; 0x03
    28c2:	8a 83       	std	Y+2, r24	; 0x02
    28c4:	30 c0       	rjmp	.+96     	; 0x2926 <sMO_runCycle+0x16dc>
					break;
				}
				case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : {
					/* Default exit sequence for state ShowAmount */
					handle->stateConfVector[1] = SMO_last_state;
    28c6:	89 e2       	ldi	r24, 0x29	; 41
    28c8:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	9b 83       	std	Y+3, r25	; 0x03
    28d0:	8a 83       	std	Y+2, r24	; 0x02
    28d2:	29 c0       	rjmp	.+82     	; 0x2926 <sMO_runCycle+0x16dc>
					break;
				}
				case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : {
					/* Default exit sequence for state CheckKeyPress2 */
					handle->stateConfVector[1] = SMO_last_state;
    28d4:	89 e2       	ldi	r24, 0x29	; 41
    28d6:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	9b 83       	std	Y+3, r25	; 0x03
    28de:	8a 83       	std	Y+2, r24	; 0x02
    28e0:	22 c0       	rjmp	.+68     	; 0x2926 <sMO_runCycle+0x16dc>
					break;
				}
				case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : {
					/* Default exit sequence for state EnterAmount */
					handle->stateConfVector[1] = SMO_last_state;
    28e2:	89 e2       	ldi	r24, 0x29	; 41
    28e4:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	9b 83       	std	Y+3, r25	; 0x03
    28ec:	8a 83       	std	Y+2, r24	; 0x02
    28ee:	1b c0       	rjmp	.+54     	; 0x2926 <sMO_runCycle+0x16dc>
					break;
				}
				case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : {
					/* Default exit sequence for final state. */
					handle->stateConfVector[1] = SMO_last_state;
    28f0:	89 e2       	ldi	r24, 0x29	; 41
    28f2:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	9b 83       	std	Y+3, r25	; 0x03
    28fa:	8a 83       	std	Y+2, r24	; 0x02
    28fc:	14 c0       	rjmp	.+40     	; 0x2926 <sMO_runCycle+0x16dc>
					break;
				}
				case SMO_main_region_on_r1_Running_running_main_EnterData_r1_KeepOrdering : {
					/* Default exit sequence for state KeepOrdering */
					handle->stateConfVector[1] = SMO_last_state;
    28fe:	89 e2       	ldi	r24, 0x29	; 41
    2900:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	9b 83       	std	Y+3, r25	; 0x03
    2908:	8a 83       	std	Y+2, r24	; 0x02
    290a:	0d c0       	rjmp	.+26     	; 0x2926 <sMO_runCycle+0x16dc>
					break;
				}
				case SMO_main_region_on_r1_Running_running_main_EnterData_r1_Exit : {
					/* Default exit sequence for state Exit */
					handle->stateConfVector[1] = SMO_last_state;
    290c:	89 e2       	ldi	r24, 0x29	; 41
    290e:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	9b 83       	std	Y+3, r25	; 0x03
    2916:	8a 83       	std	Y+2, r24	; 0x02
    2918:	06 c0       	rjmp	.+12     	; 0x2926 <sMO_runCycle+0x16dc>
					break;
				}
				case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress3 : {
					/* Default exit sequence for state CheckKeyPress3 */
					handle->stateConfVector[1] = SMO_last_state;
    291a:	89 e2       	ldi	r24, 0x29	; 41
    291c:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	9b 83       	std	Y+3, r25	; 0x03
    2924:	8a 83       	std	Y+2, r24	; 0x02
				}
				default: break;
			}
			/* Default enter sequence for state SendData */
			/* Entry action for state 'SendData'. */
			handle->ifaceRF.result = bool_false;
    2926:	1f 8a       	std	Y+23, r1	; 0x17
			handle->ifaceRF.retry = 0;
			/* Default enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* Default enter sequence for state Send */
			/* Entry action for state 'Send'. */
			handle->ifaceRF.retry += 1;
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	a0 e0       	ldi	r26, 0x00	; 0
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	88 8f       	std	Y+24, r24	; 0x18
    2932:	99 8f       	std	Y+25, r25	; 0x19
    2934:	aa 8f       	std	Y+26, r26	; 0x1a
    2936:	bb 8f       	std	Y+27, r27	; 0x1b
			handle->ifaceRF.result = sMOIfaceRF_sendData(handle->iface.menuId, handle->iface.tableId, handle->ifaceDISH.ID, handle->ifaceDISH.amount);
    2938:	6e a5       	lds	r22, 0x6e
    293a:	7f a5       	lds	r23, 0x6f
    293c:	88 a9       	sts	0x48, r24
    293e:	99 a9       	sts	0x49, r25
    2940:	2a a9       	sts	0x4a, r18
    2942:	3b a9       	sts	0x4b, r19
    2944:	4c a9       	sts	0x4c, r20
    2946:	5d a9       	sts	0x4d, r21
    2948:	e9 a0       	lds	r30, 0x89
    294a:	fa a0       	lds	r31, 0x8a
    294c:	0b a1       	lds	r16, 0x4b
    294e:	1c a1       	lds	r17, 0x4c
    2950:	ad a0       	lds	r26, 0x8d
    2952:	be a0       	lds	r27, 0x8e
    2954:	cf a0       	lds	r28, 0x8f
    2956:	d8 a4       	lds	r29, 0xa8
    2958:	0e 94 53 03 	call	0x6a6	; 0x6a6 <sMOIfaceRF_sendData>
    295c:	8f 8b       	std	Y+23, r24	; 0x17
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_Send;
    295e:	86 e1       	ldi	r24, 0x16	; 22
    2960:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	9b 83       	std	Y+3, r25	; 0x03
    2968:	8a 83       	std	Y+2, r24	; 0x02
    296a:	2b c5       	rjmp	.+2646   	; 0x33c2 <sMO_runCycle+0x2178>
/* The reactions of state MenuA. */
static void sMO_react_main_region_on_r1_Running_running_main_MenuA(SMO* handle) {
	/* The reactions of state MenuA. */
	if (bool_true) { 
		/* Default exit sequence for state MenuA */
		handle->stateConfVector[1] = SMO_last_state;
    296c:	89 e2       	ldi	r24, 0x29	; 41
    296e:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2970:	ee 24       	eor	r14, r14
    2972:	ff 24       	eor	r15, r15
    2974:	e3 94       	inc	r14
    2976:	fb 82       	std	Y+3, r15	; 0x03
    2978:	ea 82       	std	Y+2, r14	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    297a:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Dish Code:");
    297e:	85 e2       	ldi	r24, 0x25	; 37
    2980:	92 e0       	ldi	r25, 0x02	; 2
    2982:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    2986:	80 e3       	ldi	r24, 0x30	; 48
    2988:	92 e0       	ldi	r25, 0x02	; 2
    298a:	40 e0       	ldi	r20, 0x00	; 0
    298c:	50 e0       	ldi	r21, 0x00	; 0
    298e:	ba 01       	movw	r22, r20
    2990:	01 e0       	ldi	r16, 0x01	; 1
    2992:	10 e0       	ldi	r17, 0x00	; 0
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    299c:	19 a6       	lds	r17, 0xb9
    299e:	1a a6       	lds	r17, 0xba
    29a0:	1b a6       	lds	r17, 0xbb
    29a2:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    29a4:	19 a2       	lds	r17, 0x99
    29a6:	1a a2       	lds	r17, 0x9a
    29a8:	1b a2       	lds	r17, 0x9b
    29aa:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    29ac:	87 e0       	ldi	r24, 0x07	; 7
    29ae:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    29b0:	fb 82       	std	Y+3, r15	; 0x03
    29b2:	ea 82       	std	Y+2, r14	; 0x02
    29b4:	06 c5       	rjmp	.+2572   	; 0x33c2 <sMO_runCycle+0x2178>
}

/* The reactions of state CheckKeyPress. */
static void sMO_react_main_region_on_r1_Running_running_main_CheckKeyPress(SMO* handle) {
	/* The reactions of state CheckKeyPress. */
	if (handle->ifaceKEYPAD.lastkey == 13 && handle->ifaceKEYPAD.key_pressed_raised) { 
    29b6:	88 85       	ldd	r24, Y+8	; 0x08
    29b8:	99 85       	ldd	r25, Y+9	; 0x09
    29ba:	aa 85       	ldd	r26, Y+10	; 0x0a
    29bc:	bb 85       	ldd	r27, Y+11	; 0x0b
    29be:	8d 30       	cpi	r24, 0x0D	; 13
    29c0:	91 05       	cpc	r25, r1
    29c2:	a1 05       	cpc	r26, r1
    29c4:	b1 05       	cpc	r27, r1
    29c6:	81 f4       	brne	.+32     	; 0x29e8 <sMO_runCycle+0x179e>
    29c8:	2d 85       	ldd	r18, Y+13	; 0x0d
    29ca:	22 23       	and	r18, r18
    29cc:	69 f0       	breq	.+26     	; 0x29e8 <sMO_runCycle+0x179e>
		/* Default exit sequence for state CheckKeyPress */
		handle->stateConfVector[1] = SMO_last_state;
		handle->stateConfVectorPosition = 1;
    29ce:	1b 83       	std	Y+3, r17	; 0x03
    29d0:	0a 83       	std	Y+2, r16	; 0x02
		/* Default enter sequence for state MenuA */
		/* Entry action for state 'MenuA'. */
		handle->iface.menuId = 1;
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	a0 e0       	ldi	r26, 0x00	; 0
    29d8:	b0 e0       	ldi	r27, 0x00	; 0
    29da:	8e a7       	lds	r24, 0x7e
    29dc:	9f a7       	lds	r25, 0x7f
    29de:	a8 ab       	sts	0x58, r26
    29e0:	b9 ab       	sts	0x59, r27
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_MenuA;
    29e2:	93 e1       	ldi	r25, 0x13	; 19
    29e4:	99 83       	std	Y+1, r25	; 0x01
    29e6:	cb c4       	rjmp	.+2454   	; 0x337e <sMO_runCycle+0x2134>
		handle->stateConfVectorPosition = 1;
	}  else {
		if (handle->ifaceKEYPAD.lastkey == 14 && handle->ifaceKEYPAD.key_pressed_raised) { 
    29e8:	8e 30       	cpi	r24, 0x0E	; 14
    29ea:	91 05       	cpc	r25, r1
    29ec:	a1 05       	cpc	r26, r1
    29ee:	b1 05       	cpc	r27, r1
    29f0:	61 f4       	brne	.+24     	; 0x2a0a <sMO_runCycle+0x17c0>
    29f2:	2d 85       	ldd	r18, Y+13	; 0x0d
    29f4:	22 23       	and	r18, r18
    29f6:	49 f0       	breq	.+18     	; 0x2a0a <sMO_runCycle+0x17c0>
			/* Default exit sequence for state CheckKeyPress */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    29f8:	1b 83       	std	Y+3, r17	; 0x03
    29fa:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state MenuB */
			/* Entry action for state 'MenuB'. */
			handle->iface.menuId = 2;
    29fc:	4e a6       	lds	r20, 0xbe
    29fe:	5f a6       	lds	r21, 0xbf
    2a00:	68 aa       	sts	0x98, r22
    2a02:	79 aa       	sts	0x99, r23
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_MenuB;
    2a04:	ab e1       	ldi	r26, 0x1B	; 27
    2a06:	a9 83       	std	Y+1, r26	; 0x01
    2a08:	ba c4       	rjmp	.+2420   	; 0x337e <sMO_runCycle+0x2134>
			handle->stateConfVectorPosition = 1;
		}  else {
			if (handle->ifaceKEYPAD.lastkey == 15 && handle->ifaceKEYPAD.key_pressed_raised) { 
    2a0a:	8f 30       	cpi	r24, 0x0F	; 15
    2a0c:	91 05       	cpc	r25, r1
    2a0e:	a1 05       	cpc	r26, r1
    2a10:	b1 05       	cpc	r27, r1
    2a12:	61 f4       	brne	.+24     	; 0x2a2c <sMO_runCycle+0x17e2>
    2a14:	2d 85       	ldd	r18, Y+13	; 0x0d
    2a16:	22 23       	and	r18, r18
    2a18:	49 f0       	breq	.+18     	; 0x2a2c <sMO_runCycle+0x17e2>
				/* Default exit sequence for state CheckKeyPress */
				handle->stateConfVector[1] = SMO_last_state;
				handle->stateConfVectorPosition = 1;
    2a1a:	1b 83       	std	Y+3, r17	; 0x03
    2a1c:	0a 83       	std	Y+2, r16	; 0x02
				/* Default enter sequence for state MenuC */
				/* Entry action for state 'MenuC'. */
				handle->iface.menuId = 3;
    2a1e:	8e a6       	lds	r24, 0xbe
    2a20:	9f a6       	lds	r25, 0xbf
    2a22:	a8 aa       	sts	0x98, r26
    2a24:	b9 aa       	sts	0x99, r27
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_MenuC;
    2a26:	bc e1       	ldi	r27, 0x1C	; 28
    2a28:	b9 83       	std	Y+1, r27	; 0x01
    2a2a:	a9 c4       	rjmp	.+2386   	; 0x337e <sMO_runCycle+0x2134>
				handle->stateConfVectorPosition = 1;
			}  else {
				if (handle->ifaceKEYPAD.lastkey == 16 && handle->ifaceKEYPAD.key_pressed_raised) { 
    2a2c:	80 31       	cpi	r24, 0x10	; 16
    2a2e:	91 05       	cpc	r25, r1
    2a30:	a1 05       	cpc	r26, r1
    2a32:	b1 05       	cpc	r27, r1
    2a34:	09 f0       	breq	.+2      	; 0x2a38 <sMO_runCycle+0x17ee>
    2a36:	a3 c4       	rjmp	.+2374   	; 0x337e <sMO_runCycle+0x2134>
    2a38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a3a:	88 23       	and	r24, r24
    2a3c:	09 f4       	brne	.+2      	; 0x2a40 <sMO_runCycle+0x17f6>
    2a3e:	9f c4       	rjmp	.+2366   	; 0x337e <sMO_runCycle+0x2134>
					/* Default exit sequence for state CheckKeyPress */
					handle->stateConfVector[1] = SMO_last_state;
					handle->stateConfVectorPosition = 1;
    2a40:	1b 83       	std	Y+3, r17	; 0x03
    2a42:	0a 83       	std	Y+2, r16	; 0x02
					/* Default enter sequence for state MenuD */
					/* Entry action for state 'MenuD'. */
					handle->iface.menuId = 4;
    2a44:	ce a6       	lds	r28, 0xbe
    2a46:	df a6       	lds	r29, 0xbf
    2a48:	e8 aa       	sts	0x98, r30
    2a4a:	f9 aa       	sts	0x99, r31
					handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_MenuD;
    2a4c:	8d e1       	ldi	r24, 0x1D	; 29
    2a4e:	89 83       	std	Y+1, r24	; 0x01
    2a50:	96 c4       	rjmp	.+2348   	; 0x337e <sMO_runCycle+0x2134>
static void sMO_react_main_region_on_r1_Running_running_main_SendData_r1_Send(SMO* handle) {
	/* The reactions of state Send. */
	if (bool_true) { 
		/* Default enter sequence for state SendData */
		/* Entry action for state 'SendData'. */
		handle->ifaceRF.result = bool_false;
    2a52:	1f 8a       	std	Y+23, r1	; 0x17
		handle->ifaceRF.retry = 0;
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state Send */
		/* Entry action for state 'Send'. */
		handle->ifaceRF.retry += 1;
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	a0 e0       	ldi	r26, 0x00	; 0
    2a5a:	b0 e0       	ldi	r27, 0x00	; 0
    2a5c:	88 8f       	std	Y+24, r24	; 0x18
    2a5e:	99 8f       	std	Y+25, r25	; 0x19
    2a60:	aa 8f       	std	Y+26, r26	; 0x1a
    2a62:	bb 8f       	std	Y+27, r27	; 0x1b
		handle->ifaceRF.result = sMOIfaceRF_sendData(handle->iface.menuId, handle->iface.tableId, handle->ifaceDISH.ID, handle->ifaceDISH.amount);
    2a64:	6e a5       	lds	r22, 0x6e
    2a66:	7f a5       	lds	r23, 0x6f
    2a68:	88 a9       	sts	0x48, r24
    2a6a:	99 a9       	sts	0x49, r25
    2a6c:	2a a9       	sts	0x4a, r18
    2a6e:	3b a9       	sts	0x4b, r19
    2a70:	4c a9       	sts	0x4c, r20
    2a72:	5d a9       	sts	0x4d, r21
    2a74:	e9 a0       	lds	r30, 0x89
    2a76:	fa a0       	lds	r31, 0x8a
    2a78:	0b a1       	lds	r16, 0x4b
    2a7a:	1c a1       	lds	r17, 0x4c
    2a7c:	ad a0       	lds	r26, 0x8d
    2a7e:	be a0       	lds	r27, 0x8e
    2a80:	cf a0       	lds	r28, 0x8f
    2a82:	d8 a4       	lds	r29, 0xa8
    2a84:	0e 94 53 03 	call	0x6a6	; 0x6a6 <sMOIfaceRF_sendData>
    2a88:	8f 8b       	std	Y+23, r24	; 0x17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_Send;
    2a8a:	86 e1       	ldi	r24, 0x16	; 22
    2a8c:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	9b 83       	std	Y+3, r25	; 0x03
    2a94:	8a 83       	std	Y+2, r24	; 0x02
    2a96:	95 c4       	rjmp	.+2346   	; 0x33c2 <sMO_runCycle+0x2178>
static void sMO_react_main_region_on_r1_Running_running_main_SendData_r1_Check(SMO* handle) {
	/* The reactions of state Check. */
	if (bool_true) { 
		/* Default enter sequence for state SendData */
		/* Entry action for state 'SendData'. */
		handle->ifaceRF.result = bool_false;
    2a98:	1f 8a       	std	Y+23, r1	; 0x17
		handle->ifaceRF.retry = 0;
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state Send */
		/* Entry action for state 'Send'. */
		handle->ifaceRF.retry += 1;
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	a0 e0       	ldi	r26, 0x00	; 0
    2aa0:	b0 e0       	ldi	r27, 0x00	; 0
    2aa2:	88 8f       	std	Y+24, r24	; 0x18
    2aa4:	99 8f       	std	Y+25, r25	; 0x19
    2aa6:	aa 8f       	std	Y+26, r26	; 0x1a
    2aa8:	bb 8f       	std	Y+27, r27	; 0x1b
		handle->ifaceRF.result = sMOIfaceRF_sendData(handle->iface.menuId, handle->iface.tableId, handle->ifaceDISH.ID, handle->ifaceDISH.amount);
    2aaa:	6e a5       	lds	r22, 0x6e
    2aac:	7f a5       	lds	r23, 0x6f
    2aae:	88 a9       	sts	0x48, r24
    2ab0:	99 a9       	sts	0x49, r25
    2ab2:	2a a9       	sts	0x4a, r18
    2ab4:	3b a9       	sts	0x4b, r19
    2ab6:	4c a9       	sts	0x4c, r20
    2ab8:	5d a9       	sts	0x4d, r21
    2aba:	e9 a0       	lds	r30, 0x89
    2abc:	fa a0       	lds	r31, 0x8a
    2abe:	0b a1       	lds	r16, 0x4b
    2ac0:	1c a1       	lds	r17, 0x4c
    2ac2:	ad a0       	lds	r26, 0x8d
    2ac4:	be a0       	lds	r27, 0x8e
    2ac6:	cf a0       	lds	r28, 0x8f
    2ac8:	d8 a4       	lds	r29, 0xa8
    2aca:	0e 94 53 03 	call	0x6a6	; 0x6a6 <sMOIfaceRF_sendData>
    2ace:	8f 8b       	std	Y+23, r24	; 0x17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_Send;
    2ad0:	86 e1       	ldi	r24, 0x16	; 22
    2ad2:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	9b 83       	std	Y+3, r25	; 0x03
    2ada:	8a 83       	std	Y+2, r24	; 0x02
    2adc:	72 c4       	rjmp	.+2276   	; 0x33c2 <sMO_runCycle+0x2178>
static void sMO_react_main_region_on_r1_Running_running_main_SendData_r1__final_0(SMO* handle) {
	/* The reactions of state null. */
	if (bool_true) { 
		/* Default enter sequence for state SendData */
		/* Entry action for state 'SendData'. */
		handle->ifaceRF.result = bool_false;
    2ade:	1f 8a       	std	Y+23, r1	; 0x17
		handle->ifaceRF.retry = 0;
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state Send */
		/* Entry action for state 'Send'. */
		handle->ifaceRF.retry += 1;
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	a0 e0       	ldi	r26, 0x00	; 0
    2ae6:	b0 e0       	ldi	r27, 0x00	; 0
    2ae8:	88 8f       	std	Y+24, r24	; 0x18
    2aea:	99 8f       	std	Y+25, r25	; 0x19
    2aec:	aa 8f       	std	Y+26, r26	; 0x1a
    2aee:	bb 8f       	std	Y+27, r27	; 0x1b
		handle->ifaceRF.result = sMOIfaceRF_sendData(handle->iface.menuId, handle->iface.tableId, handle->ifaceDISH.ID, handle->ifaceDISH.amount);
    2af0:	6e a5       	lds	r22, 0x6e
    2af2:	7f a5       	lds	r23, 0x6f
    2af4:	88 a9       	sts	0x48, r24
    2af6:	99 a9       	sts	0x49, r25
    2af8:	2a a9       	sts	0x4a, r18
    2afa:	3b a9       	sts	0x4b, r19
    2afc:	4c a9       	sts	0x4c, r20
    2afe:	5d a9       	sts	0x4d, r21
    2b00:	e9 a0       	lds	r30, 0x89
    2b02:	fa a0       	lds	r31, 0x8a
    2b04:	0b a1       	lds	r16, 0x4b
    2b06:	1c a1       	lds	r17, 0x4c
    2b08:	ad a0       	lds	r26, 0x8d
    2b0a:	be a0       	lds	r27, 0x8e
    2b0c:	cf a0       	lds	r28, 0x8f
    2b0e:	d8 a4       	lds	r29, 0xa8
    2b10:	0e 94 53 03 	call	0x6a6	; 0x6a6 <sMOIfaceRF_sendData>
    2b14:	8f 8b       	std	Y+23, r24	; 0x17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_Send;
    2b16:	86 e1       	ldi	r24, 0x16	; 22
    2b18:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	9b 83       	std	Y+3, r25	; 0x03
    2b20:	8a 83       	std	Y+2, r24	; 0x02
    2b22:	4f c4       	rjmp	.+2206   	; 0x33c2 <sMO_runCycle+0x2178>
static void sMO_react_main_region_on_r1_Running_running_main_SendData_r1_SendFail1(SMO* handle) {
	/* The reactions of state SendFail1. */
	if (bool_true) { 
		/* Default enter sequence for state SendData */
		/* Entry action for state 'SendData'. */
		handle->ifaceRF.result = bool_false;
    2b24:	1f 8a       	std	Y+23, r1	; 0x17
		handle->ifaceRF.retry = 0;
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state Send */
		/* Entry action for state 'Send'. */
		handle->ifaceRF.retry += 1;
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	a0 e0       	ldi	r26, 0x00	; 0
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	88 8f       	std	Y+24, r24	; 0x18
    2b30:	99 8f       	std	Y+25, r25	; 0x19
    2b32:	aa 8f       	std	Y+26, r26	; 0x1a
    2b34:	bb 8f       	std	Y+27, r27	; 0x1b
		handle->ifaceRF.result = sMOIfaceRF_sendData(handle->iface.menuId, handle->iface.tableId, handle->ifaceDISH.ID, handle->ifaceDISH.amount);
    2b36:	6e a5       	lds	r22, 0x6e
    2b38:	7f a5       	lds	r23, 0x6f
    2b3a:	88 a9       	sts	0x48, r24
    2b3c:	99 a9       	sts	0x49, r25
    2b3e:	2a a9       	sts	0x4a, r18
    2b40:	3b a9       	sts	0x4b, r19
    2b42:	4c a9       	sts	0x4c, r20
    2b44:	5d a9       	sts	0x4d, r21
    2b46:	e9 a0       	lds	r30, 0x89
    2b48:	fa a0       	lds	r31, 0x8a
    2b4a:	0b a1       	lds	r16, 0x4b
    2b4c:	1c a1       	lds	r17, 0x4c
    2b4e:	ad a0       	lds	r26, 0x8d
    2b50:	be a0       	lds	r27, 0x8e
    2b52:	cf a0       	lds	r28, 0x8f
    2b54:	d8 a4       	lds	r29, 0xa8
    2b56:	0e 94 53 03 	call	0x6a6	; 0x6a6 <sMOIfaceRF_sendData>
    2b5a:	8f 8b       	std	Y+23, r24	; 0x17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_Send;
    2b5c:	86 e1       	ldi	r24, 0x16	; 22
    2b5e:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	9b 83       	std	Y+3, r25	; 0x03
    2b66:	8a 83       	std	Y+2, r24	; 0x02
    2b68:	2c c4       	rjmp	.+2136   	; 0x33c2 <sMO_runCycle+0x2178>
static void sMO_react_main_region_on_r1_Running_running_main_SendData_r1_ResetResult(SMO* handle) {
	/* The reactions of state ResetResult. */
	if (bool_true) { 
		/* Default enter sequence for state SendData */
		/* Entry action for state 'SendData'. */
		handle->ifaceRF.result = bool_false;
    2b6a:	1f 8a       	std	Y+23, r1	; 0x17
		handle->ifaceRF.retry = 0;
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state Send */
		/* Entry action for state 'Send'. */
		handle->ifaceRF.retry += 1;
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	a0 e0       	ldi	r26, 0x00	; 0
    2b72:	b0 e0       	ldi	r27, 0x00	; 0
    2b74:	88 8f       	std	Y+24, r24	; 0x18
    2b76:	99 8f       	std	Y+25, r25	; 0x19
    2b78:	aa 8f       	std	Y+26, r26	; 0x1a
    2b7a:	bb 8f       	std	Y+27, r27	; 0x1b
		handle->ifaceRF.result = sMOIfaceRF_sendData(handle->iface.menuId, handle->iface.tableId, handle->ifaceDISH.ID, handle->ifaceDISH.amount);
    2b7c:	6e a5       	lds	r22, 0x6e
    2b7e:	7f a5       	lds	r23, 0x6f
    2b80:	88 a9       	sts	0x48, r24
    2b82:	99 a9       	sts	0x49, r25
    2b84:	2a a9       	sts	0x4a, r18
    2b86:	3b a9       	sts	0x4b, r19
    2b88:	4c a9       	sts	0x4c, r20
    2b8a:	5d a9       	sts	0x4d, r21
    2b8c:	e9 a0       	lds	r30, 0x89
    2b8e:	fa a0       	lds	r31, 0x8a
    2b90:	0b a1       	lds	r16, 0x4b
    2b92:	1c a1       	lds	r17, 0x4c
    2b94:	ad a0       	lds	r26, 0x8d
    2b96:	be a0       	lds	r27, 0x8e
    2b98:	cf a0       	lds	r28, 0x8f
    2b9a:	d8 a4       	lds	r29, 0xa8
    2b9c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <sMOIfaceRF_sendData>
    2ba0:	8f 8b       	std	Y+23, r24	; 0x17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendData_r1_Send;
    2ba2:	86 e1       	ldi	r24, 0x16	; 22
    2ba4:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	9b 83       	std	Y+3, r25	; 0x03
    2bac:	8a 83       	std	Y+2, r24	; 0x02
    2bae:	09 c4       	rjmp	.+2066   	; 0x33c2 <sMO_runCycle+0x2178>
/* The reactions of state MenuB. */
static void sMO_react_main_region_on_r1_Running_running_main_MenuB(SMO* handle) {
	/* The reactions of state MenuB. */
	if (bool_true) { 
		/* Default exit sequence for state MenuB */
		handle->stateConfVector[1] = SMO_last_state;
    2bb0:	89 e2       	ldi	r24, 0x29	; 41
    2bb2:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2bb4:	ee 24       	eor	r14, r14
    2bb6:	ff 24       	eor	r15, r15
    2bb8:	e3 94       	inc	r14
    2bba:	fb 82       	std	Y+3, r15	; 0x03
    2bbc:	ea 82       	std	Y+2, r14	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowCode */
		/* Entry action for state 'ShowCode'. */
		sMOIfaceLCD_clear();
    2bbe:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Dish Code:");
    2bc2:	85 e2       	ldi	r24, 0x25	; 37
    2bc4:	92 e0       	ldi	r25, 0x02	; 2
    2bc6:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("_ _ _", 0, 1);
    2bca:	80 e3       	ldi	r24, 0x30	; 48
    2bcc:	92 e0       	ldi	r25, 0x02	; 2
    2bce:	40 e0       	ldi	r20, 0x00	; 0
    2bd0:	50 e0       	ldi	r21, 0x00	; 0
    2bd2:	ba 01       	movw	r22, r20
    2bd4:	01 e0       	ldi	r16, 0x01	; 1
    2bd6:	10 e0       	ldi	r17, 0x00	; 0
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
		handle->ifaceDISH.pos = 0;
    2be0:	19 a6       	lds	r17, 0xb9
    2be2:	1a a6       	lds	r17, 0xba
    2be4:	1b a6       	lds	r17, 0xbb
    2be6:	1c a6       	lds	r17, 0xbc
		handle->ifaceDISH.ID = 0;
    2be8:	19 a2       	lds	r17, 0x99
    2bea:	1a a2       	lds	r17, 0x9a
    2bec:	1b a2       	lds	r17, 0x9b
    2bee:	1c a2       	lds	r17, 0x9c
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode;
    2bf0:	87 e0       	ldi	r24, 0x07	; 7
    2bf2:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2bf4:	fb 82       	std	Y+3, r15	; 0x03
    2bf6:	ea 82       	std	Y+2, r14	; 0x02
    2bf8:	e4 c3       	rjmp	.+1992   	; 0x33c2 <sMO_runCycle+0x2178>
/* The reactions of state MenuC. */
static void sMO_react_main_region_on_r1_Running_running_main_MenuC(SMO* handle) {
	/* The reactions of state MenuC. */
	if (bool_true) { 
		/* Default exit sequence for state MenuC */
		handle->stateConfVector[1] = SMO_last_state;
    2bfa:	89 e2       	ldi	r24, 0x29	; 41
    2bfc:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2bfe:	ee 24       	eor	r14, r14
    2c00:	ff 24       	eor	r15, r15
    2c02:	e3 94       	inc	r14
    2c04:	fb 82       	std	Y+3, r15	; 0x03
    2c06:	ea 82       	std	Y+2, r14	; 0x02
		/* Default enter sequence for state ConfirmRequest */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state RequestConfirmation */
		/* Entry action for state 'RequestConfirmation'. */
		sMOIfaceLCD_clear();
    2c08:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Proceed?");
    2c0c:	8b e6       	ldi	r24, 0x6B	; 107
    2c0e:	92 e0       	ldi	r25, 0x02	; 2
    2c10:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("*-No  #-Yes", 0, 1);
    2c14:	84 e7       	ldi	r24, 0x74	; 116
    2c16:	92 e0       	ldi	r25, 0x02	; 2
    2c18:	40 e0       	ldi	r20, 0x00	; 0
    2c1a:	50 e0       	ldi	r21, 0x00	; 0
    2c1c:	ba 01       	movw	r22, r20
    2c1e:	01 e0       	ldi	r16, 0x01	; 1
    2c20:	10 e0       	ldi	r17, 0x00	; 0
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation;
    2c2a:	8f e1       	ldi	r24, 0x1F	; 31
    2c2c:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2c2e:	fb 82       	std	Y+3, r15	; 0x03
    2c30:	ea 82       	std	Y+2, r14	; 0x02
    2c32:	c7 c3       	rjmp	.+1934   	; 0x33c2 <sMO_runCycle+0x2178>
/* The reactions of state MenuD. */
static void sMO_react_main_region_on_r1_Running_running_main_MenuD(SMO* handle) {
	/* The reactions of state MenuD. */
	if (bool_true) { 
		/* Default exit sequence for state MenuD */
		handle->stateConfVector[1] = SMO_last_state;
    2c34:	89 e2       	ldi	r24, 0x29	; 41
    2c36:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2c38:	ee 24       	eor	r14, r14
    2c3a:	ff 24       	eor	r15, r15
    2c3c:	e3 94       	inc	r14
    2c3e:	fb 82       	std	Y+3, r15	; 0x03
    2c40:	ea 82       	std	Y+2, r14	; 0x02
		/* Default enter sequence for state ConfirmRequest */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state RequestConfirmation */
		/* Entry action for state 'RequestConfirmation'. */
		sMOIfaceLCD_clear();
    2c42:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Proceed?");
    2c46:	8b e6       	ldi	r24, 0x6B	; 107
    2c48:	92 e0       	ldi	r25, 0x02	; 2
    2c4a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("*-No  #-Yes", 0, 1);
    2c4e:	84 e7       	ldi	r24, 0x74	; 116
    2c50:	92 e0       	ldi	r25, 0x02	; 2
    2c52:	40 e0       	ldi	r20, 0x00	; 0
    2c54:	50 e0       	ldi	r21, 0x00	; 0
    2c56:	ba 01       	movw	r22, r20
    2c58:	01 e0       	ldi	r16, 0x01	; 1
    2c5a:	10 e0       	ldi	r17, 0x00	; 0
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation;
    2c64:	8f e1       	ldi	r24, 0x1F	; 31
    2c66:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2c68:	fb 82       	std	Y+3, r15	; 0x03
    2c6a:	ea 82       	std	Y+2, r14	; 0x02
    2c6c:	aa c3       	rjmp	.+1876   	; 0x33c2 <sMO_runCycle+0x2178>
}

/* The reactions of state RequestConfirmation. */
static void sMO_react_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation(SMO* handle) {
	/* The reactions of state RequestConfirmation. */
	if (handle->iface.menuId == 0) { 
    2c6e:	8e a5       	lds	r24, 0x6e
    2c70:	9f a5       	lds	r25, 0x6f
    2c72:	a8 a9       	sts	0x48, r26
    2c74:	b9 a9       	sts	0x49, r27
    2c76:	00 97       	sbiw	r24, 0x00	; 0
    2c78:	a1 05       	cpc	r26, r1
    2c7a:	b1 05       	cpc	r27, r1
    2c7c:	09 f0       	breq	.+2      	; 0x2c80 <sMO_runCycle+0x1a36>
    2c7e:	48 c0       	rjmp	.+144    	; 0x2d10 <sMO_runCycle+0x1ac6>
		/* Default exit sequence for state ConfirmRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2c80:	89 81       	ldd	r24, Y+1	; 0x01
    2c82:	80 32       	cpi	r24, 0x20	; 32
    2c84:	89 f0       	breq	.+34     	; 0x2ca8 <sMO_runCycle+0x1a5e>
    2c86:	81 32       	cpi	r24, 0x21	; 33
    2c88:	18 f4       	brcc	.+6      	; 0x2c90 <sMO_runCycle+0x1a46>
    2c8a:	8f 31       	cpi	r24, 0x1F	; 31
    2c8c:	29 f5       	brne	.+74     	; 0x2cd8 <sMO_runCycle+0x1a8e>
    2c8e:	05 c0       	rjmp	.+10     	; 0x2c9a <sMO_runCycle+0x1a50>
    2c90:	81 32       	cpi	r24, 0x21	; 33
    2c92:	a9 f0       	breq	.+42     	; 0x2cbe <sMO_runCycle+0x1a74>
    2c94:	82 32       	cpi	r24, 0x22	; 34
    2c96:	01 f5       	brne	.+64     	; 0x2cd8 <sMO_runCycle+0x1a8e>
    2c98:	19 c0       	rjmp	.+50     	; 0x2ccc <sMO_runCycle+0x1a82>
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation : {
				/* Default exit sequence for state RequestConfirmation */
				handle->stateConfVector[1] = SMO_last_state;
    2c9a:	89 e2       	ldi	r24, 0x29	; 41
    2c9c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	9b 83       	std	Y+3, r25	; 0x03
    2ca4:	8a 83       	std	Y+2, r24	; 0x02
    2ca6:	18 c0       	rjmp	.+48     	; 0x2cd8 <sMO_runCycle+0x1a8e>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_Confirm : {
				/* Default exit sequence for state Confirm */
				handle->stateConfVector[1] = SMO_last_state;
    2ca8:	89 e2       	ldi	r24, 0x29	; 41
    2caa:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	9b 83       	std	Y+3, r25	; 0x03
    2cb2:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'Confirm'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Confirm_time_event_0_raised) );		
    2cb4:	ce 01       	movw	r24, r28
    2cb6:	ca 96       	adiw	r24, 0x3a	; 58
    2cb8:	0e 94 cf 03 	call	0x79e	; 0x79e <sMO_unsetTimer>
    2cbc:	0d c0       	rjmp	.+26     	; 0x2cd8 <sMO_runCycle+0x1a8e>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress : {
				/* Default exit sequence for state CheckKeyPress */
				handle->stateConfVector[1] = SMO_last_state;
    2cbe:	89 e2       	ldi	r24, 0x29	; 41
    2cc0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	9b 83       	std	Y+3, r25	; 0x03
    2cc8:	8a 83       	std	Y+2, r24	; 0x02
    2cca:	06 c0       	rjmp	.+12     	; 0x2cd8 <sMO_runCycle+0x1a8e>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2ccc:	89 e2       	ldi	r24, 0x29	; 41
    2cce:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	9b 83       	std	Y+3, r25	; 0x03
    2cd6:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    2cd8:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    2cdc:	88 e0       	ldi	r24, 0x08	; 8
    2cde:	92 e0       	ldi	r25, 0x02	; 2
    2ce0:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    2ce4:	87 e1       	ldi	r24, 0x17	; 23
    2ce6:	92 e0       	ldi	r25, 0x02	; 2
    2ce8:	40 e0       	ldi	r20, 0x00	; 0
    2cea:	50 e0       	ldi	r21, 0x00	; 0
    2cec:	ba 01       	movw	r22, r20
    2cee:	01 e0       	ldi	r16, 0x01	; 1
    2cf0:	10 e0       	ldi	r17, 0x00	; 0
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    2cfa:	1e a6       	lds	r17, 0xbe
    2cfc:	1f a6       	lds	r17, 0xbf
    2cfe:	18 aa       	sts	0x98, r17
    2d00:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    2d02:	85 e0       	ldi	r24, 0x05	; 5
    2d04:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	9b 83       	std	Y+3, r25	; 0x03
    2d0c:	8a 83       	std	Y+2, r24	; 0x02
    2d0e:	59 c3       	rjmp	.+1714   	; 0x33c2 <sMO_runCycle+0x2178>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state RequestConfirmation */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    2d10:	1b 83       	std	Y+3, r17	; 0x03
    2d12:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state CheckKeyPress */
			/* Entry action for state 'CheckKeyPress'. */
			handle->ifaceKEYPAD.lastkey = 0;
    2d14:	18 86       	std	Y+8, r1	; 0x08
    2d16:	19 86       	std	Y+9, r1	; 0x09
    2d18:	1a 86       	std	Y+10, r1	; 0x0a
    2d1a:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress;
    2d1c:	29 82       	std	Y+1, r2	; 0x01
    2d1e:	2f c3       	rjmp	.+1630   	; 0x337e <sMO_runCycle+0x2134>
}

/* The reactions of state Confirm. */
static void sMO_react_main_region_on_r1_Running_running_main_ConfirmRequest_r1_Confirm(SMO* handle) {
	/* The reactions of state Confirm. */
	if (handle->iface.menuId == 0) { 
    2d20:	8e a5       	lds	r24, 0x6e
    2d22:	9f a5       	lds	r25, 0x6f
    2d24:	a8 a9       	sts	0x48, r26
    2d26:	b9 a9       	sts	0x49, r27
    2d28:	00 97       	sbiw	r24, 0x00	; 0
    2d2a:	a1 05       	cpc	r26, r1
    2d2c:	b1 05       	cpc	r27, r1
    2d2e:	09 f0       	breq	.+2      	; 0x2d32 <sMO_runCycle+0x1ae8>
    2d30:	48 c0       	rjmp	.+144    	; 0x2dc2 <sMO_runCycle+0x1b78>
		/* Default exit sequence for state ConfirmRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2d32:	89 81       	ldd	r24, Y+1	; 0x01
    2d34:	80 32       	cpi	r24, 0x20	; 32
    2d36:	89 f0       	breq	.+34     	; 0x2d5a <sMO_runCycle+0x1b10>
    2d38:	81 32       	cpi	r24, 0x21	; 33
    2d3a:	18 f4       	brcc	.+6      	; 0x2d42 <sMO_runCycle+0x1af8>
    2d3c:	8f 31       	cpi	r24, 0x1F	; 31
    2d3e:	29 f5       	brne	.+74     	; 0x2d8a <sMO_runCycle+0x1b40>
    2d40:	05 c0       	rjmp	.+10     	; 0x2d4c <sMO_runCycle+0x1b02>
    2d42:	81 32       	cpi	r24, 0x21	; 33
    2d44:	a9 f0       	breq	.+42     	; 0x2d70 <sMO_runCycle+0x1b26>
    2d46:	82 32       	cpi	r24, 0x22	; 34
    2d48:	01 f5       	brne	.+64     	; 0x2d8a <sMO_runCycle+0x1b40>
    2d4a:	19 c0       	rjmp	.+50     	; 0x2d7e <sMO_runCycle+0x1b34>
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation : {
				/* Default exit sequence for state RequestConfirmation */
				handle->stateConfVector[1] = SMO_last_state;
    2d4c:	89 e2       	ldi	r24, 0x29	; 41
    2d4e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	9b 83       	std	Y+3, r25	; 0x03
    2d56:	8a 83       	std	Y+2, r24	; 0x02
    2d58:	18 c0       	rjmp	.+48     	; 0x2d8a <sMO_runCycle+0x1b40>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_Confirm : {
				/* Default exit sequence for state Confirm */
				handle->stateConfVector[1] = SMO_last_state;
    2d5a:	89 e2       	ldi	r24, 0x29	; 41
    2d5c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2d5e:	81 e0       	ldi	r24, 0x01	; 1
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	9b 83       	std	Y+3, r25	; 0x03
    2d64:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'Confirm'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Confirm_time_event_0_raised) );		
    2d66:	ce 01       	movw	r24, r28
    2d68:	ca 96       	adiw	r24, 0x3a	; 58
    2d6a:	0e 94 cf 03 	call	0x79e	; 0x79e <sMO_unsetTimer>
    2d6e:	0d c0       	rjmp	.+26     	; 0x2d8a <sMO_runCycle+0x1b40>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress : {
				/* Default exit sequence for state CheckKeyPress */
				handle->stateConfVector[1] = SMO_last_state;
    2d70:	89 e2       	ldi	r24, 0x29	; 41
    2d72:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	9b 83       	std	Y+3, r25	; 0x03
    2d7a:	8a 83       	std	Y+2, r24	; 0x02
    2d7c:	06 c0       	rjmp	.+12     	; 0x2d8a <sMO_runCycle+0x1b40>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2d7e:	89 e2       	ldi	r24, 0x29	; 41
    2d80:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2d82:	81 e0       	ldi	r24, 0x01	; 1
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	9b 83       	std	Y+3, r25	; 0x03
    2d88:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    2d8a:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    2d8e:	88 e0       	ldi	r24, 0x08	; 8
    2d90:	92 e0       	ldi	r25, 0x02	; 2
    2d92:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    2d96:	87 e1       	ldi	r24, 0x17	; 23
    2d98:	92 e0       	ldi	r25, 0x02	; 2
    2d9a:	40 e0       	ldi	r20, 0x00	; 0
    2d9c:	50 e0       	ldi	r21, 0x00	; 0
    2d9e:	ba 01       	movw	r22, r20
    2da0:	01 e0       	ldi	r16, 0x01	; 1
    2da2:	10 e0       	ldi	r17, 0x00	; 0
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    2dac:	1e a6       	lds	r17, 0xbe
    2dae:	1f a6       	lds	r17, 0xbf
    2db0:	18 aa       	sts	0x98, r17
    2db2:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    2db4:	85 e0       	ldi	r24, 0x05	; 5
    2db6:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	9b 83       	std	Y+3, r25	; 0x03
    2dbe:	8a 83       	std	Y+2, r24	; 0x02
    2dc0:	00 c3       	rjmp	.+1536   	; 0x33c2 <sMO_runCycle+0x2178>
	}  else {
		if (handle->timeEvents.Confirm_time_event_0_raised) { 
    2dc2:	8a ad       	sts	0x6a, r24
    2dc4:	88 23       	and	r24, r24
    2dc6:	09 f4       	brne	.+2      	; 0x2dca <sMO_runCycle+0x1b80>
    2dc8:	da c2       	rjmp	.+1460   	; 0x337e <sMO_runCycle+0x2134>
			/* Default exit sequence for state Confirm */
			handle->stateConfVector[1] = SMO_last_state;
    2dca:	89 e2       	ldi	r24, 0x29	; 41
    2dcc:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    2dce:	01 e0       	ldi	r16, 0x01	; 1
    2dd0:	10 e0       	ldi	r17, 0x00	; 0
    2dd2:	1b 83       	std	Y+3, r17	; 0x03
    2dd4:	0a 83       	std	Y+2, r16	; 0x02
			/* Exit action for state 'Confirm'. */
			sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Confirm_time_event_0_raised) );		
    2dd6:	ce 01       	movw	r24, r28
    2dd8:	ca 96       	adiw	r24, 0x3a	; 58
    2dda:	0e 94 cf 03 	call	0x79e	; 0x79e <sMO_unsetTimer>
			/* Default enter sequence for state CheckKeyPress */
			/* Entry action for state 'CheckKeyPress'. */
			handle->ifaceKEYPAD.lastkey = 0;
    2dde:	18 86       	std	Y+8, r1	; 0x08
    2de0:	19 86       	std	Y+9, r1	; 0x09
    2de2:	1a 86       	std	Y+10, r1	; 0x0a
    2de4:	1b 86       	std	Y+11, r1	; 0x0b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress;
    2de6:	81 e2       	ldi	r24, 0x21	; 33
    2de8:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    2dea:	1b 83       	std	Y+3, r17	; 0x03
    2dec:	0a 83       	std	Y+2, r16	; 0x02
    2dee:	e9 c2       	rjmp	.+1490   	; 0x33c2 <sMO_runCycle+0x2178>
}

/* The reactions of state CheckKeyPress. */
static void sMO_react_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress(SMO* handle) {
	/* The reactions of state CheckKeyPress. */
	if (handle->iface.menuId == 0) { 
    2df0:	8e a5       	lds	r24, 0x6e
    2df2:	9f a5       	lds	r25, 0x6f
    2df4:	a8 a9       	sts	0x48, r26
    2df6:	b9 a9       	sts	0x49, r27
    2df8:	00 97       	sbiw	r24, 0x00	; 0
    2dfa:	a1 05       	cpc	r26, r1
    2dfc:	b1 05       	cpc	r27, r1
    2dfe:	09 f0       	breq	.+2      	; 0x2e02 <sMO_runCycle+0x1bb8>
    2e00:	48 c0       	rjmp	.+144    	; 0x2e92 <sMO_runCycle+0x1c48>
		/* Default exit sequence for state ConfirmRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2e02:	89 81       	ldd	r24, Y+1	; 0x01
    2e04:	80 32       	cpi	r24, 0x20	; 32
    2e06:	89 f0       	breq	.+34     	; 0x2e2a <sMO_runCycle+0x1be0>
    2e08:	81 32       	cpi	r24, 0x21	; 33
    2e0a:	18 f4       	brcc	.+6      	; 0x2e12 <sMO_runCycle+0x1bc8>
    2e0c:	8f 31       	cpi	r24, 0x1F	; 31
    2e0e:	29 f5       	brne	.+74     	; 0x2e5a <sMO_runCycle+0x1c10>
    2e10:	05 c0       	rjmp	.+10     	; 0x2e1c <sMO_runCycle+0x1bd2>
    2e12:	81 32       	cpi	r24, 0x21	; 33
    2e14:	a9 f0       	breq	.+42     	; 0x2e40 <sMO_runCycle+0x1bf6>
    2e16:	82 32       	cpi	r24, 0x22	; 34
    2e18:	01 f5       	brne	.+64     	; 0x2e5a <sMO_runCycle+0x1c10>
    2e1a:	19 c0       	rjmp	.+50     	; 0x2e4e <sMO_runCycle+0x1c04>
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation : {
				/* Default exit sequence for state RequestConfirmation */
				handle->stateConfVector[1] = SMO_last_state;
    2e1c:	89 e2       	ldi	r24, 0x29	; 41
    2e1e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	9b 83       	std	Y+3, r25	; 0x03
    2e26:	8a 83       	std	Y+2, r24	; 0x02
    2e28:	18 c0       	rjmp	.+48     	; 0x2e5a <sMO_runCycle+0x1c10>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_Confirm : {
				/* Default exit sequence for state Confirm */
				handle->stateConfVector[1] = SMO_last_state;
    2e2a:	89 e2       	ldi	r24, 0x29	; 41
    2e2c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	9b 83       	std	Y+3, r25	; 0x03
    2e34:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'Confirm'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Confirm_time_event_0_raised) );		
    2e36:	ce 01       	movw	r24, r28
    2e38:	ca 96       	adiw	r24, 0x3a	; 58
    2e3a:	0e 94 cf 03 	call	0x79e	; 0x79e <sMO_unsetTimer>
    2e3e:	0d c0       	rjmp	.+26     	; 0x2e5a <sMO_runCycle+0x1c10>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress : {
				/* Default exit sequence for state CheckKeyPress */
				handle->stateConfVector[1] = SMO_last_state;
    2e40:	89 e2       	ldi	r24, 0x29	; 41
    2e42:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	9b 83       	std	Y+3, r25	; 0x03
    2e4a:	8a 83       	std	Y+2, r24	; 0x02
    2e4c:	06 c0       	rjmp	.+12     	; 0x2e5a <sMO_runCycle+0x1c10>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2e4e:	89 e2       	ldi	r24, 0x29	; 41
    2e50:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2e52:	81 e0       	ldi	r24, 0x01	; 1
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	9b 83       	std	Y+3, r25	; 0x03
    2e58:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    2e5a:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    2e5e:	88 e0       	ldi	r24, 0x08	; 8
    2e60:	92 e0       	ldi	r25, 0x02	; 2
    2e62:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    2e66:	87 e1       	ldi	r24, 0x17	; 23
    2e68:	92 e0       	ldi	r25, 0x02	; 2
    2e6a:	40 e0       	ldi	r20, 0x00	; 0
    2e6c:	50 e0       	ldi	r21, 0x00	; 0
    2e6e:	ba 01       	movw	r22, r20
    2e70:	01 e0       	ldi	r16, 0x01	; 1
    2e72:	10 e0       	ldi	r17, 0x00	; 0
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    2e7c:	1e a6       	lds	r17, 0xbe
    2e7e:	1f a6       	lds	r17, 0xbf
    2e80:	18 aa       	sts	0x98, r17
    2e82:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    2e84:	85 e0       	ldi	r24, 0x05	; 5
    2e86:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2e88:	81 e0       	ldi	r24, 0x01	; 1
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	9b 83       	std	Y+3, r25	; 0x03
    2e8e:	8a 83       	std	Y+2, r24	; 0x02
    2e90:	98 c2       	rjmp	.+1328   	; 0x33c2 <sMO_runCycle+0x2178>
	}  else {
		if (handle->ifaceKEYPAD.lastkey == 12 && handle->ifaceKEYPAD.key_pressed_raised) { 
    2e92:	88 85       	ldd	r24, Y+8	; 0x08
    2e94:	99 85       	ldd	r25, Y+9	; 0x09
    2e96:	aa 85       	ldd	r26, Y+10	; 0x0a
    2e98:	bb 85       	ldd	r27, Y+11	; 0x0b
    2e9a:	8c 30       	cpi	r24, 0x0C	; 12
    2e9c:	91 05       	cpc	r25, r1
    2e9e:	a1 05       	cpc	r26, r1
    2ea0:	b1 05       	cpc	r27, r1
    2ea2:	e9 f4       	brne	.+58     	; 0x2ede <sMO_runCycle+0x1c94>
    2ea4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea6:	88 23       	and	r24, r24
    2ea8:	21 f1       	breq	.+72     	; 0x2ef2 <sMO_runCycle+0x1ca8>
			/* Default exit sequence for state CheckKeyPress */
			handle->stateConfVector[1] = SMO_last_state;
    2eaa:	89 e2       	ldi	r24, 0x29	; 41
    2eac:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    2eae:	01 e0       	ldi	r16, 0x01	; 1
    2eb0:	10 e0       	ldi	r17, 0x00	; 0
    2eb2:	1b 83       	std	Y+3, r17	; 0x03
    2eb4:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state Confirm */
			/* Entry action for state 'Confirm'. */
			sMO_setTimer( (sc_eventid) &(handle->timeEvents.Confirm_time_event_0_raised) , 3 * 1000, bool_false);
    2eb6:	ce 01       	movw	r24, r28
    2eb8:	ca 96       	adiw	r24, 0x3a	; 58
    2eba:	48 eb       	ldi	r20, 0xB8	; 184
    2ebc:	5b e0       	ldi	r21, 0x0B	; 11
    2ebe:	60 e0       	ldi	r22, 0x00	; 0
    2ec0:	70 e0       	ldi	r23, 0x00	; 0
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	0e 94 cc 03 	call	0x798	; 0x798 <sMO_setTimer>
			sMOIfaceLCD_clear();
    2ec8:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
			sMOIfaceLCD_writeString("Sending");
    2ecc:	80 e8       	ldi	r24, 0x80	; 128
    2ece:	92 e0       	ldi	r25, 0x02	; 2
    2ed0:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_Confirm;
    2ed4:	80 e2       	ldi	r24, 0x20	; 32
    2ed6:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    2ed8:	1b 83       	std	Y+3, r17	; 0x03
    2eda:	0a 83       	std	Y+2, r16	; 0x02
    2edc:	72 c2       	rjmp	.+1252   	; 0x33c2 <sMO_runCycle+0x2178>
		}  else {
			if (handle->ifaceKEYPAD.lastkey == 12 || handle->ifaceKEYPAD.lastkey == 11 && handle->ifaceKEYPAD.key_pressed_raised) { 
    2ede:	8b 30       	cpi	r24, 0x0B	; 11
    2ee0:	91 05       	cpc	r25, r1
    2ee2:	a1 05       	cpc	r26, r1
    2ee4:	b1 05       	cpc	r27, r1
    2ee6:	09 f0       	breq	.+2      	; 0x2eea <sMO_runCycle+0x1ca0>
    2ee8:	4a c2       	rjmp	.+1172   	; 0x337e <sMO_runCycle+0x2134>
    2eea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eec:	88 23       	and	r24, r24
    2eee:	09 f4       	brne	.+2      	; 0x2ef2 <sMO_runCycle+0x1ca8>
    2ef0:	46 c2       	rjmp	.+1164   	; 0x337e <sMO_runCycle+0x2134>
				/* Default exit sequence for state CheckKeyPress */
				handle->stateConfVector[1] = SMO_last_state;
				handle->stateConfVectorPosition = 1;
    2ef2:	1b 83       	std	Y+3, r17	; 0x03
    2ef4:	0a 83       	std	Y+2, r16	; 0x02
				handle->iface.menuId = 0;
    2ef6:	1e a6       	lds	r17, 0xbe
    2ef8:	1f a6       	lds	r17, 0xbf
    2efa:	18 aa       	sts	0x98, r17
    2efc:	19 aa       	sts	0x99, r17
				/* Default enter sequence for state null */
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_;
    2efe:	92 e2       	ldi	r25, 0x22	; 34
    2f00:	99 83       	std	Y+1, r25	; 0x01
    2f02:	3d c2       	rjmp	.+1146   	; 0x337e <sMO_runCycle+0x2134>
}

/* The reactions of state null. */
static void sMO_react_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_0(SMO* handle) {
	/* The reactions of state null. */
	if (handle->iface.menuId == 0) { 
    2f04:	8e a5       	lds	r24, 0x6e
    2f06:	9f a5       	lds	r25, 0x6f
    2f08:	a8 a9       	sts	0x48, r26
    2f0a:	b9 a9       	sts	0x49, r27
    2f0c:	00 97       	sbiw	r24, 0x00	; 0
    2f0e:	a1 05       	cpc	r26, r1
    2f10:	b1 05       	cpc	r27, r1
    2f12:	09 f0       	breq	.+2      	; 0x2f16 <sMO_runCycle+0x1ccc>
    2f14:	34 c2       	rjmp	.+1128   	; 0x337e <sMO_runCycle+0x2134>
		/* Default exit sequence for state ConfirmRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2f16:	89 81       	ldd	r24, Y+1	; 0x01
    2f18:	80 32       	cpi	r24, 0x20	; 32
    2f1a:	89 f0       	breq	.+34     	; 0x2f3e <sMO_runCycle+0x1cf4>
    2f1c:	81 32       	cpi	r24, 0x21	; 33
    2f1e:	18 f4       	brcc	.+6      	; 0x2f26 <sMO_runCycle+0x1cdc>
    2f20:	8f 31       	cpi	r24, 0x1F	; 31
    2f22:	29 f5       	brne	.+74     	; 0x2f6e <sMO_runCycle+0x1d24>
    2f24:	05 c0       	rjmp	.+10     	; 0x2f30 <sMO_runCycle+0x1ce6>
    2f26:	81 32       	cpi	r24, 0x21	; 33
    2f28:	a9 f0       	breq	.+42     	; 0x2f54 <sMO_runCycle+0x1d0a>
    2f2a:	82 32       	cpi	r24, 0x22	; 34
    2f2c:	01 f5       	brne	.+64     	; 0x2f6e <sMO_runCycle+0x1d24>
    2f2e:	19 c0       	rjmp	.+50     	; 0x2f62 <sMO_runCycle+0x1d18>
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation : {
				/* Default exit sequence for state RequestConfirmation */
				handle->stateConfVector[1] = SMO_last_state;
    2f30:	89 e2       	ldi	r24, 0x29	; 41
    2f32:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	9b 83       	std	Y+3, r25	; 0x03
    2f3a:	8a 83       	std	Y+2, r24	; 0x02
    2f3c:	18 c0       	rjmp	.+48     	; 0x2f6e <sMO_runCycle+0x1d24>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_Confirm : {
				/* Default exit sequence for state Confirm */
				handle->stateConfVector[1] = SMO_last_state;
    2f3e:	89 e2       	ldi	r24, 0x29	; 41
    2f40:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	9b 83       	std	Y+3, r25	; 0x03
    2f48:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'Confirm'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.Confirm_time_event_0_raised) );		
    2f4a:	ce 01       	movw	r24, r28
    2f4c:	ca 96       	adiw	r24, 0x3a	; 58
    2f4e:	0e 94 cf 03 	call	0x79e	; 0x79e <sMO_unsetTimer>
    2f52:	0d c0       	rjmp	.+26     	; 0x2f6e <sMO_runCycle+0x1d24>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress : {
				/* Default exit sequence for state CheckKeyPress */
				handle->stateConfVector[1] = SMO_last_state;
    2f54:	89 e2       	ldi	r24, 0x29	; 41
    2f56:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	9b 83       	std	Y+3, r25	; 0x03
    2f5e:	8a 83       	std	Y+2, r24	; 0x02
    2f60:	06 c0       	rjmp	.+12     	; 0x2f6e <sMO_runCycle+0x1d24>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2f62:	89 e2       	ldi	r24, 0x29	; 41
    2f64:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2f66:	81 e0       	ldi	r24, 0x01	; 1
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	9b 83       	std	Y+3, r25	; 0x03
    2f6c:	8a 83       	std	Y+2, r24	; 0x02
			}
			default: break;
		}
		/* Default enter sequence for state ShowMenu */
		/* Entry action for state 'ShowMenu'. */
		sMOIfaceLCD_clear();
    2f6e:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("A-Order  B-Del");
    2f72:	88 e0       	ldi	r24, 0x08	; 8
    2f74:	92 e0       	ldi	r25, 0x02	; 2
    2f76:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("C-Help  D-Pay", 0, 1);
    2f7a:	87 e1       	ldi	r24, 0x17	; 23
    2f7c:	92 e0       	ldi	r25, 0x02	; 2
    2f7e:	40 e0       	ldi	r20, 0x00	; 0
    2f80:	50 e0       	ldi	r21, 0x00	; 0
    2f82:	ba 01       	movw	r22, r20
    2f84:	01 e0       	ldi	r16, 0x01	; 1
    2f86:	10 e0       	ldi	r17, 0x00	; 0
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
		handle->iface.menuId = 0;
    2f90:	1e a6       	lds	r17, 0xbe
    2f92:	1f a6       	lds	r17, 0xbf
    2f94:	18 aa       	sts	0x98, r17
    2f96:	19 aa       	sts	0x99, r17
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ShowMenu;
    2f98:	85 e0       	ldi	r24, 0x05	; 5
    2f9a:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	9b 83       	std	Y+3, r25	; 0x03
    2fa2:	8a 83       	std	Y+2, r24	; 0x02
    2fa4:	0e c2       	rjmp	.+1052   	; 0x33c2 <sMO_runCycle+0x2178>
}

/* The reactions of state Send. */
static void sMO_react_main_region_on_r1_Running_running_main_SendRequest_r1_Send(SMO* handle) {
	/* The reactions of state Send. */
	if (handle->ifaceRF.result == bool_true) { 
    2fa6:	8f 89       	ldd	r24, Y+23	; 0x17
    2fa8:	88 23       	and	r24, r24
    2faa:	09 f4       	brne	.+2      	; 0x2fae <sMO_runCycle+0x1d64>
    2fac:	4d c0       	rjmp	.+154    	; 0x3048 <sMO_runCycle+0x1dfe>
		/* Default exit sequence for state SendRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    2fae:	89 81       	ldd	r24, Y+1	; 0x01
    2fb0:	86 32       	cpi	r24, 0x26	; 38
    2fb2:	d1 f0       	breq	.+52     	; 0x2fe8 <sMO_runCycle+0x1d9e>
    2fb4:	87 32       	cpi	r24, 0x27	; 39
    2fb6:	28 f4       	brcc	.+10     	; 0x2fc2 <sMO_runCycle+0x1d78>
    2fb8:	84 32       	cpi	r24, 0x24	; 36
    2fba:	41 f0       	breq	.+16     	; 0x2fcc <sMO_runCycle+0x1d82>
    2fbc:	85 32       	cpi	r24, 0x25	; 37
    2fbe:	61 f5       	brne	.+88     	; 0x3018 <sMO_runCycle+0x1dce>
    2fc0:	0c c0       	rjmp	.+24     	; 0x2fda <sMO_runCycle+0x1d90>
    2fc2:	87 32       	cpi	r24, 0x27	; 39
    2fc4:	c1 f0       	breq	.+48     	; 0x2ff6 <sMO_runCycle+0x1dac>
    2fc6:	88 32       	cpi	r24, 0x28	; 40
    2fc8:	39 f5       	brne	.+78     	; 0x3018 <sMO_runCycle+0x1dce>
    2fca:	20 c0       	rjmp	.+64     	; 0x300c <sMO_runCycle+0x1dc2>
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    2fcc:	89 e2       	ldi	r24, 0x29	; 41
    2fce:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	9b 83       	std	Y+3, r25	; 0x03
    2fd6:	8a 83       	std	Y+2, r24	; 0x02
    2fd8:	1f c0       	rjmp	.+62     	; 0x3018 <sMO_runCycle+0x1dce>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    2fda:	89 e2       	ldi	r24, 0x29	; 41
    2fdc:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2fde:	81 e0       	ldi	r24, 0x01	; 1
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	9b 83       	std	Y+3, r25	; 0x03
    2fe4:	8a 83       	std	Y+2, r24	; 0x02
    2fe6:	18 c0       	rjmp	.+48     	; 0x3018 <sMO_runCycle+0x1dce>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    2fe8:	89 e2       	ldi	r24, 0x29	; 41
    2fea:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	9b 83       	std	Y+3, r25	; 0x03
    2ff2:	8a 83       	std	Y+2, r24	; 0x02
    2ff4:	11 c0       	rjmp	.+34     	; 0x3018 <sMO_runCycle+0x1dce>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2 : {
				/* Default exit sequence for state SendFail2 */
				handle->stateConfVector[1] = SMO_last_state;
    2ff6:	89 e2       	ldi	r24, 0x29	; 41
    2ff8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    2ffa:	81 e0       	ldi	r24, 0x01	; 1
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	9b 83       	std	Y+3, r25	; 0x03
    3000:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail2'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail2_time_event_0_raised) );		
    3002:	ce 01       	movw	r24, r28
    3004:	cb 96       	adiw	r24, 0x3b	; 59
    3006:	0e 94 cf 03 	call	0x79e	; 0x79e <sMO_unsetTimer>
    300a:	06 c0       	rjmp	.+12     	; 0x3018 <sMO_runCycle+0x1dce>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    300c:	89 e2       	ldi	r24, 0x29	; 41
    300e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	9b 83       	std	Y+3, r25	; 0x03
    3016:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state ConfirmRequest */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state RequestConfirmation */
		/* Entry action for state 'RequestConfirmation'. */
		sMOIfaceLCD_clear();
    3018:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Proceed?");
    301c:	8b e6       	ldi	r24, 0x6B	; 107
    301e:	92 e0       	ldi	r25, 0x02	; 2
    3020:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("*-No  #-Yes", 0, 1);
    3024:	84 e7       	ldi	r24, 0x74	; 116
    3026:	92 e0       	ldi	r25, 0x02	; 2
    3028:	40 e0       	ldi	r20, 0x00	; 0
    302a:	50 e0       	ldi	r21, 0x00	; 0
    302c:	ba 01       	movw	r22, r20
    302e:	01 e0       	ldi	r16, 0x01	; 1
    3030:	10 e0       	ldi	r17, 0x00	; 0
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation;
    303a:	8f e1       	ldi	r24, 0x1F	; 31
    303c:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    303e:	81 e0       	ldi	r24, 0x01	; 1
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	9b 83       	std	Y+3, r25	; 0x03
    3044:	8a 83       	std	Y+2, r24	; 0x02
    3046:	bd c1       	rjmp	.+890    	; 0x33c2 <sMO_runCycle+0x2178>
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Check;
			handle->stateConfVectorPosition = 1;
		}  else {
			if (handle->ifaceRF.result == bool_false) { 
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    3048:	89 e2       	ldi	r24, 0x29	; 41
    304a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    304c:	01 e0       	ldi	r16, 0x01	; 1
    304e:	10 e0       	ldi	r17, 0x00	; 0
    3050:	1b 83       	std	Y+3, r17	; 0x03
    3052:	0a 83       	std	Y+2, r16	; 0x02
				/* Default enter sequence for state SendFail2 */
				/* Entry action for state 'SendFail2'. */
				sMO_setTimer( (sc_eventid) &(handle->timeEvents.SendFail2_time_event_0_raised) , 2 * 1000, bool_false);
    3054:	ce 01       	movw	r24, r28
    3056:	cb 96       	adiw	r24, 0x3b	; 59
    3058:	40 ed       	ldi	r20, 0xD0	; 208
    305a:	57 e0       	ldi	r21, 0x07	; 7
    305c:	60 e0       	ldi	r22, 0x00	; 0
    305e:	70 e0       	ldi	r23, 0x00	; 0
    3060:	20 e0       	ldi	r18, 0x00	; 0
    3062:	0e 94 cc 03 	call	0x798	; 0x798 <sMO_setTimer>
				sMOIfaceLCD_clear();
    3066:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
				sMOIfaceLCD_writeString("Send fail");
    306a:	88 e8       	ldi	r24, 0x88	; 136
    306c:	92 e0       	ldi	r25, 0x02	; 2
    306e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
				handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2;
    3072:	87 e2       	ldi	r24, 0x27	; 39
    3074:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    3076:	1b 83       	std	Y+3, r17	; 0x03
    3078:	0a 83       	std	Y+2, r16	; 0x02
    307a:	a3 c1       	rjmp	.+838    	; 0x33c2 <sMO_runCycle+0x2178>
}

/* The reactions of state Check. */
static void sMO_react_main_region_on_r1_Running_running_main_SendRequest_r1_Check(SMO* handle) {
	/* The reactions of state Check. */
	if (handle->ifaceRF.result == bool_true) { 
    307c:	8f 89       	ldd	r24, Y+23	; 0x17
    307e:	88 23       	and	r24, r24
    3080:	09 f4       	brne	.+2      	; 0x3084 <sMO_runCycle+0x1e3a>
    3082:	4d c0       	rjmp	.+154    	; 0x311e <sMO_runCycle+0x1ed4>
		/* Default exit sequence for state SendRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    3084:	89 81       	ldd	r24, Y+1	; 0x01
    3086:	86 32       	cpi	r24, 0x26	; 38
    3088:	d1 f0       	breq	.+52     	; 0x30be <sMO_runCycle+0x1e74>
    308a:	87 32       	cpi	r24, 0x27	; 39
    308c:	28 f4       	brcc	.+10     	; 0x3098 <sMO_runCycle+0x1e4e>
    308e:	84 32       	cpi	r24, 0x24	; 36
    3090:	41 f0       	breq	.+16     	; 0x30a2 <sMO_runCycle+0x1e58>
    3092:	85 32       	cpi	r24, 0x25	; 37
    3094:	61 f5       	brne	.+88     	; 0x30ee <sMO_runCycle+0x1ea4>
    3096:	0c c0       	rjmp	.+24     	; 0x30b0 <sMO_runCycle+0x1e66>
    3098:	87 32       	cpi	r24, 0x27	; 39
    309a:	c1 f0       	breq	.+48     	; 0x30cc <sMO_runCycle+0x1e82>
    309c:	88 32       	cpi	r24, 0x28	; 40
    309e:	39 f5       	brne	.+78     	; 0x30ee <sMO_runCycle+0x1ea4>
    30a0:	20 c0       	rjmp	.+64     	; 0x30e2 <sMO_runCycle+0x1e98>
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    30a2:	89 e2       	ldi	r24, 0x29	; 41
    30a4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    30a6:	81 e0       	ldi	r24, 0x01	; 1
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	9b 83       	std	Y+3, r25	; 0x03
    30ac:	8a 83       	std	Y+2, r24	; 0x02
    30ae:	1f c0       	rjmp	.+62     	; 0x30ee <sMO_runCycle+0x1ea4>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    30b0:	89 e2       	ldi	r24, 0x29	; 41
    30b2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    30b4:	81 e0       	ldi	r24, 0x01	; 1
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	9b 83       	std	Y+3, r25	; 0x03
    30ba:	8a 83       	std	Y+2, r24	; 0x02
    30bc:	18 c0       	rjmp	.+48     	; 0x30ee <sMO_runCycle+0x1ea4>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    30be:	89 e2       	ldi	r24, 0x29	; 41
    30c0:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    30c2:	81 e0       	ldi	r24, 0x01	; 1
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	9b 83       	std	Y+3, r25	; 0x03
    30c8:	8a 83       	std	Y+2, r24	; 0x02
    30ca:	11 c0       	rjmp	.+34     	; 0x30ee <sMO_runCycle+0x1ea4>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2 : {
				/* Default exit sequence for state SendFail2 */
				handle->stateConfVector[1] = SMO_last_state;
    30cc:	89 e2       	ldi	r24, 0x29	; 41
    30ce:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	9b 83       	std	Y+3, r25	; 0x03
    30d6:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail2'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail2_time_event_0_raised) );		
    30d8:	ce 01       	movw	r24, r28
    30da:	cb 96       	adiw	r24, 0x3b	; 59
    30dc:	0e 94 cf 03 	call	0x79e	; 0x79e <sMO_unsetTimer>
    30e0:	06 c0       	rjmp	.+12     	; 0x30ee <sMO_runCycle+0x1ea4>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    30e2:	89 e2       	ldi	r24, 0x29	; 41
    30e4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	9b 83       	std	Y+3, r25	; 0x03
    30ec:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state ConfirmRequest */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state RequestConfirmation */
		/* Entry action for state 'RequestConfirmation'. */
		sMOIfaceLCD_clear();
    30ee:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Proceed?");
    30f2:	8b e6       	ldi	r24, 0x6B	; 107
    30f4:	92 e0       	ldi	r25, 0x02	; 2
    30f6:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("*-No  #-Yes", 0, 1);
    30fa:	84 e7       	ldi	r24, 0x74	; 116
    30fc:	92 e0       	ldi	r25, 0x02	; 2
    30fe:	40 e0       	ldi	r20, 0x00	; 0
    3100:	50 e0       	ldi	r21, 0x00	; 0
    3102:	ba 01       	movw	r22, r20
    3104:	01 e0       	ldi	r16, 0x01	; 1
    3106:	10 e0       	ldi	r17, 0x00	; 0
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation;
    3110:	8f e1       	ldi	r24, 0x1F	; 31
    3112:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	9b 83       	std	Y+3, r25	; 0x03
    311a:	8a 83       	std	Y+2, r24	; 0x02
    311c:	52 c1       	rjmp	.+676    	; 0x33c2 <sMO_runCycle+0x2178>
	}  else {
		if (handle->ifaceRF.result == bool_false) { 
			/* Default exit sequence for state Check */
			handle->stateConfVector[1] = SMO_last_state;
    311e:	89 e2       	ldi	r24, 0x29	; 41
    3120:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    3122:	01 e0       	ldi	r16, 0x01	; 1
    3124:	10 e0       	ldi	r17, 0x00	; 0
    3126:	1b 83       	std	Y+3, r17	; 0x03
    3128:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state Send */
			/* Entry action for state 'Send'. */
			handle->ifaceRF.retry += 1;
    312a:	88 8d       	ldd	r24, Y+24	; 0x18
    312c:	99 8d       	ldd	r25, Y+25	; 0x19
    312e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3130:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3132:	01 96       	adiw	r24, 0x01	; 1
    3134:	a1 1d       	adc	r26, r1
    3136:	b1 1d       	adc	r27, r1
    3138:	88 8f       	std	Y+24, r24	; 0x18
    313a:	99 8f       	std	Y+25, r25	; 0x19
    313c:	aa 8f       	std	Y+26, r26	; 0x1a
    313e:	bb 8f       	std	Y+27, r27	; 0x1b
			handle->ifaceRF.result = sMOIfaceRF_sendConf(handle->iface.menuId, handle->iface.tableId);
    3140:	6e a5       	lds	r22, 0x6e
    3142:	7f a5       	lds	r23, 0x6f
    3144:	88 a9       	sts	0x48, r24
    3146:	99 a9       	sts	0x49, r25
    3148:	2a a9       	sts	0x4a, r18
    314a:	3b a9       	sts	0x4b, r19
    314c:	4c a9       	sts	0x4c, r20
    314e:	5d a9       	sts	0x4d, r21
    3150:	0e 94 9f 03 	call	0x73e	; 0x73e <sMOIfaceRF_sendConf>
    3154:	8f 8b       	std	Y+23, r24	; 0x17
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Send;
    3156:	84 e2       	ldi	r24, 0x24	; 36
    3158:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    315a:	1b 83       	std	Y+3, r17	; 0x03
    315c:	0a 83       	std	Y+2, r16	; 0x02
    315e:	31 c1       	rjmp	.+610    	; 0x33c2 <sMO_runCycle+0x2178>
}

/* The reactions of state null. */
static void sMO_react_main_region_on_r1_Running_running_main_SendRequest_r1__final_0(SMO* handle) {
	/* The reactions of state null. */
	if (handle->ifaceRF.result == bool_true) { 
    3160:	8f 89       	ldd	r24, Y+23	; 0x17
    3162:	88 23       	and	r24, r24
    3164:	09 f4       	brne	.+2      	; 0x3168 <sMO_runCycle+0x1f1e>
    3166:	0b c1       	rjmp	.+534    	; 0x337e <sMO_runCycle+0x2134>
		/* Default exit sequence for state SendRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    3168:	89 81       	ldd	r24, Y+1	; 0x01
    316a:	86 32       	cpi	r24, 0x26	; 38
    316c:	d1 f0       	breq	.+52     	; 0x31a2 <sMO_runCycle+0x1f58>
    316e:	87 32       	cpi	r24, 0x27	; 39
    3170:	28 f4       	brcc	.+10     	; 0x317c <sMO_runCycle+0x1f32>
    3172:	84 32       	cpi	r24, 0x24	; 36
    3174:	41 f0       	breq	.+16     	; 0x3186 <sMO_runCycle+0x1f3c>
    3176:	85 32       	cpi	r24, 0x25	; 37
    3178:	61 f5       	brne	.+88     	; 0x31d2 <sMO_runCycle+0x1f88>
    317a:	0c c0       	rjmp	.+24     	; 0x3194 <sMO_runCycle+0x1f4a>
    317c:	87 32       	cpi	r24, 0x27	; 39
    317e:	c1 f0       	breq	.+48     	; 0x31b0 <sMO_runCycle+0x1f66>
    3180:	88 32       	cpi	r24, 0x28	; 40
    3182:	39 f5       	brne	.+78     	; 0x31d2 <sMO_runCycle+0x1f88>
    3184:	20 c0       	rjmp	.+64     	; 0x31c6 <sMO_runCycle+0x1f7c>
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    3186:	89 e2       	ldi	r24, 0x29	; 41
    3188:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    318a:	81 e0       	ldi	r24, 0x01	; 1
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	9b 83       	std	Y+3, r25	; 0x03
    3190:	8a 83       	std	Y+2, r24	; 0x02
    3192:	1f c0       	rjmp	.+62     	; 0x31d2 <sMO_runCycle+0x1f88>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    3194:	89 e2       	ldi	r24, 0x29	; 41
    3196:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    3198:	81 e0       	ldi	r24, 0x01	; 1
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	9b 83       	std	Y+3, r25	; 0x03
    319e:	8a 83       	std	Y+2, r24	; 0x02
    31a0:	18 c0       	rjmp	.+48     	; 0x31d2 <sMO_runCycle+0x1f88>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    31a2:	89 e2       	ldi	r24, 0x29	; 41
    31a4:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    31a6:	81 e0       	ldi	r24, 0x01	; 1
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	9b 83       	std	Y+3, r25	; 0x03
    31ac:	8a 83       	std	Y+2, r24	; 0x02
    31ae:	11 c0       	rjmp	.+34     	; 0x31d2 <sMO_runCycle+0x1f88>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2 : {
				/* Default exit sequence for state SendFail2 */
				handle->stateConfVector[1] = SMO_last_state;
    31b0:	89 e2       	ldi	r24, 0x29	; 41
    31b2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	9b 83       	std	Y+3, r25	; 0x03
    31ba:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail2'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail2_time_event_0_raised) );		
    31bc:	ce 01       	movw	r24, r28
    31be:	cb 96       	adiw	r24, 0x3b	; 59
    31c0:	0e 94 cf 03 	call	0x79e	; 0x79e <sMO_unsetTimer>
    31c4:	06 c0       	rjmp	.+12     	; 0x31d2 <sMO_runCycle+0x1f88>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    31c6:	89 e2       	ldi	r24, 0x29	; 41
    31c8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	9b 83       	std	Y+3, r25	; 0x03
    31d0:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state ConfirmRequest */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state RequestConfirmation */
		/* Entry action for state 'RequestConfirmation'. */
		sMOIfaceLCD_clear();
    31d2:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Proceed?");
    31d6:	8b e6       	ldi	r24, 0x6B	; 107
    31d8:	92 e0       	ldi	r25, 0x02	; 2
    31da:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("*-No  #-Yes", 0, 1);
    31de:	84 e7       	ldi	r24, 0x74	; 116
    31e0:	92 e0       	ldi	r25, 0x02	; 2
    31e2:	40 e0       	ldi	r20, 0x00	; 0
    31e4:	50 e0       	ldi	r21, 0x00	; 0
    31e6:	ba 01       	movw	r22, r20
    31e8:	01 e0       	ldi	r16, 0x01	; 1
    31ea:	10 e0       	ldi	r17, 0x00	; 0
    31ec:	20 e0       	ldi	r18, 0x00	; 0
    31ee:	30 e0       	ldi	r19, 0x00	; 0
    31f0:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation;
    31f4:	8f e1       	ldi	r24, 0x1F	; 31
    31f6:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    31f8:	81 e0       	ldi	r24, 0x01	; 1
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	9b 83       	std	Y+3, r25	; 0x03
    31fe:	8a 83       	std	Y+2, r24	; 0x02
    3200:	e0 c0       	rjmp	.+448    	; 0x33c2 <sMO_runCycle+0x2178>
}

/* The reactions of state SendFail2. */
static void sMO_react_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2(SMO* handle) {
	/* The reactions of state SendFail2. */
	if (handle->ifaceRF.result == bool_true) { 
    3202:	8f 89       	ldd	r24, Y+23	; 0x17
    3204:	88 23       	and	r24, r24
    3206:	09 f4       	brne	.+2      	; 0x320a <sMO_runCycle+0x1fc0>
    3208:	4d c0       	rjmp	.+154    	; 0x32a4 <sMO_runCycle+0x205a>
		/* Default exit sequence for state SendRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    320a:	89 81       	ldd	r24, Y+1	; 0x01
    320c:	86 32       	cpi	r24, 0x26	; 38
    320e:	d1 f0       	breq	.+52     	; 0x3244 <sMO_runCycle+0x1ffa>
    3210:	87 32       	cpi	r24, 0x27	; 39
    3212:	28 f4       	brcc	.+10     	; 0x321e <sMO_runCycle+0x1fd4>
    3214:	84 32       	cpi	r24, 0x24	; 36
    3216:	41 f0       	breq	.+16     	; 0x3228 <sMO_runCycle+0x1fde>
    3218:	85 32       	cpi	r24, 0x25	; 37
    321a:	61 f5       	brne	.+88     	; 0x3274 <sMO_runCycle+0x202a>
    321c:	0c c0       	rjmp	.+24     	; 0x3236 <sMO_runCycle+0x1fec>
    321e:	87 32       	cpi	r24, 0x27	; 39
    3220:	c1 f0       	breq	.+48     	; 0x3252 <sMO_runCycle+0x2008>
    3222:	88 32       	cpi	r24, 0x28	; 40
    3224:	39 f5       	brne	.+78     	; 0x3274 <sMO_runCycle+0x202a>
    3226:	20 c0       	rjmp	.+64     	; 0x3268 <sMO_runCycle+0x201e>
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    3228:	89 e2       	ldi	r24, 0x29	; 41
    322a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    322c:	81 e0       	ldi	r24, 0x01	; 1
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	9b 83       	std	Y+3, r25	; 0x03
    3232:	8a 83       	std	Y+2, r24	; 0x02
    3234:	1f c0       	rjmp	.+62     	; 0x3274 <sMO_runCycle+0x202a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    3236:	89 e2       	ldi	r24, 0x29	; 41
    3238:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	9b 83       	std	Y+3, r25	; 0x03
    3240:	8a 83       	std	Y+2, r24	; 0x02
    3242:	18 c0       	rjmp	.+48     	; 0x3274 <sMO_runCycle+0x202a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    3244:	89 e2       	ldi	r24, 0x29	; 41
    3246:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    3248:	81 e0       	ldi	r24, 0x01	; 1
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	9b 83       	std	Y+3, r25	; 0x03
    324e:	8a 83       	std	Y+2, r24	; 0x02
    3250:	11 c0       	rjmp	.+34     	; 0x3274 <sMO_runCycle+0x202a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2 : {
				/* Default exit sequence for state SendFail2 */
				handle->stateConfVector[1] = SMO_last_state;
    3252:	89 e2       	ldi	r24, 0x29	; 41
    3254:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	9b 83       	std	Y+3, r25	; 0x03
    325c:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail2'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail2_time_event_0_raised) );		
    325e:	ce 01       	movw	r24, r28
    3260:	cb 96       	adiw	r24, 0x3b	; 59
    3262:	0e 94 cf 03 	call	0x79e	; 0x79e <sMO_unsetTimer>
    3266:	06 c0       	rjmp	.+12     	; 0x3274 <sMO_runCycle+0x202a>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    3268:	89 e2       	ldi	r24, 0x29	; 41
    326a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    326c:	81 e0       	ldi	r24, 0x01	; 1
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	9b 83       	std	Y+3, r25	; 0x03
    3272:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state ConfirmRequest */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state RequestConfirmation */
		/* Entry action for state 'RequestConfirmation'. */
		sMOIfaceLCD_clear();
    3274:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Proceed?");
    3278:	8b e6       	ldi	r24, 0x6B	; 107
    327a:	92 e0       	ldi	r25, 0x02	; 2
    327c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("*-No  #-Yes", 0, 1);
    3280:	84 e7       	ldi	r24, 0x74	; 116
    3282:	92 e0       	ldi	r25, 0x02	; 2
    3284:	40 e0       	ldi	r20, 0x00	; 0
    3286:	50 e0       	ldi	r21, 0x00	; 0
    3288:	ba 01       	movw	r22, r20
    328a:	01 e0       	ldi	r16, 0x01	; 1
    328c:	10 e0       	ldi	r17, 0x00	; 0
    328e:	20 e0       	ldi	r18, 0x00	; 0
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation;
    3296:	8f e1       	ldi	r24, 0x1F	; 31
    3298:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    329a:	81 e0       	ldi	r24, 0x01	; 1
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	9b 83       	std	Y+3, r25	; 0x03
    32a0:	8a 83       	std	Y+2, r24	; 0x02
    32a2:	8f c0       	rjmp	.+286    	; 0x33c2 <sMO_runCycle+0x2178>
	}  else {
		if (handle->timeEvents.SendFail2_time_event_0_raised) { 
    32a4:	8b ad       	sts	0x6b, r24
    32a6:	88 23       	and	r24, r24
    32a8:	09 f4       	brne	.+2      	; 0x32ac <sMO_runCycle+0x2062>
    32aa:	69 c0       	rjmp	.+210    	; 0x337e <sMO_runCycle+0x2134>
			/* Default exit sequence for state SendFail2 */
			handle->stateConfVector[1] = SMO_last_state;
    32ac:	89 e2       	ldi	r24, 0x29	; 41
    32ae:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    32b0:	01 e0       	ldi	r16, 0x01	; 1
    32b2:	10 e0       	ldi	r17, 0x00	; 0
    32b4:	1b 83       	std	Y+3, r17	; 0x03
    32b6:	0a 83       	std	Y+2, r16	; 0x02
			/* Exit action for state 'SendFail2'. */
			sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail2_time_event_0_raised) );		
    32b8:	ce 01       	movw	r24, r28
    32ba:	cb 96       	adiw	r24, 0x3b	; 59
    32bc:	0e 94 cf 03 	call	0x79e	; 0x79e <sMO_unsetTimer>
			/* Default enter sequence for state ResetResult */
			/* Entry action for state 'ResetResult'. */
			handle->ifaceRF.result = bool_true;
    32c0:	81 e0       	ldi	r24, 0x01	; 1
    32c2:	8f 8b       	std	Y+23, r24	; 0x17
			handle->ifaceRF.retry = 0;
    32c4:	18 8e       	std	Y+24, r1	; 0x18
    32c6:	19 8e       	std	Y+25, r1	; 0x19
    32c8:	1a 8e       	std	Y+26, r1	; 0x1a
    32ca:	1b 8e       	std	Y+27, r1	; 0x1b
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult;
    32cc:	88 e2       	ldi	r24, 0x28	; 40
    32ce:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    32d0:	1b 83       	std	Y+3, r17	; 0x03
    32d2:	0a 83       	std	Y+2, r16	; 0x02
    32d4:	76 c0       	rjmp	.+236    	; 0x33c2 <sMO_runCycle+0x2178>
}

/* The reactions of state ResetResult. */
static void sMO_react_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult(SMO* handle) {
	/* The reactions of state ResetResult. */
	if (handle->ifaceRF.result == bool_true) { 
    32d6:	8f 89       	ldd	r24, Y+23	; 0x17
    32d8:	88 23       	and	r24, r24
    32da:	09 f4       	brne	.+2      	; 0x32de <sMO_runCycle+0x2094>
    32dc:	4d c0       	rjmp	.+154    	; 0x3378 <sMO_runCycle+0x212e>
		/* Default exit sequence for state SendRequest */
		/* Default exit sequence for region r1 */
		/* Handle exit of all possible states (of r1) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    32de:	89 81       	ldd	r24, Y+1	; 0x01
    32e0:	86 32       	cpi	r24, 0x26	; 38
    32e2:	d1 f0       	breq	.+52     	; 0x3318 <sMO_runCycle+0x20ce>
    32e4:	87 32       	cpi	r24, 0x27	; 39
    32e6:	28 f4       	brcc	.+10     	; 0x32f2 <sMO_runCycle+0x20a8>
    32e8:	84 32       	cpi	r24, 0x24	; 36
    32ea:	41 f0       	breq	.+16     	; 0x32fc <sMO_runCycle+0x20b2>
    32ec:	85 32       	cpi	r24, 0x25	; 37
    32ee:	61 f5       	brne	.+88     	; 0x3348 <sMO_runCycle+0x20fe>
    32f0:	0c c0       	rjmp	.+24     	; 0x330a <sMO_runCycle+0x20c0>
    32f2:	87 32       	cpi	r24, 0x27	; 39
    32f4:	c1 f0       	breq	.+48     	; 0x3326 <sMO_runCycle+0x20dc>
    32f6:	88 32       	cpi	r24, 0x28	; 40
    32f8:	39 f5       	brne	.+78     	; 0x3348 <sMO_runCycle+0x20fe>
    32fa:	20 c0       	rjmp	.+64     	; 0x333c <sMO_runCycle+0x20f2>
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Send : {
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMO_last_state;
    32fc:	89 e2       	ldi	r24, 0x29	; 41
    32fe:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    3300:	81 e0       	ldi	r24, 0x01	; 1
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	9b 83       	std	Y+3, r25	; 0x03
    3306:	8a 83       	std	Y+2, r24	; 0x02
    3308:	1f c0       	rjmp	.+62     	; 0x3348 <sMO_runCycle+0x20fe>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Check : {
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMO_last_state;
    330a:	89 e2       	ldi	r24, 0x29	; 41
    330c:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    330e:	81 e0       	ldi	r24, 0x01	; 1
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	9b 83       	std	Y+3, r25	; 0x03
    3314:	8a 83       	std	Y+2, r24	; 0x02
    3316:	18 c0       	rjmp	.+48     	; 0x3348 <sMO_runCycle+0x20fe>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_ : {
				/* Default exit sequence for final state. */
				handle->stateConfVector[1] = SMO_last_state;
    3318:	89 e2       	ldi	r24, 0x29	; 41
    331a:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	9b 83       	std	Y+3, r25	; 0x03
    3322:	8a 83       	std	Y+2, r24	; 0x02
    3324:	11 c0       	rjmp	.+34     	; 0x3348 <sMO_runCycle+0x20fe>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2 : {
				/* Default exit sequence for state SendFail2 */
				handle->stateConfVector[1] = SMO_last_state;
    3326:	89 e2       	ldi	r24, 0x29	; 41
    3328:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    332a:	81 e0       	ldi	r24, 0x01	; 1
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	9b 83       	std	Y+3, r25	; 0x03
    3330:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail2'. */
				sMO_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail2_time_event_0_raised) );		
    3332:	ce 01       	movw	r24, r28
    3334:	cb 96       	adiw	r24, 0x3b	; 59
    3336:	0e 94 cf 03 	call	0x79e	; 0x79e <sMO_unsetTimer>
    333a:	06 c0       	rjmp	.+12     	; 0x3348 <sMO_runCycle+0x20fe>
				break;
			}
			case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult : {
				/* Default exit sequence for state ResetResult */
				handle->stateConfVector[1] = SMO_last_state;
    333c:	89 e2       	ldi	r24, 0x29	; 41
    333e:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	9b 83       	std	Y+3, r25	; 0x03
    3346:	8a 83       	std	Y+2, r24	; 0x02
		/* Default enter sequence for state ConfirmRequest */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state RequestConfirmation */
		/* Entry action for state 'RequestConfirmation'. */
		sMOIfaceLCD_clear();
    3348:	0e 94 8f 02 	call	0x51e	; 0x51e <sMOIfaceLCD_clear>
		sMOIfaceLCD_writeString("Proceed?");
    334c:	8b e6       	ldi	r24, 0x6B	; 107
    334e:	92 e0       	ldi	r25, 0x02	; 2
    3350:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sMOIfaceLCD_writeString>
		sMOIfaceLCD_writeStringXY("*-No  #-Yes", 0, 1);
    3354:	84 e7       	ldi	r24, 0x74	; 116
    3356:	92 e0       	ldi	r25, 0x02	; 2
    3358:	40 e0       	ldi	r20, 0x00	; 0
    335a:	50 e0       	ldi	r21, 0x00	; 0
    335c:	ba 01       	movw	r22, r20
    335e:	01 e0       	ldi	r16, 0x01	; 1
    3360:	10 e0       	ldi	r17, 0x00	; 0
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	0e 94 5f 02 	call	0x4be	; 0x4be <sMOIfaceLCD_writeStringXY>
		handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation;
    336a:	8f e1       	ldi	r24, 0x1F	; 31
    336c:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    336e:	81 e0       	ldi	r24, 0x01	; 1
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	9b 83       	std	Y+3, r25	; 0x03
    3374:	8a 83       	std	Y+2, r24	; 0x02
    3376:	25 c0       	rjmp	.+74     	; 0x33c2 <sMO_runCycle+0x2178>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state ResetResult */
			handle->stateConfVector[1] = SMO_last_state;
			handle->stateConfVectorPosition = 1;
    3378:	1b 83       	std	Y+3, r17	; 0x03
    337a:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state null */
			handle->stateConfVector[1] = SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_;
    337c:	39 82       	std	Y+1, r3	; 0x01
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
    337e:	8a 81       	ldd	r24, Y+2	; 0x02
    3380:	9b 81       	ldd	r25, Y+3	; 0x03
    3382:	01 96       	adiw	r24, 0x01	; 1
    3384:	9b 83       	std	Y+3, r25	; 0x03
    3386:	8a 83       	std	Y+2, r24	; 0x02

void sMO_runCycle(SMO* handle) {
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
    3388:	82 30       	cpi	r24, 0x02	; 2
    338a:	91 05       	cpc	r25, r1
    338c:	10 f4       	brcc	.+4      	; 0x3392 <sMO_runCycle+0x2148>
    338e:	0c 94 5a 09 	jmp	0x12b4	; 0x12b4 <sMO_runCycle+0x6a>
	}
	sMO_exitaction(handle);
}

static void clearInEvents(SMO* handle) {
	handle->ifaceKEYPAD.key_pressed_raised = bool_false;
    3392:	1d 86       	std	Y+13, r1	; 0x0d
	handle->ifaceUART.DataRecieved_raised = bool_false;
    3394:	1a 8a       	std	Y+18, r1	; 0x12
	handle->ifaceRF.DataRecieved_raised = bool_false;
    3396:	18 a2       	lds	r17, 0x98
	handle->iface.switchOff_raised = bool_false;
    3398:	1e aa       	sts	0x9e, r17
	handle->iface.switchOn_raised = bool_false;
    339a:	1f aa       	sts	0x9f, r17
			break;
		}
	}
	
	clearInEvents(handle);
}
    339c:	df 91       	pop	r29
    339e:	cf 91       	pop	r28
    33a0:	1f 91       	pop	r17
    33a2:	0f 91       	pop	r16
    33a4:	ff 90       	pop	r15
    33a6:	ef 90       	pop	r14
    33a8:	df 90       	pop	r13
    33aa:	cf 90       	pop	r12
    33ac:	bf 90       	pop	r11
    33ae:	af 90       	pop	r10
    33b0:	9f 90       	pop	r9
    33b2:	8f 90       	pop	r8
    33b4:	7f 90       	pop	r7
    33b6:	6f 90       	pop	r6
    33b8:	5f 90       	pop	r5
    33ba:	4f 90       	pop	r4
    33bc:	3f 90       	pop	r3
    33be:	2f 90       	pop	r2
    33c0:	08 95       	ret
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMO_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
    33c2:	8a 81       	ldd	r24, Y+2	; 0x02
    33c4:	9b 81       	ldd	r25, Y+3	; 0x03
    33c6:	01 96       	adiw	r24, 0x01	; 1
    33c8:	9b 83       	std	Y+3, r25	; 0x03
    33ca:	8a 83       	std	Y+2, r24	; 0x02
    33cc:	e2 cf       	rjmp	.-60     	; 0x3392 <sMO_runCycle+0x2148>
    33ce:	8a 81       	ldd	r24, Y+2	; 0x02
    33d0:	9b 81       	ldd	r25, Y+3	; 0x03
    33d2:	01 96       	adiw	r24, 0x01	; 1
    33d4:	9b 83       	std	Y+3, r25	; 0x03
    33d6:	8a 83       	std	Y+2, r24	; 0x02
    33d8:	0c 94 5a 09 	jmp	0x12b4	; 0x12b4 <sMO_runCycle+0x6a>

000033dc <sMO_raiseTimeEvent>:
	
	clearInEvents(handle);
}

void sMO_raiseTimeEvent(SMO* handle, sc_eventid evid) {
	if ( ((intptr_t)evid) >= ((intptr_t)&(handle->timeEvents))
    33dc:	c8 96       	adiw	r24, 0x38	; 56
    33de:	68 17       	cp	r22, r24
    33e0:	79 07       	cpc	r23, r25
    33e2:	3c f0       	brlt	.+14     	; 0x33f2 <sMO_raiseTimeEvent+0x16>
		&&  ((intptr_t)evid) < ((intptr_t)&(handle->timeEvents)) + sizeof(SMOTimeEvents)) {
    33e4:	04 96       	adiw	r24, 0x04	; 4
    33e6:	68 17       	cp	r22, r24
    33e8:	79 07       	cpc	r23, r25
    33ea:	18 f4       	brcc	.+6      	; 0x33f2 <sMO_raiseTimeEvent+0x16>
		*(sc_boolean*)evid = bool_true;
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	fb 01       	movw	r30, r22
    33f0:	80 83       	st	Z, r24
    33f2:	08 95       	ret

000033f4 <sMO_isActive>:
	}		
}

sc_boolean sMO_isActive(SMO* handle, SMOStates state) {
    33f4:	dc 01       	movw	r26, r24
	switch (state) {
    33f6:	e6 2f       	mov	r30, r22
    33f8:	f0 e0       	ldi	r31, 0x00	; 0
    33fa:	e9 32       	cpi	r30, 0x29	; 41
    33fc:	f1 05       	cpc	r31, r1
    33fe:	08 f0       	brcs	.+2      	; 0x3402 <sMO_isActive+0xe>
    3400:	6c c1       	rjmp	.+728    	; 0x36da <sMO_isActive+0x2e6>
    3402:	ee 56       	subi	r30, 0x6E	; 110
    3404:	ff 4f       	sbci	r31, 0xFF	; 255
    3406:	ee 0f       	add	r30, r30
    3408:	ff 1f       	adc	r31, r31
    340a:	05 90       	lpm	r0, Z+
    340c:	f4 91       	lpm	r31, Z
    340e:	e0 2d       	mov	r30, r0
    3410:	09 94       	ijmp
		case SMO_main_region_on : 
			return (sc_boolean) (handle->stateConfVector[0] >= SMO_main_region_on
    3412:	81 e0       	ldi	r24, 0x01	; 1
    3414:	9c 91       	ld	r25, X
    3416:	99 32       	cpi	r25, 0x29	; 41
    3418:	08 f4       	brcc	.+2      	; 0x341c <sMO_isActive+0x28>
    341a:	60 c1       	rjmp	.+704    	; 0x36dc <sMO_isActive+0x2e8>
    341c:	80 e0       	ldi	r24, 0x00	; 0
    341e:	08 95       	ret
				&& handle->stateConfVector[0] <= SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult);
		case SMO_main_region_on_r1_Init : 
			return (sc_boolean) (handle->stateConfVector[0] == SMO_main_region_on_r1_Init
    3420:	81 e0       	ldi	r24, 0x01	; 1
    3422:	9c 91       	ld	r25, X
    3424:	91 30       	cpi	r25, 0x01	; 1
    3426:	09 f4       	brne	.+2      	; 0x342a <sMO_isActive+0x36>
    3428:	59 c1       	rjmp	.+690    	; 0x36dc <sMO_isActive+0x2e8>
    342a:	80 e0       	ldi	r24, 0x00	; 0
    342c:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running : 
			return (sc_boolean) (handle->stateConfVector[0] >= SMO_main_region_on_r1_Running
    342e:	9c 91       	ld	r25, X
    3430:	92 50       	subi	r25, 0x02	; 2
    3432:	81 e0       	ldi	r24, 0x01	; 1
    3434:	97 32       	cpi	r25, 0x27	; 39
    3436:	08 f4       	brcc	.+2      	; 0x343a <sMO_isActive+0x46>
    3438:	51 c1       	rjmp	.+674    	; 0x36dc <sMO_isActive+0x2e8>
    343a:	80 e0       	ldi	r24, 0x00	; 0
    343c:	08 95       	ret
				&& handle->stateConfVector[0] <= SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult);
		case SMO_main_region_on_r1_Running_keypad_CheckKey : 
			return (sc_boolean) (handle->stateConfVector[0] == SMO_main_region_on_r1_Running_keypad_CheckKey
    343e:	81 e0       	ldi	r24, 0x01	; 1
    3440:	9c 91       	ld	r25, X
    3442:	93 30       	cpi	r25, 0x03	; 3
    3444:	09 f4       	brne	.+2      	; 0x3448 <sMO_isActive+0x54>
    3446:	4a c1       	rjmp	.+660    	; 0x36dc <sMO_isActive+0x2e8>
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_keypad_CheckKeyDown : 
			return (sc_boolean) (handle->stateConfVector[0] == SMO_main_region_on_r1_Running_keypad_CheckKeyDown
    344c:	81 e0       	ldi	r24, 0x01	; 1
    344e:	9c 91       	ld	r25, X
    3450:	94 30       	cpi	r25, 0x04	; 4
    3452:	09 f4       	brne	.+2      	; 0x3456 <sMO_isActive+0x62>
    3454:	43 c1       	rjmp	.+646    	; 0x36dc <sMO_isActive+0x2e8>
    3456:	80 e0       	ldi	r24, 0x00	; 0
    3458:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_ShowMenu : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_ShowMenu
    345a:	81 e0       	ldi	r24, 0x01	; 1
    345c:	11 96       	adiw	r26, 0x01	; 1
    345e:	9c 91       	ld	r25, X
    3460:	11 97       	sbiw	r26, 0x01	; 1
    3462:	95 30       	cpi	r25, 0x05	; 5
    3464:	09 f4       	brne	.+2      	; 0x3468 <sMO_isActive+0x74>
    3466:	3a c1       	rjmp	.+628    	; 0x36dc <sMO_isActive+0x2e8>
    3468:	80 e0       	ldi	r24, 0x00	; 0
    346a:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData : 
			return (sc_boolean) (handle->stateConfVector[1] >= SMO_main_region_on_r1_Running_running_main_EnterData
    346c:	11 96       	adiw	r26, 0x01	; 1
    346e:	9c 91       	ld	r25, X
    3470:	11 97       	sbiw	r26, 0x01	; 1
    3472:	96 50       	subi	r25, 0x06	; 6
    3474:	81 e0       	ldi	r24, 0x01	; 1
    3476:	9d 30       	cpi	r25, 0x0D	; 13
    3478:	08 f4       	brcc	.+2      	; 0x347c <sMO_isActive+0x88>
    347a:	30 c1       	rjmp	.+608    	; 0x36dc <sMO_isActive+0x2e8>
    347c:	80 e0       	ldi	r24, 0x00	; 0
    347e:	08 95       	ret
				&& handle->stateConfVector[1] <= SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress3);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowCode
    3480:	81 e0       	ldi	r24, 0x01	; 1
    3482:	11 96       	adiw	r26, 0x01	; 1
    3484:	9c 91       	ld	r25, X
    3486:	11 97       	sbiw	r26, 0x01	; 1
    3488:	97 30       	cpi	r25, 0x07	; 7
    348a:	09 f4       	brne	.+2      	; 0x348e <sMO_isActive+0x9a>
    348c:	27 c1       	rjmp	.+590    	; 0x36dc <sMO_isActive+0x2e8>
    348e:	80 e0       	ldi	r24, 0x00	; 0
    3490:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterCode
    3492:	81 e0       	ldi	r24, 0x01	; 1
    3494:	11 96       	adiw	r26, 0x01	; 1
    3496:	9c 91       	ld	r25, X
    3498:	11 97       	sbiw	r26, 0x01	; 1
    349a:	98 30       	cpi	r25, 0x08	; 8
    349c:	09 f4       	brne	.+2      	; 0x34a0 <sMO_isActive+0xac>
    349e:	1e c1       	rjmp	.+572    	; 0x36dc <sMO_isActive+0x2e8>
    34a0:	80 e0       	ldi	r24, 0x00	; 0
    34a2:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress1
    34a4:	81 e0       	ldi	r24, 0x01	; 1
    34a6:	11 96       	adiw	r26, 0x01	; 1
    34a8:	9c 91       	ld	r25, X
    34aa:	11 97       	sbiw	r26, 0x01	; 1
    34ac:	99 30       	cpi	r25, 0x09	; 9
    34ae:	09 f4       	brne	.+2      	; 0x34b2 <sMO_isActive+0xbe>
    34b0:	15 c1       	rjmp	.+554    	; 0x36dc <sMO_isActive+0x2e8>
    34b2:	80 e0       	ldi	r24, 0x00	; 0
    34b4:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckCode0
    34b6:	81 e0       	ldi	r24, 0x01	; 1
    34b8:	11 96       	adiw	r26, 0x01	; 1
    34ba:	9c 91       	ld	r25, X
    34bc:	11 97       	sbiw	r26, 0x01	; 1
    34be:	9a 30       	cpi	r25, 0x0A	; 10
    34c0:	09 f4       	brne	.+2      	; 0x34c4 <sMO_isActive+0xd0>
    34c2:	0c c1       	rjmp	.+536    	; 0x36dc <sMO_isActive+0x2e8>
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_ShowAmount
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	11 96       	adiw	r26, 0x01	; 1
    34cc:	9c 91       	ld	r25, X
    34ce:	11 97       	sbiw	r26, 0x01	; 1
    34d0:	9b 30       	cpi	r25, 0x0B	; 11
    34d2:	09 f4       	brne	.+2      	; 0x34d6 <sMO_isActive+0xe2>
    34d4:	03 c1       	rjmp	.+518    	; 0x36dc <sMO_isActive+0x2e8>
    34d6:	80 e0       	ldi	r24, 0x00	; 0
    34d8:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress2
    34da:	81 e0       	ldi	r24, 0x01	; 1
    34dc:	11 96       	adiw	r26, 0x01	; 1
    34de:	9c 91       	ld	r25, X
    34e0:	11 97       	sbiw	r26, 0x01	; 1
    34e2:	9c 30       	cpi	r25, 0x0C	; 12
    34e4:	09 f4       	brne	.+2      	; 0x34e8 <sMO_isActive+0xf4>
    34e6:	fa c0       	rjmp	.+500    	; 0x36dc <sMO_isActive+0x2e8>
    34e8:	80 e0       	ldi	r24, 0x00	; 0
    34ea:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckAmount0
    34ec:	81 e0       	ldi	r24, 0x01	; 1
    34ee:	11 96       	adiw	r26, 0x01	; 1
    34f0:	9c 91       	ld	r25, X
    34f2:	11 97       	sbiw	r26, 0x01	; 1
    34f4:	9d 30       	cpi	r25, 0x0D	; 13
    34f6:	09 f4       	brne	.+2      	; 0x34fa <sMO_isActive+0x106>
    34f8:	f1 c0       	rjmp	.+482    	; 0x36dc <sMO_isActive+0x2e8>
    34fa:	80 e0       	ldi	r24, 0x00	; 0
    34fc:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_EnterAmount
    34fe:	81 e0       	ldi	r24, 0x01	; 1
    3500:	11 96       	adiw	r26, 0x01	; 1
    3502:	9c 91       	ld	r25, X
    3504:	11 97       	sbiw	r26, 0x01	; 1
    3506:	9e 30       	cpi	r25, 0x0E	; 14
    3508:	09 f4       	brne	.+2      	; 0x350c <sMO_isActive+0x118>
    350a:	e8 c0       	rjmp	.+464    	; 0x36dc <sMO_isActive+0x2e8>
    350c:	80 e0       	ldi	r24, 0x00	; 0
    350e:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_ : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1__final_
    3510:	81 e0       	ldi	r24, 0x01	; 1
    3512:	11 96       	adiw	r26, 0x01	; 1
    3514:	9c 91       	ld	r25, X
    3516:	11 97       	sbiw	r26, 0x01	; 1
    3518:	9f 30       	cpi	r25, 0x0F	; 15
    351a:	09 f4       	brne	.+2      	; 0x351e <sMO_isActive+0x12a>
    351c:	df c0       	rjmp	.+446    	; 0x36dc <sMO_isActive+0x2e8>
    351e:	80 e0       	ldi	r24, 0x00	; 0
    3520:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_KeepOrdering : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_KeepOrdering
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	11 96       	adiw	r26, 0x01	; 1
    3526:	9c 91       	ld	r25, X
    3528:	11 97       	sbiw	r26, 0x01	; 1
    352a:	90 31       	cpi	r25, 0x10	; 16
    352c:	09 f4       	brne	.+2      	; 0x3530 <sMO_isActive+0x13c>
    352e:	d6 c0       	rjmp	.+428    	; 0x36dc <sMO_isActive+0x2e8>
    3530:	80 e0       	ldi	r24, 0x00	; 0
    3532:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_Exit : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_Exit
    3534:	81 e0       	ldi	r24, 0x01	; 1
    3536:	11 96       	adiw	r26, 0x01	; 1
    3538:	9c 91       	ld	r25, X
    353a:	11 97       	sbiw	r26, 0x01	; 1
    353c:	91 31       	cpi	r25, 0x11	; 17
    353e:	09 f4       	brne	.+2      	; 0x3542 <sMO_isActive+0x14e>
    3540:	cd c0       	rjmp	.+410    	; 0x36dc <sMO_isActive+0x2e8>
    3542:	80 e0       	ldi	r24, 0x00	; 0
    3544:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress3 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_EnterData_r1_CheckKeyPress3
    3546:	81 e0       	ldi	r24, 0x01	; 1
    3548:	11 96       	adiw	r26, 0x01	; 1
    354a:	9c 91       	ld	r25, X
    354c:	11 97       	sbiw	r26, 0x01	; 1
    354e:	92 31       	cpi	r25, 0x12	; 18
    3550:	09 f4       	brne	.+2      	; 0x3554 <sMO_isActive+0x160>
    3552:	c4 c0       	rjmp	.+392    	; 0x36dc <sMO_isActive+0x2e8>
    3554:	80 e0       	ldi	r24, 0x00	; 0
    3556:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_MenuA : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_MenuA
    3558:	81 e0       	ldi	r24, 0x01	; 1
    355a:	11 96       	adiw	r26, 0x01	; 1
    355c:	9c 91       	ld	r25, X
    355e:	11 97       	sbiw	r26, 0x01	; 1
    3560:	93 31       	cpi	r25, 0x13	; 19
    3562:	09 f4       	brne	.+2      	; 0x3566 <sMO_isActive+0x172>
    3564:	bb c0       	rjmp	.+374    	; 0x36dc <sMO_isActive+0x2e8>
    3566:	80 e0       	ldi	r24, 0x00	; 0
    3568:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_CheckKeyPress : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_CheckKeyPress
    356a:	81 e0       	ldi	r24, 0x01	; 1
    356c:	11 96       	adiw	r26, 0x01	; 1
    356e:	9c 91       	ld	r25, X
    3570:	11 97       	sbiw	r26, 0x01	; 1
    3572:	94 31       	cpi	r25, 0x14	; 20
    3574:	09 f4       	brne	.+2      	; 0x3578 <sMO_isActive+0x184>
    3576:	b2 c0       	rjmp	.+356    	; 0x36dc <sMO_isActive+0x2e8>
    3578:	80 e0       	ldi	r24, 0x00	; 0
    357a:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendData : 
			return (sc_boolean) (handle->stateConfVector[1] >= SMO_main_region_on_r1_Running_running_main_SendData
    357c:	11 96       	adiw	r26, 0x01	; 1
    357e:	9c 91       	ld	r25, X
    3580:	11 97       	sbiw	r26, 0x01	; 1
    3582:	95 51       	subi	r25, 0x15	; 21
    3584:	81 e0       	ldi	r24, 0x01	; 1
    3586:	96 30       	cpi	r25, 0x06	; 6
    3588:	08 f4       	brcc	.+2      	; 0x358c <sMO_isActive+0x198>
    358a:	a8 c0       	rjmp	.+336    	; 0x36dc <sMO_isActive+0x2e8>
    358c:	80 e0       	ldi	r24, 0x00	; 0
    358e:	08 95       	ret
				&& handle->stateConfVector[1] <= SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult);
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_Send : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendData_r1_Send
    3590:	81 e0       	ldi	r24, 0x01	; 1
    3592:	11 96       	adiw	r26, 0x01	; 1
    3594:	9c 91       	ld	r25, X
    3596:	11 97       	sbiw	r26, 0x01	; 1
    3598:	96 31       	cpi	r25, 0x16	; 22
    359a:	09 f4       	brne	.+2      	; 0x359e <sMO_isActive+0x1aa>
    359c:	9f c0       	rjmp	.+318    	; 0x36dc <sMO_isActive+0x2e8>
    359e:	80 e0       	ldi	r24, 0x00	; 0
    35a0:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_Check : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendData_r1_Check
    35a2:	81 e0       	ldi	r24, 0x01	; 1
    35a4:	11 96       	adiw	r26, 0x01	; 1
    35a6:	9c 91       	ld	r25, X
    35a8:	11 97       	sbiw	r26, 0x01	; 1
    35aa:	97 31       	cpi	r25, 0x17	; 23
    35ac:	09 f4       	brne	.+2      	; 0x35b0 <sMO_isActive+0x1bc>
    35ae:	96 c0       	rjmp	.+300    	; 0x36dc <sMO_isActive+0x2e8>
    35b0:	80 e0       	ldi	r24, 0x00	; 0
    35b2:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendData_r1__final_ : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendData_r1__final_
    35b4:	81 e0       	ldi	r24, 0x01	; 1
    35b6:	11 96       	adiw	r26, 0x01	; 1
    35b8:	9c 91       	ld	r25, X
    35ba:	11 97       	sbiw	r26, 0x01	; 1
    35bc:	98 31       	cpi	r25, 0x18	; 24
    35be:	09 f4       	brne	.+2      	; 0x35c2 <sMO_isActive+0x1ce>
    35c0:	8d c0       	rjmp	.+282    	; 0x36dc <sMO_isActive+0x2e8>
    35c2:	80 e0       	ldi	r24, 0x00	; 0
    35c4:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail1 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendData_r1_SendFail1
    35c6:	81 e0       	ldi	r24, 0x01	; 1
    35c8:	11 96       	adiw	r26, 0x01	; 1
    35ca:	9c 91       	ld	r25, X
    35cc:	11 97       	sbiw	r26, 0x01	; 1
    35ce:	99 31       	cpi	r25, 0x19	; 25
    35d0:	09 f4       	brne	.+2      	; 0x35d4 <sMO_isActive+0x1e0>
    35d2:	84 c0       	rjmp	.+264    	; 0x36dc <sMO_isActive+0x2e8>
    35d4:	80 e0       	ldi	r24, 0x00	; 0
    35d6:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendData_r1_ResetResult
    35d8:	81 e0       	ldi	r24, 0x01	; 1
    35da:	11 96       	adiw	r26, 0x01	; 1
    35dc:	9c 91       	ld	r25, X
    35de:	11 97       	sbiw	r26, 0x01	; 1
    35e0:	9a 31       	cpi	r25, 0x1A	; 26
    35e2:	09 f4       	brne	.+2      	; 0x35e6 <sMO_isActive+0x1f2>
    35e4:	7b c0       	rjmp	.+246    	; 0x36dc <sMO_isActive+0x2e8>
    35e6:	80 e0       	ldi	r24, 0x00	; 0
    35e8:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_MenuB : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_MenuB
    35ea:	81 e0       	ldi	r24, 0x01	; 1
    35ec:	11 96       	adiw	r26, 0x01	; 1
    35ee:	9c 91       	ld	r25, X
    35f0:	11 97       	sbiw	r26, 0x01	; 1
    35f2:	9b 31       	cpi	r25, 0x1B	; 27
    35f4:	09 f4       	brne	.+2      	; 0x35f8 <sMO_isActive+0x204>
    35f6:	72 c0       	rjmp	.+228    	; 0x36dc <sMO_isActive+0x2e8>
    35f8:	80 e0       	ldi	r24, 0x00	; 0
    35fa:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_MenuC : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_MenuC
    35fc:	81 e0       	ldi	r24, 0x01	; 1
    35fe:	11 96       	adiw	r26, 0x01	; 1
    3600:	9c 91       	ld	r25, X
    3602:	11 97       	sbiw	r26, 0x01	; 1
    3604:	9c 31       	cpi	r25, 0x1C	; 28
    3606:	09 f4       	brne	.+2      	; 0x360a <sMO_isActive+0x216>
    3608:	69 c0       	rjmp	.+210    	; 0x36dc <sMO_isActive+0x2e8>
    360a:	80 e0       	ldi	r24, 0x00	; 0
    360c:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_MenuD : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_MenuD
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	11 96       	adiw	r26, 0x01	; 1
    3612:	9c 91       	ld	r25, X
    3614:	11 97       	sbiw	r26, 0x01	; 1
    3616:	9d 31       	cpi	r25, 0x1D	; 29
    3618:	09 f4       	brne	.+2      	; 0x361c <sMO_isActive+0x228>
    361a:	60 c0       	rjmp	.+192    	; 0x36dc <sMO_isActive+0x2e8>
    361c:	80 e0       	ldi	r24, 0x00	; 0
    361e:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_ConfirmRequest : 
			return (sc_boolean) (handle->stateConfVector[1] >= SMO_main_region_on_r1_Running_running_main_ConfirmRequest
    3620:	11 96       	adiw	r26, 0x01	; 1
    3622:	9c 91       	ld	r25, X
    3624:	11 97       	sbiw	r26, 0x01	; 1
    3626:	9e 51       	subi	r25, 0x1E	; 30
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	95 30       	cpi	r25, 0x05	; 5
    362c:	08 f4       	brcc	.+2      	; 0x3630 <sMO_isActive+0x23c>
    362e:	56 c0       	rjmp	.+172    	; 0x36dc <sMO_isActive+0x2e8>
    3630:	80 e0       	ldi	r24, 0x00	; 0
    3632:	08 95       	ret
				&& handle->stateConfVector[1] <= SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_);
		case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_RequestConfirmation
    3634:	81 e0       	ldi	r24, 0x01	; 1
    3636:	11 96       	adiw	r26, 0x01	; 1
    3638:	9c 91       	ld	r25, X
    363a:	11 97       	sbiw	r26, 0x01	; 1
    363c:	9f 31       	cpi	r25, 0x1F	; 31
    363e:	09 f4       	brne	.+2      	; 0x3642 <sMO_isActive+0x24e>
    3640:	4d c0       	rjmp	.+154    	; 0x36dc <sMO_isActive+0x2e8>
    3642:	80 e0       	ldi	r24, 0x00	; 0
    3644:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_Confirm : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_Confirm
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	11 96       	adiw	r26, 0x01	; 1
    364a:	9c 91       	ld	r25, X
    364c:	11 97       	sbiw	r26, 0x01	; 1
    364e:	90 32       	cpi	r25, 0x20	; 32
    3650:	09 f4       	brne	.+2      	; 0x3654 <sMO_isActive+0x260>
    3652:	44 c0       	rjmp	.+136    	; 0x36dc <sMO_isActive+0x2e8>
    3654:	80 e0       	ldi	r24, 0x00	; 0
    3656:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1_CheckKeyPress
    3658:	81 e0       	ldi	r24, 0x01	; 1
    365a:	11 96       	adiw	r26, 0x01	; 1
    365c:	9c 91       	ld	r25, X
    365e:	11 97       	sbiw	r26, 0x01	; 1
    3660:	91 32       	cpi	r25, 0x21	; 33
    3662:	e1 f1       	breq	.+120    	; 0x36dc <sMO_isActive+0x2e8>
    3664:	80 e0       	ldi	r24, 0x00	; 0
    3666:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_ : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_ConfirmRequest_r1__final_
    3668:	81 e0       	ldi	r24, 0x01	; 1
    366a:	11 96       	adiw	r26, 0x01	; 1
    366c:	9c 91       	ld	r25, X
    366e:	11 97       	sbiw	r26, 0x01	; 1
    3670:	92 32       	cpi	r25, 0x22	; 34
    3672:	a1 f1       	breq	.+104    	; 0x36dc <sMO_isActive+0x2e8>
    3674:	80 e0       	ldi	r24, 0x00	; 0
    3676:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendRequest : 
			return (sc_boolean) (handle->stateConfVector[1] >= SMO_main_region_on_r1_Running_running_main_SendRequest
    3678:	11 96       	adiw	r26, 0x01	; 1
    367a:	9c 91       	ld	r25, X
    367c:	11 97       	sbiw	r26, 0x01	; 1
    367e:	93 52       	subi	r25, 0x23	; 35
    3680:	81 e0       	ldi	r24, 0x01	; 1
    3682:	96 30       	cpi	r25, 0x06	; 6
    3684:	58 f1       	brcs	.+86     	; 0x36dc <sMO_isActive+0x2e8>
    3686:	80 e0       	ldi	r24, 0x00	; 0
    3688:	08 95       	ret
				&& handle->stateConfVector[1] <= SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult);
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Send : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Send
    368a:	81 e0       	ldi	r24, 0x01	; 1
    368c:	11 96       	adiw	r26, 0x01	; 1
    368e:	9c 91       	ld	r25, X
    3690:	11 97       	sbiw	r26, 0x01	; 1
    3692:	94 32       	cpi	r25, 0x24	; 36
    3694:	19 f1       	breq	.+70     	; 0x36dc <sMO_isActive+0x2e8>
    3696:	80 e0       	ldi	r24, 0x00	; 0
    3698:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Check : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendRequest_r1_Check
    369a:	81 e0       	ldi	r24, 0x01	; 1
    369c:	11 96       	adiw	r26, 0x01	; 1
    369e:	9c 91       	ld	r25, X
    36a0:	11 97       	sbiw	r26, 0x01	; 1
    36a2:	95 32       	cpi	r25, 0x25	; 37
    36a4:	d9 f0       	breq	.+54     	; 0x36dc <sMO_isActive+0x2e8>
    36a6:	80 e0       	ldi	r24, 0x00	; 0
    36a8:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_ : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendRequest_r1__final_
    36aa:	81 e0       	ldi	r24, 0x01	; 1
    36ac:	11 96       	adiw	r26, 0x01	; 1
    36ae:	9c 91       	ld	r25, X
    36b0:	11 97       	sbiw	r26, 0x01	; 1
    36b2:	96 32       	cpi	r25, 0x26	; 38
    36b4:	99 f0       	breq	.+38     	; 0x36dc <sMO_isActive+0x2e8>
    36b6:	80 e0       	ldi	r24, 0x00	; 0
    36b8:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendRequest_r1_SendFail2
    36ba:	81 e0       	ldi	r24, 0x01	; 1
    36bc:	11 96       	adiw	r26, 0x01	; 1
    36be:	9c 91       	ld	r25, X
    36c0:	11 97       	sbiw	r26, 0x01	; 1
    36c2:	97 32       	cpi	r25, 0x27	; 39
    36c4:	59 f0       	breq	.+22     	; 0x36dc <sMO_isActive+0x2e8>
    36c6:	80 e0       	ldi	r24, 0x00	; 0
    36c8:	08 95       	ret
			);
		case SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult : 
			return (sc_boolean) (handle->stateConfVector[1] == SMO_main_region_on_r1_Running_running_main_SendRequest_r1_ResetResult
    36ca:	81 e0       	ldi	r24, 0x01	; 1
    36cc:	11 96       	adiw	r26, 0x01	; 1
    36ce:	9c 91       	ld	r25, X
    36d0:	11 97       	sbiw	r26, 0x01	; 1
    36d2:	98 32       	cpi	r25, 0x28	; 40
    36d4:	19 f0       	breq	.+6      	; 0x36dc <sMO_isActive+0x2e8>
    36d6:	80 e0       	ldi	r24, 0x00	; 0
    36d8:	08 95       	ret
			);
		default: return bool_false;
    36da:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    36dc:	08 95       	ret

000036de <sMOIfaceKEYPAD_raise_key_pressed>:



void sMOIfaceKEYPAD_raise_key_pressed(SMO* handle) {
	handle->ifaceKEYPAD.key_pressed_raised = bool_true;
    36de:	21 e0       	ldi	r18, 0x01	; 1
    36e0:	fc 01       	movw	r30, r24
    36e2:	25 87       	std	Z+13, r18	; 0x0d
}
    36e4:	08 95       	ret

000036e6 <sMOIfaceKEYPAD_get_key>:


sc_integer sMOIfaceKEYPAD_get_key(SMO* handle) {
    36e6:	fc 01       	movw	r30, r24
	return handle->ifaceKEYPAD.key;
    36e8:	64 81       	ldd	r22, Z+4	; 0x04
    36ea:	75 81       	ldd	r23, Z+5	; 0x05
}
    36ec:	86 81       	ldd	r24, Z+6	; 0x06
    36ee:	97 81       	ldd	r25, Z+7	; 0x07
    36f0:	08 95       	ret

000036f2 <sMOIfaceKEYPAD_set_key>:
void sMOIfaceKEYPAD_set_key(SMO* handle, sc_integer value) {
	handle->ifaceKEYPAD.key = value;
    36f2:	fc 01       	movw	r30, r24
    36f4:	44 83       	std	Z+4, r20	; 0x04
    36f6:	55 83       	std	Z+5, r21	; 0x05
    36f8:	66 83       	std	Z+6, r22	; 0x06
    36fa:	77 83       	std	Z+7, r23	; 0x07
}
    36fc:	08 95       	ret

000036fe <sMOIfaceKEYPAD_get_lastkey>:
sc_integer sMOIfaceKEYPAD_get_lastkey(SMO* handle) {
    36fe:	fc 01       	movw	r30, r24
	return handle->ifaceKEYPAD.lastkey;
    3700:	60 85       	ldd	r22, Z+8	; 0x08
    3702:	71 85       	ldd	r23, Z+9	; 0x09
}
    3704:	82 85       	ldd	r24, Z+10	; 0x0a
    3706:	93 85       	ldd	r25, Z+11	; 0x0b
    3708:	08 95       	ret

0000370a <sMOIfaceKEYPAD_set_lastkey>:
void sMOIfaceKEYPAD_set_lastkey(SMO* handle, sc_integer value) {
	handle->ifaceKEYPAD.lastkey = value;
    370a:	fc 01       	movw	r30, r24
    370c:	40 87       	std	Z+8, r20	; 0x08
    370e:	51 87       	std	Z+9, r21	; 0x09
    3710:	62 87       	std	Z+10, r22	; 0x0a
    3712:	73 87       	std	Z+11, r23	; 0x0b
}
    3714:	08 95       	ret

00003716 <sMOIfaceKEYPAD_get_key_down>:
sc_boolean sMOIfaceKEYPAD_get_key_down(SMO* handle) {
	return handle->ifaceKEYPAD.key_down;
}
    3716:	fc 01       	movw	r30, r24
    3718:	84 85       	ldd	r24, Z+12	; 0x0c
    371a:	08 95       	ret

0000371c <sMOIfaceKEYPAD_set_key_down>:
void sMOIfaceKEYPAD_set_key_down(SMO* handle, sc_boolean value) {
	handle->ifaceKEYPAD.key_down = value;
    371c:	fc 01       	movw	r30, r24
    371e:	64 87       	std	Z+12, r22	; 0x0c
}
    3720:	08 95       	ret

00003722 <sMOIfaceUART_raise_dataRecieved>:
void sMOIfaceUART_raise_dataRecieved(SMO* handle) {
	handle->ifaceUART.DataRecieved_raised = bool_true;
    3722:	21 e0       	ldi	r18, 0x01	; 1
    3724:	fc 01       	movw	r30, r24
    3726:	22 8b       	std	Z+18, r18	; 0x12
}
    3728:	08 95       	ret

0000372a <sMOIfaceUART_get_data>:


sc_string sMOIfaceUART_get_data(SMO* handle) {
    372a:	fc 01       	movw	r30, r24
	return handle->ifaceUART.data;
}
    372c:	86 85       	ldd	r24, Z+14	; 0x0e
    372e:	97 85       	ldd	r25, Z+15	; 0x0f
    3730:	08 95       	ret

00003732 <sMOIfaceUART_set_data>:
void sMOIfaceUART_set_data(SMO* handle, sc_string value) {
	handle->ifaceUART.data = value;
    3732:	fc 01       	movw	r30, r24
    3734:	77 87       	std	Z+15, r23	; 0x0f
    3736:	66 87       	std	Z+14, r22	; 0x0e
}
    3738:	08 95       	ret

0000373a <sMOIfaceUART_get_lastdata>:
sc_string sMOIfaceUART_get_lastdata(SMO* handle) {
    373a:	fc 01       	movw	r30, r24
	return handle->ifaceUART.lastdata;
}
    373c:	80 89       	ldd	r24, Z+16	; 0x10
    373e:	91 89       	ldd	r25, Z+17	; 0x11
    3740:	08 95       	ret

00003742 <sMOIfaceUART_set_lastdata>:
void sMOIfaceUART_set_lastdata(SMO* handle, sc_string value) {
	handle->ifaceUART.lastdata = value;
    3742:	fc 01       	movw	r30, r24
    3744:	71 8b       	std	Z+17, r23	; 0x11
    3746:	60 8b       	std	Z+16, r22	; 0x10
}
    3748:	08 95       	ret

0000374a <sMOIfaceRF_raise_dataRecieved>:
void sMOIfaceRF_raise_dataRecieved(SMO* handle) {
	handle->ifaceRF.DataRecieved_raised = bool_true;
    374a:	21 e0       	ldi	r18, 0x01	; 1
    374c:	fc 01       	movw	r30, r24
    374e:	20 a3       	lds	r18, 0x50
}
    3750:	08 95       	ret

00003752 <sMOIfaceRF_get_data>:


sc_string sMOIfaceRF_get_data(SMO* handle) {
    3752:	fc 01       	movw	r30, r24
	return handle->ifaceRF.data;
}
    3754:	83 89       	ldd	r24, Z+19	; 0x13
    3756:	94 89       	ldd	r25, Z+20	; 0x14
    3758:	08 95       	ret

0000375a <sMOIfaceRF_set_data>:
void sMOIfaceRF_set_data(SMO* handle, sc_string value) {
	handle->ifaceRF.data = value;
    375a:	fc 01       	movw	r30, r24
    375c:	74 8b       	std	Z+20, r23	; 0x14
    375e:	63 8b       	std	Z+19, r22	; 0x13
}
    3760:	08 95       	ret

00003762 <sMOIfaceRF_get_lastdata>:
sc_string sMOIfaceRF_get_lastdata(SMO* handle) {
    3762:	fc 01       	movw	r30, r24
	return handle->ifaceRF.lastdata;
}
    3764:	85 89       	ldd	r24, Z+21	; 0x15
    3766:	96 89       	ldd	r25, Z+22	; 0x16
    3768:	08 95       	ret

0000376a <sMOIfaceRF_set_lastdata>:
void sMOIfaceRF_set_lastdata(SMO* handle, sc_string value) {
	handle->ifaceRF.lastdata = value;
    376a:	fc 01       	movw	r30, r24
    376c:	76 8b       	std	Z+22, r23	; 0x16
    376e:	65 8b       	std	Z+21, r22	; 0x15
}
    3770:	08 95       	ret

00003772 <sMOIfaceRF_get_result>:
sc_boolean sMOIfaceRF_get_result(SMO* handle) {
	return handle->ifaceRF.result;
}
    3772:	fc 01       	movw	r30, r24
    3774:	87 89       	ldd	r24, Z+23	; 0x17
    3776:	08 95       	ret

00003778 <sMOIfaceRF_set_result>:
void sMOIfaceRF_set_result(SMO* handle, sc_boolean value) {
	handle->ifaceRF.result = value;
    3778:	fc 01       	movw	r30, r24
    377a:	67 8b       	std	Z+23, r22	; 0x17
}
    377c:	08 95       	ret

0000377e <sMOIfaceRF_get_retry>:
sc_integer sMOIfaceRF_get_retry(SMO* handle) {
    377e:	fc 01       	movw	r30, r24
	return handle->ifaceRF.retry;
    3780:	60 8d       	ldd	r22, Z+24	; 0x18
    3782:	71 8d       	ldd	r23, Z+25	; 0x19
}
    3784:	82 8d       	ldd	r24, Z+26	; 0x1a
    3786:	93 8d       	ldd	r25, Z+27	; 0x1b
    3788:	08 95       	ret

0000378a <sMOIfaceRF_set_retry>:
void sMOIfaceRF_set_retry(SMO* handle, sc_integer value) {
	handle->ifaceRF.retry = value;
    378a:	fc 01       	movw	r30, r24
    378c:	40 8f       	std	Z+24, r20	; 0x18
    378e:	51 8f       	std	Z+25, r21	; 0x19
    3790:	62 8f       	std	Z+26, r22	; 0x1a
    3792:	73 8f       	std	Z+27, r23	; 0x1b
}
    3794:	08 95       	ret

00003796 <sMOIfaceRF_get_iD>:
sc_integer sMOIfaceRF_get_iD(SMO* handle) {
    3796:	fc 01       	movw	r30, r24
	return handle->ifaceRF.ID;
    3798:	64 8d       	ldd	r22, Z+28	; 0x1c
    379a:	75 8d       	ldd	r23, Z+29	; 0x1d
}
    379c:	86 8d       	ldd	r24, Z+30	; 0x1e
    379e:	97 8d       	ldd	r25, Z+31	; 0x1f
    37a0:	08 95       	ret

000037a2 <sMOIfaceRF_set_iD>:
void sMOIfaceRF_set_iD(SMO* handle, sc_integer value) {
	handle->ifaceRF.ID = value;
    37a2:	fc 01       	movw	r30, r24
    37a4:	44 8f       	std	Z+28, r20	; 0x1c
    37a6:	55 8f       	std	Z+29, r21	; 0x1d
    37a8:	66 8f       	std	Z+30, r22	; 0x1e
    37aa:	77 8f       	std	Z+31, r23	; 0x1f
}
    37ac:	08 95       	ret

000037ae <sMOIfaceDISH_get_iD>:


sc_integer sMOIfaceDISH_get_iD(SMO* handle) {
    37ae:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.ID;
    37b0:	61 a1       	lds	r22, 0x41
    37b2:	72 a1       	lds	r23, 0x42
}
    37b4:	83 a1       	lds	r24, 0x43
    37b6:	94 a1       	lds	r25, 0x44
    37b8:	08 95       	ret

000037ba <sMOIfaceDISH_set_iD>:
void sMOIfaceDISH_set_iD(SMO* handle, sc_integer value) {
	handle->ifaceDISH.ID = value;
    37ba:	fc 01       	movw	r30, r24
    37bc:	41 a3       	lds	r20, 0x51
    37be:	52 a3       	lds	r21, 0x52
    37c0:	63 a3       	lds	r22, 0x53
    37c2:	74 a3       	lds	r23, 0x54
}
    37c4:	08 95       	ret

000037c6 <sMOIfaceDISH_get_amount>:
sc_integer sMOIfaceDISH_get_amount(SMO* handle) {
    37c6:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.amount;
    37c8:	65 a1       	lds	r22, 0x45
    37ca:	76 a1       	lds	r23, 0x46
}
    37cc:	87 a1       	lds	r24, 0x47
    37ce:	90 a5       	lds	r25, 0x60
    37d0:	08 95       	ret

000037d2 <sMOIfaceDISH_set_amount>:
void sMOIfaceDISH_set_amount(SMO* handle, sc_integer value) {
	handle->ifaceDISH.amount = value;
    37d2:	fc 01       	movw	r30, r24
    37d4:	45 a3       	lds	r20, 0x55
    37d6:	56 a3       	lds	r21, 0x56
    37d8:	67 a3       	lds	r22, 0x57
    37da:	70 a7       	lds	r23, 0x70
}
    37dc:	08 95       	ret

000037de <sMOIfaceDISH_get_pos>:
sc_integer sMOIfaceDISH_get_pos(SMO* handle) {
    37de:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.pos;
    37e0:	61 a5       	lds	r22, 0x61
    37e2:	72 a5       	lds	r23, 0x62
}
    37e4:	83 a5       	lds	r24, 0x63
    37e6:	94 a5       	lds	r25, 0x64
    37e8:	08 95       	ret

000037ea <sMOIfaceDISH_set_pos>:
void sMOIfaceDISH_set_pos(SMO* handle, sc_integer value) {
	handle->ifaceDISH.pos = value;
    37ea:	fc 01       	movw	r30, r24
    37ec:	41 a7       	lds	r20, 0x71
    37ee:	52 a7       	lds	r21, 0x72
    37f0:	63 a7       	lds	r22, 0x73
    37f2:	74 a7       	lds	r23, 0x74
}
    37f4:	08 95       	ret

000037f6 <sMOIface_raise_switchOff>:
void sMOIface_raise_switchOff(SMO* handle) {
	handle->iface.switchOff_raised = bool_true;
    37f6:	21 e0       	ldi	r18, 0x01	; 1
    37f8:	fc 01       	movw	r30, r24
    37fa:	26 ab       	sts	0x56, r18
}
    37fc:	08 95       	ret

000037fe <sMOIface_raise_switchOn>:
void sMOIface_raise_switchOn(SMO* handle) {
	handle->iface.switchOn_raised = bool_true;
    37fe:	21 e0       	ldi	r18, 0x01	; 1
    3800:	fc 01       	movw	r30, r24
    3802:	27 ab       	sts	0x57, r18
}
    3804:	08 95       	ret

00003806 <sMOIface_get_lightOn>:


sc_boolean sMOIface_get_lightOn(SMO* handle) {
	return handle->iface.lightOn;
}
    3806:	fc 01       	movw	r30, r24
    3808:	85 a5       	lds	r24, 0x65
    380a:	08 95       	ret

0000380c <sMOIface_set_lightOn>:
void sMOIface_set_lightOn(SMO* handle, sc_boolean value) {
	handle->iface.lightOn = value;
    380c:	fc 01       	movw	r30, r24
    380e:	65 a7       	lds	r22, 0x75
}
    3810:	08 95       	ret

00003812 <sMOIface_get_menuId>:
sc_integer sMOIface_get_menuId(SMO* handle) {
    3812:	fc 01       	movw	r30, r24
	return handle->iface.menuId;
    3814:	66 a5       	lds	r22, 0x66
    3816:	77 a5       	lds	r23, 0x67
}
    3818:	80 a9       	sts	0x40, r24
    381a:	91 a9       	sts	0x41, r25
    381c:	08 95       	ret

0000381e <sMOIface_set_menuId>:
void sMOIface_set_menuId(SMO* handle, sc_integer value) {
	handle->iface.menuId = value;
    381e:	fc 01       	movw	r30, r24
    3820:	46 a7       	lds	r20, 0x76
    3822:	57 a7       	lds	r21, 0x77
    3824:	60 ab       	sts	0x50, r22
    3826:	71 ab       	sts	0x51, r23
}
    3828:	08 95       	ret

0000382a <sMOIface_get_tableId>:
sc_integer sMOIface_get_tableId(SMO* handle) {
    382a:	fc 01       	movw	r30, r24
	return handle->iface.tableId;
    382c:	62 a9       	sts	0x42, r22
    382e:	73 a9       	sts	0x43, r23
}
    3830:	84 a9       	sts	0x44, r24
    3832:	95 a9       	sts	0x45, r25
    3834:	08 95       	ret

00003836 <sMOIface_set_tableId>:
void sMOIface_set_tableId(SMO* handle, sc_integer value) {
	handle->iface.tableId = value;
    3836:	fc 01       	movw	r30, r24
    3838:	42 ab       	sts	0x52, r20
    383a:	53 ab       	sts	0x53, r21
    383c:	64 ab       	sts	0x54, r22
    383e:	75 ab       	sts	0x55, r23
}
    3840:	08 95       	ret

00003842 <spi_init>:

/*
 * spi initialize
 */
void spi_init() {
    SPI_DDR &= ~((1<<SPI_MOSI) | (1<<SPI_MISO) | (1<<SPI_SS) | (1<<SPI_SCK)); //input
    3842:	87 b3       	in	r24, 0x17	; 23
    3844:	80 7f       	andi	r24, 0xF0	; 240
    3846:	87 bb       	out	0x17, r24	; 23
    SPI_DDR |= ((1<<SPI_MOSI) | (1<<SPI_SS) | (1<<SPI_SCK)); //output
    3848:	87 b3       	in	r24, 0x17	; 23
    384a:	87 60       	ori	r24, 0x07	; 7
    384c:	87 bb       	out	0x17, r24	; 23

    SPCR = ((1<<SPE)|               // SPI Enable
    384e:	81 e5       	ldi	r24, 0x51	; 81
    3850:	8d b9       	out	0x0d, r24	; 13
            (1<<MSTR)|              // Master/Slave select
            (0<<SPR1)|(1<<SPR0)|    // SPI Clock Rate
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR = (1<<SPI2X); // Double SPI Speed Bit
    3852:	81 e0       	ldi	r24, 0x01	; 1
    3854:	8e b9       	out	0x0e, r24	; 14
}
    3856:	08 95       	ret

00003858 <spi_writereadbyte>:

/*
 * spi write one byte and read it back
 */
uint8_t spi_writereadbyte(uint8_t data) {
    SPDR = data;
    3858:	8f b9       	out	0x0f, r24	; 15
    while((SPSR & (1<<SPIF)) == 0);
    385a:	77 9b       	sbis	0x0e, 7	; 14
    385c:	fe cf       	rjmp	.-4      	; 0x385a <spi_writereadbyte+0x2>
    return SPDR;
    385e:	8f b1       	in	r24, 0x0f	; 15
}
    3860:	08 95       	ret

00003862 <TimerInit>:

TimeEvent tmrEvent[10];
int tmrCount=0;

void TimerInit() {
	TCCR0 = 0b011; //CS02=0, CS01=1, CS00=0, chon Prescaler=64
    3862:	83 e0       	ldi	r24, 0x03	; 3
    3864:	83 bf       	out	0x33, r24	; 51
	//Xung chip la 8MHZ -> 1 xung mat 1us/8 = 0.125 us
	//Prescaler=64, kich 256 lan moi tang 1 lan trong bo dem Timer-> Ton 8us
	//Vay, de Timer ngat moi 1ms, ta can: 1000/8=125 lan dem.
	//Ma Timer ngat khi bo dem toi 255, ta can set gia tri ban dau cho bo dem la: 255-125+1=131
	TCNT0=131;
    3866:	83 e8       	ldi	r24, 0x83	; 131
    3868:	82 bf       	out	0x32, r24	; 50
	TIMSK=(1<<TOIE0); //Cho phep ngat khi cho tran o T/C0
    386a:	81 e0       	ldi	r24, 0x01	; 1
    386c:	87 bf       	out	0x37, r24	; 55
	tmrCount=0;
    386e:	10 92 99 02 	sts	0x0299, r1
    3872:	10 92 98 02 	sts	0x0298, r1
	sei();
    3876:	78 94       	sei
}
    3878:	08 95       	ret

0000387a <TimerSet>:

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
    387a:	cf 92       	push	r12
    387c:	df 92       	push	r13
    387e:	ef 92       	push	r14
    3880:	ff 92       	push	r15
    3882:	cf 93       	push	r28
    3884:	df 93       	push	r29
    3886:	ec 01       	movw	r28, r24
    3888:	6a 01       	movw	r12, r20
    388a:	7b 01       	movw	r14, r22
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
    388c:	40 91 98 02 	lds	r20, 0x0298
    3890:	50 91 99 02 	lds	r21, 0x0299
    3894:	14 16       	cp	r1, r20
    3896:	15 06       	cpc	r1, r21
    3898:	e4 f4       	brge	.+56     	; 0x38d2 <TimerSet+0x58>
    389a:	ec eb       	ldi	r30, 0xBC	; 188
    389c:	f2 e0       	ldi	r31, 0x02	; 2
    389e:	df 01       	movw	r26, r30
    38a0:	16 96       	adiw	r26, 0x06	; 6
    38a2:	20 e0       	ldi	r18, 0x00	; 0
    38a4:	30 e0       	ldi	r19, 0x00	; 0
	sei();
}

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
    38a6:	70 e0       	ldi	r23, 0x00	; 0
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
			check=true;
			tmrEvent[i].count=0;
			tmrEvent[i].max=max;
			tmrEvent[i].enabled=true;
    38a8:	61 e0       	ldi	r22, 0x01	; 1

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
    38aa:	80 81       	ld	r24, Z
    38ac:	91 81       	ldd	r25, Z+1	; 0x01
    38ae:	8c 17       	cp	r24, r28
    38b0:	9d 07       	cpc	r25, r29
    38b2:	31 f4       	brne	.+12     	; 0x38c0 <TimerSet+0x46>
			check=true;
			tmrEvent[i].count=0;
    38b4:	13 82       	std	Z+3, r1	; 0x03
    38b6:	12 82       	std	Z+2, r1	; 0x02
			tmrEvent[i].max=max;
    38b8:	d5 82       	std	Z+5, r13	; 0x05
    38ba:	c4 82       	std	Z+4, r12	; 0x04
			tmrEvent[i].enabled=true;
    38bc:	6c 93       	st	X, r22
//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
			check=true;
    38be:	76 2f       	mov	r23, r22
}

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
    38c0:	2f 5f       	subi	r18, 0xFF	; 255
    38c2:	3f 4f       	sbci	r19, 0xFF	; 255
    38c4:	37 96       	adiw	r30, 0x07	; 7
    38c6:	17 96       	adiw	r26, 0x07	; 7
    38c8:	24 17       	cp	r18, r20
    38ca:	35 07       	cpc	r19, r21
    38cc:	74 f3       	brlt	.-36     	; 0x38aa <TimerSet+0x30>
			tmrEvent[i].count=0;
			tmrEvent[i].max=max;
			tmrEvent[i].enabled=true;
		}
	}
	if (!check) {
    38ce:	77 23       	and	r23, r23
    38d0:	c9 f4       	brne	.+50     	; 0x3904 <TimerSet+0x8a>
		tmrEvent[tmrCount].EventId=evenId;
    38d2:	fa 01       	movw	r30, r20
    38d4:	ee 0f       	add	r30, r30
    38d6:	ff 1f       	adc	r31, r31
    38d8:	ee 0f       	add	r30, r30
    38da:	ff 1f       	adc	r31, r31
    38dc:	ee 0f       	add	r30, r30
    38de:	ff 1f       	adc	r31, r31
    38e0:	e4 1b       	sub	r30, r20
    38e2:	f5 0b       	sbc	r31, r21
    38e4:	e4 54       	subi	r30, 0x44	; 68
    38e6:	fd 4f       	sbci	r31, 0xFD	; 253
    38e8:	d1 83       	std	Z+1, r29	; 0x01
    38ea:	c0 83       	st	Z, r28
		tmrEvent[tmrCount].count=0;
    38ec:	13 82       	std	Z+3, r1	; 0x03
    38ee:	12 82       	std	Z+2, r1	; 0x02
		tmrEvent[tmrCount].max=max;
    38f0:	d5 82       	std	Z+5, r13	; 0x05
    38f2:	c4 82       	std	Z+4, r12	; 0x04
		tmrEvent[tmrCount].enabled=true;
    38f4:	81 e0       	ldi	r24, 0x01	; 1
    38f6:	86 83       	std	Z+6, r24	; 0x06
		tmrCount++;
    38f8:	4f 5f       	subi	r20, 0xFF	; 255
    38fa:	5f 4f       	sbci	r21, 0xFF	; 255
    38fc:	50 93 99 02 	sts	0x0299, r21
    3900:	40 93 98 02 	sts	0x0298, r20
	}
}
    3904:	df 91       	pop	r29
    3906:	cf 91       	pop	r28
    3908:	ff 90       	pop	r15
    390a:	ef 90       	pop	r14
    390c:	df 90       	pop	r13
    390e:	cf 90       	pop	r12
    3910:	08 95       	ret

00003912 <TimerUnSet>:

void TimerUnSet(const sc_eventid evenId) {
    3912:	dc 01       	movw	r26, r24
	for (int i=0;i<tmrCount;i++) {
    3914:	60 91 98 02 	lds	r22, 0x0298
    3918:	70 91 99 02 	lds	r23, 0x0299
    391c:	16 16       	cp	r1, r22
    391e:	17 06       	cpc	r1, r23
    3920:	64 f5       	brge	.+88     	; 0x397a <TimerUnSet+0x68>
		if (tmrEvent[i].EventId==evenId) {
    3922:	80 91 bc 02 	lds	r24, 0x02BC
    3926:	90 91 bd 02 	lds	r25, 0x02BD
    392a:	8a 17       	cp	r24, r26
    392c:	9b 07       	cpc	r25, r27
    392e:	e1 f4       	brne	.+56     	; 0x3968 <TimerUnSet+0x56>
    3930:	0a c0       	rjmp	.+20     	; 0x3946 <TimerUnSet+0x34>
    3932:	29 5f       	subi	r18, 0xF9	; 249
    3934:	3f 4f       	sbci	r19, 0xFF	; 255
		tmrEvent[tmrCount].enabled=true;
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
    3936:	f9 01       	movw	r30, r18
    3938:	37 97       	sbiw	r30, 0x07	; 7
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
    393a:	80 81       	ld	r24, Z
    393c:	91 81       	ldd	r25, Z+1	; 0x01
    393e:	8a 17       	cp	r24, r26
    3940:	9b 07       	cpc	r25, r27
    3942:	b1 f4       	brne	.+44     	; 0x3970 <TimerUnSet+0x5e>
    3944:	02 c0       	rjmp	.+4      	; 0x394a <TimerUnSet+0x38>
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
	for (int i=0;i<tmrCount;i++) {
    3946:	40 e0       	ldi	r20, 0x00	; 0
    3948:	50 e0       	ldi	r21, 0x00	; 0
		if (tmrEvent[i].EventId==evenId) {
			tmrEvent[i].count=0;
    394a:	fa 01       	movw	r30, r20
    394c:	ee 0f       	add	r30, r30
    394e:	ff 1f       	adc	r31, r31
    3950:	ee 0f       	add	r30, r30
    3952:	ff 1f       	adc	r31, r31
    3954:	ee 0f       	add	r30, r30
    3956:	ff 1f       	adc	r31, r31
    3958:	e4 1b       	sub	r30, r20
    395a:	f5 0b       	sbc	r31, r21
    395c:	e4 54       	subi	r30, 0x44	; 68
    395e:	fd 4f       	sbci	r31, 0xFD	; 253
    3960:	13 82       	std	Z+3, r1	; 0x03
    3962:	12 82       	std	Z+2, r1	; 0x02
			tmrEvent[i].enabled=false;
    3964:	16 82       	std	Z+6, r1	; 0x06
			return;
    3966:	08 95       	ret
    3968:	23 ec       	ldi	r18, 0xC3	; 195
    396a:	32 e0       	ldi	r19, 0x02	; 2
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
	for (int i=0;i<tmrCount;i++) {
    396c:	40 e0       	ldi	r20, 0x00	; 0
    396e:	50 e0       	ldi	r21, 0x00	; 0
    3970:	4f 5f       	subi	r20, 0xFF	; 255
    3972:	5f 4f       	sbci	r21, 0xFF	; 255
    3974:	46 17       	cp	r20, r22
    3976:	57 07       	cpc	r21, r23
    3978:	e1 f6       	brne	.-72     	; 0x3932 <TimerUnSet+0x20>
    397a:	08 95       	ret

0000397c <TimerCheck>:
			return;
		}
	}
}

void TimerCheck(SMO* handle) {
    397c:	cf 92       	push	r12
    397e:	df 92       	push	r13
    3980:	ef 92       	push	r14
    3982:	ff 92       	push	r15
    3984:	0f 93       	push	r16
    3986:	1f 93       	push	r17
    3988:	cf 93       	push	r28
    398a:	df 93       	push	r29
    398c:	6c 01       	movw	r12, r24
	for (int i=0;i<tmrCount;i++) {
    398e:	80 91 98 02 	lds	r24, 0x0298
    3992:	90 91 99 02 	lds	r25, 0x0299
    3996:	18 16       	cp	r1, r24
    3998:	19 06       	cpc	r1, r25
    399a:	94 f5       	brge	.+100    	; 0x3a00 <TimerCheck+0x84>
    399c:	c2 ec       	ldi	r28, 0xC2	; 194
    399e:	d2 e0       	ldi	r29, 0x02	; 2
    39a0:	8e 01       	movw	r16, r28
    39a2:	06 50       	subi	r16, 0x06	; 6
    39a4:	10 40       	sbci	r17, 0x00	; 0
    39a6:	ee 24       	eor	r14, r14
    39a8:	ff 24       	eor	r15, r15
		if (tmrEvent[i].enabled) {
    39aa:	88 81       	ld	r24, Y
    39ac:	88 23       	and	r24, r24
    39ae:	d9 f0       	breq	.+54     	; 0x39e6 <TimerCheck+0x6a>
			tmrEvent[i].count++;
    39b0:	d8 01       	movw	r26, r16
    39b2:	12 96       	adiw	r26, 0x02	; 2
    39b4:	8d 91       	ld	r24, X+
    39b6:	9c 91       	ld	r25, X
    39b8:	13 97       	sbiw	r26, 0x03	; 3
    39ba:	01 96       	adiw	r24, 0x01	; 1
    39bc:	13 96       	adiw	r26, 0x03	; 3
    39be:	9c 93       	st	X, r25
    39c0:	8e 93       	st	-X, r24
    39c2:	12 97       	sbiw	r26, 0x02	; 2
			if (tmrEvent[i].count==tmrEvent[i].max) {
    39c4:	14 96       	adiw	r26, 0x04	; 4
    39c6:	2d 91       	ld	r18, X+
    39c8:	3c 91       	ld	r19, X
    39ca:	15 97       	sbiw	r26, 0x05	; 5
    39cc:	82 17       	cp	r24, r18
    39ce:	93 07       	cpc	r25, r19
    39d0:	51 f4       	brne	.+20     	; 0x39e6 <TimerCheck+0x6a>
				tmrEvent[i].count=0;
    39d2:	13 96       	adiw	r26, 0x03	; 3
    39d4:	1c 92       	st	X, r1
    39d6:	1e 92       	st	-X, r1
    39d8:	12 97       	sbiw	r26, 0x02	; 2
				tmrEvent[i].enabled=false;
    39da:	18 82       	st	Y, r1
				sMO_raiseTimeEvent(handle,tmrEvent[i].EventId);
    39dc:	6d 91       	ld	r22, X+
    39de:	7c 91       	ld	r23, X
    39e0:	c6 01       	movw	r24, r12
    39e2:	0e 94 ee 19 	call	0x33dc	; 0x33dc <sMO_raiseTimeEvent>
		}
	}
}

void TimerCheck(SMO* handle) {
	for (int i=0;i<tmrCount;i++) {
    39e6:	08 94       	sec
    39e8:	e1 1c       	adc	r14, r1
    39ea:	f1 1c       	adc	r15, r1
    39ec:	27 96       	adiw	r28, 0x07	; 7
    39ee:	09 5f       	subi	r16, 0xF9	; 249
    39f0:	1f 4f       	sbci	r17, 0xFF	; 255
    39f2:	80 91 98 02 	lds	r24, 0x0298
    39f6:	90 91 99 02 	lds	r25, 0x0299
    39fa:	e8 16       	cp	r14, r24
    39fc:	f9 06       	cpc	r15, r25
    39fe:	ac f2       	brlt	.-86     	; 0x39aa <TimerCheck+0x2e>
				tmrEvent[i].enabled=false;
				sMO_raiseTimeEvent(handle,tmrEvent[i].EventId);
			}
		}
	}
}
    3a00:	df 91       	pop	r29
    3a02:	cf 91       	pop	r28
    3a04:	1f 91       	pop	r17
    3a06:	0f 91       	pop	r16
    3a08:	ff 90       	pop	r15
    3a0a:	ef 90       	pop	r14
    3a0c:	df 90       	pop	r13
    3a0e:	cf 90       	pop	r12
    3a10:	08 95       	ret

00003a12 <TimerClear>:

void TimerClear() {
	free(tmrEvent);
    3a12:	8c eb       	ldi	r24, 0xBC	; 188
    3a14:	92 e0       	ldi	r25, 0x02	; 2
    3a16:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <free>
	tmrCount=0;
    3a1a:	10 92 99 02 	sts	0x0299, r1
    3a1e:	10 92 98 02 	sts	0x0298, r1
    3a22:	08 95       	ret

00003a24 <__mulsi3>:
    3a24:	62 9f       	mul	r22, r18
    3a26:	d0 01       	movw	r26, r0
    3a28:	73 9f       	mul	r23, r19
    3a2a:	f0 01       	movw	r30, r0
    3a2c:	82 9f       	mul	r24, r18
    3a2e:	e0 0d       	add	r30, r0
    3a30:	f1 1d       	adc	r31, r1
    3a32:	64 9f       	mul	r22, r20
    3a34:	e0 0d       	add	r30, r0
    3a36:	f1 1d       	adc	r31, r1
    3a38:	92 9f       	mul	r25, r18
    3a3a:	f0 0d       	add	r31, r0
    3a3c:	83 9f       	mul	r24, r19
    3a3e:	f0 0d       	add	r31, r0
    3a40:	74 9f       	mul	r23, r20
    3a42:	f0 0d       	add	r31, r0
    3a44:	65 9f       	mul	r22, r21
    3a46:	f0 0d       	add	r31, r0
    3a48:	99 27       	eor	r25, r25
    3a4a:	72 9f       	mul	r23, r18
    3a4c:	b0 0d       	add	r27, r0
    3a4e:	e1 1d       	adc	r30, r1
    3a50:	f9 1f       	adc	r31, r25
    3a52:	63 9f       	mul	r22, r19
    3a54:	b0 0d       	add	r27, r0
    3a56:	e1 1d       	adc	r30, r1
    3a58:	f9 1f       	adc	r31, r25
    3a5a:	bd 01       	movw	r22, r26
    3a5c:	cf 01       	movw	r24, r30
    3a5e:	11 24       	eor	r1, r1
    3a60:	08 95       	ret

00003a62 <__udivmodqi4>:
    3a62:	99 1b       	sub	r25, r25
    3a64:	79 e0       	ldi	r23, 0x09	; 9
    3a66:	04 c0       	rjmp	.+8      	; 0x3a70 <__udivmodqi4_ep>

00003a68 <__udivmodqi4_loop>:
    3a68:	99 1f       	adc	r25, r25
    3a6a:	96 17       	cp	r25, r22
    3a6c:	08 f0       	brcs	.+2      	; 0x3a70 <__udivmodqi4_ep>
    3a6e:	96 1b       	sub	r25, r22

00003a70 <__udivmodqi4_ep>:
    3a70:	88 1f       	adc	r24, r24
    3a72:	7a 95       	dec	r23
    3a74:	c9 f7       	brne	.-14     	; 0x3a68 <__udivmodqi4_loop>
    3a76:	80 95       	com	r24
    3a78:	08 95       	ret

00003a7a <__divmodhi4>:
    3a7a:	97 fb       	bst	r25, 7
    3a7c:	09 2e       	mov	r0, r25
    3a7e:	07 26       	eor	r0, r23
    3a80:	0a d0       	rcall	.+20     	; 0x3a96 <__divmodhi4_neg1>
    3a82:	77 fd       	sbrc	r23, 7
    3a84:	04 d0       	rcall	.+8      	; 0x3a8e <__divmodhi4_neg2>
    3a86:	0c d0       	rcall	.+24     	; 0x3aa0 <__udivmodhi4>
    3a88:	06 d0       	rcall	.+12     	; 0x3a96 <__divmodhi4_neg1>
    3a8a:	00 20       	and	r0, r0
    3a8c:	1a f4       	brpl	.+6      	; 0x3a94 <__divmodhi4_exit>

00003a8e <__divmodhi4_neg2>:
    3a8e:	70 95       	com	r23
    3a90:	61 95       	neg	r22
    3a92:	7f 4f       	sbci	r23, 0xFF	; 255

00003a94 <__divmodhi4_exit>:
    3a94:	08 95       	ret

00003a96 <__divmodhi4_neg1>:
    3a96:	f6 f7       	brtc	.-4      	; 0x3a94 <__divmodhi4_exit>
    3a98:	90 95       	com	r25
    3a9a:	81 95       	neg	r24
    3a9c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a9e:	08 95       	ret

00003aa0 <__udivmodhi4>:
    3aa0:	aa 1b       	sub	r26, r26
    3aa2:	bb 1b       	sub	r27, r27
    3aa4:	51 e1       	ldi	r21, 0x11	; 17
    3aa6:	07 c0       	rjmp	.+14     	; 0x3ab6 <__udivmodhi4_ep>

00003aa8 <__udivmodhi4_loop>:
    3aa8:	aa 1f       	adc	r26, r26
    3aaa:	bb 1f       	adc	r27, r27
    3aac:	a6 17       	cp	r26, r22
    3aae:	b7 07       	cpc	r27, r23
    3ab0:	10 f0       	brcs	.+4      	; 0x3ab6 <__udivmodhi4_ep>
    3ab2:	a6 1b       	sub	r26, r22
    3ab4:	b7 0b       	sbc	r27, r23

00003ab6 <__udivmodhi4_ep>:
    3ab6:	88 1f       	adc	r24, r24
    3ab8:	99 1f       	adc	r25, r25
    3aba:	5a 95       	dec	r21
    3abc:	a9 f7       	brne	.-22     	; 0x3aa8 <__udivmodhi4_loop>
    3abe:	80 95       	com	r24
    3ac0:	90 95       	com	r25
    3ac2:	bc 01       	movw	r22, r24
    3ac4:	cd 01       	movw	r24, r26
    3ac6:	08 95       	ret

00003ac8 <malloc>:
    3ac8:	cf 93       	push	r28
    3aca:	df 93       	push	r29
    3acc:	ac 01       	movw	r20, r24
    3ace:	82 30       	cpi	r24, 0x02	; 2
    3ad0:	91 05       	cpc	r25, r1
    3ad2:	10 f4       	brcc	.+4      	; 0x3ad8 <malloc+0x10>
    3ad4:	42 e0       	ldi	r20, 0x02	; 2
    3ad6:	50 e0       	ldi	r21, 0x00	; 0
    3ad8:	e0 91 04 03 	lds	r30, 0x0304
    3adc:	f0 91 05 03 	lds	r31, 0x0305
    3ae0:	20 e0       	ldi	r18, 0x00	; 0
    3ae2:	30 e0       	ldi	r19, 0x00	; 0
    3ae4:	a0 e0       	ldi	r26, 0x00	; 0
    3ae6:	b0 e0       	ldi	r27, 0x00	; 0
    3ae8:	24 c0       	rjmp	.+72     	; 0x3b32 <malloc+0x6a>
    3aea:	80 81       	ld	r24, Z
    3aec:	91 81       	ldd	r25, Z+1	; 0x01
    3aee:	84 17       	cp	r24, r20
    3af0:	95 07       	cpc	r25, r21
    3af2:	d0 f0       	brcs	.+52     	; 0x3b28 <malloc+0x60>
    3af4:	84 17       	cp	r24, r20
    3af6:	95 07       	cpc	r25, r21
    3af8:	71 f4       	brne	.+28     	; 0x3b16 <malloc+0x4e>
    3afa:	82 81       	ldd	r24, Z+2	; 0x02
    3afc:	93 81       	ldd	r25, Z+3	; 0x03
    3afe:	10 97       	sbiw	r26, 0x00	; 0
    3b00:	29 f0       	breq	.+10     	; 0x3b0c <malloc+0x44>
    3b02:	13 96       	adiw	r26, 0x03	; 3
    3b04:	9c 93       	st	X, r25
    3b06:	8e 93       	st	-X, r24
    3b08:	12 97       	sbiw	r26, 0x02	; 2
    3b0a:	2c c0       	rjmp	.+88     	; 0x3b64 <malloc+0x9c>
    3b0c:	90 93 05 03 	sts	0x0305, r25
    3b10:	80 93 04 03 	sts	0x0304, r24
    3b14:	27 c0       	rjmp	.+78     	; 0x3b64 <malloc+0x9c>
    3b16:	21 15       	cp	r18, r1
    3b18:	31 05       	cpc	r19, r1
    3b1a:	19 f0       	breq	.+6      	; 0x3b22 <malloc+0x5a>
    3b1c:	82 17       	cp	r24, r18
    3b1e:	93 07       	cpc	r25, r19
    3b20:	18 f4       	brcc	.+6      	; 0x3b28 <malloc+0x60>
    3b22:	9c 01       	movw	r18, r24
    3b24:	bd 01       	movw	r22, r26
    3b26:	ef 01       	movw	r28, r30
    3b28:	92 81       	ldd	r25, Z+2	; 0x02
    3b2a:	83 81       	ldd	r24, Z+3	; 0x03
    3b2c:	df 01       	movw	r26, r30
    3b2e:	e9 2f       	mov	r30, r25
    3b30:	f8 2f       	mov	r31, r24
    3b32:	30 97       	sbiw	r30, 0x00	; 0
    3b34:	d1 f6       	brne	.-76     	; 0x3aea <malloc+0x22>
    3b36:	21 15       	cp	r18, r1
    3b38:	31 05       	cpc	r19, r1
    3b3a:	f9 f0       	breq	.+62     	; 0x3b7a <malloc+0xb2>
    3b3c:	c9 01       	movw	r24, r18
    3b3e:	84 1b       	sub	r24, r20
    3b40:	95 0b       	sbc	r25, r21
    3b42:	84 30       	cpi	r24, 0x04	; 4
    3b44:	91 05       	cpc	r25, r1
    3b46:	80 f4       	brcc	.+32     	; 0x3b68 <malloc+0xa0>
    3b48:	8a 81       	ldd	r24, Y+2	; 0x02
    3b4a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b4c:	61 15       	cp	r22, r1
    3b4e:	71 05       	cpc	r23, r1
    3b50:	21 f0       	breq	.+8      	; 0x3b5a <malloc+0x92>
    3b52:	fb 01       	movw	r30, r22
    3b54:	93 83       	std	Z+3, r25	; 0x03
    3b56:	82 83       	std	Z+2, r24	; 0x02
    3b58:	04 c0       	rjmp	.+8      	; 0x3b62 <malloc+0x9a>
    3b5a:	90 93 05 03 	sts	0x0305, r25
    3b5e:	80 93 04 03 	sts	0x0304, r24
    3b62:	fe 01       	movw	r30, r28
    3b64:	32 96       	adiw	r30, 0x02	; 2
    3b66:	42 c0       	rjmp	.+132    	; 0x3bec <malloc+0x124>
    3b68:	fe 01       	movw	r30, r28
    3b6a:	e8 0f       	add	r30, r24
    3b6c:	f9 1f       	adc	r31, r25
    3b6e:	41 93       	st	Z+, r20
    3b70:	51 93       	st	Z+, r21
    3b72:	02 97       	sbiw	r24, 0x02	; 2
    3b74:	99 83       	std	Y+1, r25	; 0x01
    3b76:	88 83       	st	Y, r24
    3b78:	39 c0       	rjmp	.+114    	; 0x3bec <malloc+0x124>
    3b7a:	80 91 02 03 	lds	r24, 0x0302
    3b7e:	90 91 03 03 	lds	r25, 0x0303
    3b82:	00 97       	sbiw	r24, 0x00	; 0
    3b84:	41 f4       	brne	.+16     	; 0x3b96 <malloc+0xce>
    3b86:	80 91 94 02 	lds	r24, 0x0294
    3b8a:	90 91 95 02 	lds	r25, 0x0295
    3b8e:	90 93 03 03 	sts	0x0303, r25
    3b92:	80 93 02 03 	sts	0x0302, r24
    3b96:	20 91 92 02 	lds	r18, 0x0292
    3b9a:	30 91 93 02 	lds	r19, 0x0293
    3b9e:	21 15       	cp	r18, r1
    3ba0:	31 05       	cpc	r19, r1
    3ba2:	41 f4       	brne	.+16     	; 0x3bb4 <malloc+0xec>
    3ba4:	2d b7       	in	r18, 0x3d	; 61
    3ba6:	3e b7       	in	r19, 0x3e	; 62
    3ba8:	80 91 96 02 	lds	r24, 0x0296
    3bac:	90 91 97 02 	lds	r25, 0x0297
    3bb0:	28 1b       	sub	r18, r24
    3bb2:	39 0b       	sbc	r19, r25
    3bb4:	e0 91 02 03 	lds	r30, 0x0302
    3bb8:	f0 91 03 03 	lds	r31, 0x0303
    3bbc:	e2 17       	cp	r30, r18
    3bbe:	f3 07       	cpc	r31, r19
    3bc0:	98 f4       	brcc	.+38     	; 0x3be8 <malloc+0x120>
    3bc2:	2e 1b       	sub	r18, r30
    3bc4:	3f 0b       	sbc	r19, r31
    3bc6:	24 17       	cp	r18, r20
    3bc8:	35 07       	cpc	r19, r21
    3bca:	70 f0       	brcs	.+28     	; 0x3be8 <malloc+0x120>
    3bcc:	ca 01       	movw	r24, r20
    3bce:	02 96       	adiw	r24, 0x02	; 2
    3bd0:	28 17       	cp	r18, r24
    3bd2:	39 07       	cpc	r19, r25
    3bd4:	48 f0       	brcs	.+18     	; 0x3be8 <malloc+0x120>
    3bd6:	8e 0f       	add	r24, r30
    3bd8:	9f 1f       	adc	r25, r31
    3bda:	90 93 03 03 	sts	0x0303, r25
    3bde:	80 93 02 03 	sts	0x0302, r24
    3be2:	41 93       	st	Z+, r20
    3be4:	51 93       	st	Z+, r21
    3be6:	02 c0       	rjmp	.+4      	; 0x3bec <malloc+0x124>
    3be8:	e0 e0       	ldi	r30, 0x00	; 0
    3bea:	f0 e0       	ldi	r31, 0x00	; 0
    3bec:	cf 01       	movw	r24, r30
    3bee:	df 91       	pop	r29
    3bf0:	cf 91       	pop	r28
    3bf2:	08 95       	ret

00003bf4 <free>:
    3bf4:	0f 93       	push	r16
    3bf6:	1f 93       	push	r17
    3bf8:	cf 93       	push	r28
    3bfa:	df 93       	push	r29
    3bfc:	9c 01       	movw	r18, r24
    3bfe:	00 97       	sbiw	r24, 0x00	; 0
    3c00:	09 f4       	brne	.+2      	; 0x3c04 <free+0x10>
    3c02:	8c c0       	rjmp	.+280    	; 0x3d1c <free+0x128>
    3c04:	dc 01       	movw	r26, r24
    3c06:	12 97       	sbiw	r26, 0x02	; 2
    3c08:	13 96       	adiw	r26, 0x03	; 3
    3c0a:	1c 92       	st	X, r1
    3c0c:	1e 92       	st	-X, r1
    3c0e:	12 97       	sbiw	r26, 0x02	; 2
    3c10:	60 91 04 03 	lds	r22, 0x0304
    3c14:	70 91 05 03 	lds	r23, 0x0305
    3c18:	61 15       	cp	r22, r1
    3c1a:	71 05       	cpc	r23, r1
    3c1c:	89 f4       	brne	.+34     	; 0x3c40 <free+0x4c>
    3c1e:	8d 91       	ld	r24, X+
    3c20:	9c 91       	ld	r25, X
    3c22:	11 97       	sbiw	r26, 0x01	; 1
    3c24:	82 0f       	add	r24, r18
    3c26:	93 1f       	adc	r25, r19
    3c28:	20 91 02 03 	lds	r18, 0x0302
    3c2c:	30 91 03 03 	lds	r19, 0x0303
    3c30:	28 17       	cp	r18, r24
    3c32:	39 07       	cpc	r19, r25
    3c34:	69 f5       	brne	.+90     	; 0x3c90 <free+0x9c>
    3c36:	b0 93 03 03 	sts	0x0303, r27
    3c3a:	a0 93 02 03 	sts	0x0302, r26
    3c3e:	6e c0       	rjmp	.+220    	; 0x3d1c <free+0x128>
    3c40:	fb 01       	movw	r30, r22
    3c42:	40 e0       	ldi	r20, 0x00	; 0
    3c44:	50 e0       	ldi	r21, 0x00	; 0
    3c46:	01 c0       	rjmp	.+2      	; 0x3c4a <free+0x56>
    3c48:	fc 01       	movw	r30, r24
    3c4a:	ea 17       	cp	r30, r26
    3c4c:	fb 07       	cpc	r31, r27
    3c4e:	30 f4       	brcc	.+12     	; 0x3c5c <free+0x68>
    3c50:	82 81       	ldd	r24, Z+2	; 0x02
    3c52:	93 81       	ldd	r25, Z+3	; 0x03
    3c54:	af 01       	movw	r20, r30
    3c56:	00 97       	sbiw	r24, 0x00	; 0
    3c58:	b9 f7       	brne	.-18     	; 0x3c48 <free+0x54>
    3c5a:	1f c0       	rjmp	.+62     	; 0x3c9a <free+0xa6>
    3c5c:	e9 01       	movw	r28, r18
    3c5e:	22 97       	sbiw	r28, 0x02	; 2
    3c60:	fb 83       	std	Y+3, r31	; 0x03
    3c62:	ea 83       	std	Y+2, r30	; 0x02
    3c64:	08 81       	ld	r16, Y
    3c66:	19 81       	ldd	r17, Y+1	; 0x01
    3c68:	c9 01       	movw	r24, r18
    3c6a:	80 0f       	add	r24, r16
    3c6c:	91 1f       	adc	r25, r17
    3c6e:	8e 17       	cp	r24, r30
    3c70:	9f 07       	cpc	r25, r31
    3c72:	59 f4       	brne	.+22     	; 0x3c8a <free+0x96>
    3c74:	80 81       	ld	r24, Z
    3c76:	91 81       	ldd	r25, Z+1	; 0x01
    3c78:	80 0f       	add	r24, r16
    3c7a:	91 1f       	adc	r25, r17
    3c7c:	02 96       	adiw	r24, 0x02	; 2
    3c7e:	99 83       	std	Y+1, r25	; 0x01
    3c80:	88 83       	st	Y, r24
    3c82:	82 81       	ldd	r24, Z+2	; 0x02
    3c84:	93 81       	ldd	r25, Z+3	; 0x03
    3c86:	9b 83       	std	Y+3, r25	; 0x03
    3c88:	8a 83       	std	Y+2, r24	; 0x02
    3c8a:	41 15       	cp	r20, r1
    3c8c:	51 05       	cpc	r21, r1
    3c8e:	29 f4       	brne	.+10     	; 0x3c9a <free+0xa6>
    3c90:	b0 93 05 03 	sts	0x0305, r27
    3c94:	a0 93 04 03 	sts	0x0304, r26
    3c98:	41 c0       	rjmp	.+130    	; 0x3d1c <free+0x128>
    3c9a:	fa 01       	movw	r30, r20
    3c9c:	b3 83       	std	Z+3, r27	; 0x03
    3c9e:	a2 83       	std	Z+2, r26	; 0x02
    3ca0:	c1 91       	ld	r28, Z+
    3ca2:	d1 91       	ld	r29, Z+
    3ca4:	ec 0f       	add	r30, r28
    3ca6:	fd 1f       	adc	r31, r29
    3ca8:	ae 17       	cp	r26, r30
    3caa:	bf 07       	cpc	r27, r31
    3cac:	81 f4       	brne	.+32     	; 0x3cce <free+0xda>
    3cae:	f9 01       	movw	r30, r18
    3cb0:	92 91       	ld	r25, -Z
    3cb2:	82 91       	ld	r24, -Z
    3cb4:	8c 0f       	add	r24, r28
    3cb6:	9d 1f       	adc	r25, r29
    3cb8:	02 96       	adiw	r24, 0x02	; 2
    3cba:	da 01       	movw	r26, r20
    3cbc:	11 96       	adiw	r26, 0x01	; 1
    3cbe:	9c 93       	st	X, r25
    3cc0:	8e 93       	st	-X, r24
    3cc2:	82 81       	ldd	r24, Z+2	; 0x02
    3cc4:	93 81       	ldd	r25, Z+3	; 0x03
    3cc6:	13 96       	adiw	r26, 0x03	; 3
    3cc8:	9c 93       	st	X, r25
    3cca:	8e 93       	st	-X, r24
    3ccc:	12 97       	sbiw	r26, 0x02	; 2
    3cce:	e0 e0       	ldi	r30, 0x00	; 0
    3cd0:	f0 e0       	ldi	r31, 0x00	; 0
    3cd2:	02 c0       	rjmp	.+4      	; 0x3cd8 <free+0xe4>
    3cd4:	fb 01       	movw	r30, r22
    3cd6:	bc 01       	movw	r22, r24
    3cd8:	db 01       	movw	r26, r22
    3cda:	12 96       	adiw	r26, 0x02	; 2
    3cdc:	8d 91       	ld	r24, X+
    3cde:	9c 91       	ld	r25, X
    3ce0:	13 97       	sbiw	r26, 0x03	; 3
    3ce2:	00 97       	sbiw	r24, 0x00	; 0
    3ce4:	b9 f7       	brne	.-18     	; 0x3cd4 <free+0xe0>
    3ce6:	cb 01       	movw	r24, r22
    3ce8:	02 96       	adiw	r24, 0x02	; 2
    3cea:	2d 91       	ld	r18, X+
    3cec:	3c 91       	ld	r19, X
    3cee:	11 97       	sbiw	r26, 0x01	; 1
    3cf0:	82 0f       	add	r24, r18
    3cf2:	93 1f       	adc	r25, r19
    3cf4:	20 91 02 03 	lds	r18, 0x0302
    3cf8:	30 91 03 03 	lds	r19, 0x0303
    3cfc:	28 17       	cp	r18, r24
    3cfe:	39 07       	cpc	r19, r25
    3d00:	69 f4       	brne	.+26     	; 0x3d1c <free+0x128>
    3d02:	30 97       	sbiw	r30, 0x00	; 0
    3d04:	29 f4       	brne	.+10     	; 0x3d10 <free+0x11c>
    3d06:	10 92 05 03 	sts	0x0305, r1
    3d0a:	10 92 04 03 	sts	0x0304, r1
    3d0e:	02 c0       	rjmp	.+4      	; 0x3d14 <free+0x120>
    3d10:	13 82       	std	Z+3, r1	; 0x03
    3d12:	12 82       	std	Z+2, r1	; 0x02
    3d14:	70 93 03 03 	sts	0x0303, r23
    3d18:	60 93 02 03 	sts	0x0302, r22
    3d1c:	df 91       	pop	r29
    3d1e:	cf 91       	pop	r28
    3d20:	1f 91       	pop	r17
    3d22:	0f 91       	pop	r16
    3d24:	08 95       	ret

00003d26 <sprintf>:
    3d26:	0f 93       	push	r16
    3d28:	1f 93       	push	r17
    3d2a:	cf 93       	push	r28
    3d2c:	df 93       	push	r29
    3d2e:	cd b7       	in	r28, 0x3d	; 61
    3d30:	de b7       	in	r29, 0x3e	; 62
    3d32:	2e 97       	sbiw	r28, 0x0e	; 14
    3d34:	0f b6       	in	r0, 0x3f	; 63
    3d36:	f8 94       	cli
    3d38:	de bf       	out	0x3e, r29	; 62
    3d3a:	0f be       	out	0x3f, r0	; 63
    3d3c:	cd bf       	out	0x3d, r28	; 61
    3d3e:	0d 89       	ldd	r16, Y+21	; 0x15
    3d40:	1e 89       	ldd	r17, Y+22	; 0x16
    3d42:	86 e0       	ldi	r24, 0x06	; 6
    3d44:	8c 83       	std	Y+4, r24	; 0x04
    3d46:	1a 83       	std	Y+2, r17	; 0x02
    3d48:	09 83       	std	Y+1, r16	; 0x01
    3d4a:	8f ef       	ldi	r24, 0xFF	; 255
    3d4c:	9f e7       	ldi	r25, 0x7F	; 127
    3d4e:	9e 83       	std	Y+6, r25	; 0x06
    3d50:	8d 83       	std	Y+5, r24	; 0x05
    3d52:	ae 01       	movw	r20, r28
    3d54:	47 5e       	subi	r20, 0xE7	; 231
    3d56:	5f 4f       	sbci	r21, 0xFF	; 255
    3d58:	ce 01       	movw	r24, r28
    3d5a:	01 96       	adiw	r24, 0x01	; 1
    3d5c:	6f 89       	ldd	r22, Y+23	; 0x17
    3d5e:	78 8d       	ldd	r23, Y+24	; 0x18
    3d60:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <vfprintf>
    3d64:	ef 81       	ldd	r30, Y+7	; 0x07
    3d66:	f8 85       	ldd	r31, Y+8	; 0x08
    3d68:	e0 0f       	add	r30, r16
    3d6a:	f1 1f       	adc	r31, r17
    3d6c:	10 82       	st	Z, r1
    3d6e:	2e 96       	adiw	r28, 0x0e	; 14
    3d70:	0f b6       	in	r0, 0x3f	; 63
    3d72:	f8 94       	cli
    3d74:	de bf       	out	0x3e, r29	; 62
    3d76:	0f be       	out	0x3f, r0	; 63
    3d78:	cd bf       	out	0x3d, r28	; 61
    3d7a:	df 91       	pop	r29
    3d7c:	cf 91       	pop	r28
    3d7e:	1f 91       	pop	r17
    3d80:	0f 91       	pop	r16
    3d82:	08 95       	ret

00003d84 <vfprintf>:
    3d84:	2f 92       	push	r2
    3d86:	3f 92       	push	r3
    3d88:	4f 92       	push	r4
    3d8a:	5f 92       	push	r5
    3d8c:	6f 92       	push	r6
    3d8e:	7f 92       	push	r7
    3d90:	8f 92       	push	r8
    3d92:	9f 92       	push	r9
    3d94:	af 92       	push	r10
    3d96:	bf 92       	push	r11
    3d98:	cf 92       	push	r12
    3d9a:	df 92       	push	r13
    3d9c:	ef 92       	push	r14
    3d9e:	ff 92       	push	r15
    3da0:	0f 93       	push	r16
    3da2:	1f 93       	push	r17
    3da4:	cf 93       	push	r28
    3da6:	df 93       	push	r29
    3da8:	cd b7       	in	r28, 0x3d	; 61
    3daa:	de b7       	in	r29, 0x3e	; 62
    3dac:	2d 97       	sbiw	r28, 0x0d	; 13
    3dae:	0f b6       	in	r0, 0x3f	; 63
    3db0:	f8 94       	cli
    3db2:	de bf       	out	0x3e, r29	; 62
    3db4:	0f be       	out	0x3f, r0	; 63
    3db6:	cd bf       	out	0x3d, r28	; 61
    3db8:	3c 01       	movw	r6, r24
    3dba:	7d 87       	std	Y+13, r23	; 0x0d
    3dbc:	6c 87       	std	Y+12, r22	; 0x0c
    3dbe:	5a 01       	movw	r10, r20
    3dc0:	fc 01       	movw	r30, r24
    3dc2:	17 82       	std	Z+7, r1	; 0x07
    3dc4:	16 82       	std	Z+6, r1	; 0x06
    3dc6:	83 81       	ldd	r24, Z+3	; 0x03
    3dc8:	81 ff       	sbrs	r24, 1
    3dca:	c8 c1       	rjmp	.+912    	; 0x415c <vfprintf+0x3d8>
    3dcc:	2e 01       	movw	r4, r28
    3dce:	08 94       	sec
    3dd0:	41 1c       	adc	r4, r1
    3dd2:	51 1c       	adc	r5, r1
    3dd4:	f3 01       	movw	r30, r6
    3dd6:	93 81       	ldd	r25, Z+3	; 0x03
    3dd8:	ec 85       	ldd	r30, Y+12	; 0x0c
    3dda:	fd 85       	ldd	r31, Y+13	; 0x0d
    3ddc:	93 fd       	sbrc	r25, 3
    3dde:	85 91       	lpm	r24, Z+
    3de0:	93 ff       	sbrs	r25, 3
    3de2:	81 91       	ld	r24, Z+
    3de4:	fd 87       	std	Y+13, r31	; 0x0d
    3de6:	ec 87       	std	Y+12, r30	; 0x0c
    3de8:	88 23       	and	r24, r24
    3dea:	09 f4       	brne	.+2      	; 0x3dee <vfprintf+0x6a>
    3dec:	b3 c1       	rjmp	.+870    	; 0x4154 <vfprintf+0x3d0>
    3dee:	85 32       	cpi	r24, 0x25	; 37
    3df0:	41 f4       	brne	.+16     	; 0x3e02 <vfprintf+0x7e>
    3df2:	93 fd       	sbrc	r25, 3
    3df4:	85 91       	lpm	r24, Z+
    3df6:	93 ff       	sbrs	r25, 3
    3df8:	81 91       	ld	r24, Z+
    3dfa:	fd 87       	std	Y+13, r31	; 0x0d
    3dfc:	ec 87       	std	Y+12, r30	; 0x0c
    3dfe:	85 32       	cpi	r24, 0x25	; 37
    3e00:	29 f4       	brne	.+10     	; 0x3e0c <vfprintf+0x88>
    3e02:	90 e0       	ldi	r25, 0x00	; 0
    3e04:	b3 01       	movw	r22, r6
    3e06:	0e 94 df 20 	call	0x41be	; 0x41be <fputc>
    3e0a:	e4 cf       	rjmp	.-56     	; 0x3dd4 <vfprintf+0x50>
    3e0c:	ff 24       	eor	r15, r15
    3e0e:	ee 24       	eor	r14, r14
    3e10:	10 e0       	ldi	r17, 0x00	; 0
    3e12:	10 32       	cpi	r17, 0x20	; 32
    3e14:	b0 f4       	brcc	.+44     	; 0x3e42 <vfprintf+0xbe>
    3e16:	8b 32       	cpi	r24, 0x2B	; 43
    3e18:	69 f0       	breq	.+26     	; 0x3e34 <vfprintf+0xb0>
    3e1a:	8c 32       	cpi	r24, 0x2C	; 44
    3e1c:	28 f4       	brcc	.+10     	; 0x3e28 <vfprintf+0xa4>
    3e1e:	80 32       	cpi	r24, 0x20	; 32
    3e20:	51 f0       	breq	.+20     	; 0x3e36 <vfprintf+0xb2>
    3e22:	83 32       	cpi	r24, 0x23	; 35
    3e24:	71 f4       	brne	.+28     	; 0x3e42 <vfprintf+0xbe>
    3e26:	0b c0       	rjmp	.+22     	; 0x3e3e <vfprintf+0xba>
    3e28:	8d 32       	cpi	r24, 0x2D	; 45
    3e2a:	39 f0       	breq	.+14     	; 0x3e3a <vfprintf+0xb6>
    3e2c:	80 33       	cpi	r24, 0x30	; 48
    3e2e:	49 f4       	brne	.+18     	; 0x3e42 <vfprintf+0xbe>
    3e30:	11 60       	ori	r17, 0x01	; 1
    3e32:	2c c0       	rjmp	.+88     	; 0x3e8c <vfprintf+0x108>
    3e34:	12 60       	ori	r17, 0x02	; 2
    3e36:	14 60       	ori	r17, 0x04	; 4
    3e38:	29 c0       	rjmp	.+82     	; 0x3e8c <vfprintf+0x108>
    3e3a:	18 60       	ori	r17, 0x08	; 8
    3e3c:	27 c0       	rjmp	.+78     	; 0x3e8c <vfprintf+0x108>
    3e3e:	10 61       	ori	r17, 0x10	; 16
    3e40:	25 c0       	rjmp	.+74     	; 0x3e8c <vfprintf+0x108>
    3e42:	17 fd       	sbrc	r17, 7
    3e44:	2e c0       	rjmp	.+92     	; 0x3ea2 <vfprintf+0x11e>
    3e46:	28 2f       	mov	r18, r24
    3e48:	20 53       	subi	r18, 0x30	; 48
    3e4a:	2a 30       	cpi	r18, 0x0A	; 10
    3e4c:	98 f4       	brcc	.+38     	; 0x3e74 <vfprintf+0xf0>
    3e4e:	16 ff       	sbrs	r17, 6
    3e50:	08 c0       	rjmp	.+16     	; 0x3e62 <vfprintf+0xde>
    3e52:	8f 2d       	mov	r24, r15
    3e54:	88 0f       	add	r24, r24
    3e56:	f8 2e       	mov	r15, r24
    3e58:	ff 0c       	add	r15, r15
    3e5a:	ff 0c       	add	r15, r15
    3e5c:	f8 0e       	add	r15, r24
    3e5e:	f2 0e       	add	r15, r18
    3e60:	15 c0       	rjmp	.+42     	; 0x3e8c <vfprintf+0x108>
    3e62:	8e 2d       	mov	r24, r14
    3e64:	88 0f       	add	r24, r24
    3e66:	e8 2e       	mov	r14, r24
    3e68:	ee 0c       	add	r14, r14
    3e6a:	ee 0c       	add	r14, r14
    3e6c:	e8 0e       	add	r14, r24
    3e6e:	e2 0e       	add	r14, r18
    3e70:	10 62       	ori	r17, 0x20	; 32
    3e72:	0c c0       	rjmp	.+24     	; 0x3e8c <vfprintf+0x108>
    3e74:	8e 32       	cpi	r24, 0x2E	; 46
    3e76:	21 f4       	brne	.+8      	; 0x3e80 <vfprintf+0xfc>
    3e78:	16 fd       	sbrc	r17, 6
    3e7a:	6c c1       	rjmp	.+728    	; 0x4154 <vfprintf+0x3d0>
    3e7c:	10 64       	ori	r17, 0x40	; 64
    3e7e:	06 c0       	rjmp	.+12     	; 0x3e8c <vfprintf+0x108>
    3e80:	8c 36       	cpi	r24, 0x6C	; 108
    3e82:	11 f4       	brne	.+4      	; 0x3e88 <vfprintf+0x104>
    3e84:	10 68       	ori	r17, 0x80	; 128
    3e86:	02 c0       	rjmp	.+4      	; 0x3e8c <vfprintf+0x108>
    3e88:	88 36       	cpi	r24, 0x68	; 104
    3e8a:	59 f4       	brne	.+22     	; 0x3ea2 <vfprintf+0x11e>
    3e8c:	ec 85       	ldd	r30, Y+12	; 0x0c
    3e8e:	fd 85       	ldd	r31, Y+13	; 0x0d
    3e90:	93 fd       	sbrc	r25, 3
    3e92:	85 91       	lpm	r24, Z+
    3e94:	93 ff       	sbrs	r25, 3
    3e96:	81 91       	ld	r24, Z+
    3e98:	fd 87       	std	Y+13, r31	; 0x0d
    3e9a:	ec 87       	std	Y+12, r30	; 0x0c
    3e9c:	88 23       	and	r24, r24
    3e9e:	09 f0       	breq	.+2      	; 0x3ea2 <vfprintf+0x11e>
    3ea0:	b8 cf       	rjmp	.-144    	; 0x3e12 <vfprintf+0x8e>
    3ea2:	98 2f       	mov	r25, r24
    3ea4:	95 54       	subi	r25, 0x45	; 69
    3ea6:	93 30       	cpi	r25, 0x03	; 3
    3ea8:	18 f0       	brcs	.+6      	; 0x3eb0 <vfprintf+0x12c>
    3eaa:	90 52       	subi	r25, 0x20	; 32
    3eac:	93 30       	cpi	r25, 0x03	; 3
    3eae:	38 f4       	brcc	.+14     	; 0x3ebe <vfprintf+0x13a>
    3eb0:	24 e0       	ldi	r18, 0x04	; 4
    3eb2:	30 e0       	ldi	r19, 0x00	; 0
    3eb4:	a2 0e       	add	r10, r18
    3eb6:	b3 1e       	adc	r11, r19
    3eb8:	3f e3       	ldi	r19, 0x3F	; 63
    3eba:	39 83       	std	Y+1, r19	; 0x01
    3ebc:	0f c0       	rjmp	.+30     	; 0x3edc <vfprintf+0x158>
    3ebe:	83 36       	cpi	r24, 0x63	; 99
    3ec0:	31 f0       	breq	.+12     	; 0x3ece <vfprintf+0x14a>
    3ec2:	83 37       	cpi	r24, 0x73	; 115
    3ec4:	81 f0       	breq	.+32     	; 0x3ee6 <vfprintf+0x162>
    3ec6:	83 35       	cpi	r24, 0x53	; 83
    3ec8:	09 f0       	breq	.+2      	; 0x3ecc <vfprintf+0x148>
    3eca:	5a c0       	rjmp	.+180    	; 0x3f80 <vfprintf+0x1fc>
    3ecc:	22 c0       	rjmp	.+68     	; 0x3f12 <vfprintf+0x18e>
    3ece:	f5 01       	movw	r30, r10
    3ed0:	80 81       	ld	r24, Z
    3ed2:	89 83       	std	Y+1, r24	; 0x01
    3ed4:	22 e0       	ldi	r18, 0x02	; 2
    3ed6:	30 e0       	ldi	r19, 0x00	; 0
    3ed8:	a2 0e       	add	r10, r18
    3eda:	b3 1e       	adc	r11, r19
    3edc:	21 e0       	ldi	r18, 0x01	; 1
    3ede:	c2 2e       	mov	r12, r18
    3ee0:	d1 2c       	mov	r13, r1
    3ee2:	42 01       	movw	r8, r4
    3ee4:	14 c0       	rjmp	.+40     	; 0x3f0e <vfprintf+0x18a>
    3ee6:	92 e0       	ldi	r25, 0x02	; 2
    3ee8:	29 2e       	mov	r2, r25
    3eea:	31 2c       	mov	r3, r1
    3eec:	2a 0c       	add	r2, r10
    3eee:	3b 1c       	adc	r3, r11
    3ef0:	f5 01       	movw	r30, r10
    3ef2:	80 80       	ld	r8, Z
    3ef4:	91 80       	ldd	r9, Z+1	; 0x01
    3ef6:	16 ff       	sbrs	r17, 6
    3ef8:	03 c0       	rjmp	.+6      	; 0x3f00 <vfprintf+0x17c>
    3efa:	6f 2d       	mov	r22, r15
    3efc:	70 e0       	ldi	r23, 0x00	; 0
    3efe:	02 c0       	rjmp	.+4      	; 0x3f04 <vfprintf+0x180>
    3f00:	6f ef       	ldi	r22, 0xFF	; 255
    3f02:	7f ef       	ldi	r23, 0xFF	; 255
    3f04:	c4 01       	movw	r24, r8
    3f06:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <strnlen>
    3f0a:	6c 01       	movw	r12, r24
    3f0c:	51 01       	movw	r10, r2
    3f0e:	1f 77       	andi	r17, 0x7F	; 127
    3f10:	15 c0       	rjmp	.+42     	; 0x3f3c <vfprintf+0x1b8>
    3f12:	82 e0       	ldi	r24, 0x02	; 2
    3f14:	28 2e       	mov	r2, r24
    3f16:	31 2c       	mov	r3, r1
    3f18:	2a 0c       	add	r2, r10
    3f1a:	3b 1c       	adc	r3, r11
    3f1c:	f5 01       	movw	r30, r10
    3f1e:	80 80       	ld	r8, Z
    3f20:	91 80       	ldd	r9, Z+1	; 0x01
    3f22:	16 ff       	sbrs	r17, 6
    3f24:	03 c0       	rjmp	.+6      	; 0x3f2c <vfprintf+0x1a8>
    3f26:	6f 2d       	mov	r22, r15
    3f28:	70 e0       	ldi	r23, 0x00	; 0
    3f2a:	02 c0       	rjmp	.+4      	; 0x3f30 <vfprintf+0x1ac>
    3f2c:	6f ef       	ldi	r22, 0xFF	; 255
    3f2e:	7f ef       	ldi	r23, 0xFF	; 255
    3f30:	c4 01       	movw	r24, r8
    3f32:	0e 94 c9 20 	call	0x4192	; 0x4192 <strnlen_P>
    3f36:	6c 01       	movw	r12, r24
    3f38:	10 68       	ori	r17, 0x80	; 128
    3f3a:	51 01       	movw	r10, r2
    3f3c:	13 fd       	sbrc	r17, 3
    3f3e:	1c c0       	rjmp	.+56     	; 0x3f78 <vfprintf+0x1f4>
    3f40:	06 c0       	rjmp	.+12     	; 0x3f4e <vfprintf+0x1ca>
    3f42:	80 e2       	ldi	r24, 0x20	; 32
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	b3 01       	movw	r22, r6
    3f48:	0e 94 df 20 	call	0x41be	; 0x41be <fputc>
    3f4c:	ea 94       	dec	r14
    3f4e:	8e 2d       	mov	r24, r14
    3f50:	90 e0       	ldi	r25, 0x00	; 0
    3f52:	c8 16       	cp	r12, r24
    3f54:	d9 06       	cpc	r13, r25
    3f56:	a8 f3       	brcs	.-22     	; 0x3f42 <vfprintf+0x1be>
    3f58:	0f c0       	rjmp	.+30     	; 0x3f78 <vfprintf+0x1f4>
    3f5a:	f4 01       	movw	r30, r8
    3f5c:	17 fd       	sbrc	r17, 7
    3f5e:	85 91       	lpm	r24, Z+
    3f60:	17 ff       	sbrs	r17, 7
    3f62:	81 91       	ld	r24, Z+
    3f64:	4f 01       	movw	r8, r30
    3f66:	90 e0       	ldi	r25, 0x00	; 0
    3f68:	b3 01       	movw	r22, r6
    3f6a:	0e 94 df 20 	call	0x41be	; 0x41be <fputc>
    3f6e:	e1 10       	cpse	r14, r1
    3f70:	ea 94       	dec	r14
    3f72:	08 94       	sec
    3f74:	c1 08       	sbc	r12, r1
    3f76:	d1 08       	sbc	r13, r1
    3f78:	c1 14       	cp	r12, r1
    3f7a:	d1 04       	cpc	r13, r1
    3f7c:	71 f7       	brne	.-36     	; 0x3f5a <vfprintf+0x1d6>
    3f7e:	e7 c0       	rjmp	.+462    	; 0x414e <vfprintf+0x3ca>
    3f80:	84 36       	cpi	r24, 0x64	; 100
    3f82:	11 f0       	breq	.+4      	; 0x3f88 <vfprintf+0x204>
    3f84:	89 36       	cpi	r24, 0x69	; 105
    3f86:	51 f5       	brne	.+84     	; 0x3fdc <vfprintf+0x258>
    3f88:	f5 01       	movw	r30, r10
    3f8a:	17 ff       	sbrs	r17, 7
    3f8c:	07 c0       	rjmp	.+14     	; 0x3f9c <vfprintf+0x218>
    3f8e:	80 81       	ld	r24, Z
    3f90:	91 81       	ldd	r25, Z+1	; 0x01
    3f92:	a2 81       	ldd	r26, Z+2	; 0x02
    3f94:	b3 81       	ldd	r27, Z+3	; 0x03
    3f96:	24 e0       	ldi	r18, 0x04	; 4
    3f98:	30 e0       	ldi	r19, 0x00	; 0
    3f9a:	08 c0       	rjmp	.+16     	; 0x3fac <vfprintf+0x228>
    3f9c:	80 81       	ld	r24, Z
    3f9e:	91 81       	ldd	r25, Z+1	; 0x01
    3fa0:	aa 27       	eor	r26, r26
    3fa2:	97 fd       	sbrc	r25, 7
    3fa4:	a0 95       	com	r26
    3fa6:	ba 2f       	mov	r27, r26
    3fa8:	22 e0       	ldi	r18, 0x02	; 2
    3faa:	30 e0       	ldi	r19, 0x00	; 0
    3fac:	a2 0e       	add	r10, r18
    3fae:	b3 1e       	adc	r11, r19
    3fb0:	01 2f       	mov	r16, r17
    3fb2:	0f 76       	andi	r16, 0x6F	; 111
    3fb4:	b7 ff       	sbrs	r27, 7
    3fb6:	08 c0       	rjmp	.+16     	; 0x3fc8 <vfprintf+0x244>
    3fb8:	b0 95       	com	r27
    3fba:	a0 95       	com	r26
    3fbc:	90 95       	com	r25
    3fbe:	81 95       	neg	r24
    3fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    3fc2:	af 4f       	sbci	r26, 0xFF	; 255
    3fc4:	bf 4f       	sbci	r27, 0xFF	; 255
    3fc6:	00 68       	ori	r16, 0x80	; 128
    3fc8:	bc 01       	movw	r22, r24
    3fca:	cd 01       	movw	r24, r26
    3fcc:	a2 01       	movw	r20, r4
    3fce:	2a e0       	ldi	r18, 0x0A	; 10
    3fd0:	30 e0       	ldi	r19, 0x00	; 0
    3fd2:	0e 94 0b 21 	call	0x4216	; 0x4216 <__ultoa_invert>
    3fd6:	d8 2e       	mov	r13, r24
    3fd8:	d4 18       	sub	r13, r4
    3fda:	3f c0       	rjmp	.+126    	; 0x405a <vfprintf+0x2d6>
    3fdc:	85 37       	cpi	r24, 0x75	; 117
    3fde:	21 f4       	brne	.+8      	; 0x3fe8 <vfprintf+0x264>
    3fe0:	1f 7e       	andi	r17, 0xEF	; 239
    3fe2:	2a e0       	ldi	r18, 0x0A	; 10
    3fe4:	30 e0       	ldi	r19, 0x00	; 0
    3fe6:	20 c0       	rjmp	.+64     	; 0x4028 <vfprintf+0x2a4>
    3fe8:	19 7f       	andi	r17, 0xF9	; 249
    3fea:	8f 36       	cpi	r24, 0x6F	; 111
    3fec:	a9 f0       	breq	.+42     	; 0x4018 <vfprintf+0x294>
    3fee:	80 37       	cpi	r24, 0x70	; 112
    3ff0:	20 f4       	brcc	.+8      	; 0x3ffa <vfprintf+0x276>
    3ff2:	88 35       	cpi	r24, 0x58	; 88
    3ff4:	09 f0       	breq	.+2      	; 0x3ff8 <vfprintf+0x274>
    3ff6:	ae c0       	rjmp	.+348    	; 0x4154 <vfprintf+0x3d0>
    3ff8:	0b c0       	rjmp	.+22     	; 0x4010 <vfprintf+0x28c>
    3ffa:	80 37       	cpi	r24, 0x70	; 112
    3ffc:	21 f0       	breq	.+8      	; 0x4006 <vfprintf+0x282>
    3ffe:	88 37       	cpi	r24, 0x78	; 120
    4000:	09 f0       	breq	.+2      	; 0x4004 <vfprintf+0x280>
    4002:	a8 c0       	rjmp	.+336    	; 0x4154 <vfprintf+0x3d0>
    4004:	01 c0       	rjmp	.+2      	; 0x4008 <vfprintf+0x284>
    4006:	10 61       	ori	r17, 0x10	; 16
    4008:	14 ff       	sbrs	r17, 4
    400a:	09 c0       	rjmp	.+18     	; 0x401e <vfprintf+0x29a>
    400c:	14 60       	ori	r17, 0x04	; 4
    400e:	07 c0       	rjmp	.+14     	; 0x401e <vfprintf+0x29a>
    4010:	14 ff       	sbrs	r17, 4
    4012:	08 c0       	rjmp	.+16     	; 0x4024 <vfprintf+0x2a0>
    4014:	16 60       	ori	r17, 0x06	; 6
    4016:	06 c0       	rjmp	.+12     	; 0x4024 <vfprintf+0x2a0>
    4018:	28 e0       	ldi	r18, 0x08	; 8
    401a:	30 e0       	ldi	r19, 0x00	; 0
    401c:	05 c0       	rjmp	.+10     	; 0x4028 <vfprintf+0x2a4>
    401e:	20 e1       	ldi	r18, 0x10	; 16
    4020:	30 e0       	ldi	r19, 0x00	; 0
    4022:	02 c0       	rjmp	.+4      	; 0x4028 <vfprintf+0x2a4>
    4024:	20 e1       	ldi	r18, 0x10	; 16
    4026:	32 e0       	ldi	r19, 0x02	; 2
    4028:	f5 01       	movw	r30, r10
    402a:	17 ff       	sbrs	r17, 7
    402c:	07 c0       	rjmp	.+14     	; 0x403c <vfprintf+0x2b8>
    402e:	60 81       	ld	r22, Z
    4030:	71 81       	ldd	r23, Z+1	; 0x01
    4032:	82 81       	ldd	r24, Z+2	; 0x02
    4034:	93 81       	ldd	r25, Z+3	; 0x03
    4036:	44 e0       	ldi	r20, 0x04	; 4
    4038:	50 e0       	ldi	r21, 0x00	; 0
    403a:	06 c0       	rjmp	.+12     	; 0x4048 <vfprintf+0x2c4>
    403c:	60 81       	ld	r22, Z
    403e:	71 81       	ldd	r23, Z+1	; 0x01
    4040:	80 e0       	ldi	r24, 0x00	; 0
    4042:	90 e0       	ldi	r25, 0x00	; 0
    4044:	42 e0       	ldi	r20, 0x02	; 2
    4046:	50 e0       	ldi	r21, 0x00	; 0
    4048:	a4 0e       	add	r10, r20
    404a:	b5 1e       	adc	r11, r21
    404c:	a2 01       	movw	r20, r4
    404e:	0e 94 0b 21 	call	0x4216	; 0x4216 <__ultoa_invert>
    4052:	d8 2e       	mov	r13, r24
    4054:	d4 18       	sub	r13, r4
    4056:	01 2f       	mov	r16, r17
    4058:	0f 77       	andi	r16, 0x7F	; 127
    405a:	06 ff       	sbrs	r16, 6
    405c:	09 c0       	rjmp	.+18     	; 0x4070 <vfprintf+0x2ec>
    405e:	0e 7f       	andi	r16, 0xFE	; 254
    4060:	df 14       	cp	r13, r15
    4062:	30 f4       	brcc	.+12     	; 0x4070 <vfprintf+0x2ec>
    4064:	04 ff       	sbrs	r16, 4
    4066:	06 c0       	rjmp	.+12     	; 0x4074 <vfprintf+0x2f0>
    4068:	02 fd       	sbrc	r16, 2
    406a:	04 c0       	rjmp	.+8      	; 0x4074 <vfprintf+0x2f0>
    406c:	0f 7e       	andi	r16, 0xEF	; 239
    406e:	02 c0       	rjmp	.+4      	; 0x4074 <vfprintf+0x2f0>
    4070:	1d 2d       	mov	r17, r13
    4072:	01 c0       	rjmp	.+2      	; 0x4076 <vfprintf+0x2f2>
    4074:	1f 2d       	mov	r17, r15
    4076:	80 2f       	mov	r24, r16
    4078:	90 e0       	ldi	r25, 0x00	; 0
    407a:	04 ff       	sbrs	r16, 4
    407c:	0c c0       	rjmp	.+24     	; 0x4096 <vfprintf+0x312>
    407e:	fe 01       	movw	r30, r28
    4080:	ed 0d       	add	r30, r13
    4082:	f1 1d       	adc	r31, r1
    4084:	20 81       	ld	r18, Z
    4086:	20 33       	cpi	r18, 0x30	; 48
    4088:	11 f4       	brne	.+4      	; 0x408e <vfprintf+0x30a>
    408a:	09 7e       	andi	r16, 0xE9	; 233
    408c:	09 c0       	rjmp	.+18     	; 0x40a0 <vfprintf+0x31c>
    408e:	02 ff       	sbrs	r16, 2
    4090:	06 c0       	rjmp	.+12     	; 0x409e <vfprintf+0x31a>
    4092:	1e 5f       	subi	r17, 0xFE	; 254
    4094:	05 c0       	rjmp	.+10     	; 0x40a0 <vfprintf+0x31c>
    4096:	86 78       	andi	r24, 0x86	; 134
    4098:	90 70       	andi	r25, 0x00	; 0
    409a:	00 97       	sbiw	r24, 0x00	; 0
    409c:	09 f0       	breq	.+2      	; 0x40a0 <vfprintf+0x31c>
    409e:	1f 5f       	subi	r17, 0xFF	; 255
    40a0:	80 2e       	mov	r8, r16
    40a2:	99 24       	eor	r9, r9
    40a4:	03 fd       	sbrc	r16, 3
    40a6:	12 c0       	rjmp	.+36     	; 0x40cc <vfprintf+0x348>
    40a8:	00 ff       	sbrs	r16, 0
    40aa:	0d c0       	rjmp	.+26     	; 0x40c6 <vfprintf+0x342>
    40ac:	fd 2c       	mov	r15, r13
    40ae:	1e 15       	cp	r17, r14
    40b0:	50 f4       	brcc	.+20     	; 0x40c6 <vfprintf+0x342>
    40b2:	fe 0c       	add	r15, r14
    40b4:	f1 1a       	sub	r15, r17
    40b6:	1e 2d       	mov	r17, r14
    40b8:	06 c0       	rjmp	.+12     	; 0x40c6 <vfprintf+0x342>
    40ba:	80 e2       	ldi	r24, 0x20	; 32
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	b3 01       	movw	r22, r6
    40c0:	0e 94 df 20 	call	0x41be	; 0x41be <fputc>
    40c4:	1f 5f       	subi	r17, 0xFF	; 255
    40c6:	1e 15       	cp	r17, r14
    40c8:	c0 f3       	brcs	.-16     	; 0x40ba <vfprintf+0x336>
    40ca:	04 c0       	rjmp	.+8      	; 0x40d4 <vfprintf+0x350>
    40cc:	1e 15       	cp	r17, r14
    40ce:	10 f4       	brcc	.+4      	; 0x40d4 <vfprintf+0x350>
    40d0:	e1 1a       	sub	r14, r17
    40d2:	01 c0       	rjmp	.+2      	; 0x40d6 <vfprintf+0x352>
    40d4:	ee 24       	eor	r14, r14
    40d6:	84 fe       	sbrs	r8, 4
    40d8:	0f c0       	rjmp	.+30     	; 0x40f8 <vfprintf+0x374>
    40da:	80 e3       	ldi	r24, 0x30	; 48
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	b3 01       	movw	r22, r6
    40e0:	0e 94 df 20 	call	0x41be	; 0x41be <fputc>
    40e4:	82 fe       	sbrs	r8, 2
    40e6:	1f c0       	rjmp	.+62     	; 0x4126 <vfprintf+0x3a2>
    40e8:	81 fe       	sbrs	r8, 1
    40ea:	03 c0       	rjmp	.+6      	; 0x40f2 <vfprintf+0x36e>
    40ec:	88 e5       	ldi	r24, 0x58	; 88
    40ee:	90 e0       	ldi	r25, 0x00	; 0
    40f0:	10 c0       	rjmp	.+32     	; 0x4112 <vfprintf+0x38e>
    40f2:	88 e7       	ldi	r24, 0x78	; 120
    40f4:	90 e0       	ldi	r25, 0x00	; 0
    40f6:	0d c0       	rjmp	.+26     	; 0x4112 <vfprintf+0x38e>
    40f8:	c4 01       	movw	r24, r8
    40fa:	86 78       	andi	r24, 0x86	; 134
    40fc:	90 70       	andi	r25, 0x00	; 0
    40fe:	00 97       	sbiw	r24, 0x00	; 0
    4100:	91 f0       	breq	.+36     	; 0x4126 <vfprintf+0x3a2>
    4102:	81 fc       	sbrc	r8, 1
    4104:	02 c0       	rjmp	.+4      	; 0x410a <vfprintf+0x386>
    4106:	80 e2       	ldi	r24, 0x20	; 32
    4108:	01 c0       	rjmp	.+2      	; 0x410c <vfprintf+0x388>
    410a:	8b e2       	ldi	r24, 0x2B	; 43
    410c:	07 fd       	sbrc	r16, 7
    410e:	8d e2       	ldi	r24, 0x2D	; 45
    4110:	90 e0       	ldi	r25, 0x00	; 0
    4112:	b3 01       	movw	r22, r6
    4114:	0e 94 df 20 	call	0x41be	; 0x41be <fputc>
    4118:	06 c0       	rjmp	.+12     	; 0x4126 <vfprintf+0x3a2>
    411a:	80 e3       	ldi	r24, 0x30	; 48
    411c:	90 e0       	ldi	r25, 0x00	; 0
    411e:	b3 01       	movw	r22, r6
    4120:	0e 94 df 20 	call	0x41be	; 0x41be <fputc>
    4124:	fa 94       	dec	r15
    4126:	df 14       	cp	r13, r15
    4128:	c0 f3       	brcs	.-16     	; 0x411a <vfprintf+0x396>
    412a:	da 94       	dec	r13
    412c:	f2 01       	movw	r30, r4
    412e:	ed 0d       	add	r30, r13
    4130:	f1 1d       	adc	r31, r1
    4132:	80 81       	ld	r24, Z
    4134:	90 e0       	ldi	r25, 0x00	; 0
    4136:	b3 01       	movw	r22, r6
    4138:	0e 94 df 20 	call	0x41be	; 0x41be <fputc>
    413c:	dd 20       	and	r13, r13
    413e:	a9 f7       	brne	.-22     	; 0x412a <vfprintf+0x3a6>
    4140:	06 c0       	rjmp	.+12     	; 0x414e <vfprintf+0x3ca>
    4142:	80 e2       	ldi	r24, 0x20	; 32
    4144:	90 e0       	ldi	r25, 0x00	; 0
    4146:	b3 01       	movw	r22, r6
    4148:	0e 94 df 20 	call	0x41be	; 0x41be <fputc>
    414c:	ea 94       	dec	r14
    414e:	ee 20       	and	r14, r14
    4150:	c1 f7       	brne	.-16     	; 0x4142 <vfprintf+0x3be>
    4152:	40 ce       	rjmp	.-896    	; 0x3dd4 <vfprintf+0x50>
    4154:	f3 01       	movw	r30, r6
    4156:	86 81       	ldd	r24, Z+6	; 0x06
    4158:	97 81       	ldd	r25, Z+7	; 0x07
    415a:	02 c0       	rjmp	.+4      	; 0x4160 <vfprintf+0x3dc>
    415c:	8f ef       	ldi	r24, 0xFF	; 255
    415e:	9f ef       	ldi	r25, 0xFF	; 255
    4160:	2d 96       	adiw	r28, 0x0d	; 13
    4162:	0f b6       	in	r0, 0x3f	; 63
    4164:	f8 94       	cli
    4166:	de bf       	out	0x3e, r29	; 62
    4168:	0f be       	out	0x3f, r0	; 63
    416a:	cd bf       	out	0x3d, r28	; 61
    416c:	df 91       	pop	r29
    416e:	cf 91       	pop	r28
    4170:	1f 91       	pop	r17
    4172:	0f 91       	pop	r16
    4174:	ff 90       	pop	r15
    4176:	ef 90       	pop	r14
    4178:	df 90       	pop	r13
    417a:	cf 90       	pop	r12
    417c:	bf 90       	pop	r11
    417e:	af 90       	pop	r10
    4180:	9f 90       	pop	r9
    4182:	8f 90       	pop	r8
    4184:	7f 90       	pop	r7
    4186:	6f 90       	pop	r6
    4188:	5f 90       	pop	r5
    418a:	4f 90       	pop	r4
    418c:	3f 90       	pop	r3
    418e:	2f 90       	pop	r2
    4190:	08 95       	ret

00004192 <strnlen_P>:
    4192:	fc 01       	movw	r30, r24
    4194:	05 90       	lpm	r0, Z+
    4196:	61 50       	subi	r22, 0x01	; 1
    4198:	70 40       	sbci	r23, 0x00	; 0
    419a:	01 10       	cpse	r0, r1
    419c:	d8 f7       	brcc	.-10     	; 0x4194 <strnlen_P+0x2>
    419e:	80 95       	com	r24
    41a0:	90 95       	com	r25
    41a2:	8e 0f       	add	r24, r30
    41a4:	9f 1f       	adc	r25, r31
    41a6:	08 95       	ret

000041a8 <strnlen>:
    41a8:	fc 01       	movw	r30, r24
    41aa:	61 50       	subi	r22, 0x01	; 1
    41ac:	70 40       	sbci	r23, 0x00	; 0
    41ae:	01 90       	ld	r0, Z+
    41b0:	01 10       	cpse	r0, r1
    41b2:	d8 f7       	brcc	.-10     	; 0x41aa <strnlen+0x2>
    41b4:	80 95       	com	r24
    41b6:	90 95       	com	r25
    41b8:	8e 0f       	add	r24, r30
    41ba:	9f 1f       	adc	r25, r31
    41bc:	08 95       	ret

000041be <fputc>:
    41be:	0f 93       	push	r16
    41c0:	1f 93       	push	r17
    41c2:	cf 93       	push	r28
    41c4:	df 93       	push	r29
    41c6:	8c 01       	movw	r16, r24
    41c8:	eb 01       	movw	r28, r22
    41ca:	8b 81       	ldd	r24, Y+3	; 0x03
    41cc:	81 ff       	sbrs	r24, 1
    41ce:	1b c0       	rjmp	.+54     	; 0x4206 <fputc+0x48>
    41d0:	82 ff       	sbrs	r24, 2
    41d2:	0d c0       	rjmp	.+26     	; 0x41ee <fputc+0x30>
    41d4:	2e 81       	ldd	r18, Y+6	; 0x06
    41d6:	3f 81       	ldd	r19, Y+7	; 0x07
    41d8:	8c 81       	ldd	r24, Y+4	; 0x04
    41da:	9d 81       	ldd	r25, Y+5	; 0x05
    41dc:	28 17       	cp	r18, r24
    41de:	39 07       	cpc	r19, r25
    41e0:	64 f4       	brge	.+24     	; 0x41fa <fputc+0x3c>
    41e2:	e8 81       	ld	r30, Y
    41e4:	f9 81       	ldd	r31, Y+1	; 0x01
    41e6:	01 93       	st	Z+, r16
    41e8:	f9 83       	std	Y+1, r31	; 0x01
    41ea:	e8 83       	st	Y, r30
    41ec:	06 c0       	rjmp	.+12     	; 0x41fa <fputc+0x3c>
    41ee:	e8 85       	ldd	r30, Y+8	; 0x08
    41f0:	f9 85       	ldd	r31, Y+9	; 0x09
    41f2:	80 2f       	mov	r24, r16
    41f4:	09 95       	icall
    41f6:	00 97       	sbiw	r24, 0x00	; 0
    41f8:	31 f4       	brne	.+12     	; 0x4206 <fputc+0x48>
    41fa:	8e 81       	ldd	r24, Y+6	; 0x06
    41fc:	9f 81       	ldd	r25, Y+7	; 0x07
    41fe:	01 96       	adiw	r24, 0x01	; 1
    4200:	9f 83       	std	Y+7, r25	; 0x07
    4202:	8e 83       	std	Y+6, r24	; 0x06
    4204:	02 c0       	rjmp	.+4      	; 0x420a <fputc+0x4c>
    4206:	0f ef       	ldi	r16, 0xFF	; 255
    4208:	1f ef       	ldi	r17, 0xFF	; 255
    420a:	c8 01       	movw	r24, r16
    420c:	df 91       	pop	r29
    420e:	cf 91       	pop	r28
    4210:	1f 91       	pop	r17
    4212:	0f 91       	pop	r16
    4214:	08 95       	ret

00004216 <__ultoa_invert>:
    4216:	fa 01       	movw	r30, r20
    4218:	aa 27       	eor	r26, r26
    421a:	28 30       	cpi	r18, 0x08	; 8
    421c:	51 f1       	breq	.+84     	; 0x4272 <__ultoa_invert+0x5c>
    421e:	20 31       	cpi	r18, 0x10	; 16
    4220:	81 f1       	breq	.+96     	; 0x4282 <__ultoa_invert+0x6c>
    4222:	e8 94       	clt
    4224:	6f 93       	push	r22
    4226:	6e 7f       	andi	r22, 0xFE	; 254
    4228:	6e 5f       	subi	r22, 0xFE	; 254
    422a:	7f 4f       	sbci	r23, 0xFF	; 255
    422c:	8f 4f       	sbci	r24, 0xFF	; 255
    422e:	9f 4f       	sbci	r25, 0xFF	; 255
    4230:	af 4f       	sbci	r26, 0xFF	; 255
    4232:	b1 e0       	ldi	r27, 0x01	; 1
    4234:	3e d0       	rcall	.+124    	; 0x42b2 <__ultoa_invert+0x9c>
    4236:	b4 e0       	ldi	r27, 0x04	; 4
    4238:	3c d0       	rcall	.+120    	; 0x42b2 <__ultoa_invert+0x9c>
    423a:	67 0f       	add	r22, r23
    423c:	78 1f       	adc	r23, r24
    423e:	89 1f       	adc	r24, r25
    4240:	9a 1f       	adc	r25, r26
    4242:	a1 1d       	adc	r26, r1
    4244:	68 0f       	add	r22, r24
    4246:	79 1f       	adc	r23, r25
    4248:	8a 1f       	adc	r24, r26
    424a:	91 1d       	adc	r25, r1
    424c:	a1 1d       	adc	r26, r1
    424e:	6a 0f       	add	r22, r26
    4250:	71 1d       	adc	r23, r1
    4252:	81 1d       	adc	r24, r1
    4254:	91 1d       	adc	r25, r1
    4256:	a1 1d       	adc	r26, r1
    4258:	20 d0       	rcall	.+64     	; 0x429a <__ultoa_invert+0x84>
    425a:	09 f4       	brne	.+2      	; 0x425e <__ultoa_invert+0x48>
    425c:	68 94       	set
    425e:	3f 91       	pop	r19
    4260:	2a e0       	ldi	r18, 0x0A	; 10
    4262:	26 9f       	mul	r18, r22
    4264:	11 24       	eor	r1, r1
    4266:	30 19       	sub	r19, r0
    4268:	30 5d       	subi	r19, 0xD0	; 208
    426a:	31 93       	st	Z+, r19
    426c:	de f6       	brtc	.-74     	; 0x4224 <__ultoa_invert+0xe>
    426e:	cf 01       	movw	r24, r30
    4270:	08 95       	ret
    4272:	46 2f       	mov	r20, r22
    4274:	47 70       	andi	r20, 0x07	; 7
    4276:	40 5d       	subi	r20, 0xD0	; 208
    4278:	41 93       	st	Z+, r20
    427a:	b3 e0       	ldi	r27, 0x03	; 3
    427c:	0f d0       	rcall	.+30     	; 0x429c <__ultoa_invert+0x86>
    427e:	c9 f7       	brne	.-14     	; 0x4272 <__ultoa_invert+0x5c>
    4280:	f6 cf       	rjmp	.-20     	; 0x426e <__ultoa_invert+0x58>
    4282:	46 2f       	mov	r20, r22
    4284:	4f 70       	andi	r20, 0x0F	; 15
    4286:	40 5d       	subi	r20, 0xD0	; 208
    4288:	4a 33       	cpi	r20, 0x3A	; 58
    428a:	18 f0       	brcs	.+6      	; 0x4292 <__ultoa_invert+0x7c>
    428c:	49 5d       	subi	r20, 0xD9	; 217
    428e:	31 fd       	sbrc	r19, 1
    4290:	40 52       	subi	r20, 0x20	; 32
    4292:	41 93       	st	Z+, r20
    4294:	02 d0       	rcall	.+4      	; 0x429a <__ultoa_invert+0x84>
    4296:	a9 f7       	brne	.-22     	; 0x4282 <__ultoa_invert+0x6c>
    4298:	ea cf       	rjmp	.-44     	; 0x426e <__ultoa_invert+0x58>
    429a:	b4 e0       	ldi	r27, 0x04	; 4
    429c:	a6 95       	lsr	r26
    429e:	97 95       	ror	r25
    42a0:	87 95       	ror	r24
    42a2:	77 95       	ror	r23
    42a4:	67 95       	ror	r22
    42a6:	ba 95       	dec	r27
    42a8:	c9 f7       	brne	.-14     	; 0x429c <__ultoa_invert+0x86>
    42aa:	00 97       	sbiw	r24, 0x00	; 0
    42ac:	61 05       	cpc	r22, r1
    42ae:	71 05       	cpc	r23, r1
    42b0:	08 95       	ret
    42b2:	9b 01       	movw	r18, r22
    42b4:	ac 01       	movw	r20, r24
    42b6:	0a 2e       	mov	r0, r26
    42b8:	06 94       	lsr	r0
    42ba:	57 95       	ror	r21
    42bc:	47 95       	ror	r20
    42be:	37 95       	ror	r19
    42c0:	27 95       	ror	r18
    42c2:	ba 95       	dec	r27
    42c4:	c9 f7       	brne	.-14     	; 0x42b8 <__ultoa_invert+0xa2>
    42c6:	62 0f       	add	r22, r18
    42c8:	73 1f       	adc	r23, r19
    42ca:	84 1f       	adc	r24, r20
    42cc:	95 1f       	adc	r25, r21
    42ce:	a0 1d       	adc	r26, r0
    42d0:	08 95       	ret

000042d2 <_exit>:
    42d2:	f8 94       	cli

000042d4 <__stop_program>:
    42d4:	ff cf       	rjmp	.-2      	; 0x42d4 <__stop_program>
