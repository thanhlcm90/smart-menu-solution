
SMR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011e  00800100  0000228e  00002322  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000228e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008d  0080021e  0080021e  00002440  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00002440  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  000030c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000248  00000000  00000000  00003280  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003ba3  00000000  00000000  000034c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001174  00000000  00000000  0000706b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017e9  00000000  00000000  000081df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bc8  00000000  00000000  000099c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001276  00000000  00000000  0000a590  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027d3  00000000  00000000  0000b806  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000dfd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 a8 03 	jmp	0x750	; 0x750 <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__vector_30>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e8       	ldi	r30, 0x8E	; 142
      a0:	f2 e2       	ldi	r31, 0x22	; 34
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 31       	cpi	r26, 0x1E	; 30
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	ae e1       	ldi	r26, 0x1E	; 30
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ab 3a       	cpi	r26, 0xAB	; 171
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 65 03 	call	0x6ca	; 0x6ca <main>
      c6:	0c 94 45 11 	jmp	0x228a	; 0x228a <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <KEYPAD_Check>:
//uint8_t ascii_code[4][4]={16,15,14,13,
						  //12,9,6,3,
						  //10,8,5,2,
						  //11,7,4,1};

uint8_t KEYPAD_Check() {
      ce:	af 92       	push	r10
      d0:	bf 92       	push	r11
      d2:	cf 92       	push	r12
      d4:	df 92       	push	r13
      d6:	ef 92       	push	r14
      d8:	ff 92       	push	r15
      da:	0f 93       	push	r16
      dc:	1f 93       	push	r17
      de:	cf 93       	push	r28
      e0:	df 93       	push	r29
      e2:	20 e0       	ldi	r18, 0x00	; 0
      e4:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
      e6:	41 e0       	ldi	r20, 0x01	; 1
      e8:	50 e0       	ldi	r21, 0x00	; 0
      ea:	e2 e6       	ldi	r30, 0x62	; 98
      ec:	f0 e0       	ldi	r31, 0x00	; 0
		_delay_us(10);
		keyin=KEYPAD_PIN & 0x0F;
		if (keyin!=0x0F)
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
      ee:	a0 e1       	ldi	r26, 0x10	; 16
      f0:	b1 e0       	ldi	r27, 0x01	; 1
      f2:	0f 2e       	mov	r0, r31
      f4:	f1 e1       	ldi	r31, 0x11	; 17
      f6:	af 2e       	mov	r10, r31
      f8:	f1 e0       	ldi	r31, 0x01	; 1
      fa:	bf 2e       	mov	r11, r31
      fc:	f0 2d       	mov	r31, r0
      fe:	02 e1       	ldi	r16, 0x12	; 18
     100:	11 e0       	ldi	r17, 0x01	; 1
     102:	0f 2e       	mov	r0, r31
     104:	f3 e1       	ldi	r31, 0x13	; 19
     106:	ef 2e       	mov	r14, r31
     108:	f1 e0       	ldi	r31, 0x01	; 1
     10a:	ff 2e       	mov	r15, r31
     10c:	f0 2d       	mov	r31, r0
						  //11,7,4,1};

uint8_t KEYPAD_Check() {
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     10e:	b9 01       	movw	r22, r18
//uint8_t ascii_code[4][4]={16,15,14,13,
						  //12,9,6,3,
						  //10,8,5,2,
						  //11,7,4,1};

uint8_t KEYPAD_Check() {
     110:	c9 01       	movw	r24, r18
     112:	04 96       	adiw	r24, 0x04	; 4
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     114:	6a 01       	movw	r12, r20
     116:	02 c0       	rjmp	.+4      	; 0x11c <KEYPAD_Check+0x4e>
     118:	cc 0c       	add	r12, r12
     11a:	dd 1c       	adc	r13, r13
     11c:	8a 95       	dec	r24
     11e:	e2 f7       	brpl	.-8      	; 0x118 <KEYPAD_Check+0x4a>
     120:	c6 01       	movw	r24, r12
     122:	80 95       	com	r24
     124:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     126:	83 e0       	ldi	r24, 0x03	; 3
     128:	8a 95       	dec	r24
     12a:	f1 f7       	brne	.-4      	; 0x128 <KEYPAD_Check+0x5a>
     12c:	00 00       	nop
		_delay_us(10);
		keyin=KEYPAD_PIN & 0x0F;
     12e:	80 b1       	in	r24, 0x00	; 0
     130:	8f 70       	andi	r24, 0x0F	; 15
		if (keyin!=0x0F)
     132:	8f 30       	cpi	r24, 0x0F	; 15
     134:	29 f1       	breq	.+74     	; 0x180 <KEYPAD_Check+0xb2>
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
     136:	9c 91       	ld	r25, X
     138:	98 17       	cp	r25, r24
     13a:	a9 f0       	breq	.+42     	; 0x166 <KEYPAD_Check+0x98>
     13c:	e5 01       	movw	r28, r10
     13e:	98 81       	ld	r25, Y
     140:	98 17       	cp	r25, r24
     142:	59 f0       	breq	.+22     	; 0x15a <KEYPAD_Check+0x8c>
     144:	e8 01       	movw	r28, r16
     146:	98 81       	ld	r25, Y
     148:	98 17       	cp	r25, r24
     14a:	51 f0       	breq	.+20     	; 0x160 <KEYPAD_Check+0x92>
     14c:	e7 01       	movw	r28, r14
     14e:	98 81       	ld	r25, Y
     150:	98 17       	cp	r25, r24
     152:	b1 f4       	brne	.+44     	; 0x180 <KEYPAD_Check+0xb2>
     154:	e3 e0       	ldi	r30, 0x03	; 3
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	08 c0       	rjmp	.+16     	; 0x16a <KEYPAD_Check+0x9c>
     15a:	e1 e0       	ldi	r30, 0x01	; 1
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	05 c0       	rjmp	.+10     	; 0x16a <KEYPAD_Check+0x9c>
     160:	e2 e0       	ldi	r30, 0x02	; 2
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	02 c0       	rjmp	.+4      	; 0x16a <KEYPAD_Check+0x9c>
     166:	e0 e0       	ldi	r30, 0x00	; 0
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	ee 0f       	add	r30, r30
     16c:	ff 1f       	adc	r31, r31
     16e:	ee 0f       	add	r30, r30
     170:	ff 1f       	adc	r31, r31
     172:	6e 0f       	add	r22, r30
     174:	7f 1f       	adc	r23, r31
     176:	fb 01       	movw	r30, r22
     178:	e0 50       	subi	r30, 0x00	; 0
     17a:	ff 4f       	sbci	r31, 0xFF	; 255
     17c:	80 81       	ld	r24, Z
     17e:	06 c0       	rjmp	.+12     	; 0x18c <KEYPAD_Check+0xbe>
     180:	2f 5f       	subi	r18, 0xFF	; 255
     182:	3f 4f       	sbci	r19, 0xFF	; 255
						  //10,8,5,2,
						  //11,7,4,1};

uint8_t KEYPAD_Check() {
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
     184:	24 30       	cpi	r18, 0x04	; 4
     186:	31 05       	cpc	r19, r1
     188:	11 f6       	brne	.-124    	; 0x10e <KEYPAD_Check+0x40>
		keyin=KEYPAD_PIN & 0x0F;
		if (keyin!=0x0F)
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
	}
	return 0;
     18a:	80 e0       	ldi	r24, 0x00	; 0
}
     18c:	df 91       	pop	r29
     18e:	cf 91       	pop	r28
     190:	1f 91       	pop	r17
     192:	0f 91       	pop	r16
     194:	ff 90       	pop	r15
     196:	ef 90       	pop	r14
     198:	df 90       	pop	r13
     19a:	cf 90       	pop	r12
     19c:	bf 90       	pop	r11
     19e:	af 90       	pop	r10
     1a0:	08 95       	ret

000001a2 <KEYPAD_Init>:

void KEYPAD_Init()
{
	//Khai bao huong cho cac chan ket noi keypad
	KEYPAD_DDR=0xF0;
     1a2:	80 ef       	ldi	r24, 0xF0	; 240
     1a4:	80 93 61 00 	sts	0x0061, r24
	KEYPAD_PORT=0x0F;
     1a8:	8f e0       	ldi	r24, 0x0F	; 15
     1aa:	80 93 62 00 	sts	0x0062, r24
     1ae:	08 95       	ret

000001b0 <LCDBusyLoop>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1b0:	8f ec       	ldi	r24, 0xCF	; 207
     1b2:	97 e0       	ldi	r25, 0x07	; 7
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	f1 f7       	brne	.-4      	; 0x1b4 <LCDBusyLoop+0x4>
     1b8:	00 c0       	rjmp	.+0      	; 0x1ba <LCDBusyLoop+0xa>
     1ba:	00 00       	nop
}

void LCDBusyLoop()
{
	_delay_ms(8);
}
     1bc:	08 95       	ret

000001be <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
     1be:	28 2f       	mov	r18, r24
     1c0:	22 95       	swap	r18
     1c2:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
     1c4:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
     1c6:	66 23       	and	r22, r22
     1c8:	11 f4       	brne	.+4      	; 0x1ce <LCDByte+0x10>
CLEAR_RS();
     1ca:	d8 98       	cbi	0x1b, 0	; 27
     1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <LCDByte+0x12>
else
SET_RS();
     1ce:	d8 9a       	sbi	0x1b, 0	; 27

//_delay_ms(0.500);		//tAS

SET_E();
     1d0:	d9 9a       	sbi	0x1b, 1	; 27

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
     1d2:	9b b3       	in	r25, 0x1b	; 27
     1d4:	22 0f       	add	r18, r18
     1d6:	22 0f       	add	r18, r18
     1d8:	93 7c       	andi	r25, 0xC3	; 195
     1da:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
     1dc:	9b bb       	out	0x1b, r25	; 27

//_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
     1de:	d9 98       	cbi	0x1b, 1	; 27

//_delay_us(1);

//Send the lower nibble
SET_E();
     1e0:	d9 9a       	sbi	0x1b, 1	; 27

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
     1e2:	9b b3       	in	r25, 0x1b	; 27
     1e4:	88 0f       	add	r24, r24
     1e6:	88 0f       	add	r24, r24
     1e8:	93 7c       	andi	r25, 0xC3	; 195
     1ea:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     1ec:	8b bb       	out	0x1b, r24	; 27

//_delay_us(1);			//tEH

//SEND

CLEAR_E();
     1ee:	d9 98       	cbi	0x1b, 1	; 27

//_delay_us(1);			//tEL

LCDBusyLoop();
     1f0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCDBusyLoop>
}
     1f4:	08 95       	ret

000001f6 <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
     1f6:	0f 93       	push	r16
     1f8:	1f 93       	push	r17
     1fa:	cf 93       	push	r28
     1fc:	df 93       	push	r29
     1fe:	8c 01       	movw	r16, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     200:	fc 01       	movw	r30, r24
     202:	80 81       	ld	r24, Z
     204:	88 23       	and	r24, r24
     206:	09 f1       	breq	.+66     	; 0x24a <LCDWriteString+0x54>
 {
 	//Custom Char Support
	if(*msg=='%')
     208:	85 32       	cpi	r24, 0x25	; 37
     20a:	a9 f4       	brne	.+42     	; 0x236 <LCDWriteString+0x40>
	{
		msg++;
     20c:	e8 01       	movw	r28, r16
     20e:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
     210:	f8 01       	movw	r30, r16
     212:	81 81       	ldd	r24, Z+1	; 0x01
     214:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
     216:	88 30       	cpi	r24, 0x08	; 8
     218:	20 f4       	brcc	.+8      	; 0x222 <LCDWriteString+0x2c>
		{
			LCDData(cc);
     21a:	61 e0       	ldi	r22, 0x01	; 1
     21c:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
     220:	0e c0       	rjmp	.+28     	; 0x23e <LCDWriteString+0x48>
		}
		else
		{
			LCDData('%');
     222:	85 e2       	ldi	r24, 0x25	; 37
     224:	61 e0       	ldi	r22, 0x01	; 1
     226:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
			LCDData(*msg);
     22a:	f8 01       	movw	r30, r16
     22c:	81 81       	ldd	r24, Z+1	; 0x01
     22e:	61 e0       	ldi	r22, 0x01	; 1
     230:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
     234:	04 c0       	rjmp	.+8      	; 0x23e <LCDWriteString+0x48>
		}
	}
	else
	{
		LCDData(*msg);
     236:	61 e0       	ldi	r22, 0x01	; 1
     238:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
     23c:	e8 01       	movw	r28, r16
	}
	msg++;
     23e:	8e 01       	movw	r16, r28
     240:	0f 5f       	subi	r16, 0xFF	; 255
     242:	1f 4f       	sbci	r17, 0xFF	; 255
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     244:	89 81       	ldd	r24, Y+1	; 0x01
     246:	88 23       	and	r24, r24
     248:	f9 f6       	brne	.-66     	; 0x208 <LCDWriteString+0x12>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	1f 91       	pop	r17
     250:	0f 91       	pop	r16
     252:	08 95       	ret

00000254 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     254:	ef 92       	push	r14
     256:	ff 92       	push	r15
     258:	0f 93       	push	r16
     25a:	1f 93       	push	r17
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	00 d0       	rcall	.+0      	; 0x262 <LCDWriteInt+0xe>
     262:	00 d0       	rcall	.+0      	; 0x264 <LCDWriteInt+0x10>
     264:	0f 92       	push	r0
     266:	cd b7       	in	r28, 0x3d	; 61
     268:	de b7       	in	r29, 0x3e	; 62
     26a:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     26c:	fe 01       	movw	r30, r28
     26e:	31 96       	adiw	r30, 0x01	; 1
     270:	25 e0       	ldi	r18, 0x05	; 5
     272:	df 01       	movw	r26, r30
     274:	1d 92       	st	X+, r1
     276:	2a 95       	dec	r18
     278:	e9 f7       	brne	.-6      	; 0x274 <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
     27a:	00 97       	sbiw	r24, 0x00	; 0
     27c:	61 f0       	breq	.+24     	; 0x296 <LCDWriteInt+0x42>
     27e:	fe 01       	movw	r30, r28
     280:	36 96       	adiw	r30, 0x06	; 6
	{
	str[i]=val%10;
     282:	2a e0       	ldi	r18, 0x0A	; 10
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	b9 01       	movw	r22, r18
     288:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__divmodhi4>
     28c:	82 93       	st	-Z, r24
	val=val/10;
     28e:	86 2f       	mov	r24, r22
     290:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     292:	00 97       	sbiw	r24, 0x00	; 0
     294:	c1 f7       	brne	.-16     	; 0x286 <LCDWriteInt+0x32>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     296:	bf ef       	ldi	r27, 0xFF	; 255
     298:	eb 16       	cp	r14, r27
     29a:	bf ef       	ldi	r27, 0xFF	; 255
     29c:	fb 06       	cpc	r15, r27
     29e:	69 f4       	brne	.+26     	; 0x2ba <LCDWriteInt+0x66>
		while(str[j]==0) j++;
     2a0:	29 81       	ldd	r18, Y+1	; 0x01
     2a2:	22 23       	and	r18, r18
     2a4:	79 f4       	brne	.+30     	; 0x2c4 <LCDWriteInt+0x70>
     2a6:	fe 01       	movw	r30, r28
     2a8:	32 96       	adiw	r30, 0x02	; 2
     2aa:	00 e0       	ldi	r16, 0x00	; 0
     2ac:	10 e0       	ldi	r17, 0x00	; 0
     2ae:	0f 5f       	subi	r16, 0xFF	; 255
     2b0:	1f 4f       	sbci	r17, 0xFF	; 255
     2b2:	21 91       	ld	r18, Z+
     2b4:	22 23       	and	r18, r18
     2b6:	d9 f3       	breq	.-10     	; 0x2ae <LCDWriteInt+0x5a>
     2b8:	07 c0       	rjmp	.+14     	; 0x2c8 <LCDWriteInt+0x74>
	else
		j=5-field_length;
     2ba:	05 e0       	ldi	r16, 0x05	; 5
     2bc:	10 e0       	ldi	r17, 0x00	; 0
     2be:	0e 19       	sub	r16, r14
     2c0:	1f 09       	sbc	r17, r15
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <LCDWriteInt+0x74>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
     2c4:	00 e0       	ldi	r16, 0x00	; 0
     2c6:	10 e0       	ldi	r17, 0x00	; 0
	else
		j=5-field_length;

	if(val<0) LCDData('-');
     2c8:	99 23       	and	r25, r25
     2ca:	24 f4       	brge	.+8      	; 0x2d4 <LCDWriteInt+0x80>
     2cc:	8d e2       	ldi	r24, 0x2D	; 45
     2ce:	61 e0       	ldi	r22, 0x01	; 1
     2d0:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
	for(i=j;i<5;i++)
     2d4:	05 30       	cpi	r16, 0x05	; 5
     2d6:	11 05       	cpc	r17, r1
     2d8:	bc f4       	brge	.+46     	; 0x308 <LCDWriteInt+0xb4>
	}
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
     2da:	e1 e0       	ldi	r30, 0x01	; 1
     2dc:	f0 e0       	ldi	r31, 0x00	; 0
     2de:	ec 0f       	add	r30, r28
     2e0:	fd 1f       	adc	r31, r29
     2e2:	0e 0f       	add	r16, r30
     2e4:	1f 1f       	adc	r17, r31
     2e6:	0f 2e       	mov	r0, r31
     2e8:	f6 e0       	ldi	r31, 0x06	; 6
     2ea:	ef 2e       	mov	r14, r31
     2ec:	ff 24       	eor	r15, r15
     2ee:	f0 2d       	mov	r31, r0
     2f0:	ec 0e       	add	r14, r28
     2f2:	fd 1e       	adc	r15, r29
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     2f4:	d8 01       	movw	r26, r16
     2f6:	8d 91       	ld	r24, X+
     2f8:	8d 01       	movw	r16, r26
     2fa:	80 5d       	subi	r24, 0xD0	; 208
     2fc:	61 e0       	ldi	r22, 0x01	; 1
     2fe:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     302:	0e 15       	cp	r16, r14
     304:	1f 05       	cpc	r17, r15
     306:	b1 f7       	brne	.-20     	; 0x2f4 <LCDWriteInt+0xa0>
	{
	LCDData(48+str[i]);
	}
}
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	0f 90       	pop	r0
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	1f 91       	pop	r17
     318:	0f 91       	pop	r16
     31a:	ff 90       	pop	r15
     31c:	ef 90       	pop	r14
     31e:	08 95       	ret

00000320 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
     320:	84 31       	cpi	r24, 0x14	; 20
     322:	78 f4       	brcc	.+30     	; 0x342 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
     324:	62 30       	cpi	r22, 0x02	; 2
     326:	31 f0       	breq	.+12     	; 0x334 <LCDGotoXY+0x14>
     328:	63 30       	cpi	r22, 0x03	; 3
     32a:	31 f0       	breq	.+12     	; 0x338 <LCDGotoXY+0x18>
     32c:	61 30       	cpi	r22, 0x01	; 1
     32e:	29 f4       	brne	.+10     	; 0x33a <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
     330:	80 64       	ori	r24, 0x40	; 64
			break;
     332:	03 c0       	rjmp	.+6      	; 0x33a <LCDGotoXY+0x1a>
		case 2:
			x+=0x14;
     334:	8c 5e       	subi	r24, 0xEC	; 236
			break;
     336:	01 c0       	rjmp	.+2      	; 0x33a <LCDGotoXY+0x1a>
		case 3:
			x+=0x54;
     338:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
     33a:	80 68       	ori	r24, 0x80	; 128
     33c:	60 e0       	ldi	r22, 0x00	; 0
     33e:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
     342:	08 95       	ret

00000344 <LCDInit>:
{
	_delay_ms(8);
}

void LCDInit(uint8_t style)
{
     344:	0f 93       	push	r16
     346:	1f 93       	push	r17
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	c8 2f       	mov	r28, r24
     34e:	8b e4       	ldi	r24, 0x4B	; 75
     350:	9d e1       	ldi	r25, 0x1D	; 29
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	f1 f7       	brne	.-4      	; 0x352 <LCDInit+0xe>
     356:	00 c0       	rjmp	.+0      	; 0x358 <LCDInit+0x14>
     358:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
     35a:	8a b3       	in	r24, 0x1a	; 26
     35c:	8c 63       	ori	r24, 0x3C	; 60
     35e:	8a bb       	out	0x1a, r24	; 26
	LCD_E_DDR|=(1<<LCD_E_POS);
     360:	d1 9a       	sbi	0x1a, 1	; 26
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     362:	d0 9a       	sbi	0x1a, 0	; 26

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
     364:	8b b3       	in	r24, 0x1b	; 27
     366:	83 7c       	andi	r24, 0xC3	; 195
     368:	8b bb       	out	0x1b, r24	; 27
	CLEAR_E();
     36a:	d9 98       	cbi	0x1b, 1	; 27
	CLEAR_RS();
     36c:	d8 98       	cbi	0x1b, 0	; 27

	//Set 4-bit mode
	//_delay_us(0.3);	//tAS

	SET_E();
     36e:	d9 9a       	sbi	0x1b, 1	; 27
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     370:	db 9a       	sbi	0x1b, 3	; 27
	//_delay_us(1);
	CLEAR_E();
     372:	d9 98       	cbi	0x1b, 1	; 27
	//_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     374:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     378:	8c 2f       	mov	r24, r28
     37a:	8c 60       	ori	r24, 0x0C	; 12
     37c:	60 e0       	ldi	r22, 0x00	; 0
     37e:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     382:	88 e2       	ldi	r24, 0x28	; 40
     384:	60 e0       	ldi	r22, 0x00	; 0
     386:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
     38a:	80 e4       	ldi	r24, 0x40	; 64
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
     392:	c4 e1       	ldi	r28, 0x14	; 20
     394:	d1 e0       	ldi	r29, 0x01	; 1
void LCDBusyLoop()
{
	_delay_ms(8);
}

void LCDInit(uint8_t style)
     396:	04 e5       	ldi	r16, 0x54	; 84
     398:	11 e0       	ldi	r17, 0x01	; 1
	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
     39a:	89 91       	ld	r24, Y+
     39c:	61 e0       	ldi	r22, 0x01	; 1
     39e:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
     3a2:	c0 17       	cp	r28, r16
     3a4:	d1 07       	cpc	r29, r17
     3a6:	c9 f7       	brne	.-14     	; 0x39a <LCDInit+0x56>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	0e 94 90 01 	call	0x320	; 0x320 <LCDGotoXY>

}
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	1f 91       	pop	r17
     3b6:	0f 91       	pop	r16
     3b8:	08 95       	ret

000003ba <sMRIfaceKEYPAD_checkpress>:

static uint8_t nrf24l01_addr5[NRF24L01_ADDRSIZE] = NRF24L01_ADDRP5;
static uint8_t nrf24l01_addrtx[NRF24L01_ADDRSIZE] = NRF24L01_ADDRTX;

sc_integer sMRIfaceKEYPAD_checkpress() {
	return KEYPAD_Check();
     3ba:	0e 94 67 00 	call	0xce	; 0xce <KEYPAD_Check>
}
     3be:	68 2f       	mov	r22, r24
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	08 95       	ret

000003c8 <sMRIfaceKEYPAD_init>:
void sMRIfaceKEYPAD_init() {
	KEYPAD_Init();
     3c8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <KEYPAD_Init>
}
     3cc:	08 95       	ret

000003ce <sMRIfaceLCD_writeString>:

void sMRIfaceLCD_writeString(const sc_string chr) {
	LCDWriteString(chr);
     3ce:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDWriteString>
}
     3d2:	08 95       	ret

000003d4 <sMRIfaceLCD_writeStringXY>:
void sMRIfaceLCD_writeStringXY(const sc_string chr, const sc_integer x, const sc_integer y) {
     3d4:	0f 93       	push	r16
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	ec 01       	movw	r28, r24
     3dc:	84 2f       	mov	r24, r20
     3de:	60 2f       	mov	r22, r16
	LCDWriteStringXY(x,y,chr);
     3e0:	0e 94 90 01 	call	0x320	; 0x320 <LCDGotoXY>
     3e4:	ce 01       	movw	r24, r28
     3e6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDWriteString>
}
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	0f 91       	pop	r16
     3f0:	08 95       	ret

000003f2 <sMRIfaceLCD_writeNumberXY>:
void sMRIfaceLCD_writeNumberXY(const sc_integer num, const sc_integer x, const sc_integer y, const sc_integer l) {
     3f2:	4f 92       	push	r4
     3f4:	5f 92       	push	r5
     3f6:	6f 92       	push	r6
     3f8:	7f 92       	push	r7
     3fa:	af 92       	push	r10
     3fc:	bf 92       	push	r11
     3fe:	cf 92       	push	r12
     400:	df 92       	push	r13
     402:	ef 92       	push	r14
     404:	ff 92       	push	r15
     406:	2b 01       	movw	r4, r22
     408:	3c 01       	movw	r6, r24
     40a:	82 2f       	mov	r24, r18
     40c:	6e 2d       	mov	r22, r14
     40e:	76 01       	movw	r14, r12
     410:	65 01       	movw	r12, r10
	LCDWriteIntXY(x,y,num,l);
     412:	0e 94 90 01 	call	0x320	; 0x320 <LCDGotoXY>
     416:	c2 01       	movw	r24, r4
     418:	b6 01       	movw	r22, r12
     41a:	0e 94 2a 01 	call	0x254	; 0x254 <LCDWriteInt>
}
     41e:	ff 90       	pop	r15
     420:	ef 90       	pop	r14
     422:	df 90       	pop	r13
     424:	cf 90       	pop	r12
     426:	bf 90       	pop	r11
     428:	af 90       	pop	r10
     42a:	7f 90       	pop	r7
     42c:	6f 90       	pop	r6
     42e:	5f 90       	pop	r5
     430:	4f 90       	pop	r4
     432:	08 95       	ret

00000434 <sMRIfaceLCD_clear>:
void sMRIfaceLCD_clear() {
	LCDClear();
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	60 e0       	ldi	r22, 0x00	; 0
     438:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
     43c:	82 e0       	ldi	r24, 0x02	; 2
     43e:	60 e0       	ldi	r22, 0x00	; 0
     440:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
}
     444:	08 95       	ret

00000446 <sMRIfaceLCD_init>:
void sMRIfaceLCD_init() {
	LCDInit(0);
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	0e 94 a2 01 	call	0x344	; 0x344 <LCDInit>
}
     44c:	08 95       	ret

0000044e <sMRIfaceRF_getData>:

sc_string sMRIfaceRF_getData() {
     44e:	0f 93       	push	r16
     450:	1f 93       	push	r17
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	0f 92       	push	r0
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
	uint8_t pipe = 0;
     45c:	19 82       	std	Y+1, r1	; 0x01
	if (nrf24l01_readready(&pipe)) {
     45e:	ce 01       	movw	r24, r28
     460:	01 96       	adiw	r24, 0x01	; 1
     462:	0e 94 76 06 	call	0xcec	; 0xcec <nrf24l01_readready>
     466:	88 23       	and	r24, r24
     468:	e9 f0       	breq	.+58     	; 0x4a4 <sMRIfaceRF_getData+0x56>
		LCDWriteIntXY(0,1,pipe,1);
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	61 e0       	ldi	r22, 0x01	; 1
     46e:	0e 94 90 01 	call	0x320	; 0x320 <LCDGotoXY>
     472:	89 81       	ldd	r24, Y+1	; 0x01
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	61 e0       	ldi	r22, 0x01	; 1
     478:	70 e0       	ldi	r23, 0x00	; 0
     47a:	0e 94 2a 01 	call	0x254	; 0x254 <LCDWriteInt>
		if (pipe==0) {
     47e:	89 81       	ldd	r24, Y+1	; 0x01
     480:	88 23       	and	r24, r24
     482:	99 f4       	brne	.+38     	; 0x4aa <sMRIfaceRF_getData+0x5c>
     484:	e2 e2       	ldi	r30, 0x22	; 34
     486:	f2 e0       	ldi	r31, 0x02	; 2
}
void sMRIfaceLCD_init() {
	LCDInit(0);
}

sc_string sMRIfaceRF_getData() {
     488:	cf 01       	movw	r24, r30
     48a:	09 96       	adiw	r24, 0x09	; 9
	uint8_t pipe = 0;
	if (nrf24l01_readready(&pipe)) {
		LCDWriteIntXY(0,1,pipe,1);
		if (pipe==0) {
			//clear buffer
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
     48c:	11 92       	st	Z+, r1
     48e:	e8 17       	cp	r30, r24
     490:	f9 07       	cpc	r31, r25
     492:	e1 f7       	brne	.-8      	; 0x48c <sMRIfaceRF_getData+0x3e>
			
			//read buffer
			nrf24l01_read(pipe,bufferin);
     494:	02 e2       	ldi	r16, 0x22	; 34
     496:	12 e0       	ldi	r17, 0x02	; 2
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	b8 01       	movw	r22, r16
     49c:	0e 94 88 06 	call	0xd10	; 0xd10 <nrf24l01_read>
			return bufferin;
     4a0:	c8 01       	movw	r24, r16
     4a2:	05 c0       	rjmp	.+10     	; 0x4ae <sMRIfaceRF_getData+0x60>
		}
	}
	return "";
     4a4:	84 e5       	ldi	r24, 0x54	; 84
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <sMRIfaceRF_getData+0x60>
     4aa:	84 e5       	ldi	r24, 0x54	; 84
     4ac:	91 e0       	ldi	r25, 0x01	; 1
}
     4ae:	0f 90       	pop	r0
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	0f 91       	pop	r16
     4b8:	08 95       	ret

000004ba <sMRIfaceRF_sendMsg>:

sc_boolean sMRIfaceRF_sendMsg(const sc_string msg) {
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	9c 01       	movw	r18, r24
     4c0:	c6 e3       	ldi	r28, 0x36	; 54
     4c2:	d2 e0       	ldi	r29, 0x02	; 2
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	90 e0       	ldi	r25, 0x00	; 0
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
		if (i<strlen(msg)) bufferout[i]=msg[i];
     4c8:	a2 2f       	mov	r26, r18
     4ca:	b3 2f       	mov	r27, r19
     4cc:	fd 01       	movw	r30, r26
     4ce:	01 90       	ld	r0, Z+
     4d0:	00 20       	and	r0, r0
     4d2:	e9 f7       	brne	.-6      	; 0x4ce <sMRIfaceRF_sendMsg+0x14>
     4d4:	31 97       	sbiw	r30, 0x01	; 1
     4d6:	ea 1b       	sub	r30, r26
     4d8:	fb 0b       	sbc	r31, r27
     4da:	8e 17       	cp	r24, r30
     4dc:	9f 07       	cpc	r25, r31
     4de:	30 f4       	brcc	.+12     	; 0x4ec <sMRIfaceRF_sendMsg+0x32>
		}
	}
	return "";
}

sc_boolean sMRIfaceRF_sendMsg(const sc_string msg) {
     4e0:	f9 01       	movw	r30, r18
     4e2:	e8 0f       	add	r30, r24
     4e4:	f9 1f       	adc	r31, r25
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
		if (i<strlen(msg)) bufferout[i]=msg[i];
     4e6:	40 81       	ld	r20, Z
     4e8:	48 83       	st	Y, r20
     4ea:	01 c0       	rjmp	.+2      	; 0x4ee <sMRIfaceRF_sendMsg+0x34>
		else bufferout[i] = 0;
     4ec:	18 82       	st	Y, r1
     4ee:	01 96       	adiw	r24, 0x01	; 1
     4f0:	21 96       	adiw	r28, 0x01	; 1
	return "";
}

sc_boolean sMRIfaceRF_sendMsg(const sc_string msg) {
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
     4f2:	89 30       	cpi	r24, 0x09	; 9
     4f4:	91 05       	cpc	r25, r1
     4f6:	41 f7       	brne	.-48     	; 0x4c8 <sMRIfaceRF_sendMsg+0xe>
		if (i<strlen(msg)) bufferout[i]=msg[i];
		else bufferout[i] = 0;
	}
	
	//Set Address for Data
	nrf24l01_settxaddr(nrf24l01_addrtx);
     4f8:	85 e5       	ldi	r24, 0x55	; 85
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	0e 94 e6 04 	call	0x9cc	; 0x9cc <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     500:	86 e3       	ldi	r24, 0x36	; 54
     502:	92 e0       	ldi	r25, 0x02	; 2
     504:	0e 94 ae 06 	call	0xd5c	; 0xd5c <nrf24l01_write>
     508:	98 2f       	mov	r25, r24
     50a:	ef ec       	ldi	r30, 0xCF	; 207
     50c:	f7 e0       	ldi	r31, 0x07	; 7
     50e:	31 97       	sbiw	r30, 0x01	; 1
     510:	f1 f7       	brne	.-4      	; 0x50e <sMRIfaceRF_sendMsg+0x54>
     512:	00 c0       	rjmp	.+0      	; 0x514 <sMRIfaceRF_sendMsg+0x5a>
     514:	00 00       	nop
		}
	}
	return "";
}

sc_boolean sMRIfaceRF_sendMsg(const sc_string msg) {
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	91 30       	cpi	r25, 0x01	; 1
     51a:	09 f0       	breq	.+2      	; 0x51e <sMRIfaceRF_sendMsg+0x64>
     51c:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	08 95       	ret

00000524 <sMRIfaceRF_sendCheck>:

sc_boolean sMRIfaceRF_sendCheck() {
     524:	e6 e3       	ldi	r30, 0x36	; 54
     526:	f2 e0       	ldi	r31, 0x02	; 2
     528:	cf 01       	movw	r24, r30
     52a:	09 96       	adiw	r24, 0x09	; 9
	//set all buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferout[i] = 1;
     52c:	21 e0       	ldi	r18, 0x01	; 1
     52e:	21 93       	st	Z+, r18
     530:	e8 17       	cp	r30, r24
     532:	f9 07       	cpc	r31, r25
     534:	e1 f7       	brne	.-8      	; 0x52e <sMRIfaceRF_sendCheck+0xa>
	//Set Address for check
	nrf24l01_settxaddr(nrf24l01_addr5);
     536:	8a e5       	ldi	r24, 0x5A	; 90
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	0e 94 e6 04 	call	0x9cc	; 0x9cc <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     53e:	86 e3       	ldi	r24, 0x36	; 54
     540:	92 e0       	ldi	r25, 0x02	; 2
     542:	0e 94 ae 06 	call	0xd5c	; 0xd5c <nrf24l01_write>
     546:	98 2f       	mov	r25, r24
     548:	ef ec       	ldi	r30, 0xCF	; 207
     54a:	f7 e0       	ldi	r31, 0x07	; 7
     54c:	31 97       	sbiw	r30, 0x01	; 1
     54e:	f1 f7       	brne	.-4      	; 0x54c <sMRIfaceRF_sendCheck+0x28>
     550:	00 c0       	rjmp	.+0      	; 0x552 <sMRIfaceRF_sendCheck+0x2e>
     552:	00 00       	nop
	} else {
		return false;
	}
}

sc_boolean sMRIfaceRF_sendCheck() {
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	91 30       	cpi	r25, 0x01	; 1
     558:	09 f0       	breq	.+2      	; 0x55c <sMRIfaceRF_sendCheck+0x38>
     55a:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     55c:	08 95       	ret

0000055e <sMRIfaceRF_getCheck>:

sc_boolean sMRIfaceRF_getCheck() {
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	0f 92       	push	r0
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
	uint8_t pipe = 0;
     56c:	19 82       	std	Y+1, r1	; 0x01
	if (nrf24l01_readready(&pipe)) {
     56e:	ce 01       	movw	r24, r28
     570:	01 96       	adiw	r24, 0x01	; 1
     572:	0e 94 76 06 	call	0xcec	; 0xcec <nrf24l01_readready>
     576:	88 23       	and	r24, r24
     578:	f1 f0       	breq	.+60     	; 0x5b6 <sMRIfaceRF_getCheck+0x58>
		if (pipe==5) {
     57a:	89 81       	ldd	r24, Y+1	; 0x01
     57c:	85 30       	cpi	r24, 0x05	; 5
     57e:	e9 f4       	brne	.+58     	; 0x5ba <sMRIfaceRF_getCheck+0x5c>
     580:	e2 e2       	ldi	r30, 0x22	; 34
     582:	f2 e0       	ldi	r31, 0x02	; 2
	} else {
		return false;
	}
}

sc_boolean sMRIfaceRF_getCheck() {
     584:	8f 01       	movw	r16, r30
     586:	07 5f       	subi	r16, 0xF7	; 247
     588:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t pipe = 0;
	if (nrf24l01_readready(&pipe)) {
		if (pipe==5) {
			//clear buffer
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
     58a:	11 92       	st	Z+, r1
     58c:	e0 17       	cp	r30, r16
     58e:	f1 07       	cpc	r31, r17
     590:	e1 f7       	brne	.-8      	; 0x58a <sMRIfaceRF_getCheck+0x2c>
			
			//read buffer
			nrf24l01_read(pipe,bufferin);
     592:	85 e0       	ldi	r24, 0x05	; 5
     594:	62 e2       	ldi	r22, 0x22	; 34
     596:	72 e0       	ldi	r23, 0x02	; 2
     598:	0e 94 88 06 	call	0xd10	; 0xd10 <nrf24l01_read>
			
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) if (bufferin[i]!=1) return false;
     59c:	80 91 22 02 	lds	r24, 0x0222
     5a0:	81 30       	cpi	r24, 0x01	; 1
     5a2:	69 f4       	brne	.+26     	; 0x5be <sMRIfaceRF_getCheck+0x60>
     5a4:	e3 e2       	ldi	r30, 0x23	; 35
     5a6:	f2 e0       	ldi	r31, 0x02	; 2
     5a8:	81 91       	ld	r24, Z+
     5aa:	81 30       	cpi	r24, 0x01	; 1
     5ac:	51 f4       	brne	.+20     	; 0x5c2 <sMRIfaceRF_getCheck+0x64>
     5ae:	e0 17       	cp	r30, r16
     5b0:	f1 07       	cpc	r31, r17
     5b2:	d1 f7       	brne	.-12     	; 0x5a8 <sMRIfaceRF_getCheck+0x4a>
     5b4:	07 c0       	rjmp	.+14     	; 0x5c4 <sMRIfaceRF_getCheck+0x66>
			return true;
		}
	}
	return false;
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	05 c0       	rjmp	.+10     	; 0x5c4 <sMRIfaceRF_getCheck+0x66>
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	03 c0       	rjmp	.+6      	; 0x5c4 <sMRIfaceRF_getCheck+0x66>
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
			
			//read buffer
			nrf24l01_read(pipe,bufferin);
			
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) if (bufferin[i]!=1) return false;
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <sMRIfaceRF_getCheck+0x66>
     5c2:	80 e0       	ldi	r24, 0x00	; 0
			return true;
		}
	}
	return false;
}
     5c4:	0f 90       	pop	r0
     5c6:	df 91       	pop	r29
     5c8:	cf 91       	pop	r28
     5ca:	1f 91       	pop	r17
     5cc:	0f 91       	pop	r16
     5ce:	08 95       	ret

000005d0 <sMRIfaceRF_sendData>:

sc_boolean sMRIfaceRF_sendData(const sc_integer cmd, const sc_integer id, const sc_integer dish_id, const sc_integer amount) {
     5d0:	af 92       	push	r10
     5d2:	ef 92       	push	r14
     5d4:	82 2f       	mov	r24, r18
     5d6:	e6 e3       	ldi	r30, 0x36	; 54
     5d8:	f2 e0       	ldi	r31, 0x02	; 2
     5da:	af 01       	movw	r20, r30
     5dc:	47 5f       	subi	r20, 0xF7	; 247
     5de:	5f 4f       	sbci	r21, 0xFF	; 255
	
	unsigned char num;
	unsigned char mod;
	//clear buffer
	for(uint8_t i=0; i<sizeof(bufferout); i++) bufferout[i] = 0;
     5e0:	11 92       	st	Z+, r1
     5e2:	e4 17       	cp	r30, r20
     5e4:	f5 07       	cpc	r31, r21
     5e6:	e1 f7       	brne	.-8      	; 0x5e0 <sMRIfaceRF_sendData+0x10>
	
	//Lenh cho data: 1-goi mon, 2-huy mon, 3-thanh toan, 4-goi boi ban
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
     5e8:	60 5d       	subi	r22, 0xD0	; 208
     5ea:	60 93 36 02 	sts	0x0236, r22
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     5ee:	3a e0       	ldi	r19, 0x0A	; 10
     5f0:	63 2f       	mov	r22, r19
     5f2:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     5f6:	90 5d       	subi	r25, 0xD0	; 208
     5f8:	90 93 38 02 	sts	0x0238, r25
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     5fc:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     600:	90 5d       	subi	r25, 0xD0	; 208
     602:	90 93 37 02 	sts	0x0237, r25
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
		num/=10;
     606:	8e 2d       	mov	r24, r14
     608:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__udivmodqi4>
		bufferout[3+i]=mod+'0';
     60c:	90 5d       	subi	r25, 0xD0	; 208
     60e:	90 93 3b 02 	sts	0x023B, r25
	}
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
     612:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__udivmodqi4>
		num/=10;
		bufferout[3+i]=mod+'0';
     616:	90 5d       	subi	r25, 0xD0	; 208
     618:	90 93 3a 02 	sts	0x023A, r25
	}
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
     61c:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__udivmodqi4>
		num/=10;
		bufferout[3+i]=mod+'0';
     620:	90 5d       	subi	r25, 0xD0	; 208
     622:	90 93 39 02 	sts	0x0239, r25
	}
	
	//Chuyen doi so luong mon an
	num=amount;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     626:	8a 2d       	mov	r24, r10
     628:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__udivmodqi4>
		num/=10;
		bufferout[6+i]=mod+'0';
     62c:	90 5d       	subi	r25, 0xD0	; 208
     62e:	90 93 3d 02 	sts	0x023D, r25
	}
	
	//Chuyen doi so luong mon an
	num=amount;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     632:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__udivmodqi4>
		num/=10;
		bufferout[6+i]=mod+'0';
     636:	90 5d       	subi	r25, 0xD0	; 208
     638:	90 93 3c 02 	sts	0x023C, r25
	}
	
	//Set Address for Data
	nrf24l01_settxaddr(nrf24l01_addrtx);
     63c:	85 e5       	ldi	r24, 0x55	; 85
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	0e 94 e6 04 	call	0x9cc	; 0x9cc <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     644:	86 e3       	ldi	r24, 0x36	; 54
     646:	92 e0       	ldi	r25, 0x02	; 2
     648:	0e 94 ae 06 	call	0xd5c	; 0xd5c <nrf24l01_write>
     64c:	98 2f       	mov	r25, r24
     64e:	ef ec       	ldi	r30, 0xCF	; 207
     650:	f7 e0       	ldi	r31, 0x07	; 7
     652:	31 97       	sbiw	r30, 0x01	; 1
     654:	f1 f7       	brne	.-4      	; 0x652 <sMRIfaceRF_sendData+0x82>
     656:	00 c0       	rjmp	.+0      	; 0x658 <sMRIfaceRF_sendData+0x88>
     658:	00 00       	nop
		}
	}
	return false;
}

sc_boolean sMRIfaceRF_sendData(const sc_integer cmd, const sc_integer id, const sc_integer dish_id, const sc_integer amount) {
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	91 30       	cpi	r25, 0x01	; 1
     65e:	09 f0       	breq	.+2      	; 0x662 <sMRIfaceRF_sendData+0x92>
     660:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     662:	ef 90       	pop	r14
     664:	af 90       	pop	r10
     666:	08 95       	ret

00000668 <sMRIfaceUART_init>:

void sMRIfaceUART_init() {
	UART_Init(MYUBRR);
     668:	83 e3       	ldi	r24, 0x33	; 51
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	0e 94 c7 0c 	call	0x198e	; 0x198e <UART_Init>
}
     670:	08 95       	ret

00000672 <sMRIfaceUART_sendMsg>:

void sMRIfaceUART_sendMsg(const sc_string msg) {
	msg[sizeof(msg)-1]=0;
     672:	fc 01       	movw	r30, r24
     674:	11 82       	std	Z+1, r1	; 0x01
	uart_puts(msg);
     676:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <uart_puts>
}
     67a:	08 95       	ret

0000067c <sMR_setTimer>:

void sMR_setTimer(const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
	TimerSet(evid,time_ms);
     67c:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <TimerSet>
}
     680:	08 95       	ret

00000682 <sMR_unsetTimer>:
void sMR_unsetTimer(const sc_eventid evid) {
	TimerUnSet(evid);
     682:	0e 94 3e 0c 	call	0x187c	; 0x187c <TimerUnSet>
}
     686:	08 95       	ret

00000688 <sMRIfaceRF_init>:

void sMRIfaceRF_init() {
	nrf24l01_init();
     688:	0e 94 04 07 	call	0xe08	; 0xe08 <nrf24l01_init>
}
     68c:	08 95       	ret

0000068e <sMRIface_convertNumber>:

char temp[9];

void sMRIface_convertNumber(const sc_integer num, const sc_integer pos) {
     68e:	da 01       	movw	r26, r20
     690:	c9 01       	movw	r24, r18
	temp[pos-1]=num+'0';
     692:	01 97       	sbiw	r24, 0x01	; 1
     694:	a1 09       	sbc	r26, r1
     696:	b1 09       	sbc	r27, r1
     698:	83 5d       	subi	r24, 0xD3	; 211
     69a:	9d 4f       	sbci	r25, 0xFD	; 253
     69c:	60 5d       	subi	r22, 0xD0	; 208
     69e:	fc 01       	movw	r30, r24
     6a0:	60 83       	st	Z, r22
}
     6a2:	08 95       	ret

000006a4 <sMRIfaceUART_sendTemp>:

void sMRIfaceUART_sendTemp() {
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
	temp[sizeof(temp)-1]='\0';
     6a8:	10 92 35 02 	sts	0x0235, r1
	LCDWriteStringXY(0,1,temp);
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	61 e0       	ldi	r22, 0x01	; 1
     6b0:	0e 94 90 01 	call	0x320	; 0x320 <LCDGotoXY>
     6b4:	cd e2       	ldi	r28, 0x2D	; 45
     6b6:	d2 e0       	ldi	r29, 0x02	; 2
     6b8:	ce 01       	movw	r24, r28
     6ba:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDWriteString>
	uart_puts(temp);
     6be:	ce 01       	movw	r24, r28
     6c0:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <uart_puts>
}
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <main>:


int main(void)
{
	uint8_t i;
	DDRC=0x0F;
     6ca:	8f e0       	ldi	r24, 0x0F	; 15
     6cc:	84 bb       	out	0x14, r24	; 20
	PORTC=0x0F;
     6ce:	85 bb       	out	0x15, r24	; 21
	l=malloc(sizeof(SMR*)) ;
     6d0:	82 e0       	ldi	r24, 0x02	; 2
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <malloc>
     6d8:	80 93 2b 02 	sts	0x022B, r24
     6dc:	90 93 2c 02 	sts	0x022C, r25
	TimerInit();
     6e0:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <TimerInit>
	sMR_init(l);
     6e4:	80 91 2b 02 	lds	r24, 0x022B
     6e8:	90 91 2c 02 	lds	r25, 0x022C
     6ec:	0e 94 c3 07 	call	0xf86	; 0xf86 <sMR_init>
	sMR_enter(l);
     6f0:	80 91 2b 02 	lds	r24, 0x022B
     6f4:	90 91 2c 02 	lds	r25, 0x022C
     6f8:	0e 94 cb 07 	call	0xf96	; 0xf96 <sMR_enter>
	
	//setup buffer
	for(i=0; i<sizeof(bufferout); i++)
	bufferout[i] = i+'a';
     6fc:	81 e6       	ldi	r24, 0x61	; 97
     6fe:	80 93 36 02 	sts	0x0236, r24
     702:	82 e6       	ldi	r24, 0x62	; 98
     704:	80 93 37 02 	sts	0x0237, r24
     708:	83 e6       	ldi	r24, 0x63	; 99
     70a:	80 93 38 02 	sts	0x0238, r24
     70e:	84 e6       	ldi	r24, 0x64	; 100
     710:	80 93 39 02 	sts	0x0239, r24
     714:	85 e6       	ldi	r24, 0x65	; 101
     716:	80 93 3a 02 	sts	0x023A, r24
     71a:	86 e6       	ldi	r24, 0x66	; 102
     71c:	80 93 3b 02 	sts	0x023B, r24
     720:	87 e6       	ldi	r24, 0x67	; 103
     722:	80 93 3c 02 	sts	0x023C, r24
     726:	88 e6       	ldi	r24, 0x68	; 104
     728:	80 93 3d 02 	sts	0x023D, r24
     72c:	89 e6       	ldi	r24, 0x69	; 105
     72e:	80 93 3e 02 	sts	0x023E, r24
     732:	e2 e2       	ldi	r30, 0x22	; 34
     734:	f2 e0       	ldi	r31, 0x02	; 2
	LCDWriteStringXY(0,1,temp);
	uart_puts(temp);
}


int main(void)
     736:	cf 01       	movw	r24, r30
     738:	09 96       	adiw	r24, 0x09	; 9
	
	//setup buffer
	for(i=0; i<sizeof(bufferout); i++)
	bufferout[i] = i+'a';
	for(i=0; i<sizeof(bufferin); i++)
	bufferin[i] = 0;
     73a:	11 92       	st	Z+, r1
	sMR_enter(l);
	
	//setup buffer
	for(i=0; i<sizeof(bufferout); i++)
	bufferout[i] = i+'a';
	for(i=0; i<sizeof(bufferin); i++)
     73c:	e8 17       	cp	r30, r24
     73e:	f9 07       	cpc	r31, r25
     740:	e1 f7       	brne	.-8      	; 0x73a <main+0x70>
	
	uint8_t down=0;
	
	while(1)
	{
		sMR_runCycle(l);
     742:	80 91 2b 02 	lds	r24, 0x022B
     746:	90 91 2c 02 	lds	r25, 0x022C
     74a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <sMR_runCycle>
     74e:	f9 cf       	rjmp	.-14     	; 0x742 <main+0x78>

00000750 <__vector_16>:
	}
}

ISR (TIMER0_OVF_vect) {
     750:	1f 92       	push	r1
     752:	0f 92       	push	r0
     754:	0f b6       	in	r0, 0x3f	; 63
     756:	0f 92       	push	r0
     758:	0b b6       	in	r0, 0x3b	; 59
     75a:	0f 92       	push	r0
     75c:	11 24       	eor	r1, r1
     75e:	2f 93       	push	r18
     760:	3f 93       	push	r19
     762:	4f 93       	push	r20
     764:	5f 93       	push	r21
     766:	6f 93       	push	r22
     768:	7f 93       	push	r23
     76a:	8f 93       	push	r24
     76c:	9f 93       	push	r25
     76e:	af 93       	push	r26
     770:	bf 93       	push	r27
     772:	ef 93       	push	r30
     774:	ff 93       	push	r31
	TCNT0=131;
     776:	83 e8       	ldi	r24, 0x83	; 131
     778:	82 bf       	out	0x32, r24	; 50
	TimerCheck(l);
     77a:	80 91 2b 02 	lds	r24, 0x022B
     77e:	90 91 2c 02 	lds	r25, 0x022C
     782:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <TimerCheck>
}
     786:	ff 91       	pop	r31
     788:	ef 91       	pop	r30
     78a:	bf 91       	pop	r27
     78c:	af 91       	pop	r26
     78e:	9f 91       	pop	r25
     790:	8f 91       	pop	r24
     792:	7f 91       	pop	r23
     794:	6f 91       	pop	r22
     796:	5f 91       	pop	r21
     798:	4f 91       	pop	r20
     79a:	3f 91       	pop	r19
     79c:	2f 91       	pop	r18
     79e:	0f 90       	pop	r0
     7a0:	0b be       	out	0x3b, r0	; 59
     7a2:	0f 90       	pop	r0
     7a4:	0f be       	out	0x3f, r0	; 63
     7a6:	0f 90       	pop	r0
     7a8:	1f 90       	pop	r1
     7aa:	18 95       	reti

000007ac <__vector_30>:


ISR (USART1__RX_vect) {
     7ac:	1f 92       	push	r1
     7ae:	0f 92       	push	r0
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	0f 92       	push	r0
     7b4:	0b b6       	in	r0, 0x3b	; 59
     7b6:	0f 92       	push	r0
     7b8:	11 24       	eor	r1, r1
     7ba:	2f 93       	push	r18
     7bc:	3f 93       	push	r19
     7be:	4f 93       	push	r20
     7c0:	5f 93       	push	r21
     7c2:	6f 93       	push	r22
     7c4:	7f 93       	push	r23
     7c6:	8f 93       	push	r24
     7c8:	9f 93       	push	r25
     7ca:	af 93       	push	r26
     7cc:	bf 93       	push	r27
     7ce:	ef 93       	push	r30
     7d0:	ff 93       	push	r31
	uart_getc(l,UDR1);
     7d2:	60 91 9c 00 	lds	r22, 0x009C
     7d6:	80 91 2b 02 	lds	r24, 0x022B
     7da:	90 91 2c 02 	lds	r25, 0x022C
     7de:	0e 94 ed 0c 	call	0x19da	; 0x19da <uart_getc>
     7e2:	ff 91       	pop	r31
     7e4:	ef 91       	pop	r30
     7e6:	bf 91       	pop	r27
     7e8:	af 91       	pop	r26
     7ea:	9f 91       	pop	r25
     7ec:	8f 91       	pop	r24
     7ee:	7f 91       	pop	r23
     7f0:	6f 91       	pop	r22
     7f2:	5f 91       	pop	r21
     7f4:	4f 91       	pop	r20
     7f6:	3f 91       	pop	r19
     7f8:	2f 91       	pop	r18
     7fa:	0f 90       	pop	r0
     7fc:	0b be       	out	0x3b, r0	; 59
     7fe:	0f 90       	pop	r0
     800:	0f be       	out	0x3f, r0	; 63
     802:	0f 90       	pop	r0
     804:	1f 90       	pop	r1
     806:	18 95       	reti

00000808 <nrf24l01_readregister>:

/*
 * read one register
 */
uint8_t nrf24l01_readregister(uint8_t reg) {
	nrf24l01_CSNlo; //low CSN
     808:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     80a:	8f 71       	andi	r24, 0x1F	; 31
     80c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <spi_writereadbyte>
    uint8_t result = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
     810:	8f ef       	ldi	r24, 0xFF	; 255
     812:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <spi_writereadbyte>
    nrf24l01_CSNhi; //high CSN
     816:	ae 9a       	sbi	0x15, 6	; 21
    return result;
}
     818:	08 95       	ret

0000081a <nrf24l01_readregisters>:

/*
 * read many registers
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
     81a:	ff 92       	push	r15
     81c:	0f 93       	push	r16
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	06 2f       	mov	r16, r22
     826:	f7 2e       	mov	r15, r23
     828:	14 2f       	mov	r17, r20
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
     82a:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     82c:	8f 71       	andi	r24, 0x1F	; 31
     82e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <spi_writereadbyte>
	for(i=0; i<len; i++)
     832:	11 23       	and	r17, r17
     834:	51 f0       	breq	.+20     	; 0x84a <nrf24l01_readregisters+0x30>
     836:	c0 2f       	mov	r28, r16
     838:	df 2d       	mov	r29, r15
     83a:	00 e0       	ldi	r16, 0x00	; 0
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
     83c:	8f ef       	ldi	r24, 0xFF	; 255
     83e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <spi_writereadbyte>
     842:	89 93       	st	Y+, r24
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     844:	0f 5f       	subi	r16, 0xFF	; 255
     846:	01 17       	cp	r16, r17
     848:	c9 f7       	brne	.-14     	; 0x83c <nrf24l01_readregisters+0x22>
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
	nrf24l01_CSNhi; //high CSN
     84a:	ae 9a       	sbi	0x15, 6	; 21
}
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	1f 91       	pop	r17
     852:	0f 91       	pop	r16
     854:	ff 90       	pop	r15
     856:	08 95       	ret

00000858 <nrf24l01_writeregister>:

/*
 * write one register
 */
void nrf24l01_writeregister(uint8_t reg, uint8_t value) {
     858:	cf 93       	push	r28
     85a:	c6 2f       	mov	r28, r22
	nrf24l01_CSNlo; //low CSN
     85c:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     85e:	8f 71       	andi	r24, 0x1F	; 31
     860:	80 62       	ori	r24, 0x20	; 32
     862:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <spi_writereadbyte>
	spi_writereadbyte(value); //write register
     866:	8c 2f       	mov	r24, r28
     868:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     86c:	ae 9a       	sbi	0x15, 6	; 21
}
     86e:	cf 91       	pop	r28
     870:	08 95       	ret

00000872 <nrf24l01_writeregisters>:

/*
 * write many registers
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
     872:	ff 92       	push	r15
     874:	0f 93       	push	r16
     876:	1f 93       	push	r17
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	06 2f       	mov	r16, r22
     87e:	f7 2e       	mov	r15, r23
     880:	14 2f       	mov	r17, r20
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
     882:	ae 98       	cbi	0x15, 6	; 21
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     884:	8f 71       	andi	r24, 0x1F	; 31
     886:	80 62       	ori	r24, 0x20	; 32
     888:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <spi_writereadbyte>
	for(i=0; i<len; i++)
     88c:	11 23       	and	r17, r17
     88e:	49 f0       	breq	.+18     	; 0x8a2 <nrf24l01_writeregisters+0x30>
     890:	c0 2f       	mov	r28, r16
     892:	df 2d       	mov	r29, r15
     894:	00 e0       	ldi	r16, 0x00	; 0
		 spi_writereadbyte(value[i]); //write register
     896:	89 91       	ld	r24, Y+
     898:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <spi_writereadbyte>
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     89c:	0f 5f       	subi	r16, 0xFF	; 255
     89e:	01 17       	cp	r16, r17
     8a0:	d1 f7       	brne	.-12     	; 0x896 <nrf24l01_writeregisters+0x24>
		 spi_writereadbyte(value[i]); //write register
	nrf24l01_CSNhi; //high CSN
     8a2:	ae 9a       	sbi	0x15, 6	; 21
}
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	ff 90       	pop	r15
     8ae:	08 95       	ret

000008b0 <nrf24l01_revaddress>:

/*
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	04 96       	adiw	r24, 0x04	; 4
     8b6:	db 01       	movw	r26, r22
     8b8:	a2 0f       	add	r26, r18
     8ba:	b3 1f       	adc	r27, r19
     8bc:	fc 01       	movw	r30, r24
     8be:	e2 1b       	sub	r30, r18
     8c0:	f3 0b       	sbc	r31, r19
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
     8c2:	40 81       	ld	r20, Z
     8c4:	4c 93       	st	X, r20
     8c6:	2f 5f       	subi	r18, 0xFF	; 255
     8c8:	3f 4f       	sbci	r19, 0xFF	; 255
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
     8ca:	25 30       	cpi	r18, 0x05	; 5
     8cc:	31 05       	cpc	r19, r1
     8ce:	99 f7       	brne	.-26     	; 0x8b6 <nrf24l01_revaddress+0x6>
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
}
     8d0:	08 95       	ret

000008d2 <nrf24l01_setrxaddr>:

/*
 * set rx address
 */
void nrf24l01_setrxaddr(uint8_t pipe, uint8_t *addr) {
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	00 d0       	rcall	.+0      	; 0x8d8 <nrf24l01_setrxaddr+0x6>
     8d8:	00 d0       	rcall	.+0      	; 0x8da <nrf24l01_setrxaddr+0x8>
     8da:	0f 92       	push	r0
     8dc:	cd b7       	in	r28, 0x3d	; 61
     8de:	de b7       	in	r29, 0x3e	; 62
	if(pipe == 0) {
     8e0:	88 23       	and	r24, r24
     8e2:	b1 f4       	brne	.+44     	; 0x910 <nrf24l01_setrxaddr+0x3e>
		memcpy(&nrf24l01_addr0, addr, NRF24L01_ADDRSIZE); //cache address
     8e4:	a9 ed       	ldi	r26, 0xD9	; 217
     8e6:	b1 e0       	ldi	r27, 0x01	; 1
     8e8:	fb 01       	movw	r30, r22
     8ea:	85 e0       	ldi	r24, 0x05	; 5
     8ec:	01 90       	ld	r0, Z+
     8ee:	0d 92       	st	X+, r0
     8f0:	81 50       	subi	r24, 0x01	; 1
     8f2:	e1 f7       	brne	.-8      	; 0x8ec <nrf24l01_setrxaddr+0x1a>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     8f4:	cb 01       	movw	r24, r22
     8f6:	be 01       	movw	r22, r28
     8f8:	6f 5f       	subi	r22, 0xFF	; 255
     8fa:	7f 4f       	sbci	r23, 0xFF	; 255
     8fc:	0e 94 58 04 	call	0x8b0	; 0x8b0 <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE);
     900:	8a e0       	ldi	r24, 0x0A	; 10
     902:	be 01       	movw	r22, r28
     904:	6f 5f       	subi	r22, 0xFF	; 255
     906:	7f 4f       	sbci	r23, 0xFF	; 255
     908:	45 e0       	ldi	r20, 0x05	; 5
     90a:	0e 94 39 04 	call	0x872	; 0x872 <nrf24l01_writeregisters>
     90e:	56 c0       	rjmp	.+172    	; 0x9bc <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 1) {
     910:	81 30       	cpi	r24, 0x01	; 1
     912:	b1 f4       	brne	.+44     	; 0x940 <nrf24l01_setrxaddr+0x6e>
		memcpy(&nrf24l01_addr1, addr, NRF24L01_ADDRSIZE); //cache address
     914:	ae ed       	ldi	r26, 0xDE	; 222
     916:	b1 e0       	ldi	r27, 0x01	; 1
     918:	fb 01       	movw	r30, r22
     91a:	85 e0       	ldi	r24, 0x05	; 5
     91c:	01 90       	ld	r0, Z+
     91e:	0d 92       	st	X+, r0
     920:	81 50       	subi	r24, 0x01	; 1
     922:	e1 f7       	brne	.-8      	; 0x91c <nrf24l01_setrxaddr+0x4a>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     924:	cb 01       	movw	r24, r22
     926:	be 01       	movw	r22, r28
     928:	6f 5f       	subi	r22, 0xFF	; 255
     92a:	7f 4f       	sbci	r23, 0xFF	; 255
     92c:	0e 94 58 04 	call	0x8b0	; 0x8b0 <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P1, addrrev, NRF24L01_ADDRSIZE);
     930:	8b e0       	ldi	r24, 0x0B	; 11
     932:	be 01       	movw	r22, r28
     934:	6f 5f       	subi	r22, 0xFF	; 255
     936:	7f 4f       	sbci	r23, 0xFF	; 255
     938:	45 e0       	ldi	r20, 0x05	; 5
     93a:	0e 94 39 04 	call	0x872	; 0x872 <nrf24l01_writeregisters>
     93e:	3e c0       	rjmp	.+124    	; 0x9bc <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 2) {
     940:	82 30       	cpi	r24, 0x02	; 2
     942:	71 f4       	brne	.+28     	; 0x960 <nrf24l01_setrxaddr+0x8e>
		memcpy(&nrf24l01_addr2, addr, NRF24L01_ADDRSIZE); //cache address
     944:	a3 ee       	ldi	r26, 0xE3	; 227
     946:	b1 e0       	ldi	r27, 0x01	; 1
     948:	fb 01       	movw	r30, r22
     94a:	85 e0       	ldi	r24, 0x05	; 5
     94c:	01 90       	ld	r0, Z+
     94e:	0d 92       	st	X+, r0
     950:	81 50       	subi	r24, 0x01	; 1
     952:	e1 f7       	brne	.-8      	; 0x94c <nrf24l01_setrxaddr+0x7a>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P2, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     954:	8c e0       	ldi	r24, 0x0C	; 12
     956:	fb 01       	movw	r30, r22
     958:	64 81       	ldd	r22, Z+4	; 0x04
     95a:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
     95e:	2e c0       	rjmp	.+92     	; 0x9bc <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 3) {
     960:	83 30       	cpi	r24, 0x03	; 3
     962:	71 f4       	brne	.+28     	; 0x980 <nrf24l01_setrxaddr+0xae>
		memcpy(&nrf24l01_addr3, addr, NRF24L01_ADDRSIZE); //cache address
     964:	a8 ee       	ldi	r26, 0xE8	; 232
     966:	b1 e0       	ldi	r27, 0x01	; 1
     968:	fb 01       	movw	r30, r22
     96a:	85 e0       	ldi	r24, 0x05	; 5
     96c:	01 90       	ld	r0, Z+
     96e:	0d 92       	st	X+, r0
     970:	81 50       	subi	r24, 0x01	; 1
     972:	e1 f7       	brne	.-8      	; 0x96c <nrf24l01_setrxaddr+0x9a>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P3, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     974:	8d e0       	ldi	r24, 0x0D	; 13
     976:	fb 01       	movw	r30, r22
     978:	64 81       	ldd	r22, Z+4	; 0x04
     97a:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
     97e:	1e c0       	rjmp	.+60     	; 0x9bc <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 4) {
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	71 f4       	brne	.+28     	; 0x9a0 <nrf24l01_setrxaddr+0xce>
		memcpy(&nrf24l01_addr4, addr, NRF24L01_ADDRSIZE); //cache address
     984:	ad ee       	ldi	r26, 0xED	; 237
     986:	b1 e0       	ldi	r27, 0x01	; 1
     988:	fb 01       	movw	r30, r22
     98a:	85 e0       	ldi	r24, 0x05	; 5
     98c:	01 90       	ld	r0, Z+
     98e:	0d 92       	st	X+, r0
     990:	81 50       	subi	r24, 0x01	; 1
     992:	e1 f7       	brne	.-8      	; 0x98c <nrf24l01_setrxaddr+0xba>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P4, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     994:	8e e0       	ldi	r24, 0x0E	; 14
     996:	fb 01       	movw	r30, r22
     998:	64 81       	ldd	r22, Z+4	; 0x04
     99a:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
     99e:	0e c0       	rjmp	.+28     	; 0x9bc <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 5) {
     9a0:	85 30       	cpi	r24, 0x05	; 5
     9a2:	61 f4       	brne	.+24     	; 0x9bc <nrf24l01_setrxaddr+0xea>
		memcpy(&nrf24l01_addr5, addr, NRF24L01_ADDRSIZE); //cache address
     9a4:	a2 ef       	ldi	r26, 0xF2	; 242
     9a6:	b1 e0       	ldi	r27, 0x01	; 1
     9a8:	fb 01       	movw	r30, r22
     9aa:	01 90       	ld	r0, Z+
     9ac:	0d 92       	st	X+, r0
     9ae:	81 50       	subi	r24, 0x01	; 1
     9b0:	e1 f7       	brne	.-8      	; 0x9aa <nrf24l01_setrxaddr+0xd8>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P5, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     9b2:	8f e0       	ldi	r24, 0x0F	; 15
     9b4:	fb 01       	movw	r30, r22
     9b6:	64 81       	ldd	r22, Z+4	; 0x04
     9b8:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
	}
}
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	08 95       	ret

000009cc <nrf24l01_settxaddr>:

/*
 * set tx address
 */
void nrf24l01_settxaddr(uint8_t *addr) {
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	00 d0       	rcall	.+0      	; 0x9d2 <nrf24l01_settxaddr+0x6>
     9d2:	00 d0       	rcall	.+0      	; 0x9d4 <nrf24l01_settxaddr+0x8>
     9d4:	0f 92       	push	r0
     9d6:	cd b7       	in	r28, 0x3d	; 61
     9d8:	de b7       	in	r29, 0x3e	; 62
	memcpy(&nrf24l01_addrtx, addr, NRF24L01_ADDRSIZE); //cache address
     9da:	a7 ef       	ldi	r26, 0xF7	; 247
     9dc:	b1 e0       	ldi	r27, 0x01	; 1
     9de:	e8 2f       	mov	r30, r24
     9e0:	f9 2f       	mov	r31, r25
     9e2:	25 e0       	ldi	r18, 0x05	; 5
     9e4:	01 90       	ld	r0, Z+
     9e6:	0d 92       	st	X+, r0
     9e8:	21 50       	subi	r18, 0x01	; 1
     9ea:	e1 f7       	brne	.-8      	; 0x9e4 <nrf24l01_settxaddr+0x18>
	uint8_t addrrev[NRF24L01_ADDRSIZE];
	nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     9ec:	be 01       	movw	r22, r28
     9ee:	6f 5f       	subi	r22, 0xFF	; 255
     9f0:	7f 4f       	sbci	r23, 0xFF	; 255
     9f2:	0e 94 58 04 	call	0x8b0	; 0x8b0 <nrf24l01_revaddress>
	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE); //set rx address for ack on pipe 0
     9f6:	8a e0       	ldi	r24, 0x0A	; 10
     9f8:	be 01       	movw	r22, r28
     9fa:	6f 5f       	subi	r22, 0xFF	; 255
     9fc:	7f 4f       	sbci	r23, 0xFF	; 255
     9fe:	45 e0       	ldi	r20, 0x05	; 5
     a00:	0e 94 39 04 	call	0x872	; 0x872 <nrf24l01_writeregisters>
	nrf24l01_writeregisters(NRF24L01_REG_TX_ADDR, addrrev, NRF24L01_ADDRSIZE); //set tx address
     a04:	80 e1       	ldi	r24, 0x10	; 16
     a06:	be 01       	movw	r22, r28
     a08:	6f 5f       	subi	r22, 0xFF	; 255
     a0a:	7f 4f       	sbci	r23, 0xFF	; 255
     a0c:	45 e0       	ldi	r20, 0x05	; 5
     a0e:	0e 94 39 04 	call	0x872	; 0x872 <nrf24l01_writeregisters>
}
     a12:	0f 90       	pop	r0
     a14:	0f 90       	pop	r0
     a16:	0f 90       	pop	r0
     a18:	0f 90       	pop	r0
     a1a:	0f 90       	pop	r0
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	08 95       	ret

00000a22 <nrf24l01_flushRXfifo>:

/*
 * flush RX fifo
 */
void nrf24l01_flushRXfifo() {
	nrf24l01_CSNlo; //low CSN
     a22:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_FLUSH_RX);
     a24:	82 ee       	ldi	r24, 0xE2	; 226
     a26:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     a2a:	ae 9a       	sbi	0x15, 6	; 21
}
     a2c:	08 95       	ret

00000a2e <nrf24l01_flushTXfifo>:

/*
 * flush TX fifo
 */
void nrf24l01_flushTXfifo() {
	nrf24l01_CSNlo; //low CSN
     a2e:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_FLUSH_TX);
     a30:	81 ee       	ldi	r24, 0xE1	; 225
     a32:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     a36:	ae 9a       	sbi	0x15, 6	; 21
}
     a38:	08 95       	ret

00000a3a <nrf24l01_setRX>:

/*
 * set chip as RX
 */
void nrf24l01_setRX() {
	nrf24l01_setrxaddr(0, nrf24l01_addr0); //restore pipe 0 address
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	69 ed       	ldi	r22, 0xD9	; 217
     a3e:	71 e0       	ldi	r23, 0x01	; 1
     a40:	0e 94 69 04 	call	0x8d2	; 0x8d2 <nrf24l01_setrxaddr>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PRIM_RX)); //prx mode
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	0e 94 04 04 	call	0x808	; 0x808 <nrf24l01_readregister>
     a4a:	68 2f       	mov	r22, r24
     a4c:	61 60       	ori	r22, 0x01	; 1
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	0e 94 04 04 	call	0x808	; 0x808 <nrf24l01_readregister>
     a5a:	68 2f       	mov	r22, r24
     a5c:	62 60       	ori	r22, 0x02	; 2
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     a64:	87 e0       	ldi	r24, 0x07	; 7
     a66:	60 e7       	ldi	r22, 0x70	; 112
     a68:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
	nrf24l01_flushRXfifo(); //flush rx fifo
     a6c:	0e 94 11 05 	call	0xa22	; 0xa22 <nrf24l01_flushRXfifo>
	nrf24l01_flushTXfifo(); //flush tx fifo
     a70:	0e 94 17 05 	call	0xa2e	; 0xa2e <nrf24l01_flushTXfifo>
	nrf24l01_CEhi; //start listening
     a74:	af 9a       	sbi	0x15, 7	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a76:	82 e3       	ldi	r24, 0x32	; 50
     a78:	8a 95       	dec	r24
     a7a:	f1 f7       	brne	.-4      	; 0xa78 <nrf24l01_setRX+0x3e>
	_delay_us(150); //wait for the radio to power up
}
     a7c:	08 95       	ret

00000a7e <nrf24l01_setTX>:

/*
 * set chip as TX
 */
void nrf24l01_setTX() {
	nrf24l01_CElo; //stop listening
     a7e:	af 98       	cbi	0x15, 7	; 21
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PRIM_RX)); //ptx mode
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	0e 94 04 04 	call	0x808	; 0x808 <nrf24l01_readregister>
     a86:	68 2f       	mov	r22, r24
     a88:	6e 7f       	andi	r22, 0xFE	; 254
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	0e 94 04 04 	call	0x808	; 0x808 <nrf24l01_readregister>
     a96:	68 2f       	mov	r22, r24
     a98:	62 60       	ori	r22, 0x02	; 2
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     aa0:	87 e0       	ldi	r24, 0x07	; 7
     aa2:	60 e7       	ldi	r22, 0x70	; 112
     aa4:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
	nrf24l01_flushTXfifo(); //flush tx fifo
     aa8:	0e 94 17 05 	call	0xa2e	; 0xa2e <nrf24l01_flushTXfifo>
     aac:	82 e3       	ldi	r24, 0x32	; 50
     aae:	8a 95       	dec	r24
     ab0:	f1 f7       	brne	.-4      	; 0xaae <nrf24l01_setTX+0x30>
	_delay_us(150); //wait for the radio to power up
}
     ab2:	08 95       	ret

00000ab4 <nrf24l01_getstatus>:
/*
 * get status register
 */
uint8_t nrf24l01_getstatus() {
	uint8_t status = 0;
	nrf24l01_CSNlo; //low CSN
     ab4:	ae 98       	cbi	0x15, 6	; 21
	status = spi_writereadbyte(NRF24L01_CMD_NOP); //get status, send NOP request
     ab6:	8f ef       	ldi	r24, 0xFF	; 255
     ab8:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     abc:	ae 9a       	sbi	0x15, 6	; 21
	return status;
}
     abe:	08 95       	ret

00000ac0 <nrf24l01_printinfo>:

#if NRF24L01_PRINTENABLE == 1
/*
 * print info
 */
void nrf24l01_printinfo(void(*prints)(const char *), void(*printc)(unsigned char data)) {
     ac0:	ef 92       	push	r14
     ac2:	ff 92       	push	r15
     ac4:	0f 93       	push	r16
     ac6:	1f 93       	push	r17
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	cd b7       	in	r28, 0x3d	; 61
     ace:	de b7       	in	r29, 0x3e	; 62
     ad0:	c4 56       	subi	r28, 0x64	; 100
     ad2:	d0 40       	sbci	r29, 0x00	; 0
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	f8 94       	cli
     ad8:	de bf       	out	0x3e, r29	; 62
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	cd bf       	out	0x3d, r28	; 61
     ade:	7c 01       	movw	r14, r24
	char buff[100];
	prints("info\r\n");
     ae0:	8f e5       	ldi	r24, 0x5F	; 95
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	f7 01       	movw	r30, r14
     ae6:	09 95       	icall
	sprintf(buff,"STATUS: %02X\r\n", nrf24l01_getstatus()); prints(buff);
     ae8:	0e 94 5a 05 	call	0xab4	; 0xab4 <nrf24l01_getstatus>
     aec:	00 d0       	rcall	.+0      	; 0xaee <nrf24l01_printinfo+0x2e>
     aee:	00 d0       	rcall	.+0      	; 0xaf0 <nrf24l01_printinfo+0x30>
     af0:	00 d0       	rcall	.+0      	; 0xaf2 <nrf24l01_printinfo+0x32>
     af2:	ed b7       	in	r30, 0x3d	; 61
     af4:	fe b7       	in	r31, 0x3e	; 62
     af6:	31 96       	adiw	r30, 0x01	; 1
     af8:	8e 01       	movw	r16, r28
     afa:	0f 5f       	subi	r16, 0xFF	; 255
     afc:	1f 4f       	sbci	r17, 0xFF	; 255
     afe:	ad b7       	in	r26, 0x3d	; 61
     b00:	be b7       	in	r27, 0x3e	; 62
     b02:	12 96       	adiw	r26, 0x02	; 2
     b04:	1c 93       	st	X, r17
     b06:	0e 93       	st	-X, r16
     b08:	11 97       	sbiw	r26, 0x01	; 1
     b0a:	26 e6       	ldi	r18, 0x66	; 102
     b0c:	31 e0       	ldi	r19, 0x01	; 1
     b0e:	33 83       	std	Z+3, r19	; 0x03
     b10:	22 83       	std	Z+2, r18	; 0x02
     b12:	84 83       	std	Z+4, r24	; 0x04
     b14:	15 82       	std	Z+5, r1	; 0x05
     b16:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <sprintf>
     b1a:	8d b7       	in	r24, 0x3d	; 61
     b1c:	9e b7       	in	r25, 0x3e	; 62
     b1e:	06 96       	adiw	r24, 0x06	; 6
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	f8 94       	cli
     b24:	9e bf       	out	0x3e, r25	; 62
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	8d bf       	out	0x3d, r24	; 61
     b2a:	c8 01       	movw	r24, r16
     b2c:	f7 01       	movw	r30, r14
     b2e:	09 95       	icall
	sprintf(buff,"CONFIG: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_CONFIG)); prints(buff);
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	0e 94 04 04 	call	0x808	; 0x808 <nrf24l01_readregister>
     b36:	00 d0       	rcall	.+0      	; 0xb38 <nrf24l01_printinfo+0x78>
     b38:	00 d0       	rcall	.+0      	; 0xb3a <nrf24l01_printinfo+0x7a>
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <nrf24l01_printinfo+0x7c>
     b3c:	ed b7       	in	r30, 0x3d	; 61
     b3e:	fe b7       	in	r31, 0x3e	; 62
     b40:	31 96       	adiw	r30, 0x01	; 1
     b42:	ad b7       	in	r26, 0x3d	; 61
     b44:	be b7       	in	r27, 0x3e	; 62
     b46:	12 96       	adiw	r26, 0x02	; 2
     b48:	1c 93       	st	X, r17
     b4a:	0e 93       	st	-X, r16
     b4c:	11 97       	sbiw	r26, 0x01	; 1
     b4e:	25 e7       	ldi	r18, 0x75	; 117
     b50:	31 e0       	ldi	r19, 0x01	; 1
     b52:	33 83       	std	Z+3, r19	; 0x03
     b54:	22 83       	std	Z+2, r18	; 0x02
     b56:	84 83       	std	Z+4, r24	; 0x04
     b58:	15 82       	std	Z+5, r1	; 0x05
     b5a:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <sprintf>
     b5e:	8d b7       	in	r24, 0x3d	; 61
     b60:	9e b7       	in	r25, 0x3e	; 62
     b62:	06 96       	adiw	r24, 0x06	; 6
     b64:	0f b6       	in	r0, 0x3f	; 63
     b66:	f8 94       	cli
     b68:	9e bf       	out	0x3e, r25	; 62
     b6a:	0f be       	out	0x3f, r0	; 63
     b6c:	8d bf       	out	0x3d, r24	; 61
     b6e:	c8 01       	movw	r24, r16
     b70:	f7 01       	movw	r30, r14
     b72:	09 95       	icall
	sprintf(buff,"RF_CH: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_CH)); prints(buff);
     b74:	85 e0       	ldi	r24, 0x05	; 5
     b76:	0e 94 04 04 	call	0x808	; 0x808 <nrf24l01_readregister>
     b7a:	00 d0       	rcall	.+0      	; 0xb7c <nrf24l01_printinfo+0xbc>
     b7c:	00 d0       	rcall	.+0      	; 0xb7e <nrf24l01_printinfo+0xbe>
     b7e:	00 d0       	rcall	.+0      	; 0xb80 <nrf24l01_printinfo+0xc0>
     b80:	ed b7       	in	r30, 0x3d	; 61
     b82:	fe b7       	in	r31, 0x3e	; 62
     b84:	31 96       	adiw	r30, 0x01	; 1
     b86:	ad b7       	in	r26, 0x3d	; 61
     b88:	be b7       	in	r27, 0x3e	; 62
     b8a:	12 96       	adiw	r26, 0x02	; 2
     b8c:	1c 93       	st	X, r17
     b8e:	0e 93       	st	-X, r16
     b90:	11 97       	sbiw	r26, 0x01	; 1
     b92:	24 e8       	ldi	r18, 0x84	; 132
     b94:	31 e0       	ldi	r19, 0x01	; 1
     b96:	33 83       	std	Z+3, r19	; 0x03
     b98:	22 83       	std	Z+2, r18	; 0x02
     b9a:	84 83       	std	Z+4, r24	; 0x04
     b9c:	15 82       	std	Z+5, r1	; 0x05
     b9e:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <sprintf>
     ba2:	8d b7       	in	r24, 0x3d	; 61
     ba4:	9e b7       	in	r25, 0x3e	; 62
     ba6:	06 96       	adiw	r24, 0x06	; 6
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	f8 94       	cli
     bac:	9e bf       	out	0x3e, r25	; 62
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	8d bf       	out	0x3d, r24	; 61
     bb2:	c8 01       	movw	r24, r16
     bb4:	f7 01       	movw	r30, r14
     bb6:	09 95       	icall
	sprintf(buff,"RF_SETUP: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_SETUP)); prints(buff);
     bb8:	86 e0       	ldi	r24, 0x06	; 6
     bba:	0e 94 04 04 	call	0x808	; 0x808 <nrf24l01_readregister>
     bbe:	00 d0       	rcall	.+0      	; 0xbc0 <nrf24l01_printinfo+0x100>
     bc0:	00 d0       	rcall	.+0      	; 0xbc2 <nrf24l01_printinfo+0x102>
     bc2:	00 d0       	rcall	.+0      	; 0xbc4 <nrf24l01_printinfo+0x104>
     bc4:	ed b7       	in	r30, 0x3d	; 61
     bc6:	fe b7       	in	r31, 0x3e	; 62
     bc8:	31 96       	adiw	r30, 0x01	; 1
     bca:	ad b7       	in	r26, 0x3d	; 61
     bcc:	be b7       	in	r27, 0x3e	; 62
     bce:	12 96       	adiw	r26, 0x02	; 2
     bd0:	1c 93       	st	X, r17
     bd2:	0e 93       	st	-X, r16
     bd4:	11 97       	sbiw	r26, 0x01	; 1
     bd6:	22 e9       	ldi	r18, 0x92	; 146
     bd8:	31 e0       	ldi	r19, 0x01	; 1
     bda:	33 83       	std	Z+3, r19	; 0x03
     bdc:	22 83       	std	Z+2, r18	; 0x02
     bde:	84 83       	std	Z+4, r24	; 0x04
     be0:	15 82       	std	Z+5, r1	; 0x05
     be2:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <sprintf>
     be6:	8d b7       	in	r24, 0x3d	; 61
     be8:	9e b7       	in	r25, 0x3e	; 62
     bea:	06 96       	adiw	r24, 0x06	; 6
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	9e bf       	out	0x3e, r25	; 62
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	8d bf       	out	0x3d, r24	; 61
     bf6:	c8 01       	movw	r24, r16
     bf8:	f7 01       	movw	r30, r14
     bfa:	09 95       	icall
	sprintf(buff,"EN_AA: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_AA)); prints(buff);
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	0e 94 04 04 	call	0x808	; 0x808 <nrf24l01_readregister>
     c02:	00 d0       	rcall	.+0      	; 0xc04 <nrf24l01_printinfo+0x144>
     c04:	00 d0       	rcall	.+0      	; 0xc06 <nrf24l01_printinfo+0x146>
     c06:	00 d0       	rcall	.+0      	; 0xc08 <nrf24l01_printinfo+0x148>
     c08:	ed b7       	in	r30, 0x3d	; 61
     c0a:	fe b7       	in	r31, 0x3e	; 62
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	ad b7       	in	r26, 0x3d	; 61
     c10:	be b7       	in	r27, 0x3e	; 62
     c12:	12 96       	adiw	r26, 0x02	; 2
     c14:	1c 93       	st	X, r17
     c16:	0e 93       	st	-X, r16
     c18:	11 97       	sbiw	r26, 0x01	; 1
     c1a:	23 ea       	ldi	r18, 0xA3	; 163
     c1c:	31 e0       	ldi	r19, 0x01	; 1
     c1e:	33 83       	std	Z+3, r19	; 0x03
     c20:	22 83       	std	Z+2, r18	; 0x02
     c22:	84 83       	std	Z+4, r24	; 0x04
     c24:	15 82       	std	Z+5, r1	; 0x05
     c26:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <sprintf>
     c2a:	8d b7       	in	r24, 0x3d	; 61
     c2c:	9e b7       	in	r25, 0x3e	; 62
     c2e:	06 96       	adiw	r24, 0x06	; 6
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	f8 94       	cli
     c34:	9e bf       	out	0x3e, r25	; 62
     c36:	0f be       	out	0x3f, r0	; 63
     c38:	8d bf       	out	0x3d, r24	; 61
     c3a:	c8 01       	movw	r24, r16
     c3c:	f7 01       	movw	r30, r14
     c3e:	09 95       	icall
	sprintf(buff,"EN_RXADDR: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_RXADDR)); prints(buff);
     c40:	82 e0       	ldi	r24, 0x02	; 2
     c42:	0e 94 04 04 	call	0x808	; 0x808 <nrf24l01_readregister>
     c46:	00 d0       	rcall	.+0      	; 0xc48 <nrf24l01_printinfo+0x188>
     c48:	00 d0       	rcall	.+0      	; 0xc4a <nrf24l01_printinfo+0x18a>
     c4a:	00 d0       	rcall	.+0      	; 0xc4c <nrf24l01_printinfo+0x18c>
     c4c:	ed b7       	in	r30, 0x3d	; 61
     c4e:	fe b7       	in	r31, 0x3e	; 62
     c50:	31 96       	adiw	r30, 0x01	; 1
     c52:	ad b7       	in	r26, 0x3d	; 61
     c54:	be b7       	in	r27, 0x3e	; 62
     c56:	12 96       	adiw	r26, 0x02	; 2
     c58:	1c 93       	st	X, r17
     c5a:	0e 93       	st	-X, r16
     c5c:	11 97       	sbiw	r26, 0x01	; 1
     c5e:	21 eb       	ldi	r18, 0xB1	; 177
     c60:	31 e0       	ldi	r19, 0x01	; 1
     c62:	33 83       	std	Z+3, r19	; 0x03
     c64:	22 83       	std	Z+2, r18	; 0x02
     c66:	84 83       	std	Z+4, r24	; 0x04
     c68:	15 82       	std	Z+5, r1	; 0x05
     c6a:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <sprintf>
     c6e:	8d b7       	in	r24, 0x3d	; 61
     c70:	9e b7       	in	r25, 0x3e	; 62
     c72:	06 96       	adiw	r24, 0x06	; 6
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	f8 94       	cli
     c78:	9e bf       	out	0x3e, r25	; 62
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	8d bf       	out	0x3d, r24	; 61
     c7e:	c8 01       	movw	r24, r16
     c80:	f7 01       	movw	r30, r14
     c82:	09 95       	icall
	sprintf(buff,"OBSERVE_TX: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_OBSERVE_TX)); prints(buff);
     c84:	88 e0       	ldi	r24, 0x08	; 8
     c86:	0e 94 04 04 	call	0x808	; 0x808 <nrf24l01_readregister>
     c8a:	00 d0       	rcall	.+0      	; 0xc8c <nrf24l01_printinfo+0x1cc>
     c8c:	00 d0       	rcall	.+0      	; 0xc8e <nrf24l01_printinfo+0x1ce>
     c8e:	00 d0       	rcall	.+0      	; 0xc90 <nrf24l01_printinfo+0x1d0>
     c90:	ed b7       	in	r30, 0x3d	; 61
     c92:	fe b7       	in	r31, 0x3e	; 62
     c94:	31 96       	adiw	r30, 0x01	; 1
     c96:	ad b7       	in	r26, 0x3d	; 61
     c98:	be b7       	in	r27, 0x3e	; 62
     c9a:	12 96       	adiw	r26, 0x02	; 2
     c9c:	1c 93       	st	X, r17
     c9e:	0e 93       	st	-X, r16
     ca0:	11 97       	sbiw	r26, 0x01	; 1
     ca2:	23 ec       	ldi	r18, 0xC3	; 195
     ca4:	31 e0       	ldi	r19, 0x01	; 1
     ca6:	33 83       	std	Z+3, r19	; 0x03
     ca8:	22 83       	std	Z+2, r18	; 0x02
     caa:	84 83       	std	Z+4, r24	; 0x04
     cac:	15 82       	std	Z+5, r1	; 0x05
     cae:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <sprintf>
     cb2:	8d b7       	in	r24, 0x3d	; 61
     cb4:	9e b7       	in	r25, 0x3e	; 62
     cb6:	06 96       	adiw	r24, 0x06	; 6
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	f8 94       	cli
     cbc:	9e bf       	out	0x3e, r25	; 62
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	8d bf       	out	0x3d, r24	; 61
     cc2:	c8 01       	movw	r24, r16
     cc4:	f7 01       	movw	r30, r14
     cc6:	09 95       	icall
	prints("\r\n");
     cc8:	86 ed       	ldi	r24, 0xD6	; 214
     cca:	91 e0       	ldi	r25, 0x01	; 1
     ccc:	f7 01       	movw	r30, r14
     cce:	09 95       	icall
}
     cd0:	cc 59       	subi	r28, 0x9C	; 156
     cd2:	df 4f       	sbci	r29, 0xFF	; 255
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	f8 94       	cli
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	cd bf       	out	0x3d, r28	; 61
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	1f 91       	pop	r17
     ce4:	0f 91       	pop	r16
     ce6:	ff 90       	pop	r15
     ce8:	ef 90       	pop	r14
     cea:	08 95       	ret

00000cec <nrf24l01_readready>:
}

/*
 * check if there is data ready
 */
uint8_t nrf24l01_readready(uint8_t* pipe) {
     cec:	cf 93       	push	r28
     cee:	df 93       	push	r29
     cf0:	ec 01       	movw	r28, r24
    uint8_t status = nrf24l01_getstatus();
     cf2:	0e 94 5a 05 	call	0xab4	; 0xab4 <nrf24l01_getstatus>
    uint8_t ret = status & (1<<NRF24L01_REG_RX_DR);
    if(ret) {
     cf6:	98 2f       	mov	r25, r24
     cf8:	90 74       	andi	r25, 0x40	; 64
     cfa:	86 ff       	sbrs	r24, 6
     cfc:	05 c0       	rjmp	.+10     	; 0xd08 <nrf24l01_readready+0x1c>
		//get the pipe number
		if(pipe)
     cfe:	20 97       	sbiw	r28, 0x00	; 0
     d00:	19 f0       	breq	.+6      	; 0xd08 <nrf24l01_readready+0x1c>
			*pipe = (status >> NRF24L01_REG_RX_P_NO) & 0b111;
     d02:	86 95       	lsr	r24
     d04:	87 70       	andi	r24, 0x07	; 7
     d06:	88 83       	st	Y, r24
    }
    return ret;
}
     d08:	89 2f       	mov	r24, r25
     d0a:	df 91       	pop	r29
     d0c:	cf 91       	pop	r28
     d0e:	08 95       	ret

00000d10 <nrf24l01_read>:

/*
 * get data
 */
void nrf24l01_read(uint8_t pipe,uint8_t *data) {
     d10:	0f 93       	push	r16
     d12:	1f 93       	push	r17
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	06 2f       	mov	r16, r22
     d1a:	17 2f       	mov	r17, r23
	uint8_t i = 0;
	//read rx register
	nrf24l01_CSNlo; //low CSN
     d1c:	ae 98       	cbi	0x15, 6	; 21
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
     d1e:	81 e6       	ldi	r24, 0x61	; 97
     d20:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <spi_writereadbyte>
     d24:	c0 2f       	mov	r28, r16
     d26:	d1 2f       	mov	r29, r17
	//Thay doi lai command, lay PAYLOAD va write ACK
	//spi_writereadbyte(NRF24L01_CMD_W_ACK_PAYLOAD | pipe);
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     d28:	10 e0       	ldi	r17, 0x00	; 0
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
     d2a:	8f ef       	ldi	r24, 0xFF	; 255
     d2c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <spi_writereadbyte>
     d30:	89 93       	st	Y+, r24
	//read rx register
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
	//Thay doi lai command, lay PAYLOAD va write ACK
	//spi_writereadbyte(NRF24L01_CMD_W_ACK_PAYLOAD | pipe);
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     d32:	1f 5f       	subi	r17, 0xFF	; 255
     d34:	19 30       	cpi	r17, 0x09	; 9
     d36:	c9 f7       	brne	.-14     	; 0xd2a <nrf24l01_read+0x1a>
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
    nrf24l01_CSNhi; //high CSN
     d38:	ae 9a       	sbi	0x15, 6	; 21
    //reset register
    nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR));
     d3a:	87 e0       	ldi	r24, 0x07	; 7
     d3c:	60 e4       	ldi	r22, 0x40	; 64
     d3e:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
    //handle ack payload receipt
	if (nrf24l01_getstatus() & (1<<NRF24L01_REG_TX_DS))
     d42:	0e 94 5a 05 	call	0xab4	; 0xab4 <nrf24l01_getstatus>
     d46:	85 ff       	sbrs	r24, 5
     d48:	04 c0       	rjmp	.+8      	; 0xd52 <nrf24l01_read+0x42>
		nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_TX_DS));
     d4a:	87 e0       	ldi	r24, 0x07	; 7
     d4c:	60 e2       	ldi	r22, 0x20	; 32
     d4e:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
}
     d52:	df 91       	pop	r29
     d54:	cf 91       	pop	r28
     d56:	1f 91       	pop	r17
     d58:	0f 91       	pop	r16
     d5a:	08 95       	ret

00000d5c <nrf24l01_write>:

/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	08 2f       	mov	r16, r24
     d66:	19 2f       	mov	r17, r25
	uint8_t i = 0;
	uint8_t ret = 0;

	//set tx mode
	nrf24l01_setTX();
     d68:	0e 94 3f 05 	call	0xa7e	; 0xa7e <nrf24l01_setTX>

	//write data
	nrf24l01_CSNlo; //low CSN
     d6c:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
     d6e:	80 ea       	ldi	r24, 0xA0	; 160
     d70:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <spi_writereadbyte>
     d74:	c0 2f       	mov	r28, r16
     d76:	d1 2f       	mov	r29, r17
     d78:	19 e0       	ldi	r17, 0x09	; 9
	for (i=0; i<NRF24L01_PAYLOAD; i++)
		spi_writereadbyte(data[i]);
     d7a:	89 91       	ld	r24, Y+
     d7c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <spi_writereadbyte>
     d80:	11 50       	subi	r17, 0x01	; 1
	nrf24l01_setTX();

	//write data
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
	for (i=0; i<NRF24L01_PAYLOAD; i++)
     d82:	d9 f7       	brne	.-10     	; 0xd7a <nrf24l01_write+0x1e>
		spi_writereadbyte(data[i]);
	nrf24l01_CSNhi; //high CSN
     d84:	ae 9a       	sbi	0x15, 6	; 21

	//start transmission
	nrf24l01_CEhi; //high CE
     d86:	af 9a       	sbi	0x15, 7	; 21
     d88:	85 e0       	ldi	r24, 0x05	; 5
     d8a:	8a 95       	dec	r24
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <nrf24l01_write+0x2e>
	_delay_us(15);
	nrf24l01_CElo; //low CE
     d8e:	af 98       	cbi	0x15, 7	; 21
     d90:	83 e0       	ldi	r24, 0x03	; 3
     d92:	8a 95       	dec	r24
     d94:	f1 f7       	brne	.-4      	; 0xd92 <nrf24l01_write+0x36>
     d96:	00 00       	nop

	//stop if max_retries reached or send is ok
	do {
		_delay_us(10);
	}
	while( !(nrf24l01_getstatus() & (1<<NRF24L01_REG_MAX_RT | 1<<NRF24L01_REG_TX_DS)) );
     d98:	0e 94 5a 05 	call	0xab4	; 0xab4 <nrf24l01_getstatus>
     d9c:	80 73       	andi	r24, 0x30	; 48
     d9e:	c1 f3       	breq	.-16     	; 0xd90 <nrf24l01_write+0x34>

	if(nrf24l01_getstatus() & 1<<NRF24L01_REG_TX_DS)
     da0:	0e 94 5a 05 	call	0xab4	; 0xab4 <nrf24l01_getstatus>
     da4:	c8 2f       	mov	r28, r24
		ret = 1;

	//reset PLOS_CNT
	nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH);
     da6:	85 e0       	ldi	r24, 0x05	; 5
     da8:	6c e4       	ldi	r22, 0x4C	; 76
     daa:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>

	//power down
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PWR_UP));
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	0e 94 04 04 	call	0x808	; 0x808 <nrf24l01_readregister>
     db4:	68 2f       	mov	r22, r24
     db6:	6d 7f       	andi	r22, 0xFD	; 253
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>

	//set rx mode
	nrf24l01_setRX();
     dbe:	0e 94 1d 05 	call	0xa3a	; 0xa3a <nrf24l01_setRX>
/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
	uint8_t i = 0;
	uint8_t ret = 0;
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	c5 ff       	sbrs	r28, 5
     dc6:	80 e0       	ldi	r24, 0x00	; 0

	//set rx mode
	nrf24l01_setRX();

	return ret;
}
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	1f 91       	pop	r17
     dce:	0f 91       	pop	r16
     dd0:	08 95       	ret

00000dd2 <nrf24l01_setpalevel>:

/*
 * set power level
 */
void nrf24l01_setpalevel() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP);
     dd2:	86 e0       	ldi	r24, 0x06	; 6
     dd4:	0e 94 04 04 	call	0x808	; 0x808 <nrf24l01_readregister>
  setup &= ~((1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH));

  if (NRF24L01_RF24_PA == NRF24L01_RF24_PA_MAX) {
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
     dd8:	68 2f       	mov	r22, r24
     dda:	66 60       	ori	r22, 0x06	; 6
  } else {
	  //default is max power
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     ddc:	86 e0       	ldi	r24, 0x06	; 6
     dde:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
}
     de2:	08 95       	ret

00000de4 <nrf24l01_setdatarate>:

/*
 * set datarate
 */
void nrf24l01_setdatarate() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP) ;
     de4:	86 e0       	ldi	r24, 0x06	; 6
     de6:	0e 94 04 04 	call	0x808	; 0x808 <nrf24l01_readregister>

  setup &= ~((1<<NRF24L01_REG_RF_DR_LOW) | (1<<NRF24L01_REG_RF_DR_HIGH));
     dea:	68 2f       	mov	r22, r24
     dec:	67 7d       	andi	r22, 0xD7	; 215
    } else {
    	//default is 1Mbps
    }
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     dee:	86 e0       	ldi	r24, 0x06	; 6
     df0:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
}
     df4:	08 95       	ret

00000df6 <nrf24l01_setcrclength>:

/*
 * set crc length
 */
void nrf24l01_setcrclength() {
  uint8_t config = nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~((1<<NRF24L01_REG_CRCO) | (1<<NRF24L01_REG_EN_CRC));
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	0e 94 04 04 	call	0x808	; 0x808 <nrf24l01_readregister>
	  //nothing
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_8) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_16) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
	  config |= (1<<NRF24L01_REG_CRCO);
     dfc:	68 2f       	mov	r22, r24
     dfe:	6c 60       	ori	r22, 0x0C	; 12
  } else {
	  //default is disabled
  }

  nrf24l01_writeregister(NRF24L01_REG_CONFIG, config);
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
}
     e06:	08 95       	ret

00000e08 <nrf24l01_init>:
/*
 * init nrf24l01
 */
void nrf24l01_init() {
	//setup port
	NRF24L01_DDR |= (1<<NRF24L01_CSN); //output
     e08:	a6 9a       	sbi	0x14, 6	; 20
	NRF24L01_DDR |= (1<<NRF24L01_CE); //output
     e0a:	a7 9a       	sbi	0x14, 7	; 20

    spi_init(); //init spi
     e0c:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <spi_init>

    nrf24l01_CElo; //low CE
     e10:	af 98       	cbi	0x15, 7	; 21
    nrf24l01_CSNhi; //high CSN
     e12:	ae 9a       	sbi	0x15, 6	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e14:	81 ee       	ldi	r24, 0xE1	; 225
     e16:	94 e0       	ldi	r25, 0x04	; 4
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	f1 f7       	brne	.-4      	; 0xe18 <nrf24l01_init+0x10>
     e1c:	00 c0       	rjmp	.+0      	; 0xe1e <nrf24l01_init+0x16>
     e1e:	00 00       	nop

    _delay_ms(5); //wait for the radio to init

    nrf24l01_setpalevel(); //set power level
     e20:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <nrf24l01_setpalevel>
    nrf24l01_setdatarate(); //set data rate
     e24:	0e 94 f2 06 	call	0xde4	; 0xde4 <nrf24l01_setdatarate>
    nrf24l01_setcrclength(); //set crc length
     e28:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <nrf24l01_setcrclength>
    nrf24l01_writeregister(NRF24L01_REG_SETUP_RETR, NRF24L01_RETR); // set retries
     e2c:	84 e0       	ldi	r24, 0x04	; 4
     e2e:	67 e4       	ldi	r22, 0x47	; 71
     e30:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_DYNPD, 0); //disable dynamic payloads
     e34:	8c e1       	ldi	r24, 0x1C	; 28
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH); //set RF channel
     e3c:	85 e0       	ldi	r24, 0x05	; 5
     e3e:	6c e4       	ldi	r22, 0x4C	; 76
     e40:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>

	//payload size
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P0, NRF24L01_PAYLOAD);
     e44:	81 e1       	ldi	r24, 0x11	; 17
     e46:	69 e0       	ldi	r22, 0x09	; 9
     e48:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P1, NRF24L01_PAYLOAD);
     e4c:	82 e1       	ldi	r24, 0x12	; 18
     e4e:	69 e0       	ldi	r22, 0x09	; 9
     e50:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P2, NRF24L01_PAYLOAD);
     e54:	83 e1       	ldi	r24, 0x13	; 19
     e56:	69 e0       	ldi	r22, 0x09	; 9
     e58:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P3, NRF24L01_PAYLOAD);
     e5c:	84 e1       	ldi	r24, 0x14	; 20
     e5e:	69 e0       	ldi	r22, 0x09	; 9
     e60:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P4, NRF24L01_PAYLOAD);
     e64:	85 e1       	ldi	r24, 0x15	; 21
     e66:	69 e0       	ldi	r22, 0x09	; 9
     e68:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P5, NRF24L01_PAYLOAD);
     e6c:	86 e1       	ldi	r24, 0x16	; 22
     e6e:	69 e0       	ldi	r22, 0x09	; 9
     e70:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
	#endif

	//enable pipe
	nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, 0);
     e74:	82 e0       	ldi	r24, 0x02	; 2
     e76:	60 e0       	ldi	r22, 0x00	; 0
     e78:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P0));
     e7c:	82 e0       	ldi	r24, 0x02	; 2
     e7e:	0e 94 04 04 	call	0x808	; 0x808 <nrf24l01_readregister>
     e82:	68 2f       	mov	r22, r24
     e84:	61 60       	ori	r22, 0x01	; 1
     e86:	82 e0       	ldi	r24, 0x02	; 2
     e88:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P1));
     e8c:	82 e0       	ldi	r24, 0x02	; 2
     e8e:	0e 94 04 04 	call	0x808	; 0x808 <nrf24l01_readregister>
     e92:	68 2f       	mov	r22, r24
     e94:	62 60       	ori	r22, 0x02	; 2
     e96:	82 e0       	ldi	r24, 0x02	; 2
     e98:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P2));
     e9c:	82 e0       	ldi	r24, 0x02	; 2
     e9e:	0e 94 04 04 	call	0x808	; 0x808 <nrf24l01_readregister>
     ea2:	68 2f       	mov	r22, r24
     ea4:	64 60       	ori	r22, 0x04	; 4
     ea6:	82 e0       	ldi	r24, 0x02	; 2
     ea8:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P3));
     eac:	82 e0       	ldi	r24, 0x02	; 2
     eae:	0e 94 04 04 	call	0x808	; 0x808 <nrf24l01_readregister>
     eb2:	68 2f       	mov	r22, r24
     eb4:	68 60       	ori	r22, 0x08	; 8
     eb6:	82 e0       	ldi	r24, 0x02	; 2
     eb8:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P4));
     ebc:	82 e0       	ldi	r24, 0x02	; 2
     ebe:	0e 94 04 04 	call	0x808	; 0x808 <nrf24l01_readregister>
     ec2:	68 2f       	mov	r22, r24
     ec4:	60 61       	ori	r22, 0x10	; 16
     ec6:	82 e0       	ldi	r24, 0x02	; 2
     ec8:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P5));
     ecc:	82 e0       	ldi	r24, 0x02	; 2
     ece:	0e 94 04 04 	call	0x808	; 0x808 <nrf24l01_readregister>
     ed2:	68 2f       	mov	r22, r24
     ed4:	60 62       	ori	r22, 0x20	; 32
     ed6:	82 e0       	ldi	r24, 0x02	; 2
     ed8:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
	#endif

	//auto ack
	#if NRF24L01_ACK == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P0));
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	0e 94 04 04 	call	0x808	; 0x808 <nrf24l01_readregister>
     ee2:	68 2f       	mov	r22, r24
     ee4:	61 60       	ori	r22, 0x01	; 1
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P1));
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	0e 94 04 04 	call	0x808	; 0x808 <nrf24l01_readregister>
     ef2:	68 2f       	mov	r22, r24
     ef4:	62 60       	ori	r22, 0x02	; 2
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P2));
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	0e 94 04 04 	call	0x808	; 0x808 <nrf24l01_readregister>
     f02:	68 2f       	mov	r22, r24
     f04:	64 60       	ori	r22, 0x04	; 4
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P3));
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	0e 94 04 04 	call	0x808	; 0x808 <nrf24l01_readregister>
     f12:	68 2f       	mov	r22, r24
     f14:	68 60       	ori	r22, 0x08	; 8
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P4));
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	0e 94 04 04 	call	0x808	; 0x808 <nrf24l01_readregister>
     f22:	68 2f       	mov	r22, r24
     f24:	60 61       	ori	r22, 0x10	; 16
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P5));
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	0e 94 04 04 	call	0x808	; 0x808 <nrf24l01_readregister>
     f32:	68 2f       	mov	r22, r24
     f34:	60 62       	ori	r22, 0x20	; 32
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	0e 94 2c 04 	call	0x858	; 0x858 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P4));
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P5));
	#endif

	//rx address
	nrf24l01_setrxaddr(0, nrf24l01_addr0);
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	69 ed       	ldi	r22, 0xD9	; 217
     f40:	71 e0       	ldi	r23, 0x01	; 1
     f42:	0e 94 69 04 	call	0x8d2	; 0x8d2 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(1, nrf24l01_addr1);
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	6e ed       	ldi	r22, 0xDE	; 222
     f4a:	71 e0       	ldi	r23, 0x01	; 1
     f4c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(2, nrf24l01_addr2);
     f50:	82 e0       	ldi	r24, 0x02	; 2
     f52:	63 ee       	ldi	r22, 0xE3	; 227
     f54:	71 e0       	ldi	r23, 0x01	; 1
     f56:	0e 94 69 04 	call	0x8d2	; 0x8d2 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(3, nrf24l01_addr3);
     f5a:	83 e0       	ldi	r24, 0x03	; 3
     f5c:	68 ee       	ldi	r22, 0xE8	; 232
     f5e:	71 e0       	ldi	r23, 0x01	; 1
     f60:	0e 94 69 04 	call	0x8d2	; 0x8d2 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(4, nrf24l01_addr4);
     f64:	84 e0       	ldi	r24, 0x04	; 4
     f66:	6d ee       	ldi	r22, 0xED	; 237
     f68:	71 e0       	ldi	r23, 0x01	; 1
     f6a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(5, nrf24l01_addr5);
     f6e:	85 e0       	ldi	r24, 0x05	; 5
     f70:	62 ef       	ldi	r22, 0xF2	; 242
     f72:	71 e0       	ldi	r23, 0x01	; 1
     f74:	0e 94 69 04 	call	0x8d2	; 0x8d2 <nrf24l01_setrxaddr>

	//tx address
	nrf24l01_settxaddr(nrf24l01_addrtx);
     f78:	87 ef       	ldi	r24, 0xF7	; 247
     f7a:	91 e0       	ldi	r25, 0x01	; 1
     f7c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <nrf24l01_settxaddr>

	//set rx mode
	nrf24l01_setRX();
     f80:	0e 94 1d 05 	call	0xa3a	; 0xa3a <nrf24l01_setRX>
}
     f84:	08 95       	ret

00000f86 <sMR_init>:
static void clearInEvents(SMR* handle);
static void clearOutEvents(SMR* handle);


void sMR_init(SMR* handle)
{
     f86:	fc 01       	movw	r30, r24
	int i;

	for (i = 0; i < SMR_MAX_ORTHOGONAL_STATES; ++i)
		handle->stateConfVector[i] = SMR_last_state;
     f88:	8d e0       	ldi	r24, 0x0D	; 13
     f8a:	80 83       	st	Z, r24
     f8c:	81 83       	std	Z+1, r24	; 0x01
     f8e:	82 83       	std	Z+2, r24	; 0x02
	
	
	handle->stateConfVectorPosition = 0;
     f90:	14 82       	std	Z+4, r1	; 0x04
     f92:	13 82       	std	Z+3, r1	; 0x03

	// TODO: initialize all events ...
	// TODO: initialize all variables ... (set default values - here or inenter sequence ?!?)

}
     f94:	08 95       	ret

00000f96 <sMR_enter>:

void sMR_enter(SMR* handle)
{
     f96:	1f 93       	push	r17
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	ec 01       	movw	r28, r24
	sMR_entryaction(handle);
	/* Default enter sequence for region main region */
	/* Default react sequence for initial entry  */
	/* Default enter sequence for state on */
	/* Entry action for state 'on'. */
	handle->iface.lightOn = bool_true;
     f9e:	11 e0       	ldi	r17, 0x01	; 1
     fa0:	1e a7       	lds	r17, 0x7e
	/* Default enter sequence for region r1 */
	/* Default react sequence for initial entry  */
	/* Default enter sequence for state Init */
	/* Entry action for state 'Init'. */
	sMR_setTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) , 3 * 1000, bool_false);
     fa2:	c9 96       	adiw	r24, 0x39	; 57
     fa4:	48 eb       	ldi	r20, 0xB8	; 184
     fa6:	5b e0       	ldi	r21, 0x0B	; 11
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	0e 94 3e 03 	call	0x67c	; 0x67c <sMR_setTimer>
	handle->iface.tableId = 1;
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	a0 e0       	ldi	r26, 0x00	; 0
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	8b ab       	sts	0x5b, r24
     fbc:	9c ab       	sts	0x5c, r25
     fbe:	ad ab       	sts	0x5d, r26
     fc0:	be ab       	sts	0x5e, r27
	sMRIfaceLCD_init();
     fc2:	0e 94 23 02 	call	0x446	; 0x446 <sMRIfaceLCD_init>
	sMRIfaceKEYPAD_init();
     fc6:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <sMRIfaceKEYPAD_init>
	sMRIfaceRF_init();
     fca:	0e 94 44 03 	call	0x688	; 0x688 <sMRIfaceRF_init>
	sMRIfaceUART_init();
     fce:	0e 94 34 03 	call	0x668	; 0x668 <sMRIfaceUART_init>
	sMRIfaceLCD_clear();
     fd2:	0e 94 1a 02 	call	0x434	; 0x434 <sMRIfaceLCD_clear>
	sMRIfaceLCD_writeString("Waitting...");
     fd6:	8c ef       	ldi	r24, 0xFC	; 252
     fd8:	91 e0       	ldi	r25, 0x01	; 1
     fda:	0e 94 e7 01 	call	0x3ce	; 0x3ce <sMRIfaceLCD_writeString>
	handle->stateConfVector[0] = SMR_main_region_on_r1_Init;
     fde:	18 83       	st	Y, r17
	handle->stateConfVectorPosition = 0;
     fe0:	1c 82       	std	Y+4, r1	; 0x04
     fe2:	1b 82       	std	Y+3, r1	; 0x03
}
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	08 95       	ret

00000fec <sMR_exit>:

void sMR_exit(SMR* handle)
{
     fec:	cf 93       	push	r28
     fee:	df 93       	push	r29
     ff0:	ec 01       	movw	r28, r24
	/* Default exit sequence for statechart SMR */
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of main region) at position 0... */
	switch(handle->stateConfVector[ 0 ]) {
     ff2:	88 81       	ld	r24, Y
     ff4:	84 30       	cpi	r24, 0x04	; 4
     ff6:	d1 f0       	breq	.+52     	; 0x102c <sMR_exit+0x40>
     ff8:	85 30       	cpi	r24, 0x05	; 5
     ffa:	28 f4       	brcc	.+10     	; 0x1006 <sMR_exit+0x1a>
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	41 f0       	breq	.+16     	; 0x1010 <sMR_exit+0x24>
    1000:	83 30       	cpi	r24, 0x03	; 3
    1002:	11 f5       	brne	.+68     	; 0x1048 <sMR_exit+0x5c>
    1004:	0e c0       	rjmp	.+28     	; 0x1022 <sMR_exit+0x36>
    1006:	85 30       	cpi	r24, 0x05	; 5
    1008:	b1 f0       	breq	.+44     	; 0x1036 <sMR_exit+0x4a>
    100a:	86 30       	cpi	r24, 0x06	; 6
    100c:	e9 f4       	brne	.+58     	; 0x1048 <sMR_exit+0x5c>
    100e:	18 c0       	rjmp	.+48     	; 0x1040 <sMR_exit+0x54>
		case SMR_main_region_on_r1_Init : {
			/* Default exit sequence for state Init */
			handle->stateConfVector[0] = SMR_last_state;
    1010:	8d e0       	ldi	r24, 0x0D	; 13
    1012:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    1014:	1c 82       	std	Y+4, r1	; 0x04
    1016:	1b 82       	std	Y+3, r1	; 0x03
			/* Exit action for state 'Init'. */
			sMR_unsetTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) );		
    1018:	ce 01       	movw	r24, r28
    101a:	c9 96       	adiw	r24, 0x39	; 57
    101c:	0e 94 41 03 	call	0x682	; 0x682 <sMR_unsetTimer>
			break;
    1020:	13 c0       	rjmp	.+38     	; 0x1048 <sMR_exit+0x5c>
		}
		case SMR_main_region_on_r1_running_RF_GetData : {
			/* Default exit sequence for state GetData */
			handle->stateConfVector[0] = SMR_last_state;
    1022:	8d e0       	ldi	r24, 0x0D	; 13
    1024:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    1026:	1c 82       	std	Y+4, r1	; 0x04
    1028:	1b 82       	std	Y+3, r1	; 0x03
			break;
    102a:	0e c0       	rjmp	.+28     	; 0x1048 <sMR_exit+0x5c>
		}
		case SMR_main_region_on_r1_running_RF__final_ : {
			/* Default exit sequence for final state. */
			handle->stateConfVector[0] = SMR_last_state;
    102c:	8d e0       	ldi	r24, 0x0D	; 13
    102e:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    1030:	1c 82       	std	Y+4, r1	; 0x04
    1032:	1b 82       	std	Y+3, r1	; 0x03
			break;
    1034:	09 c0       	rjmp	.+18     	; 0x1048 <sMR_exit+0x5c>
		}
		case SMR_main_region_on_r1_running_RF_SendSuccessful : {
			/* Default exit sequence for state SendSuccessful */
			handle->stateConfVector[0] = SMR_last_state;
    1036:	8d e0       	ldi	r24, 0x0D	; 13
    1038:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    103a:	1c 82       	std	Y+4, r1	; 0x04
    103c:	1b 82       	std	Y+3, r1	; 0x03
			break;
    103e:	04 c0       	rjmp	.+8      	; 0x1048 <sMR_exit+0x5c>
		}
		case SMR_main_region_on_r1_running_RF_DataReceicved : {
			/* Default exit sequence for state DataReceicved */
			handle->stateConfVector[0] = SMR_last_state;
    1040:	8d e0       	ldi	r24, 0x0D	; 13
    1042:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    1044:	1c 82       	std	Y+4, r1	; 0x04
    1046:	1b 82       	std	Y+3, r1	; 0x03
			break;
		}
		default: break;
	}
	/* Handle exit of all possible states (of main region) at position 1... */
	switch(handle->stateConfVector[ 1 ]) {
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	87 30       	cpi	r24, 0x07	; 7
    104c:	19 f0       	breq	.+6      	; 0x1054 <sMR_exit+0x68>
    104e:	88 30       	cpi	r24, 0x08	; 8
    1050:	71 f4       	brne	.+28     	; 0x106e <sMR_exit+0x82>
    1052:	07 c0       	rjmp	.+14     	; 0x1062 <sMR_exit+0x76>
		case SMR_main_region_on_r1_running_keypad_CheckKey : {
			/* Default exit sequence for state CheckKey */
			handle->stateConfVector[1] = SMR_last_state;
    1054:	8d e0       	ldi	r24, 0x0D	; 13
    1056:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	9c 83       	std	Y+4, r25	; 0x04
    105e:	8b 83       	std	Y+3, r24	; 0x03
			break;
    1060:	06 c0       	rjmp	.+12     	; 0x106e <sMR_exit+0x82>
		}
		case SMR_main_region_on_r1_running_keypad_CheckKeyDown : {
			/* Default exit sequence for state CheckKeyDown */
			handle->stateConfVector[1] = SMR_last_state;
    1062:	8d e0       	ldi	r24, 0x0D	; 13
    1064:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	9c 83       	std	Y+4, r25	; 0x04
    106c:	8b 83       	std	Y+3, r24	; 0x03
			break;
		}
		default: break;
	}
	/* Handle exit of all possible states (of main region) at position 2... */
	switch(handle->stateConfVector[ 2 ]) {
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	89 30       	cpi	r24, 0x09	; 9
    1072:	49 f0       	breq	.+18     	; 0x1086 <sMR_exit+0x9a>
    1074:	89 30       	cpi	r24, 0x09	; 9
    1076:	10 f1       	brcs	.+68     	; 0x10bc <sMR_exit+0xd0>
    1078:	8a 30       	cpi	r24, 0x0A	; 10
    107a:	61 f0       	breq	.+24     	; 0x1094 <sMR_exit+0xa8>
    107c:	8b 30       	cpi	r24, 0x0B	; 11
    107e:	89 f0       	breq	.+34     	; 0x10a2 <sMR_exit+0xb6>
    1080:	8c 30       	cpi	r24, 0x0C	; 12
    1082:	e1 f4       	brne	.+56     	; 0x10bc <sMR_exit+0xd0>
    1084:	15 c0       	rjmp	.+42     	; 0x10b0 <sMR_exit+0xc4>
		case SMR_main_region_on_r1_running_UART_ShowMsg : {
			/* Default exit sequence for state ShowMsg */
			handle->stateConfVector[2] = SMR_last_state;
    1086:	8d e0       	ldi	r24, 0x0D	; 13
    1088:	8a 83       	std	Y+2, r24	; 0x02
			handle->stateConfVectorPosition = 2;
    108a:	82 e0       	ldi	r24, 0x02	; 2
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	9c 83       	std	Y+4, r25	; 0x04
    1090:	8b 83       	std	Y+3, r24	; 0x03
			break;
    1092:	14 c0       	rjmp	.+40     	; 0x10bc <sMR_exit+0xd0>
		}
		case SMR_main_region_on_r1_running_UART_ShowNumber : {
			/* Default exit sequence for state ShowNumber */
			handle->stateConfVector[2] = SMR_last_state;
    1094:	8d e0       	ldi	r24, 0x0D	; 13
    1096:	8a 83       	std	Y+2, r24	; 0x02
			handle->stateConfVectorPosition = 2;
    1098:	82 e0       	ldi	r24, 0x02	; 2
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	9c 83       	std	Y+4, r25	; 0x04
    109e:	8b 83       	std	Y+3, r24	; 0x03
			break;
    10a0:	0d c0       	rjmp	.+26     	; 0x10bc <sMR_exit+0xd0>
		}
		case SMR_main_region_on_r1_running_UART_SendUART : {
			/* Default exit sequence for state SendUART */
			handle->stateConfVector[2] = SMR_last_state;
    10a2:	8d e0       	ldi	r24, 0x0D	; 13
    10a4:	8a 83       	std	Y+2, r24	; 0x02
			handle->stateConfVectorPosition = 2;
    10a6:	82 e0       	ldi	r24, 0x02	; 2
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	9c 83       	std	Y+4, r25	; 0x04
    10ac:	8b 83       	std	Y+3, r24	; 0x03
			break;
    10ae:	06 c0       	rjmp	.+12     	; 0x10bc <sMR_exit+0xd0>
		}
		case SMR_main_region_on_r1_running_UART_CheckKey : {
			/* Default exit sequence for state CheckKey */
			handle->stateConfVector[2] = SMR_last_state;
    10b0:	8d e0       	ldi	r24, 0x0D	; 13
    10b2:	8a 83       	std	Y+2, r24	; 0x02
			handle->stateConfVectorPosition = 2;
    10b4:	82 e0       	ldi	r24, 0x02	; 2
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	9c 83       	std	Y+4, r25	; 0x04
    10ba:	8b 83       	std	Y+3, r24	; 0x03
			break;
		}
		default: break;
	}
	sMR_exitaction(handle);
}
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	08 95       	ret

000010c2 <sMR_runCycle>:
}

static void clearOutEvents(SMR* handle) {
}

void sMR_runCycle(SMR* handle) {
    10c2:	2f 92       	push	r2
    10c4:	3f 92       	push	r3
    10c6:	4f 92       	push	r4
    10c8:	5f 92       	push	r5
    10ca:	6f 92       	push	r6
    10cc:	7f 92       	push	r7
    10ce:	8f 92       	push	r8
    10d0:	9f 92       	push	r9
    10d2:	af 92       	push	r10
    10d4:	bf 92       	push	r11
    10d6:	cf 92       	push	r12
    10d8:	df 92       	push	r13
    10da:	ef 92       	push	r14
    10dc:	ff 92       	push	r15
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	ec 01       	movw	r28, r24
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
    10e8:	1c 82       	std	Y+4, r1	; 0x04
    10ea:	1b 82       	std	Y+3, r1	; 0x03
		handle->stateConfVectorPosition < SMR_MAX_ORTHOGONAL_STATES;
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	90 e0       	ldi	r25, 0x00	; 0
static void sMR_react_main_region_on_r1_running_UART_ShowNumber(SMR* handle) {
	/* The reactions of state ShowNumber. */
	if (bool_true) { 
		/* Default exit sequence for state ShowNumber */
		handle->stateConfVector[2] = SMR_last_state;
		handle->stateConfVectorPosition = 2;
    10f0:	88 24       	eor	r8, r8
    10f2:	99 24       	eor	r9, r9
    10f4:	68 94       	set
    10f6:	81 f8       	bld	r8, 1
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.lastkey = 0;
		handle->stateConfVector[2] = SMR_main_region_on_r1_running_UART_CheckKey;
    10f8:	0c e0       	ldi	r16, 0x0C	; 12
	}  else {
		if (handle->ifaceKEYPAD.key != 0) { 
			/* Default enter sequence for state CheckKeyDown */
			/* Entry action for state 'CheckKeyDown'. */
			handle->ifaceKEYPAD.key = sMRIfaceKEYPAD_checkpress();
			handle->ifaceKEYPAD.key_down = bool_true;
    10fa:	77 24       	eor	r7, r7
    10fc:	73 94       	inc	r7
			handle->stateConfVector[1] = SMR_main_region_on_r1_running_keypad_CheckKeyDown;
    10fe:	66 24       	eor	r6, r6
    1100:	68 94       	set
    1102:	63 f8       	bld	r6, 3
			handle->stateConfVectorPosition = 1;
    1104:	22 24       	eor	r2, r2
    1106:	33 24       	eor	r3, r3
    1108:	23 94       	inc	r2
/* The reactions of state CheckKeyDown. */
static void sMR_react_main_region_on_r1_running_keypad_CheckKeyDown(SMR* handle) {
	/* The reactions of state CheckKeyDown. */
	if (handle->ifaceKEYPAD.key == 0) { 
		/* Default exit sequence for state CheckKeyDown */
		handle->stateConfVector[1] = SMR_last_state;
    110a:	1d e0       	ldi	r17, 0x0D	; 13
		handle->ifaceKEYPAD.key_pressed_raised = bool_true;
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.key = sMRIfaceKEYPAD_checkpress();
		handle->ifaceKEYPAD.key_down = bool_false;
		handle->stateConfVector[1] = SMR_main_region_on_r1_running_keypad_CheckKey;
    110c:	0f 2e       	mov	r0, r31
    110e:	f7 e0       	ldi	r31, 0x07	; 7
    1110:	5f 2e       	mov	r5, r31
    1112:	f0 2d       	mov	r31, r0
			/* Default enter sequence for state DataReceicved */
			/* Entry action for state 'DataReceicved'. */
			sMRIfaceLCD_clear();
			sMRIfaceLCD_writeString(handle->ifaceRF.lastdata);
			sMRIfaceUART_sendMsg(handle->ifaceRF.lastdata);
			handle->stateConfVector[0] = SMR_main_region_on_r1_running_RF_DataReceicved;
    1114:	0f 2e       	mov	r0, r31
    1116:	f6 e0       	ldi	r31, 0x06	; 6
    1118:	af 2e       	mov	r10, r31
    111a:	f0 2d       	mov	r31, r0
	/* The reactions of state SendSuccessful. */
	if (handle->ifaceRF.result == bool_false) { 
		/* Default enter sequence for state SendSuccessful */
		/* Entry action for state 'SendSuccessful'. */
		handle->ifaceRF.result = sMRIfaceRF_sendCheck();
		handle->stateConfVector[0] = SMR_main_region_on_r1_running_RF_SendSuccessful;
    111c:	0f 2e       	mov	r0, r31
    111e:	f5 e0       	ldi	r31, 0x05	; 5
    1120:	4f 2e       	mov	r4, r31
    1122:	f0 2d       	mov	r31, r0
	if (bool_true) { 
		/* Default exit sequence for state DataReceicved */
		handle->stateConfVector[0] = SMR_last_state;
		handle->stateConfVectorPosition = 0;
		/* Default enter sequence for state null */
		handle->stateConfVector[0] = SMR_main_region_on_r1_running_RF__final_;
    1124:	bb 24       	eor	r11, r11
    1126:	68 94       	set
    1128:	b2 f8       	bld	r11, 2
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMR_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
			
		switch (handle->stateConfVector[handle->stateConfVectorPosition]) {
    112a:	8c 0f       	add	r24, r28
    112c:	9d 1f       	adc	r25, r29
    112e:	fc 01       	movw	r30, r24
    1130:	80 81       	ld	r24, Z
    1132:	87 30       	cpi	r24, 0x07	; 7
    1134:	09 f4       	brne	.+2      	; 0x1138 <__stack+0x39>
    1136:	99 c0       	rjmp	.+306    	; 0x126a <__stack+0x16b>
    1138:	88 30       	cpi	r24, 0x08	; 8
    113a:	80 f4       	brcc	.+32     	; 0x115c <__stack+0x5d>
    113c:	83 30       	cpi	r24, 0x03	; 3
    113e:	09 f4       	brne	.+2      	; 0x1142 <__stack+0x43>
    1140:	54 c0       	rjmp	.+168    	; 0x11ea <__stack+0xeb>
    1142:	84 30       	cpi	r24, 0x04	; 4
    1144:	20 f4       	brcc	.+8      	; 0x114e <__stack+0x4f>
    1146:	81 30       	cpi	r24, 0x01	; 1
    1148:	09 f0       	breq	.+2      	; 0x114c <__stack+0x4d>
    114a:	c7 c1       	rjmp	.+910    	; 0x14da <__stack+0x3db>
    114c:	1a c0       	rjmp	.+52     	; 0x1182 <__stack+0x83>
    114e:	85 30       	cpi	r24, 0x05	; 5
    1150:	09 f4       	brne	.+2      	; 0x1154 <__stack+0x55>
    1152:	6c c0       	rjmp	.+216    	; 0x122c <__stack+0x12d>
    1154:	86 30       	cpi	r24, 0x06	; 6
    1156:	09 f0       	breq	.+2      	; 0x115a <__stack+0x5b>
    1158:	c0 c1       	rjmp	.+896    	; 0x14da <__stack+0x3db>
    115a:	83 c0       	rjmp	.+262    	; 0x1262 <__stack+0x163>
    115c:	8a 30       	cpi	r24, 0x0A	; 10
    115e:	09 f4       	brne	.+2      	; 0x1162 <__stack+0x63>
    1160:	db c0       	rjmp	.+438    	; 0x1318 <__stack+0x219>
    1162:	8b 30       	cpi	r24, 0x0B	; 11
    1164:	38 f4       	brcc	.+14     	; 0x1174 <__stack+0x75>
    1166:	88 30       	cpi	r24, 0x08	; 8
    1168:	09 f4       	brne	.+2      	; 0x116c <__stack+0x6d>
    116a:	a8 c0       	rjmp	.+336    	; 0x12bc <__stack+0x1bd>
    116c:	89 30       	cpi	r24, 0x09	; 9
    116e:	09 f0       	breq	.+2      	; 0x1172 <__stack+0x73>
    1170:	b4 c1       	rjmp	.+872    	; 0x14da <__stack+0x3db>
    1172:	ca c0       	rjmp	.+404    	; 0x1308 <__stack+0x209>
    1174:	8b 30       	cpi	r24, 0x0B	; 11
    1176:	09 f4       	brne	.+2      	; 0x117a <__stack+0x7b>
    1178:	d7 c0       	rjmp	.+430    	; 0x1328 <__stack+0x229>
    117a:	8c 30       	cpi	r24, 0x0C	; 12
    117c:	09 f0       	breq	.+2      	; 0x1180 <__stack+0x81>
    117e:	ad c1       	rjmp	.+858    	; 0x14da <__stack+0x3db>
    1180:	e8 c0       	rjmp	.+464    	; 0x1352 <__stack+0x253>
}

/* The reactions of state Init. */
static void sMR_react_main_region_on_r1_Init(SMR* handle) {
	/* The reactions of state Init. */
	if (handle->timeEvents.Init_time_event_0_raised) { 
    1182:	89 ad       	sts	0x69, r24
    1184:	88 23       	and	r24, r24
    1186:	09 f4       	brne	.+2      	; 0x118a <__stack+0x8b>
    1188:	a8 c1       	rjmp	.+848    	; 0x14da <__stack+0x3db>
		/* Default exit sequence for state Init */
		handle->stateConfVector[0] = SMR_last_state;
    118a:	8d e0       	ldi	r24, 0x0D	; 13
    118c:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    118e:	1c 82       	std	Y+4, r1	; 0x04
    1190:	1b 82       	std	Y+3, r1	; 0x03
		/* Exit action for state 'Init'. */
		sMR_unsetTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) );		
    1192:	ce 01       	movw	r24, r28
    1194:	c9 96       	adiw	r24, 0x39	; 57
    1196:	0e 94 41 03 	call	0x682	; 0x682 <sMR_unsetTimer>
		/* Default enter sequence for state running */
		/* Default enter sequence for region RF */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state GetData */
		/* Entry action for state 'GetData'. */
		handle->ifaceRF.data = sMRIfaceRF_getData();
    119a:	0e 94 27 02 	call	0x44e	; 0x44e <sMRIfaceRF_getData>
    119e:	9d 8b       	std	Y+21, r25	; 0x15
    11a0:	8c 8b       	std	Y+20, r24	; 0x14
		handle->stateConfVector[0] = SMR_main_region_on_r1_running_RF_GetData;
    11a2:	83 e0       	ldi	r24, 0x03	; 3
    11a4:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    11a6:	1c 82       	std	Y+4, r1	; 0x04
    11a8:	1b 82       	std	Y+3, r1	; 0x03
		/* Default enter sequence for region keypad */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.key = sMRIfaceKEYPAD_checkpress();
    11aa:	0e 94 dd 01 	call	0x3ba	; 0x3ba <sMRIfaceKEYPAD_checkpress>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	8d 83       	std	Y+5, r24	; 0x05
    11b4:	9e 83       	std	Y+6, r25	; 0x06
    11b6:	af 83       	std	Y+7, r26	; 0x07
    11b8:	b8 87       	std	Y+8, r27	; 0x08
		handle->ifaceKEYPAD.key_down = bool_false;
    11ba:	1d 86       	std	Y+13, r1	; 0x0d
		handle->stateConfVector[1] = SMR_main_region_on_r1_running_keypad_CheckKey;
    11bc:	87 e0       	ldi	r24, 0x07	; 7
    11be:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	9c 83       	std	Y+4, r25	; 0x04
    11c6:	8b 83       	std	Y+3, r24	; 0x03
		/* Default enter sequence for region UART */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowMsg */
		/* Entry action for state 'ShowMsg'. */
		sMRIfaceLCD_clear();
    11c8:	0e 94 1a 02 	call	0x434	; 0x434 <sMRIfaceLCD_clear>
		sMRIfaceLCD_writeString("_ _ _ _ _ _ _ _");
    11cc:	88 e0       	ldi	r24, 0x08	; 8
    11ce:	92 e0       	ldi	r25, 0x02	; 2
    11d0:	0e 94 e7 01 	call	0x3ce	; 0x3ce <sMRIfaceLCD_writeString>
		handle->ifaceDISH.pos = 0;
    11d4:	1a a6       	lds	r17, 0xba
    11d6:	1b a6       	lds	r17, 0xbb
    11d8:	1c a6       	lds	r17, 0xbc
    11da:	1d a6       	lds	r17, 0xbd
		handle->stateConfVector[2] = SMR_main_region_on_r1_running_UART_ShowMsg;
    11dc:	89 e0       	ldi	r24, 0x09	; 9
    11de:	8a 83       	std	Y+2, r24	; 0x02
		handle->stateConfVectorPosition = 2;
    11e0:	82 e0       	ldi	r24, 0x02	; 2
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	9c 83       	std	Y+4, r25	; 0x04
    11e6:	8b 83       	std	Y+3, r24	; 0x03
    11e8:	99 c1       	rjmp	.+818    	; 0x151c <__stack+0x41d>
}

/* The reactions of state GetData. */
static void sMR_react_main_region_on_r1_running_RF_GetData(SMR* handle) {
	/* The reactions of state GetData. */
	if ((strcmp(handle->ifaceRF.data, "") == 0)
    11ea:	ec 89       	ldd	r30, Y+20	; 0x14
    11ec:	fd 89       	ldd	r31, Y+21	; 0x15
    11ee:	80 81       	ld	r24, Z
    11f0:	88 23       	and	r24, r24
    11f2:	49 f4       	brne	.+18     	; 0x1206 <__stack+0x107>
	) { 
		/* Default enter sequence for state GetData */
		/* Entry action for state 'GetData'. */
		handle->ifaceRF.data = sMRIfaceRF_getData();
    11f4:	0e 94 27 02 	call	0x44e	; 0x44e <sMRIfaceRF_getData>
    11f8:	9d 8b       	std	Y+21, r25	; 0x15
    11fa:	8c 8b       	std	Y+20, r24	; 0x14
		handle->stateConfVector[0] = SMR_main_region_on_r1_running_RF_GetData;
    11fc:	f3 e0       	ldi	r31, 0x03	; 3
    11fe:	f8 83       	st	Y, r31
		handle->stateConfVectorPosition = 0;
    1200:	1c 82       	std	Y+4, r1	; 0x04
    1202:	1b 82       	std	Y+3, r1	; 0x03
    1204:	91 c1       	rjmp	.+802    	; 0x1528 <__stack+0x429>
	}  else {
		if ((strcmp(handle->ifaceRF.data, "") != 0)
		) { 
			/* Default exit sequence for state GetData */
			handle->stateConfVector[0] = SMR_last_state;
    1206:	18 83       	st	Y, r17
			handle->stateConfVectorPosition = 0;
    1208:	1c 82       	std	Y+4, r1	; 0x04
    120a:	1b 82       	std	Y+3, r1	; 0x03
			handle->ifaceRF.lastdata = handle->ifaceRF.data;
    120c:	ff 8b       	std	Y+23, r31	; 0x17
    120e:	ee 8b       	std	Y+22, r30	; 0x16
			/* Default enter sequence for state DataReceicved */
			/* Entry action for state 'DataReceicved'. */
			sMRIfaceLCD_clear();
    1210:	0e 94 1a 02 	call	0x434	; 0x434 <sMRIfaceLCD_clear>
			sMRIfaceLCD_writeString(handle->ifaceRF.lastdata);
    1214:	8e 89       	ldd	r24, Y+22	; 0x16
    1216:	9f 89       	ldd	r25, Y+23	; 0x17
    1218:	0e 94 e7 01 	call	0x3ce	; 0x3ce <sMRIfaceLCD_writeString>
			sMRIfaceUART_sendMsg(handle->ifaceRF.lastdata);
    121c:	8e 89       	ldd	r24, Y+22	; 0x16
    121e:	9f 89       	ldd	r25, Y+23	; 0x17
    1220:	0e 94 39 03 	call	0x672	; 0x672 <sMRIfaceUART_sendMsg>
			handle->stateConfVector[0] = SMR_main_region_on_r1_running_RF_DataReceicved;
    1224:	a8 82       	st	Y, r10
			handle->stateConfVectorPosition = 0;
    1226:	1c 82       	std	Y+4, r1	; 0x04
    1228:	1b 82       	std	Y+3, r1	; 0x03
    122a:	7e c1       	rjmp	.+764    	; 0x1528 <__stack+0x429>
}

/* The reactions of state SendSuccessful. */
static void sMR_react_main_region_on_r1_running_RF_SendSuccessful(SMR* handle) {
	/* The reactions of state SendSuccessful. */
	if (handle->ifaceRF.result == bool_false) { 
    122c:	88 8d       	ldd	r24, Y+24	; 0x18
    122e:	88 23       	and	r24, r24
    1230:	39 f4       	brne	.+14     	; 0x1240 <__stack+0x141>
		/* Default enter sequence for state SendSuccessful */
		/* Entry action for state 'SendSuccessful'. */
		handle->ifaceRF.result = sMRIfaceRF_sendCheck();
    1232:	0e 94 92 02 	call	0x524	; 0x524 <sMRIfaceRF_sendCheck>
    1236:	88 8f       	std	Y+24, r24	; 0x18
		handle->stateConfVector[0] = SMR_main_region_on_r1_running_RF_SendSuccessful;
    1238:	48 82       	st	Y, r4
		handle->stateConfVectorPosition = 0;
    123a:	1c 82       	std	Y+4, r1	; 0x04
    123c:	1b 82       	std	Y+3, r1	; 0x03
    123e:	74 c1       	rjmp	.+744    	; 0x1528 <__stack+0x429>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state SendSuccessful */
			handle->stateConfVector[0] = SMR_last_state;
    1240:	18 83       	st	Y, r17
			handle->stateConfVectorPosition = 0;
    1242:	1c 82       	std	Y+4, r1	; 0x04
    1244:	1b 82       	std	Y+3, r1	; 0x03
			/* Default enter sequence for state DataReceicved */
			/* Entry action for state 'DataReceicved'. */
			sMRIfaceLCD_clear();
    1246:	0e 94 1a 02 	call	0x434	; 0x434 <sMRIfaceLCD_clear>
			sMRIfaceLCD_writeString(handle->ifaceRF.lastdata);
    124a:	8e 89       	ldd	r24, Y+22	; 0x16
    124c:	9f 89       	ldd	r25, Y+23	; 0x17
    124e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <sMRIfaceLCD_writeString>
			sMRIfaceUART_sendMsg(handle->ifaceRF.lastdata);
    1252:	8e 89       	ldd	r24, Y+22	; 0x16
    1254:	9f 89       	ldd	r25, Y+23	; 0x17
    1256:	0e 94 39 03 	call	0x672	; 0x672 <sMRIfaceUART_sendMsg>
			handle->stateConfVector[0] = SMR_main_region_on_r1_running_RF_DataReceicved;
    125a:	a8 82       	st	Y, r10
			handle->stateConfVectorPosition = 0;
    125c:	1c 82       	std	Y+4, r1	; 0x04
    125e:	1b 82       	std	Y+3, r1	; 0x03
    1260:	63 c1       	rjmp	.+710    	; 0x1528 <__stack+0x429>
static void sMR_react_main_region_on_r1_running_RF_DataReceicved(SMR* handle) {
	/* The reactions of state DataReceicved. */
	if (bool_true) { 
		/* Default exit sequence for state DataReceicved */
		handle->stateConfVector[0] = SMR_last_state;
		handle->stateConfVectorPosition = 0;
    1262:	1c 82       	std	Y+4, r1	; 0x04
    1264:	1b 82       	std	Y+3, r1	; 0x03
		/* Default enter sequence for state null */
		handle->stateConfVector[0] = SMR_main_region_on_r1_running_RF__final_;
    1266:	b8 82       	st	Y, r11
    1268:	38 c1       	rjmp	.+624    	; 0x14da <__stack+0x3db>
}

/* The reactions of state CheckKey. */
static void sMR_react_main_region_on_r1_running_keypad_CheckKey(SMR* handle) {
	/* The reactions of state CheckKey. */
	if (handle->ifaceKEYPAD.key != 0) { 
    126a:	8d 81       	ldd	r24, Y+5	; 0x05
    126c:	9e 81       	ldd	r25, Y+6	; 0x06
    126e:	af 81       	ldd	r26, Y+7	; 0x07
    1270:	b8 85       	ldd	r27, Y+8	; 0x08
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	a1 05       	cpc	r26, r1
    1276:	b1 05       	cpc	r27, r1
    1278:	a1 f0       	breq	.+40     	; 0x12a2 <__stack+0x1a3>
		/* Default exit sequence for state CheckKey */
		handle->stateConfVector[1] = SMR_last_state;
    127a:	19 83       	std	Y+1, r17	; 0x01
		handle->stateConfVectorPosition = 1;
    127c:	3c 82       	std	Y+4, r3	; 0x04
    127e:	2b 82       	std	Y+3, r2	; 0x03
		handle->ifaceKEYPAD.lastkey = handle->ifaceKEYPAD.key;
    1280:	89 87       	std	Y+9, r24	; 0x09
    1282:	9a 87       	std	Y+10, r25	; 0x0a
    1284:	ab 87       	std	Y+11, r26	; 0x0b
    1286:	bc 87       	std	Y+12, r27	; 0x0c
		/* Default enter sequence for state CheckKeyDown */
		/* Entry action for state 'CheckKeyDown'. */
		handle->ifaceKEYPAD.key = sMRIfaceKEYPAD_checkpress();
    1288:	0e 94 dd 01 	call	0x3ba	; 0x3ba <sMRIfaceKEYPAD_checkpress>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	8d 83       	std	Y+5, r24	; 0x05
    1292:	9e 83       	std	Y+6, r25	; 0x06
    1294:	af 83       	std	Y+7, r26	; 0x07
    1296:	b8 87       	std	Y+8, r27	; 0x08
		handle->ifaceKEYPAD.key_down = bool_true;
    1298:	7d 86       	std	Y+13, r7	; 0x0d
		handle->stateConfVector[1] = SMR_main_region_on_r1_running_keypad_CheckKeyDown;
    129a:	69 82       	std	Y+1, r6	; 0x01
		handle->stateConfVectorPosition = 1;
    129c:	3c 82       	std	Y+4, r3	; 0x04
    129e:	2b 82       	std	Y+3, r2	; 0x03
    12a0:	43 c1       	rjmp	.+646    	; 0x1528 <__stack+0x429>
	}  else {
		if (handle->ifaceKEYPAD.key == 0) { 
			/* Default enter sequence for state CheckKey */
			/* Entry action for state 'CheckKey'. */
			handle->ifaceKEYPAD.key = sMRIfaceKEYPAD_checkpress();
    12a2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <sMRIfaceKEYPAD_checkpress>
    12a6:	dc 01       	movw	r26, r24
    12a8:	cb 01       	movw	r24, r22
    12aa:	8d 83       	std	Y+5, r24	; 0x05
    12ac:	9e 83       	std	Y+6, r25	; 0x06
    12ae:	af 83       	std	Y+7, r26	; 0x07
    12b0:	b8 87       	std	Y+8, r27	; 0x08
			handle->ifaceKEYPAD.key_down = bool_false;
    12b2:	1d 86       	std	Y+13, r1	; 0x0d
			handle->stateConfVector[1] = SMR_main_region_on_r1_running_keypad_CheckKey;
    12b4:	59 82       	std	Y+1, r5	; 0x01
			handle->stateConfVectorPosition = 1;
    12b6:	3c 82       	std	Y+4, r3	; 0x04
    12b8:	2b 82       	std	Y+3, r2	; 0x03
    12ba:	36 c1       	rjmp	.+620    	; 0x1528 <__stack+0x429>
}

/* The reactions of state CheckKeyDown. */
static void sMR_react_main_region_on_r1_running_keypad_CheckKeyDown(SMR* handle) {
	/* The reactions of state CheckKeyDown. */
	if (handle->ifaceKEYPAD.key == 0) { 
    12bc:	8d 81       	ldd	r24, Y+5	; 0x05
    12be:	9e 81       	ldd	r25, Y+6	; 0x06
    12c0:	af 81       	ldd	r26, Y+7	; 0x07
    12c2:	b8 85       	ldd	r27, Y+8	; 0x08
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	a1 05       	cpc	r26, r1
    12c8:	b1 05       	cpc	r27, r1
    12ca:	89 f4       	brne	.+34     	; 0x12ee <__stack+0x1ef>
		/* Default exit sequence for state CheckKeyDown */
		handle->stateConfVector[1] = SMR_last_state;
    12cc:	19 83       	std	Y+1, r17	; 0x01
		handle->stateConfVectorPosition = 1;
    12ce:	3c 82       	std	Y+4, r3	; 0x04
    12d0:	2b 82       	std	Y+3, r2	; 0x03
		handle->ifaceKEYPAD.key_pressed_raised = bool_true;
    12d2:	7e 86       	std	Y+14, r7	; 0x0e
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.key = sMRIfaceKEYPAD_checkpress();
    12d4:	0e 94 dd 01 	call	0x3ba	; 0x3ba <sMRIfaceKEYPAD_checkpress>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	8d 83       	std	Y+5, r24	; 0x05
    12de:	9e 83       	std	Y+6, r25	; 0x06
    12e0:	af 83       	std	Y+7, r26	; 0x07
    12e2:	b8 87       	std	Y+8, r27	; 0x08
		handle->ifaceKEYPAD.key_down = bool_false;
    12e4:	1d 86       	std	Y+13, r1	; 0x0d
		handle->stateConfVector[1] = SMR_main_region_on_r1_running_keypad_CheckKey;
    12e6:	59 82       	std	Y+1, r5	; 0x01
		handle->stateConfVectorPosition = 1;
    12e8:	3c 82       	std	Y+4, r3	; 0x04
    12ea:	2b 82       	std	Y+3, r2	; 0x03
    12ec:	1d c1       	rjmp	.+570    	; 0x1528 <__stack+0x429>
	}  else {
		if (handle->ifaceKEYPAD.key != 0) { 
			/* Default enter sequence for state CheckKeyDown */
			/* Entry action for state 'CheckKeyDown'. */
			handle->ifaceKEYPAD.key = sMRIfaceKEYPAD_checkpress();
    12ee:	0e 94 dd 01 	call	0x3ba	; 0x3ba <sMRIfaceKEYPAD_checkpress>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	8d 83       	std	Y+5, r24	; 0x05
    12f8:	9e 83       	std	Y+6, r25	; 0x06
    12fa:	af 83       	std	Y+7, r26	; 0x07
    12fc:	b8 87       	std	Y+8, r27	; 0x08
			handle->ifaceKEYPAD.key_down = bool_true;
    12fe:	7d 86       	std	Y+13, r7	; 0x0d
			handle->stateConfVector[1] = SMR_main_region_on_r1_running_keypad_CheckKeyDown;
    1300:	69 82       	std	Y+1, r6	; 0x01
			handle->stateConfVectorPosition = 1;
    1302:	3c 82       	std	Y+4, r3	; 0x04
    1304:	2b 82       	std	Y+3, r2	; 0x03
    1306:	10 c1       	rjmp	.+544    	; 0x1528 <__stack+0x429>
static void sMR_react_main_region_on_r1_running_UART_ShowMsg(SMR* handle) {
	/* The reactions of state ShowMsg. */
	if (bool_true) { 
		/* Default exit sequence for state ShowMsg */
		handle->stateConfVector[2] = SMR_last_state;
		handle->stateConfVectorPosition = 2;
    1308:	9c 82       	std	Y+4, r9	; 0x04
    130a:	8b 82       	std	Y+3, r8	; 0x03
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.lastkey = 0;
    130c:	19 86       	std	Y+9, r1	; 0x09
    130e:	1a 86       	std	Y+10, r1	; 0x0a
    1310:	1b 86       	std	Y+11, r1	; 0x0b
    1312:	1c 86       	std	Y+12, r1	; 0x0c
		handle->stateConfVector[2] = SMR_main_region_on_r1_running_UART_CheckKey;
    1314:	0a 83       	std	Y+2, r16	; 0x02
    1316:	e1 c0       	rjmp	.+450    	; 0x14da <__stack+0x3db>
static void sMR_react_main_region_on_r1_running_UART_ShowNumber(SMR* handle) {
	/* The reactions of state ShowNumber. */
	if (bool_true) { 
		/* Default exit sequence for state ShowNumber */
		handle->stateConfVector[2] = SMR_last_state;
		handle->stateConfVectorPosition = 2;
    1318:	9c 82       	std	Y+4, r9	; 0x04
    131a:	8b 82       	std	Y+3, r8	; 0x03
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.lastkey = 0;
    131c:	19 86       	std	Y+9, r1	; 0x09
    131e:	1a 86       	std	Y+10, r1	; 0x0a
    1320:	1b 86       	std	Y+11, r1	; 0x0b
    1322:	1c 86       	std	Y+12, r1	; 0x0c
		handle->stateConfVector[2] = SMR_main_region_on_r1_running_UART_CheckKey;
    1324:	0a 83       	std	Y+2, r16	; 0x02
    1326:	d9 c0       	rjmp	.+434    	; 0x14da <__stack+0x3db>
/* The reactions of state SendUART. */
static void sMR_react_main_region_on_r1_running_UART_SendUART(SMR* handle) {
	/* The reactions of state SendUART. */
	if (bool_true) { 
		/* Default exit sequence for state SendUART */
		handle->stateConfVector[2] = SMR_last_state;
    1328:	8d e0       	ldi	r24, 0x0D	; 13
    132a:	8a 83       	std	Y+2, r24	; 0x02
		handle->stateConfVectorPosition = 2;
    132c:	02 e0       	ldi	r16, 0x02	; 2
    132e:	10 e0       	ldi	r17, 0x00	; 0
    1330:	1c 83       	std	Y+4, r17	; 0x04
    1332:	0b 83       	std	Y+3, r16	; 0x03
		/* Default enter sequence for state ShowMsg */
		/* Entry action for state 'ShowMsg'. */
		sMRIfaceLCD_clear();
    1334:	0e 94 1a 02 	call	0x434	; 0x434 <sMRIfaceLCD_clear>
		sMRIfaceLCD_writeString("_ _ _ _ _ _ _ _");
    1338:	88 e0       	ldi	r24, 0x08	; 8
    133a:	92 e0       	ldi	r25, 0x02	; 2
    133c:	0e 94 e7 01 	call	0x3ce	; 0x3ce <sMRIfaceLCD_writeString>
		handle->ifaceDISH.pos = 0;
    1340:	1a a6       	lds	r17, 0xba
    1342:	1b a6       	lds	r17, 0xbb
    1344:	1c a6       	lds	r17, 0xbc
    1346:	1d a6       	lds	r17, 0xbd
		handle->stateConfVector[2] = SMR_main_region_on_r1_running_UART_ShowMsg;
    1348:	89 e0       	ldi	r24, 0x09	; 9
    134a:	8a 83       	std	Y+2, r24	; 0x02
		handle->stateConfVectorPosition = 2;
    134c:	1c 83       	std	Y+4, r17	; 0x04
    134e:	0b 83       	std	Y+3, r16	; 0x03
    1350:	e5 c0       	rjmp	.+458    	; 0x151c <__stack+0x41d>
}

/* The reactions of state CheckKey. */
static void sMR_react_main_region_on_r1_running_UART_CheckKey(SMR* handle) {
	/* The reactions of state CheckKey. */
	if (handle->ifaceDISH.pos < 8 && handle->ifaceKEYPAD.lastkey == 10 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1352:	8a a5       	lds	r24, 0x6a
    1354:	9b a5       	lds	r25, 0x6b
    1356:	ac a5       	lds	r26, 0x6c
    1358:	bd a5       	lds	r27, 0x6d
    135a:	88 30       	cpi	r24, 0x08	; 8
    135c:	91 05       	cpc	r25, r1
    135e:	a1 05       	cpc	r26, r1
    1360:	b1 05       	cpc	r27, r1
    1362:	0c f0       	brlt	.+2      	; 0x1366 <__stack+0x267>
    1364:	84 c0       	rjmp	.+264    	; 0x146e <__stack+0x36f>
    1366:	c9 84       	ldd	r12, Y+9	; 0x09
    1368:	da 84       	ldd	r13, Y+10	; 0x0a
    136a:	eb 84       	ldd	r14, Y+11	; 0x0b
    136c:	fc 84       	ldd	r15, Y+12	; 0x0c
    136e:	2a e0       	ldi	r18, 0x0A	; 10
    1370:	c2 16       	cp	r12, r18
    1372:	d1 04       	cpc	r13, r1
    1374:	e1 04       	cpc	r14, r1
    1376:	f1 04       	cpc	r15, r1
    1378:	d1 f5       	brne	.+116    	; 0x13ee <__stack+0x2ef>
    137a:	2e 85       	ldd	r18, Y+14	; 0x0e
    137c:	22 23       	and	r18, r18
    137e:	b9 f1       	breq	.+110    	; 0x13ee <__stack+0x2ef>
		/* Default exit sequence for state CheckKey */
		handle->stateConfVector[2] = SMR_last_state;
    1380:	2d e0       	ldi	r18, 0x0D	; 13
    1382:	2a 83       	std	Y+2, r18	; 0x02
		handle->stateConfVectorPosition = 2;
    1384:	88 24       	eor	r8, r8
    1386:	99 24       	eor	r9, r9
    1388:	68 94       	set
    138a:	81 f8       	bld	r8, 1
    138c:	9c 82       	std	Y+4, r9	; 0x04
    138e:	8b 82       	std	Y+3, r8	; 0x03
		handle->ifaceKEYPAD.lastkey = 0;
    1390:	19 86       	std	Y+9, r1	; 0x09
    1392:	1a 86       	std	Y+10, r1	; 0x0a
    1394:	1b 86       	std	Y+11, r1	; 0x0b
    1396:	1c 86       	std	Y+12, r1	; 0x0c
		/* Default enter sequence for state ShowNumber */
		/* Entry action for state 'ShowNumber'. */
		sMRIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 0, 1);
    1398:	9c 01       	movw	r18, r24
    139a:	ad 01       	movw	r20, r26
    139c:	22 0f       	add	r18, r18
    139e:	33 1f       	adc	r19, r19
    13a0:	44 1f       	adc	r20, r20
    13a2:	55 1f       	adc	r21, r21
    13a4:	60 e0       	ldi	r22, 0x00	; 0
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	cb 01       	movw	r24, r22
    13aa:	ee 24       	eor	r14, r14
    13ac:	ff 24       	eor	r15, r15
    13ae:	87 01       	movw	r16, r14
    13b0:	aa 24       	eor	r10, r10
    13b2:	bb 24       	eor	r11, r11
    13b4:	65 01       	movw	r12, r10
    13b6:	a3 94       	inc	r10
    13b8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <sMRIfaceLCD_writeNumberXY>
		handle->ifaceDISH.pos += 1;
    13bc:	8a a5       	lds	r24, 0x6a
    13be:	9b a5       	lds	r25, 0x6b
    13c0:	ac a5       	lds	r26, 0x6c
    13c2:	bd a5       	lds	r27, 0x6d
    13c4:	9c 01       	movw	r18, r24
    13c6:	ad 01       	movw	r20, r26
    13c8:	2f 5f       	subi	r18, 0xFF	; 255
    13ca:	3f 4f       	sbci	r19, 0xFF	; 255
    13cc:	4f 4f       	sbci	r20, 0xFF	; 255
    13ce:	5f 4f       	sbci	r21, 0xFF	; 255
    13d0:	2a a7       	lds	r18, 0x7a
    13d2:	3b a7       	lds	r19, 0x7b
    13d4:	4c a7       	lds	r20, 0x7c
    13d6:	5d a7       	lds	r21, 0x7d
		sMRIface_convertNumber(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos);
    13d8:	69 85       	ldd	r22, Y+9	; 0x09
    13da:	7a 85       	ldd	r23, Y+10	; 0x0a
    13dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    13de:	9c 85       	ldd	r25, Y+12	; 0x0c
    13e0:	0e 94 47 03 	call	0x68e	; 0x68e <sMRIface_convertNumber>
		handle->stateConfVector[2] = SMR_main_region_on_r1_running_UART_ShowNumber;
    13e4:	8a e0       	ldi	r24, 0x0A	; 10
    13e6:	8a 83       	std	Y+2, r24	; 0x02
		handle->stateConfVectorPosition = 2;
    13e8:	9c 82       	std	Y+4, r9	; 0x04
    13ea:	8b 82       	std	Y+3, r8	; 0x03
    13ec:	97 c0       	rjmp	.+302    	; 0x151c <__stack+0x41d>
	}  else {
		if (handle->ifaceDISH.pos < 8 && handle->ifaceKEYPAD.lastkey <= 9 && handle->ifaceKEYPAD.lastkey >= 1 && handle->ifaceKEYPAD.key_pressed_raised) { 
    13ee:	ea e0       	ldi	r30, 0x0A	; 10
    13f0:	ce 16       	cp	r12, r30
    13f2:	d1 04       	cpc	r13, r1
    13f4:	e1 04       	cpc	r14, r1
    13f6:	f1 04       	cpc	r15, r1
    13f8:	d4 f5       	brge	.+116    	; 0x146e <__stack+0x36f>
    13fa:	1c 14       	cp	r1, r12
    13fc:	1d 04       	cpc	r1, r13
    13fe:	1e 04       	cpc	r1, r14
    1400:	1f 04       	cpc	r1, r15
    1402:	ac f5       	brge	.+106    	; 0x146e <__stack+0x36f>
    1404:	2e 85       	ldd	r18, Y+14	; 0x0e
    1406:	22 23       	and	r18, r18
    1408:	91 f1       	breq	.+100    	; 0x146e <__stack+0x36f>
			/* Default exit sequence for state CheckKey */
			handle->stateConfVector[2] = SMR_last_state;
    140a:	2d e0       	ldi	r18, 0x0D	; 13
    140c:	2a 83       	std	Y+2, r18	; 0x02
			handle->stateConfVectorPosition = 2;
    140e:	88 24       	eor	r8, r8
    1410:	99 24       	eor	r9, r9
    1412:	68 94       	set
    1414:	81 f8       	bld	r8, 1
    1416:	9c 82       	std	Y+4, r9	; 0x04
    1418:	8b 82       	std	Y+3, r8	; 0x03
			/* Default enter sequence for state ShowNumber */
			/* Entry action for state 'ShowNumber'. */
			sMRIfaceLCD_writeNumberXY(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos * 2, 0, 1);
    141a:	9c 01       	movw	r18, r24
    141c:	ad 01       	movw	r20, r26
    141e:	22 0f       	add	r18, r18
    1420:	33 1f       	adc	r19, r19
    1422:	44 1f       	adc	r20, r20
    1424:	55 1f       	adc	r21, r21
    1426:	c7 01       	movw	r24, r14
    1428:	b6 01       	movw	r22, r12
    142a:	ee 24       	eor	r14, r14
    142c:	ff 24       	eor	r15, r15
    142e:	87 01       	movw	r16, r14
    1430:	aa 24       	eor	r10, r10
    1432:	bb 24       	eor	r11, r11
    1434:	65 01       	movw	r12, r10
    1436:	a3 94       	inc	r10
    1438:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <sMRIfaceLCD_writeNumberXY>
			handle->ifaceDISH.pos += 1;
    143c:	8a a5       	lds	r24, 0x6a
    143e:	9b a5       	lds	r25, 0x6b
    1440:	ac a5       	lds	r26, 0x6c
    1442:	bd a5       	lds	r27, 0x6d
    1444:	9c 01       	movw	r18, r24
    1446:	ad 01       	movw	r20, r26
    1448:	2f 5f       	subi	r18, 0xFF	; 255
    144a:	3f 4f       	sbci	r19, 0xFF	; 255
    144c:	4f 4f       	sbci	r20, 0xFF	; 255
    144e:	5f 4f       	sbci	r21, 0xFF	; 255
    1450:	2a a7       	lds	r18, 0x7a
    1452:	3b a7       	lds	r19, 0x7b
    1454:	4c a7       	lds	r20, 0x7c
    1456:	5d a7       	lds	r21, 0x7d
			sMRIface_convertNumber(handle->ifaceKEYPAD.lastkey, handle->ifaceDISH.pos);
    1458:	69 85       	ldd	r22, Y+9	; 0x09
    145a:	7a 85       	ldd	r23, Y+10	; 0x0a
    145c:	8b 85       	ldd	r24, Y+11	; 0x0b
    145e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1460:	0e 94 47 03 	call	0x68e	; 0x68e <sMRIface_convertNumber>
			handle->stateConfVector[2] = SMR_main_region_on_r1_running_UART_ShowNumber;
    1464:	8a e0       	ldi	r24, 0x0A	; 10
    1466:	8a 83       	std	Y+2, r24	; 0x02
			handle->stateConfVectorPosition = 2;
    1468:	9c 82       	std	Y+4, r9	; 0x04
    146a:	8b 82       	std	Y+3, r8	; 0x03
    146c:	57 c0       	rjmp	.+174    	; 0x151c <__stack+0x41d>
		}  else {
			if (handle->ifaceKEYPAD.lastkey == 12 && handle->ifaceKEYPAD.key_pressed_raised) { 
    146e:	89 85       	ldd	r24, Y+9	; 0x09
    1470:	9a 85       	ldd	r25, Y+10	; 0x0a
    1472:	ab 85       	ldd	r26, Y+11	; 0x0b
    1474:	bc 85       	ldd	r27, Y+12	; 0x0c
    1476:	8c 30       	cpi	r24, 0x0C	; 12
    1478:	91 05       	cpc	r25, r1
    147a:	a1 05       	cpc	r26, r1
    147c:	b1 05       	cpc	r27, r1
    147e:	c1 f4       	brne	.+48     	; 0x14b0 <__stack+0x3b1>
    1480:	2e 85       	ldd	r18, Y+14	; 0x0e
    1482:	22 23       	and	r18, r18
    1484:	a9 f0       	breq	.+42     	; 0x14b0 <__stack+0x3b1>
				/* Default exit sequence for state CheckKey */
				handle->stateConfVector[2] = SMR_last_state;
    1486:	8d e0       	ldi	r24, 0x0D	; 13
    1488:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    148a:	02 e0       	ldi	r16, 0x02	; 2
    148c:	10 e0       	ldi	r17, 0x00	; 0
    148e:	1c 83       	std	Y+4, r17	; 0x04
    1490:	0b 83       	std	Y+3, r16	; 0x03
				/* Default enter sequence for state ShowMsg */
				/* Entry action for state 'ShowMsg'. */
				sMRIfaceLCD_clear();
    1492:	0e 94 1a 02 	call	0x434	; 0x434 <sMRIfaceLCD_clear>
				sMRIfaceLCD_writeString("_ _ _ _ _ _ _ _");
    1496:	88 e0       	ldi	r24, 0x08	; 8
    1498:	92 e0       	ldi	r25, 0x02	; 2
    149a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <sMRIfaceLCD_writeString>
				handle->ifaceDISH.pos = 0;
    149e:	1a a6       	lds	r17, 0xba
    14a0:	1b a6       	lds	r17, 0xbb
    14a2:	1c a6       	lds	r17, 0xbc
    14a4:	1d a6       	lds	r17, 0xbd
				handle->stateConfVector[2] = SMR_main_region_on_r1_running_UART_ShowMsg;
    14a6:	89 e0       	ldi	r24, 0x09	; 9
    14a8:	8a 83       	std	Y+2, r24	; 0x02
				handle->stateConfVectorPosition = 2;
    14aa:	1c 83       	std	Y+4, r17	; 0x04
    14ac:	0b 83       	std	Y+3, r16	; 0x03
    14ae:	36 c0       	rjmp	.+108    	; 0x151c <__stack+0x41d>
			}  else {
				if (handle->ifaceKEYPAD.lastkey == 11 && handle->ifaceKEYPAD.key_pressed_raised) { 
    14b0:	8b 30       	cpi	r24, 0x0B	; 11
    14b2:	91 05       	cpc	r25, r1
    14b4:	a1 05       	cpc	r26, r1
    14b6:	b1 05       	cpc	r27, r1
    14b8:	81 f4       	brne	.+32     	; 0x14da <__stack+0x3db>
    14ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    14bc:	88 23       	and	r24, r24
    14be:	69 f0       	breq	.+26     	; 0x14da <__stack+0x3db>
					/* Default exit sequence for state CheckKey */
					handle->stateConfVector[2] = SMR_last_state;
    14c0:	8d e0       	ldi	r24, 0x0D	; 13
    14c2:	8a 83       	std	Y+2, r24	; 0x02
					handle->stateConfVectorPosition = 2;
    14c4:	02 e0       	ldi	r16, 0x02	; 2
    14c6:	10 e0       	ldi	r17, 0x00	; 0
    14c8:	1c 83       	std	Y+4, r17	; 0x04
    14ca:	0b 83       	std	Y+3, r16	; 0x03
					/* Default enter sequence for state SendUART */
					/* Entry action for state 'SendUART'. */
					sMRIfaceUART_sendTemp();
    14cc:	0e 94 52 03 	call	0x6a4	; 0x6a4 <sMRIfaceUART_sendTemp>
					handle->stateConfVector[2] = SMR_main_region_on_r1_running_UART_SendUART;
    14d0:	8b e0       	ldi	r24, 0x0B	; 11
    14d2:	8a 83       	std	Y+2, r24	; 0x02
					handle->stateConfVectorPosition = 2;
    14d4:	1c 83       	std	Y+4, r17	; 0x04
    14d6:	0b 83       	std	Y+3, r16	; 0x03
    14d8:	21 c0       	rjmp	.+66     	; 0x151c <__stack+0x41d>
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMR_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	9c 81       	ldd	r25, Y+4	; 0x04
    14de:	01 96       	adiw	r24, 0x01	; 1
    14e0:	9c 83       	std	Y+4, r25	; 0x04
    14e2:	8b 83       	std	Y+3, r24	; 0x03

void sMR_runCycle(SMR* handle) {
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
    14e4:	83 30       	cpi	r24, 0x03	; 3
    14e6:	91 05       	cpc	r25, r1
    14e8:	08 f4       	brcc	.+2      	; 0x14ec <__stack+0x3ed>
    14ea:	1f ce       	rjmp	.-962    	; 0x112a <__stack+0x2b>
	}
	sMR_exitaction(handle);
}

static void clearInEvents(SMR* handle) {
	handle->ifaceKEYPAD.key_pressed_raised = bool_false;
    14ec:	1e 86       	std	Y+14, r1	; 0x0e
	handle->ifaceUART.DataRecieved_raised = bool_false;
    14ee:	1b 8a       	std	Y+19, r1	; 0x13
	handle->ifaceRF.DataRecieved_raised = bool_false;
    14f0:	19 a2       	lds	r17, 0x99
	handle->iface.switchOff_raised = bool_false;
    14f2:	1f aa       	sts	0x9f, r17
	handle->iface.switchOn_raised = bool_false;
    14f4:	18 ae       	sts	0xb8, r17
			break;
		}
	}
	
	clearInEvents(handle);
}
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	1f 91       	pop	r17
    14fc:	0f 91       	pop	r16
    14fe:	ff 90       	pop	r15
    1500:	ef 90       	pop	r14
    1502:	df 90       	pop	r13
    1504:	cf 90       	pop	r12
    1506:	bf 90       	pop	r11
    1508:	af 90       	pop	r10
    150a:	9f 90       	pop	r9
    150c:	8f 90       	pop	r8
    150e:	7f 90       	pop	r7
    1510:	6f 90       	pop	r6
    1512:	5f 90       	pop	r5
    1514:	4f 90       	pop	r4
    1516:	3f 90       	pop	r3
    1518:	2f 90       	pop	r2
    151a:	08 95       	ret
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMR_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	9c 81       	ldd	r25, Y+4	; 0x04
    1520:	01 96       	adiw	r24, 0x01	; 1
    1522:	9c 83       	std	Y+4, r25	; 0x04
    1524:	8b 83       	std	Y+3, r24	; 0x03
    1526:	e2 cf       	rjmp	.-60     	; 0x14ec <__stack+0x3ed>
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	9c 81       	ldd	r25, Y+4	; 0x04
    152c:	01 96       	adiw	r24, 0x01	; 1
    152e:	9c 83       	std	Y+4, r25	; 0x04
    1530:	8b 83       	std	Y+3, r24	; 0x03
    1532:	fb cd       	rjmp	.-1034   	; 0x112a <__stack+0x2b>

00001534 <sMR_raiseTimeEvent>:
	
	clearInEvents(handle);
}

void sMR_raiseTimeEvent(SMR* handle, sc_eventid evid) {
	if ( ((intptr_t)evid) >= ((intptr_t)&(handle->timeEvents))
    1534:	c9 96       	adiw	r24, 0x39	; 57
    1536:	68 17       	cp	r22, r24
    1538:	79 07       	cpc	r23, r25
    153a:	3c f0       	brlt	.+14     	; 0x154a <sMR_raiseTimeEvent+0x16>
		&&  ((intptr_t)evid) < ((intptr_t)&(handle->timeEvents)) + sizeof(SMRTimeEvents)) {
    153c:	01 96       	adiw	r24, 0x01	; 1
    153e:	68 17       	cp	r22, r24
    1540:	79 07       	cpc	r23, r25
    1542:	18 f4       	brcc	.+6      	; 0x154a <sMR_raiseTimeEvent+0x16>
		*(sc_boolean*)evid = bool_true;
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	fb 01       	movw	r30, r22
    1548:	80 83       	st	Z, r24
    154a:	08 95       	ret

0000154c <sMR_isActive>:
	}		
}

sc_boolean sMR_isActive(SMR* handle, SMRStates state) {
    154c:	fc 01       	movw	r30, r24
	switch (state) {
    154e:	66 30       	cpi	r22, 0x06	; 6
    1550:	09 f4       	brne	.+2      	; 0x1554 <sMR_isActive+0x8>
    1552:	4e c0       	rjmp	.+156    	; 0x15f0 <sMR_isActive+0xa4>
    1554:	67 30       	cpi	r22, 0x07	; 7
    1556:	78 f4       	brcc	.+30     	; 0x1576 <sMR_isActive+0x2a>
    1558:	62 30       	cpi	r22, 0x02	; 2
    155a:	81 f1       	breq	.+96     	; 0x15bc <sMR_isActive+0x70>
    155c:	63 30       	cpi	r22, 0x03	; 3
    155e:	30 f4       	brcc	.+12     	; 0x156c <sMR_isActive+0x20>
    1560:	66 23       	and	r22, r22
    1562:	f1 f0       	breq	.+60     	; 0x15a0 <sMR_isActive+0x54>
    1564:	61 30       	cpi	r22, 0x01	; 1
    1566:	09 f0       	breq	.+2      	; 0x156a <sMR_isActive+0x1e>
    1568:	6d c0       	rjmp	.+218    	; 0x1644 <sMR_isActive+0xf8>
    156a:	21 c0       	rjmp	.+66     	; 0x15ae <sMR_isActive+0x62>
    156c:	64 30       	cpi	r22, 0x04	; 4
    156e:	a1 f1       	breq	.+104    	; 0x15d8 <sMR_isActive+0x8c>
    1570:	65 30       	cpi	r22, 0x05	; 5
    1572:	c0 f5       	brcc	.+112    	; 0x15e4 <sMR_isActive+0x98>
    1574:	2b c0       	rjmp	.+86     	; 0x15cc <sMR_isActive+0x80>
    1576:	69 30       	cpi	r22, 0x09	; 9
    1578:	09 f4       	brne	.+2      	; 0x157c <sMR_isActive+0x30>
    157a:	4c c0       	rjmp	.+152    	; 0x1614 <sMR_isActive+0xc8>
    157c:	6a 30       	cpi	r22, 0x0A	; 10
    157e:	30 f4       	brcc	.+12     	; 0x158c <sMR_isActive+0x40>
    1580:	67 30       	cpi	r22, 0x07	; 7
    1582:	e1 f1       	breq	.+120    	; 0x15fc <sMR_isActive+0xb0>
    1584:	68 30       	cpi	r22, 0x08	; 8
    1586:	09 f0       	breq	.+2      	; 0x158a <sMR_isActive+0x3e>
    1588:	5d c0       	rjmp	.+186    	; 0x1644 <sMR_isActive+0xf8>
    158a:	3e c0       	rjmp	.+124    	; 0x1608 <sMR_isActive+0xbc>
    158c:	6b 30       	cpi	r22, 0x0B	; 11
    158e:	09 f4       	brne	.+2      	; 0x1592 <sMR_isActive+0x46>
    1590:	4d c0       	rjmp	.+154    	; 0x162c <sMR_isActive+0xe0>
    1592:	6b 30       	cpi	r22, 0x0B	; 11
    1594:	08 f4       	brcc	.+2      	; 0x1598 <sMR_isActive+0x4c>
    1596:	44 c0       	rjmp	.+136    	; 0x1620 <sMR_isActive+0xd4>
    1598:	6c 30       	cpi	r22, 0x0C	; 12
    159a:	09 f0       	breq	.+2      	; 0x159e <sMR_isActive+0x52>
    159c:	53 c0       	rjmp	.+166    	; 0x1644 <sMR_isActive+0xf8>
    159e:	4c c0       	rjmp	.+152    	; 0x1638 <sMR_isActive+0xec>
		case SMR_main_region_on : 
			return (sc_boolean) (handle->stateConfVector[0] >= SMR_main_region_on
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 81       	ld	r25, Z
    15a4:	9d 30       	cpi	r25, 0x0D	; 13
    15a6:	08 f4       	brcc	.+2      	; 0x15aa <sMR_isActive+0x5e>
    15a8:	4e c0       	rjmp	.+156    	; 0x1646 <sMR_isActive+0xfa>
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	08 95       	ret
				&& handle->stateConfVector[0] <= SMR_main_region_on_r1_running_UART_CheckKey);
		case SMR_main_region_on_r1_Init : 
			return (sc_boolean) (handle->stateConfVector[0] == SMR_main_region_on_r1_Init
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 81       	ld	r25, Z
    15b2:	91 30       	cpi	r25, 0x01	; 1
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <sMR_isActive+0x6c>
    15b6:	47 c0       	rjmp	.+142    	; 0x1646 <sMR_isActive+0xfa>
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	08 95       	ret
			);
		case SMR_main_region_on_r1_running : 
			return (sc_boolean) (handle->stateConfVector[0] >= SMR_main_region_on_r1_running
    15bc:	90 81       	ld	r25, Z
    15be:	92 50       	subi	r25, 0x02	; 2
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	9b 30       	cpi	r25, 0x0B	; 11
    15c4:	08 f4       	brcc	.+2      	; 0x15c8 <sMR_isActive+0x7c>
    15c6:	3f c0       	rjmp	.+126    	; 0x1646 <sMR_isActive+0xfa>
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	08 95       	ret
				&& handle->stateConfVector[0] <= SMR_main_region_on_r1_running_UART_CheckKey);
		case SMR_main_region_on_r1_running_RF_GetData : 
			return (sc_boolean) (handle->stateConfVector[0] == SMR_main_region_on_r1_running_RF_GetData
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 81       	ld	r25, Z
    15d0:	93 30       	cpi	r25, 0x03	; 3
    15d2:	c9 f1       	breq	.+114    	; 0x1646 <sMR_isActive+0xfa>
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	08 95       	ret
			);
		case SMR_main_region_on_r1_running_RF__final_ : 
			return (sc_boolean) (handle->stateConfVector[0] == SMR_main_region_on_r1_running_RF__final_
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 81       	ld	r25, Z
    15dc:	94 30       	cpi	r25, 0x04	; 4
    15de:	99 f1       	breq	.+102    	; 0x1646 <sMR_isActive+0xfa>
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	08 95       	ret
			);
		case SMR_main_region_on_r1_running_RF_SendSuccessful : 
			return (sc_boolean) (handle->stateConfVector[0] == SMR_main_region_on_r1_running_RF_SendSuccessful
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 81       	ld	r25, Z
    15e8:	95 30       	cpi	r25, 0x05	; 5
    15ea:	69 f1       	breq	.+90     	; 0x1646 <sMR_isActive+0xfa>
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	08 95       	ret
			);
		case SMR_main_region_on_r1_running_RF_DataReceicved : 
			return (sc_boolean) (handle->stateConfVector[0] == SMR_main_region_on_r1_running_RF_DataReceicved
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	90 81       	ld	r25, Z
    15f4:	96 30       	cpi	r25, 0x06	; 6
    15f6:	39 f1       	breq	.+78     	; 0x1646 <sMR_isActive+0xfa>
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	08 95       	ret
			);
		case SMR_main_region_on_r1_running_keypad_CheckKey : 
			return (sc_boolean) (handle->stateConfVector[1] == SMR_main_region_on_r1_running_keypad_CheckKey
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	91 81       	ldd	r25, Z+1	; 0x01
    1600:	97 30       	cpi	r25, 0x07	; 7
    1602:	09 f1       	breq	.+66     	; 0x1646 <sMR_isActive+0xfa>
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	08 95       	ret
			);
		case SMR_main_region_on_r1_running_keypad_CheckKeyDown : 
			return (sc_boolean) (handle->stateConfVector[1] == SMR_main_region_on_r1_running_keypad_CheckKeyDown
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	91 81       	ldd	r25, Z+1	; 0x01
    160c:	98 30       	cpi	r25, 0x08	; 8
    160e:	d9 f0       	breq	.+54     	; 0x1646 <sMR_isActive+0xfa>
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	08 95       	ret
			);
		case SMR_main_region_on_r1_running_UART_ShowMsg : 
			return (sc_boolean) (handle->stateConfVector[2] == SMR_main_region_on_r1_running_UART_ShowMsg
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	92 81       	ldd	r25, Z+2	; 0x02
    1618:	99 30       	cpi	r25, 0x09	; 9
    161a:	a9 f0       	breq	.+42     	; 0x1646 <sMR_isActive+0xfa>
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	08 95       	ret
			);
		case SMR_main_region_on_r1_running_UART_ShowNumber : 
			return (sc_boolean) (handle->stateConfVector[2] == SMR_main_region_on_r1_running_UART_ShowNumber
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	92 81       	ldd	r25, Z+2	; 0x02
    1624:	9a 30       	cpi	r25, 0x0A	; 10
    1626:	79 f0       	breq	.+30     	; 0x1646 <sMR_isActive+0xfa>
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	08 95       	ret
			);
		case SMR_main_region_on_r1_running_UART_SendUART : 
			return (sc_boolean) (handle->stateConfVector[2] == SMR_main_region_on_r1_running_UART_SendUART
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	92 81       	ldd	r25, Z+2	; 0x02
    1630:	9b 30       	cpi	r25, 0x0B	; 11
    1632:	49 f0       	breq	.+18     	; 0x1646 <sMR_isActive+0xfa>
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	08 95       	ret
			);
		case SMR_main_region_on_r1_running_UART_CheckKey : 
			return (sc_boolean) (handle->stateConfVector[2] == SMR_main_region_on_r1_running_UART_CheckKey
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	92 81       	ldd	r25, Z+2	; 0x02
    163c:	9c 30       	cpi	r25, 0x0C	; 12
    163e:	19 f0       	breq	.+6      	; 0x1646 <sMR_isActive+0xfa>
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	08 95       	ret
			);
		default: return bool_false;
    1644:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1646:	08 95       	ret

00001648 <sMRIfaceKEYPAD_raise_key_pressed>:



void sMRIfaceKEYPAD_raise_key_pressed(SMR* handle) {
	handle->ifaceKEYPAD.key_pressed_raised = bool_true;
    1648:	21 e0       	ldi	r18, 0x01	; 1
    164a:	fc 01       	movw	r30, r24
    164c:	26 87       	std	Z+14, r18	; 0x0e
}
    164e:	08 95       	ret

00001650 <sMRIfaceKEYPAD_get_key>:


sc_integer sMRIfaceKEYPAD_get_key(SMR* handle) {
    1650:	fc 01       	movw	r30, r24
	return handle->ifaceKEYPAD.key;
    1652:	65 81       	ldd	r22, Z+5	; 0x05
    1654:	76 81       	ldd	r23, Z+6	; 0x06
}
    1656:	87 81       	ldd	r24, Z+7	; 0x07
    1658:	90 85       	ldd	r25, Z+8	; 0x08
    165a:	08 95       	ret

0000165c <sMRIfaceKEYPAD_set_key>:
void sMRIfaceKEYPAD_set_key(SMR* handle, sc_integer value) {
	handle->ifaceKEYPAD.key = value;
    165c:	fc 01       	movw	r30, r24
    165e:	45 83       	std	Z+5, r20	; 0x05
    1660:	56 83       	std	Z+6, r21	; 0x06
    1662:	67 83       	std	Z+7, r22	; 0x07
    1664:	70 87       	std	Z+8, r23	; 0x08
}
    1666:	08 95       	ret

00001668 <sMRIfaceKEYPAD_get_lastkey>:
sc_integer sMRIfaceKEYPAD_get_lastkey(SMR* handle) {
    1668:	fc 01       	movw	r30, r24
	return handle->ifaceKEYPAD.lastkey;
    166a:	61 85       	ldd	r22, Z+9	; 0x09
    166c:	72 85       	ldd	r23, Z+10	; 0x0a
}
    166e:	83 85       	ldd	r24, Z+11	; 0x0b
    1670:	94 85       	ldd	r25, Z+12	; 0x0c
    1672:	08 95       	ret

00001674 <sMRIfaceKEYPAD_set_lastkey>:
void sMRIfaceKEYPAD_set_lastkey(SMR* handle, sc_integer value) {
	handle->ifaceKEYPAD.lastkey = value;
    1674:	fc 01       	movw	r30, r24
    1676:	41 87       	std	Z+9, r20	; 0x09
    1678:	52 87       	std	Z+10, r21	; 0x0a
    167a:	63 87       	std	Z+11, r22	; 0x0b
    167c:	74 87       	std	Z+12, r23	; 0x0c
}
    167e:	08 95       	ret

00001680 <sMRIfaceKEYPAD_get_key_down>:
sc_boolean sMRIfaceKEYPAD_get_key_down(SMR* handle) {
	return handle->ifaceKEYPAD.key_down;
}
    1680:	fc 01       	movw	r30, r24
    1682:	85 85       	ldd	r24, Z+13	; 0x0d
    1684:	08 95       	ret

00001686 <sMRIfaceKEYPAD_set_key_down>:
void sMRIfaceKEYPAD_set_key_down(SMR* handle, sc_boolean value) {
	handle->ifaceKEYPAD.key_down = value;
    1686:	fc 01       	movw	r30, r24
    1688:	65 87       	std	Z+13, r22	; 0x0d
}
    168a:	08 95       	ret

0000168c <sMRIfaceUART_raise_dataRecieved>:
void sMRIfaceUART_raise_dataRecieved(SMR* handle) {
	handle->ifaceUART.DataRecieved_raised = bool_true;
    168c:	21 e0       	ldi	r18, 0x01	; 1
    168e:	fc 01       	movw	r30, r24
    1690:	23 8b       	std	Z+19, r18	; 0x13
}
    1692:	08 95       	ret

00001694 <sMRIfaceUART_get_data>:


sc_string sMRIfaceUART_get_data(SMR* handle) {
    1694:	fc 01       	movw	r30, r24
	return handle->ifaceUART.data;
}
    1696:	87 85       	ldd	r24, Z+15	; 0x0f
    1698:	90 89       	ldd	r25, Z+16	; 0x10
    169a:	08 95       	ret

0000169c <sMRIfaceUART_set_data>:
void sMRIfaceUART_set_data(SMR* handle, sc_string value) {
	handle->ifaceUART.data = value;
    169c:	fc 01       	movw	r30, r24
    169e:	70 8b       	std	Z+16, r23	; 0x10
    16a0:	67 87       	std	Z+15, r22	; 0x0f
}
    16a2:	08 95       	ret

000016a4 <sMRIfaceUART_get_lastdata>:
sc_string sMRIfaceUART_get_lastdata(SMR* handle) {
    16a4:	fc 01       	movw	r30, r24
	return handle->ifaceUART.lastdata;
}
    16a6:	81 89       	ldd	r24, Z+17	; 0x11
    16a8:	92 89       	ldd	r25, Z+18	; 0x12
    16aa:	08 95       	ret

000016ac <sMRIfaceUART_set_lastdata>:
void sMRIfaceUART_set_lastdata(SMR* handle, sc_string value) {
	handle->ifaceUART.lastdata = value;
    16ac:	fc 01       	movw	r30, r24
    16ae:	72 8b       	std	Z+18, r23	; 0x12
    16b0:	61 8b       	std	Z+17, r22	; 0x11
}
    16b2:	08 95       	ret

000016b4 <sMRIfaceRF_raise_dataRecieved>:
void sMRIfaceRF_raise_dataRecieved(SMR* handle) {
	handle->ifaceRF.DataRecieved_raised = bool_true;
    16b4:	21 e0       	ldi	r18, 0x01	; 1
    16b6:	fc 01       	movw	r30, r24
    16b8:	21 a3       	lds	r18, 0x51
}
    16ba:	08 95       	ret

000016bc <sMRIfaceRF_get_data>:


sc_string sMRIfaceRF_get_data(SMR* handle) {
    16bc:	fc 01       	movw	r30, r24
	return handle->ifaceRF.data;
}
    16be:	84 89       	ldd	r24, Z+20	; 0x14
    16c0:	95 89       	ldd	r25, Z+21	; 0x15
    16c2:	08 95       	ret

000016c4 <sMRIfaceRF_set_data>:
void sMRIfaceRF_set_data(SMR* handle, sc_string value) {
	handle->ifaceRF.data = value;
    16c4:	fc 01       	movw	r30, r24
    16c6:	75 8b       	std	Z+21, r23	; 0x15
    16c8:	64 8b       	std	Z+20, r22	; 0x14
}
    16ca:	08 95       	ret

000016cc <sMRIfaceRF_get_lastdata>:
sc_string sMRIfaceRF_get_lastdata(SMR* handle) {
    16cc:	fc 01       	movw	r30, r24
	return handle->ifaceRF.lastdata;
}
    16ce:	86 89       	ldd	r24, Z+22	; 0x16
    16d0:	97 89       	ldd	r25, Z+23	; 0x17
    16d2:	08 95       	ret

000016d4 <sMRIfaceRF_set_lastdata>:
void sMRIfaceRF_set_lastdata(SMR* handle, sc_string value) {
	handle->ifaceRF.lastdata = value;
    16d4:	fc 01       	movw	r30, r24
    16d6:	77 8b       	std	Z+23, r23	; 0x17
    16d8:	66 8b       	std	Z+22, r22	; 0x16
}
    16da:	08 95       	ret

000016dc <sMRIfaceRF_get_result>:
sc_boolean sMRIfaceRF_get_result(SMR* handle) {
	return handle->ifaceRF.result;
}
    16dc:	fc 01       	movw	r30, r24
    16de:	80 8d       	ldd	r24, Z+24	; 0x18
    16e0:	08 95       	ret

000016e2 <sMRIfaceRF_set_result>:
void sMRIfaceRF_set_result(SMR* handle, sc_boolean value) {
	handle->ifaceRF.result = value;
    16e2:	fc 01       	movw	r30, r24
    16e4:	60 8f       	std	Z+24, r22	; 0x18
}
    16e6:	08 95       	ret

000016e8 <sMRIfaceRF_get_retry>:
sc_integer sMRIfaceRF_get_retry(SMR* handle) {
    16e8:	fc 01       	movw	r30, r24
	return handle->ifaceRF.retry;
    16ea:	61 8d       	ldd	r22, Z+25	; 0x19
    16ec:	72 8d       	ldd	r23, Z+26	; 0x1a
}
    16ee:	83 8d       	ldd	r24, Z+27	; 0x1b
    16f0:	94 8d       	ldd	r25, Z+28	; 0x1c
    16f2:	08 95       	ret

000016f4 <sMRIfaceRF_set_retry>:
void sMRIfaceRF_set_retry(SMR* handle, sc_integer value) {
	handle->ifaceRF.retry = value;
    16f4:	fc 01       	movw	r30, r24
    16f6:	41 8f       	std	Z+25, r20	; 0x19
    16f8:	52 8f       	std	Z+26, r21	; 0x1a
    16fa:	63 8f       	std	Z+27, r22	; 0x1b
    16fc:	74 8f       	std	Z+28, r23	; 0x1c
}
    16fe:	08 95       	ret

00001700 <sMRIfaceRF_get_iD>:
sc_integer sMRIfaceRF_get_iD(SMR* handle) {
    1700:	fc 01       	movw	r30, r24
	return handle->ifaceRF.ID;
    1702:	65 8d       	ldd	r22, Z+29	; 0x1d
    1704:	76 8d       	ldd	r23, Z+30	; 0x1e
}
    1706:	87 8d       	ldd	r24, Z+31	; 0x1f
    1708:	90 a1       	lds	r25, 0x40
    170a:	08 95       	ret

0000170c <sMRIfaceRF_set_iD>:
void sMRIfaceRF_set_iD(SMR* handle, sc_integer value) {
	handle->ifaceRF.ID = value;
    170c:	fc 01       	movw	r30, r24
    170e:	45 8f       	std	Z+29, r20	; 0x1d
    1710:	56 8f       	std	Z+30, r21	; 0x1e
    1712:	67 8f       	std	Z+31, r22	; 0x1f
    1714:	70 a3       	lds	r23, 0x50
}
    1716:	08 95       	ret

00001718 <sMRIfaceDISH_get_iD>:


sc_integer sMRIfaceDISH_get_iD(SMR* handle) {
    1718:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.ID;
    171a:	62 a1       	lds	r22, 0x42
    171c:	73 a1       	lds	r23, 0x43
}
    171e:	84 a1       	lds	r24, 0x44
    1720:	95 a1       	lds	r25, 0x45
    1722:	08 95       	ret

00001724 <sMRIfaceDISH_set_iD>:
void sMRIfaceDISH_set_iD(SMR* handle, sc_integer value) {
	handle->ifaceDISH.ID = value;
    1724:	fc 01       	movw	r30, r24
    1726:	42 a3       	lds	r20, 0x52
    1728:	53 a3       	lds	r21, 0x53
    172a:	64 a3       	lds	r22, 0x54
    172c:	75 a3       	lds	r23, 0x55
}
    172e:	08 95       	ret

00001730 <sMRIfaceDISH_get_amount>:
sc_integer sMRIfaceDISH_get_amount(SMR* handle) {
    1730:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.amount;
    1732:	66 a1       	lds	r22, 0x46
    1734:	77 a1       	lds	r23, 0x47
}
    1736:	80 a5       	lds	r24, 0x60
    1738:	91 a5       	lds	r25, 0x61
    173a:	08 95       	ret

0000173c <sMRIfaceDISH_set_amount>:
void sMRIfaceDISH_set_amount(SMR* handle, sc_integer value) {
	handle->ifaceDISH.amount = value;
    173c:	fc 01       	movw	r30, r24
    173e:	46 a3       	lds	r20, 0x56
    1740:	57 a3       	lds	r21, 0x57
    1742:	60 a7       	lds	r22, 0x70
    1744:	71 a7       	lds	r23, 0x71
}
    1746:	08 95       	ret

00001748 <sMRIfaceDISH_get_pos>:
sc_integer sMRIfaceDISH_get_pos(SMR* handle) {
    1748:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.pos;
    174a:	62 a5       	lds	r22, 0x62
    174c:	73 a5       	lds	r23, 0x63
}
    174e:	84 a5       	lds	r24, 0x64
    1750:	95 a5       	lds	r25, 0x65
    1752:	08 95       	ret

00001754 <sMRIfaceDISH_set_pos>:
void sMRIfaceDISH_set_pos(SMR* handle, sc_integer value) {
	handle->ifaceDISH.pos = value;
    1754:	fc 01       	movw	r30, r24
    1756:	42 a7       	lds	r20, 0x72
    1758:	53 a7       	lds	r21, 0x73
    175a:	64 a7       	lds	r22, 0x74
    175c:	75 a7       	lds	r23, 0x75
}
    175e:	08 95       	ret

00001760 <sMRIface_raise_switchOff>:
void sMRIface_raise_switchOff(SMR* handle) {
	handle->iface.switchOff_raised = bool_true;
    1760:	21 e0       	ldi	r18, 0x01	; 1
    1762:	fc 01       	movw	r30, r24
    1764:	27 ab       	sts	0x57, r18
}
    1766:	08 95       	ret

00001768 <sMRIface_raise_switchOn>:
void sMRIface_raise_switchOn(SMR* handle) {
	handle->iface.switchOn_raised = bool_true;
    1768:	21 e0       	ldi	r18, 0x01	; 1
    176a:	fc 01       	movw	r30, r24
    176c:	20 af       	sts	0x70, r18
}
    176e:	08 95       	ret

00001770 <sMRIface_get_lightOn>:


sc_boolean sMRIface_get_lightOn(SMR* handle) {
	return handle->iface.lightOn;
}
    1770:	fc 01       	movw	r30, r24
    1772:	86 a5       	lds	r24, 0x66
    1774:	08 95       	ret

00001776 <sMRIface_set_lightOn>:
void sMRIface_set_lightOn(SMR* handle, sc_boolean value) {
	handle->iface.lightOn = value;
    1776:	fc 01       	movw	r30, r24
    1778:	66 a7       	lds	r22, 0x76
}
    177a:	08 95       	ret

0000177c <sMRIface_get_menuId>:
sc_integer sMRIface_get_menuId(SMR* handle) {
    177c:	fc 01       	movw	r30, r24
	return handle->iface.menuId;
    177e:	67 a5       	lds	r22, 0x67
    1780:	70 a9       	sts	0x40, r23
}
    1782:	81 a9       	sts	0x41, r24
    1784:	92 a9       	sts	0x42, r25
    1786:	08 95       	ret

00001788 <sMRIface_set_menuId>:
void sMRIface_set_menuId(SMR* handle, sc_integer value) {
	handle->iface.menuId = value;
    1788:	fc 01       	movw	r30, r24
    178a:	47 a7       	lds	r20, 0x77
    178c:	50 ab       	sts	0x50, r21
    178e:	61 ab       	sts	0x51, r22
    1790:	72 ab       	sts	0x52, r23
}
    1792:	08 95       	ret

00001794 <sMRIface_get_tableId>:
sc_integer sMRIface_get_tableId(SMR* handle) {
    1794:	fc 01       	movw	r30, r24
	return handle->iface.tableId;
    1796:	63 a9       	sts	0x43, r22
    1798:	74 a9       	sts	0x44, r23
}
    179a:	85 a9       	sts	0x45, r24
    179c:	96 a9       	sts	0x46, r25
    179e:	08 95       	ret

000017a0 <sMRIface_set_tableId>:
void sMRIface_set_tableId(SMR* handle, sc_integer value) {
	handle->iface.tableId = value;
    17a0:	fc 01       	movw	r30, r24
    17a2:	43 ab       	sts	0x53, r20
    17a4:	54 ab       	sts	0x54, r21
    17a6:	65 ab       	sts	0x55, r22
    17a8:	76 ab       	sts	0x56, r23
}
    17aa:	08 95       	ret

000017ac <spi_init>:

/*
 * spi initialize
 */
void spi_init() {
    SPI_DDR &= ~((1<<SPI_MOSI) | (1<<SPI_MISO) | (1<<SPI_SS) | (1<<SPI_SCK)); //input
    17ac:	87 b3       	in	r24, 0x17	; 23
    17ae:	80 7f       	andi	r24, 0xF0	; 240
    17b0:	87 bb       	out	0x17, r24	; 23
    SPI_DDR |= ((1<<SPI_MOSI) | (1<<SPI_SS) | (1<<SPI_SCK)); //output
    17b2:	87 b3       	in	r24, 0x17	; 23
    17b4:	87 60       	ori	r24, 0x07	; 7
    17b6:	87 bb       	out	0x17, r24	; 23

    SPCR = ((1<<SPE)|               // SPI Enable
    17b8:	81 e5       	ldi	r24, 0x51	; 81
    17ba:	8d b9       	out	0x0d, r24	; 13
            (1<<MSTR)|              // Master/Slave select
            (0<<SPR1)|(1<<SPR0)|    // SPI Clock Rate
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR = (1<<SPI2X); // Double SPI Speed Bit
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	8e b9       	out	0x0e, r24	; 14
}
    17c0:	08 95       	ret

000017c2 <spi_writereadbyte>:

/*
 * spi write one byte and read it back
 */
uint8_t spi_writereadbyte(uint8_t data) {
    SPDR = data;
    17c2:	8f b9       	out	0x0f, r24	; 15
    while((SPSR & (1<<SPIF)) == 0);
    17c4:	77 9b       	sbis	0x0e, 7	; 14
    17c6:	fe cf       	rjmp	.-4      	; 0x17c4 <spi_writereadbyte+0x2>
    return SPDR;
    17c8:	8f b1       	in	r24, 0x0f	; 15
}
    17ca:	08 95       	ret

000017cc <TimerInit>:

TimeEvent tmrEvent[10];
int tmrCount=0;

void TimerInit() {
	TCCR0 = 0b011; //CS02=0, CS01=1, CS00=0, chon Prescaler=64
    17cc:	83 e0       	ldi	r24, 0x03	; 3
    17ce:	83 bf       	out	0x33, r24	; 51
	//Xung chip la 8MHZ -> 1 xung mat 1us/8 = 0.125 us
	//Prescaler=64, kich 256 lan moi tang 1 lan trong bo dem Timer-> Ton 8us
	//Vay, de Timer ngat moi 1ms, ta can: 1000/8=125 lan dem.
	//Ma Timer ngat khi bo dem toi 255, ta can set gia tri ban dau cho bo dem la: 255-125+1=131
	TCNT0=131;
    17d0:	83 e8       	ldi	r24, 0x83	; 131
    17d2:	82 bf       	out	0x32, r24	; 50
	TIMSK=(1<<TOIE0); //Cho phep ngat khi cho tran o T/C0
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	87 bf       	out	0x37, r24	; 55
	tmrCount=0;
    17d8:	10 92 1f 02 	sts	0x021F, r1
    17dc:	10 92 1e 02 	sts	0x021E, r1
	sei();
    17e0:	78 94       	sei
}
    17e2:	08 95       	ret

000017e4 <TimerSet>:

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
    17e4:	cf 92       	push	r12
    17e6:	df 92       	push	r13
    17e8:	ef 92       	push	r14
    17ea:	ff 92       	push	r15
    17ec:	cf 93       	push	r28
    17ee:	df 93       	push	r29
    17f0:	ec 01       	movw	r28, r24
    17f2:	6a 01       	movw	r12, r20
    17f4:	7b 01       	movw	r14, r22
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
    17f6:	40 91 1e 02 	lds	r20, 0x021E
    17fa:	50 91 1f 02 	lds	r21, 0x021F
    17fe:	14 16       	cp	r1, r20
    1800:	15 06       	cpc	r1, r21
    1802:	e4 f4       	brge	.+56     	; 0x183c <TimerSet+0x58>
    1804:	ef e3       	ldi	r30, 0x3F	; 63
    1806:	f2 e0       	ldi	r31, 0x02	; 2
    1808:	df 01       	movw	r26, r30
    180a:	16 96       	adiw	r26, 0x06	; 6
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
	sei();
}

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
    1810:	70 e0       	ldi	r23, 0x00	; 0
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
			check=true;
			tmrEvent[i].count=0;
			tmrEvent[i].max=max;
			tmrEvent[i].enabled=true;
    1812:	61 e0       	ldi	r22, 0x01	; 1

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
    1814:	80 81       	ld	r24, Z
    1816:	91 81       	ldd	r25, Z+1	; 0x01
    1818:	8c 17       	cp	r24, r28
    181a:	9d 07       	cpc	r25, r29
    181c:	31 f4       	brne	.+12     	; 0x182a <TimerSet+0x46>
			check=true;
			tmrEvent[i].count=0;
    181e:	13 82       	std	Z+3, r1	; 0x03
    1820:	12 82       	std	Z+2, r1	; 0x02
			tmrEvent[i].max=max;
    1822:	d5 82       	std	Z+5, r13	; 0x05
    1824:	c4 82       	std	Z+4, r12	; 0x04
			tmrEvent[i].enabled=true;
    1826:	6c 93       	st	X, r22
//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
			check=true;
    1828:	76 2f       	mov	r23, r22
}

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
    182a:	2f 5f       	subi	r18, 0xFF	; 255
    182c:	3f 4f       	sbci	r19, 0xFF	; 255
    182e:	37 96       	adiw	r30, 0x07	; 7
    1830:	17 96       	adiw	r26, 0x07	; 7
    1832:	24 17       	cp	r18, r20
    1834:	35 07       	cpc	r19, r21
    1836:	74 f3       	brlt	.-36     	; 0x1814 <TimerSet+0x30>
			tmrEvent[i].count=0;
			tmrEvent[i].max=max;
			tmrEvent[i].enabled=true;
		}
	}
	if (!check) {
    1838:	77 23       	and	r23, r23
    183a:	c9 f4       	brne	.+50     	; 0x186e <TimerSet+0x8a>
		tmrEvent[tmrCount].EventId=evenId;
    183c:	fa 01       	movw	r30, r20
    183e:	ee 0f       	add	r30, r30
    1840:	ff 1f       	adc	r31, r31
    1842:	ee 0f       	add	r30, r30
    1844:	ff 1f       	adc	r31, r31
    1846:	ee 0f       	add	r30, r30
    1848:	ff 1f       	adc	r31, r31
    184a:	e4 1b       	sub	r30, r20
    184c:	f5 0b       	sbc	r31, r21
    184e:	e1 5c       	subi	r30, 0xC1	; 193
    1850:	fd 4f       	sbci	r31, 0xFD	; 253
    1852:	d1 83       	std	Z+1, r29	; 0x01
    1854:	c0 83       	st	Z, r28
		tmrEvent[tmrCount].count=0;
    1856:	13 82       	std	Z+3, r1	; 0x03
    1858:	12 82       	std	Z+2, r1	; 0x02
		tmrEvent[tmrCount].max=max;
    185a:	d5 82       	std	Z+5, r13	; 0x05
    185c:	c4 82       	std	Z+4, r12	; 0x04
		tmrEvent[tmrCount].enabled=true;
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	86 83       	std	Z+6, r24	; 0x06
		tmrCount++;
    1862:	4f 5f       	subi	r20, 0xFF	; 255
    1864:	5f 4f       	sbci	r21, 0xFF	; 255
    1866:	50 93 1f 02 	sts	0x021F, r21
    186a:	40 93 1e 02 	sts	0x021E, r20
	}
}
    186e:	df 91       	pop	r29
    1870:	cf 91       	pop	r28
    1872:	ff 90       	pop	r15
    1874:	ef 90       	pop	r14
    1876:	df 90       	pop	r13
    1878:	cf 90       	pop	r12
    187a:	08 95       	ret

0000187c <TimerUnSet>:

void TimerUnSet(const sc_eventid evenId) {
    187c:	dc 01       	movw	r26, r24
	for (int i=0;i<tmrCount;i++) {
    187e:	60 91 1e 02 	lds	r22, 0x021E
    1882:	70 91 1f 02 	lds	r23, 0x021F
    1886:	16 16       	cp	r1, r22
    1888:	17 06       	cpc	r1, r23
    188a:	64 f5       	brge	.+88     	; 0x18e4 <TimerUnSet+0x68>
		if (tmrEvent[i].EventId==evenId) {
    188c:	80 91 3f 02 	lds	r24, 0x023F
    1890:	90 91 40 02 	lds	r25, 0x0240
    1894:	8a 17       	cp	r24, r26
    1896:	9b 07       	cpc	r25, r27
    1898:	e1 f4       	brne	.+56     	; 0x18d2 <TimerUnSet+0x56>
    189a:	0a c0       	rjmp	.+20     	; 0x18b0 <TimerUnSet+0x34>
    189c:	29 5f       	subi	r18, 0xF9	; 249
    189e:	3f 4f       	sbci	r19, 0xFF	; 255
		tmrEvent[tmrCount].enabled=true;
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
    18a0:	f9 01       	movw	r30, r18
    18a2:	37 97       	sbiw	r30, 0x07	; 7
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
    18a4:	80 81       	ld	r24, Z
    18a6:	91 81       	ldd	r25, Z+1	; 0x01
    18a8:	8a 17       	cp	r24, r26
    18aa:	9b 07       	cpc	r25, r27
    18ac:	b1 f4       	brne	.+44     	; 0x18da <TimerUnSet+0x5e>
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <TimerUnSet+0x38>
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
	for (int i=0;i<tmrCount;i++) {
    18b0:	40 e0       	ldi	r20, 0x00	; 0
    18b2:	50 e0       	ldi	r21, 0x00	; 0
		if (tmrEvent[i].EventId==evenId) {
			tmrEvent[i].count=0;
    18b4:	fa 01       	movw	r30, r20
    18b6:	ee 0f       	add	r30, r30
    18b8:	ff 1f       	adc	r31, r31
    18ba:	ee 0f       	add	r30, r30
    18bc:	ff 1f       	adc	r31, r31
    18be:	ee 0f       	add	r30, r30
    18c0:	ff 1f       	adc	r31, r31
    18c2:	e4 1b       	sub	r30, r20
    18c4:	f5 0b       	sbc	r31, r21
    18c6:	e1 5c       	subi	r30, 0xC1	; 193
    18c8:	fd 4f       	sbci	r31, 0xFD	; 253
    18ca:	13 82       	std	Z+3, r1	; 0x03
    18cc:	12 82       	std	Z+2, r1	; 0x02
			tmrEvent[i].enabled=false;
    18ce:	16 82       	std	Z+6, r1	; 0x06
			return;
    18d0:	08 95       	ret
    18d2:	26 e4       	ldi	r18, 0x46	; 70
    18d4:	32 e0       	ldi	r19, 0x02	; 2
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
	for (int i=0;i<tmrCount;i++) {
    18d6:	40 e0       	ldi	r20, 0x00	; 0
    18d8:	50 e0       	ldi	r21, 0x00	; 0
    18da:	4f 5f       	subi	r20, 0xFF	; 255
    18dc:	5f 4f       	sbci	r21, 0xFF	; 255
    18de:	46 17       	cp	r20, r22
    18e0:	57 07       	cpc	r21, r23
    18e2:	e1 f6       	brne	.-72     	; 0x189c <TimerUnSet+0x20>
    18e4:	08 95       	ret

000018e6 <TimerCheck>:
			return;
		}
	}
}

void TimerCheck(SMR* handle) {
    18e6:	cf 92       	push	r12
    18e8:	df 92       	push	r13
    18ea:	ef 92       	push	r14
    18ec:	ff 92       	push	r15
    18ee:	0f 93       	push	r16
    18f0:	1f 93       	push	r17
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
    18f6:	6c 01       	movw	r12, r24
	for (int i=0;i<tmrCount;i++) {
    18f8:	80 91 1e 02 	lds	r24, 0x021E
    18fc:	90 91 1f 02 	lds	r25, 0x021F
    1900:	18 16       	cp	r1, r24
    1902:	19 06       	cpc	r1, r25
    1904:	94 f5       	brge	.+100    	; 0x196a <TimerCheck+0x84>
    1906:	c5 e4       	ldi	r28, 0x45	; 69
    1908:	d2 e0       	ldi	r29, 0x02	; 2
    190a:	8e 01       	movw	r16, r28
    190c:	06 50       	subi	r16, 0x06	; 6
    190e:	10 40       	sbci	r17, 0x00	; 0
    1910:	ee 24       	eor	r14, r14
    1912:	ff 24       	eor	r15, r15
		if (tmrEvent[i].enabled) {
    1914:	88 81       	ld	r24, Y
    1916:	88 23       	and	r24, r24
    1918:	d9 f0       	breq	.+54     	; 0x1950 <TimerCheck+0x6a>
			tmrEvent[i].count++;
    191a:	d8 01       	movw	r26, r16
    191c:	12 96       	adiw	r26, 0x02	; 2
    191e:	8d 91       	ld	r24, X+
    1920:	9c 91       	ld	r25, X
    1922:	13 97       	sbiw	r26, 0x03	; 3
    1924:	01 96       	adiw	r24, 0x01	; 1
    1926:	13 96       	adiw	r26, 0x03	; 3
    1928:	9c 93       	st	X, r25
    192a:	8e 93       	st	-X, r24
    192c:	12 97       	sbiw	r26, 0x02	; 2
			if (tmrEvent[i].count==tmrEvent[i].max) {
    192e:	14 96       	adiw	r26, 0x04	; 4
    1930:	2d 91       	ld	r18, X+
    1932:	3c 91       	ld	r19, X
    1934:	15 97       	sbiw	r26, 0x05	; 5
    1936:	82 17       	cp	r24, r18
    1938:	93 07       	cpc	r25, r19
    193a:	51 f4       	brne	.+20     	; 0x1950 <TimerCheck+0x6a>
				tmrEvent[i].count=0;
    193c:	13 96       	adiw	r26, 0x03	; 3
    193e:	1c 92       	st	X, r1
    1940:	1e 92       	st	-X, r1
    1942:	12 97       	sbiw	r26, 0x02	; 2
				tmrEvent[i].enabled=false;
    1944:	18 82       	st	Y, r1
				sMR_raiseTimeEvent(handle,tmrEvent[i].EventId);
    1946:	6d 91       	ld	r22, X+
    1948:	7c 91       	ld	r23, X
    194a:	c6 01       	movw	r24, r12
    194c:	0e 94 9a 0a 	call	0x1534	; 0x1534 <sMR_raiseTimeEvent>
		}
	}
}

void TimerCheck(SMR* handle) {
	for (int i=0;i<tmrCount;i++) {
    1950:	08 94       	sec
    1952:	e1 1c       	adc	r14, r1
    1954:	f1 1c       	adc	r15, r1
    1956:	27 96       	adiw	r28, 0x07	; 7
    1958:	09 5f       	subi	r16, 0xF9	; 249
    195a:	1f 4f       	sbci	r17, 0xFF	; 255
    195c:	80 91 1e 02 	lds	r24, 0x021E
    1960:	90 91 1f 02 	lds	r25, 0x021F
    1964:	e8 16       	cp	r14, r24
    1966:	f9 06       	cpc	r15, r25
    1968:	ac f2       	brlt	.-86     	; 0x1914 <TimerCheck+0x2e>
				tmrEvent[i].enabled=false;
				sMR_raiseTimeEvent(handle,tmrEvent[i].EventId);
			}
		}
	}
}
    196a:	df 91       	pop	r29
    196c:	cf 91       	pop	r28
    196e:	1f 91       	pop	r17
    1970:	0f 91       	pop	r16
    1972:	ff 90       	pop	r15
    1974:	ef 90       	pop	r14
    1976:	df 90       	pop	r13
    1978:	cf 90       	pop	r12
    197a:	08 95       	ret

0000197c <TimerClear>:

void TimerClear() {
	free(tmrEvent);
    197c:	8f e3       	ldi	r24, 0x3F	; 63
    197e:	92 e0       	ldi	r25, 0x02	; 2
    1980:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <free>
	tmrCount=0;
    1984:	10 92 1f 02 	sts	0x021F, r1
    1988:	10 92 1e 02 	sts	0x021E, r1
    198c:	08 95       	ret

0000198e <UART_Init>:
unsigned char* u_Data;

void UART_Init( unsigned int ubrr )
{
	/* Set baud rate */
	UBRR1H = (unsigned char)(ubrr>>8);
    198e:	90 93 98 00 	sts	0x0098, r25
	UBRR1L = (unsigned char)ubrr;
    1992:	80 93 99 00 	sts	0x0099, r24
	/* Enable receiver, transmitter and interrup when receive finish */
	UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1);
    1996:	88 e9       	ldi	r24, 0x98	; 152
    1998:	80 93 9a 00 	sts	0x009A, r24
	/* Set frame format: 8data, 1stop bit */
	UCSR1C = (1<<UCSZ10)|(1<<UCSZ11);
    199c:	86 e0       	ldi	r24, 0x06	; 6
    199e:	80 93 9d 00 	sts	0x009D, r24
	sei();
    19a2:	78 94       	sei
}
    19a4:	08 95       	ret

000019a6 <uart_putc>:

void uart_putc(unsigned char chr) {
	/* Wait for empty transmit buffer */
	while ( !( UCSR1A & (1<<UDRE1)) );
    19a6:	eb e9       	ldi	r30, 0x9B	; 155
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	90 81       	ld	r25, Z
    19ac:	95 ff       	sbrs	r25, 5
    19ae:	fd cf       	rjmp	.-6      	; 0x19aa <uart_putc+0x4>
	/* Put data into buffer, sends the data */
	UDR1 = chr;
    19b0:	80 93 9c 00 	sts	0x009C, r24
}
    19b4:	08 95       	ret

000019b6 <uart_puts>:

void uart_puts(const char* s){
    19b6:	cf 93       	push	r28
    19b8:	df 93       	push	r29
    19ba:	ec 01       	movw	r28, r24
	while(*s != '\0'){
    19bc:	88 81       	ld	r24, Y
    19be:	88 23       	and	r24, r24
    19c0:	31 f0       	breq	.+12     	; 0x19ce <uart_puts+0x18>
	while ( !( UCSR1A & (1<<UDRE1)) );
	/* Put data into buffer, sends the data */
	UDR1 = chr;
}

void uart_puts(const char* s){
    19c2:	21 96       	adiw	r28, 0x01	; 1
	while(*s != '\0'){
		uart_putc(*s);
    19c4:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <uart_putc>
	/* Put data into buffer, sends the data */
	UDR1 = chr;
}

void uart_puts(const char* s){
	while(*s != '\0'){
    19c8:	89 91       	ld	r24, Y+
    19ca:	88 23       	and	r24, r24
    19cc:	d9 f7       	brne	.-10     	; 0x19c4 <uart_puts+0xe>
		uart_putc(*s);
		s++;
	}
	uart_putc('\0');
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <uart_putc>
}
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	08 95       	ret

000019da <uart_getc>:
unsigned char rc[32];
int rc_count=0;
void uart_getc(SMR* handle,unsigned char chr) {
	if (chr!='\0') {
    19da:	66 23       	and	r22, r22
    19dc:	71 f0       	breq	.+28     	; 0x19fa <uart_getc+0x20>
		rc[rc_count]=chr;
    19de:	80 91 20 02 	lds	r24, 0x0220
    19e2:	90 91 21 02 	lds	r25, 0x0221
    19e6:	fc 01       	movw	r30, r24
    19e8:	eb 57       	subi	r30, 0x7B	; 123
    19ea:	fd 4f       	sbci	r31, 0xFD	; 253
    19ec:	60 83       	st	Z, r22
		rc_count++;
    19ee:	01 96       	adiw	r24, 0x01	; 1
    19f0:	90 93 21 02 	sts	0x0221, r25
    19f4:	80 93 20 02 	sts	0x0220, r24
    19f8:	08 95       	ret
	} else {
		rc[rc_count]='\0';
    19fa:	65 e8       	ldi	r22, 0x85	; 133
    19fc:	72 e0       	ldi	r23, 0x02	; 2
    19fe:	e0 91 20 02 	lds	r30, 0x0220
    1a02:	f0 91 21 02 	lds	r31, 0x0221
    1a06:	e6 0f       	add	r30, r22
    1a08:	f7 1f       	adc	r31, r23
    1a0a:	10 82       	st	Z, r1
		sMRIfaceRF_set_data(handle,rc);
    1a0c:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <sMRIfaceRF_set_data>
		rc_count=0;
    1a10:	10 92 21 02 	sts	0x0221, r1
    1a14:	10 92 20 02 	sts	0x0220, r1
    1a18:	08 95       	ret

00001a1a <__udivmodqi4>:
    1a1a:	99 1b       	sub	r25, r25
    1a1c:	79 e0       	ldi	r23, 0x09	; 9
    1a1e:	04 c0       	rjmp	.+8      	; 0x1a28 <__udivmodqi4_ep>

00001a20 <__udivmodqi4_loop>:
    1a20:	99 1f       	adc	r25, r25
    1a22:	96 17       	cp	r25, r22
    1a24:	08 f0       	brcs	.+2      	; 0x1a28 <__udivmodqi4_ep>
    1a26:	96 1b       	sub	r25, r22

00001a28 <__udivmodqi4_ep>:
    1a28:	88 1f       	adc	r24, r24
    1a2a:	7a 95       	dec	r23
    1a2c:	c9 f7       	brne	.-14     	; 0x1a20 <__udivmodqi4_loop>
    1a2e:	80 95       	com	r24
    1a30:	08 95       	ret

00001a32 <__divmodhi4>:
    1a32:	97 fb       	bst	r25, 7
    1a34:	09 2e       	mov	r0, r25
    1a36:	07 26       	eor	r0, r23
    1a38:	0a d0       	rcall	.+20     	; 0x1a4e <__divmodhi4_neg1>
    1a3a:	77 fd       	sbrc	r23, 7
    1a3c:	04 d0       	rcall	.+8      	; 0x1a46 <__divmodhi4_neg2>
    1a3e:	0c d0       	rcall	.+24     	; 0x1a58 <__udivmodhi4>
    1a40:	06 d0       	rcall	.+12     	; 0x1a4e <__divmodhi4_neg1>
    1a42:	00 20       	and	r0, r0
    1a44:	1a f4       	brpl	.+6      	; 0x1a4c <__divmodhi4_exit>

00001a46 <__divmodhi4_neg2>:
    1a46:	70 95       	com	r23
    1a48:	61 95       	neg	r22
    1a4a:	7f 4f       	sbci	r23, 0xFF	; 255

00001a4c <__divmodhi4_exit>:
    1a4c:	08 95       	ret

00001a4e <__divmodhi4_neg1>:
    1a4e:	f6 f7       	brtc	.-4      	; 0x1a4c <__divmodhi4_exit>
    1a50:	90 95       	com	r25
    1a52:	81 95       	neg	r24
    1a54:	9f 4f       	sbci	r25, 0xFF	; 255
    1a56:	08 95       	ret

00001a58 <__udivmodhi4>:
    1a58:	aa 1b       	sub	r26, r26
    1a5a:	bb 1b       	sub	r27, r27
    1a5c:	51 e1       	ldi	r21, 0x11	; 17
    1a5e:	07 c0       	rjmp	.+14     	; 0x1a6e <__udivmodhi4_ep>

00001a60 <__udivmodhi4_loop>:
    1a60:	aa 1f       	adc	r26, r26
    1a62:	bb 1f       	adc	r27, r27
    1a64:	a6 17       	cp	r26, r22
    1a66:	b7 07       	cpc	r27, r23
    1a68:	10 f0       	brcs	.+4      	; 0x1a6e <__udivmodhi4_ep>
    1a6a:	a6 1b       	sub	r26, r22
    1a6c:	b7 0b       	sbc	r27, r23

00001a6e <__udivmodhi4_ep>:
    1a6e:	88 1f       	adc	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	5a 95       	dec	r21
    1a74:	a9 f7       	brne	.-22     	; 0x1a60 <__udivmodhi4_loop>
    1a76:	80 95       	com	r24
    1a78:	90 95       	com	r25
    1a7a:	bc 01       	movw	r22, r24
    1a7c:	cd 01       	movw	r24, r26
    1a7e:	08 95       	ret

00001a80 <malloc>:
    1a80:	cf 93       	push	r28
    1a82:	df 93       	push	r29
    1a84:	ac 01       	movw	r20, r24
    1a86:	82 30       	cpi	r24, 0x02	; 2
    1a88:	91 05       	cpc	r25, r1
    1a8a:	10 f4       	brcc	.+4      	; 0x1a90 <malloc+0x10>
    1a8c:	42 e0       	ldi	r20, 0x02	; 2
    1a8e:	50 e0       	ldi	r21, 0x00	; 0
    1a90:	e0 91 a9 02 	lds	r30, 0x02A9
    1a94:	f0 91 aa 02 	lds	r31, 0x02AA
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	a0 e0       	ldi	r26, 0x00	; 0
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	24 c0       	rjmp	.+72     	; 0x1aea <malloc+0x6a>
    1aa2:	80 81       	ld	r24, Z
    1aa4:	91 81       	ldd	r25, Z+1	; 0x01
    1aa6:	84 17       	cp	r24, r20
    1aa8:	95 07       	cpc	r25, r21
    1aaa:	d0 f0       	brcs	.+52     	; 0x1ae0 <malloc+0x60>
    1aac:	84 17       	cp	r24, r20
    1aae:	95 07       	cpc	r25, r21
    1ab0:	71 f4       	brne	.+28     	; 0x1ace <malloc+0x4e>
    1ab2:	82 81       	ldd	r24, Z+2	; 0x02
    1ab4:	93 81       	ldd	r25, Z+3	; 0x03
    1ab6:	10 97       	sbiw	r26, 0x00	; 0
    1ab8:	29 f0       	breq	.+10     	; 0x1ac4 <malloc+0x44>
    1aba:	13 96       	adiw	r26, 0x03	; 3
    1abc:	9c 93       	st	X, r25
    1abe:	8e 93       	st	-X, r24
    1ac0:	12 97       	sbiw	r26, 0x02	; 2
    1ac2:	2c c0       	rjmp	.+88     	; 0x1b1c <malloc+0x9c>
    1ac4:	90 93 aa 02 	sts	0x02AA, r25
    1ac8:	80 93 a9 02 	sts	0x02A9, r24
    1acc:	27 c0       	rjmp	.+78     	; 0x1b1c <malloc+0x9c>
    1ace:	21 15       	cp	r18, r1
    1ad0:	31 05       	cpc	r19, r1
    1ad2:	19 f0       	breq	.+6      	; 0x1ada <malloc+0x5a>
    1ad4:	82 17       	cp	r24, r18
    1ad6:	93 07       	cpc	r25, r19
    1ad8:	18 f4       	brcc	.+6      	; 0x1ae0 <malloc+0x60>
    1ada:	9c 01       	movw	r18, r24
    1adc:	bd 01       	movw	r22, r26
    1ade:	ef 01       	movw	r28, r30
    1ae0:	92 81       	ldd	r25, Z+2	; 0x02
    1ae2:	83 81       	ldd	r24, Z+3	; 0x03
    1ae4:	df 01       	movw	r26, r30
    1ae6:	e9 2f       	mov	r30, r25
    1ae8:	f8 2f       	mov	r31, r24
    1aea:	30 97       	sbiw	r30, 0x00	; 0
    1aec:	d1 f6       	brne	.-76     	; 0x1aa2 <malloc+0x22>
    1aee:	21 15       	cp	r18, r1
    1af0:	31 05       	cpc	r19, r1
    1af2:	f9 f0       	breq	.+62     	; 0x1b32 <malloc+0xb2>
    1af4:	c9 01       	movw	r24, r18
    1af6:	84 1b       	sub	r24, r20
    1af8:	95 0b       	sbc	r25, r21
    1afa:	84 30       	cpi	r24, 0x04	; 4
    1afc:	91 05       	cpc	r25, r1
    1afe:	80 f4       	brcc	.+32     	; 0x1b20 <malloc+0xa0>
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	9b 81       	ldd	r25, Y+3	; 0x03
    1b04:	61 15       	cp	r22, r1
    1b06:	71 05       	cpc	r23, r1
    1b08:	21 f0       	breq	.+8      	; 0x1b12 <malloc+0x92>
    1b0a:	fb 01       	movw	r30, r22
    1b0c:	93 83       	std	Z+3, r25	; 0x03
    1b0e:	82 83       	std	Z+2, r24	; 0x02
    1b10:	04 c0       	rjmp	.+8      	; 0x1b1a <malloc+0x9a>
    1b12:	90 93 aa 02 	sts	0x02AA, r25
    1b16:	80 93 a9 02 	sts	0x02A9, r24
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	32 96       	adiw	r30, 0x02	; 2
    1b1e:	42 c0       	rjmp	.+132    	; 0x1ba4 <malloc+0x124>
    1b20:	fe 01       	movw	r30, r28
    1b22:	e8 0f       	add	r30, r24
    1b24:	f9 1f       	adc	r31, r25
    1b26:	41 93       	st	Z+, r20
    1b28:	51 93       	st	Z+, r21
    1b2a:	02 97       	sbiw	r24, 0x02	; 2
    1b2c:	99 83       	std	Y+1, r25	; 0x01
    1b2e:	88 83       	st	Y, r24
    1b30:	39 c0       	rjmp	.+114    	; 0x1ba4 <malloc+0x124>
    1b32:	80 91 a7 02 	lds	r24, 0x02A7
    1b36:	90 91 a8 02 	lds	r25, 0x02A8
    1b3a:	00 97       	sbiw	r24, 0x00	; 0
    1b3c:	41 f4       	brne	.+16     	; 0x1b4e <malloc+0xce>
    1b3e:	80 91 1a 02 	lds	r24, 0x021A
    1b42:	90 91 1b 02 	lds	r25, 0x021B
    1b46:	90 93 a8 02 	sts	0x02A8, r25
    1b4a:	80 93 a7 02 	sts	0x02A7, r24
    1b4e:	20 91 18 02 	lds	r18, 0x0218
    1b52:	30 91 19 02 	lds	r19, 0x0219
    1b56:	21 15       	cp	r18, r1
    1b58:	31 05       	cpc	r19, r1
    1b5a:	41 f4       	brne	.+16     	; 0x1b6c <malloc+0xec>
    1b5c:	2d b7       	in	r18, 0x3d	; 61
    1b5e:	3e b7       	in	r19, 0x3e	; 62
    1b60:	80 91 1c 02 	lds	r24, 0x021C
    1b64:	90 91 1d 02 	lds	r25, 0x021D
    1b68:	28 1b       	sub	r18, r24
    1b6a:	39 0b       	sbc	r19, r25
    1b6c:	e0 91 a7 02 	lds	r30, 0x02A7
    1b70:	f0 91 a8 02 	lds	r31, 0x02A8
    1b74:	e2 17       	cp	r30, r18
    1b76:	f3 07       	cpc	r31, r19
    1b78:	98 f4       	brcc	.+38     	; 0x1ba0 <malloc+0x120>
    1b7a:	2e 1b       	sub	r18, r30
    1b7c:	3f 0b       	sbc	r19, r31
    1b7e:	24 17       	cp	r18, r20
    1b80:	35 07       	cpc	r19, r21
    1b82:	70 f0       	brcs	.+28     	; 0x1ba0 <malloc+0x120>
    1b84:	ca 01       	movw	r24, r20
    1b86:	02 96       	adiw	r24, 0x02	; 2
    1b88:	28 17       	cp	r18, r24
    1b8a:	39 07       	cpc	r19, r25
    1b8c:	48 f0       	brcs	.+18     	; 0x1ba0 <malloc+0x120>
    1b8e:	8e 0f       	add	r24, r30
    1b90:	9f 1f       	adc	r25, r31
    1b92:	90 93 a8 02 	sts	0x02A8, r25
    1b96:	80 93 a7 02 	sts	0x02A7, r24
    1b9a:	41 93       	st	Z+, r20
    1b9c:	51 93       	st	Z+, r21
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <malloc+0x124>
    1ba0:	e0 e0       	ldi	r30, 0x00	; 0
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	cf 01       	movw	r24, r30
    1ba6:	df 91       	pop	r29
    1ba8:	cf 91       	pop	r28
    1baa:	08 95       	ret

00001bac <free>:
    1bac:	0f 93       	push	r16
    1bae:	1f 93       	push	r17
    1bb0:	cf 93       	push	r28
    1bb2:	df 93       	push	r29
    1bb4:	9c 01       	movw	r18, r24
    1bb6:	00 97       	sbiw	r24, 0x00	; 0
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <free+0x10>
    1bba:	8c c0       	rjmp	.+280    	; 0x1cd4 <free+0x128>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	12 97       	sbiw	r26, 0x02	; 2
    1bc0:	13 96       	adiw	r26, 0x03	; 3
    1bc2:	1c 92       	st	X, r1
    1bc4:	1e 92       	st	-X, r1
    1bc6:	12 97       	sbiw	r26, 0x02	; 2
    1bc8:	60 91 a9 02 	lds	r22, 0x02A9
    1bcc:	70 91 aa 02 	lds	r23, 0x02AA
    1bd0:	61 15       	cp	r22, r1
    1bd2:	71 05       	cpc	r23, r1
    1bd4:	89 f4       	brne	.+34     	; 0x1bf8 <free+0x4c>
    1bd6:	8d 91       	ld	r24, X+
    1bd8:	9c 91       	ld	r25, X
    1bda:	11 97       	sbiw	r26, 0x01	; 1
    1bdc:	82 0f       	add	r24, r18
    1bde:	93 1f       	adc	r25, r19
    1be0:	20 91 a7 02 	lds	r18, 0x02A7
    1be4:	30 91 a8 02 	lds	r19, 0x02A8
    1be8:	28 17       	cp	r18, r24
    1bea:	39 07       	cpc	r19, r25
    1bec:	69 f5       	brne	.+90     	; 0x1c48 <free+0x9c>
    1bee:	b0 93 a8 02 	sts	0x02A8, r27
    1bf2:	a0 93 a7 02 	sts	0x02A7, r26
    1bf6:	6e c0       	rjmp	.+220    	; 0x1cd4 <free+0x128>
    1bf8:	fb 01       	movw	r30, r22
    1bfa:	40 e0       	ldi	r20, 0x00	; 0
    1bfc:	50 e0       	ldi	r21, 0x00	; 0
    1bfe:	01 c0       	rjmp	.+2      	; 0x1c02 <free+0x56>
    1c00:	fc 01       	movw	r30, r24
    1c02:	ea 17       	cp	r30, r26
    1c04:	fb 07       	cpc	r31, r27
    1c06:	30 f4       	brcc	.+12     	; 0x1c14 <free+0x68>
    1c08:	82 81       	ldd	r24, Z+2	; 0x02
    1c0a:	93 81       	ldd	r25, Z+3	; 0x03
    1c0c:	af 01       	movw	r20, r30
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	b9 f7       	brne	.-18     	; 0x1c00 <free+0x54>
    1c12:	1f c0       	rjmp	.+62     	; 0x1c52 <free+0xa6>
    1c14:	e9 01       	movw	r28, r18
    1c16:	22 97       	sbiw	r28, 0x02	; 2
    1c18:	fb 83       	std	Y+3, r31	; 0x03
    1c1a:	ea 83       	std	Y+2, r30	; 0x02
    1c1c:	08 81       	ld	r16, Y
    1c1e:	19 81       	ldd	r17, Y+1	; 0x01
    1c20:	c9 01       	movw	r24, r18
    1c22:	80 0f       	add	r24, r16
    1c24:	91 1f       	adc	r25, r17
    1c26:	8e 17       	cp	r24, r30
    1c28:	9f 07       	cpc	r25, r31
    1c2a:	59 f4       	brne	.+22     	; 0x1c42 <free+0x96>
    1c2c:	80 81       	ld	r24, Z
    1c2e:	91 81       	ldd	r25, Z+1	; 0x01
    1c30:	80 0f       	add	r24, r16
    1c32:	91 1f       	adc	r25, r17
    1c34:	02 96       	adiw	r24, 0x02	; 2
    1c36:	99 83       	std	Y+1, r25	; 0x01
    1c38:	88 83       	st	Y, r24
    1c3a:	82 81       	ldd	r24, Z+2	; 0x02
    1c3c:	93 81       	ldd	r25, Z+3	; 0x03
    1c3e:	9b 83       	std	Y+3, r25	; 0x03
    1c40:	8a 83       	std	Y+2, r24	; 0x02
    1c42:	41 15       	cp	r20, r1
    1c44:	51 05       	cpc	r21, r1
    1c46:	29 f4       	brne	.+10     	; 0x1c52 <free+0xa6>
    1c48:	b0 93 aa 02 	sts	0x02AA, r27
    1c4c:	a0 93 a9 02 	sts	0x02A9, r26
    1c50:	41 c0       	rjmp	.+130    	; 0x1cd4 <free+0x128>
    1c52:	fa 01       	movw	r30, r20
    1c54:	b3 83       	std	Z+3, r27	; 0x03
    1c56:	a2 83       	std	Z+2, r26	; 0x02
    1c58:	c1 91       	ld	r28, Z+
    1c5a:	d1 91       	ld	r29, Z+
    1c5c:	ec 0f       	add	r30, r28
    1c5e:	fd 1f       	adc	r31, r29
    1c60:	ae 17       	cp	r26, r30
    1c62:	bf 07       	cpc	r27, r31
    1c64:	81 f4       	brne	.+32     	; 0x1c86 <free+0xda>
    1c66:	f9 01       	movw	r30, r18
    1c68:	92 91       	ld	r25, -Z
    1c6a:	82 91       	ld	r24, -Z
    1c6c:	8c 0f       	add	r24, r28
    1c6e:	9d 1f       	adc	r25, r29
    1c70:	02 96       	adiw	r24, 0x02	; 2
    1c72:	da 01       	movw	r26, r20
    1c74:	11 96       	adiw	r26, 0x01	; 1
    1c76:	9c 93       	st	X, r25
    1c78:	8e 93       	st	-X, r24
    1c7a:	82 81       	ldd	r24, Z+2	; 0x02
    1c7c:	93 81       	ldd	r25, Z+3	; 0x03
    1c7e:	13 96       	adiw	r26, 0x03	; 3
    1c80:	9c 93       	st	X, r25
    1c82:	8e 93       	st	-X, r24
    1c84:	12 97       	sbiw	r26, 0x02	; 2
    1c86:	e0 e0       	ldi	r30, 0x00	; 0
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <free+0xe4>
    1c8c:	fb 01       	movw	r30, r22
    1c8e:	bc 01       	movw	r22, r24
    1c90:	db 01       	movw	r26, r22
    1c92:	12 96       	adiw	r26, 0x02	; 2
    1c94:	8d 91       	ld	r24, X+
    1c96:	9c 91       	ld	r25, X
    1c98:	13 97       	sbiw	r26, 0x03	; 3
    1c9a:	00 97       	sbiw	r24, 0x00	; 0
    1c9c:	b9 f7       	brne	.-18     	; 0x1c8c <free+0xe0>
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	02 96       	adiw	r24, 0x02	; 2
    1ca2:	2d 91       	ld	r18, X+
    1ca4:	3c 91       	ld	r19, X
    1ca6:	11 97       	sbiw	r26, 0x01	; 1
    1ca8:	82 0f       	add	r24, r18
    1caa:	93 1f       	adc	r25, r19
    1cac:	20 91 a7 02 	lds	r18, 0x02A7
    1cb0:	30 91 a8 02 	lds	r19, 0x02A8
    1cb4:	28 17       	cp	r18, r24
    1cb6:	39 07       	cpc	r19, r25
    1cb8:	69 f4       	brne	.+26     	; 0x1cd4 <free+0x128>
    1cba:	30 97       	sbiw	r30, 0x00	; 0
    1cbc:	29 f4       	brne	.+10     	; 0x1cc8 <free+0x11c>
    1cbe:	10 92 aa 02 	sts	0x02AA, r1
    1cc2:	10 92 a9 02 	sts	0x02A9, r1
    1cc6:	02 c0       	rjmp	.+4      	; 0x1ccc <free+0x120>
    1cc8:	13 82       	std	Z+3, r1	; 0x03
    1cca:	12 82       	std	Z+2, r1	; 0x02
    1ccc:	70 93 a8 02 	sts	0x02A8, r23
    1cd0:	60 93 a7 02 	sts	0x02A7, r22
    1cd4:	df 91       	pop	r29
    1cd6:	cf 91       	pop	r28
    1cd8:	1f 91       	pop	r17
    1cda:	0f 91       	pop	r16
    1cdc:	08 95       	ret

00001cde <sprintf>:
    1cde:	0f 93       	push	r16
    1ce0:	1f 93       	push	r17
    1ce2:	cf 93       	push	r28
    1ce4:	df 93       	push	r29
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
    1cea:	2e 97       	sbiw	r28, 0x0e	; 14
    1cec:	0f b6       	in	r0, 0x3f	; 63
    1cee:	f8 94       	cli
    1cf0:	de bf       	out	0x3e, r29	; 62
    1cf2:	0f be       	out	0x3f, r0	; 63
    1cf4:	cd bf       	out	0x3d, r28	; 61
    1cf6:	0d 89       	ldd	r16, Y+21	; 0x15
    1cf8:	1e 89       	ldd	r17, Y+22	; 0x16
    1cfa:	86 e0       	ldi	r24, 0x06	; 6
    1cfc:	8c 83       	std	Y+4, r24	; 0x04
    1cfe:	1a 83       	std	Y+2, r17	; 0x02
    1d00:	09 83       	std	Y+1, r16	; 0x01
    1d02:	8f ef       	ldi	r24, 0xFF	; 255
    1d04:	9f e7       	ldi	r25, 0x7F	; 127
    1d06:	9e 83       	std	Y+6, r25	; 0x06
    1d08:	8d 83       	std	Y+5, r24	; 0x05
    1d0a:	ae 01       	movw	r20, r28
    1d0c:	47 5e       	subi	r20, 0xE7	; 231
    1d0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d10:	ce 01       	movw	r24, r28
    1d12:	01 96       	adiw	r24, 0x01	; 1
    1d14:	6f 89       	ldd	r22, Y+23	; 0x17
    1d16:	78 8d       	ldd	r23, Y+24	; 0x18
    1d18:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <vfprintf>
    1d1c:	ef 81       	ldd	r30, Y+7	; 0x07
    1d1e:	f8 85       	ldd	r31, Y+8	; 0x08
    1d20:	e0 0f       	add	r30, r16
    1d22:	f1 1f       	adc	r31, r17
    1d24:	10 82       	st	Z, r1
    1d26:	2e 96       	adiw	r28, 0x0e	; 14
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	f8 94       	cli
    1d2c:	de bf       	out	0x3e, r29	; 62
    1d2e:	0f be       	out	0x3f, r0	; 63
    1d30:	cd bf       	out	0x3d, r28	; 61
    1d32:	df 91       	pop	r29
    1d34:	cf 91       	pop	r28
    1d36:	1f 91       	pop	r17
    1d38:	0f 91       	pop	r16
    1d3a:	08 95       	ret

00001d3c <vfprintf>:
    1d3c:	2f 92       	push	r2
    1d3e:	3f 92       	push	r3
    1d40:	4f 92       	push	r4
    1d42:	5f 92       	push	r5
    1d44:	6f 92       	push	r6
    1d46:	7f 92       	push	r7
    1d48:	8f 92       	push	r8
    1d4a:	9f 92       	push	r9
    1d4c:	af 92       	push	r10
    1d4e:	bf 92       	push	r11
    1d50:	cf 92       	push	r12
    1d52:	df 92       	push	r13
    1d54:	ef 92       	push	r14
    1d56:	ff 92       	push	r15
    1d58:	0f 93       	push	r16
    1d5a:	1f 93       	push	r17
    1d5c:	cf 93       	push	r28
    1d5e:	df 93       	push	r29
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
    1d64:	2d 97       	sbiw	r28, 0x0d	; 13
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	cd bf       	out	0x3d, r28	; 61
    1d70:	3c 01       	movw	r6, r24
    1d72:	7d 87       	std	Y+13, r23	; 0x0d
    1d74:	6c 87       	std	Y+12, r22	; 0x0c
    1d76:	5a 01       	movw	r10, r20
    1d78:	fc 01       	movw	r30, r24
    1d7a:	17 82       	std	Z+7, r1	; 0x07
    1d7c:	16 82       	std	Z+6, r1	; 0x06
    1d7e:	83 81       	ldd	r24, Z+3	; 0x03
    1d80:	81 ff       	sbrs	r24, 1
    1d82:	c8 c1       	rjmp	.+912    	; 0x2114 <vfprintf+0x3d8>
    1d84:	2e 01       	movw	r4, r28
    1d86:	08 94       	sec
    1d88:	41 1c       	adc	r4, r1
    1d8a:	51 1c       	adc	r5, r1
    1d8c:	f3 01       	movw	r30, r6
    1d8e:	93 81       	ldd	r25, Z+3	; 0x03
    1d90:	ec 85       	ldd	r30, Y+12	; 0x0c
    1d92:	fd 85       	ldd	r31, Y+13	; 0x0d
    1d94:	93 fd       	sbrc	r25, 3
    1d96:	85 91       	lpm	r24, Z+
    1d98:	93 ff       	sbrs	r25, 3
    1d9a:	81 91       	ld	r24, Z+
    1d9c:	fd 87       	std	Y+13, r31	; 0x0d
    1d9e:	ec 87       	std	Y+12, r30	; 0x0c
    1da0:	88 23       	and	r24, r24
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <vfprintf+0x6a>
    1da4:	b3 c1       	rjmp	.+870    	; 0x210c <vfprintf+0x3d0>
    1da6:	85 32       	cpi	r24, 0x25	; 37
    1da8:	41 f4       	brne	.+16     	; 0x1dba <vfprintf+0x7e>
    1daa:	93 fd       	sbrc	r25, 3
    1dac:	85 91       	lpm	r24, Z+
    1dae:	93 ff       	sbrs	r25, 3
    1db0:	81 91       	ld	r24, Z+
    1db2:	fd 87       	std	Y+13, r31	; 0x0d
    1db4:	ec 87       	std	Y+12, r30	; 0x0c
    1db6:	85 32       	cpi	r24, 0x25	; 37
    1db8:	29 f4       	brne	.+10     	; 0x1dc4 <vfprintf+0x88>
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	b3 01       	movw	r22, r6
    1dbe:	0e 94 bb 10 	call	0x2176	; 0x2176 <fputc>
    1dc2:	e4 cf       	rjmp	.-56     	; 0x1d8c <vfprintf+0x50>
    1dc4:	ff 24       	eor	r15, r15
    1dc6:	ee 24       	eor	r14, r14
    1dc8:	10 e0       	ldi	r17, 0x00	; 0
    1dca:	10 32       	cpi	r17, 0x20	; 32
    1dcc:	b0 f4       	brcc	.+44     	; 0x1dfa <vfprintf+0xbe>
    1dce:	8b 32       	cpi	r24, 0x2B	; 43
    1dd0:	69 f0       	breq	.+26     	; 0x1dec <vfprintf+0xb0>
    1dd2:	8c 32       	cpi	r24, 0x2C	; 44
    1dd4:	28 f4       	brcc	.+10     	; 0x1de0 <vfprintf+0xa4>
    1dd6:	80 32       	cpi	r24, 0x20	; 32
    1dd8:	51 f0       	breq	.+20     	; 0x1dee <vfprintf+0xb2>
    1dda:	83 32       	cpi	r24, 0x23	; 35
    1ddc:	71 f4       	brne	.+28     	; 0x1dfa <vfprintf+0xbe>
    1dde:	0b c0       	rjmp	.+22     	; 0x1df6 <vfprintf+0xba>
    1de0:	8d 32       	cpi	r24, 0x2D	; 45
    1de2:	39 f0       	breq	.+14     	; 0x1df2 <vfprintf+0xb6>
    1de4:	80 33       	cpi	r24, 0x30	; 48
    1de6:	49 f4       	brne	.+18     	; 0x1dfa <vfprintf+0xbe>
    1de8:	11 60       	ori	r17, 0x01	; 1
    1dea:	2c c0       	rjmp	.+88     	; 0x1e44 <vfprintf+0x108>
    1dec:	12 60       	ori	r17, 0x02	; 2
    1dee:	14 60       	ori	r17, 0x04	; 4
    1df0:	29 c0       	rjmp	.+82     	; 0x1e44 <vfprintf+0x108>
    1df2:	18 60       	ori	r17, 0x08	; 8
    1df4:	27 c0       	rjmp	.+78     	; 0x1e44 <vfprintf+0x108>
    1df6:	10 61       	ori	r17, 0x10	; 16
    1df8:	25 c0       	rjmp	.+74     	; 0x1e44 <vfprintf+0x108>
    1dfa:	17 fd       	sbrc	r17, 7
    1dfc:	2e c0       	rjmp	.+92     	; 0x1e5a <vfprintf+0x11e>
    1dfe:	28 2f       	mov	r18, r24
    1e00:	20 53       	subi	r18, 0x30	; 48
    1e02:	2a 30       	cpi	r18, 0x0A	; 10
    1e04:	98 f4       	brcc	.+38     	; 0x1e2c <vfprintf+0xf0>
    1e06:	16 ff       	sbrs	r17, 6
    1e08:	08 c0       	rjmp	.+16     	; 0x1e1a <vfprintf+0xde>
    1e0a:	8f 2d       	mov	r24, r15
    1e0c:	88 0f       	add	r24, r24
    1e0e:	f8 2e       	mov	r15, r24
    1e10:	ff 0c       	add	r15, r15
    1e12:	ff 0c       	add	r15, r15
    1e14:	f8 0e       	add	r15, r24
    1e16:	f2 0e       	add	r15, r18
    1e18:	15 c0       	rjmp	.+42     	; 0x1e44 <vfprintf+0x108>
    1e1a:	8e 2d       	mov	r24, r14
    1e1c:	88 0f       	add	r24, r24
    1e1e:	e8 2e       	mov	r14, r24
    1e20:	ee 0c       	add	r14, r14
    1e22:	ee 0c       	add	r14, r14
    1e24:	e8 0e       	add	r14, r24
    1e26:	e2 0e       	add	r14, r18
    1e28:	10 62       	ori	r17, 0x20	; 32
    1e2a:	0c c0       	rjmp	.+24     	; 0x1e44 <vfprintf+0x108>
    1e2c:	8e 32       	cpi	r24, 0x2E	; 46
    1e2e:	21 f4       	brne	.+8      	; 0x1e38 <vfprintf+0xfc>
    1e30:	16 fd       	sbrc	r17, 6
    1e32:	6c c1       	rjmp	.+728    	; 0x210c <vfprintf+0x3d0>
    1e34:	10 64       	ori	r17, 0x40	; 64
    1e36:	06 c0       	rjmp	.+12     	; 0x1e44 <vfprintf+0x108>
    1e38:	8c 36       	cpi	r24, 0x6C	; 108
    1e3a:	11 f4       	brne	.+4      	; 0x1e40 <vfprintf+0x104>
    1e3c:	10 68       	ori	r17, 0x80	; 128
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <vfprintf+0x108>
    1e40:	88 36       	cpi	r24, 0x68	; 104
    1e42:	59 f4       	brne	.+22     	; 0x1e5a <vfprintf+0x11e>
    1e44:	ec 85       	ldd	r30, Y+12	; 0x0c
    1e46:	fd 85       	ldd	r31, Y+13	; 0x0d
    1e48:	93 fd       	sbrc	r25, 3
    1e4a:	85 91       	lpm	r24, Z+
    1e4c:	93 ff       	sbrs	r25, 3
    1e4e:	81 91       	ld	r24, Z+
    1e50:	fd 87       	std	Y+13, r31	; 0x0d
    1e52:	ec 87       	std	Y+12, r30	; 0x0c
    1e54:	88 23       	and	r24, r24
    1e56:	09 f0       	breq	.+2      	; 0x1e5a <vfprintf+0x11e>
    1e58:	b8 cf       	rjmp	.-144    	; 0x1dca <vfprintf+0x8e>
    1e5a:	98 2f       	mov	r25, r24
    1e5c:	95 54       	subi	r25, 0x45	; 69
    1e5e:	93 30       	cpi	r25, 0x03	; 3
    1e60:	18 f0       	brcs	.+6      	; 0x1e68 <vfprintf+0x12c>
    1e62:	90 52       	subi	r25, 0x20	; 32
    1e64:	93 30       	cpi	r25, 0x03	; 3
    1e66:	38 f4       	brcc	.+14     	; 0x1e76 <vfprintf+0x13a>
    1e68:	24 e0       	ldi	r18, 0x04	; 4
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	a2 0e       	add	r10, r18
    1e6e:	b3 1e       	adc	r11, r19
    1e70:	3f e3       	ldi	r19, 0x3F	; 63
    1e72:	39 83       	std	Y+1, r19	; 0x01
    1e74:	0f c0       	rjmp	.+30     	; 0x1e94 <vfprintf+0x158>
    1e76:	83 36       	cpi	r24, 0x63	; 99
    1e78:	31 f0       	breq	.+12     	; 0x1e86 <vfprintf+0x14a>
    1e7a:	83 37       	cpi	r24, 0x73	; 115
    1e7c:	81 f0       	breq	.+32     	; 0x1e9e <vfprintf+0x162>
    1e7e:	83 35       	cpi	r24, 0x53	; 83
    1e80:	09 f0       	breq	.+2      	; 0x1e84 <vfprintf+0x148>
    1e82:	5a c0       	rjmp	.+180    	; 0x1f38 <vfprintf+0x1fc>
    1e84:	22 c0       	rjmp	.+68     	; 0x1eca <vfprintf+0x18e>
    1e86:	f5 01       	movw	r30, r10
    1e88:	80 81       	ld	r24, Z
    1e8a:	89 83       	std	Y+1, r24	; 0x01
    1e8c:	22 e0       	ldi	r18, 0x02	; 2
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	a2 0e       	add	r10, r18
    1e92:	b3 1e       	adc	r11, r19
    1e94:	21 e0       	ldi	r18, 0x01	; 1
    1e96:	c2 2e       	mov	r12, r18
    1e98:	d1 2c       	mov	r13, r1
    1e9a:	42 01       	movw	r8, r4
    1e9c:	14 c0       	rjmp	.+40     	; 0x1ec6 <vfprintf+0x18a>
    1e9e:	92 e0       	ldi	r25, 0x02	; 2
    1ea0:	29 2e       	mov	r2, r25
    1ea2:	31 2c       	mov	r3, r1
    1ea4:	2a 0c       	add	r2, r10
    1ea6:	3b 1c       	adc	r3, r11
    1ea8:	f5 01       	movw	r30, r10
    1eaa:	80 80       	ld	r8, Z
    1eac:	91 80       	ldd	r9, Z+1	; 0x01
    1eae:	16 ff       	sbrs	r17, 6
    1eb0:	03 c0       	rjmp	.+6      	; 0x1eb8 <vfprintf+0x17c>
    1eb2:	6f 2d       	mov	r22, r15
    1eb4:	70 e0       	ldi	r23, 0x00	; 0
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <vfprintf+0x180>
    1eb8:	6f ef       	ldi	r22, 0xFF	; 255
    1eba:	7f ef       	ldi	r23, 0xFF	; 255
    1ebc:	c4 01       	movw	r24, r8
    1ebe:	0e 94 b0 10 	call	0x2160	; 0x2160 <strnlen>
    1ec2:	6c 01       	movw	r12, r24
    1ec4:	51 01       	movw	r10, r2
    1ec6:	1f 77       	andi	r17, 0x7F	; 127
    1ec8:	15 c0       	rjmp	.+42     	; 0x1ef4 <vfprintf+0x1b8>
    1eca:	82 e0       	ldi	r24, 0x02	; 2
    1ecc:	28 2e       	mov	r2, r24
    1ece:	31 2c       	mov	r3, r1
    1ed0:	2a 0c       	add	r2, r10
    1ed2:	3b 1c       	adc	r3, r11
    1ed4:	f5 01       	movw	r30, r10
    1ed6:	80 80       	ld	r8, Z
    1ed8:	91 80       	ldd	r9, Z+1	; 0x01
    1eda:	16 ff       	sbrs	r17, 6
    1edc:	03 c0       	rjmp	.+6      	; 0x1ee4 <vfprintf+0x1a8>
    1ede:	6f 2d       	mov	r22, r15
    1ee0:	70 e0       	ldi	r23, 0x00	; 0
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <vfprintf+0x1ac>
    1ee4:	6f ef       	ldi	r22, 0xFF	; 255
    1ee6:	7f ef       	ldi	r23, 0xFF	; 255
    1ee8:	c4 01       	movw	r24, r8
    1eea:	0e 94 a5 10 	call	0x214a	; 0x214a <strnlen_P>
    1eee:	6c 01       	movw	r12, r24
    1ef0:	10 68       	ori	r17, 0x80	; 128
    1ef2:	51 01       	movw	r10, r2
    1ef4:	13 fd       	sbrc	r17, 3
    1ef6:	1c c0       	rjmp	.+56     	; 0x1f30 <vfprintf+0x1f4>
    1ef8:	06 c0       	rjmp	.+12     	; 0x1f06 <vfprintf+0x1ca>
    1efa:	80 e2       	ldi	r24, 0x20	; 32
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	b3 01       	movw	r22, r6
    1f00:	0e 94 bb 10 	call	0x2176	; 0x2176 <fputc>
    1f04:	ea 94       	dec	r14
    1f06:	8e 2d       	mov	r24, r14
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	c8 16       	cp	r12, r24
    1f0c:	d9 06       	cpc	r13, r25
    1f0e:	a8 f3       	brcs	.-22     	; 0x1efa <vfprintf+0x1be>
    1f10:	0f c0       	rjmp	.+30     	; 0x1f30 <vfprintf+0x1f4>
    1f12:	f4 01       	movw	r30, r8
    1f14:	17 fd       	sbrc	r17, 7
    1f16:	85 91       	lpm	r24, Z+
    1f18:	17 ff       	sbrs	r17, 7
    1f1a:	81 91       	ld	r24, Z+
    1f1c:	4f 01       	movw	r8, r30
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	b3 01       	movw	r22, r6
    1f22:	0e 94 bb 10 	call	0x2176	; 0x2176 <fputc>
    1f26:	e1 10       	cpse	r14, r1
    1f28:	ea 94       	dec	r14
    1f2a:	08 94       	sec
    1f2c:	c1 08       	sbc	r12, r1
    1f2e:	d1 08       	sbc	r13, r1
    1f30:	c1 14       	cp	r12, r1
    1f32:	d1 04       	cpc	r13, r1
    1f34:	71 f7       	brne	.-36     	; 0x1f12 <vfprintf+0x1d6>
    1f36:	e7 c0       	rjmp	.+462    	; 0x2106 <vfprintf+0x3ca>
    1f38:	84 36       	cpi	r24, 0x64	; 100
    1f3a:	11 f0       	breq	.+4      	; 0x1f40 <vfprintf+0x204>
    1f3c:	89 36       	cpi	r24, 0x69	; 105
    1f3e:	51 f5       	brne	.+84     	; 0x1f94 <vfprintf+0x258>
    1f40:	f5 01       	movw	r30, r10
    1f42:	17 ff       	sbrs	r17, 7
    1f44:	07 c0       	rjmp	.+14     	; 0x1f54 <vfprintf+0x218>
    1f46:	80 81       	ld	r24, Z
    1f48:	91 81       	ldd	r25, Z+1	; 0x01
    1f4a:	a2 81       	ldd	r26, Z+2	; 0x02
    1f4c:	b3 81       	ldd	r27, Z+3	; 0x03
    1f4e:	24 e0       	ldi	r18, 0x04	; 4
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	08 c0       	rjmp	.+16     	; 0x1f64 <vfprintf+0x228>
    1f54:	80 81       	ld	r24, Z
    1f56:	91 81       	ldd	r25, Z+1	; 0x01
    1f58:	aa 27       	eor	r26, r26
    1f5a:	97 fd       	sbrc	r25, 7
    1f5c:	a0 95       	com	r26
    1f5e:	ba 2f       	mov	r27, r26
    1f60:	22 e0       	ldi	r18, 0x02	; 2
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	a2 0e       	add	r10, r18
    1f66:	b3 1e       	adc	r11, r19
    1f68:	01 2f       	mov	r16, r17
    1f6a:	0f 76       	andi	r16, 0x6F	; 111
    1f6c:	b7 ff       	sbrs	r27, 7
    1f6e:	08 c0       	rjmp	.+16     	; 0x1f80 <vfprintf+0x244>
    1f70:	b0 95       	com	r27
    1f72:	a0 95       	com	r26
    1f74:	90 95       	com	r25
    1f76:	81 95       	neg	r24
    1f78:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7a:	af 4f       	sbci	r26, 0xFF	; 255
    1f7c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f7e:	00 68       	ori	r16, 0x80	; 128
    1f80:	bc 01       	movw	r22, r24
    1f82:	cd 01       	movw	r24, r26
    1f84:	a2 01       	movw	r20, r4
    1f86:	2a e0       	ldi	r18, 0x0A	; 10
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__ultoa_invert>
    1f8e:	d8 2e       	mov	r13, r24
    1f90:	d4 18       	sub	r13, r4
    1f92:	3f c0       	rjmp	.+126    	; 0x2012 <vfprintf+0x2d6>
    1f94:	85 37       	cpi	r24, 0x75	; 117
    1f96:	21 f4       	brne	.+8      	; 0x1fa0 <vfprintf+0x264>
    1f98:	1f 7e       	andi	r17, 0xEF	; 239
    1f9a:	2a e0       	ldi	r18, 0x0A	; 10
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	20 c0       	rjmp	.+64     	; 0x1fe0 <vfprintf+0x2a4>
    1fa0:	19 7f       	andi	r17, 0xF9	; 249
    1fa2:	8f 36       	cpi	r24, 0x6F	; 111
    1fa4:	a9 f0       	breq	.+42     	; 0x1fd0 <vfprintf+0x294>
    1fa6:	80 37       	cpi	r24, 0x70	; 112
    1fa8:	20 f4       	brcc	.+8      	; 0x1fb2 <vfprintf+0x276>
    1faa:	88 35       	cpi	r24, 0x58	; 88
    1fac:	09 f0       	breq	.+2      	; 0x1fb0 <vfprintf+0x274>
    1fae:	ae c0       	rjmp	.+348    	; 0x210c <vfprintf+0x3d0>
    1fb0:	0b c0       	rjmp	.+22     	; 0x1fc8 <vfprintf+0x28c>
    1fb2:	80 37       	cpi	r24, 0x70	; 112
    1fb4:	21 f0       	breq	.+8      	; 0x1fbe <vfprintf+0x282>
    1fb6:	88 37       	cpi	r24, 0x78	; 120
    1fb8:	09 f0       	breq	.+2      	; 0x1fbc <vfprintf+0x280>
    1fba:	a8 c0       	rjmp	.+336    	; 0x210c <vfprintf+0x3d0>
    1fbc:	01 c0       	rjmp	.+2      	; 0x1fc0 <vfprintf+0x284>
    1fbe:	10 61       	ori	r17, 0x10	; 16
    1fc0:	14 ff       	sbrs	r17, 4
    1fc2:	09 c0       	rjmp	.+18     	; 0x1fd6 <vfprintf+0x29a>
    1fc4:	14 60       	ori	r17, 0x04	; 4
    1fc6:	07 c0       	rjmp	.+14     	; 0x1fd6 <vfprintf+0x29a>
    1fc8:	14 ff       	sbrs	r17, 4
    1fca:	08 c0       	rjmp	.+16     	; 0x1fdc <vfprintf+0x2a0>
    1fcc:	16 60       	ori	r17, 0x06	; 6
    1fce:	06 c0       	rjmp	.+12     	; 0x1fdc <vfprintf+0x2a0>
    1fd0:	28 e0       	ldi	r18, 0x08	; 8
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	05 c0       	rjmp	.+10     	; 0x1fe0 <vfprintf+0x2a4>
    1fd6:	20 e1       	ldi	r18, 0x10	; 16
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	02 c0       	rjmp	.+4      	; 0x1fe0 <vfprintf+0x2a4>
    1fdc:	20 e1       	ldi	r18, 0x10	; 16
    1fde:	32 e0       	ldi	r19, 0x02	; 2
    1fe0:	f5 01       	movw	r30, r10
    1fe2:	17 ff       	sbrs	r17, 7
    1fe4:	07 c0       	rjmp	.+14     	; 0x1ff4 <vfprintf+0x2b8>
    1fe6:	60 81       	ld	r22, Z
    1fe8:	71 81       	ldd	r23, Z+1	; 0x01
    1fea:	82 81       	ldd	r24, Z+2	; 0x02
    1fec:	93 81       	ldd	r25, Z+3	; 0x03
    1fee:	44 e0       	ldi	r20, 0x04	; 4
    1ff0:	50 e0       	ldi	r21, 0x00	; 0
    1ff2:	06 c0       	rjmp	.+12     	; 0x2000 <vfprintf+0x2c4>
    1ff4:	60 81       	ld	r22, Z
    1ff6:	71 81       	ldd	r23, Z+1	; 0x01
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	42 e0       	ldi	r20, 0x02	; 2
    1ffe:	50 e0       	ldi	r21, 0x00	; 0
    2000:	a4 0e       	add	r10, r20
    2002:	b5 1e       	adc	r11, r21
    2004:	a2 01       	movw	r20, r4
    2006:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__ultoa_invert>
    200a:	d8 2e       	mov	r13, r24
    200c:	d4 18       	sub	r13, r4
    200e:	01 2f       	mov	r16, r17
    2010:	0f 77       	andi	r16, 0x7F	; 127
    2012:	06 ff       	sbrs	r16, 6
    2014:	09 c0       	rjmp	.+18     	; 0x2028 <vfprintf+0x2ec>
    2016:	0e 7f       	andi	r16, 0xFE	; 254
    2018:	df 14       	cp	r13, r15
    201a:	30 f4       	brcc	.+12     	; 0x2028 <vfprintf+0x2ec>
    201c:	04 ff       	sbrs	r16, 4
    201e:	06 c0       	rjmp	.+12     	; 0x202c <vfprintf+0x2f0>
    2020:	02 fd       	sbrc	r16, 2
    2022:	04 c0       	rjmp	.+8      	; 0x202c <vfprintf+0x2f0>
    2024:	0f 7e       	andi	r16, 0xEF	; 239
    2026:	02 c0       	rjmp	.+4      	; 0x202c <vfprintf+0x2f0>
    2028:	1d 2d       	mov	r17, r13
    202a:	01 c0       	rjmp	.+2      	; 0x202e <vfprintf+0x2f2>
    202c:	1f 2d       	mov	r17, r15
    202e:	80 2f       	mov	r24, r16
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	04 ff       	sbrs	r16, 4
    2034:	0c c0       	rjmp	.+24     	; 0x204e <vfprintf+0x312>
    2036:	fe 01       	movw	r30, r28
    2038:	ed 0d       	add	r30, r13
    203a:	f1 1d       	adc	r31, r1
    203c:	20 81       	ld	r18, Z
    203e:	20 33       	cpi	r18, 0x30	; 48
    2040:	11 f4       	brne	.+4      	; 0x2046 <vfprintf+0x30a>
    2042:	09 7e       	andi	r16, 0xE9	; 233
    2044:	09 c0       	rjmp	.+18     	; 0x2058 <vfprintf+0x31c>
    2046:	02 ff       	sbrs	r16, 2
    2048:	06 c0       	rjmp	.+12     	; 0x2056 <vfprintf+0x31a>
    204a:	1e 5f       	subi	r17, 0xFE	; 254
    204c:	05 c0       	rjmp	.+10     	; 0x2058 <vfprintf+0x31c>
    204e:	86 78       	andi	r24, 0x86	; 134
    2050:	90 70       	andi	r25, 0x00	; 0
    2052:	00 97       	sbiw	r24, 0x00	; 0
    2054:	09 f0       	breq	.+2      	; 0x2058 <vfprintf+0x31c>
    2056:	1f 5f       	subi	r17, 0xFF	; 255
    2058:	80 2e       	mov	r8, r16
    205a:	99 24       	eor	r9, r9
    205c:	03 fd       	sbrc	r16, 3
    205e:	12 c0       	rjmp	.+36     	; 0x2084 <vfprintf+0x348>
    2060:	00 ff       	sbrs	r16, 0
    2062:	0d c0       	rjmp	.+26     	; 0x207e <vfprintf+0x342>
    2064:	fd 2c       	mov	r15, r13
    2066:	1e 15       	cp	r17, r14
    2068:	50 f4       	brcc	.+20     	; 0x207e <vfprintf+0x342>
    206a:	fe 0c       	add	r15, r14
    206c:	f1 1a       	sub	r15, r17
    206e:	1e 2d       	mov	r17, r14
    2070:	06 c0       	rjmp	.+12     	; 0x207e <vfprintf+0x342>
    2072:	80 e2       	ldi	r24, 0x20	; 32
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	b3 01       	movw	r22, r6
    2078:	0e 94 bb 10 	call	0x2176	; 0x2176 <fputc>
    207c:	1f 5f       	subi	r17, 0xFF	; 255
    207e:	1e 15       	cp	r17, r14
    2080:	c0 f3       	brcs	.-16     	; 0x2072 <vfprintf+0x336>
    2082:	04 c0       	rjmp	.+8      	; 0x208c <vfprintf+0x350>
    2084:	1e 15       	cp	r17, r14
    2086:	10 f4       	brcc	.+4      	; 0x208c <vfprintf+0x350>
    2088:	e1 1a       	sub	r14, r17
    208a:	01 c0       	rjmp	.+2      	; 0x208e <vfprintf+0x352>
    208c:	ee 24       	eor	r14, r14
    208e:	84 fe       	sbrs	r8, 4
    2090:	0f c0       	rjmp	.+30     	; 0x20b0 <vfprintf+0x374>
    2092:	80 e3       	ldi	r24, 0x30	; 48
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	b3 01       	movw	r22, r6
    2098:	0e 94 bb 10 	call	0x2176	; 0x2176 <fputc>
    209c:	82 fe       	sbrs	r8, 2
    209e:	1f c0       	rjmp	.+62     	; 0x20de <vfprintf+0x3a2>
    20a0:	81 fe       	sbrs	r8, 1
    20a2:	03 c0       	rjmp	.+6      	; 0x20aa <vfprintf+0x36e>
    20a4:	88 e5       	ldi	r24, 0x58	; 88
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	10 c0       	rjmp	.+32     	; 0x20ca <vfprintf+0x38e>
    20aa:	88 e7       	ldi	r24, 0x78	; 120
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	0d c0       	rjmp	.+26     	; 0x20ca <vfprintf+0x38e>
    20b0:	c4 01       	movw	r24, r8
    20b2:	86 78       	andi	r24, 0x86	; 134
    20b4:	90 70       	andi	r25, 0x00	; 0
    20b6:	00 97       	sbiw	r24, 0x00	; 0
    20b8:	91 f0       	breq	.+36     	; 0x20de <vfprintf+0x3a2>
    20ba:	81 fc       	sbrc	r8, 1
    20bc:	02 c0       	rjmp	.+4      	; 0x20c2 <vfprintf+0x386>
    20be:	80 e2       	ldi	r24, 0x20	; 32
    20c0:	01 c0       	rjmp	.+2      	; 0x20c4 <vfprintf+0x388>
    20c2:	8b e2       	ldi	r24, 0x2B	; 43
    20c4:	07 fd       	sbrc	r16, 7
    20c6:	8d e2       	ldi	r24, 0x2D	; 45
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	b3 01       	movw	r22, r6
    20cc:	0e 94 bb 10 	call	0x2176	; 0x2176 <fputc>
    20d0:	06 c0       	rjmp	.+12     	; 0x20de <vfprintf+0x3a2>
    20d2:	80 e3       	ldi	r24, 0x30	; 48
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	b3 01       	movw	r22, r6
    20d8:	0e 94 bb 10 	call	0x2176	; 0x2176 <fputc>
    20dc:	fa 94       	dec	r15
    20de:	df 14       	cp	r13, r15
    20e0:	c0 f3       	brcs	.-16     	; 0x20d2 <vfprintf+0x396>
    20e2:	da 94       	dec	r13
    20e4:	f2 01       	movw	r30, r4
    20e6:	ed 0d       	add	r30, r13
    20e8:	f1 1d       	adc	r31, r1
    20ea:	80 81       	ld	r24, Z
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	b3 01       	movw	r22, r6
    20f0:	0e 94 bb 10 	call	0x2176	; 0x2176 <fputc>
    20f4:	dd 20       	and	r13, r13
    20f6:	a9 f7       	brne	.-22     	; 0x20e2 <vfprintf+0x3a6>
    20f8:	06 c0       	rjmp	.+12     	; 0x2106 <vfprintf+0x3ca>
    20fa:	80 e2       	ldi	r24, 0x20	; 32
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	b3 01       	movw	r22, r6
    2100:	0e 94 bb 10 	call	0x2176	; 0x2176 <fputc>
    2104:	ea 94       	dec	r14
    2106:	ee 20       	and	r14, r14
    2108:	c1 f7       	brne	.-16     	; 0x20fa <vfprintf+0x3be>
    210a:	40 ce       	rjmp	.-896    	; 0x1d8c <vfprintf+0x50>
    210c:	f3 01       	movw	r30, r6
    210e:	86 81       	ldd	r24, Z+6	; 0x06
    2110:	97 81       	ldd	r25, Z+7	; 0x07
    2112:	02 c0       	rjmp	.+4      	; 0x2118 <vfprintf+0x3dc>
    2114:	8f ef       	ldi	r24, 0xFF	; 255
    2116:	9f ef       	ldi	r25, 0xFF	; 255
    2118:	2d 96       	adiw	r28, 0x0d	; 13
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	f8 94       	cli
    211e:	de bf       	out	0x3e, r29	; 62
    2120:	0f be       	out	0x3f, r0	; 63
    2122:	cd bf       	out	0x3d, r28	; 61
    2124:	df 91       	pop	r29
    2126:	cf 91       	pop	r28
    2128:	1f 91       	pop	r17
    212a:	0f 91       	pop	r16
    212c:	ff 90       	pop	r15
    212e:	ef 90       	pop	r14
    2130:	df 90       	pop	r13
    2132:	cf 90       	pop	r12
    2134:	bf 90       	pop	r11
    2136:	af 90       	pop	r10
    2138:	9f 90       	pop	r9
    213a:	8f 90       	pop	r8
    213c:	7f 90       	pop	r7
    213e:	6f 90       	pop	r6
    2140:	5f 90       	pop	r5
    2142:	4f 90       	pop	r4
    2144:	3f 90       	pop	r3
    2146:	2f 90       	pop	r2
    2148:	08 95       	ret

0000214a <strnlen_P>:
    214a:	fc 01       	movw	r30, r24
    214c:	05 90       	lpm	r0, Z+
    214e:	61 50       	subi	r22, 0x01	; 1
    2150:	70 40       	sbci	r23, 0x00	; 0
    2152:	01 10       	cpse	r0, r1
    2154:	d8 f7       	brcc	.-10     	; 0x214c <strnlen_P+0x2>
    2156:	80 95       	com	r24
    2158:	90 95       	com	r25
    215a:	8e 0f       	add	r24, r30
    215c:	9f 1f       	adc	r25, r31
    215e:	08 95       	ret

00002160 <strnlen>:
    2160:	fc 01       	movw	r30, r24
    2162:	61 50       	subi	r22, 0x01	; 1
    2164:	70 40       	sbci	r23, 0x00	; 0
    2166:	01 90       	ld	r0, Z+
    2168:	01 10       	cpse	r0, r1
    216a:	d8 f7       	brcc	.-10     	; 0x2162 <strnlen+0x2>
    216c:	80 95       	com	r24
    216e:	90 95       	com	r25
    2170:	8e 0f       	add	r24, r30
    2172:	9f 1f       	adc	r25, r31
    2174:	08 95       	ret

00002176 <fputc>:
    2176:	0f 93       	push	r16
    2178:	1f 93       	push	r17
    217a:	cf 93       	push	r28
    217c:	df 93       	push	r29
    217e:	8c 01       	movw	r16, r24
    2180:	eb 01       	movw	r28, r22
    2182:	8b 81       	ldd	r24, Y+3	; 0x03
    2184:	81 ff       	sbrs	r24, 1
    2186:	1b c0       	rjmp	.+54     	; 0x21be <fputc+0x48>
    2188:	82 ff       	sbrs	r24, 2
    218a:	0d c0       	rjmp	.+26     	; 0x21a6 <fputc+0x30>
    218c:	2e 81       	ldd	r18, Y+6	; 0x06
    218e:	3f 81       	ldd	r19, Y+7	; 0x07
    2190:	8c 81       	ldd	r24, Y+4	; 0x04
    2192:	9d 81       	ldd	r25, Y+5	; 0x05
    2194:	28 17       	cp	r18, r24
    2196:	39 07       	cpc	r19, r25
    2198:	64 f4       	brge	.+24     	; 0x21b2 <fputc+0x3c>
    219a:	e8 81       	ld	r30, Y
    219c:	f9 81       	ldd	r31, Y+1	; 0x01
    219e:	01 93       	st	Z+, r16
    21a0:	f9 83       	std	Y+1, r31	; 0x01
    21a2:	e8 83       	st	Y, r30
    21a4:	06 c0       	rjmp	.+12     	; 0x21b2 <fputc+0x3c>
    21a6:	e8 85       	ldd	r30, Y+8	; 0x08
    21a8:	f9 85       	ldd	r31, Y+9	; 0x09
    21aa:	80 2f       	mov	r24, r16
    21ac:	09 95       	icall
    21ae:	00 97       	sbiw	r24, 0x00	; 0
    21b0:	31 f4       	brne	.+12     	; 0x21be <fputc+0x48>
    21b2:	8e 81       	ldd	r24, Y+6	; 0x06
    21b4:	9f 81       	ldd	r25, Y+7	; 0x07
    21b6:	01 96       	adiw	r24, 0x01	; 1
    21b8:	9f 83       	std	Y+7, r25	; 0x07
    21ba:	8e 83       	std	Y+6, r24	; 0x06
    21bc:	02 c0       	rjmp	.+4      	; 0x21c2 <fputc+0x4c>
    21be:	0f ef       	ldi	r16, 0xFF	; 255
    21c0:	1f ef       	ldi	r17, 0xFF	; 255
    21c2:	c8 01       	movw	r24, r16
    21c4:	df 91       	pop	r29
    21c6:	cf 91       	pop	r28
    21c8:	1f 91       	pop	r17
    21ca:	0f 91       	pop	r16
    21cc:	08 95       	ret

000021ce <__ultoa_invert>:
    21ce:	fa 01       	movw	r30, r20
    21d0:	aa 27       	eor	r26, r26
    21d2:	28 30       	cpi	r18, 0x08	; 8
    21d4:	51 f1       	breq	.+84     	; 0x222a <__ultoa_invert+0x5c>
    21d6:	20 31       	cpi	r18, 0x10	; 16
    21d8:	81 f1       	breq	.+96     	; 0x223a <__ultoa_invert+0x6c>
    21da:	e8 94       	clt
    21dc:	6f 93       	push	r22
    21de:	6e 7f       	andi	r22, 0xFE	; 254
    21e0:	6e 5f       	subi	r22, 0xFE	; 254
    21e2:	7f 4f       	sbci	r23, 0xFF	; 255
    21e4:	8f 4f       	sbci	r24, 0xFF	; 255
    21e6:	9f 4f       	sbci	r25, 0xFF	; 255
    21e8:	af 4f       	sbci	r26, 0xFF	; 255
    21ea:	b1 e0       	ldi	r27, 0x01	; 1
    21ec:	3e d0       	rcall	.+124    	; 0x226a <__ultoa_invert+0x9c>
    21ee:	b4 e0       	ldi	r27, 0x04	; 4
    21f0:	3c d0       	rcall	.+120    	; 0x226a <__ultoa_invert+0x9c>
    21f2:	67 0f       	add	r22, r23
    21f4:	78 1f       	adc	r23, r24
    21f6:	89 1f       	adc	r24, r25
    21f8:	9a 1f       	adc	r25, r26
    21fa:	a1 1d       	adc	r26, r1
    21fc:	68 0f       	add	r22, r24
    21fe:	79 1f       	adc	r23, r25
    2200:	8a 1f       	adc	r24, r26
    2202:	91 1d       	adc	r25, r1
    2204:	a1 1d       	adc	r26, r1
    2206:	6a 0f       	add	r22, r26
    2208:	71 1d       	adc	r23, r1
    220a:	81 1d       	adc	r24, r1
    220c:	91 1d       	adc	r25, r1
    220e:	a1 1d       	adc	r26, r1
    2210:	20 d0       	rcall	.+64     	; 0x2252 <__ultoa_invert+0x84>
    2212:	09 f4       	brne	.+2      	; 0x2216 <__ultoa_invert+0x48>
    2214:	68 94       	set
    2216:	3f 91       	pop	r19
    2218:	2a e0       	ldi	r18, 0x0A	; 10
    221a:	26 9f       	mul	r18, r22
    221c:	11 24       	eor	r1, r1
    221e:	30 19       	sub	r19, r0
    2220:	30 5d       	subi	r19, 0xD0	; 208
    2222:	31 93       	st	Z+, r19
    2224:	de f6       	brtc	.-74     	; 0x21dc <__ultoa_invert+0xe>
    2226:	cf 01       	movw	r24, r30
    2228:	08 95       	ret
    222a:	46 2f       	mov	r20, r22
    222c:	47 70       	andi	r20, 0x07	; 7
    222e:	40 5d       	subi	r20, 0xD0	; 208
    2230:	41 93       	st	Z+, r20
    2232:	b3 e0       	ldi	r27, 0x03	; 3
    2234:	0f d0       	rcall	.+30     	; 0x2254 <__ultoa_invert+0x86>
    2236:	c9 f7       	brne	.-14     	; 0x222a <__ultoa_invert+0x5c>
    2238:	f6 cf       	rjmp	.-20     	; 0x2226 <__ultoa_invert+0x58>
    223a:	46 2f       	mov	r20, r22
    223c:	4f 70       	andi	r20, 0x0F	; 15
    223e:	40 5d       	subi	r20, 0xD0	; 208
    2240:	4a 33       	cpi	r20, 0x3A	; 58
    2242:	18 f0       	brcs	.+6      	; 0x224a <__ultoa_invert+0x7c>
    2244:	49 5d       	subi	r20, 0xD9	; 217
    2246:	31 fd       	sbrc	r19, 1
    2248:	40 52       	subi	r20, 0x20	; 32
    224a:	41 93       	st	Z+, r20
    224c:	02 d0       	rcall	.+4      	; 0x2252 <__ultoa_invert+0x84>
    224e:	a9 f7       	brne	.-22     	; 0x223a <__ultoa_invert+0x6c>
    2250:	ea cf       	rjmp	.-44     	; 0x2226 <__ultoa_invert+0x58>
    2252:	b4 e0       	ldi	r27, 0x04	; 4
    2254:	a6 95       	lsr	r26
    2256:	97 95       	ror	r25
    2258:	87 95       	ror	r24
    225a:	77 95       	ror	r23
    225c:	67 95       	ror	r22
    225e:	ba 95       	dec	r27
    2260:	c9 f7       	brne	.-14     	; 0x2254 <__ultoa_invert+0x86>
    2262:	00 97       	sbiw	r24, 0x00	; 0
    2264:	61 05       	cpc	r22, r1
    2266:	71 05       	cpc	r23, r1
    2268:	08 95       	ret
    226a:	9b 01       	movw	r18, r22
    226c:	ac 01       	movw	r20, r24
    226e:	0a 2e       	mov	r0, r26
    2270:	06 94       	lsr	r0
    2272:	57 95       	ror	r21
    2274:	47 95       	ror	r20
    2276:	37 95       	ror	r19
    2278:	27 95       	ror	r18
    227a:	ba 95       	dec	r27
    227c:	c9 f7       	brne	.-14     	; 0x2270 <__ultoa_invert+0xa2>
    227e:	62 0f       	add	r22, r18
    2280:	73 1f       	adc	r23, r19
    2282:	84 1f       	adc	r24, r20
    2284:	95 1f       	adc	r25, r21
    2286:	a0 1d       	adc	r26, r0
    2288:	08 95       	ret

0000228a <_exit>:
    228a:	f8 94       	cli

0000228c <__stop_program>:
    228c:	ff cf       	rjmp	.-2      	; 0x228c <__stop_program>
