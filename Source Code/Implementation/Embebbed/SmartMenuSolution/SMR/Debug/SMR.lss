
SMR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800100  00001cf2  00001d86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cf2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000084  0080020c  0080020c  00001e92  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00001e94  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  00002b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000228  00000000  00000000  00002cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003676  00000000  00000000  00002ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f9c  00000000  00000000  0000656e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001549  00000000  00000000  0000750a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ab8  00000000  00000000  00008a54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f92  00000000  00000000  0000950c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024cd  00000000  00000000  0000a49e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000c96b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 2b 03 	jmp	0x656	; 0x656 <__vector_30>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 ef       	ldi	r30, 0xF2	; 242
      a0:	fc e1       	ldi	r31, 0x1C	; 28
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 30       	cpi	r26, 0x0C	; 12
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	ac e0       	ldi	r26, 0x0C	; 12
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 39       	cpi	r26, 0x90	; 144
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 ba 02 	call	0x574	; 0x574 <main>
      c6:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <LCDBusyLoop>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ce:	8f ec       	ldi	r24, 0xCF	; 207
      d0:	97 e0       	ldi	r25, 0x07	; 7
      d2:	01 97       	sbiw	r24, 0x01	; 1
      d4:	f1 f7       	brne	.-4      	; 0xd2 <LCDBusyLoop+0x4>
      d6:	00 c0       	rjmp	.+0      	; 0xd8 <LCDBusyLoop+0xa>
      d8:	00 00       	nop
}

void LCDBusyLoop()
{
	_delay_ms(8);
}
      da:	08 95       	ret

000000dc <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
      dc:	28 2f       	mov	r18, r24
      de:	22 95       	swap	r18
      e0:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
      e2:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
      e4:	66 23       	and	r22, r22
      e6:	11 f4       	brne	.+4      	; 0xec <LCDByte+0x10>
CLEAR_RS();
      e8:	d8 98       	cbi	0x1b, 0	; 27
      ea:	01 c0       	rjmp	.+2      	; 0xee <LCDByte+0x12>
else
SET_RS();
      ec:	d8 9a       	sbi	0x1b, 0	; 27

//_delay_ms(0.500);		//tAS

SET_E();
      ee:	d9 9a       	sbi	0x1b, 1	; 27

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
      f0:	9b b3       	in	r25, 0x1b	; 27
      f2:	22 0f       	add	r18, r18
      f4:	22 0f       	add	r18, r18
      f6:	93 7c       	andi	r25, 0xC3	; 195
      f8:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
      fa:	9b bb       	out	0x1b, r25	; 27

//_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
      fc:	d9 98       	cbi	0x1b, 1	; 27

//_delay_us(1);

//Send the lower nibble
SET_E();
      fe:	d9 9a       	sbi	0x1b, 1	; 27

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
     100:	9b b3       	in	r25, 0x1b	; 27
     102:	88 0f       	add	r24, r24
     104:	88 0f       	add	r24, r24
     106:	93 7c       	andi	r25, 0xC3	; 195
     108:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     10a:	8b bb       	out	0x1b, r24	; 27

//_delay_us(1);			//tEH

//SEND

CLEAR_E();
     10c:	d9 98       	cbi	0x1b, 1	; 27

//_delay_us(1);			//tEL

LCDBusyLoop();
     10e:	0e 94 67 00 	call	0xce	; 0xce <LCDBusyLoop>
}
     112:	08 95       	ret

00000114 <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
     114:	0f 93       	push	r16
     116:	1f 93       	push	r17
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	8c 01       	movw	r16, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     11e:	fc 01       	movw	r30, r24
     120:	80 81       	ld	r24, Z
     122:	88 23       	and	r24, r24
     124:	09 f1       	breq	.+66     	; 0x168 <LCDWriteString+0x54>
 {
 	//Custom Char Support
	if(*msg=='%')
     126:	85 32       	cpi	r24, 0x25	; 37
     128:	a9 f4       	brne	.+42     	; 0x154 <LCDWriteString+0x40>
	{
		msg++;
     12a:	e8 01       	movw	r28, r16
     12c:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
     12e:	f8 01       	movw	r30, r16
     130:	81 81       	ldd	r24, Z+1	; 0x01
     132:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
     134:	88 30       	cpi	r24, 0x08	; 8
     136:	20 f4       	brcc	.+8      	; 0x140 <LCDWriteString+0x2c>
		{
			LCDData(cc);
     138:	61 e0       	ldi	r22, 0x01	; 1
     13a:	0e 94 6e 00 	call	0xdc	; 0xdc <LCDByte>
     13e:	0e c0       	rjmp	.+28     	; 0x15c <LCDWriteString+0x48>
		}
		else
		{
			LCDData('%');
     140:	85 e2       	ldi	r24, 0x25	; 37
     142:	61 e0       	ldi	r22, 0x01	; 1
     144:	0e 94 6e 00 	call	0xdc	; 0xdc <LCDByte>
			LCDData(*msg);
     148:	f8 01       	movw	r30, r16
     14a:	81 81       	ldd	r24, Z+1	; 0x01
     14c:	61 e0       	ldi	r22, 0x01	; 1
     14e:	0e 94 6e 00 	call	0xdc	; 0xdc <LCDByte>
     152:	04 c0       	rjmp	.+8      	; 0x15c <LCDWriteString+0x48>
		}
	}
	else
	{
		LCDData(*msg);
     154:	61 e0       	ldi	r22, 0x01	; 1
     156:	0e 94 6e 00 	call	0xdc	; 0xdc <LCDByte>
     15a:	e8 01       	movw	r28, r16
	}
	msg++;
     15c:	8e 01       	movw	r16, r28
     15e:	0f 5f       	subi	r16, 0xFF	; 255
     160:	1f 4f       	sbci	r17, 0xFF	; 255
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     162:	89 81       	ldd	r24, Y+1	; 0x01
     164:	88 23       	and	r24, r24
     166:	f9 f6       	brne	.-66     	; 0x126 <LCDWriteString+0x12>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	1f 91       	pop	r17
     16e:	0f 91       	pop	r16
     170:	08 95       	ret

00000172 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     172:	ef 92       	push	r14
     174:	ff 92       	push	r15
     176:	0f 93       	push	r16
     178:	1f 93       	push	r17
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	00 d0       	rcall	.+0      	; 0x180 <LCDWriteInt+0xe>
     180:	00 d0       	rcall	.+0      	; 0x182 <LCDWriteInt+0x10>
     182:	0f 92       	push	r0
     184:	cd b7       	in	r28, 0x3d	; 61
     186:	de b7       	in	r29, 0x3e	; 62
     188:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     18a:	fe 01       	movw	r30, r28
     18c:	31 96       	adiw	r30, 0x01	; 1
     18e:	25 e0       	ldi	r18, 0x05	; 5
     190:	df 01       	movw	r26, r30
     192:	1d 92       	st	X+, r1
     194:	2a 95       	dec	r18
     196:	e9 f7       	brne	.-6      	; 0x192 <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
     198:	00 97       	sbiw	r24, 0x00	; 0
     19a:	61 f0       	breq	.+24     	; 0x1b4 <LCDWriteInt+0x42>
     19c:	fe 01       	movw	r30, r28
     19e:	36 96       	adiw	r30, 0x06	; 6
	{
	str[i]=val%10;
     1a0:	2a e0       	ldi	r18, 0x0A	; 10
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	b9 01       	movw	r22, r18
     1a6:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__divmodhi4>
     1aa:	82 93       	st	-Z, r24
	val=val/10;
     1ac:	86 2f       	mov	r24, r22
     1ae:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     1b0:	00 97       	sbiw	r24, 0x00	; 0
     1b2:	c1 f7       	brne	.-16     	; 0x1a4 <LCDWriteInt+0x32>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     1b4:	bf ef       	ldi	r27, 0xFF	; 255
     1b6:	eb 16       	cp	r14, r27
     1b8:	bf ef       	ldi	r27, 0xFF	; 255
     1ba:	fb 06       	cpc	r15, r27
     1bc:	69 f4       	brne	.+26     	; 0x1d8 <LCDWriteInt+0x66>
		while(str[j]==0) j++;
     1be:	29 81       	ldd	r18, Y+1	; 0x01
     1c0:	22 23       	and	r18, r18
     1c2:	79 f4       	brne	.+30     	; 0x1e2 <LCDWriteInt+0x70>
     1c4:	fe 01       	movw	r30, r28
     1c6:	32 96       	adiw	r30, 0x02	; 2
     1c8:	00 e0       	ldi	r16, 0x00	; 0
     1ca:	10 e0       	ldi	r17, 0x00	; 0
     1cc:	0f 5f       	subi	r16, 0xFF	; 255
     1ce:	1f 4f       	sbci	r17, 0xFF	; 255
     1d0:	21 91       	ld	r18, Z+
     1d2:	22 23       	and	r18, r18
     1d4:	d9 f3       	breq	.-10     	; 0x1cc <LCDWriteInt+0x5a>
     1d6:	07 c0       	rjmp	.+14     	; 0x1e6 <LCDWriteInt+0x74>
	else
		j=5-field_length;
     1d8:	05 e0       	ldi	r16, 0x05	; 5
     1da:	10 e0       	ldi	r17, 0x00	; 0
     1dc:	0e 19       	sub	r16, r14
     1de:	1f 09       	sbc	r17, r15
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <LCDWriteInt+0x74>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
     1e2:	00 e0       	ldi	r16, 0x00	; 0
     1e4:	10 e0       	ldi	r17, 0x00	; 0
	else
		j=5-field_length;

	if(val<0) LCDData('-');
     1e6:	99 23       	and	r25, r25
     1e8:	24 f4       	brge	.+8      	; 0x1f2 <LCDWriteInt+0x80>
     1ea:	8d e2       	ldi	r24, 0x2D	; 45
     1ec:	61 e0       	ldi	r22, 0x01	; 1
     1ee:	0e 94 6e 00 	call	0xdc	; 0xdc <LCDByte>
	for(i=j;i<5;i++)
     1f2:	05 30       	cpi	r16, 0x05	; 5
     1f4:	11 05       	cpc	r17, r1
     1f6:	bc f4       	brge	.+46     	; 0x226 <LCDWriteInt+0xb4>
	}
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
     1f8:	e1 e0       	ldi	r30, 0x01	; 1
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	ec 0f       	add	r30, r28
     1fe:	fd 1f       	adc	r31, r29
     200:	0e 0f       	add	r16, r30
     202:	1f 1f       	adc	r17, r31
     204:	0f 2e       	mov	r0, r31
     206:	f6 e0       	ldi	r31, 0x06	; 6
     208:	ef 2e       	mov	r14, r31
     20a:	ff 24       	eor	r15, r15
     20c:	f0 2d       	mov	r31, r0
     20e:	ec 0e       	add	r14, r28
     210:	fd 1e       	adc	r15, r29
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     212:	d8 01       	movw	r26, r16
     214:	8d 91       	ld	r24, X+
     216:	8d 01       	movw	r16, r26
     218:	80 5d       	subi	r24, 0xD0	; 208
     21a:	61 e0       	ldi	r22, 0x01	; 1
     21c:	0e 94 6e 00 	call	0xdc	; 0xdc <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     220:	0e 15       	cp	r16, r14
     222:	1f 05       	cpc	r17, r15
     224:	b1 f7       	brne	.-20     	; 0x212 <LCDWriteInt+0xa0>
	{
	LCDData(48+str[i]);
	}
}
     226:	0f 90       	pop	r0
     228:	0f 90       	pop	r0
     22a:	0f 90       	pop	r0
     22c:	0f 90       	pop	r0
     22e:	0f 90       	pop	r0
     230:	df 91       	pop	r29
     232:	cf 91       	pop	r28
     234:	1f 91       	pop	r17
     236:	0f 91       	pop	r16
     238:	ff 90       	pop	r15
     23a:	ef 90       	pop	r14
     23c:	08 95       	ret

0000023e <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
     23e:	84 31       	cpi	r24, 0x14	; 20
     240:	78 f4       	brcc	.+30     	; 0x260 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
     242:	62 30       	cpi	r22, 0x02	; 2
     244:	31 f0       	breq	.+12     	; 0x252 <LCDGotoXY+0x14>
     246:	63 30       	cpi	r22, 0x03	; 3
     248:	31 f0       	breq	.+12     	; 0x256 <LCDGotoXY+0x18>
     24a:	61 30       	cpi	r22, 0x01	; 1
     24c:	29 f4       	brne	.+10     	; 0x258 <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
     24e:	80 64       	ori	r24, 0x40	; 64
			break;
     250:	03 c0       	rjmp	.+6      	; 0x258 <LCDGotoXY+0x1a>
		case 2:
			x+=0x14;
     252:	8c 5e       	subi	r24, 0xEC	; 236
			break;
     254:	01 c0       	rjmp	.+2      	; 0x258 <LCDGotoXY+0x1a>
		case 3:
			x+=0x54;
     256:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
     258:	80 68       	ori	r24, 0x80	; 128
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	0e 94 6e 00 	call	0xdc	; 0xdc <LCDByte>
     260:	08 95       	ret

00000262 <LCDInit>:
{
	_delay_ms(8);
}

void LCDInit(uint8_t style)
{
     262:	0f 93       	push	r16
     264:	1f 93       	push	r17
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
     26a:	c8 2f       	mov	r28, r24
     26c:	8b e4       	ldi	r24, 0x4B	; 75
     26e:	9d e1       	ldi	r25, 0x1D	; 29
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <LCDInit+0xe>
     274:	00 c0       	rjmp	.+0      	; 0x276 <LCDInit+0x14>
     276:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
     278:	8a b3       	in	r24, 0x1a	; 26
     27a:	8c 63       	ori	r24, 0x3C	; 60
     27c:	8a bb       	out	0x1a, r24	; 26
	LCD_E_DDR|=(1<<LCD_E_POS);
     27e:	d1 9a       	sbi	0x1a, 1	; 26
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     280:	d0 9a       	sbi	0x1a, 0	; 26

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
     282:	8b b3       	in	r24, 0x1b	; 27
     284:	83 7c       	andi	r24, 0xC3	; 195
     286:	8b bb       	out	0x1b, r24	; 27
	CLEAR_E();
     288:	d9 98       	cbi	0x1b, 1	; 27
	CLEAR_RS();
     28a:	d8 98       	cbi	0x1b, 0	; 27

	//Set 4-bit mode
	//_delay_us(0.3);	//tAS

	SET_E();
     28c:	d9 9a       	sbi	0x1b, 1	; 27
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     28e:	db 9a       	sbi	0x1b, 3	; 27
	//_delay_us(1);
	CLEAR_E();
     290:	d9 98       	cbi	0x1b, 1	; 27
	//_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     292:	0e 94 67 00 	call	0xce	; 0xce <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     296:	8c 2f       	mov	r24, r28
     298:	8c 60       	ori	r24, 0x0C	; 12
     29a:	60 e0       	ldi	r22, 0x00	; 0
     29c:	0e 94 6e 00 	call	0xdc	; 0xdc <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     2a0:	88 e2       	ldi	r24, 0x28	; 40
     2a2:	60 e0       	ldi	r22, 0x00	; 0
     2a4:	0e 94 6e 00 	call	0xdc	; 0xdc <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
     2a8:	80 e4       	ldi	r24, 0x40	; 64
     2aa:	60 e0       	ldi	r22, 0x00	; 0
     2ac:	0e 94 6e 00 	call	0xdc	; 0xdc <LCDByte>
     2b0:	c0 e0       	ldi	r28, 0x00	; 0
     2b2:	d1 e0       	ldi	r29, 0x01	; 1
void LCDBusyLoop()
{
	_delay_ms(8);
}

void LCDInit(uint8_t style)
     2b4:	00 e4       	ldi	r16, 0x40	; 64
     2b6:	11 e0       	ldi	r17, 0x01	; 1
	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
     2b8:	89 91       	ld	r24, Y+
     2ba:	61 e0       	ldi	r22, 0x01	; 1
     2bc:	0e 94 6e 00 	call	0xdc	; 0xdc <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
     2c0:	c0 17       	cp	r28, r16
     2c2:	d1 07       	cpc	r29, r17
     2c4:	c9 f7       	brne	.-14     	; 0x2b8 <LCDInit+0x56>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	60 e0       	ldi	r22, 0x00	; 0
     2ca:	0e 94 1f 01 	call	0x23e	; 0x23e <LCDGotoXY>

}
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	1f 91       	pop	r17
     2d4:	0f 91       	pop	r16
     2d6:	08 95       	ret

000002d8 <sMRIfaceLCD_writeString>:

static uint8_t nrf24l01_addr5[NRF24L01_ADDRSIZE] = NRF24L01_ADDRP5;
static uint8_t nrf24l01_addrtx[NRF24L01_ADDRSIZE] = NRF24L01_ADDRTX;

void sMRIfaceLCD_writeString(const sc_string chr) {
	LCDWriteString(chr);
     2d8:	0e 94 8a 00 	call	0x114	; 0x114 <LCDWriteString>
}
     2dc:	08 95       	ret

000002de <sMRIfaceLCD_writeStringXY>:
void sMRIfaceLCD_writeStringXY(const sc_string chr, const sc_integer x, const sc_integer y) {
     2de:	0f 93       	push	r16
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
     2e4:	ec 01       	movw	r28, r24
     2e6:	84 2f       	mov	r24, r20
     2e8:	60 2f       	mov	r22, r16
	LCDWriteStringXY(x,y,chr);
     2ea:	0e 94 1f 01 	call	0x23e	; 0x23e <LCDGotoXY>
     2ee:	ce 01       	movw	r24, r28
     2f0:	0e 94 8a 00 	call	0x114	; 0x114 <LCDWriteString>
}
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	0f 91       	pop	r16
     2fa:	08 95       	ret

000002fc <sMRIfaceLCD_writeNumberXY>:
void sMRIfaceLCD_writeNumberXY(const sc_integer num, const sc_integer x, const sc_integer y, const sc_integer l) {
     2fc:	4f 92       	push	r4
     2fe:	5f 92       	push	r5
     300:	6f 92       	push	r6
     302:	7f 92       	push	r7
     304:	af 92       	push	r10
     306:	bf 92       	push	r11
     308:	cf 92       	push	r12
     30a:	df 92       	push	r13
     30c:	ef 92       	push	r14
     30e:	ff 92       	push	r15
     310:	2b 01       	movw	r4, r22
     312:	3c 01       	movw	r6, r24
     314:	82 2f       	mov	r24, r18
     316:	6e 2d       	mov	r22, r14
     318:	76 01       	movw	r14, r12
     31a:	65 01       	movw	r12, r10
	LCDWriteIntXY(x,y,num,l);
     31c:	0e 94 1f 01 	call	0x23e	; 0x23e <LCDGotoXY>
     320:	c2 01       	movw	r24, r4
     322:	b6 01       	movw	r22, r12
     324:	0e 94 b9 00 	call	0x172	; 0x172 <LCDWriteInt>
}
     328:	ff 90       	pop	r15
     32a:	ef 90       	pop	r14
     32c:	df 90       	pop	r13
     32e:	cf 90       	pop	r12
     330:	bf 90       	pop	r11
     332:	af 90       	pop	r10
     334:	7f 90       	pop	r7
     336:	6f 90       	pop	r6
     338:	5f 90       	pop	r5
     33a:	4f 90       	pop	r4
     33c:	08 95       	ret

0000033e <sMRIfaceLCD_clear>:
void sMRIfaceLCD_clear() {
	LCDClear();
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	60 e0       	ldi	r22, 0x00	; 0
     342:	0e 94 6e 00 	call	0xdc	; 0xdc <LCDByte>
     346:	82 e0       	ldi	r24, 0x02	; 2
     348:	60 e0       	ldi	r22, 0x00	; 0
     34a:	0e 94 6e 00 	call	0xdc	; 0xdc <LCDByte>
}
     34e:	08 95       	ret

00000350 <sMRIfaceLCD_init>:
void sMRIfaceLCD_init() {
	LCDInit(0);
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	0e 94 31 01 	call	0x262	; 0x262 <LCDInit>
}
     356:	08 95       	ret

00000358 <sMRIfaceRF_getData>:

sc_string sMRIfaceRF_getData() {
     358:	0f 93       	push	r16
     35a:	1f 93       	push	r17
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	0f 92       	push	r0
     362:	cd b7       	in	r28, 0x3d	; 61
     364:	de b7       	in	r29, 0x3e	; 62
	uint8_t pipe = 0;
     366:	19 82       	std	Y+1, r1	; 0x01
	if (nrf24l01_readready(&pipe)) {
     368:	ce 01       	movw	r24, r28
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	0e 94 cb 05 	call	0xb96	; 0xb96 <nrf24l01_readready>
     370:	88 23       	and	r24, r24
     372:	e9 f0       	breq	.+58     	; 0x3ae <sMRIfaceRF_getData+0x56>
		LCDWriteIntXY(0,1,pipe,1);
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	61 e0       	ldi	r22, 0x01	; 1
     378:	0e 94 1f 01 	call	0x23e	; 0x23e <LCDGotoXY>
     37c:	89 81       	ldd	r24, Y+1	; 0x01
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	61 e0       	ldi	r22, 0x01	; 1
     382:	70 e0       	ldi	r23, 0x00	; 0
     384:	0e 94 b9 00 	call	0x172	; 0x172 <LCDWriteInt>
		if (pipe==0) {
     388:	89 81       	ldd	r24, Y+1	; 0x01
     38a:	88 23       	and	r24, r24
     38c:	99 f4       	brne	.+38     	; 0x3b4 <sMRIfaceRF_getData+0x5c>
     38e:	e0 e1       	ldi	r30, 0x10	; 16
     390:	f2 e0       	ldi	r31, 0x02	; 2
}
void sMRIfaceLCD_init() {
	LCDInit(0);
}

sc_string sMRIfaceRF_getData() {
     392:	cf 01       	movw	r24, r30
     394:	09 96       	adiw	r24, 0x09	; 9
	uint8_t pipe = 0;
	if (nrf24l01_readready(&pipe)) {
		LCDWriteIntXY(0,1,pipe,1);
		if (pipe==0) {
			//clear buffer
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
     396:	11 92       	st	Z+, r1
     398:	e8 17       	cp	r30, r24
     39a:	f9 07       	cpc	r31, r25
     39c:	e1 f7       	brne	.-8      	; 0x396 <sMRIfaceRF_getData+0x3e>
			
			//read buffer
			nrf24l01_read(pipe,bufferin);
     39e:	00 e1       	ldi	r16, 0x10	; 16
     3a0:	12 e0       	ldi	r17, 0x02	; 2
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	b8 01       	movw	r22, r16
     3a6:	0e 94 dd 05 	call	0xbba	; 0xbba <nrf24l01_read>
			return bufferin;
     3aa:	c8 01       	movw	r24, r16
     3ac:	05 c0       	rjmp	.+10     	; 0x3b8 <sMRIfaceRF_getData+0x60>
		}
	}
	return "";
     3ae:	80 e4       	ldi	r24, 0x40	; 64
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <sMRIfaceRF_getData+0x60>
     3b4:	80 e4       	ldi	r24, 0x40	; 64
     3b6:	91 e0       	ldi	r25, 0x01	; 1
}
     3b8:	0f 90       	pop	r0
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	1f 91       	pop	r17
     3c0:	0f 91       	pop	r16
     3c2:	08 95       	ret

000003c4 <sMRIfaceRF_sendMsg>:

sc_boolean sMRIfaceRF_sendMsg(const sc_string msg) {
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	9c 01       	movw	r18, r24
     3ca:	cb e1       	ldi	r28, 0x1B	; 27
     3cc:	d2 e0       	ldi	r29, 0x02	; 2
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	90 e0       	ldi	r25, 0x00	; 0
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
		if (i<strlen(msg)) bufferout[i]=msg[i];
     3d2:	a2 2f       	mov	r26, r18
     3d4:	b3 2f       	mov	r27, r19
     3d6:	fd 01       	movw	r30, r26
     3d8:	01 90       	ld	r0, Z+
     3da:	00 20       	and	r0, r0
     3dc:	e9 f7       	brne	.-6      	; 0x3d8 <sMRIfaceRF_sendMsg+0x14>
     3de:	31 97       	sbiw	r30, 0x01	; 1
     3e0:	ea 1b       	sub	r30, r26
     3e2:	fb 0b       	sbc	r31, r27
     3e4:	8e 17       	cp	r24, r30
     3e6:	9f 07       	cpc	r25, r31
     3e8:	30 f4       	brcc	.+12     	; 0x3f6 <sMRIfaceRF_sendMsg+0x32>
		}
	}
	return "";
}

sc_boolean sMRIfaceRF_sendMsg(const sc_string msg) {
     3ea:	f9 01       	movw	r30, r18
     3ec:	e8 0f       	add	r30, r24
     3ee:	f9 1f       	adc	r31, r25
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
		if (i<strlen(msg)) bufferout[i]=msg[i];
     3f0:	40 81       	ld	r20, Z
     3f2:	48 83       	st	Y, r20
     3f4:	01 c0       	rjmp	.+2      	; 0x3f8 <sMRIfaceRF_sendMsg+0x34>
		else bufferout[i] = 0;
     3f6:	18 82       	st	Y, r1
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	21 96       	adiw	r28, 0x01	; 1
	return "";
}

sc_boolean sMRIfaceRF_sendMsg(const sc_string msg) {
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
     3fc:	89 30       	cpi	r24, 0x09	; 9
     3fe:	91 05       	cpc	r25, r1
     400:	41 f7       	brne	.-48     	; 0x3d2 <sMRIfaceRF_sendMsg+0xe>
		if (i<strlen(msg)) bufferout[i]=msg[i];
		else bufferout[i] = 0;
	}
	
	//Set Address for Data
	nrf24l01_settxaddr(nrf24l01_addrtx);
     402:	81 e4       	ldi	r24, 0x41	; 65
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	0e 94 3b 04 	call	0x876	; 0x876 <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     40a:	8b e1       	ldi	r24, 0x1B	; 27
     40c:	92 e0       	ldi	r25, 0x02	; 2
     40e:	0e 94 03 06 	call	0xc06	; 0xc06 <nrf24l01_write>
		}
	}
	return "";
}

sc_boolean sMRIfaceRF_sendMsg(const sc_string msg) {
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	81 30       	cpi	r24, 0x01	; 1
     416:	09 f0       	breq	.+2      	; 0x41a <sMRIfaceRF_sendMsg+0x56>
     418:	90 e0       	ldi	r25, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     41a:	89 2f       	mov	r24, r25
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	08 95       	ret

00000422 <sMRIfaceRF_sendCheck>:

sc_boolean sMRIfaceRF_sendCheck() {
     422:	eb e1       	ldi	r30, 0x1B	; 27
     424:	f2 e0       	ldi	r31, 0x02	; 2
     426:	cf 01       	movw	r24, r30
     428:	09 96       	adiw	r24, 0x09	; 9
	//set all buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferout[i] = 1;
     42a:	21 e0       	ldi	r18, 0x01	; 1
     42c:	21 93       	st	Z+, r18
     42e:	e8 17       	cp	r30, r24
     430:	f9 07       	cpc	r31, r25
     432:	e1 f7       	brne	.-8      	; 0x42c <sMRIfaceRF_sendCheck+0xa>
	//Set Address for check
	nrf24l01_settxaddr(nrf24l01_addr5);
     434:	86 e4       	ldi	r24, 0x46	; 70
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	0e 94 3b 04 	call	0x876	; 0x876 <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     43c:	8b e1       	ldi	r24, 0x1B	; 27
     43e:	92 e0       	ldi	r25, 0x02	; 2
     440:	0e 94 03 06 	call	0xc06	; 0xc06 <nrf24l01_write>
	} else {
		return false;
	}
}

sc_boolean sMRIfaceRF_sendCheck() {
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	81 30       	cpi	r24, 0x01	; 1
     448:	09 f0       	breq	.+2      	; 0x44c <sMRIfaceRF_sendCheck+0x2a>
     44a:	90 e0       	ldi	r25, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     44c:	89 2f       	mov	r24, r25
     44e:	08 95       	ret

00000450 <sMRIfaceRF_getCheck>:

sc_boolean sMRIfaceRF_getCheck() {
     450:	0f 93       	push	r16
     452:	1f 93       	push	r17
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
     458:	0f 92       	push	r0
     45a:	cd b7       	in	r28, 0x3d	; 61
     45c:	de b7       	in	r29, 0x3e	; 62
	uint8_t pipe = 0;
     45e:	19 82       	std	Y+1, r1	; 0x01
	if (nrf24l01_readready(&pipe)) {
     460:	ce 01       	movw	r24, r28
     462:	01 96       	adiw	r24, 0x01	; 1
     464:	0e 94 cb 05 	call	0xb96	; 0xb96 <nrf24l01_readready>
     468:	88 23       	and	r24, r24
     46a:	f1 f0       	breq	.+60     	; 0x4a8 <sMRIfaceRF_getCheck+0x58>
		if (pipe==5) {
     46c:	89 81       	ldd	r24, Y+1	; 0x01
     46e:	85 30       	cpi	r24, 0x05	; 5
     470:	e9 f4       	brne	.+58     	; 0x4ac <sMRIfaceRF_getCheck+0x5c>
     472:	e0 e1       	ldi	r30, 0x10	; 16
     474:	f2 e0       	ldi	r31, 0x02	; 2
	} else {
		return false;
	}
}

sc_boolean sMRIfaceRF_getCheck() {
     476:	8f 01       	movw	r16, r30
     478:	07 5f       	subi	r16, 0xF7	; 247
     47a:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t pipe = 0;
	if (nrf24l01_readready(&pipe)) {
		if (pipe==5) {
			//clear buffer
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
     47c:	11 92       	st	Z+, r1
     47e:	e0 17       	cp	r30, r16
     480:	f1 07       	cpc	r31, r17
     482:	e1 f7       	brne	.-8      	; 0x47c <sMRIfaceRF_getCheck+0x2c>
			
			//read buffer
			nrf24l01_read(pipe,bufferin);
     484:	85 e0       	ldi	r24, 0x05	; 5
     486:	60 e1       	ldi	r22, 0x10	; 16
     488:	72 e0       	ldi	r23, 0x02	; 2
     48a:	0e 94 dd 05 	call	0xbba	; 0xbba <nrf24l01_read>
			
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) if (bufferin[i]!=1) return false;
     48e:	80 91 10 02 	lds	r24, 0x0210
     492:	81 30       	cpi	r24, 0x01	; 1
     494:	69 f4       	brne	.+26     	; 0x4b0 <sMRIfaceRF_getCheck+0x60>
     496:	e1 e1       	ldi	r30, 0x11	; 17
     498:	f2 e0       	ldi	r31, 0x02	; 2
     49a:	81 91       	ld	r24, Z+
     49c:	81 30       	cpi	r24, 0x01	; 1
     49e:	51 f4       	brne	.+20     	; 0x4b4 <sMRIfaceRF_getCheck+0x64>
     4a0:	e0 17       	cp	r30, r16
     4a2:	f1 07       	cpc	r31, r17
     4a4:	d1 f7       	brne	.-12     	; 0x49a <sMRIfaceRF_getCheck+0x4a>
     4a6:	07 c0       	rjmp	.+14     	; 0x4b6 <sMRIfaceRF_getCheck+0x66>
			return true;
		}
	}
	return false;
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <sMRIfaceRF_getCheck+0x66>
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <sMRIfaceRF_getCheck+0x66>
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
			
			//read buffer
			nrf24l01_read(pipe,bufferin);
			
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) if (bufferin[i]!=1) return false;
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <sMRIfaceRF_getCheck+0x66>
     4b4:	80 e0       	ldi	r24, 0x00	; 0
			return true;
		}
	}
	return false;
}
     4b6:	0f 90       	pop	r0
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	08 95       	ret

000004c2 <sMRIfaceRF_sendData>:

sc_boolean sMRIfaceRF_sendData(const sc_integer cmd, const sc_integer id, const sc_integer dish_id, const sc_integer amount) {
     4c2:	af 92       	push	r10
     4c4:	ef 92       	push	r14
     4c6:	82 2f       	mov	r24, r18
     4c8:	eb e1       	ldi	r30, 0x1B	; 27
     4ca:	f2 e0       	ldi	r31, 0x02	; 2
     4cc:	af 01       	movw	r20, r30
     4ce:	47 5f       	subi	r20, 0xF7	; 247
     4d0:	5f 4f       	sbci	r21, 0xFF	; 255
	
	unsigned char num;
	unsigned char mod;
	//clear buffer
	for(uint8_t i=0; i<sizeof(bufferout); i++) bufferout[i] = 0;
     4d2:	11 92       	st	Z+, r1
     4d4:	e4 17       	cp	r30, r20
     4d6:	f5 07       	cpc	r31, r21
     4d8:	e1 f7       	brne	.-8      	; 0x4d2 <sMRIfaceRF_sendData+0x10>
	
	//Lenh cho data: 1-goi mon, 2-huy mon, 3-thanh toan, 4-goi boi ban
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
     4da:	60 5d       	subi	r22, 0xD0	; 208
     4dc:	60 93 1b 02 	sts	0x021B, r22
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     4e0:	3a e0       	ldi	r19, 0x0A	; 10
     4e2:	63 2f       	mov	r22, r19
     4e4:	0e 94 3f 0a 	call	0x147e	; 0x147e <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     4e8:	90 5d       	subi	r25, 0xD0	; 208
     4ea:	90 93 1d 02 	sts	0x021D, r25
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     4ee:	0e 94 3f 0a 	call	0x147e	; 0x147e <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     4f2:	90 5d       	subi	r25, 0xD0	; 208
     4f4:	90 93 1c 02 	sts	0x021C, r25
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
		num/=10;
     4f8:	8e 2d       	mov	r24, r14
     4fa:	0e 94 3f 0a 	call	0x147e	; 0x147e <__udivmodqi4>
		bufferout[3+i]=mod+'0';
     4fe:	90 5d       	subi	r25, 0xD0	; 208
     500:	90 93 20 02 	sts	0x0220, r25
	}
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
     504:	0e 94 3f 0a 	call	0x147e	; 0x147e <__udivmodqi4>
		num/=10;
		bufferout[3+i]=mod+'0';
     508:	90 5d       	subi	r25, 0xD0	; 208
     50a:	90 93 1f 02 	sts	0x021F, r25
	}
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
     50e:	0e 94 3f 0a 	call	0x147e	; 0x147e <__udivmodqi4>
		num/=10;
		bufferout[3+i]=mod+'0';
     512:	90 5d       	subi	r25, 0xD0	; 208
     514:	90 93 1e 02 	sts	0x021E, r25
	}
	
	//Chuyen doi so luong mon an
	num=amount;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     518:	8a 2d       	mov	r24, r10
     51a:	0e 94 3f 0a 	call	0x147e	; 0x147e <__udivmodqi4>
		num/=10;
		bufferout[6+i]=mod+'0';
     51e:	90 5d       	subi	r25, 0xD0	; 208
     520:	90 93 22 02 	sts	0x0222, r25
	}
	
	//Chuyen doi so luong mon an
	num=amount;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     524:	0e 94 3f 0a 	call	0x147e	; 0x147e <__udivmodqi4>
		num/=10;
		bufferout[6+i]=mod+'0';
     528:	90 5d       	subi	r25, 0xD0	; 208
     52a:	90 93 21 02 	sts	0x0221, r25
	}
	
	//Set Address for Data
	nrf24l01_settxaddr(nrf24l01_addrtx);
     52e:	81 e4       	ldi	r24, 0x41	; 65
     530:	91 e0       	ldi	r25, 0x01	; 1
     532:	0e 94 3b 04 	call	0x876	; 0x876 <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     536:	8b e1       	ldi	r24, 0x1B	; 27
     538:	92 e0       	ldi	r25, 0x02	; 2
     53a:	0e 94 03 06 	call	0xc06	; 0xc06 <nrf24l01_write>
		}
	}
	return false;
}

sc_boolean sMRIfaceRF_sendData(const sc_integer cmd, const sc_integer id, const sc_integer dish_id, const sc_integer amount) {
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	81 30       	cpi	r24, 0x01	; 1
     542:	09 f0       	breq	.+2      	; 0x546 <sMRIfaceRF_sendData+0x84>
     544:	90 e0       	ldi	r25, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     546:	89 2f       	mov	r24, r25
     548:	ef 90       	pop	r14
     54a:	af 90       	pop	r10
     54c:	08 95       	ret

0000054e <sMRIfaceUART_init>:

void sMRIfaceUART_init() {
	UART_Init(MYUBRR);
     54e:	83 e3       	ldi	r24, 0x33	; 51
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <UART_Init>
}
     556:	08 95       	ret

00000558 <sMRIfaceUART_sendData>:

void sMRIfaceUART_sendData(const sc_string msg) {
	msg[sizeof(msg)-1]=0;
     558:	fc 01       	movw	r30, r24
     55a:	11 82       	std	Z+1, r1	; 0x01
	uart_puts(msg);
     55c:	0e 94 0d 0a 	call	0x141a	; 0x141a <uart_puts>
}
     560:	08 95       	ret

00000562 <sMR_setTimer>:

void sMR_setTimer(const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
	TimerSet(evid,time_ms);
     562:	0e 94 24 09 	call	0x1248	; 0x1248 <TimerSet>
}
     566:	08 95       	ret

00000568 <sMR_unsetTimer>:
void sMR_unsetTimer(const sc_eventid evid) {
	TimerUnSet(evid);
     568:	0e 94 70 09 	call	0x12e0	; 0x12e0 <TimerUnSet>
}
     56c:	08 95       	ret

0000056e <sMRIfaceRF_init>:

void sMRIfaceRF_init() {
	nrf24l01_init();
     56e:	0e 94 59 06 	call	0xcb2	; 0xcb2 <nrf24l01_init>
}
     572:	08 95       	ret

00000574 <main>:

int main(void)
{
	uint8_t i;
	DDRC=0x0F;
     574:	8f e0       	ldi	r24, 0x0F	; 15
     576:	84 bb       	out	0x14, r24	; 20
	PORTC=0x0F;
     578:	85 bb       	out	0x15, r24	; 21
	l=malloc(sizeof(SMR*)) ;
     57a:	82 e0       	ldi	r24, 0x02	; 2
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <malloc>
     582:	80 93 19 02 	sts	0x0219, r24
     586:	90 93 1a 02 	sts	0x021A, r25
	TimerInit();
     58a:	0e 94 18 09 	call	0x1230	; 0x1230 <TimerInit>
	sMR_init(l);
     58e:	80 91 19 02 	lds	r24, 0x0219
     592:	90 91 1a 02 	lds	r25, 0x021A
     596:	0e 94 18 07 	call	0xe30	; 0xe30 <sMR_init>
	sMR_enter(l);
     59a:	80 91 19 02 	lds	r24, 0x0219
     59e:	90 91 1a 02 	lds	r25, 0x021A
     5a2:	0e 94 1e 07 	call	0xe3c	; 0xe3c <sMR_enter>
	
	//setup buffer
	for(i=0; i<sizeof(bufferout); i++)
	bufferout[i] = i+'a';
     5a6:	81 e6       	ldi	r24, 0x61	; 97
     5a8:	80 93 1b 02 	sts	0x021B, r24
     5ac:	82 e6       	ldi	r24, 0x62	; 98
     5ae:	80 93 1c 02 	sts	0x021C, r24
     5b2:	83 e6       	ldi	r24, 0x63	; 99
     5b4:	80 93 1d 02 	sts	0x021D, r24
     5b8:	84 e6       	ldi	r24, 0x64	; 100
     5ba:	80 93 1e 02 	sts	0x021E, r24
     5be:	85 e6       	ldi	r24, 0x65	; 101
     5c0:	80 93 1f 02 	sts	0x021F, r24
     5c4:	86 e6       	ldi	r24, 0x66	; 102
     5c6:	80 93 20 02 	sts	0x0220, r24
     5ca:	87 e6       	ldi	r24, 0x67	; 103
     5cc:	80 93 21 02 	sts	0x0221, r24
     5d0:	88 e6       	ldi	r24, 0x68	; 104
     5d2:	80 93 22 02 	sts	0x0222, r24
     5d6:	89 e6       	ldi	r24, 0x69	; 105
     5d8:	80 93 23 02 	sts	0x0223, r24
     5dc:	e0 e1       	ldi	r30, 0x10	; 16
     5de:	f2 e0       	ldi	r31, 0x02	; 2

void sMRIfaceRF_init() {
	nrf24l01_init();
}

int main(void)
     5e0:	cf 01       	movw	r24, r30
     5e2:	09 96       	adiw	r24, 0x09	; 9
	
	//setup buffer
	for(i=0; i<sizeof(bufferout); i++)
	bufferout[i] = i+'a';
	for(i=0; i<sizeof(bufferin); i++)
	bufferin[i] = 0;
     5e4:	11 92       	st	Z+, r1
	sMR_enter(l);
	
	//setup buffer
	for(i=0; i<sizeof(bufferout); i++)
	bufferout[i] = i+'a';
	for(i=0; i<sizeof(bufferin); i++)
     5e6:	e8 17       	cp	r30, r24
     5e8:	f9 07       	cpc	r31, r25
     5ea:	e1 f7       	brne	.-8      	; 0x5e4 <main+0x70>
	
	uint8_t down=0;
	
	while(1)
	{
		sMR_runCycle(l);
     5ec:	80 91 19 02 	lds	r24, 0x0219
     5f0:	90 91 1a 02 	lds	r25, 0x021A
     5f4:	0e 94 74 07 	call	0xee8	; 0xee8 <sMR_runCycle>
     5f8:	f9 cf       	rjmp	.-14     	; 0x5ec <main+0x78>

000005fa <__vector_16>:
	}
}

ISR (TIMER0_OVF_vect) {
     5fa:	1f 92       	push	r1
     5fc:	0f 92       	push	r0
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	0f 92       	push	r0
     602:	0b b6       	in	r0, 0x3b	; 59
     604:	0f 92       	push	r0
     606:	11 24       	eor	r1, r1
     608:	2f 93       	push	r18
     60a:	3f 93       	push	r19
     60c:	4f 93       	push	r20
     60e:	5f 93       	push	r21
     610:	6f 93       	push	r22
     612:	7f 93       	push	r23
     614:	8f 93       	push	r24
     616:	9f 93       	push	r25
     618:	af 93       	push	r26
     61a:	bf 93       	push	r27
     61c:	ef 93       	push	r30
     61e:	ff 93       	push	r31
	TCNT0=131;
     620:	83 e8       	ldi	r24, 0x83	; 131
     622:	82 bf       	out	0x32, r24	; 50
	TimerCheck(l);
     624:	80 91 19 02 	lds	r24, 0x0219
     628:	90 91 1a 02 	lds	r25, 0x021A
     62c:	0e 94 a5 09 	call	0x134a	; 0x134a <TimerCheck>
}
     630:	ff 91       	pop	r31
     632:	ef 91       	pop	r30
     634:	bf 91       	pop	r27
     636:	af 91       	pop	r26
     638:	9f 91       	pop	r25
     63a:	8f 91       	pop	r24
     63c:	7f 91       	pop	r23
     63e:	6f 91       	pop	r22
     640:	5f 91       	pop	r21
     642:	4f 91       	pop	r20
     644:	3f 91       	pop	r19
     646:	2f 91       	pop	r18
     648:	0f 90       	pop	r0
     64a:	0b be       	out	0x3b, r0	; 59
     64c:	0f 90       	pop	r0
     64e:	0f be       	out	0x3f, r0	; 63
     650:	0f 90       	pop	r0
     652:	1f 90       	pop	r1
     654:	18 95       	reti

00000656 <__vector_30>:


ISR (USART1__RX_vect) {
     656:	1f 92       	push	r1
     658:	0f 92       	push	r0
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	0f 92       	push	r0
     65e:	0b b6       	in	r0, 0x3b	; 59
     660:	0f 92       	push	r0
     662:	11 24       	eor	r1, r1
     664:	2f 93       	push	r18
     666:	3f 93       	push	r19
     668:	4f 93       	push	r20
     66a:	5f 93       	push	r21
     66c:	6f 93       	push	r22
     66e:	7f 93       	push	r23
     670:	8f 93       	push	r24
     672:	9f 93       	push	r25
     674:	af 93       	push	r26
     676:	bf 93       	push	r27
     678:	ef 93       	push	r30
     67a:	ff 93       	push	r31
	uart_getc(l,UDR1);
     67c:	60 91 9c 00 	lds	r22, 0x009C
     680:	80 91 19 02 	lds	r24, 0x0219
     684:	90 91 1a 02 	lds	r25, 0x021A
     688:	0e 94 1f 0a 	call	0x143e	; 0x143e <uart_getc>
     68c:	ff 91       	pop	r31
     68e:	ef 91       	pop	r30
     690:	bf 91       	pop	r27
     692:	af 91       	pop	r26
     694:	9f 91       	pop	r25
     696:	8f 91       	pop	r24
     698:	7f 91       	pop	r23
     69a:	6f 91       	pop	r22
     69c:	5f 91       	pop	r21
     69e:	4f 91       	pop	r20
     6a0:	3f 91       	pop	r19
     6a2:	2f 91       	pop	r18
     6a4:	0f 90       	pop	r0
     6a6:	0b be       	out	0x3b, r0	; 59
     6a8:	0f 90       	pop	r0
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	0f 90       	pop	r0
     6ae:	1f 90       	pop	r1
     6b0:	18 95       	reti

000006b2 <nrf24l01_readregister>:

/*
 * read one register
 */
uint8_t nrf24l01_readregister(uint8_t reg) {
	nrf24l01_CSNlo; //low CSN
     6b2:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     6b4:	8f 71       	andi	r24, 0x1F	; 31
     6b6:	0e 94 13 09 	call	0x1226	; 0x1226 <spi_writereadbyte>
    uint8_t result = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
     6ba:	8f ef       	ldi	r24, 0xFF	; 255
     6bc:	0e 94 13 09 	call	0x1226	; 0x1226 <spi_writereadbyte>
    nrf24l01_CSNhi; //high CSN
     6c0:	ae 9a       	sbi	0x15, 6	; 21
    return result;
}
     6c2:	08 95       	ret

000006c4 <nrf24l01_readregisters>:

/*
 * read many registers
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
     6c4:	ff 92       	push	r15
     6c6:	0f 93       	push	r16
     6c8:	1f 93       	push	r17
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	06 2f       	mov	r16, r22
     6d0:	f7 2e       	mov	r15, r23
     6d2:	14 2f       	mov	r17, r20
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
     6d4:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     6d6:	8f 71       	andi	r24, 0x1F	; 31
     6d8:	0e 94 13 09 	call	0x1226	; 0x1226 <spi_writereadbyte>
	for(i=0; i<len; i++)
     6dc:	11 23       	and	r17, r17
     6de:	51 f0       	breq	.+20     	; 0x6f4 <nrf24l01_readregisters+0x30>
     6e0:	c0 2f       	mov	r28, r16
     6e2:	df 2d       	mov	r29, r15
     6e4:	00 e0       	ldi	r16, 0x00	; 0
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
     6e6:	8f ef       	ldi	r24, 0xFF	; 255
     6e8:	0e 94 13 09 	call	0x1226	; 0x1226 <spi_writereadbyte>
     6ec:	89 93       	st	Y+, r24
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     6ee:	0f 5f       	subi	r16, 0xFF	; 255
     6f0:	01 17       	cp	r16, r17
     6f2:	c9 f7       	brne	.-14     	; 0x6e6 <nrf24l01_readregisters+0x22>
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
	nrf24l01_CSNhi; //high CSN
     6f4:	ae 9a       	sbi	0x15, 6	; 21
}
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	1f 91       	pop	r17
     6fc:	0f 91       	pop	r16
     6fe:	ff 90       	pop	r15
     700:	08 95       	ret

00000702 <nrf24l01_writeregister>:

/*
 * write one register
 */
void nrf24l01_writeregister(uint8_t reg, uint8_t value) {
     702:	cf 93       	push	r28
     704:	c6 2f       	mov	r28, r22
	nrf24l01_CSNlo; //low CSN
     706:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     708:	8f 71       	andi	r24, 0x1F	; 31
     70a:	80 62       	ori	r24, 0x20	; 32
     70c:	0e 94 13 09 	call	0x1226	; 0x1226 <spi_writereadbyte>
	spi_writereadbyte(value); //write register
     710:	8c 2f       	mov	r24, r28
     712:	0e 94 13 09 	call	0x1226	; 0x1226 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     716:	ae 9a       	sbi	0x15, 6	; 21
}
     718:	cf 91       	pop	r28
     71a:	08 95       	ret

0000071c <nrf24l01_writeregisters>:

/*
 * write many registers
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
     71c:	ff 92       	push	r15
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	06 2f       	mov	r16, r22
     728:	f7 2e       	mov	r15, r23
     72a:	14 2f       	mov	r17, r20
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
     72c:	ae 98       	cbi	0x15, 6	; 21
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     72e:	8f 71       	andi	r24, 0x1F	; 31
     730:	80 62       	ori	r24, 0x20	; 32
     732:	0e 94 13 09 	call	0x1226	; 0x1226 <spi_writereadbyte>
	for(i=0; i<len; i++)
     736:	11 23       	and	r17, r17
     738:	49 f0       	breq	.+18     	; 0x74c <nrf24l01_writeregisters+0x30>
     73a:	c0 2f       	mov	r28, r16
     73c:	df 2d       	mov	r29, r15
     73e:	00 e0       	ldi	r16, 0x00	; 0
		 spi_writereadbyte(value[i]); //write register
     740:	89 91       	ld	r24, Y+
     742:	0e 94 13 09 	call	0x1226	; 0x1226 <spi_writereadbyte>
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     746:	0f 5f       	subi	r16, 0xFF	; 255
     748:	01 17       	cp	r16, r17
     74a:	d1 f7       	brne	.-12     	; 0x740 <nrf24l01_writeregisters+0x24>
		 spi_writereadbyte(value[i]); //write register
	nrf24l01_CSNhi; //high CSN
     74c:	ae 9a       	sbi	0x15, 6	; 21
}
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	1f 91       	pop	r17
     754:	0f 91       	pop	r16
     756:	ff 90       	pop	r15
     758:	08 95       	ret

0000075a <nrf24l01_revaddress>:

/*
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	04 96       	adiw	r24, 0x04	; 4
     760:	db 01       	movw	r26, r22
     762:	a2 0f       	add	r26, r18
     764:	b3 1f       	adc	r27, r19
     766:	fc 01       	movw	r30, r24
     768:	e2 1b       	sub	r30, r18
     76a:	f3 0b       	sbc	r31, r19
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
     76c:	40 81       	ld	r20, Z
     76e:	4c 93       	st	X, r20
     770:	2f 5f       	subi	r18, 0xFF	; 255
     772:	3f 4f       	sbci	r19, 0xFF	; 255
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
     774:	25 30       	cpi	r18, 0x05	; 5
     776:	31 05       	cpc	r19, r1
     778:	99 f7       	brne	.-26     	; 0x760 <nrf24l01_revaddress+0x6>
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
}
     77a:	08 95       	ret

0000077c <nrf24l01_setrxaddr>:

/*
 * set rx address
 */
void nrf24l01_setrxaddr(uint8_t pipe, uint8_t *addr) {
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	00 d0       	rcall	.+0      	; 0x782 <nrf24l01_setrxaddr+0x6>
     782:	00 d0       	rcall	.+0      	; 0x784 <nrf24l01_setrxaddr+0x8>
     784:	0f 92       	push	r0
     786:	cd b7       	in	r28, 0x3d	; 61
     788:	de b7       	in	r29, 0x3e	; 62
	if(pipe == 0) {
     78a:	88 23       	and	r24, r24
     78c:	b1 f4       	brne	.+44     	; 0x7ba <nrf24l01_setrxaddr+0x3e>
		memcpy(&nrf24l01_addr0, addr, NRF24L01_ADDRSIZE); //cache address
     78e:	a5 ec       	ldi	r26, 0xC5	; 197
     790:	b1 e0       	ldi	r27, 0x01	; 1
     792:	fb 01       	movw	r30, r22
     794:	85 e0       	ldi	r24, 0x05	; 5
     796:	01 90       	ld	r0, Z+
     798:	0d 92       	st	X+, r0
     79a:	81 50       	subi	r24, 0x01	; 1
     79c:	e1 f7       	brne	.-8      	; 0x796 <nrf24l01_setrxaddr+0x1a>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     79e:	cb 01       	movw	r24, r22
     7a0:	be 01       	movw	r22, r28
     7a2:	6f 5f       	subi	r22, 0xFF	; 255
     7a4:	7f 4f       	sbci	r23, 0xFF	; 255
     7a6:	0e 94 ad 03 	call	0x75a	; 0x75a <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE);
     7aa:	8a e0       	ldi	r24, 0x0A	; 10
     7ac:	be 01       	movw	r22, r28
     7ae:	6f 5f       	subi	r22, 0xFF	; 255
     7b0:	7f 4f       	sbci	r23, 0xFF	; 255
     7b2:	45 e0       	ldi	r20, 0x05	; 5
     7b4:	0e 94 8e 03 	call	0x71c	; 0x71c <nrf24l01_writeregisters>
     7b8:	56 c0       	rjmp	.+172    	; 0x866 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 1) {
     7ba:	81 30       	cpi	r24, 0x01	; 1
     7bc:	b1 f4       	brne	.+44     	; 0x7ea <nrf24l01_setrxaddr+0x6e>
		memcpy(&nrf24l01_addr1, addr, NRF24L01_ADDRSIZE); //cache address
     7be:	aa ec       	ldi	r26, 0xCA	; 202
     7c0:	b1 e0       	ldi	r27, 0x01	; 1
     7c2:	fb 01       	movw	r30, r22
     7c4:	85 e0       	ldi	r24, 0x05	; 5
     7c6:	01 90       	ld	r0, Z+
     7c8:	0d 92       	st	X+, r0
     7ca:	81 50       	subi	r24, 0x01	; 1
     7cc:	e1 f7       	brne	.-8      	; 0x7c6 <nrf24l01_setrxaddr+0x4a>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     7ce:	cb 01       	movw	r24, r22
     7d0:	be 01       	movw	r22, r28
     7d2:	6f 5f       	subi	r22, 0xFF	; 255
     7d4:	7f 4f       	sbci	r23, 0xFF	; 255
     7d6:	0e 94 ad 03 	call	0x75a	; 0x75a <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P1, addrrev, NRF24L01_ADDRSIZE);
     7da:	8b e0       	ldi	r24, 0x0B	; 11
     7dc:	be 01       	movw	r22, r28
     7de:	6f 5f       	subi	r22, 0xFF	; 255
     7e0:	7f 4f       	sbci	r23, 0xFF	; 255
     7e2:	45 e0       	ldi	r20, 0x05	; 5
     7e4:	0e 94 8e 03 	call	0x71c	; 0x71c <nrf24l01_writeregisters>
     7e8:	3e c0       	rjmp	.+124    	; 0x866 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 2) {
     7ea:	82 30       	cpi	r24, 0x02	; 2
     7ec:	71 f4       	brne	.+28     	; 0x80a <nrf24l01_setrxaddr+0x8e>
		memcpy(&nrf24l01_addr2, addr, NRF24L01_ADDRSIZE); //cache address
     7ee:	af ec       	ldi	r26, 0xCF	; 207
     7f0:	b1 e0       	ldi	r27, 0x01	; 1
     7f2:	fb 01       	movw	r30, r22
     7f4:	85 e0       	ldi	r24, 0x05	; 5
     7f6:	01 90       	ld	r0, Z+
     7f8:	0d 92       	st	X+, r0
     7fa:	81 50       	subi	r24, 0x01	; 1
     7fc:	e1 f7       	brne	.-8      	; 0x7f6 <nrf24l01_setrxaddr+0x7a>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P2, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     7fe:	8c e0       	ldi	r24, 0x0C	; 12
     800:	fb 01       	movw	r30, r22
     802:	64 81       	ldd	r22, Z+4	; 0x04
     804:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
     808:	2e c0       	rjmp	.+92     	; 0x866 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 3) {
     80a:	83 30       	cpi	r24, 0x03	; 3
     80c:	71 f4       	brne	.+28     	; 0x82a <nrf24l01_setrxaddr+0xae>
		memcpy(&nrf24l01_addr3, addr, NRF24L01_ADDRSIZE); //cache address
     80e:	a4 ed       	ldi	r26, 0xD4	; 212
     810:	b1 e0       	ldi	r27, 0x01	; 1
     812:	fb 01       	movw	r30, r22
     814:	85 e0       	ldi	r24, 0x05	; 5
     816:	01 90       	ld	r0, Z+
     818:	0d 92       	st	X+, r0
     81a:	81 50       	subi	r24, 0x01	; 1
     81c:	e1 f7       	brne	.-8      	; 0x816 <nrf24l01_setrxaddr+0x9a>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P3, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     81e:	8d e0       	ldi	r24, 0x0D	; 13
     820:	fb 01       	movw	r30, r22
     822:	64 81       	ldd	r22, Z+4	; 0x04
     824:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
     828:	1e c0       	rjmp	.+60     	; 0x866 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 4) {
     82a:	84 30       	cpi	r24, 0x04	; 4
     82c:	71 f4       	brne	.+28     	; 0x84a <nrf24l01_setrxaddr+0xce>
		memcpy(&nrf24l01_addr4, addr, NRF24L01_ADDRSIZE); //cache address
     82e:	a9 ed       	ldi	r26, 0xD9	; 217
     830:	b1 e0       	ldi	r27, 0x01	; 1
     832:	fb 01       	movw	r30, r22
     834:	85 e0       	ldi	r24, 0x05	; 5
     836:	01 90       	ld	r0, Z+
     838:	0d 92       	st	X+, r0
     83a:	81 50       	subi	r24, 0x01	; 1
     83c:	e1 f7       	brne	.-8      	; 0x836 <nrf24l01_setrxaddr+0xba>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P4, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     83e:	8e e0       	ldi	r24, 0x0E	; 14
     840:	fb 01       	movw	r30, r22
     842:	64 81       	ldd	r22, Z+4	; 0x04
     844:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
     848:	0e c0       	rjmp	.+28     	; 0x866 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 5) {
     84a:	85 30       	cpi	r24, 0x05	; 5
     84c:	61 f4       	brne	.+24     	; 0x866 <nrf24l01_setrxaddr+0xea>
		memcpy(&nrf24l01_addr5, addr, NRF24L01_ADDRSIZE); //cache address
     84e:	ae ed       	ldi	r26, 0xDE	; 222
     850:	b1 e0       	ldi	r27, 0x01	; 1
     852:	fb 01       	movw	r30, r22
     854:	01 90       	ld	r0, Z+
     856:	0d 92       	st	X+, r0
     858:	81 50       	subi	r24, 0x01	; 1
     85a:	e1 f7       	brne	.-8      	; 0x854 <nrf24l01_setrxaddr+0xd8>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P5, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     85c:	8f e0       	ldi	r24, 0x0F	; 15
     85e:	fb 01       	movw	r30, r22
     860:	64 81       	ldd	r22, Z+4	; 0x04
     862:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
	}
}
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
     86a:	0f 90       	pop	r0
     86c:	0f 90       	pop	r0
     86e:	0f 90       	pop	r0
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	08 95       	ret

00000876 <nrf24l01_settxaddr>:

/*
 * set tx address
 */
void nrf24l01_settxaddr(uint8_t *addr) {
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	00 d0       	rcall	.+0      	; 0x87c <nrf24l01_settxaddr+0x6>
     87c:	00 d0       	rcall	.+0      	; 0x87e <nrf24l01_settxaddr+0x8>
     87e:	0f 92       	push	r0
     880:	cd b7       	in	r28, 0x3d	; 61
     882:	de b7       	in	r29, 0x3e	; 62
	memcpy(&nrf24l01_addrtx, addr, NRF24L01_ADDRSIZE); //cache address
     884:	a3 ee       	ldi	r26, 0xE3	; 227
     886:	b1 e0       	ldi	r27, 0x01	; 1
     888:	e8 2f       	mov	r30, r24
     88a:	f9 2f       	mov	r31, r25
     88c:	25 e0       	ldi	r18, 0x05	; 5
     88e:	01 90       	ld	r0, Z+
     890:	0d 92       	st	X+, r0
     892:	21 50       	subi	r18, 0x01	; 1
     894:	e1 f7       	brne	.-8      	; 0x88e <nrf24l01_settxaddr+0x18>
	uint8_t addrrev[NRF24L01_ADDRSIZE];
	nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     896:	be 01       	movw	r22, r28
     898:	6f 5f       	subi	r22, 0xFF	; 255
     89a:	7f 4f       	sbci	r23, 0xFF	; 255
     89c:	0e 94 ad 03 	call	0x75a	; 0x75a <nrf24l01_revaddress>
	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE); //set rx address for ack on pipe 0
     8a0:	8a e0       	ldi	r24, 0x0A	; 10
     8a2:	be 01       	movw	r22, r28
     8a4:	6f 5f       	subi	r22, 0xFF	; 255
     8a6:	7f 4f       	sbci	r23, 0xFF	; 255
     8a8:	45 e0       	ldi	r20, 0x05	; 5
     8aa:	0e 94 8e 03 	call	0x71c	; 0x71c <nrf24l01_writeregisters>
	nrf24l01_writeregisters(NRF24L01_REG_TX_ADDR, addrrev, NRF24L01_ADDRSIZE); //set tx address
     8ae:	80 e1       	ldi	r24, 0x10	; 16
     8b0:	be 01       	movw	r22, r28
     8b2:	6f 5f       	subi	r22, 0xFF	; 255
     8b4:	7f 4f       	sbci	r23, 0xFF	; 255
     8b6:	45 e0       	ldi	r20, 0x05	; 5
     8b8:	0e 94 8e 03 	call	0x71c	; 0x71c <nrf24l01_writeregisters>
}
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	08 95       	ret

000008cc <nrf24l01_flushRXfifo>:

/*
 * flush RX fifo
 */
void nrf24l01_flushRXfifo() {
	nrf24l01_CSNlo; //low CSN
     8cc:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_FLUSH_RX);
     8ce:	82 ee       	ldi	r24, 0xE2	; 226
     8d0:	0e 94 13 09 	call	0x1226	; 0x1226 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     8d4:	ae 9a       	sbi	0x15, 6	; 21
}
     8d6:	08 95       	ret

000008d8 <nrf24l01_flushTXfifo>:

/*
 * flush TX fifo
 */
void nrf24l01_flushTXfifo() {
	nrf24l01_CSNlo; //low CSN
     8d8:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_FLUSH_TX);
     8da:	81 ee       	ldi	r24, 0xE1	; 225
     8dc:	0e 94 13 09 	call	0x1226	; 0x1226 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     8e0:	ae 9a       	sbi	0x15, 6	; 21
}
     8e2:	08 95       	ret

000008e4 <nrf24l01_setRX>:

/*
 * set chip as RX
 */
void nrf24l01_setRX() {
	nrf24l01_setrxaddr(0, nrf24l01_addr0); //restore pipe 0 address
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	65 ec       	ldi	r22, 0xC5	; 197
     8e8:	71 e0       	ldi	r23, 0x01	; 1
     8ea:	0e 94 be 03 	call	0x77c	; 0x77c <nrf24l01_setrxaddr>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PRIM_RX)); //prx mode
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	0e 94 59 03 	call	0x6b2	; 0x6b2 <nrf24l01_readregister>
     8f4:	68 2f       	mov	r22, r24
     8f6:	61 60       	ori	r22, 0x01	; 1
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	0e 94 59 03 	call	0x6b2	; 0x6b2 <nrf24l01_readregister>
     904:	68 2f       	mov	r22, r24
     906:	62 60       	ori	r22, 0x02	; 2
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     90e:	87 e0       	ldi	r24, 0x07	; 7
     910:	60 e7       	ldi	r22, 0x70	; 112
     912:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
	nrf24l01_flushRXfifo(); //flush rx fifo
     916:	0e 94 66 04 	call	0x8cc	; 0x8cc <nrf24l01_flushRXfifo>
	nrf24l01_flushTXfifo(); //flush tx fifo
     91a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <nrf24l01_flushTXfifo>
	nrf24l01_CEhi; //start listening
     91e:	af 9a       	sbi	0x15, 7	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     920:	82 e3       	ldi	r24, 0x32	; 50
     922:	8a 95       	dec	r24
     924:	f1 f7       	brne	.-4      	; 0x922 <nrf24l01_setRX+0x3e>
	_delay_us(150); //wait for the radio to power up
}
     926:	08 95       	ret

00000928 <nrf24l01_setTX>:

/*
 * set chip as TX
 */
void nrf24l01_setTX() {
	nrf24l01_CElo; //stop listening
     928:	af 98       	cbi	0x15, 7	; 21
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PRIM_RX)); //ptx mode
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	0e 94 59 03 	call	0x6b2	; 0x6b2 <nrf24l01_readregister>
     930:	68 2f       	mov	r22, r24
     932:	6e 7f       	andi	r22, 0xFE	; 254
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	0e 94 59 03 	call	0x6b2	; 0x6b2 <nrf24l01_readregister>
     940:	68 2f       	mov	r22, r24
     942:	62 60       	ori	r22, 0x02	; 2
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     94a:	87 e0       	ldi	r24, 0x07	; 7
     94c:	60 e7       	ldi	r22, 0x70	; 112
     94e:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
	nrf24l01_flushTXfifo(); //flush tx fifo
     952:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <nrf24l01_flushTXfifo>
     956:	82 e3       	ldi	r24, 0x32	; 50
     958:	8a 95       	dec	r24
     95a:	f1 f7       	brne	.-4      	; 0x958 <nrf24l01_setTX+0x30>
	_delay_us(150); //wait for the radio to power up
}
     95c:	08 95       	ret

0000095e <nrf24l01_getstatus>:
/*
 * get status register
 */
uint8_t nrf24l01_getstatus() {
	uint8_t status = 0;
	nrf24l01_CSNlo; //low CSN
     95e:	ae 98       	cbi	0x15, 6	; 21
	status = spi_writereadbyte(NRF24L01_CMD_NOP); //get status, send NOP request
     960:	8f ef       	ldi	r24, 0xFF	; 255
     962:	0e 94 13 09 	call	0x1226	; 0x1226 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     966:	ae 9a       	sbi	0x15, 6	; 21
	return status;
}
     968:	08 95       	ret

0000096a <nrf24l01_printinfo>:

#if NRF24L01_PRINTENABLE == 1
/*
 * print info
 */
void nrf24l01_printinfo(void(*prints)(const char *), void(*printc)(unsigned char data)) {
     96a:	ef 92       	push	r14
     96c:	ff 92       	push	r15
     96e:	0f 93       	push	r16
     970:	1f 93       	push	r17
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	cd b7       	in	r28, 0x3d	; 61
     978:	de b7       	in	r29, 0x3e	; 62
     97a:	c4 56       	subi	r28, 0x64	; 100
     97c:	d0 40       	sbci	r29, 0x00	; 0
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	f8 94       	cli
     982:	de bf       	out	0x3e, r29	; 62
     984:	0f be       	out	0x3f, r0	; 63
     986:	cd bf       	out	0x3d, r28	; 61
     988:	7c 01       	movw	r14, r24
	char buff[100];
	prints("info\r\n");
     98a:	8b e4       	ldi	r24, 0x4B	; 75
     98c:	91 e0       	ldi	r25, 0x01	; 1
     98e:	f7 01       	movw	r30, r14
     990:	09 95       	icall
	sprintf(buff,"STATUS: %02X\r\n", nrf24l01_getstatus()); prints(buff);
     992:	0e 94 af 04 	call	0x95e	; 0x95e <nrf24l01_getstatus>
     996:	00 d0       	rcall	.+0      	; 0x998 <nrf24l01_printinfo+0x2e>
     998:	00 d0       	rcall	.+0      	; 0x99a <nrf24l01_printinfo+0x30>
     99a:	00 d0       	rcall	.+0      	; 0x99c <nrf24l01_printinfo+0x32>
     99c:	ed b7       	in	r30, 0x3d	; 61
     99e:	fe b7       	in	r31, 0x3e	; 62
     9a0:	31 96       	adiw	r30, 0x01	; 1
     9a2:	8e 01       	movw	r16, r28
     9a4:	0f 5f       	subi	r16, 0xFF	; 255
     9a6:	1f 4f       	sbci	r17, 0xFF	; 255
     9a8:	ad b7       	in	r26, 0x3d	; 61
     9aa:	be b7       	in	r27, 0x3e	; 62
     9ac:	12 96       	adiw	r26, 0x02	; 2
     9ae:	1c 93       	st	X, r17
     9b0:	0e 93       	st	-X, r16
     9b2:	11 97       	sbiw	r26, 0x01	; 1
     9b4:	22 e5       	ldi	r18, 0x52	; 82
     9b6:	31 e0       	ldi	r19, 0x01	; 1
     9b8:	33 83       	std	Z+3, r19	; 0x03
     9ba:	22 83       	std	Z+2, r18	; 0x02
     9bc:	84 83       	std	Z+4, r24	; 0x04
     9be:	15 82       	std	Z+5, r1	; 0x05
     9c0:	0e 94 a1 0b 	call	0x1742	; 0x1742 <sprintf>
     9c4:	8d b7       	in	r24, 0x3d	; 61
     9c6:	9e b7       	in	r25, 0x3e	; 62
     9c8:	06 96       	adiw	r24, 0x06	; 6
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	f8 94       	cli
     9ce:	9e bf       	out	0x3e, r25	; 62
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	8d bf       	out	0x3d, r24	; 61
     9d4:	c8 01       	movw	r24, r16
     9d6:	f7 01       	movw	r30, r14
     9d8:	09 95       	icall
	sprintf(buff,"CONFIG: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_CONFIG)); prints(buff);
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	0e 94 59 03 	call	0x6b2	; 0x6b2 <nrf24l01_readregister>
     9e0:	00 d0       	rcall	.+0      	; 0x9e2 <nrf24l01_printinfo+0x78>
     9e2:	00 d0       	rcall	.+0      	; 0x9e4 <nrf24l01_printinfo+0x7a>
     9e4:	00 d0       	rcall	.+0      	; 0x9e6 <nrf24l01_printinfo+0x7c>
     9e6:	ed b7       	in	r30, 0x3d	; 61
     9e8:	fe b7       	in	r31, 0x3e	; 62
     9ea:	31 96       	adiw	r30, 0x01	; 1
     9ec:	ad b7       	in	r26, 0x3d	; 61
     9ee:	be b7       	in	r27, 0x3e	; 62
     9f0:	12 96       	adiw	r26, 0x02	; 2
     9f2:	1c 93       	st	X, r17
     9f4:	0e 93       	st	-X, r16
     9f6:	11 97       	sbiw	r26, 0x01	; 1
     9f8:	21 e6       	ldi	r18, 0x61	; 97
     9fa:	31 e0       	ldi	r19, 0x01	; 1
     9fc:	33 83       	std	Z+3, r19	; 0x03
     9fe:	22 83       	std	Z+2, r18	; 0x02
     a00:	84 83       	std	Z+4, r24	; 0x04
     a02:	15 82       	std	Z+5, r1	; 0x05
     a04:	0e 94 a1 0b 	call	0x1742	; 0x1742 <sprintf>
     a08:	8d b7       	in	r24, 0x3d	; 61
     a0a:	9e b7       	in	r25, 0x3e	; 62
     a0c:	06 96       	adiw	r24, 0x06	; 6
     a0e:	0f b6       	in	r0, 0x3f	; 63
     a10:	f8 94       	cli
     a12:	9e bf       	out	0x3e, r25	; 62
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	8d bf       	out	0x3d, r24	; 61
     a18:	c8 01       	movw	r24, r16
     a1a:	f7 01       	movw	r30, r14
     a1c:	09 95       	icall
	sprintf(buff,"RF_CH: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_CH)); prints(buff);
     a1e:	85 e0       	ldi	r24, 0x05	; 5
     a20:	0e 94 59 03 	call	0x6b2	; 0x6b2 <nrf24l01_readregister>
     a24:	00 d0       	rcall	.+0      	; 0xa26 <nrf24l01_printinfo+0xbc>
     a26:	00 d0       	rcall	.+0      	; 0xa28 <nrf24l01_printinfo+0xbe>
     a28:	00 d0       	rcall	.+0      	; 0xa2a <nrf24l01_printinfo+0xc0>
     a2a:	ed b7       	in	r30, 0x3d	; 61
     a2c:	fe b7       	in	r31, 0x3e	; 62
     a2e:	31 96       	adiw	r30, 0x01	; 1
     a30:	ad b7       	in	r26, 0x3d	; 61
     a32:	be b7       	in	r27, 0x3e	; 62
     a34:	12 96       	adiw	r26, 0x02	; 2
     a36:	1c 93       	st	X, r17
     a38:	0e 93       	st	-X, r16
     a3a:	11 97       	sbiw	r26, 0x01	; 1
     a3c:	20 e7       	ldi	r18, 0x70	; 112
     a3e:	31 e0       	ldi	r19, 0x01	; 1
     a40:	33 83       	std	Z+3, r19	; 0x03
     a42:	22 83       	std	Z+2, r18	; 0x02
     a44:	84 83       	std	Z+4, r24	; 0x04
     a46:	15 82       	std	Z+5, r1	; 0x05
     a48:	0e 94 a1 0b 	call	0x1742	; 0x1742 <sprintf>
     a4c:	8d b7       	in	r24, 0x3d	; 61
     a4e:	9e b7       	in	r25, 0x3e	; 62
     a50:	06 96       	adiw	r24, 0x06	; 6
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	f8 94       	cli
     a56:	9e bf       	out	0x3e, r25	; 62
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	8d bf       	out	0x3d, r24	; 61
     a5c:	c8 01       	movw	r24, r16
     a5e:	f7 01       	movw	r30, r14
     a60:	09 95       	icall
	sprintf(buff,"RF_SETUP: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_SETUP)); prints(buff);
     a62:	86 e0       	ldi	r24, 0x06	; 6
     a64:	0e 94 59 03 	call	0x6b2	; 0x6b2 <nrf24l01_readregister>
     a68:	00 d0       	rcall	.+0      	; 0xa6a <nrf24l01_printinfo+0x100>
     a6a:	00 d0       	rcall	.+0      	; 0xa6c <nrf24l01_printinfo+0x102>
     a6c:	00 d0       	rcall	.+0      	; 0xa6e <nrf24l01_printinfo+0x104>
     a6e:	ed b7       	in	r30, 0x3d	; 61
     a70:	fe b7       	in	r31, 0x3e	; 62
     a72:	31 96       	adiw	r30, 0x01	; 1
     a74:	ad b7       	in	r26, 0x3d	; 61
     a76:	be b7       	in	r27, 0x3e	; 62
     a78:	12 96       	adiw	r26, 0x02	; 2
     a7a:	1c 93       	st	X, r17
     a7c:	0e 93       	st	-X, r16
     a7e:	11 97       	sbiw	r26, 0x01	; 1
     a80:	2e e7       	ldi	r18, 0x7E	; 126
     a82:	31 e0       	ldi	r19, 0x01	; 1
     a84:	33 83       	std	Z+3, r19	; 0x03
     a86:	22 83       	std	Z+2, r18	; 0x02
     a88:	84 83       	std	Z+4, r24	; 0x04
     a8a:	15 82       	std	Z+5, r1	; 0x05
     a8c:	0e 94 a1 0b 	call	0x1742	; 0x1742 <sprintf>
     a90:	8d b7       	in	r24, 0x3d	; 61
     a92:	9e b7       	in	r25, 0x3e	; 62
     a94:	06 96       	adiw	r24, 0x06	; 6
     a96:	0f b6       	in	r0, 0x3f	; 63
     a98:	f8 94       	cli
     a9a:	9e bf       	out	0x3e, r25	; 62
     a9c:	0f be       	out	0x3f, r0	; 63
     a9e:	8d bf       	out	0x3d, r24	; 61
     aa0:	c8 01       	movw	r24, r16
     aa2:	f7 01       	movw	r30, r14
     aa4:	09 95       	icall
	sprintf(buff,"EN_AA: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_AA)); prints(buff);
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	0e 94 59 03 	call	0x6b2	; 0x6b2 <nrf24l01_readregister>
     aac:	00 d0       	rcall	.+0      	; 0xaae <nrf24l01_printinfo+0x144>
     aae:	00 d0       	rcall	.+0      	; 0xab0 <nrf24l01_printinfo+0x146>
     ab0:	00 d0       	rcall	.+0      	; 0xab2 <nrf24l01_printinfo+0x148>
     ab2:	ed b7       	in	r30, 0x3d	; 61
     ab4:	fe b7       	in	r31, 0x3e	; 62
     ab6:	31 96       	adiw	r30, 0x01	; 1
     ab8:	ad b7       	in	r26, 0x3d	; 61
     aba:	be b7       	in	r27, 0x3e	; 62
     abc:	12 96       	adiw	r26, 0x02	; 2
     abe:	1c 93       	st	X, r17
     ac0:	0e 93       	st	-X, r16
     ac2:	11 97       	sbiw	r26, 0x01	; 1
     ac4:	2f e8       	ldi	r18, 0x8F	; 143
     ac6:	31 e0       	ldi	r19, 0x01	; 1
     ac8:	33 83       	std	Z+3, r19	; 0x03
     aca:	22 83       	std	Z+2, r18	; 0x02
     acc:	84 83       	std	Z+4, r24	; 0x04
     ace:	15 82       	std	Z+5, r1	; 0x05
     ad0:	0e 94 a1 0b 	call	0x1742	; 0x1742 <sprintf>
     ad4:	8d b7       	in	r24, 0x3d	; 61
     ad6:	9e b7       	in	r25, 0x3e	; 62
     ad8:	06 96       	adiw	r24, 0x06	; 6
     ada:	0f b6       	in	r0, 0x3f	; 63
     adc:	f8 94       	cli
     ade:	9e bf       	out	0x3e, r25	; 62
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	8d bf       	out	0x3d, r24	; 61
     ae4:	c8 01       	movw	r24, r16
     ae6:	f7 01       	movw	r30, r14
     ae8:	09 95       	icall
	sprintf(buff,"EN_RXADDR: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_RXADDR)); prints(buff);
     aea:	82 e0       	ldi	r24, 0x02	; 2
     aec:	0e 94 59 03 	call	0x6b2	; 0x6b2 <nrf24l01_readregister>
     af0:	00 d0       	rcall	.+0      	; 0xaf2 <nrf24l01_printinfo+0x188>
     af2:	00 d0       	rcall	.+0      	; 0xaf4 <nrf24l01_printinfo+0x18a>
     af4:	00 d0       	rcall	.+0      	; 0xaf6 <nrf24l01_printinfo+0x18c>
     af6:	ed b7       	in	r30, 0x3d	; 61
     af8:	fe b7       	in	r31, 0x3e	; 62
     afa:	31 96       	adiw	r30, 0x01	; 1
     afc:	ad b7       	in	r26, 0x3d	; 61
     afe:	be b7       	in	r27, 0x3e	; 62
     b00:	12 96       	adiw	r26, 0x02	; 2
     b02:	1c 93       	st	X, r17
     b04:	0e 93       	st	-X, r16
     b06:	11 97       	sbiw	r26, 0x01	; 1
     b08:	2d e9       	ldi	r18, 0x9D	; 157
     b0a:	31 e0       	ldi	r19, 0x01	; 1
     b0c:	33 83       	std	Z+3, r19	; 0x03
     b0e:	22 83       	std	Z+2, r18	; 0x02
     b10:	84 83       	std	Z+4, r24	; 0x04
     b12:	15 82       	std	Z+5, r1	; 0x05
     b14:	0e 94 a1 0b 	call	0x1742	; 0x1742 <sprintf>
     b18:	8d b7       	in	r24, 0x3d	; 61
     b1a:	9e b7       	in	r25, 0x3e	; 62
     b1c:	06 96       	adiw	r24, 0x06	; 6
     b1e:	0f b6       	in	r0, 0x3f	; 63
     b20:	f8 94       	cli
     b22:	9e bf       	out	0x3e, r25	; 62
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	8d bf       	out	0x3d, r24	; 61
     b28:	c8 01       	movw	r24, r16
     b2a:	f7 01       	movw	r30, r14
     b2c:	09 95       	icall
	sprintf(buff,"OBSERVE_TX: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_OBSERVE_TX)); prints(buff);
     b2e:	88 e0       	ldi	r24, 0x08	; 8
     b30:	0e 94 59 03 	call	0x6b2	; 0x6b2 <nrf24l01_readregister>
     b34:	00 d0       	rcall	.+0      	; 0xb36 <nrf24l01_printinfo+0x1cc>
     b36:	00 d0       	rcall	.+0      	; 0xb38 <nrf24l01_printinfo+0x1ce>
     b38:	00 d0       	rcall	.+0      	; 0xb3a <nrf24l01_printinfo+0x1d0>
     b3a:	ed b7       	in	r30, 0x3d	; 61
     b3c:	fe b7       	in	r31, 0x3e	; 62
     b3e:	31 96       	adiw	r30, 0x01	; 1
     b40:	ad b7       	in	r26, 0x3d	; 61
     b42:	be b7       	in	r27, 0x3e	; 62
     b44:	12 96       	adiw	r26, 0x02	; 2
     b46:	1c 93       	st	X, r17
     b48:	0e 93       	st	-X, r16
     b4a:	11 97       	sbiw	r26, 0x01	; 1
     b4c:	2f ea       	ldi	r18, 0xAF	; 175
     b4e:	31 e0       	ldi	r19, 0x01	; 1
     b50:	33 83       	std	Z+3, r19	; 0x03
     b52:	22 83       	std	Z+2, r18	; 0x02
     b54:	84 83       	std	Z+4, r24	; 0x04
     b56:	15 82       	std	Z+5, r1	; 0x05
     b58:	0e 94 a1 0b 	call	0x1742	; 0x1742 <sprintf>
     b5c:	8d b7       	in	r24, 0x3d	; 61
     b5e:	9e b7       	in	r25, 0x3e	; 62
     b60:	06 96       	adiw	r24, 0x06	; 6
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	f8 94       	cli
     b66:	9e bf       	out	0x3e, r25	; 62
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	8d bf       	out	0x3d, r24	; 61
     b6c:	c8 01       	movw	r24, r16
     b6e:	f7 01       	movw	r30, r14
     b70:	09 95       	icall
	prints("\r\n");
     b72:	82 ec       	ldi	r24, 0xC2	; 194
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	f7 01       	movw	r30, r14
     b78:	09 95       	icall
}
     b7a:	cc 59       	subi	r28, 0x9C	; 156
     b7c:	df 4f       	sbci	r29, 0xFF	; 255
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	f8 94       	cli
     b82:	de bf       	out	0x3e, r29	; 62
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	cd bf       	out	0x3d, r28	; 61
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	1f 91       	pop	r17
     b8e:	0f 91       	pop	r16
     b90:	ff 90       	pop	r15
     b92:	ef 90       	pop	r14
     b94:	08 95       	ret

00000b96 <nrf24l01_readready>:
}

/*
 * check if there is data ready
 */
uint8_t nrf24l01_readready(uint8_t* pipe) {
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	ec 01       	movw	r28, r24
    uint8_t status = nrf24l01_getstatus();
     b9c:	0e 94 af 04 	call	0x95e	; 0x95e <nrf24l01_getstatus>
    uint8_t ret = status & (1<<NRF24L01_REG_RX_DR);
    if(ret) {
     ba0:	98 2f       	mov	r25, r24
     ba2:	90 74       	andi	r25, 0x40	; 64
     ba4:	86 ff       	sbrs	r24, 6
     ba6:	05 c0       	rjmp	.+10     	; 0xbb2 <nrf24l01_readready+0x1c>
		//get the pipe number
		if(pipe)
     ba8:	20 97       	sbiw	r28, 0x00	; 0
     baa:	19 f0       	breq	.+6      	; 0xbb2 <nrf24l01_readready+0x1c>
			*pipe = (status >> NRF24L01_REG_RX_P_NO) & 0b111;
     bac:	86 95       	lsr	r24
     bae:	87 70       	andi	r24, 0x07	; 7
     bb0:	88 83       	st	Y, r24
    }
    return ret;
}
     bb2:	89 2f       	mov	r24, r25
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	08 95       	ret

00000bba <nrf24l01_read>:

/*
 * get data
 */
void nrf24l01_read(uint8_t pipe,uint8_t *data) {
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	06 2f       	mov	r16, r22
     bc4:	17 2f       	mov	r17, r23
	uint8_t i = 0;
	//read rx register
	nrf24l01_CSNlo; //low CSN
     bc6:	ae 98       	cbi	0x15, 6	; 21
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
     bc8:	81 e6       	ldi	r24, 0x61	; 97
     bca:	0e 94 13 09 	call	0x1226	; 0x1226 <spi_writereadbyte>
     bce:	c0 2f       	mov	r28, r16
     bd0:	d1 2f       	mov	r29, r17
	//Thay doi lai command, lay PAYLOAD va write ACK
	//spi_writereadbyte(NRF24L01_CMD_W_ACK_PAYLOAD | pipe);
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     bd2:	10 e0       	ldi	r17, 0x00	; 0
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
     bd4:	8f ef       	ldi	r24, 0xFF	; 255
     bd6:	0e 94 13 09 	call	0x1226	; 0x1226 <spi_writereadbyte>
     bda:	89 93       	st	Y+, r24
	//read rx register
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
	//Thay doi lai command, lay PAYLOAD va write ACK
	//spi_writereadbyte(NRF24L01_CMD_W_ACK_PAYLOAD | pipe);
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     bdc:	1f 5f       	subi	r17, 0xFF	; 255
     bde:	19 30       	cpi	r17, 0x09	; 9
     be0:	c9 f7       	brne	.-14     	; 0xbd4 <nrf24l01_read+0x1a>
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
    nrf24l01_CSNhi; //high CSN
     be2:	ae 9a       	sbi	0x15, 6	; 21
    //reset register
    nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR));
     be4:	87 e0       	ldi	r24, 0x07	; 7
     be6:	60 e4       	ldi	r22, 0x40	; 64
     be8:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
    //handle ack payload receipt
	if (nrf24l01_getstatus() & (1<<NRF24L01_REG_TX_DS))
     bec:	0e 94 af 04 	call	0x95e	; 0x95e <nrf24l01_getstatus>
     bf0:	85 ff       	sbrs	r24, 5
     bf2:	04 c0       	rjmp	.+8      	; 0xbfc <nrf24l01_read+0x42>
		nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_TX_DS));
     bf4:	87 e0       	ldi	r24, 0x07	; 7
     bf6:	60 e2       	ldi	r22, 0x20	; 32
     bf8:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
}
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	1f 91       	pop	r17
     c02:	0f 91       	pop	r16
     c04:	08 95       	ret

00000c06 <nrf24l01_write>:

/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	08 2f       	mov	r16, r24
     c10:	19 2f       	mov	r17, r25
	uint8_t i = 0;
	uint8_t ret = 0;

	//set tx mode
	nrf24l01_setTX();
     c12:	0e 94 94 04 	call	0x928	; 0x928 <nrf24l01_setTX>

	//write data
	nrf24l01_CSNlo; //low CSN
     c16:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
     c18:	80 ea       	ldi	r24, 0xA0	; 160
     c1a:	0e 94 13 09 	call	0x1226	; 0x1226 <spi_writereadbyte>
     c1e:	c0 2f       	mov	r28, r16
     c20:	d1 2f       	mov	r29, r17
     c22:	19 e0       	ldi	r17, 0x09	; 9
	for (i=0; i<NRF24L01_PAYLOAD; i++)
		spi_writereadbyte(data[i]);
     c24:	89 91       	ld	r24, Y+
     c26:	0e 94 13 09 	call	0x1226	; 0x1226 <spi_writereadbyte>
     c2a:	11 50       	subi	r17, 0x01	; 1
	nrf24l01_setTX();

	//write data
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
	for (i=0; i<NRF24L01_PAYLOAD; i++)
     c2c:	d9 f7       	brne	.-10     	; 0xc24 <nrf24l01_write+0x1e>
		spi_writereadbyte(data[i]);
	nrf24l01_CSNhi; //high CSN
     c2e:	ae 9a       	sbi	0x15, 6	; 21

	//start transmission
	nrf24l01_CEhi; //high CE
     c30:	af 9a       	sbi	0x15, 7	; 21
     c32:	85 e0       	ldi	r24, 0x05	; 5
     c34:	8a 95       	dec	r24
     c36:	f1 f7       	brne	.-4      	; 0xc34 <nrf24l01_write+0x2e>
	_delay_us(15);
	nrf24l01_CElo; //low CE
     c38:	af 98       	cbi	0x15, 7	; 21
     c3a:	83 e0       	ldi	r24, 0x03	; 3
     c3c:	8a 95       	dec	r24
     c3e:	f1 f7       	brne	.-4      	; 0xc3c <nrf24l01_write+0x36>
     c40:	00 00       	nop

	//stop if max_retries reached or send is ok
	do {
		_delay_us(10);
	}
	while( !(nrf24l01_getstatus() & (1<<NRF24L01_REG_MAX_RT | 1<<NRF24L01_REG_TX_DS)) );
     c42:	0e 94 af 04 	call	0x95e	; 0x95e <nrf24l01_getstatus>
     c46:	80 73       	andi	r24, 0x30	; 48
     c48:	c1 f3       	breq	.-16     	; 0xc3a <nrf24l01_write+0x34>

	if(nrf24l01_getstatus() & 1<<NRF24L01_REG_TX_DS)
     c4a:	0e 94 af 04 	call	0x95e	; 0x95e <nrf24l01_getstatus>
     c4e:	c8 2f       	mov	r28, r24
		ret = 1;

	//reset PLOS_CNT
	nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH);
     c50:	85 e0       	ldi	r24, 0x05	; 5
     c52:	6c e4       	ldi	r22, 0x4C	; 76
     c54:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>

	//power down
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PWR_UP));
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <nrf24l01_readregister>
     c5e:	68 2f       	mov	r22, r24
     c60:	6d 7f       	andi	r22, 0xFD	; 253
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>

	//set rx mode
	nrf24l01_setRX();
     c68:	0e 94 72 04 	call	0x8e4	; 0x8e4 <nrf24l01_setRX>
/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
	uint8_t i = 0;
	uint8_t ret = 0;
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	c5 ff       	sbrs	r28, 5
     c70:	80 e0       	ldi	r24, 0x00	; 0

	//set rx mode
	nrf24l01_setRX();

	return ret;
}
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	1f 91       	pop	r17
     c78:	0f 91       	pop	r16
     c7a:	08 95       	ret

00000c7c <nrf24l01_setpalevel>:

/*
 * set power level
 */
void nrf24l01_setpalevel() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP);
     c7c:	86 e0       	ldi	r24, 0x06	; 6
     c7e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <nrf24l01_readregister>
  setup &= ~((1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH));

  if (NRF24L01_RF24_PA == NRF24L01_RF24_PA_MAX) {
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
     c82:	68 2f       	mov	r22, r24
     c84:	66 60       	ori	r22, 0x06	; 6
  } else {
	  //default is max power
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     c86:	86 e0       	ldi	r24, 0x06	; 6
     c88:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
}
     c8c:	08 95       	ret

00000c8e <nrf24l01_setdatarate>:

/*
 * set datarate
 */
void nrf24l01_setdatarate() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP) ;
     c8e:	86 e0       	ldi	r24, 0x06	; 6
     c90:	0e 94 59 03 	call	0x6b2	; 0x6b2 <nrf24l01_readregister>

  setup &= ~((1<<NRF24L01_REG_RF_DR_LOW) | (1<<NRF24L01_REG_RF_DR_HIGH));
     c94:	68 2f       	mov	r22, r24
     c96:	67 7d       	andi	r22, 0xD7	; 215
    } else {
    	//default is 1Mbps
    }
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     c98:	86 e0       	ldi	r24, 0x06	; 6
     c9a:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
}
     c9e:	08 95       	ret

00000ca0 <nrf24l01_setcrclength>:

/*
 * set crc length
 */
void nrf24l01_setcrclength() {
  uint8_t config = nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~((1<<NRF24L01_REG_CRCO) | (1<<NRF24L01_REG_EN_CRC));
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	0e 94 59 03 	call	0x6b2	; 0x6b2 <nrf24l01_readregister>
	  //nothing
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_8) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_16) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
	  config |= (1<<NRF24L01_REG_CRCO);
     ca6:	68 2f       	mov	r22, r24
     ca8:	6c 60       	ori	r22, 0x0C	; 12
  } else {
	  //default is disabled
  }

  nrf24l01_writeregister(NRF24L01_REG_CONFIG, config);
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
}
     cb0:	08 95       	ret

00000cb2 <nrf24l01_init>:
/*
 * init nrf24l01
 */
void nrf24l01_init() {
	//setup port
	NRF24L01_DDR |= (1<<NRF24L01_CSN); //output
     cb2:	a6 9a       	sbi	0x14, 6	; 20
	NRF24L01_DDR |= (1<<NRF24L01_CE); //output
     cb4:	a7 9a       	sbi	0x14, 7	; 20

    spi_init(); //init spi
     cb6:	0e 94 08 09 	call	0x1210	; 0x1210 <spi_init>

    nrf24l01_CElo; //low CE
     cba:	af 98       	cbi	0x15, 7	; 21
    nrf24l01_CSNhi; //high CSN
     cbc:	ae 9a       	sbi	0x15, 6	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cbe:	81 ee       	ldi	r24, 0xE1	; 225
     cc0:	94 e0       	ldi	r25, 0x04	; 4
     cc2:	01 97       	sbiw	r24, 0x01	; 1
     cc4:	f1 f7       	brne	.-4      	; 0xcc2 <nrf24l01_init+0x10>
     cc6:	00 c0       	rjmp	.+0      	; 0xcc8 <nrf24l01_init+0x16>
     cc8:	00 00       	nop

    _delay_ms(5); //wait for the radio to init

    nrf24l01_setpalevel(); //set power level
     cca:	0e 94 3e 06 	call	0xc7c	; 0xc7c <nrf24l01_setpalevel>
    nrf24l01_setdatarate(); //set data rate
     cce:	0e 94 47 06 	call	0xc8e	; 0xc8e <nrf24l01_setdatarate>
    nrf24l01_setcrclength(); //set crc length
     cd2:	0e 94 50 06 	call	0xca0	; 0xca0 <nrf24l01_setcrclength>
    nrf24l01_writeregister(NRF24L01_REG_SETUP_RETR, NRF24L01_RETR); // set retries
     cd6:	84 e0       	ldi	r24, 0x04	; 4
     cd8:	67 e4       	ldi	r22, 0x47	; 71
     cda:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_DYNPD, 0); //disable dynamic payloads
     cde:	8c e1       	ldi	r24, 0x1C	; 28
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH); //set RF channel
     ce6:	85 e0       	ldi	r24, 0x05	; 5
     ce8:	6c e4       	ldi	r22, 0x4C	; 76
     cea:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>

	//payload size
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P0, NRF24L01_PAYLOAD);
     cee:	81 e1       	ldi	r24, 0x11	; 17
     cf0:	69 e0       	ldi	r22, 0x09	; 9
     cf2:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P1, NRF24L01_PAYLOAD);
     cf6:	82 e1       	ldi	r24, 0x12	; 18
     cf8:	69 e0       	ldi	r22, 0x09	; 9
     cfa:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P2, NRF24L01_PAYLOAD);
     cfe:	83 e1       	ldi	r24, 0x13	; 19
     d00:	69 e0       	ldi	r22, 0x09	; 9
     d02:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P3, NRF24L01_PAYLOAD);
     d06:	84 e1       	ldi	r24, 0x14	; 20
     d08:	69 e0       	ldi	r22, 0x09	; 9
     d0a:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P4, NRF24L01_PAYLOAD);
     d0e:	85 e1       	ldi	r24, 0x15	; 21
     d10:	69 e0       	ldi	r22, 0x09	; 9
     d12:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P5, NRF24L01_PAYLOAD);
     d16:	86 e1       	ldi	r24, 0x16	; 22
     d18:	69 e0       	ldi	r22, 0x09	; 9
     d1a:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
	#endif

	//enable pipe
	nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, 0);
     d1e:	82 e0       	ldi	r24, 0x02	; 2
     d20:	60 e0       	ldi	r22, 0x00	; 0
     d22:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P0));
     d26:	82 e0       	ldi	r24, 0x02	; 2
     d28:	0e 94 59 03 	call	0x6b2	; 0x6b2 <nrf24l01_readregister>
     d2c:	68 2f       	mov	r22, r24
     d2e:	61 60       	ori	r22, 0x01	; 1
     d30:	82 e0       	ldi	r24, 0x02	; 2
     d32:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P1));
     d36:	82 e0       	ldi	r24, 0x02	; 2
     d38:	0e 94 59 03 	call	0x6b2	; 0x6b2 <nrf24l01_readregister>
     d3c:	68 2f       	mov	r22, r24
     d3e:	62 60       	ori	r22, 0x02	; 2
     d40:	82 e0       	ldi	r24, 0x02	; 2
     d42:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P2));
     d46:	82 e0       	ldi	r24, 0x02	; 2
     d48:	0e 94 59 03 	call	0x6b2	; 0x6b2 <nrf24l01_readregister>
     d4c:	68 2f       	mov	r22, r24
     d4e:	64 60       	ori	r22, 0x04	; 4
     d50:	82 e0       	ldi	r24, 0x02	; 2
     d52:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P3));
     d56:	82 e0       	ldi	r24, 0x02	; 2
     d58:	0e 94 59 03 	call	0x6b2	; 0x6b2 <nrf24l01_readregister>
     d5c:	68 2f       	mov	r22, r24
     d5e:	68 60       	ori	r22, 0x08	; 8
     d60:	82 e0       	ldi	r24, 0x02	; 2
     d62:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P4));
     d66:	82 e0       	ldi	r24, 0x02	; 2
     d68:	0e 94 59 03 	call	0x6b2	; 0x6b2 <nrf24l01_readregister>
     d6c:	68 2f       	mov	r22, r24
     d6e:	60 61       	ori	r22, 0x10	; 16
     d70:	82 e0       	ldi	r24, 0x02	; 2
     d72:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P5));
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	0e 94 59 03 	call	0x6b2	; 0x6b2 <nrf24l01_readregister>
     d7c:	68 2f       	mov	r22, r24
     d7e:	60 62       	ori	r22, 0x20	; 32
     d80:	82 e0       	ldi	r24, 0x02	; 2
     d82:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
	#endif

	//auto ack
	#if NRF24L01_ACK == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P0));
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	0e 94 59 03 	call	0x6b2	; 0x6b2 <nrf24l01_readregister>
     d8c:	68 2f       	mov	r22, r24
     d8e:	61 60       	ori	r22, 0x01	; 1
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P1));
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	0e 94 59 03 	call	0x6b2	; 0x6b2 <nrf24l01_readregister>
     d9c:	68 2f       	mov	r22, r24
     d9e:	62 60       	ori	r22, 0x02	; 2
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P2));
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	0e 94 59 03 	call	0x6b2	; 0x6b2 <nrf24l01_readregister>
     dac:	68 2f       	mov	r22, r24
     dae:	64 60       	ori	r22, 0x04	; 4
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P3));
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	0e 94 59 03 	call	0x6b2	; 0x6b2 <nrf24l01_readregister>
     dbc:	68 2f       	mov	r22, r24
     dbe:	68 60       	ori	r22, 0x08	; 8
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P4));
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	0e 94 59 03 	call	0x6b2	; 0x6b2 <nrf24l01_readregister>
     dcc:	68 2f       	mov	r22, r24
     dce:	60 61       	ori	r22, 0x10	; 16
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P5));
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	0e 94 59 03 	call	0x6b2	; 0x6b2 <nrf24l01_readregister>
     ddc:	68 2f       	mov	r22, r24
     dde:	60 62       	ori	r22, 0x20	; 32
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	0e 94 81 03 	call	0x702	; 0x702 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P4));
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P5));
	#endif

	//rx address
	nrf24l01_setrxaddr(0, nrf24l01_addr0);
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	65 ec       	ldi	r22, 0xC5	; 197
     dea:	71 e0       	ldi	r23, 0x01	; 1
     dec:	0e 94 be 03 	call	0x77c	; 0x77c <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(1, nrf24l01_addr1);
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	6a ec       	ldi	r22, 0xCA	; 202
     df4:	71 e0       	ldi	r23, 0x01	; 1
     df6:	0e 94 be 03 	call	0x77c	; 0x77c <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(2, nrf24l01_addr2);
     dfa:	82 e0       	ldi	r24, 0x02	; 2
     dfc:	6f ec       	ldi	r22, 0xCF	; 207
     dfe:	71 e0       	ldi	r23, 0x01	; 1
     e00:	0e 94 be 03 	call	0x77c	; 0x77c <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(3, nrf24l01_addr3);
     e04:	83 e0       	ldi	r24, 0x03	; 3
     e06:	64 ed       	ldi	r22, 0xD4	; 212
     e08:	71 e0       	ldi	r23, 0x01	; 1
     e0a:	0e 94 be 03 	call	0x77c	; 0x77c <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(4, nrf24l01_addr4);
     e0e:	84 e0       	ldi	r24, 0x04	; 4
     e10:	69 ed       	ldi	r22, 0xD9	; 217
     e12:	71 e0       	ldi	r23, 0x01	; 1
     e14:	0e 94 be 03 	call	0x77c	; 0x77c <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(5, nrf24l01_addr5);
     e18:	85 e0       	ldi	r24, 0x05	; 5
     e1a:	6e ed       	ldi	r22, 0xDE	; 222
     e1c:	71 e0       	ldi	r23, 0x01	; 1
     e1e:	0e 94 be 03 	call	0x77c	; 0x77c <nrf24l01_setrxaddr>

	//tx address
	nrf24l01_settxaddr(nrf24l01_addrtx);
     e22:	83 ee       	ldi	r24, 0xE3	; 227
     e24:	91 e0       	ldi	r25, 0x01	; 1
     e26:	0e 94 3b 04 	call	0x876	; 0x876 <nrf24l01_settxaddr>

	//set rx mode
	nrf24l01_setRX();
     e2a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <nrf24l01_setRX>
}
     e2e:	08 95       	ret

00000e30 <sMR_init>:
static void clearInEvents(SMR* handle);
static void clearOutEvents(SMR* handle);


void sMR_init(SMR* handle)
{
     e30:	fc 01       	movw	r30, r24
	int i;

	for (i = 0; i < SMR_MAX_ORTHOGONAL_STATES; ++i)
		handle->stateConfVector[i] = SMR_last_state;
     e32:	87 e0       	ldi	r24, 0x07	; 7
     e34:	80 83       	st	Z, r24
	
	
	handle->stateConfVectorPosition = 0;
     e36:	12 82       	std	Z+2, r1	; 0x02
     e38:	11 82       	std	Z+1, r1	; 0x01

	// TODO: initialize all events ...
	// TODO: initialize all variables ... (set default values - here or inenter sequence ?!?)

}
     e3a:	08 95       	ret

00000e3c <sMR_enter>:

void sMR_enter(SMR* handle)
{
     e3c:	1f 93       	push	r17
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	ec 01       	movw	r28, r24
	sMR_entryaction(handle);
	/* Default enter sequence for region main region */
	/* Default react sequence for initial entry  */
	/* Default enter sequence for state on */
	/* Entry action for state 'on'. */
	handle->iface.lightOn = bool_true;
     e44:	11 e0       	ldi	r17, 0x01	; 1
     e46:	1c a7       	lds	r17, 0x7c
	/* Default enter sequence for region r1 */
	/* Default react sequence for initial entry  */
	/* Default enter sequence for state Init */
	/* Entry action for state 'Init'. */
	sMR_setTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) , 3 * 1000, bool_false);
     e48:	c7 96       	adiw	r24, 0x37	; 55
     e4a:	48 eb       	ldi	r20, 0xB8	; 184
     e4c:	5b e0       	ldi	r21, 0x0B	; 11
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	0e 94 b1 02 	call	0x562	; 0x562 <sMR_setTimer>
	handle->iface.tableId = 1;
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	a0 e0       	ldi	r26, 0x00	; 0
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	89 ab       	sts	0x59, r24
     e62:	9a ab       	sts	0x5a, r25
     e64:	ab ab       	sts	0x5b, r26
     e66:	bc ab       	sts	0x5c, r27
	sMRIfaceLCD_init();
     e68:	0e 94 a8 01 	call	0x350	; 0x350 <sMRIfaceLCD_init>
	sMRIfaceRF_init();
     e6c:	0e 94 b7 02 	call	0x56e	; 0x56e <sMRIfaceRF_init>
	sMRIfaceUART_init();
     e70:	0e 94 a7 02 	call	0x54e	; 0x54e <sMRIfaceUART_init>
	sMRIfaceLCD_clear();
     e74:	0e 94 9f 01 	call	0x33e	; 0x33e <sMRIfaceLCD_clear>
	sMRIfaceLCD_writeString("Waitting...");
     e78:	88 ee       	ldi	r24, 0xE8	; 232
     e7a:	91 e0       	ldi	r25, 0x01	; 1
     e7c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <sMRIfaceLCD_writeString>
	handle->stateConfVector[0] = SMR_main_region_on_r1_Init;
     e80:	18 83       	st	Y, r17
	handle->stateConfVectorPosition = 0;
     e82:	1a 82       	std	Y+2, r1	; 0x02
     e84:	19 82       	std	Y+1, r1	; 0x01
}
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <sMR_exit>:

void sMR_exit(SMR* handle)
{
     e8e:	fc 01       	movw	r30, r24
	/* Default exit sequence for statechart SMR */
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of main region) at position 0... */
	switch(handle->stateConfVector[ 0 ]) {
     e90:	80 81       	ld	r24, Z
     e92:	84 30       	cpi	r24, 0x04	; 4
     e94:	d1 f0       	breq	.+52     	; 0xeca <sMR_exit+0x3c>
     e96:	85 30       	cpi	r24, 0x05	; 5
     e98:	28 f4       	brcc	.+10     	; 0xea4 <sMR_exit+0x16>
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	41 f0       	breq	.+16     	; 0xeae <sMR_exit+0x20>
     e9e:	83 30       	cpi	r24, 0x03	; 3
     ea0:	11 f5       	brne	.+68     	; 0xee6 <sMR_exit+0x58>
     ea2:	0e c0       	rjmp	.+28     	; 0xec0 <sMR_exit+0x32>
     ea4:	85 30       	cpi	r24, 0x05	; 5
     ea6:	b1 f0       	breq	.+44     	; 0xed4 <sMR_exit+0x46>
     ea8:	86 30       	cpi	r24, 0x06	; 6
     eaa:	e9 f4       	brne	.+58     	; 0xee6 <sMR_exit+0x58>
     eac:	18 c0       	rjmp	.+48     	; 0xede <sMR_exit+0x50>
		case SMR_main_region_on_r1_Init : {
			/* Default exit sequence for state Init */
			handle->stateConfVector[0] = SMR_last_state;
     eae:	87 e0       	ldi	r24, 0x07	; 7
     eb0:	80 83       	st	Z, r24
			handle->stateConfVectorPosition = 0;
     eb2:	12 82       	std	Z+2, r1	; 0x02
     eb4:	11 82       	std	Z+1, r1	; 0x01
			/* Exit action for state 'Init'. */
			sMR_unsetTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) );		
     eb6:	cf 01       	movw	r24, r30
     eb8:	c7 96       	adiw	r24, 0x37	; 55
     eba:	0e 94 b4 02 	call	0x568	; 0x568 <sMR_unsetTimer>
			break;
     ebe:	08 95       	ret
		}
		case SMR_main_region_on_r1_running_RF_Ready : {
			/* Default exit sequence for state Ready */
			handle->stateConfVector[0] = SMR_last_state;
     ec0:	87 e0       	ldi	r24, 0x07	; 7
     ec2:	80 83       	st	Z, r24
			handle->stateConfVectorPosition = 0;
     ec4:	12 82       	std	Z+2, r1	; 0x02
     ec6:	11 82       	std	Z+1, r1	; 0x01
			break;
     ec8:	08 95       	ret
		}
		case SMR_main_region_on_r1_running_RF_GetData : {
			/* Default exit sequence for state GetData */
			handle->stateConfVector[0] = SMR_last_state;
     eca:	87 e0       	ldi	r24, 0x07	; 7
     ecc:	80 83       	st	Z, r24
			handle->stateConfVectorPosition = 0;
     ece:	12 82       	std	Z+2, r1	; 0x02
     ed0:	11 82       	std	Z+1, r1	; 0x01
			break;
     ed2:	08 95       	ret
		}
		case SMR_main_region_on_r1_running_RF_DataRecieved : {
			/* Default exit sequence for state DataRecieved */
			handle->stateConfVector[0] = SMR_last_state;
     ed4:	87 e0       	ldi	r24, 0x07	; 7
     ed6:	80 83       	st	Z, r24
			handle->stateConfVectorPosition = 0;
     ed8:	12 82       	std	Z+2, r1	; 0x02
     eda:	11 82       	std	Z+1, r1	; 0x01
			break;
     edc:	08 95       	ret
		}
		case SMR_main_region_on_r1_running_RF_SendSuccess : {
			/* Default exit sequence for state SendSuccess */
			handle->stateConfVector[0] = SMR_last_state;
     ede:	87 e0       	ldi	r24, 0x07	; 7
     ee0:	80 83       	st	Z, r24
			handle->stateConfVectorPosition = 0;
     ee2:	12 82       	std	Z+2, r1	; 0x02
     ee4:	11 82       	std	Z+1, r1	; 0x01
     ee6:	08 95       	ret

00000ee8 <sMR_runCycle>:
}

static void clearOutEvents(SMR* handle) {
}

void sMR_runCycle(SMR* handle) {
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
     eec:	ec 01       	movw	r28, r24
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
     eee:	1a 82       	std	Y+2, r1	; 0x02
     ef0:	19 82       	std	Y+1, r1	; 0x01
		handle->stateConfVectorPosition < SMR_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
			
		switch (handle->stateConfVector[handle->stateConfVectorPosition]) {
     ef2:	88 81       	ld	r24, Y
     ef4:	84 30       	cpi	r24, 0x04	; 4
     ef6:	99 f1       	breq	.+102    	; 0xf5e <sMR_runCycle+0x76>
     ef8:	85 30       	cpi	r24, 0x05	; 5
     efa:	30 f4       	brcc	.+12     	; 0xf08 <sMR_runCycle+0x20>
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	59 f0       	breq	.+22     	; 0xf16 <sMR_runCycle+0x2e>
     f00:	83 30       	cpi	r24, 0x03	; 3
     f02:	09 f0       	breq	.+2      	; 0xf06 <sMR_runCycle+0x1e>
     f04:	73 c0       	rjmp	.+230    	; 0xfec <sMR_runCycle+0x104>
     f06:	1e c0       	rjmp	.+60     	; 0xf44 <sMR_runCycle+0x5c>
     f08:	85 30       	cpi	r24, 0x05	; 5
     f0a:	09 f4       	brne	.+2      	; 0xf0e <sMR_runCycle+0x26>
     f0c:	4b c0       	rjmp	.+150    	; 0xfa4 <sMR_runCycle+0xbc>
     f0e:	86 30       	cpi	r24, 0x06	; 6
     f10:	09 f0       	breq	.+2      	; 0xf14 <sMR_runCycle+0x2c>
     f12:	6c c0       	rjmp	.+216    	; 0xfec <sMR_runCycle+0x104>
     f14:	53 c0       	rjmp	.+166    	; 0xfbc <sMR_runCycle+0xd4>
}

/* The reactions of state Init. */
static void sMR_react_main_region_on_r1_Init(SMR* handle) {
	/* The reactions of state Init. */
	if (handle->timeEvents.Init_time_event_0_raised) { 
     f16:	8f a9       	sts	0x4f, r24
     f18:	88 23       	and	r24, r24
     f1a:	09 f4       	brne	.+2      	; 0xf1e <sMR_runCycle+0x36>
     f1c:	67 c0       	rjmp	.+206    	; 0xfec <sMR_runCycle+0x104>
		/* Default exit sequence for state Init */
		handle->stateConfVector[0] = SMR_last_state;
     f1e:	87 e0       	ldi	r24, 0x07	; 7
     f20:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
     f22:	1a 82       	std	Y+2, r1	; 0x02
     f24:	19 82       	std	Y+1, r1	; 0x01
		/* Exit action for state 'Init'. */
		sMR_unsetTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) );		
     f26:	ce 01       	movw	r24, r28
     f28:	c7 96       	adiw	r24, 0x37	; 55
     f2a:	0e 94 b4 02 	call	0x568	; 0x568 <sMR_unsetTimer>
		/* Default enter sequence for state running */
		/* Default enter sequence for region RF */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state Ready */
		/* Entry action for state 'Ready'. */
		sMRIfaceLCD_clear();
     f2e:	0e 94 9f 01 	call	0x33e	; 0x33e <sMRIfaceLCD_clear>
		sMRIfaceLCD_writeString("Waiting for data");
     f32:	84 ef       	ldi	r24, 0xF4	; 244
     f34:	91 e0       	ldi	r25, 0x01	; 1
     f36:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <sMRIfaceLCD_writeString>
		handle->stateConfVector[0] = SMR_main_region_on_r1_running_RF_Ready;
     f3a:	83 e0       	ldi	r24, 0x03	; 3
     f3c:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
     f3e:	1a 82       	std	Y+2, r1	; 0x02
     f40:	19 82       	std	Y+1, r1	; 0x01
     f42:	64 c0       	rjmp	.+200    	; 0x100c <sMR_runCycle+0x124>
/* The reactions of state Ready. */
static void sMR_react_main_region_on_r1_running_RF_Ready(SMR* handle) {
	/* The reactions of state Ready. */
	if (bool_true) { 
		/* Default exit sequence for state Ready */
		handle->stateConfVector[0] = SMR_last_state;
     f44:	87 e0       	ldi	r24, 0x07	; 7
     f46:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
     f48:	1a 82       	std	Y+2, r1	; 0x02
     f4a:	19 82       	std	Y+1, r1	; 0x01
		/* Default enter sequence for state GetData */
		/* Entry action for state 'GetData'. */
		handle->ifaceRF.data = sMRIfaceRF_getData();
     f4c:	0e 94 ac 01 	call	0x358	; 0x358 <sMRIfaceRF_getData>
     f50:	9b 8b       	std	Y+19, r25	; 0x13
     f52:	8a 8b       	std	Y+18, r24	; 0x12
		handle->stateConfVector[0] = SMR_main_region_on_r1_running_RF_GetData;
     f54:	84 e0       	ldi	r24, 0x04	; 4
     f56:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
     f58:	1a 82       	std	Y+2, r1	; 0x02
     f5a:	19 82       	std	Y+1, r1	; 0x01
     f5c:	57 c0       	rjmp	.+174    	; 0x100c <sMR_runCycle+0x124>
}

/* The reactions of state GetData. */
static void sMR_react_main_region_on_r1_running_RF_GetData(SMR* handle) {
	/* The reactions of state GetData. */
	if ((strcmp(handle->ifaceRF.data, "") != 0)
     f5e:	ea 89       	ldd	r30, Y+18	; 0x12
     f60:	fb 89       	ldd	r31, Y+19	; 0x13
     f62:	80 81       	ld	r24, Z
     f64:	88 23       	and	r24, r24
     f66:	a9 f0       	breq	.+42     	; 0xf92 <sMR_runCycle+0xaa>
	) { 
		/* Default exit sequence for state GetData */
		handle->stateConfVector[0] = SMR_last_state;
     f68:	87 e0       	ldi	r24, 0x07	; 7
     f6a:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
     f6c:	1a 82       	std	Y+2, r1	; 0x02
     f6e:	19 82       	std	Y+1, r1	; 0x01
		handle->ifaceRF.lastdata = handle->ifaceRF.data;
     f70:	fd 8b       	std	Y+21, r31	; 0x15
     f72:	ec 8b       	std	Y+20, r30	; 0x14
		/* Default enter sequence for state DataRecieved */
		/* Entry action for state 'DataRecieved'. */
		sMRIfaceLCD_clear();
     f74:	0e 94 9f 01 	call	0x33e	; 0x33e <sMRIfaceLCD_clear>
		sMRIfaceLCD_writeString(handle->ifaceRF.lastdata);
     f78:	8c 89       	ldd	r24, Y+20	; 0x14
     f7a:	9d 89       	ldd	r25, Y+21	; 0x15
     f7c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <sMRIfaceLCD_writeString>
		sMRIfaceUART_sendData(handle->ifaceRF.lastdata);
     f80:	8c 89       	ldd	r24, Y+20	; 0x14
     f82:	9d 89       	ldd	r25, Y+21	; 0x15
     f84:	0e 94 ac 02 	call	0x558	; 0x558 <sMRIfaceUART_sendData>
		handle->stateConfVector[0] = SMR_main_region_on_r1_running_RF_DataRecieved;
     f88:	85 e0       	ldi	r24, 0x05	; 5
     f8a:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
     f8c:	1a 82       	std	Y+2, r1	; 0x02
     f8e:	19 82       	std	Y+1, r1	; 0x01
     f90:	3d c0       	rjmp	.+122    	; 0x100c <sMR_runCycle+0x124>
	}  else {
		if ((strcmp(handle->ifaceRF.data, "") == 0)
		) { 
			/* Default enter sequence for state GetData */
			/* Entry action for state 'GetData'. */
			handle->ifaceRF.data = sMRIfaceRF_getData();
     f92:	0e 94 ac 01 	call	0x358	; 0x358 <sMRIfaceRF_getData>
     f96:	9b 8b       	std	Y+19, r25	; 0x13
     f98:	8a 8b       	std	Y+18, r24	; 0x12
			handle->stateConfVector[0] = SMR_main_region_on_r1_running_RF_GetData;
     f9a:	84 e0       	ldi	r24, 0x04	; 4
     f9c:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
     f9e:	1a 82       	std	Y+2, r1	; 0x02
     fa0:	19 82       	std	Y+1, r1	; 0x01
     fa2:	34 c0       	rjmp	.+104    	; 0x100c <sMR_runCycle+0x124>
/* The reactions of state DataRecieved. */
static void sMR_react_main_region_on_r1_running_RF_DataRecieved(SMR* handle) {
	/* The reactions of state DataRecieved. */
	if (bool_true) { 
		/* Default exit sequence for state DataRecieved */
		handle->stateConfVector[0] = SMR_last_state;
     fa4:	87 e0       	ldi	r24, 0x07	; 7
     fa6:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
     fa8:	1a 82       	std	Y+2, r1	; 0x02
     faa:	19 82       	std	Y+1, r1	; 0x01
		/* Default enter sequence for state SendSuccess */
		/* Entry action for state 'SendSuccess'. */
		handle->ifaceRF.result = sMRIfaceRF_sendCheck();
     fac:	0e 94 11 02 	call	0x422	; 0x422 <sMRIfaceRF_sendCheck>
     fb0:	8e 8b       	std	Y+22, r24	; 0x16
		handle->stateConfVector[0] = SMR_main_region_on_r1_running_RF_SendSuccess;
     fb2:	86 e0       	ldi	r24, 0x06	; 6
     fb4:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
     fb6:	1a 82       	std	Y+2, r1	; 0x02
     fb8:	19 82       	std	Y+1, r1	; 0x01
     fba:	28 c0       	rjmp	.+80     	; 0x100c <sMR_runCycle+0x124>
}

/* The reactions of state SendSuccess. */
static void sMR_react_main_region_on_r1_running_RF_SendSuccess(SMR* handle) {
	/* The reactions of state SendSuccess. */
	if (handle->ifaceRF.result == bool_true) { 
     fbc:	8e 89       	ldd	r24, Y+22	; 0x16
     fbe:	88 23       	and	r24, r24
     fc0:	69 f0       	breq	.+26     	; 0xfdc <sMR_runCycle+0xf4>
		/* Default exit sequence for state SendSuccess */
		handle->stateConfVector[0] = SMR_last_state;
     fc2:	87 e0       	ldi	r24, 0x07	; 7
     fc4:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
     fc6:	1a 82       	std	Y+2, r1	; 0x02
     fc8:	19 82       	std	Y+1, r1	; 0x01
		/* Default enter sequence for state GetData */
		/* Entry action for state 'GetData'. */
		handle->ifaceRF.data = sMRIfaceRF_getData();
     fca:	0e 94 ac 01 	call	0x358	; 0x358 <sMRIfaceRF_getData>
     fce:	9b 8b       	std	Y+19, r25	; 0x13
     fd0:	8a 8b       	std	Y+18, r24	; 0x12
		handle->stateConfVector[0] = SMR_main_region_on_r1_running_RF_GetData;
     fd2:	84 e0       	ldi	r24, 0x04	; 4
     fd4:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
     fd6:	1a 82       	std	Y+2, r1	; 0x02
     fd8:	19 82       	std	Y+1, r1	; 0x01
     fda:	18 c0       	rjmp	.+48     	; 0x100c <sMR_runCycle+0x124>
	}  else {
		if (handle->ifaceRF.result == bool_false) { 
			/* Default enter sequence for state SendSuccess */
			/* Entry action for state 'SendSuccess'. */
			handle->ifaceRF.result = sMRIfaceRF_sendCheck();
     fdc:	0e 94 11 02 	call	0x422	; 0x422 <sMRIfaceRF_sendCheck>
     fe0:	8e 8b       	std	Y+22, r24	; 0x16
			handle->stateConfVector[0] = SMR_main_region_on_r1_running_RF_SendSuccess;
     fe2:	86 e0       	ldi	r24, 0x06	; 6
     fe4:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
     fe6:	1a 82       	std	Y+2, r1	; 0x02
     fe8:	19 82       	std	Y+1, r1	; 0x01
     fea:	10 c0       	rjmp	.+32     	; 0x100c <sMR_runCycle+0x124>
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMR_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	9a 81       	ldd	r25, Y+2	; 0x02
     ff0:	01 96       	adiw	r24, 0x01	; 1
     ff2:	9a 83       	std	Y+2, r25	; 0x02
     ff4:	89 83       	std	Y+1, r24	; 0x01

void sMR_runCycle(SMR* handle) {
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	09 f4       	brne	.+2      	; 0xffc <sMR_runCycle+0x114>
     ffa:	7b cf       	rjmp	.-266    	; 0xef2 <sMR_runCycle+0xa>
	}
	sMR_exitaction(handle);
}

static void clearInEvents(SMR* handle) {
	handle->ifaceKEYPAD.key_pressed_raised = bool_false;
     ffc:	1c 86       	std	Y+12, r1	; 0x0c
	handle->ifaceUART.DataRecieved_raised = bool_false;
     ffe:	19 8a       	std	Y+17, r1	; 0x11
	handle->ifaceRF.DataRecieved_raised = bool_false;
    1000:	1f 8e       	std	Y+31, r1	; 0x1f
	handle->iface.switchOff_raised = bool_false;
    1002:	1d aa       	sts	0x9d, r17
	handle->iface.switchOn_raised = bool_false;
    1004:	1e aa       	sts	0x9e, r17
			break;
		}
	}
	
	clearInEvents(handle);
}
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	08 95       	ret
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMR_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	9a 81       	ldd	r25, Y+2	; 0x02
    1010:	01 96       	adiw	r24, 0x01	; 1
    1012:	9a 83       	std	Y+2, r25	; 0x02
    1014:	89 83       	std	Y+1, r24	; 0x01
    1016:	f2 cf       	rjmp	.-28     	; 0xffc <sMR_runCycle+0x114>

00001018 <sMR_raiseTimeEvent>:
	
	clearInEvents(handle);
}

void sMR_raiseTimeEvent(SMR* handle, sc_eventid evid) {
	if ( ((intptr_t)evid) >= ((intptr_t)&(handle->timeEvents))
    1018:	c7 96       	adiw	r24, 0x37	; 55
    101a:	68 17       	cp	r22, r24
    101c:	79 07       	cpc	r23, r25
    101e:	3c f0       	brlt	.+14     	; 0x102e <sMR_raiseTimeEvent+0x16>
		&&  ((intptr_t)evid) < ((intptr_t)&(handle->timeEvents)) + sizeof(SMRTimeEvents)) {
    1020:	01 96       	adiw	r24, 0x01	; 1
    1022:	68 17       	cp	r22, r24
    1024:	79 07       	cpc	r23, r25
    1026:	18 f4       	brcc	.+6      	; 0x102e <sMR_raiseTimeEvent+0x16>
		*(sc_boolean*)evid = bool_true;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	fb 01       	movw	r30, r22
    102c:	80 83       	st	Z, r24
    102e:	08 95       	ret

00001030 <sMR_isActive>:
	}		
}

sc_boolean sMR_isActive(SMR* handle, SMRStates state) {
    1030:	fc 01       	movw	r30, r24
	switch (state) {
    1032:	63 30       	cpi	r22, 0x03	; 3
    1034:	09 f1       	breq	.+66     	; 0x1078 <sMR_isActive+0x48>
    1036:	64 30       	cpi	r22, 0x04	; 4
    1038:	28 f4       	brcc	.+10     	; 0x1044 <sMR_isActive+0x14>
    103a:	61 30       	cpi	r22, 0x01	; 1
    103c:	81 f0       	breq	.+32     	; 0x105e <sMR_isActive+0x2e>
    103e:	62 30       	cpi	r22, 0x02	; 2
    1040:	a0 f4       	brcc	.+40     	; 0x106a <sMR_isActive+0x3a>
    1042:	07 c0       	rjmp	.+14     	; 0x1052 <sMR_isActive+0x22>
    1044:	65 30       	cpi	r22, 0x05	; 5
    1046:	21 f1       	breq	.+72     	; 0x1090 <sMR_isActive+0x60>
    1048:	65 30       	cpi	r22, 0x05	; 5
    104a:	e0 f0       	brcs	.+56     	; 0x1084 <sMR_isActive+0x54>
    104c:	66 30       	cpi	r22, 0x06	; 6
    104e:	61 f5       	brne	.+88     	; 0x10a8 <sMR_isActive+0x78>
    1050:	25 c0       	rjmp	.+74     	; 0x109c <sMR_isActive+0x6c>
		case SMR_main_region_on : 
			return (sc_boolean) (handle->stateConfVector[0] >= SMR_main_region_on
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 81       	ld	r25, Z
    1056:	97 30       	cpi	r25, 0x07	; 7
    1058:	40 f1       	brcs	.+80     	; 0x10aa <sMR_isActive+0x7a>
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	08 95       	ret
				&& handle->stateConfVector[0] <= SMR_main_region_on_r1_running_RF_SendSuccess);
		case SMR_main_region_on_r1_Init : 
			return (sc_boolean) (handle->stateConfVector[0] == SMR_main_region_on_r1_Init
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 81       	ld	r25, Z
    1062:	91 30       	cpi	r25, 0x01	; 1
    1064:	11 f1       	breq	.+68     	; 0x10aa <sMR_isActive+0x7a>
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	08 95       	ret
			);
		case SMR_main_region_on_r1_running : 
			return (sc_boolean) (handle->stateConfVector[0] >= SMR_main_region_on_r1_running
    106a:	90 81       	ld	r25, Z
    106c:	92 50       	subi	r25, 0x02	; 2
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	95 30       	cpi	r25, 0x05	; 5
    1072:	d8 f0       	brcs	.+54     	; 0x10aa <sMR_isActive+0x7a>
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	08 95       	ret
				&& handle->stateConfVector[0] <= SMR_main_region_on_r1_running_RF_SendSuccess);
		case SMR_main_region_on_r1_running_RF_Ready : 
			return (sc_boolean) (handle->stateConfVector[0] == SMR_main_region_on_r1_running_RF_Ready
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 81       	ld	r25, Z
    107c:	93 30       	cpi	r25, 0x03	; 3
    107e:	a9 f0       	breq	.+42     	; 0x10aa <sMR_isActive+0x7a>
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	08 95       	ret
			);
		case SMR_main_region_on_r1_running_RF_GetData : 
			return (sc_boolean) (handle->stateConfVector[0] == SMR_main_region_on_r1_running_RF_GetData
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 81       	ld	r25, Z
    1088:	94 30       	cpi	r25, 0x04	; 4
    108a:	79 f0       	breq	.+30     	; 0x10aa <sMR_isActive+0x7a>
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	08 95       	ret
			);
		case SMR_main_region_on_r1_running_RF_DataRecieved : 
			return (sc_boolean) (handle->stateConfVector[0] == SMR_main_region_on_r1_running_RF_DataRecieved
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 81       	ld	r25, Z
    1094:	95 30       	cpi	r25, 0x05	; 5
    1096:	49 f0       	breq	.+18     	; 0x10aa <sMR_isActive+0x7a>
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	08 95       	ret
			);
		case SMR_main_region_on_r1_running_RF_SendSuccess : 
			return (sc_boolean) (handle->stateConfVector[0] == SMR_main_region_on_r1_running_RF_SendSuccess
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 81       	ld	r25, Z
    10a0:	96 30       	cpi	r25, 0x06	; 6
    10a2:	19 f0       	breq	.+6      	; 0x10aa <sMR_isActive+0x7a>
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	08 95       	ret
			);
		default: return bool_false;
    10a8:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    10aa:	08 95       	ret

000010ac <sMRIfaceKEYPAD_raise_key_pressed>:



void sMRIfaceKEYPAD_raise_key_pressed(SMR* handle) {
	handle->ifaceKEYPAD.key_pressed_raised = bool_true;
    10ac:	21 e0       	ldi	r18, 0x01	; 1
    10ae:	fc 01       	movw	r30, r24
    10b0:	24 87       	std	Z+12, r18	; 0x0c
}
    10b2:	08 95       	ret

000010b4 <sMRIfaceKEYPAD_get_key>:


sc_integer sMRIfaceKEYPAD_get_key(SMR* handle) {
    10b4:	fc 01       	movw	r30, r24
	return handle->ifaceKEYPAD.key;
    10b6:	63 81       	ldd	r22, Z+3	; 0x03
    10b8:	74 81       	ldd	r23, Z+4	; 0x04
}
    10ba:	85 81       	ldd	r24, Z+5	; 0x05
    10bc:	96 81       	ldd	r25, Z+6	; 0x06
    10be:	08 95       	ret

000010c0 <sMRIfaceKEYPAD_set_key>:
void sMRIfaceKEYPAD_set_key(SMR* handle, sc_integer value) {
	handle->ifaceKEYPAD.key = value;
    10c0:	fc 01       	movw	r30, r24
    10c2:	43 83       	std	Z+3, r20	; 0x03
    10c4:	54 83       	std	Z+4, r21	; 0x04
    10c6:	65 83       	std	Z+5, r22	; 0x05
    10c8:	76 83       	std	Z+6, r23	; 0x06
}
    10ca:	08 95       	ret

000010cc <sMRIfaceKEYPAD_get_lastkey>:
sc_integer sMRIfaceKEYPAD_get_lastkey(SMR* handle) {
    10cc:	fc 01       	movw	r30, r24
	return handle->ifaceKEYPAD.lastkey;
    10ce:	67 81       	ldd	r22, Z+7	; 0x07
    10d0:	70 85       	ldd	r23, Z+8	; 0x08
}
    10d2:	81 85       	ldd	r24, Z+9	; 0x09
    10d4:	92 85       	ldd	r25, Z+10	; 0x0a
    10d6:	08 95       	ret

000010d8 <sMRIfaceKEYPAD_set_lastkey>:
void sMRIfaceKEYPAD_set_lastkey(SMR* handle, sc_integer value) {
	handle->ifaceKEYPAD.lastkey = value;
    10d8:	fc 01       	movw	r30, r24
    10da:	47 83       	std	Z+7, r20	; 0x07
    10dc:	50 87       	std	Z+8, r21	; 0x08
    10de:	61 87       	std	Z+9, r22	; 0x09
    10e0:	72 87       	std	Z+10, r23	; 0x0a
}
    10e2:	08 95       	ret

000010e4 <sMRIfaceKEYPAD_get_key_down>:
sc_boolean sMRIfaceKEYPAD_get_key_down(SMR* handle) {
	return handle->ifaceKEYPAD.key_down;
}
    10e4:	fc 01       	movw	r30, r24
    10e6:	83 85       	ldd	r24, Z+11	; 0x0b
    10e8:	08 95       	ret

000010ea <sMRIfaceKEYPAD_set_key_down>:
void sMRIfaceKEYPAD_set_key_down(SMR* handle, sc_boolean value) {
	handle->ifaceKEYPAD.key_down = value;
    10ea:	fc 01       	movw	r30, r24
    10ec:	63 87       	std	Z+11, r22	; 0x0b
}
    10ee:	08 95       	ret

000010f0 <sMRIfaceUART_raise_dataRecieved>:
void sMRIfaceUART_raise_dataRecieved(SMR* handle) {
	handle->ifaceUART.DataRecieved_raised = bool_true;
    10f0:	21 e0       	ldi	r18, 0x01	; 1
    10f2:	fc 01       	movw	r30, r24
    10f4:	21 8b       	std	Z+17, r18	; 0x11
}
    10f6:	08 95       	ret

000010f8 <sMRIfaceUART_get_data>:


sc_string sMRIfaceUART_get_data(SMR* handle) {
    10f8:	fc 01       	movw	r30, r24
	return handle->ifaceUART.data;
}
    10fa:	85 85       	ldd	r24, Z+13	; 0x0d
    10fc:	96 85       	ldd	r25, Z+14	; 0x0e
    10fe:	08 95       	ret

00001100 <sMRIfaceUART_set_data>:
void sMRIfaceUART_set_data(SMR* handle, sc_string value) {
	handle->ifaceUART.data = value;
    1100:	fc 01       	movw	r30, r24
    1102:	76 87       	std	Z+14, r23	; 0x0e
    1104:	65 87       	std	Z+13, r22	; 0x0d
}
    1106:	08 95       	ret

00001108 <sMRIfaceUART_get_lastdata>:
sc_string sMRIfaceUART_get_lastdata(SMR* handle) {
    1108:	fc 01       	movw	r30, r24
	return handle->ifaceUART.lastdata;
}
    110a:	87 85       	ldd	r24, Z+15	; 0x0f
    110c:	90 89       	ldd	r25, Z+16	; 0x10
    110e:	08 95       	ret

00001110 <sMRIfaceUART_set_lastdata>:
void sMRIfaceUART_set_lastdata(SMR* handle, sc_string value) {
	handle->ifaceUART.lastdata = value;
    1110:	fc 01       	movw	r30, r24
    1112:	70 8b       	std	Z+16, r23	; 0x10
    1114:	67 87       	std	Z+15, r22	; 0x0f
}
    1116:	08 95       	ret

00001118 <sMRIfaceRF_raise_dataRecieved>:
void sMRIfaceRF_raise_dataRecieved(SMR* handle) {
	handle->ifaceRF.DataRecieved_raised = bool_true;
    1118:	21 e0       	ldi	r18, 0x01	; 1
    111a:	fc 01       	movw	r30, r24
    111c:	27 8f       	std	Z+31, r18	; 0x1f
}
    111e:	08 95       	ret

00001120 <sMRIfaceRF_get_data>:


sc_string sMRIfaceRF_get_data(SMR* handle) {
    1120:	fc 01       	movw	r30, r24
	return handle->ifaceRF.data;
}
    1122:	82 89       	ldd	r24, Z+18	; 0x12
    1124:	93 89       	ldd	r25, Z+19	; 0x13
    1126:	08 95       	ret

00001128 <sMRIfaceRF_set_data>:
void sMRIfaceRF_set_data(SMR* handle, sc_string value) {
	handle->ifaceRF.data = value;
    1128:	fc 01       	movw	r30, r24
    112a:	73 8b       	std	Z+19, r23	; 0x13
    112c:	62 8b       	std	Z+18, r22	; 0x12
}
    112e:	08 95       	ret

00001130 <sMRIfaceRF_get_lastdata>:
sc_string sMRIfaceRF_get_lastdata(SMR* handle) {
    1130:	fc 01       	movw	r30, r24
	return handle->ifaceRF.lastdata;
}
    1132:	84 89       	ldd	r24, Z+20	; 0x14
    1134:	95 89       	ldd	r25, Z+21	; 0x15
    1136:	08 95       	ret

00001138 <sMRIfaceRF_set_lastdata>:
void sMRIfaceRF_set_lastdata(SMR* handle, sc_string value) {
	handle->ifaceRF.lastdata = value;
    1138:	fc 01       	movw	r30, r24
    113a:	75 8b       	std	Z+21, r23	; 0x15
    113c:	64 8b       	std	Z+20, r22	; 0x14
}
    113e:	08 95       	ret

00001140 <sMRIfaceRF_get_result>:
sc_boolean sMRIfaceRF_get_result(SMR* handle) {
	return handle->ifaceRF.result;
}
    1140:	fc 01       	movw	r30, r24
    1142:	86 89       	ldd	r24, Z+22	; 0x16
    1144:	08 95       	ret

00001146 <sMRIfaceRF_set_result>:
void sMRIfaceRF_set_result(SMR* handle, sc_boolean value) {
	handle->ifaceRF.result = value;
    1146:	fc 01       	movw	r30, r24
    1148:	66 8b       	std	Z+22, r22	; 0x16
}
    114a:	08 95       	ret

0000114c <sMRIfaceRF_get_retry>:
sc_integer sMRIfaceRF_get_retry(SMR* handle) {
    114c:	fc 01       	movw	r30, r24
	return handle->ifaceRF.retry;
    114e:	67 89       	ldd	r22, Z+23	; 0x17
    1150:	70 8d       	ldd	r23, Z+24	; 0x18
}
    1152:	81 8d       	ldd	r24, Z+25	; 0x19
    1154:	92 8d       	ldd	r25, Z+26	; 0x1a
    1156:	08 95       	ret

00001158 <sMRIfaceRF_set_retry>:
void sMRIfaceRF_set_retry(SMR* handle, sc_integer value) {
	handle->ifaceRF.retry = value;
    1158:	fc 01       	movw	r30, r24
    115a:	47 8b       	std	Z+23, r20	; 0x17
    115c:	50 8f       	std	Z+24, r21	; 0x18
    115e:	61 8f       	std	Z+25, r22	; 0x19
    1160:	72 8f       	std	Z+26, r23	; 0x1a
}
    1162:	08 95       	ret

00001164 <sMRIfaceRF_get_iD>:
sc_integer sMRIfaceRF_get_iD(SMR* handle) {
    1164:	fc 01       	movw	r30, r24
	return handle->ifaceRF.ID;
    1166:	63 8d       	ldd	r22, Z+27	; 0x1b
    1168:	74 8d       	ldd	r23, Z+28	; 0x1c
}
    116a:	85 8d       	ldd	r24, Z+29	; 0x1d
    116c:	96 8d       	ldd	r25, Z+30	; 0x1e
    116e:	08 95       	ret

00001170 <sMRIfaceRF_set_iD>:
void sMRIfaceRF_set_iD(SMR* handle, sc_integer value) {
	handle->ifaceRF.ID = value;
    1170:	fc 01       	movw	r30, r24
    1172:	43 8f       	std	Z+27, r20	; 0x1b
    1174:	54 8f       	std	Z+28, r21	; 0x1c
    1176:	65 8f       	std	Z+29, r22	; 0x1d
    1178:	76 8f       	std	Z+30, r23	; 0x1e
}
    117a:	08 95       	ret

0000117c <sMRIfaceDISH_get_iD>:


sc_integer sMRIfaceDISH_get_iD(SMR* handle) {
    117c:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.ID;
    117e:	60 a1       	lds	r22, 0x40
    1180:	71 a1       	lds	r23, 0x41
}
    1182:	82 a1       	lds	r24, 0x42
    1184:	93 a1       	lds	r25, 0x43
    1186:	08 95       	ret

00001188 <sMRIfaceDISH_set_iD>:
void sMRIfaceDISH_set_iD(SMR* handle, sc_integer value) {
	handle->ifaceDISH.ID = value;
    1188:	fc 01       	movw	r30, r24
    118a:	40 a3       	lds	r20, 0x50
    118c:	51 a3       	lds	r21, 0x51
    118e:	62 a3       	lds	r22, 0x52
    1190:	73 a3       	lds	r23, 0x53
}
    1192:	08 95       	ret

00001194 <sMRIfaceDISH_get_amount>:
sc_integer sMRIfaceDISH_get_amount(SMR* handle) {
    1194:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.amount;
    1196:	64 a1       	lds	r22, 0x44
    1198:	75 a1       	lds	r23, 0x45
}
    119a:	86 a1       	lds	r24, 0x46
    119c:	97 a1       	lds	r25, 0x47
    119e:	08 95       	ret

000011a0 <sMRIfaceDISH_set_amount>:
void sMRIfaceDISH_set_amount(SMR* handle, sc_integer value) {
	handle->ifaceDISH.amount = value;
    11a0:	fc 01       	movw	r30, r24
    11a2:	44 a3       	lds	r20, 0x54
    11a4:	55 a3       	lds	r21, 0x55
    11a6:	66 a3       	lds	r22, 0x56
    11a8:	77 a3       	lds	r23, 0x57
}
    11aa:	08 95       	ret

000011ac <sMRIfaceDISH_get_pos>:
sc_integer sMRIfaceDISH_get_pos(SMR* handle) {
    11ac:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.pos;
    11ae:	60 a5       	lds	r22, 0x60
    11b0:	71 a5       	lds	r23, 0x61
}
    11b2:	82 a5       	lds	r24, 0x62
    11b4:	93 a5       	lds	r25, 0x63
    11b6:	08 95       	ret

000011b8 <sMRIfaceDISH_set_pos>:
void sMRIfaceDISH_set_pos(SMR* handle, sc_integer value) {
	handle->ifaceDISH.pos = value;
    11b8:	fc 01       	movw	r30, r24
    11ba:	40 a7       	lds	r20, 0x70
    11bc:	51 a7       	lds	r21, 0x71
    11be:	62 a7       	lds	r22, 0x72
    11c0:	73 a7       	lds	r23, 0x73
}
    11c2:	08 95       	ret

000011c4 <sMRIface_raise_switchOff>:
void sMRIface_raise_switchOff(SMR* handle) {
	handle->iface.switchOff_raised = bool_true;
    11c4:	21 e0       	ldi	r18, 0x01	; 1
    11c6:	fc 01       	movw	r30, r24
    11c8:	25 ab       	sts	0x55, r18
}
    11ca:	08 95       	ret

000011cc <sMRIface_raise_switchOn>:
void sMRIface_raise_switchOn(SMR* handle) {
	handle->iface.switchOn_raised = bool_true;
    11cc:	21 e0       	ldi	r18, 0x01	; 1
    11ce:	fc 01       	movw	r30, r24
    11d0:	26 ab       	sts	0x56, r18
}
    11d2:	08 95       	ret

000011d4 <sMRIface_get_lightOn>:


sc_boolean sMRIface_get_lightOn(SMR* handle) {
	return handle->iface.lightOn;
}
    11d4:	fc 01       	movw	r30, r24
    11d6:	84 a5       	lds	r24, 0x64
    11d8:	08 95       	ret

000011da <sMRIface_set_lightOn>:
void sMRIface_set_lightOn(SMR* handle, sc_boolean value) {
	handle->iface.lightOn = value;
    11da:	fc 01       	movw	r30, r24
    11dc:	64 a7       	lds	r22, 0x74
}
    11de:	08 95       	ret

000011e0 <sMRIface_get_menuId>:
sc_integer sMRIface_get_menuId(SMR* handle) {
    11e0:	fc 01       	movw	r30, r24
	return handle->iface.menuId;
    11e2:	65 a5       	lds	r22, 0x65
    11e4:	76 a5       	lds	r23, 0x66
}
    11e6:	87 a5       	lds	r24, 0x67
    11e8:	90 a9       	sts	0x40, r25
    11ea:	08 95       	ret

000011ec <sMRIface_set_menuId>:
void sMRIface_set_menuId(SMR* handle, sc_integer value) {
	handle->iface.menuId = value;
    11ec:	fc 01       	movw	r30, r24
    11ee:	45 a7       	lds	r20, 0x75
    11f0:	56 a7       	lds	r21, 0x76
    11f2:	67 a7       	lds	r22, 0x77
    11f4:	70 ab       	sts	0x50, r23
}
    11f6:	08 95       	ret

000011f8 <sMRIface_get_tableId>:
sc_integer sMRIface_get_tableId(SMR* handle) {
    11f8:	fc 01       	movw	r30, r24
	return handle->iface.tableId;
    11fa:	61 a9       	sts	0x41, r22
    11fc:	72 a9       	sts	0x42, r23
}
    11fe:	83 a9       	sts	0x43, r24
    1200:	94 a9       	sts	0x44, r25
    1202:	08 95       	ret

00001204 <sMRIface_set_tableId>:
void sMRIface_set_tableId(SMR* handle, sc_integer value) {
	handle->iface.tableId = value;
    1204:	fc 01       	movw	r30, r24
    1206:	41 ab       	sts	0x51, r20
    1208:	52 ab       	sts	0x52, r21
    120a:	63 ab       	sts	0x53, r22
    120c:	74 ab       	sts	0x54, r23
}
    120e:	08 95       	ret

00001210 <spi_init>:

/*
 * spi initialize
 */
void spi_init() {
    SPI_DDR &= ~((1<<SPI_MOSI) | (1<<SPI_MISO) | (1<<SPI_SS) | (1<<SPI_SCK)); //input
    1210:	87 b3       	in	r24, 0x17	; 23
    1212:	80 7f       	andi	r24, 0xF0	; 240
    1214:	87 bb       	out	0x17, r24	; 23
    SPI_DDR |= ((1<<SPI_MOSI) | (1<<SPI_SS) | (1<<SPI_SCK)); //output
    1216:	87 b3       	in	r24, 0x17	; 23
    1218:	87 60       	ori	r24, 0x07	; 7
    121a:	87 bb       	out	0x17, r24	; 23

    SPCR = ((1<<SPE)|               // SPI Enable
    121c:	81 e5       	ldi	r24, 0x51	; 81
    121e:	8d b9       	out	0x0d, r24	; 13
            (1<<MSTR)|              // Master/Slave select
            (0<<SPR1)|(1<<SPR0)|    // SPI Clock Rate
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR = (1<<SPI2X); // Double SPI Speed Bit
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	8e b9       	out	0x0e, r24	; 14
}
    1224:	08 95       	ret

00001226 <spi_writereadbyte>:

/*
 * spi write one byte and read it back
 */
uint8_t spi_writereadbyte(uint8_t data) {
    SPDR = data;
    1226:	8f b9       	out	0x0f, r24	; 15
    while((SPSR & (1<<SPIF)) == 0);
    1228:	77 9b       	sbis	0x0e, 7	; 14
    122a:	fe cf       	rjmp	.-4      	; 0x1228 <spi_writereadbyte+0x2>
    return SPDR;
    122c:	8f b1       	in	r24, 0x0f	; 15
}
    122e:	08 95       	ret

00001230 <TimerInit>:

TimeEvent tmrEvent[10];
int tmrCount=0;

void TimerInit() {
	TCCR0 = 0b011; //CS02=0, CS01=1, CS00=0, chon Prescaler=64
    1230:	83 e0       	ldi	r24, 0x03	; 3
    1232:	83 bf       	out	0x33, r24	; 51
	//Xung chip la 8MHZ -> 1 xung mat 1us/8 = 0.125 us
	//Prescaler=64, kich 256 lan moi tang 1 lan trong bo dem Timer-> Ton 8us
	//Vay, de Timer ngat moi 1ms, ta can: 1000/8=125 lan dem.
	//Ma Timer ngat khi bo dem toi 255, ta can set gia tri ban dau cho bo dem la: 255-125+1=131
	TCNT0=131;
    1234:	83 e8       	ldi	r24, 0x83	; 131
    1236:	82 bf       	out	0x32, r24	; 50
	TIMSK=(1<<TOIE0); //Cho phep ngat khi cho tran o T/C0
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	87 bf       	out	0x37, r24	; 55
	tmrCount=0;
    123c:	10 92 0d 02 	sts	0x020D, r1
    1240:	10 92 0c 02 	sts	0x020C, r1
	sei();
    1244:	78 94       	sei
}
    1246:	08 95       	ret

00001248 <TimerSet>:

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
    1248:	cf 92       	push	r12
    124a:	df 92       	push	r13
    124c:	ef 92       	push	r14
    124e:	ff 92       	push	r15
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
    1254:	ec 01       	movw	r28, r24
    1256:	6a 01       	movw	r12, r20
    1258:	7b 01       	movw	r14, r22
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
    125a:	40 91 0c 02 	lds	r20, 0x020C
    125e:	50 91 0d 02 	lds	r21, 0x020D
    1262:	14 16       	cp	r1, r20
    1264:	15 06       	cpc	r1, r21
    1266:	e4 f4       	brge	.+56     	; 0x12a0 <TimerSet+0x58>
    1268:	e4 e2       	ldi	r30, 0x24	; 36
    126a:	f2 e0       	ldi	r31, 0x02	; 2
    126c:	df 01       	movw	r26, r30
    126e:	16 96       	adiw	r26, 0x06	; 6
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
	sei();
}

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
    1274:	70 e0       	ldi	r23, 0x00	; 0
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
			check=true;
			tmrEvent[i].count=0;
			tmrEvent[i].max=max;
			tmrEvent[i].enabled=true;
    1276:	61 e0       	ldi	r22, 0x01	; 1

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
    1278:	80 81       	ld	r24, Z
    127a:	91 81       	ldd	r25, Z+1	; 0x01
    127c:	8c 17       	cp	r24, r28
    127e:	9d 07       	cpc	r25, r29
    1280:	31 f4       	brne	.+12     	; 0x128e <TimerSet+0x46>
			check=true;
			tmrEvent[i].count=0;
    1282:	13 82       	std	Z+3, r1	; 0x03
    1284:	12 82       	std	Z+2, r1	; 0x02
			tmrEvent[i].max=max;
    1286:	d5 82       	std	Z+5, r13	; 0x05
    1288:	c4 82       	std	Z+4, r12	; 0x04
			tmrEvent[i].enabled=true;
    128a:	6c 93       	st	X, r22
//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
			check=true;
    128c:	76 2f       	mov	r23, r22
}

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
    128e:	2f 5f       	subi	r18, 0xFF	; 255
    1290:	3f 4f       	sbci	r19, 0xFF	; 255
    1292:	37 96       	adiw	r30, 0x07	; 7
    1294:	17 96       	adiw	r26, 0x07	; 7
    1296:	24 17       	cp	r18, r20
    1298:	35 07       	cpc	r19, r21
    129a:	74 f3       	brlt	.-36     	; 0x1278 <TimerSet+0x30>
			tmrEvent[i].count=0;
			tmrEvent[i].max=max;
			tmrEvent[i].enabled=true;
		}
	}
	if (!check) {
    129c:	77 23       	and	r23, r23
    129e:	c9 f4       	brne	.+50     	; 0x12d2 <TimerSet+0x8a>
		tmrEvent[tmrCount].EventId=evenId;
    12a0:	fa 01       	movw	r30, r20
    12a2:	ee 0f       	add	r30, r30
    12a4:	ff 1f       	adc	r31, r31
    12a6:	ee 0f       	add	r30, r30
    12a8:	ff 1f       	adc	r31, r31
    12aa:	ee 0f       	add	r30, r30
    12ac:	ff 1f       	adc	r31, r31
    12ae:	e4 1b       	sub	r30, r20
    12b0:	f5 0b       	sbc	r31, r21
    12b2:	ec 5d       	subi	r30, 0xDC	; 220
    12b4:	fd 4f       	sbci	r31, 0xFD	; 253
    12b6:	d1 83       	std	Z+1, r29	; 0x01
    12b8:	c0 83       	st	Z, r28
		tmrEvent[tmrCount].count=0;
    12ba:	13 82       	std	Z+3, r1	; 0x03
    12bc:	12 82       	std	Z+2, r1	; 0x02
		tmrEvent[tmrCount].max=max;
    12be:	d5 82       	std	Z+5, r13	; 0x05
    12c0:	c4 82       	std	Z+4, r12	; 0x04
		tmrEvent[tmrCount].enabled=true;
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	86 83       	std	Z+6, r24	; 0x06
		tmrCount++;
    12c6:	4f 5f       	subi	r20, 0xFF	; 255
    12c8:	5f 4f       	sbci	r21, 0xFF	; 255
    12ca:	50 93 0d 02 	sts	0x020D, r21
    12ce:	40 93 0c 02 	sts	0x020C, r20
	}
}
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	ff 90       	pop	r15
    12d8:	ef 90       	pop	r14
    12da:	df 90       	pop	r13
    12dc:	cf 90       	pop	r12
    12de:	08 95       	ret

000012e0 <TimerUnSet>:

void TimerUnSet(const sc_eventid evenId) {
    12e0:	dc 01       	movw	r26, r24
	for (int i=0;i<tmrCount;i++) {
    12e2:	60 91 0c 02 	lds	r22, 0x020C
    12e6:	70 91 0d 02 	lds	r23, 0x020D
    12ea:	16 16       	cp	r1, r22
    12ec:	17 06       	cpc	r1, r23
    12ee:	64 f5       	brge	.+88     	; 0x1348 <TimerUnSet+0x68>
		if (tmrEvent[i].EventId==evenId) {
    12f0:	80 91 24 02 	lds	r24, 0x0224
    12f4:	90 91 25 02 	lds	r25, 0x0225
    12f8:	8a 17       	cp	r24, r26
    12fa:	9b 07       	cpc	r25, r27
    12fc:	e1 f4       	brne	.+56     	; 0x1336 <TimerUnSet+0x56>
    12fe:	0a c0       	rjmp	.+20     	; 0x1314 <TimerUnSet+0x34>
    1300:	29 5f       	subi	r18, 0xF9	; 249
    1302:	3f 4f       	sbci	r19, 0xFF	; 255
		tmrEvent[tmrCount].enabled=true;
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
    1304:	f9 01       	movw	r30, r18
    1306:	37 97       	sbiw	r30, 0x07	; 7
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
    1308:	80 81       	ld	r24, Z
    130a:	91 81       	ldd	r25, Z+1	; 0x01
    130c:	8a 17       	cp	r24, r26
    130e:	9b 07       	cpc	r25, r27
    1310:	b1 f4       	brne	.+44     	; 0x133e <TimerUnSet+0x5e>
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <TimerUnSet+0x38>
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
	for (int i=0;i<tmrCount;i++) {
    1314:	40 e0       	ldi	r20, 0x00	; 0
    1316:	50 e0       	ldi	r21, 0x00	; 0
		if (tmrEvent[i].EventId==evenId) {
			tmrEvent[i].count=0;
    1318:	fa 01       	movw	r30, r20
    131a:	ee 0f       	add	r30, r30
    131c:	ff 1f       	adc	r31, r31
    131e:	ee 0f       	add	r30, r30
    1320:	ff 1f       	adc	r31, r31
    1322:	ee 0f       	add	r30, r30
    1324:	ff 1f       	adc	r31, r31
    1326:	e4 1b       	sub	r30, r20
    1328:	f5 0b       	sbc	r31, r21
    132a:	ec 5d       	subi	r30, 0xDC	; 220
    132c:	fd 4f       	sbci	r31, 0xFD	; 253
    132e:	13 82       	std	Z+3, r1	; 0x03
    1330:	12 82       	std	Z+2, r1	; 0x02
			tmrEvent[i].enabled=false;
    1332:	16 82       	std	Z+6, r1	; 0x06
			return;
    1334:	08 95       	ret
    1336:	2b e2       	ldi	r18, 0x2B	; 43
    1338:	32 e0       	ldi	r19, 0x02	; 2
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
	for (int i=0;i<tmrCount;i++) {
    133a:	40 e0       	ldi	r20, 0x00	; 0
    133c:	50 e0       	ldi	r21, 0x00	; 0
    133e:	4f 5f       	subi	r20, 0xFF	; 255
    1340:	5f 4f       	sbci	r21, 0xFF	; 255
    1342:	46 17       	cp	r20, r22
    1344:	57 07       	cpc	r21, r23
    1346:	e1 f6       	brne	.-72     	; 0x1300 <TimerUnSet+0x20>
    1348:	08 95       	ret

0000134a <TimerCheck>:
			return;
		}
	}
}

void TimerCheck(SMR* handle) {
    134a:	cf 92       	push	r12
    134c:	df 92       	push	r13
    134e:	ef 92       	push	r14
    1350:	ff 92       	push	r15
    1352:	0f 93       	push	r16
    1354:	1f 93       	push	r17
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	6c 01       	movw	r12, r24
	for (int i=0;i<tmrCount;i++) {
    135c:	80 91 0c 02 	lds	r24, 0x020C
    1360:	90 91 0d 02 	lds	r25, 0x020D
    1364:	18 16       	cp	r1, r24
    1366:	19 06       	cpc	r1, r25
    1368:	94 f5       	brge	.+100    	; 0x13ce <TimerCheck+0x84>
    136a:	ca e2       	ldi	r28, 0x2A	; 42
    136c:	d2 e0       	ldi	r29, 0x02	; 2
    136e:	8e 01       	movw	r16, r28
    1370:	06 50       	subi	r16, 0x06	; 6
    1372:	10 40       	sbci	r17, 0x00	; 0
    1374:	ee 24       	eor	r14, r14
    1376:	ff 24       	eor	r15, r15
		if (tmrEvent[i].enabled) {
    1378:	88 81       	ld	r24, Y
    137a:	88 23       	and	r24, r24
    137c:	d9 f0       	breq	.+54     	; 0x13b4 <TimerCheck+0x6a>
			tmrEvent[i].count++;
    137e:	d8 01       	movw	r26, r16
    1380:	12 96       	adiw	r26, 0x02	; 2
    1382:	8d 91       	ld	r24, X+
    1384:	9c 91       	ld	r25, X
    1386:	13 97       	sbiw	r26, 0x03	; 3
    1388:	01 96       	adiw	r24, 0x01	; 1
    138a:	13 96       	adiw	r26, 0x03	; 3
    138c:	9c 93       	st	X, r25
    138e:	8e 93       	st	-X, r24
    1390:	12 97       	sbiw	r26, 0x02	; 2
			if (tmrEvent[i].count==tmrEvent[i].max) {
    1392:	14 96       	adiw	r26, 0x04	; 4
    1394:	2d 91       	ld	r18, X+
    1396:	3c 91       	ld	r19, X
    1398:	15 97       	sbiw	r26, 0x05	; 5
    139a:	82 17       	cp	r24, r18
    139c:	93 07       	cpc	r25, r19
    139e:	51 f4       	brne	.+20     	; 0x13b4 <TimerCheck+0x6a>
				tmrEvent[i].count=0;
    13a0:	13 96       	adiw	r26, 0x03	; 3
    13a2:	1c 92       	st	X, r1
    13a4:	1e 92       	st	-X, r1
    13a6:	12 97       	sbiw	r26, 0x02	; 2
				tmrEvent[i].enabled=false;
    13a8:	18 82       	st	Y, r1
				sMR_raiseTimeEvent(handle,tmrEvent[i].EventId);
    13aa:	6d 91       	ld	r22, X+
    13ac:	7c 91       	ld	r23, X
    13ae:	c6 01       	movw	r24, r12
    13b0:	0e 94 0c 08 	call	0x1018	; 0x1018 <sMR_raiseTimeEvent>
		}
	}
}

void TimerCheck(SMR* handle) {
	for (int i=0;i<tmrCount;i++) {
    13b4:	08 94       	sec
    13b6:	e1 1c       	adc	r14, r1
    13b8:	f1 1c       	adc	r15, r1
    13ba:	27 96       	adiw	r28, 0x07	; 7
    13bc:	09 5f       	subi	r16, 0xF9	; 249
    13be:	1f 4f       	sbci	r17, 0xFF	; 255
    13c0:	80 91 0c 02 	lds	r24, 0x020C
    13c4:	90 91 0d 02 	lds	r25, 0x020D
    13c8:	e8 16       	cp	r14, r24
    13ca:	f9 06       	cpc	r15, r25
    13cc:	ac f2       	brlt	.-86     	; 0x1378 <TimerCheck+0x2e>
				tmrEvent[i].enabled=false;
				sMR_raiseTimeEvent(handle,tmrEvent[i].EventId);
			}
		}
	}
}
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	ff 90       	pop	r15
    13d8:	ef 90       	pop	r14
    13da:	df 90       	pop	r13
    13dc:	cf 90       	pop	r12
    13de:	08 95       	ret

000013e0 <TimerClear>:

void TimerClear() {
	free(tmrEvent);
    13e0:	84 e2       	ldi	r24, 0x24	; 36
    13e2:	92 e0       	ldi	r25, 0x02	; 2
    13e4:	0e 94 08 0b 	call	0x1610	; 0x1610 <free>
	tmrCount=0;
    13e8:	10 92 0d 02 	sts	0x020D, r1
    13ec:	10 92 0c 02 	sts	0x020C, r1
    13f0:	08 95       	ret

000013f2 <UART_Init>:
unsigned char* u_Data;

void UART_Init( unsigned int ubrr )
{
	/* Set baud rate */
	UBRR1H = (unsigned char)(ubrr>>8);
    13f2:	90 93 98 00 	sts	0x0098, r25
	UBRR1L = (unsigned char)ubrr;
    13f6:	80 93 99 00 	sts	0x0099, r24
	/* Enable receiver, transmitter and interrup when receive finish */
	UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1);
    13fa:	88 e9       	ldi	r24, 0x98	; 152
    13fc:	80 93 9a 00 	sts	0x009A, r24
	/* Set frame format: 8data, 1stop bit */
	UCSR1C = (1<<UCSZ10)|(1<<UCSZ11);
    1400:	86 e0       	ldi	r24, 0x06	; 6
    1402:	80 93 9d 00 	sts	0x009D, r24
	sei();
    1406:	78 94       	sei
}
    1408:	08 95       	ret

0000140a <uart_putc>:

void uart_putc(unsigned char chr) {
	/* Wait for empty transmit buffer */
	while ( !( UCSR1A & (1<<UDRE1)) );
    140a:	eb e9       	ldi	r30, 0x9B	; 155
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	90 81       	ld	r25, Z
    1410:	95 ff       	sbrs	r25, 5
    1412:	fd cf       	rjmp	.-6      	; 0x140e <uart_putc+0x4>
	/* Put data into buffer, sends the data */
	UDR1 = chr;
    1414:	80 93 9c 00 	sts	0x009C, r24
}
    1418:	08 95       	ret

0000141a <uart_puts>:

void uart_puts(const char* s){
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	ec 01       	movw	r28, r24
	while(*s != '\0'){
    1420:	88 81       	ld	r24, Y
    1422:	88 23       	and	r24, r24
    1424:	31 f0       	breq	.+12     	; 0x1432 <uart_puts+0x18>
	while ( !( UCSR1A & (1<<UDRE1)) );
	/* Put data into buffer, sends the data */
	UDR1 = chr;
}

void uart_puts(const char* s){
    1426:	21 96       	adiw	r28, 0x01	; 1
	while(*s != '\0'){
		uart_putc(*s);
    1428:	0e 94 05 0a 	call	0x140a	; 0x140a <uart_putc>
	/* Put data into buffer, sends the data */
	UDR1 = chr;
}

void uart_puts(const char* s){
	while(*s != '\0'){
    142c:	89 91       	ld	r24, Y+
    142e:	88 23       	and	r24, r24
    1430:	d9 f7       	brne	.-10     	; 0x1428 <uart_puts+0xe>
		uart_putc(*s);
		s++;
	}
	uart_putc('\0');
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	0e 94 05 0a 	call	0x140a	; 0x140a <uart_putc>
}
    1438:	df 91       	pop	r29
    143a:	cf 91       	pop	r28
    143c:	08 95       	ret

0000143e <uart_getc>:
unsigned char rc[32];
int rc_count=0;
void uart_getc(SMR* handle,unsigned char chr) {
	if (chr!='\0') {
    143e:	66 23       	and	r22, r22
    1440:	71 f0       	breq	.+28     	; 0x145e <uart_getc+0x20>
		rc[rc_count]=chr;
    1442:	80 91 0e 02 	lds	r24, 0x020E
    1446:	90 91 0f 02 	lds	r25, 0x020F
    144a:	fc 01       	movw	r30, r24
    144c:	e6 59       	subi	r30, 0x96	; 150
    144e:	fd 4f       	sbci	r31, 0xFD	; 253
    1450:	60 83       	st	Z, r22
		rc_count++;
    1452:	01 96       	adiw	r24, 0x01	; 1
    1454:	90 93 0f 02 	sts	0x020F, r25
    1458:	80 93 0e 02 	sts	0x020E, r24
    145c:	08 95       	ret
	} else {
		rc[rc_count]='\0';
    145e:	6a e6       	ldi	r22, 0x6A	; 106
    1460:	72 e0       	ldi	r23, 0x02	; 2
    1462:	e0 91 0e 02 	lds	r30, 0x020E
    1466:	f0 91 0f 02 	lds	r31, 0x020F
    146a:	e6 0f       	add	r30, r22
    146c:	f7 1f       	adc	r31, r23
    146e:	10 82       	st	Z, r1
		sMRIfaceRF_set_data(handle,rc);
    1470:	0e 94 94 08 	call	0x1128	; 0x1128 <sMRIfaceRF_set_data>
		rc_count=0;
    1474:	10 92 0f 02 	sts	0x020F, r1
    1478:	10 92 0e 02 	sts	0x020E, r1
    147c:	08 95       	ret

0000147e <__udivmodqi4>:
    147e:	99 1b       	sub	r25, r25
    1480:	79 e0       	ldi	r23, 0x09	; 9
    1482:	04 c0       	rjmp	.+8      	; 0x148c <__udivmodqi4_ep>

00001484 <__udivmodqi4_loop>:
    1484:	99 1f       	adc	r25, r25
    1486:	96 17       	cp	r25, r22
    1488:	08 f0       	brcs	.+2      	; 0x148c <__udivmodqi4_ep>
    148a:	96 1b       	sub	r25, r22

0000148c <__udivmodqi4_ep>:
    148c:	88 1f       	adc	r24, r24
    148e:	7a 95       	dec	r23
    1490:	c9 f7       	brne	.-14     	; 0x1484 <__udivmodqi4_loop>
    1492:	80 95       	com	r24
    1494:	08 95       	ret

00001496 <__divmodhi4>:
    1496:	97 fb       	bst	r25, 7
    1498:	09 2e       	mov	r0, r25
    149a:	07 26       	eor	r0, r23
    149c:	0a d0       	rcall	.+20     	; 0x14b2 <__divmodhi4_neg1>
    149e:	77 fd       	sbrc	r23, 7
    14a0:	04 d0       	rcall	.+8      	; 0x14aa <__divmodhi4_neg2>
    14a2:	0c d0       	rcall	.+24     	; 0x14bc <__udivmodhi4>
    14a4:	06 d0       	rcall	.+12     	; 0x14b2 <__divmodhi4_neg1>
    14a6:	00 20       	and	r0, r0
    14a8:	1a f4       	brpl	.+6      	; 0x14b0 <__divmodhi4_exit>

000014aa <__divmodhi4_neg2>:
    14aa:	70 95       	com	r23
    14ac:	61 95       	neg	r22
    14ae:	7f 4f       	sbci	r23, 0xFF	; 255

000014b0 <__divmodhi4_exit>:
    14b0:	08 95       	ret

000014b2 <__divmodhi4_neg1>:
    14b2:	f6 f7       	brtc	.-4      	; 0x14b0 <__divmodhi4_exit>
    14b4:	90 95       	com	r25
    14b6:	81 95       	neg	r24
    14b8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ba:	08 95       	ret

000014bc <__udivmodhi4>:
    14bc:	aa 1b       	sub	r26, r26
    14be:	bb 1b       	sub	r27, r27
    14c0:	51 e1       	ldi	r21, 0x11	; 17
    14c2:	07 c0       	rjmp	.+14     	; 0x14d2 <__udivmodhi4_ep>

000014c4 <__udivmodhi4_loop>:
    14c4:	aa 1f       	adc	r26, r26
    14c6:	bb 1f       	adc	r27, r27
    14c8:	a6 17       	cp	r26, r22
    14ca:	b7 07       	cpc	r27, r23
    14cc:	10 f0       	brcs	.+4      	; 0x14d2 <__udivmodhi4_ep>
    14ce:	a6 1b       	sub	r26, r22
    14d0:	b7 0b       	sbc	r27, r23

000014d2 <__udivmodhi4_ep>:
    14d2:	88 1f       	adc	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	5a 95       	dec	r21
    14d8:	a9 f7       	brne	.-22     	; 0x14c4 <__udivmodhi4_loop>
    14da:	80 95       	com	r24
    14dc:	90 95       	com	r25
    14de:	bc 01       	movw	r22, r24
    14e0:	cd 01       	movw	r24, r26
    14e2:	08 95       	ret

000014e4 <malloc>:
    14e4:	cf 93       	push	r28
    14e6:	df 93       	push	r29
    14e8:	ac 01       	movw	r20, r24
    14ea:	82 30       	cpi	r24, 0x02	; 2
    14ec:	91 05       	cpc	r25, r1
    14ee:	10 f4       	brcc	.+4      	; 0x14f4 <malloc+0x10>
    14f0:	42 e0       	ldi	r20, 0x02	; 2
    14f2:	50 e0       	ldi	r21, 0x00	; 0
    14f4:	e0 91 8e 02 	lds	r30, 0x028E
    14f8:	f0 91 8f 02 	lds	r31, 0x028F
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	a0 e0       	ldi	r26, 0x00	; 0
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	24 c0       	rjmp	.+72     	; 0x154e <malloc+0x6a>
    1506:	80 81       	ld	r24, Z
    1508:	91 81       	ldd	r25, Z+1	; 0x01
    150a:	84 17       	cp	r24, r20
    150c:	95 07       	cpc	r25, r21
    150e:	d0 f0       	brcs	.+52     	; 0x1544 <malloc+0x60>
    1510:	84 17       	cp	r24, r20
    1512:	95 07       	cpc	r25, r21
    1514:	71 f4       	brne	.+28     	; 0x1532 <malloc+0x4e>
    1516:	82 81       	ldd	r24, Z+2	; 0x02
    1518:	93 81       	ldd	r25, Z+3	; 0x03
    151a:	10 97       	sbiw	r26, 0x00	; 0
    151c:	29 f0       	breq	.+10     	; 0x1528 <malloc+0x44>
    151e:	13 96       	adiw	r26, 0x03	; 3
    1520:	9c 93       	st	X, r25
    1522:	8e 93       	st	-X, r24
    1524:	12 97       	sbiw	r26, 0x02	; 2
    1526:	2c c0       	rjmp	.+88     	; 0x1580 <malloc+0x9c>
    1528:	90 93 8f 02 	sts	0x028F, r25
    152c:	80 93 8e 02 	sts	0x028E, r24
    1530:	27 c0       	rjmp	.+78     	; 0x1580 <malloc+0x9c>
    1532:	21 15       	cp	r18, r1
    1534:	31 05       	cpc	r19, r1
    1536:	19 f0       	breq	.+6      	; 0x153e <malloc+0x5a>
    1538:	82 17       	cp	r24, r18
    153a:	93 07       	cpc	r25, r19
    153c:	18 f4       	brcc	.+6      	; 0x1544 <malloc+0x60>
    153e:	9c 01       	movw	r18, r24
    1540:	bd 01       	movw	r22, r26
    1542:	ef 01       	movw	r28, r30
    1544:	92 81       	ldd	r25, Z+2	; 0x02
    1546:	83 81       	ldd	r24, Z+3	; 0x03
    1548:	df 01       	movw	r26, r30
    154a:	e9 2f       	mov	r30, r25
    154c:	f8 2f       	mov	r31, r24
    154e:	30 97       	sbiw	r30, 0x00	; 0
    1550:	d1 f6       	brne	.-76     	; 0x1506 <malloc+0x22>
    1552:	21 15       	cp	r18, r1
    1554:	31 05       	cpc	r19, r1
    1556:	f9 f0       	breq	.+62     	; 0x1596 <malloc+0xb2>
    1558:	c9 01       	movw	r24, r18
    155a:	84 1b       	sub	r24, r20
    155c:	95 0b       	sbc	r25, r21
    155e:	84 30       	cpi	r24, 0x04	; 4
    1560:	91 05       	cpc	r25, r1
    1562:	80 f4       	brcc	.+32     	; 0x1584 <malloc+0xa0>
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	9b 81       	ldd	r25, Y+3	; 0x03
    1568:	61 15       	cp	r22, r1
    156a:	71 05       	cpc	r23, r1
    156c:	21 f0       	breq	.+8      	; 0x1576 <malloc+0x92>
    156e:	fb 01       	movw	r30, r22
    1570:	93 83       	std	Z+3, r25	; 0x03
    1572:	82 83       	std	Z+2, r24	; 0x02
    1574:	04 c0       	rjmp	.+8      	; 0x157e <malloc+0x9a>
    1576:	90 93 8f 02 	sts	0x028F, r25
    157a:	80 93 8e 02 	sts	0x028E, r24
    157e:	fe 01       	movw	r30, r28
    1580:	32 96       	adiw	r30, 0x02	; 2
    1582:	42 c0       	rjmp	.+132    	; 0x1608 <malloc+0x124>
    1584:	fe 01       	movw	r30, r28
    1586:	e8 0f       	add	r30, r24
    1588:	f9 1f       	adc	r31, r25
    158a:	41 93       	st	Z+, r20
    158c:	51 93       	st	Z+, r21
    158e:	02 97       	sbiw	r24, 0x02	; 2
    1590:	99 83       	std	Y+1, r25	; 0x01
    1592:	88 83       	st	Y, r24
    1594:	39 c0       	rjmp	.+114    	; 0x1608 <malloc+0x124>
    1596:	80 91 8c 02 	lds	r24, 0x028C
    159a:	90 91 8d 02 	lds	r25, 0x028D
    159e:	00 97       	sbiw	r24, 0x00	; 0
    15a0:	41 f4       	brne	.+16     	; 0x15b2 <malloc+0xce>
    15a2:	80 91 07 02 	lds	r24, 0x0207
    15a6:	90 91 08 02 	lds	r25, 0x0208
    15aa:	90 93 8d 02 	sts	0x028D, r25
    15ae:	80 93 8c 02 	sts	0x028C, r24
    15b2:	20 91 05 02 	lds	r18, 0x0205
    15b6:	30 91 06 02 	lds	r19, 0x0206
    15ba:	21 15       	cp	r18, r1
    15bc:	31 05       	cpc	r19, r1
    15be:	41 f4       	brne	.+16     	; 0x15d0 <malloc+0xec>
    15c0:	2d b7       	in	r18, 0x3d	; 61
    15c2:	3e b7       	in	r19, 0x3e	; 62
    15c4:	80 91 09 02 	lds	r24, 0x0209
    15c8:	90 91 0a 02 	lds	r25, 0x020A
    15cc:	28 1b       	sub	r18, r24
    15ce:	39 0b       	sbc	r19, r25
    15d0:	e0 91 8c 02 	lds	r30, 0x028C
    15d4:	f0 91 8d 02 	lds	r31, 0x028D
    15d8:	e2 17       	cp	r30, r18
    15da:	f3 07       	cpc	r31, r19
    15dc:	98 f4       	brcc	.+38     	; 0x1604 <malloc+0x120>
    15de:	2e 1b       	sub	r18, r30
    15e0:	3f 0b       	sbc	r19, r31
    15e2:	24 17       	cp	r18, r20
    15e4:	35 07       	cpc	r19, r21
    15e6:	70 f0       	brcs	.+28     	; 0x1604 <malloc+0x120>
    15e8:	ca 01       	movw	r24, r20
    15ea:	02 96       	adiw	r24, 0x02	; 2
    15ec:	28 17       	cp	r18, r24
    15ee:	39 07       	cpc	r19, r25
    15f0:	48 f0       	brcs	.+18     	; 0x1604 <malloc+0x120>
    15f2:	8e 0f       	add	r24, r30
    15f4:	9f 1f       	adc	r25, r31
    15f6:	90 93 8d 02 	sts	0x028D, r25
    15fa:	80 93 8c 02 	sts	0x028C, r24
    15fe:	41 93       	st	Z+, r20
    1600:	51 93       	st	Z+, r21
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <malloc+0x124>
    1604:	e0 e0       	ldi	r30, 0x00	; 0
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	cf 01       	movw	r24, r30
    160a:	df 91       	pop	r29
    160c:	cf 91       	pop	r28
    160e:	08 95       	ret

00001610 <free>:
    1610:	0f 93       	push	r16
    1612:	1f 93       	push	r17
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	9c 01       	movw	r18, r24
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	09 f4       	brne	.+2      	; 0x1620 <free+0x10>
    161e:	8c c0       	rjmp	.+280    	; 0x1738 <free+0x128>
    1620:	dc 01       	movw	r26, r24
    1622:	12 97       	sbiw	r26, 0x02	; 2
    1624:	13 96       	adiw	r26, 0x03	; 3
    1626:	1c 92       	st	X, r1
    1628:	1e 92       	st	-X, r1
    162a:	12 97       	sbiw	r26, 0x02	; 2
    162c:	60 91 8e 02 	lds	r22, 0x028E
    1630:	70 91 8f 02 	lds	r23, 0x028F
    1634:	61 15       	cp	r22, r1
    1636:	71 05       	cpc	r23, r1
    1638:	89 f4       	brne	.+34     	; 0x165c <free+0x4c>
    163a:	8d 91       	ld	r24, X+
    163c:	9c 91       	ld	r25, X
    163e:	11 97       	sbiw	r26, 0x01	; 1
    1640:	82 0f       	add	r24, r18
    1642:	93 1f       	adc	r25, r19
    1644:	20 91 8c 02 	lds	r18, 0x028C
    1648:	30 91 8d 02 	lds	r19, 0x028D
    164c:	28 17       	cp	r18, r24
    164e:	39 07       	cpc	r19, r25
    1650:	69 f5       	brne	.+90     	; 0x16ac <free+0x9c>
    1652:	b0 93 8d 02 	sts	0x028D, r27
    1656:	a0 93 8c 02 	sts	0x028C, r26
    165a:	6e c0       	rjmp	.+220    	; 0x1738 <free+0x128>
    165c:	fb 01       	movw	r30, r22
    165e:	40 e0       	ldi	r20, 0x00	; 0
    1660:	50 e0       	ldi	r21, 0x00	; 0
    1662:	01 c0       	rjmp	.+2      	; 0x1666 <free+0x56>
    1664:	fc 01       	movw	r30, r24
    1666:	ea 17       	cp	r30, r26
    1668:	fb 07       	cpc	r31, r27
    166a:	30 f4       	brcc	.+12     	; 0x1678 <free+0x68>
    166c:	82 81       	ldd	r24, Z+2	; 0x02
    166e:	93 81       	ldd	r25, Z+3	; 0x03
    1670:	af 01       	movw	r20, r30
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	b9 f7       	brne	.-18     	; 0x1664 <free+0x54>
    1676:	1f c0       	rjmp	.+62     	; 0x16b6 <free+0xa6>
    1678:	e9 01       	movw	r28, r18
    167a:	22 97       	sbiw	r28, 0x02	; 2
    167c:	fb 83       	std	Y+3, r31	; 0x03
    167e:	ea 83       	std	Y+2, r30	; 0x02
    1680:	08 81       	ld	r16, Y
    1682:	19 81       	ldd	r17, Y+1	; 0x01
    1684:	c9 01       	movw	r24, r18
    1686:	80 0f       	add	r24, r16
    1688:	91 1f       	adc	r25, r17
    168a:	8e 17       	cp	r24, r30
    168c:	9f 07       	cpc	r25, r31
    168e:	59 f4       	brne	.+22     	; 0x16a6 <free+0x96>
    1690:	80 81       	ld	r24, Z
    1692:	91 81       	ldd	r25, Z+1	; 0x01
    1694:	80 0f       	add	r24, r16
    1696:	91 1f       	adc	r25, r17
    1698:	02 96       	adiw	r24, 0x02	; 2
    169a:	99 83       	std	Y+1, r25	; 0x01
    169c:	88 83       	st	Y, r24
    169e:	82 81       	ldd	r24, Z+2	; 0x02
    16a0:	93 81       	ldd	r25, Z+3	; 0x03
    16a2:	9b 83       	std	Y+3, r25	; 0x03
    16a4:	8a 83       	std	Y+2, r24	; 0x02
    16a6:	41 15       	cp	r20, r1
    16a8:	51 05       	cpc	r21, r1
    16aa:	29 f4       	brne	.+10     	; 0x16b6 <free+0xa6>
    16ac:	b0 93 8f 02 	sts	0x028F, r27
    16b0:	a0 93 8e 02 	sts	0x028E, r26
    16b4:	41 c0       	rjmp	.+130    	; 0x1738 <free+0x128>
    16b6:	fa 01       	movw	r30, r20
    16b8:	b3 83       	std	Z+3, r27	; 0x03
    16ba:	a2 83       	std	Z+2, r26	; 0x02
    16bc:	c1 91       	ld	r28, Z+
    16be:	d1 91       	ld	r29, Z+
    16c0:	ec 0f       	add	r30, r28
    16c2:	fd 1f       	adc	r31, r29
    16c4:	ae 17       	cp	r26, r30
    16c6:	bf 07       	cpc	r27, r31
    16c8:	81 f4       	brne	.+32     	; 0x16ea <free+0xda>
    16ca:	f9 01       	movw	r30, r18
    16cc:	92 91       	ld	r25, -Z
    16ce:	82 91       	ld	r24, -Z
    16d0:	8c 0f       	add	r24, r28
    16d2:	9d 1f       	adc	r25, r29
    16d4:	02 96       	adiw	r24, 0x02	; 2
    16d6:	da 01       	movw	r26, r20
    16d8:	11 96       	adiw	r26, 0x01	; 1
    16da:	9c 93       	st	X, r25
    16dc:	8e 93       	st	-X, r24
    16de:	82 81       	ldd	r24, Z+2	; 0x02
    16e0:	93 81       	ldd	r25, Z+3	; 0x03
    16e2:	13 96       	adiw	r26, 0x03	; 3
    16e4:	9c 93       	st	X, r25
    16e6:	8e 93       	st	-X, r24
    16e8:	12 97       	sbiw	r26, 0x02	; 2
    16ea:	e0 e0       	ldi	r30, 0x00	; 0
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <free+0xe4>
    16f0:	fb 01       	movw	r30, r22
    16f2:	bc 01       	movw	r22, r24
    16f4:	db 01       	movw	r26, r22
    16f6:	12 96       	adiw	r26, 0x02	; 2
    16f8:	8d 91       	ld	r24, X+
    16fa:	9c 91       	ld	r25, X
    16fc:	13 97       	sbiw	r26, 0x03	; 3
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	b9 f7       	brne	.-18     	; 0x16f0 <free+0xe0>
    1702:	cb 01       	movw	r24, r22
    1704:	02 96       	adiw	r24, 0x02	; 2
    1706:	2d 91       	ld	r18, X+
    1708:	3c 91       	ld	r19, X
    170a:	11 97       	sbiw	r26, 0x01	; 1
    170c:	82 0f       	add	r24, r18
    170e:	93 1f       	adc	r25, r19
    1710:	20 91 8c 02 	lds	r18, 0x028C
    1714:	30 91 8d 02 	lds	r19, 0x028D
    1718:	28 17       	cp	r18, r24
    171a:	39 07       	cpc	r19, r25
    171c:	69 f4       	brne	.+26     	; 0x1738 <free+0x128>
    171e:	30 97       	sbiw	r30, 0x00	; 0
    1720:	29 f4       	brne	.+10     	; 0x172c <free+0x11c>
    1722:	10 92 8f 02 	sts	0x028F, r1
    1726:	10 92 8e 02 	sts	0x028E, r1
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <free+0x120>
    172c:	13 82       	std	Z+3, r1	; 0x03
    172e:	12 82       	std	Z+2, r1	; 0x02
    1730:	70 93 8d 02 	sts	0x028D, r23
    1734:	60 93 8c 02 	sts	0x028C, r22
    1738:	df 91       	pop	r29
    173a:	cf 91       	pop	r28
    173c:	1f 91       	pop	r17
    173e:	0f 91       	pop	r16
    1740:	08 95       	ret

00001742 <sprintf>:
    1742:	0f 93       	push	r16
    1744:	1f 93       	push	r17
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	2e 97       	sbiw	r28, 0x0e	; 14
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
    175a:	0d 89       	ldd	r16, Y+21	; 0x15
    175c:	1e 89       	ldd	r17, Y+22	; 0x16
    175e:	86 e0       	ldi	r24, 0x06	; 6
    1760:	8c 83       	std	Y+4, r24	; 0x04
    1762:	1a 83       	std	Y+2, r17	; 0x02
    1764:	09 83       	std	Y+1, r16	; 0x01
    1766:	8f ef       	ldi	r24, 0xFF	; 255
    1768:	9f e7       	ldi	r25, 0x7F	; 127
    176a:	9e 83       	std	Y+6, r25	; 0x06
    176c:	8d 83       	std	Y+5, r24	; 0x05
    176e:	ae 01       	movw	r20, r28
    1770:	47 5e       	subi	r20, 0xE7	; 231
    1772:	5f 4f       	sbci	r21, 0xFF	; 255
    1774:	ce 01       	movw	r24, r28
    1776:	01 96       	adiw	r24, 0x01	; 1
    1778:	6f 89       	ldd	r22, Y+23	; 0x17
    177a:	78 8d       	ldd	r23, Y+24	; 0x18
    177c:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <vfprintf>
    1780:	ef 81       	ldd	r30, Y+7	; 0x07
    1782:	f8 85       	ldd	r31, Y+8	; 0x08
    1784:	e0 0f       	add	r30, r16
    1786:	f1 1f       	adc	r31, r17
    1788:	10 82       	st	Z, r1
    178a:	2e 96       	adiw	r28, 0x0e	; 14
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	f8 94       	cli
    1790:	de bf       	out	0x3e, r29	; 62
    1792:	0f be       	out	0x3f, r0	; 63
    1794:	cd bf       	out	0x3d, r28	; 61
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	1f 91       	pop	r17
    179c:	0f 91       	pop	r16
    179e:	08 95       	ret

000017a0 <vfprintf>:
    17a0:	2f 92       	push	r2
    17a2:	3f 92       	push	r3
    17a4:	4f 92       	push	r4
    17a6:	5f 92       	push	r5
    17a8:	6f 92       	push	r6
    17aa:	7f 92       	push	r7
    17ac:	8f 92       	push	r8
    17ae:	9f 92       	push	r9
    17b0:	af 92       	push	r10
    17b2:	bf 92       	push	r11
    17b4:	cf 92       	push	r12
    17b6:	df 92       	push	r13
    17b8:	ef 92       	push	r14
    17ba:	ff 92       	push	r15
    17bc:	0f 93       	push	r16
    17be:	1f 93       	push	r17
    17c0:	cf 93       	push	r28
    17c2:	df 93       	push	r29
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	2d 97       	sbiw	r28, 0x0d	; 13
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	f8 94       	cli
    17ce:	de bf       	out	0x3e, r29	; 62
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	cd bf       	out	0x3d, r28	; 61
    17d4:	3c 01       	movw	r6, r24
    17d6:	7d 87       	std	Y+13, r23	; 0x0d
    17d8:	6c 87       	std	Y+12, r22	; 0x0c
    17da:	5a 01       	movw	r10, r20
    17dc:	fc 01       	movw	r30, r24
    17de:	17 82       	std	Z+7, r1	; 0x07
    17e0:	16 82       	std	Z+6, r1	; 0x06
    17e2:	83 81       	ldd	r24, Z+3	; 0x03
    17e4:	81 ff       	sbrs	r24, 1
    17e6:	c8 c1       	rjmp	.+912    	; 0x1b78 <vfprintf+0x3d8>
    17e8:	2e 01       	movw	r4, r28
    17ea:	08 94       	sec
    17ec:	41 1c       	adc	r4, r1
    17ee:	51 1c       	adc	r5, r1
    17f0:	f3 01       	movw	r30, r6
    17f2:	93 81       	ldd	r25, Z+3	; 0x03
    17f4:	ec 85       	ldd	r30, Y+12	; 0x0c
    17f6:	fd 85       	ldd	r31, Y+13	; 0x0d
    17f8:	93 fd       	sbrc	r25, 3
    17fa:	85 91       	lpm	r24, Z+
    17fc:	93 ff       	sbrs	r25, 3
    17fe:	81 91       	ld	r24, Z+
    1800:	fd 87       	std	Y+13, r31	; 0x0d
    1802:	ec 87       	std	Y+12, r30	; 0x0c
    1804:	88 23       	and	r24, r24
    1806:	09 f4       	brne	.+2      	; 0x180a <vfprintf+0x6a>
    1808:	b3 c1       	rjmp	.+870    	; 0x1b70 <vfprintf+0x3d0>
    180a:	85 32       	cpi	r24, 0x25	; 37
    180c:	41 f4       	brne	.+16     	; 0x181e <vfprintf+0x7e>
    180e:	93 fd       	sbrc	r25, 3
    1810:	85 91       	lpm	r24, Z+
    1812:	93 ff       	sbrs	r25, 3
    1814:	81 91       	ld	r24, Z+
    1816:	fd 87       	std	Y+13, r31	; 0x0d
    1818:	ec 87       	std	Y+12, r30	; 0x0c
    181a:	85 32       	cpi	r24, 0x25	; 37
    181c:	29 f4       	brne	.+10     	; 0x1828 <vfprintf+0x88>
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	b3 01       	movw	r22, r6
    1822:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <fputc>
    1826:	e4 cf       	rjmp	.-56     	; 0x17f0 <vfprintf+0x50>
    1828:	ff 24       	eor	r15, r15
    182a:	ee 24       	eor	r14, r14
    182c:	10 e0       	ldi	r17, 0x00	; 0
    182e:	10 32       	cpi	r17, 0x20	; 32
    1830:	b0 f4       	brcc	.+44     	; 0x185e <vfprintf+0xbe>
    1832:	8b 32       	cpi	r24, 0x2B	; 43
    1834:	69 f0       	breq	.+26     	; 0x1850 <vfprintf+0xb0>
    1836:	8c 32       	cpi	r24, 0x2C	; 44
    1838:	28 f4       	brcc	.+10     	; 0x1844 <vfprintf+0xa4>
    183a:	80 32       	cpi	r24, 0x20	; 32
    183c:	51 f0       	breq	.+20     	; 0x1852 <vfprintf+0xb2>
    183e:	83 32       	cpi	r24, 0x23	; 35
    1840:	71 f4       	brne	.+28     	; 0x185e <vfprintf+0xbe>
    1842:	0b c0       	rjmp	.+22     	; 0x185a <vfprintf+0xba>
    1844:	8d 32       	cpi	r24, 0x2D	; 45
    1846:	39 f0       	breq	.+14     	; 0x1856 <vfprintf+0xb6>
    1848:	80 33       	cpi	r24, 0x30	; 48
    184a:	49 f4       	brne	.+18     	; 0x185e <vfprintf+0xbe>
    184c:	11 60       	ori	r17, 0x01	; 1
    184e:	2c c0       	rjmp	.+88     	; 0x18a8 <vfprintf+0x108>
    1850:	12 60       	ori	r17, 0x02	; 2
    1852:	14 60       	ori	r17, 0x04	; 4
    1854:	29 c0       	rjmp	.+82     	; 0x18a8 <vfprintf+0x108>
    1856:	18 60       	ori	r17, 0x08	; 8
    1858:	27 c0       	rjmp	.+78     	; 0x18a8 <vfprintf+0x108>
    185a:	10 61       	ori	r17, 0x10	; 16
    185c:	25 c0       	rjmp	.+74     	; 0x18a8 <vfprintf+0x108>
    185e:	17 fd       	sbrc	r17, 7
    1860:	2e c0       	rjmp	.+92     	; 0x18be <vfprintf+0x11e>
    1862:	28 2f       	mov	r18, r24
    1864:	20 53       	subi	r18, 0x30	; 48
    1866:	2a 30       	cpi	r18, 0x0A	; 10
    1868:	98 f4       	brcc	.+38     	; 0x1890 <vfprintf+0xf0>
    186a:	16 ff       	sbrs	r17, 6
    186c:	08 c0       	rjmp	.+16     	; 0x187e <vfprintf+0xde>
    186e:	8f 2d       	mov	r24, r15
    1870:	88 0f       	add	r24, r24
    1872:	f8 2e       	mov	r15, r24
    1874:	ff 0c       	add	r15, r15
    1876:	ff 0c       	add	r15, r15
    1878:	f8 0e       	add	r15, r24
    187a:	f2 0e       	add	r15, r18
    187c:	15 c0       	rjmp	.+42     	; 0x18a8 <vfprintf+0x108>
    187e:	8e 2d       	mov	r24, r14
    1880:	88 0f       	add	r24, r24
    1882:	e8 2e       	mov	r14, r24
    1884:	ee 0c       	add	r14, r14
    1886:	ee 0c       	add	r14, r14
    1888:	e8 0e       	add	r14, r24
    188a:	e2 0e       	add	r14, r18
    188c:	10 62       	ori	r17, 0x20	; 32
    188e:	0c c0       	rjmp	.+24     	; 0x18a8 <vfprintf+0x108>
    1890:	8e 32       	cpi	r24, 0x2E	; 46
    1892:	21 f4       	brne	.+8      	; 0x189c <vfprintf+0xfc>
    1894:	16 fd       	sbrc	r17, 6
    1896:	6c c1       	rjmp	.+728    	; 0x1b70 <vfprintf+0x3d0>
    1898:	10 64       	ori	r17, 0x40	; 64
    189a:	06 c0       	rjmp	.+12     	; 0x18a8 <vfprintf+0x108>
    189c:	8c 36       	cpi	r24, 0x6C	; 108
    189e:	11 f4       	brne	.+4      	; 0x18a4 <vfprintf+0x104>
    18a0:	10 68       	ori	r17, 0x80	; 128
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <vfprintf+0x108>
    18a4:	88 36       	cpi	r24, 0x68	; 104
    18a6:	59 f4       	brne	.+22     	; 0x18be <vfprintf+0x11e>
    18a8:	ec 85       	ldd	r30, Y+12	; 0x0c
    18aa:	fd 85       	ldd	r31, Y+13	; 0x0d
    18ac:	93 fd       	sbrc	r25, 3
    18ae:	85 91       	lpm	r24, Z+
    18b0:	93 ff       	sbrs	r25, 3
    18b2:	81 91       	ld	r24, Z+
    18b4:	fd 87       	std	Y+13, r31	; 0x0d
    18b6:	ec 87       	std	Y+12, r30	; 0x0c
    18b8:	88 23       	and	r24, r24
    18ba:	09 f0       	breq	.+2      	; 0x18be <vfprintf+0x11e>
    18bc:	b8 cf       	rjmp	.-144    	; 0x182e <vfprintf+0x8e>
    18be:	98 2f       	mov	r25, r24
    18c0:	95 54       	subi	r25, 0x45	; 69
    18c2:	93 30       	cpi	r25, 0x03	; 3
    18c4:	18 f0       	brcs	.+6      	; 0x18cc <vfprintf+0x12c>
    18c6:	90 52       	subi	r25, 0x20	; 32
    18c8:	93 30       	cpi	r25, 0x03	; 3
    18ca:	38 f4       	brcc	.+14     	; 0x18da <vfprintf+0x13a>
    18cc:	24 e0       	ldi	r18, 0x04	; 4
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	a2 0e       	add	r10, r18
    18d2:	b3 1e       	adc	r11, r19
    18d4:	3f e3       	ldi	r19, 0x3F	; 63
    18d6:	39 83       	std	Y+1, r19	; 0x01
    18d8:	0f c0       	rjmp	.+30     	; 0x18f8 <vfprintf+0x158>
    18da:	83 36       	cpi	r24, 0x63	; 99
    18dc:	31 f0       	breq	.+12     	; 0x18ea <vfprintf+0x14a>
    18de:	83 37       	cpi	r24, 0x73	; 115
    18e0:	81 f0       	breq	.+32     	; 0x1902 <vfprintf+0x162>
    18e2:	83 35       	cpi	r24, 0x53	; 83
    18e4:	09 f0       	breq	.+2      	; 0x18e8 <vfprintf+0x148>
    18e6:	5a c0       	rjmp	.+180    	; 0x199c <vfprintf+0x1fc>
    18e8:	22 c0       	rjmp	.+68     	; 0x192e <vfprintf+0x18e>
    18ea:	f5 01       	movw	r30, r10
    18ec:	80 81       	ld	r24, Z
    18ee:	89 83       	std	Y+1, r24	; 0x01
    18f0:	22 e0       	ldi	r18, 0x02	; 2
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	a2 0e       	add	r10, r18
    18f6:	b3 1e       	adc	r11, r19
    18f8:	21 e0       	ldi	r18, 0x01	; 1
    18fa:	c2 2e       	mov	r12, r18
    18fc:	d1 2c       	mov	r13, r1
    18fe:	42 01       	movw	r8, r4
    1900:	14 c0       	rjmp	.+40     	; 0x192a <vfprintf+0x18a>
    1902:	92 e0       	ldi	r25, 0x02	; 2
    1904:	29 2e       	mov	r2, r25
    1906:	31 2c       	mov	r3, r1
    1908:	2a 0c       	add	r2, r10
    190a:	3b 1c       	adc	r3, r11
    190c:	f5 01       	movw	r30, r10
    190e:	80 80       	ld	r8, Z
    1910:	91 80       	ldd	r9, Z+1	; 0x01
    1912:	16 ff       	sbrs	r17, 6
    1914:	03 c0       	rjmp	.+6      	; 0x191c <vfprintf+0x17c>
    1916:	6f 2d       	mov	r22, r15
    1918:	70 e0       	ldi	r23, 0x00	; 0
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <vfprintf+0x180>
    191c:	6f ef       	ldi	r22, 0xFF	; 255
    191e:	7f ef       	ldi	r23, 0xFF	; 255
    1920:	c4 01       	movw	r24, r8
    1922:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <strnlen>
    1926:	6c 01       	movw	r12, r24
    1928:	51 01       	movw	r10, r2
    192a:	1f 77       	andi	r17, 0x7F	; 127
    192c:	15 c0       	rjmp	.+42     	; 0x1958 <vfprintf+0x1b8>
    192e:	82 e0       	ldi	r24, 0x02	; 2
    1930:	28 2e       	mov	r2, r24
    1932:	31 2c       	mov	r3, r1
    1934:	2a 0c       	add	r2, r10
    1936:	3b 1c       	adc	r3, r11
    1938:	f5 01       	movw	r30, r10
    193a:	80 80       	ld	r8, Z
    193c:	91 80       	ldd	r9, Z+1	; 0x01
    193e:	16 ff       	sbrs	r17, 6
    1940:	03 c0       	rjmp	.+6      	; 0x1948 <vfprintf+0x1a8>
    1942:	6f 2d       	mov	r22, r15
    1944:	70 e0       	ldi	r23, 0x00	; 0
    1946:	02 c0       	rjmp	.+4      	; 0x194c <vfprintf+0x1ac>
    1948:	6f ef       	ldi	r22, 0xFF	; 255
    194a:	7f ef       	ldi	r23, 0xFF	; 255
    194c:	c4 01       	movw	r24, r8
    194e:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <strnlen_P>
    1952:	6c 01       	movw	r12, r24
    1954:	10 68       	ori	r17, 0x80	; 128
    1956:	51 01       	movw	r10, r2
    1958:	13 fd       	sbrc	r17, 3
    195a:	1c c0       	rjmp	.+56     	; 0x1994 <vfprintf+0x1f4>
    195c:	06 c0       	rjmp	.+12     	; 0x196a <vfprintf+0x1ca>
    195e:	80 e2       	ldi	r24, 0x20	; 32
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	b3 01       	movw	r22, r6
    1964:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <fputc>
    1968:	ea 94       	dec	r14
    196a:	8e 2d       	mov	r24, r14
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	c8 16       	cp	r12, r24
    1970:	d9 06       	cpc	r13, r25
    1972:	a8 f3       	brcs	.-22     	; 0x195e <vfprintf+0x1be>
    1974:	0f c0       	rjmp	.+30     	; 0x1994 <vfprintf+0x1f4>
    1976:	f4 01       	movw	r30, r8
    1978:	17 fd       	sbrc	r17, 7
    197a:	85 91       	lpm	r24, Z+
    197c:	17 ff       	sbrs	r17, 7
    197e:	81 91       	ld	r24, Z+
    1980:	4f 01       	movw	r8, r30
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	b3 01       	movw	r22, r6
    1986:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <fputc>
    198a:	e1 10       	cpse	r14, r1
    198c:	ea 94       	dec	r14
    198e:	08 94       	sec
    1990:	c1 08       	sbc	r12, r1
    1992:	d1 08       	sbc	r13, r1
    1994:	c1 14       	cp	r12, r1
    1996:	d1 04       	cpc	r13, r1
    1998:	71 f7       	brne	.-36     	; 0x1976 <vfprintf+0x1d6>
    199a:	e7 c0       	rjmp	.+462    	; 0x1b6a <vfprintf+0x3ca>
    199c:	84 36       	cpi	r24, 0x64	; 100
    199e:	11 f0       	breq	.+4      	; 0x19a4 <vfprintf+0x204>
    19a0:	89 36       	cpi	r24, 0x69	; 105
    19a2:	51 f5       	brne	.+84     	; 0x19f8 <vfprintf+0x258>
    19a4:	f5 01       	movw	r30, r10
    19a6:	17 ff       	sbrs	r17, 7
    19a8:	07 c0       	rjmp	.+14     	; 0x19b8 <vfprintf+0x218>
    19aa:	80 81       	ld	r24, Z
    19ac:	91 81       	ldd	r25, Z+1	; 0x01
    19ae:	a2 81       	ldd	r26, Z+2	; 0x02
    19b0:	b3 81       	ldd	r27, Z+3	; 0x03
    19b2:	24 e0       	ldi	r18, 0x04	; 4
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	08 c0       	rjmp	.+16     	; 0x19c8 <vfprintf+0x228>
    19b8:	80 81       	ld	r24, Z
    19ba:	91 81       	ldd	r25, Z+1	; 0x01
    19bc:	aa 27       	eor	r26, r26
    19be:	97 fd       	sbrc	r25, 7
    19c0:	a0 95       	com	r26
    19c2:	ba 2f       	mov	r27, r26
    19c4:	22 e0       	ldi	r18, 0x02	; 2
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	a2 0e       	add	r10, r18
    19ca:	b3 1e       	adc	r11, r19
    19cc:	01 2f       	mov	r16, r17
    19ce:	0f 76       	andi	r16, 0x6F	; 111
    19d0:	b7 ff       	sbrs	r27, 7
    19d2:	08 c0       	rjmp	.+16     	; 0x19e4 <vfprintf+0x244>
    19d4:	b0 95       	com	r27
    19d6:	a0 95       	com	r26
    19d8:	90 95       	com	r25
    19da:	81 95       	neg	r24
    19dc:	9f 4f       	sbci	r25, 0xFF	; 255
    19de:	af 4f       	sbci	r26, 0xFF	; 255
    19e0:	bf 4f       	sbci	r27, 0xFF	; 255
    19e2:	00 68       	ori	r16, 0x80	; 128
    19e4:	bc 01       	movw	r22, r24
    19e6:	cd 01       	movw	r24, r26
    19e8:	a2 01       	movw	r20, r4
    19ea:	2a e0       	ldi	r18, 0x0A	; 10
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__ultoa_invert>
    19f2:	d8 2e       	mov	r13, r24
    19f4:	d4 18       	sub	r13, r4
    19f6:	3f c0       	rjmp	.+126    	; 0x1a76 <vfprintf+0x2d6>
    19f8:	85 37       	cpi	r24, 0x75	; 117
    19fa:	21 f4       	brne	.+8      	; 0x1a04 <vfprintf+0x264>
    19fc:	1f 7e       	andi	r17, 0xEF	; 239
    19fe:	2a e0       	ldi	r18, 0x0A	; 10
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	20 c0       	rjmp	.+64     	; 0x1a44 <vfprintf+0x2a4>
    1a04:	19 7f       	andi	r17, 0xF9	; 249
    1a06:	8f 36       	cpi	r24, 0x6F	; 111
    1a08:	a9 f0       	breq	.+42     	; 0x1a34 <vfprintf+0x294>
    1a0a:	80 37       	cpi	r24, 0x70	; 112
    1a0c:	20 f4       	brcc	.+8      	; 0x1a16 <vfprintf+0x276>
    1a0e:	88 35       	cpi	r24, 0x58	; 88
    1a10:	09 f0       	breq	.+2      	; 0x1a14 <vfprintf+0x274>
    1a12:	ae c0       	rjmp	.+348    	; 0x1b70 <vfprintf+0x3d0>
    1a14:	0b c0       	rjmp	.+22     	; 0x1a2c <vfprintf+0x28c>
    1a16:	80 37       	cpi	r24, 0x70	; 112
    1a18:	21 f0       	breq	.+8      	; 0x1a22 <vfprintf+0x282>
    1a1a:	88 37       	cpi	r24, 0x78	; 120
    1a1c:	09 f0       	breq	.+2      	; 0x1a20 <vfprintf+0x280>
    1a1e:	a8 c0       	rjmp	.+336    	; 0x1b70 <vfprintf+0x3d0>
    1a20:	01 c0       	rjmp	.+2      	; 0x1a24 <vfprintf+0x284>
    1a22:	10 61       	ori	r17, 0x10	; 16
    1a24:	14 ff       	sbrs	r17, 4
    1a26:	09 c0       	rjmp	.+18     	; 0x1a3a <vfprintf+0x29a>
    1a28:	14 60       	ori	r17, 0x04	; 4
    1a2a:	07 c0       	rjmp	.+14     	; 0x1a3a <vfprintf+0x29a>
    1a2c:	14 ff       	sbrs	r17, 4
    1a2e:	08 c0       	rjmp	.+16     	; 0x1a40 <vfprintf+0x2a0>
    1a30:	16 60       	ori	r17, 0x06	; 6
    1a32:	06 c0       	rjmp	.+12     	; 0x1a40 <vfprintf+0x2a0>
    1a34:	28 e0       	ldi	r18, 0x08	; 8
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	05 c0       	rjmp	.+10     	; 0x1a44 <vfprintf+0x2a4>
    1a3a:	20 e1       	ldi	r18, 0x10	; 16
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	02 c0       	rjmp	.+4      	; 0x1a44 <vfprintf+0x2a4>
    1a40:	20 e1       	ldi	r18, 0x10	; 16
    1a42:	32 e0       	ldi	r19, 0x02	; 2
    1a44:	f5 01       	movw	r30, r10
    1a46:	17 ff       	sbrs	r17, 7
    1a48:	07 c0       	rjmp	.+14     	; 0x1a58 <vfprintf+0x2b8>
    1a4a:	60 81       	ld	r22, Z
    1a4c:	71 81       	ldd	r23, Z+1	; 0x01
    1a4e:	82 81       	ldd	r24, Z+2	; 0x02
    1a50:	93 81       	ldd	r25, Z+3	; 0x03
    1a52:	44 e0       	ldi	r20, 0x04	; 4
    1a54:	50 e0       	ldi	r21, 0x00	; 0
    1a56:	06 c0       	rjmp	.+12     	; 0x1a64 <vfprintf+0x2c4>
    1a58:	60 81       	ld	r22, Z
    1a5a:	71 81       	ldd	r23, Z+1	; 0x01
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	42 e0       	ldi	r20, 0x02	; 2
    1a62:	50 e0       	ldi	r21, 0x00	; 0
    1a64:	a4 0e       	add	r10, r20
    1a66:	b5 1e       	adc	r11, r21
    1a68:	a2 01       	movw	r20, r4
    1a6a:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__ultoa_invert>
    1a6e:	d8 2e       	mov	r13, r24
    1a70:	d4 18       	sub	r13, r4
    1a72:	01 2f       	mov	r16, r17
    1a74:	0f 77       	andi	r16, 0x7F	; 127
    1a76:	06 ff       	sbrs	r16, 6
    1a78:	09 c0       	rjmp	.+18     	; 0x1a8c <vfprintf+0x2ec>
    1a7a:	0e 7f       	andi	r16, 0xFE	; 254
    1a7c:	df 14       	cp	r13, r15
    1a7e:	30 f4       	brcc	.+12     	; 0x1a8c <vfprintf+0x2ec>
    1a80:	04 ff       	sbrs	r16, 4
    1a82:	06 c0       	rjmp	.+12     	; 0x1a90 <vfprintf+0x2f0>
    1a84:	02 fd       	sbrc	r16, 2
    1a86:	04 c0       	rjmp	.+8      	; 0x1a90 <vfprintf+0x2f0>
    1a88:	0f 7e       	andi	r16, 0xEF	; 239
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <vfprintf+0x2f0>
    1a8c:	1d 2d       	mov	r17, r13
    1a8e:	01 c0       	rjmp	.+2      	; 0x1a92 <vfprintf+0x2f2>
    1a90:	1f 2d       	mov	r17, r15
    1a92:	80 2f       	mov	r24, r16
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	04 ff       	sbrs	r16, 4
    1a98:	0c c0       	rjmp	.+24     	; 0x1ab2 <vfprintf+0x312>
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	ed 0d       	add	r30, r13
    1a9e:	f1 1d       	adc	r31, r1
    1aa0:	20 81       	ld	r18, Z
    1aa2:	20 33       	cpi	r18, 0x30	; 48
    1aa4:	11 f4       	brne	.+4      	; 0x1aaa <vfprintf+0x30a>
    1aa6:	09 7e       	andi	r16, 0xE9	; 233
    1aa8:	09 c0       	rjmp	.+18     	; 0x1abc <vfprintf+0x31c>
    1aaa:	02 ff       	sbrs	r16, 2
    1aac:	06 c0       	rjmp	.+12     	; 0x1aba <vfprintf+0x31a>
    1aae:	1e 5f       	subi	r17, 0xFE	; 254
    1ab0:	05 c0       	rjmp	.+10     	; 0x1abc <vfprintf+0x31c>
    1ab2:	86 78       	andi	r24, 0x86	; 134
    1ab4:	90 70       	andi	r25, 0x00	; 0
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	09 f0       	breq	.+2      	; 0x1abc <vfprintf+0x31c>
    1aba:	1f 5f       	subi	r17, 0xFF	; 255
    1abc:	80 2e       	mov	r8, r16
    1abe:	99 24       	eor	r9, r9
    1ac0:	03 fd       	sbrc	r16, 3
    1ac2:	12 c0       	rjmp	.+36     	; 0x1ae8 <vfprintf+0x348>
    1ac4:	00 ff       	sbrs	r16, 0
    1ac6:	0d c0       	rjmp	.+26     	; 0x1ae2 <vfprintf+0x342>
    1ac8:	fd 2c       	mov	r15, r13
    1aca:	1e 15       	cp	r17, r14
    1acc:	50 f4       	brcc	.+20     	; 0x1ae2 <vfprintf+0x342>
    1ace:	fe 0c       	add	r15, r14
    1ad0:	f1 1a       	sub	r15, r17
    1ad2:	1e 2d       	mov	r17, r14
    1ad4:	06 c0       	rjmp	.+12     	; 0x1ae2 <vfprintf+0x342>
    1ad6:	80 e2       	ldi	r24, 0x20	; 32
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	b3 01       	movw	r22, r6
    1adc:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <fputc>
    1ae0:	1f 5f       	subi	r17, 0xFF	; 255
    1ae2:	1e 15       	cp	r17, r14
    1ae4:	c0 f3       	brcs	.-16     	; 0x1ad6 <vfprintf+0x336>
    1ae6:	04 c0       	rjmp	.+8      	; 0x1af0 <vfprintf+0x350>
    1ae8:	1e 15       	cp	r17, r14
    1aea:	10 f4       	brcc	.+4      	; 0x1af0 <vfprintf+0x350>
    1aec:	e1 1a       	sub	r14, r17
    1aee:	01 c0       	rjmp	.+2      	; 0x1af2 <vfprintf+0x352>
    1af0:	ee 24       	eor	r14, r14
    1af2:	84 fe       	sbrs	r8, 4
    1af4:	0f c0       	rjmp	.+30     	; 0x1b14 <vfprintf+0x374>
    1af6:	80 e3       	ldi	r24, 0x30	; 48
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	b3 01       	movw	r22, r6
    1afc:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <fputc>
    1b00:	82 fe       	sbrs	r8, 2
    1b02:	1f c0       	rjmp	.+62     	; 0x1b42 <vfprintf+0x3a2>
    1b04:	81 fe       	sbrs	r8, 1
    1b06:	03 c0       	rjmp	.+6      	; 0x1b0e <vfprintf+0x36e>
    1b08:	88 e5       	ldi	r24, 0x58	; 88
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	10 c0       	rjmp	.+32     	; 0x1b2e <vfprintf+0x38e>
    1b0e:	88 e7       	ldi	r24, 0x78	; 120
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	0d c0       	rjmp	.+26     	; 0x1b2e <vfprintf+0x38e>
    1b14:	c4 01       	movw	r24, r8
    1b16:	86 78       	andi	r24, 0x86	; 134
    1b18:	90 70       	andi	r25, 0x00	; 0
    1b1a:	00 97       	sbiw	r24, 0x00	; 0
    1b1c:	91 f0       	breq	.+36     	; 0x1b42 <vfprintf+0x3a2>
    1b1e:	81 fc       	sbrc	r8, 1
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <vfprintf+0x386>
    1b22:	80 e2       	ldi	r24, 0x20	; 32
    1b24:	01 c0       	rjmp	.+2      	; 0x1b28 <vfprintf+0x388>
    1b26:	8b e2       	ldi	r24, 0x2B	; 43
    1b28:	07 fd       	sbrc	r16, 7
    1b2a:	8d e2       	ldi	r24, 0x2D	; 45
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	b3 01       	movw	r22, r6
    1b30:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <fputc>
    1b34:	06 c0       	rjmp	.+12     	; 0x1b42 <vfprintf+0x3a2>
    1b36:	80 e3       	ldi	r24, 0x30	; 48
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	b3 01       	movw	r22, r6
    1b3c:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <fputc>
    1b40:	fa 94       	dec	r15
    1b42:	df 14       	cp	r13, r15
    1b44:	c0 f3       	brcs	.-16     	; 0x1b36 <vfprintf+0x396>
    1b46:	da 94       	dec	r13
    1b48:	f2 01       	movw	r30, r4
    1b4a:	ed 0d       	add	r30, r13
    1b4c:	f1 1d       	adc	r31, r1
    1b4e:	80 81       	ld	r24, Z
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	b3 01       	movw	r22, r6
    1b54:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <fputc>
    1b58:	dd 20       	and	r13, r13
    1b5a:	a9 f7       	brne	.-22     	; 0x1b46 <vfprintf+0x3a6>
    1b5c:	06 c0       	rjmp	.+12     	; 0x1b6a <vfprintf+0x3ca>
    1b5e:	80 e2       	ldi	r24, 0x20	; 32
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	b3 01       	movw	r22, r6
    1b64:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <fputc>
    1b68:	ea 94       	dec	r14
    1b6a:	ee 20       	and	r14, r14
    1b6c:	c1 f7       	brne	.-16     	; 0x1b5e <vfprintf+0x3be>
    1b6e:	40 ce       	rjmp	.-896    	; 0x17f0 <vfprintf+0x50>
    1b70:	f3 01       	movw	r30, r6
    1b72:	86 81       	ldd	r24, Z+6	; 0x06
    1b74:	97 81       	ldd	r25, Z+7	; 0x07
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <vfprintf+0x3dc>
    1b78:	8f ef       	ldi	r24, 0xFF	; 255
    1b7a:	9f ef       	ldi	r25, 0xFF	; 255
    1b7c:	2d 96       	adiw	r28, 0x0d	; 13
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	f8 94       	cli
    1b82:	de bf       	out	0x3e, r29	; 62
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	cd bf       	out	0x3d, r28	; 61
    1b88:	df 91       	pop	r29
    1b8a:	cf 91       	pop	r28
    1b8c:	1f 91       	pop	r17
    1b8e:	0f 91       	pop	r16
    1b90:	ff 90       	pop	r15
    1b92:	ef 90       	pop	r14
    1b94:	df 90       	pop	r13
    1b96:	cf 90       	pop	r12
    1b98:	bf 90       	pop	r11
    1b9a:	af 90       	pop	r10
    1b9c:	9f 90       	pop	r9
    1b9e:	8f 90       	pop	r8
    1ba0:	7f 90       	pop	r7
    1ba2:	6f 90       	pop	r6
    1ba4:	5f 90       	pop	r5
    1ba6:	4f 90       	pop	r4
    1ba8:	3f 90       	pop	r3
    1baa:	2f 90       	pop	r2
    1bac:	08 95       	ret

00001bae <strnlen_P>:
    1bae:	fc 01       	movw	r30, r24
    1bb0:	05 90       	lpm	r0, Z+
    1bb2:	61 50       	subi	r22, 0x01	; 1
    1bb4:	70 40       	sbci	r23, 0x00	; 0
    1bb6:	01 10       	cpse	r0, r1
    1bb8:	d8 f7       	brcc	.-10     	; 0x1bb0 <strnlen_P+0x2>
    1bba:	80 95       	com	r24
    1bbc:	90 95       	com	r25
    1bbe:	8e 0f       	add	r24, r30
    1bc0:	9f 1f       	adc	r25, r31
    1bc2:	08 95       	ret

00001bc4 <strnlen>:
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	61 50       	subi	r22, 0x01	; 1
    1bc8:	70 40       	sbci	r23, 0x00	; 0
    1bca:	01 90       	ld	r0, Z+
    1bcc:	01 10       	cpse	r0, r1
    1bce:	d8 f7       	brcc	.-10     	; 0x1bc6 <strnlen+0x2>
    1bd0:	80 95       	com	r24
    1bd2:	90 95       	com	r25
    1bd4:	8e 0f       	add	r24, r30
    1bd6:	9f 1f       	adc	r25, r31
    1bd8:	08 95       	ret

00001bda <fputc>:
    1bda:	0f 93       	push	r16
    1bdc:	1f 93       	push	r17
    1bde:	cf 93       	push	r28
    1be0:	df 93       	push	r29
    1be2:	8c 01       	movw	r16, r24
    1be4:	eb 01       	movw	r28, r22
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	81 ff       	sbrs	r24, 1
    1bea:	1b c0       	rjmp	.+54     	; 0x1c22 <fputc+0x48>
    1bec:	82 ff       	sbrs	r24, 2
    1bee:	0d c0       	rjmp	.+26     	; 0x1c0a <fputc+0x30>
    1bf0:	2e 81       	ldd	r18, Y+6	; 0x06
    1bf2:	3f 81       	ldd	r19, Y+7	; 0x07
    1bf4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf8:	28 17       	cp	r18, r24
    1bfa:	39 07       	cpc	r19, r25
    1bfc:	64 f4       	brge	.+24     	; 0x1c16 <fputc+0x3c>
    1bfe:	e8 81       	ld	r30, Y
    1c00:	f9 81       	ldd	r31, Y+1	; 0x01
    1c02:	01 93       	st	Z+, r16
    1c04:	f9 83       	std	Y+1, r31	; 0x01
    1c06:	e8 83       	st	Y, r30
    1c08:	06 c0       	rjmp	.+12     	; 0x1c16 <fputc+0x3c>
    1c0a:	e8 85       	ldd	r30, Y+8	; 0x08
    1c0c:	f9 85       	ldd	r31, Y+9	; 0x09
    1c0e:	80 2f       	mov	r24, r16
    1c10:	09 95       	icall
    1c12:	00 97       	sbiw	r24, 0x00	; 0
    1c14:	31 f4       	brne	.+12     	; 0x1c22 <fputc+0x48>
    1c16:	8e 81       	ldd	r24, Y+6	; 0x06
    1c18:	9f 81       	ldd	r25, Y+7	; 0x07
    1c1a:	01 96       	adiw	r24, 0x01	; 1
    1c1c:	9f 83       	std	Y+7, r25	; 0x07
    1c1e:	8e 83       	std	Y+6, r24	; 0x06
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <fputc+0x4c>
    1c22:	0f ef       	ldi	r16, 0xFF	; 255
    1c24:	1f ef       	ldi	r17, 0xFF	; 255
    1c26:	c8 01       	movw	r24, r16
    1c28:	df 91       	pop	r29
    1c2a:	cf 91       	pop	r28
    1c2c:	1f 91       	pop	r17
    1c2e:	0f 91       	pop	r16
    1c30:	08 95       	ret

00001c32 <__ultoa_invert>:
    1c32:	fa 01       	movw	r30, r20
    1c34:	aa 27       	eor	r26, r26
    1c36:	28 30       	cpi	r18, 0x08	; 8
    1c38:	51 f1       	breq	.+84     	; 0x1c8e <__ultoa_invert+0x5c>
    1c3a:	20 31       	cpi	r18, 0x10	; 16
    1c3c:	81 f1       	breq	.+96     	; 0x1c9e <__ultoa_invert+0x6c>
    1c3e:	e8 94       	clt
    1c40:	6f 93       	push	r22
    1c42:	6e 7f       	andi	r22, 0xFE	; 254
    1c44:	6e 5f       	subi	r22, 0xFE	; 254
    1c46:	7f 4f       	sbci	r23, 0xFF	; 255
    1c48:	8f 4f       	sbci	r24, 0xFF	; 255
    1c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c4c:	af 4f       	sbci	r26, 0xFF	; 255
    1c4e:	b1 e0       	ldi	r27, 0x01	; 1
    1c50:	3e d0       	rcall	.+124    	; 0x1cce <__ultoa_invert+0x9c>
    1c52:	b4 e0       	ldi	r27, 0x04	; 4
    1c54:	3c d0       	rcall	.+120    	; 0x1cce <__ultoa_invert+0x9c>
    1c56:	67 0f       	add	r22, r23
    1c58:	78 1f       	adc	r23, r24
    1c5a:	89 1f       	adc	r24, r25
    1c5c:	9a 1f       	adc	r25, r26
    1c5e:	a1 1d       	adc	r26, r1
    1c60:	68 0f       	add	r22, r24
    1c62:	79 1f       	adc	r23, r25
    1c64:	8a 1f       	adc	r24, r26
    1c66:	91 1d       	adc	r25, r1
    1c68:	a1 1d       	adc	r26, r1
    1c6a:	6a 0f       	add	r22, r26
    1c6c:	71 1d       	adc	r23, r1
    1c6e:	81 1d       	adc	r24, r1
    1c70:	91 1d       	adc	r25, r1
    1c72:	a1 1d       	adc	r26, r1
    1c74:	20 d0       	rcall	.+64     	; 0x1cb6 <__ultoa_invert+0x84>
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <__ultoa_invert+0x48>
    1c78:	68 94       	set
    1c7a:	3f 91       	pop	r19
    1c7c:	2a e0       	ldi	r18, 0x0A	; 10
    1c7e:	26 9f       	mul	r18, r22
    1c80:	11 24       	eor	r1, r1
    1c82:	30 19       	sub	r19, r0
    1c84:	30 5d       	subi	r19, 0xD0	; 208
    1c86:	31 93       	st	Z+, r19
    1c88:	de f6       	brtc	.-74     	; 0x1c40 <__ultoa_invert+0xe>
    1c8a:	cf 01       	movw	r24, r30
    1c8c:	08 95       	ret
    1c8e:	46 2f       	mov	r20, r22
    1c90:	47 70       	andi	r20, 0x07	; 7
    1c92:	40 5d       	subi	r20, 0xD0	; 208
    1c94:	41 93       	st	Z+, r20
    1c96:	b3 e0       	ldi	r27, 0x03	; 3
    1c98:	0f d0       	rcall	.+30     	; 0x1cb8 <__ultoa_invert+0x86>
    1c9a:	c9 f7       	brne	.-14     	; 0x1c8e <__ultoa_invert+0x5c>
    1c9c:	f6 cf       	rjmp	.-20     	; 0x1c8a <__ultoa_invert+0x58>
    1c9e:	46 2f       	mov	r20, r22
    1ca0:	4f 70       	andi	r20, 0x0F	; 15
    1ca2:	40 5d       	subi	r20, 0xD0	; 208
    1ca4:	4a 33       	cpi	r20, 0x3A	; 58
    1ca6:	18 f0       	brcs	.+6      	; 0x1cae <__ultoa_invert+0x7c>
    1ca8:	49 5d       	subi	r20, 0xD9	; 217
    1caa:	31 fd       	sbrc	r19, 1
    1cac:	40 52       	subi	r20, 0x20	; 32
    1cae:	41 93       	st	Z+, r20
    1cb0:	02 d0       	rcall	.+4      	; 0x1cb6 <__ultoa_invert+0x84>
    1cb2:	a9 f7       	brne	.-22     	; 0x1c9e <__ultoa_invert+0x6c>
    1cb4:	ea cf       	rjmp	.-44     	; 0x1c8a <__ultoa_invert+0x58>
    1cb6:	b4 e0       	ldi	r27, 0x04	; 4
    1cb8:	a6 95       	lsr	r26
    1cba:	97 95       	ror	r25
    1cbc:	87 95       	ror	r24
    1cbe:	77 95       	ror	r23
    1cc0:	67 95       	ror	r22
    1cc2:	ba 95       	dec	r27
    1cc4:	c9 f7       	brne	.-14     	; 0x1cb8 <__ultoa_invert+0x86>
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	61 05       	cpc	r22, r1
    1cca:	71 05       	cpc	r23, r1
    1ccc:	08 95       	ret
    1cce:	9b 01       	movw	r18, r22
    1cd0:	ac 01       	movw	r20, r24
    1cd2:	0a 2e       	mov	r0, r26
    1cd4:	06 94       	lsr	r0
    1cd6:	57 95       	ror	r21
    1cd8:	47 95       	ror	r20
    1cda:	37 95       	ror	r19
    1cdc:	27 95       	ror	r18
    1cde:	ba 95       	dec	r27
    1ce0:	c9 f7       	brne	.-14     	; 0x1cd4 <__ultoa_invert+0xa2>
    1ce2:	62 0f       	add	r22, r18
    1ce4:	73 1f       	adc	r23, r19
    1ce6:	84 1f       	adc	r24, r20
    1ce8:	95 1f       	adc	r25, r21
    1cea:	a0 1d       	adc	r26, r0
    1cec:	08 95       	ret

00001cee <_exit>:
    1cee:	f8 94       	cli

00001cf0 <__stop_program>:
    1cf0:	ff cf       	rjmp	.-2      	; 0x1cf0 <__stop_program>
