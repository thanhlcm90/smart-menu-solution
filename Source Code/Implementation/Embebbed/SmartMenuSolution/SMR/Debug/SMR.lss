
SMR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000102  00800100  00001a46  00001ada  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  00800202  00800202  00001bdc  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00001bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  00002860  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000208  00000000  00000000  00002a18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002fb1  00000000  00000000  00002c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e13  00000000  00000000  00005bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013df  00000000  00000000  000069e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000978  00000000  00000000  00007dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e61  00000000  00000000  0000873c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002198  00000000  00000000  0000959d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000b735  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e4       	ldi	r30, 0x46	; 70
      a0:	fa e1       	ldi	r31, 0x1A	; 26
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 30       	cpi	r26, 0x02	; 2
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	a2 e0       	ldi	r26, 0x02	; 2
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 37       	cpi	r26, 0x70	; 112
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 25 02 	call	0x44a	; 0x44a <main>
      c6:	0c 94 21 0d 	jmp	0x1a42	; 0x1a42 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <LCDBusyLoop>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ce:	8f ec       	ldi	r24, 0xCF	; 207
      d0:	97 e0       	ldi	r25, 0x07	; 7
      d2:	01 97       	sbiw	r24, 0x01	; 1
      d4:	f1 f7       	brne	.-4      	; 0xd2 <LCDBusyLoop+0x4>
      d6:	00 c0       	rjmp	.+0      	; 0xd8 <LCDBusyLoop+0xa>
      d8:	00 00       	nop
}

void LCDBusyLoop()
{
	_delay_ms(8);
}
      da:	08 95       	ret

000000dc <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
      dc:	28 2f       	mov	r18, r24
      de:	22 95       	swap	r18
      e0:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
      e2:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
      e4:	66 23       	and	r22, r22
      e6:	11 f4       	brne	.+4      	; 0xec <LCDByte+0x10>
CLEAR_RS();
      e8:	d8 98       	cbi	0x1b, 0	; 27
      ea:	01 c0       	rjmp	.+2      	; 0xee <LCDByte+0x12>
else
SET_RS();
      ec:	d8 9a       	sbi	0x1b, 0	; 27

//_delay_ms(0.500);		//tAS

SET_E();
      ee:	d9 9a       	sbi	0x1b, 1	; 27

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
      f0:	9b b3       	in	r25, 0x1b	; 27
      f2:	22 0f       	add	r18, r18
      f4:	22 0f       	add	r18, r18
      f6:	93 7c       	andi	r25, 0xC3	; 195
      f8:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
      fa:	9b bb       	out	0x1b, r25	; 27

//_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
      fc:	d9 98       	cbi	0x1b, 1	; 27

//_delay_us(1);

//Send the lower nibble
SET_E();
      fe:	d9 9a       	sbi	0x1b, 1	; 27

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
     100:	9b b3       	in	r25, 0x1b	; 27
     102:	88 0f       	add	r24, r24
     104:	88 0f       	add	r24, r24
     106:	93 7c       	andi	r25, 0xC3	; 195
     108:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     10a:	8b bb       	out	0x1b, r24	; 27

//_delay_us(1);			//tEH

//SEND

CLEAR_E();
     10c:	d9 98       	cbi	0x1b, 1	; 27

//_delay_us(1);			//tEL

LCDBusyLoop();
     10e:	0e 94 67 00 	call	0xce	; 0xce <LCDBusyLoop>
}
     112:	08 95       	ret

00000114 <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
     114:	0f 93       	push	r16
     116:	1f 93       	push	r17
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	8c 01       	movw	r16, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     11e:	fc 01       	movw	r30, r24
     120:	80 81       	ld	r24, Z
     122:	88 23       	and	r24, r24
     124:	09 f1       	breq	.+66     	; 0x168 <LCDWriteString+0x54>
 {
 	//Custom Char Support
	if(*msg=='%')
     126:	85 32       	cpi	r24, 0x25	; 37
     128:	a9 f4       	brne	.+42     	; 0x154 <LCDWriteString+0x40>
	{
		msg++;
     12a:	e8 01       	movw	r28, r16
     12c:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
     12e:	f8 01       	movw	r30, r16
     130:	81 81       	ldd	r24, Z+1	; 0x01
     132:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
     134:	88 30       	cpi	r24, 0x08	; 8
     136:	20 f4       	brcc	.+8      	; 0x140 <LCDWriteString+0x2c>
		{
			LCDData(cc);
     138:	61 e0       	ldi	r22, 0x01	; 1
     13a:	0e 94 6e 00 	call	0xdc	; 0xdc <LCDByte>
     13e:	0e c0       	rjmp	.+28     	; 0x15c <LCDWriteString+0x48>
		}
		else
		{
			LCDData('%');
     140:	85 e2       	ldi	r24, 0x25	; 37
     142:	61 e0       	ldi	r22, 0x01	; 1
     144:	0e 94 6e 00 	call	0xdc	; 0xdc <LCDByte>
			LCDData(*msg);
     148:	f8 01       	movw	r30, r16
     14a:	81 81       	ldd	r24, Z+1	; 0x01
     14c:	61 e0       	ldi	r22, 0x01	; 1
     14e:	0e 94 6e 00 	call	0xdc	; 0xdc <LCDByte>
     152:	04 c0       	rjmp	.+8      	; 0x15c <LCDWriteString+0x48>
		}
	}
	else
	{
		LCDData(*msg);
     154:	61 e0       	ldi	r22, 0x01	; 1
     156:	0e 94 6e 00 	call	0xdc	; 0xdc <LCDByte>
     15a:	e8 01       	movw	r28, r16
	}
	msg++;
     15c:	8e 01       	movw	r16, r28
     15e:	0f 5f       	subi	r16, 0xFF	; 255
     160:	1f 4f       	sbci	r17, 0xFF	; 255
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     162:	89 81       	ldd	r24, Y+1	; 0x01
     164:	88 23       	and	r24, r24
     166:	f9 f6       	brne	.-66     	; 0x126 <LCDWriteString+0x12>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	1f 91       	pop	r17
     16e:	0f 91       	pop	r16
     170:	08 95       	ret

00000172 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     172:	ef 92       	push	r14
     174:	ff 92       	push	r15
     176:	0f 93       	push	r16
     178:	1f 93       	push	r17
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	00 d0       	rcall	.+0      	; 0x180 <LCDWriteInt+0xe>
     180:	00 d0       	rcall	.+0      	; 0x182 <LCDWriteInt+0x10>
     182:	0f 92       	push	r0
     184:	cd b7       	in	r28, 0x3d	; 61
     186:	de b7       	in	r29, 0x3e	; 62
     188:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     18a:	fe 01       	movw	r30, r28
     18c:	31 96       	adiw	r30, 0x01	; 1
     18e:	25 e0       	ldi	r18, 0x05	; 5
     190:	df 01       	movw	r26, r30
     192:	1d 92       	st	X+, r1
     194:	2a 95       	dec	r18
     196:	e9 f7       	brne	.-6      	; 0x192 <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
     198:	00 97       	sbiw	r24, 0x00	; 0
     19a:	61 f0       	breq	.+24     	; 0x1b4 <LCDWriteInt+0x42>
     19c:	fe 01       	movw	r30, r28
     19e:	36 96       	adiw	r30, 0x06	; 6
	{
	str[i]=val%10;
     1a0:	2a e0       	ldi	r18, 0x0A	; 10
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	b9 01       	movw	r22, r18
     1a6:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__divmodhi4>
     1aa:	82 93       	st	-Z, r24
	val=val/10;
     1ac:	86 2f       	mov	r24, r22
     1ae:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     1b0:	00 97       	sbiw	r24, 0x00	; 0
     1b2:	c1 f7       	brne	.-16     	; 0x1a4 <LCDWriteInt+0x32>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     1b4:	bf ef       	ldi	r27, 0xFF	; 255
     1b6:	eb 16       	cp	r14, r27
     1b8:	bf ef       	ldi	r27, 0xFF	; 255
     1ba:	fb 06       	cpc	r15, r27
     1bc:	69 f4       	brne	.+26     	; 0x1d8 <LCDWriteInt+0x66>
		while(str[j]==0) j++;
     1be:	29 81       	ldd	r18, Y+1	; 0x01
     1c0:	22 23       	and	r18, r18
     1c2:	79 f4       	brne	.+30     	; 0x1e2 <LCDWriteInt+0x70>
     1c4:	fe 01       	movw	r30, r28
     1c6:	32 96       	adiw	r30, 0x02	; 2
     1c8:	00 e0       	ldi	r16, 0x00	; 0
     1ca:	10 e0       	ldi	r17, 0x00	; 0
     1cc:	0f 5f       	subi	r16, 0xFF	; 255
     1ce:	1f 4f       	sbci	r17, 0xFF	; 255
     1d0:	21 91       	ld	r18, Z+
     1d2:	22 23       	and	r18, r18
     1d4:	d9 f3       	breq	.-10     	; 0x1cc <LCDWriteInt+0x5a>
     1d6:	07 c0       	rjmp	.+14     	; 0x1e6 <LCDWriteInt+0x74>
	else
		j=5-field_length;
     1d8:	05 e0       	ldi	r16, 0x05	; 5
     1da:	10 e0       	ldi	r17, 0x00	; 0
     1dc:	0e 19       	sub	r16, r14
     1de:	1f 09       	sbc	r17, r15
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <LCDWriteInt+0x74>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
     1e2:	00 e0       	ldi	r16, 0x00	; 0
     1e4:	10 e0       	ldi	r17, 0x00	; 0
	else
		j=5-field_length;

	if(val<0) LCDData('-');
     1e6:	99 23       	and	r25, r25
     1e8:	24 f4       	brge	.+8      	; 0x1f2 <LCDWriteInt+0x80>
     1ea:	8d e2       	ldi	r24, 0x2D	; 45
     1ec:	61 e0       	ldi	r22, 0x01	; 1
     1ee:	0e 94 6e 00 	call	0xdc	; 0xdc <LCDByte>
	for(i=j;i<5;i++)
     1f2:	05 30       	cpi	r16, 0x05	; 5
     1f4:	11 05       	cpc	r17, r1
     1f6:	bc f4       	brge	.+46     	; 0x226 <LCDWriteInt+0xb4>
	}
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
     1f8:	e1 e0       	ldi	r30, 0x01	; 1
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	ec 0f       	add	r30, r28
     1fe:	fd 1f       	adc	r31, r29
     200:	0e 0f       	add	r16, r30
     202:	1f 1f       	adc	r17, r31
     204:	0f 2e       	mov	r0, r31
     206:	f6 e0       	ldi	r31, 0x06	; 6
     208:	ef 2e       	mov	r14, r31
     20a:	ff 24       	eor	r15, r15
     20c:	f0 2d       	mov	r31, r0
     20e:	ec 0e       	add	r14, r28
     210:	fd 1e       	adc	r15, r29
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     212:	d8 01       	movw	r26, r16
     214:	8d 91       	ld	r24, X+
     216:	8d 01       	movw	r16, r26
     218:	80 5d       	subi	r24, 0xD0	; 208
     21a:	61 e0       	ldi	r22, 0x01	; 1
     21c:	0e 94 6e 00 	call	0xdc	; 0xdc <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     220:	0e 15       	cp	r16, r14
     222:	1f 05       	cpc	r17, r15
     224:	b1 f7       	brne	.-20     	; 0x212 <LCDWriteInt+0xa0>
	{
	LCDData(48+str[i]);
	}
}
     226:	0f 90       	pop	r0
     228:	0f 90       	pop	r0
     22a:	0f 90       	pop	r0
     22c:	0f 90       	pop	r0
     22e:	0f 90       	pop	r0
     230:	df 91       	pop	r29
     232:	cf 91       	pop	r28
     234:	1f 91       	pop	r17
     236:	0f 91       	pop	r16
     238:	ff 90       	pop	r15
     23a:	ef 90       	pop	r14
     23c:	08 95       	ret

0000023e <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
     23e:	84 31       	cpi	r24, 0x14	; 20
     240:	78 f4       	brcc	.+30     	; 0x260 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
     242:	62 30       	cpi	r22, 0x02	; 2
     244:	31 f0       	breq	.+12     	; 0x252 <LCDGotoXY+0x14>
     246:	63 30       	cpi	r22, 0x03	; 3
     248:	31 f0       	breq	.+12     	; 0x256 <LCDGotoXY+0x18>
     24a:	61 30       	cpi	r22, 0x01	; 1
     24c:	29 f4       	brne	.+10     	; 0x258 <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
     24e:	80 64       	ori	r24, 0x40	; 64
			break;
     250:	03 c0       	rjmp	.+6      	; 0x258 <LCDGotoXY+0x1a>
		case 2:
			x+=0x14;
     252:	8c 5e       	subi	r24, 0xEC	; 236
			break;
     254:	01 c0       	rjmp	.+2      	; 0x258 <LCDGotoXY+0x1a>
		case 3:
			x+=0x54;
     256:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
     258:	80 68       	ori	r24, 0x80	; 128
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	0e 94 6e 00 	call	0xdc	; 0xdc <LCDByte>
     260:	08 95       	ret

00000262 <LCDInit>:
{
	_delay_ms(8);
}

void LCDInit(uint8_t style)
{
     262:	0f 93       	push	r16
     264:	1f 93       	push	r17
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
     26a:	c8 2f       	mov	r28, r24
     26c:	8b e4       	ldi	r24, 0x4B	; 75
     26e:	9d e1       	ldi	r25, 0x1D	; 29
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <LCDInit+0xe>
     274:	00 c0       	rjmp	.+0      	; 0x276 <LCDInit+0x14>
     276:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
     278:	8a b3       	in	r24, 0x1a	; 26
     27a:	8c 63       	ori	r24, 0x3C	; 60
     27c:	8a bb       	out	0x1a, r24	; 26
	LCD_E_DDR|=(1<<LCD_E_POS);
     27e:	d1 9a       	sbi	0x1a, 1	; 26
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     280:	d0 9a       	sbi	0x1a, 0	; 26

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
     282:	8b b3       	in	r24, 0x1b	; 27
     284:	83 7c       	andi	r24, 0xC3	; 195
     286:	8b bb       	out	0x1b, r24	; 27
	CLEAR_E();
     288:	d9 98       	cbi	0x1b, 1	; 27
	CLEAR_RS();
     28a:	d8 98       	cbi	0x1b, 0	; 27

	//Set 4-bit mode
	//_delay_us(0.3);	//tAS

	SET_E();
     28c:	d9 9a       	sbi	0x1b, 1	; 27
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     28e:	db 9a       	sbi	0x1b, 3	; 27
	//_delay_us(1);
	CLEAR_E();
     290:	d9 98       	cbi	0x1b, 1	; 27
	//_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     292:	0e 94 67 00 	call	0xce	; 0xce <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     296:	8c 2f       	mov	r24, r28
     298:	8c 60       	ori	r24, 0x0C	; 12
     29a:	60 e0       	ldi	r22, 0x00	; 0
     29c:	0e 94 6e 00 	call	0xdc	; 0xdc <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     2a0:	88 e2       	ldi	r24, 0x28	; 40
     2a2:	60 e0       	ldi	r22, 0x00	; 0
     2a4:	0e 94 6e 00 	call	0xdc	; 0xdc <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
     2a8:	80 e4       	ldi	r24, 0x40	; 64
     2aa:	60 e0       	ldi	r22, 0x00	; 0
     2ac:	0e 94 6e 00 	call	0xdc	; 0xdc <LCDByte>
     2b0:	c0 e0       	ldi	r28, 0x00	; 0
     2b2:	d1 e0       	ldi	r29, 0x01	; 1
void LCDBusyLoop()
{
	_delay_ms(8);
}

void LCDInit(uint8_t style)
     2b4:	00 e4       	ldi	r16, 0x40	; 64
     2b6:	11 e0       	ldi	r17, 0x01	; 1
	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
     2b8:	89 91       	ld	r24, Y+
     2ba:	61 e0       	ldi	r22, 0x01	; 1
     2bc:	0e 94 6e 00 	call	0xdc	; 0xdc <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
     2c0:	c0 17       	cp	r28, r16
     2c2:	d1 07       	cpc	r29, r17
     2c4:	c9 f7       	brne	.-14     	; 0x2b8 <LCDInit+0x56>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	60 e0       	ldi	r22, 0x00	; 0
     2ca:	0e 94 1f 01 	call	0x23e	; 0x23e <LCDGotoXY>

}
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	1f 91       	pop	r17
     2d4:	0f 91       	pop	r16
     2d6:	08 95       	ret

000002d8 <sMRIfaceLCD_writeString>:
struct SMR* l;
char bufferin[NRF24L01_PAYLOAD];
char bufferout[NRF24L01_PAYLOAD];

void sMRIfaceLCD_writeString(const sc_string chr) {
	LCDWriteString(chr);
     2d8:	0e 94 8a 00 	call	0x114	; 0x114 <LCDWriteString>
}
     2dc:	08 95       	ret

000002de <sMRIfaceLCD_writeStringXY>:
void sMRIfaceLCD_writeStringXY(const sc_string chr, const sc_integer x, const sc_integer y) {
     2de:	0f 93       	push	r16
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
     2e4:	ec 01       	movw	r28, r24
     2e6:	84 2f       	mov	r24, r20
     2e8:	60 2f       	mov	r22, r16
	LCDWriteStringXY(x,y,chr);
     2ea:	0e 94 1f 01 	call	0x23e	; 0x23e <LCDGotoXY>
     2ee:	ce 01       	movw	r24, r28
     2f0:	0e 94 8a 00 	call	0x114	; 0x114 <LCDWriteString>
}
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	0f 91       	pop	r16
     2fa:	08 95       	ret

000002fc <sMRIfaceLCD_writeNumberXY>:
void sMRIfaceLCD_writeNumberXY(const sc_integer num, const sc_integer x, const sc_integer y, const sc_integer l) {
     2fc:	4f 92       	push	r4
     2fe:	5f 92       	push	r5
     300:	6f 92       	push	r6
     302:	7f 92       	push	r7
     304:	af 92       	push	r10
     306:	bf 92       	push	r11
     308:	cf 92       	push	r12
     30a:	df 92       	push	r13
     30c:	ef 92       	push	r14
     30e:	ff 92       	push	r15
     310:	2b 01       	movw	r4, r22
     312:	3c 01       	movw	r6, r24
     314:	82 2f       	mov	r24, r18
     316:	6e 2d       	mov	r22, r14
     318:	76 01       	movw	r14, r12
     31a:	65 01       	movw	r12, r10
	LCDWriteIntXY(x,y,num,l);
     31c:	0e 94 1f 01 	call	0x23e	; 0x23e <LCDGotoXY>
     320:	c2 01       	movw	r24, r4
     322:	b6 01       	movw	r22, r12
     324:	0e 94 b9 00 	call	0x172	; 0x172 <LCDWriteInt>
}
     328:	ff 90       	pop	r15
     32a:	ef 90       	pop	r14
     32c:	df 90       	pop	r13
     32e:	cf 90       	pop	r12
     330:	bf 90       	pop	r11
     332:	af 90       	pop	r10
     334:	7f 90       	pop	r7
     336:	6f 90       	pop	r6
     338:	5f 90       	pop	r5
     33a:	4f 90       	pop	r4
     33c:	08 95       	ret

0000033e <sMRIfaceLCD_clear>:
void sMRIfaceLCD_clear() {
	LCDClear();
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	60 e0       	ldi	r22, 0x00	; 0
     342:	0e 94 6e 00 	call	0xdc	; 0xdc <LCDByte>
     346:	82 e0       	ldi	r24, 0x02	; 2
     348:	60 e0       	ldi	r22, 0x00	; 0
     34a:	0e 94 6e 00 	call	0xdc	; 0xdc <LCDByte>
}
     34e:	08 95       	ret

00000350 <sMRIfaceLCD_init>:
void sMRIfaceLCD_init() {
	LCDInit(0);
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	0e 94 31 01 	call	0x262	; 0x262 <LCDInit>
}
     356:	08 95       	ret

00000358 <sMRIfaceRF_getData>:

sc_string sMRIfaceRF_getData() {
     358:	0f 93       	push	r16
     35a:	1f 93       	push	r17
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	0f 92       	push	r0
     362:	cd b7       	in	r28, 0x3d	; 61
     364:	de b7       	in	r29, 0x3e	; 62
	uint8_t pipe = 0;
     366:	19 82       	std	Y+1, r1	; 0x01
	if (nrf24l01_readready(&pipe)) {
     368:	ce 01       	movw	r24, r28
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <nrf24l01_readready>
     370:	88 23       	and	r24, r24
     372:	81 f0       	breq	.+32     	; 0x394 <sMRIfaceRF_getData+0x3c>
     374:	e4 e0       	ldi	r30, 0x04	; 4
     376:	f2 e0       	ldi	r31, 0x02	; 2
}
void sMRIfaceLCD_init() {
	LCDInit(0);
}

sc_string sMRIfaceRF_getData() {
     378:	cf 01       	movw	r24, r30
     37a:	40 96       	adiw	r24, 0x10	; 16
	uint8_t pipe = 0;
	if (nrf24l01_readready(&pipe)) {
		//clear buffer
		for(uint8_t i=0; i<sizeof(bufferin); i++) bufferin[i] = 0;
     37c:	11 92       	st	Z+, r1
     37e:	e8 17       	cp	r30, r24
     380:	f9 07       	cpc	r31, r25
     382:	e1 f7       	brne	.-8      	; 0x37c <sMRIfaceRF_getData+0x24>
		
		//read buffer
		nrf24l01_read(pipe,bufferin);
     384:	04 e0       	ldi	r16, 0x04	; 4
     386:	12 e0       	ldi	r17, 0x02	; 2
     388:	89 81       	ldd	r24, Y+1	; 0x01
     38a:	b8 01       	movw	r22, r16
     38c:	0e 94 06 05 	call	0xa0c	; 0xa0c <nrf24l01_read>
		return bufferin;
     390:	c8 01       	movw	r24, r16
     392:	02 c0       	rjmp	.+4      	; 0x398 <sMRIfaceRF_getData+0x40>
	} else {
		return "";
     394:	80 e4       	ldi	r24, 0x40	; 64
     396:	91 e0       	ldi	r25, 0x01	; 1
	}
}
     398:	0f 90       	pop	r0
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	1f 91       	pop	r17
     3a0:	0f 91       	pop	r16
     3a2:	08 95       	ret

000003a4 <sMRIfaceRF_sendMsg>:

sc_boolean sMRIfaceRF_sendMsg(const sc_string msg) {
	uint8_t writeret = nrf24l01_write(msg);
     3a4:	0e 94 2c 05 	call	0xa58	; 0xa58 <nrf24l01_write>
	} else {
		return "";
	}
}

sc_boolean sMRIfaceRF_sendMsg(const sc_string msg) {
     3a8:	91 e0       	ldi	r25, 0x01	; 1
     3aa:	81 30       	cpi	r24, 0x01	; 1
     3ac:	09 f0       	breq	.+2      	; 0x3b0 <sMRIfaceRF_sendMsg+0xc>
     3ae:	90 e0       	ldi	r25, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     3b0:	89 2f       	mov	r24, r25
     3b2:	08 95       	ret

000003b4 <sMRIfaceRF_sendData>:

sc_boolean sMRIfaceRF_sendData(const sc_integer cmd, const sc_integer id, const sc_integer dish_id, const sc_integer amount) {
     3b4:	af 92       	push	r10
     3b6:	ef 92       	push	r14
     3b8:	82 2f       	mov	r24, r18
     3ba:	e6 e1       	ldi	r30, 0x16	; 22
     3bc:	f2 e0       	ldi	r31, 0x02	; 2
     3be:	af 01       	movw	r20, r30
     3c0:	40 5f       	subi	r20, 0xF0	; 240
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
	
	unsigned char num;
	unsigned char mod;
	//clear buffer
	for(uint8_t i=0; i<sizeof(bufferout); i++) bufferout[i] = 0;
     3c4:	11 92       	st	Z+, r1
     3c6:	e4 17       	cp	r30, r20
     3c8:	f5 07       	cpc	r31, r21
     3ca:	e1 f7       	brne	.-8      	; 0x3c4 <sMRIfaceRF_sendData+0x10>
	
	//Lenh cho data: 1-goi mon, 2-huy mon, 3-thanh toan, 4-goi boi ban
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
     3cc:	60 5d       	subi	r22, 0xD0	; 208
     3ce:	60 93 16 02 	sts	0x0216, r22
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     3d2:	3a e0       	ldi	r19, 0x0A	; 10
     3d4:	63 2f       	mov	r22, r19
     3d6:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     3da:	90 5d       	subi	r25, 0xD0	; 208
     3dc:	90 93 18 02 	sts	0x0218, r25
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     3e0:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     3e4:	90 5d       	subi	r25, 0xD0	; 208
     3e6:	90 93 17 02 	sts	0x0217, r25
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
		num/=10;
     3ea:	8e 2d       	mov	r24, r14
     3ec:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__udivmodqi4>
		bufferout[3+i]=mod+'0';
     3f0:	90 5d       	subi	r25, 0xD0	; 208
     3f2:	90 93 1b 02 	sts	0x021B, r25
	}
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
     3f6:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__udivmodqi4>
		num/=10;
		bufferout[3+i]=mod+'0';
     3fa:	90 5d       	subi	r25, 0xD0	; 208
     3fc:	90 93 1a 02 	sts	0x021A, r25
	}
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
     400:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__udivmodqi4>
		num/=10;
		bufferout[3+i]=mod+'0';
     404:	90 5d       	subi	r25, 0xD0	; 208
     406:	90 93 19 02 	sts	0x0219, r25
	}
	
	//Chuyen doi so luong mon an
	num=amount;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     40a:	8a 2d       	mov	r24, r10
     40c:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__udivmodqi4>
		num/=10;
		bufferout[6+i]=mod+'0';
     410:	90 5d       	subi	r25, 0xD0	; 208
     412:	90 93 1d 02 	sts	0x021D, r25
	}
	
	//Chuyen doi so luong mon an
	num=amount;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     416:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__udivmodqi4>
		num/=10;
		bufferout[6+i]=mod+'0';
     41a:	90 5d       	subi	r25, 0xD0	; 208
     41c:	90 93 1c 02 	sts	0x021C, r25
	}
	
	uint8_t writeret = nrf24l01_write(bufferout);
     420:	86 e1       	ldi	r24, 0x16	; 22
     422:	92 e0       	ldi	r25, 0x02	; 2
     424:	0e 94 2c 05 	call	0xa58	; 0xa58 <nrf24l01_write>
	} else {
		return false;
	}
}

sc_boolean sMRIfaceRF_sendData(const sc_integer cmd, const sc_integer id, const sc_integer dish_id, const sc_integer amount) {
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	81 30       	cpi	r24, 0x01	; 1
     42c:	09 f0       	breq	.+2      	; 0x430 <sMRIfaceRF_sendData+0x7c>
     42e:	90 e0       	ldi	r25, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     430:	89 2f       	mov	r24, r25
     432:	ef 90       	pop	r14
     434:	af 90       	pop	r10
     436:	08 95       	ret

00000438 <sMR_setTimer>:

void sMR_setTimer(const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
	TimerSet(evid,time_ms);
     438:	0e 94 14 08 	call	0x1028	; 0x1028 <TimerSet>
}
     43c:	08 95       	ret

0000043e <sMR_unsetTimer>:
void sMR_unsetTimer(const sc_eventid evid) {
	TimerUnSet(evid);
     43e:	0e 94 60 08 	call	0x10c0	; 0x10c0 <TimerUnSet>
}
     442:	08 95       	ret

00000444 <sMRIfaceRF_init>:

void sMRIfaceRF_init() {
	nrf24l01_init();
     444:	0e 94 82 05 	call	0xb04	; 0xb04 <nrf24l01_init>
}
     448:	08 95       	ret

0000044a <main>:

int main(void)
{
	uint8_t i;
	DDRC=0x0F;
     44a:	8f e0       	ldi	r24, 0x0F	; 15
     44c:	84 bb       	out	0x14, r24	; 20
	PORTC=0x0F;
     44e:	85 bb       	out	0x15, r24	; 21
	l=malloc(sizeof(SMR*)) ;
     450:	82 e0       	ldi	r24, 0x02	; 2
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	0e 94 1c 09 	call	0x1238	; 0x1238 <malloc>
     458:	80 93 14 02 	sts	0x0214, r24
     45c:	90 93 15 02 	sts	0x0215, r25
	TimerInit();
     460:	0e 94 08 08 	call	0x1010	; 0x1010 <TimerInit>
	sMR_init(l);
     464:	80 91 14 02 	lds	r24, 0x0214
     468:	90 91 15 02 	lds	r25, 0x0215
     46c:	0e 94 41 06 	call	0xc82	; 0xc82 <sMR_init>
	sMR_enter(l);
     470:	80 91 14 02 	lds	r24, 0x0214
     474:	90 91 15 02 	lds	r25, 0x0215
     478:	0e 94 47 06 	call	0xc8e	; 0xc8e <sMR_enter>
     47c:	e6 e1       	ldi	r30, 0x16	; 22
     47e:	f2 e0       	ldi	r31, 0x02	; 2
     480:	81 e6       	ldi	r24, 0x61	; 97
	
	//setup buffer
	for(i=0; i<sizeof(bufferout); i++)
	bufferout[i] = i+'a';
     482:	81 93       	st	Z+, r24
     484:	8f 5f       	subi	r24, 0xFF	; 255
	TimerInit();
	sMR_init(l);
	sMR_enter(l);
	
	//setup buffer
	for(i=0; i<sizeof(bufferout); i++)
     486:	81 37       	cpi	r24, 0x71	; 113
     488:	e1 f7       	brne	.-8      	; 0x482 <main+0x38>
     48a:	e4 e0       	ldi	r30, 0x04	; 4
     48c:	f2 e0       	ldi	r31, 0x02	; 2

void sMRIfaceRF_init() {
	nrf24l01_init();
}

int main(void)
     48e:	cf 01       	movw	r24, r30
     490:	40 96       	adiw	r24, 0x10	; 16
	
	//setup buffer
	for(i=0; i<sizeof(bufferout); i++)
	bufferout[i] = i+'a';
	for(i=0; i<sizeof(bufferin); i++)
	bufferin[i] = 0;
     492:	11 92       	st	Z+, r1
	sMR_enter(l);
	
	//setup buffer
	for(i=0; i<sizeof(bufferout); i++)
	bufferout[i] = i+'a';
	for(i=0; i<sizeof(bufferin); i++)
     494:	e8 17       	cp	r30, r24
     496:	f9 07       	cpc	r31, r25
     498:	e1 f7       	brne	.-8      	; 0x492 <main+0x48>
	
	uint8_t down=0;
	
	while(1)
	{
		sMR_runCycle(l);
     49a:	80 91 14 02 	lds	r24, 0x0214
     49e:	90 91 15 02 	lds	r25, 0x0215
     4a2:	0e 94 94 06 	call	0xd28	; 0xd28 <sMR_runCycle>
     4a6:	f9 cf       	rjmp	.-14     	; 0x49a <main+0x50>

000004a8 <__vector_16>:
	}
}

ISR (TIMER0_OVF_vect) {
     4a8:	1f 92       	push	r1
     4aa:	0f 92       	push	r0
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	0f 92       	push	r0
     4b0:	0b b6       	in	r0, 0x3b	; 59
     4b2:	0f 92       	push	r0
     4b4:	11 24       	eor	r1, r1
     4b6:	2f 93       	push	r18
     4b8:	3f 93       	push	r19
     4ba:	4f 93       	push	r20
     4bc:	5f 93       	push	r21
     4be:	6f 93       	push	r22
     4c0:	7f 93       	push	r23
     4c2:	8f 93       	push	r24
     4c4:	9f 93       	push	r25
     4c6:	af 93       	push	r26
     4c8:	bf 93       	push	r27
     4ca:	ef 93       	push	r30
     4cc:	ff 93       	push	r31
	TCNT0=131;
     4ce:	83 e8       	ldi	r24, 0x83	; 131
     4d0:	82 bf       	out	0x32, r24	; 50
	TimerCheck(l);
     4d2:	80 91 14 02 	lds	r24, 0x0214
     4d6:	90 91 15 02 	lds	r25, 0x0215
     4da:	0e 94 95 08 	call	0x112a	; 0x112a <TimerCheck>
     4de:	ff 91       	pop	r31
     4e0:	ef 91       	pop	r30
     4e2:	bf 91       	pop	r27
     4e4:	af 91       	pop	r26
     4e6:	9f 91       	pop	r25
     4e8:	8f 91       	pop	r24
     4ea:	7f 91       	pop	r23
     4ec:	6f 91       	pop	r22
     4ee:	5f 91       	pop	r21
     4f0:	4f 91       	pop	r20
     4f2:	3f 91       	pop	r19
     4f4:	2f 91       	pop	r18
     4f6:	0f 90       	pop	r0
     4f8:	0b be       	out	0x3b, r0	; 59
     4fa:	0f 90       	pop	r0
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	0f 90       	pop	r0
     500:	1f 90       	pop	r1
     502:	18 95       	reti

00000504 <nrf24l01_readregister>:

/*
 * read one register
 */
uint8_t nrf24l01_readregister(uint8_t reg) {
	nrf24l01_CSNlo; //low CSN
     504:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     506:	8f 71       	andi	r24, 0x1F	; 31
     508:	0e 94 03 08 	call	0x1006	; 0x1006 <spi_writereadbyte>
    uint8_t result = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
     50c:	8f ef       	ldi	r24, 0xFF	; 255
     50e:	0e 94 03 08 	call	0x1006	; 0x1006 <spi_writereadbyte>
    nrf24l01_CSNhi; //high CSN
     512:	ae 9a       	sbi	0x15, 6	; 21
    return result;
}
     514:	08 95       	ret

00000516 <nrf24l01_readregisters>:

/*
 * read many registers
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
     516:	ff 92       	push	r15
     518:	0f 93       	push	r16
     51a:	1f 93       	push	r17
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	06 2f       	mov	r16, r22
     522:	f7 2e       	mov	r15, r23
     524:	14 2f       	mov	r17, r20
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
     526:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     528:	8f 71       	andi	r24, 0x1F	; 31
     52a:	0e 94 03 08 	call	0x1006	; 0x1006 <spi_writereadbyte>
	for(i=0; i<len; i++)
     52e:	11 23       	and	r17, r17
     530:	51 f0       	breq	.+20     	; 0x546 <nrf24l01_readregisters+0x30>
     532:	c0 2f       	mov	r28, r16
     534:	df 2d       	mov	r29, r15
     536:	00 e0       	ldi	r16, 0x00	; 0
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
     538:	8f ef       	ldi	r24, 0xFF	; 255
     53a:	0e 94 03 08 	call	0x1006	; 0x1006 <spi_writereadbyte>
     53e:	89 93       	st	Y+, r24
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     540:	0f 5f       	subi	r16, 0xFF	; 255
     542:	01 17       	cp	r16, r17
     544:	c9 f7       	brne	.-14     	; 0x538 <nrf24l01_readregisters+0x22>
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
	nrf24l01_CSNhi; //high CSN
     546:	ae 9a       	sbi	0x15, 6	; 21
}
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	1f 91       	pop	r17
     54e:	0f 91       	pop	r16
     550:	ff 90       	pop	r15
     552:	08 95       	ret

00000554 <nrf24l01_writeregister>:

/*
 * write one register
 */
void nrf24l01_writeregister(uint8_t reg, uint8_t value) {
     554:	cf 93       	push	r28
     556:	c6 2f       	mov	r28, r22
	nrf24l01_CSNlo; //low CSN
     558:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     55a:	8f 71       	andi	r24, 0x1F	; 31
     55c:	80 62       	ori	r24, 0x20	; 32
     55e:	0e 94 03 08 	call	0x1006	; 0x1006 <spi_writereadbyte>
	spi_writereadbyte(value); //write register
     562:	8c 2f       	mov	r24, r28
     564:	0e 94 03 08 	call	0x1006	; 0x1006 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     568:	ae 9a       	sbi	0x15, 6	; 21
}
     56a:	cf 91       	pop	r28
     56c:	08 95       	ret

0000056e <nrf24l01_writeregisters>:

/*
 * write many registers
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
     56e:	ff 92       	push	r15
     570:	0f 93       	push	r16
     572:	1f 93       	push	r17
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	06 2f       	mov	r16, r22
     57a:	f7 2e       	mov	r15, r23
     57c:	14 2f       	mov	r17, r20
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
     57e:	ae 98       	cbi	0x15, 6	; 21
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     580:	8f 71       	andi	r24, 0x1F	; 31
     582:	80 62       	ori	r24, 0x20	; 32
     584:	0e 94 03 08 	call	0x1006	; 0x1006 <spi_writereadbyte>
	for(i=0; i<len; i++)
     588:	11 23       	and	r17, r17
     58a:	49 f0       	breq	.+18     	; 0x59e <nrf24l01_writeregisters+0x30>
     58c:	c0 2f       	mov	r28, r16
     58e:	df 2d       	mov	r29, r15
     590:	00 e0       	ldi	r16, 0x00	; 0
		 spi_writereadbyte(value[i]); //write register
     592:	89 91       	ld	r24, Y+
     594:	0e 94 03 08 	call	0x1006	; 0x1006 <spi_writereadbyte>
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     598:	0f 5f       	subi	r16, 0xFF	; 255
     59a:	01 17       	cp	r16, r17
     59c:	d1 f7       	brne	.-12     	; 0x592 <nrf24l01_writeregisters+0x24>
		 spi_writereadbyte(value[i]); //write register
	nrf24l01_CSNhi; //high CSN
     59e:	ae 9a       	sbi	0x15, 6	; 21
}
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	1f 91       	pop	r17
     5a6:	0f 91       	pop	r16
     5a8:	ff 90       	pop	r15
     5aa:	08 95       	ret

000005ac <nrf24l01_revaddress>:

/*
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
     5ac:	20 e0       	ldi	r18, 0x00	; 0
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	04 96       	adiw	r24, 0x04	; 4
     5b2:	db 01       	movw	r26, r22
     5b4:	a2 0f       	add	r26, r18
     5b6:	b3 1f       	adc	r27, r19
     5b8:	fc 01       	movw	r30, r24
     5ba:	e2 1b       	sub	r30, r18
     5bc:	f3 0b       	sbc	r31, r19
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
     5be:	40 81       	ld	r20, Z
     5c0:	4c 93       	st	X, r20
     5c2:	2f 5f       	subi	r18, 0xFF	; 255
     5c4:	3f 4f       	sbci	r19, 0xFF	; 255
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
     5c6:	25 30       	cpi	r18, 0x05	; 5
     5c8:	31 05       	cpc	r19, r1
     5ca:	99 f7       	brne	.-26     	; 0x5b2 <nrf24l01_revaddress+0x6>
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
}
     5cc:	08 95       	ret

000005ce <nrf24l01_setrxaddr>:

/*
 * set rx address
 */
void nrf24l01_setrxaddr(uint8_t pipe, uint8_t *addr) {
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	00 d0       	rcall	.+0      	; 0x5d4 <nrf24l01_setrxaddr+0x6>
     5d4:	00 d0       	rcall	.+0      	; 0x5d6 <nrf24l01_setrxaddr+0x8>
     5d6:	0f 92       	push	r0
     5d8:	cd b7       	in	r28, 0x3d	; 61
     5da:	de b7       	in	r29, 0x3e	; 62
	if(pipe == 0) {
     5dc:	88 23       	and	r24, r24
     5de:	b1 f4       	brne	.+44     	; 0x60c <nrf24l01_setrxaddr+0x3e>
		memcpy(&nrf24l01_addr0, addr, NRF24L01_ADDRSIZE); //cache address
     5e0:	ab eb       	ldi	r26, 0xBB	; 187
     5e2:	b1 e0       	ldi	r27, 0x01	; 1
     5e4:	fb 01       	movw	r30, r22
     5e6:	85 e0       	ldi	r24, 0x05	; 5
     5e8:	01 90       	ld	r0, Z+
     5ea:	0d 92       	st	X+, r0
     5ec:	81 50       	subi	r24, 0x01	; 1
     5ee:	e1 f7       	brne	.-8      	; 0x5e8 <nrf24l01_setrxaddr+0x1a>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     5f0:	cb 01       	movw	r24, r22
     5f2:	be 01       	movw	r22, r28
     5f4:	6f 5f       	subi	r22, 0xFF	; 255
     5f6:	7f 4f       	sbci	r23, 0xFF	; 255
     5f8:	0e 94 d6 02 	call	0x5ac	; 0x5ac <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE);
     5fc:	8a e0       	ldi	r24, 0x0A	; 10
     5fe:	be 01       	movw	r22, r28
     600:	6f 5f       	subi	r22, 0xFF	; 255
     602:	7f 4f       	sbci	r23, 0xFF	; 255
     604:	45 e0       	ldi	r20, 0x05	; 5
     606:	0e 94 b7 02 	call	0x56e	; 0x56e <nrf24l01_writeregisters>
     60a:	56 c0       	rjmp	.+172    	; 0x6b8 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 1) {
     60c:	81 30       	cpi	r24, 0x01	; 1
     60e:	b1 f4       	brne	.+44     	; 0x63c <nrf24l01_setrxaddr+0x6e>
		memcpy(&nrf24l01_addr1, addr, NRF24L01_ADDRSIZE); //cache address
     610:	a0 ec       	ldi	r26, 0xC0	; 192
     612:	b1 e0       	ldi	r27, 0x01	; 1
     614:	fb 01       	movw	r30, r22
     616:	85 e0       	ldi	r24, 0x05	; 5
     618:	01 90       	ld	r0, Z+
     61a:	0d 92       	st	X+, r0
     61c:	81 50       	subi	r24, 0x01	; 1
     61e:	e1 f7       	brne	.-8      	; 0x618 <nrf24l01_setrxaddr+0x4a>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     620:	cb 01       	movw	r24, r22
     622:	be 01       	movw	r22, r28
     624:	6f 5f       	subi	r22, 0xFF	; 255
     626:	7f 4f       	sbci	r23, 0xFF	; 255
     628:	0e 94 d6 02 	call	0x5ac	; 0x5ac <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P1, addrrev, NRF24L01_ADDRSIZE);
     62c:	8b e0       	ldi	r24, 0x0B	; 11
     62e:	be 01       	movw	r22, r28
     630:	6f 5f       	subi	r22, 0xFF	; 255
     632:	7f 4f       	sbci	r23, 0xFF	; 255
     634:	45 e0       	ldi	r20, 0x05	; 5
     636:	0e 94 b7 02 	call	0x56e	; 0x56e <nrf24l01_writeregisters>
     63a:	3e c0       	rjmp	.+124    	; 0x6b8 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 2) {
     63c:	82 30       	cpi	r24, 0x02	; 2
     63e:	71 f4       	brne	.+28     	; 0x65c <nrf24l01_setrxaddr+0x8e>
		memcpy(&nrf24l01_addr2, addr, NRF24L01_ADDRSIZE); //cache address
     640:	a5 ec       	ldi	r26, 0xC5	; 197
     642:	b1 e0       	ldi	r27, 0x01	; 1
     644:	fb 01       	movw	r30, r22
     646:	85 e0       	ldi	r24, 0x05	; 5
     648:	01 90       	ld	r0, Z+
     64a:	0d 92       	st	X+, r0
     64c:	81 50       	subi	r24, 0x01	; 1
     64e:	e1 f7       	brne	.-8      	; 0x648 <nrf24l01_setrxaddr+0x7a>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P2, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     650:	8c e0       	ldi	r24, 0x0C	; 12
     652:	fb 01       	movw	r30, r22
     654:	64 81       	ldd	r22, Z+4	; 0x04
     656:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
     65a:	2e c0       	rjmp	.+92     	; 0x6b8 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 3) {
     65c:	83 30       	cpi	r24, 0x03	; 3
     65e:	71 f4       	brne	.+28     	; 0x67c <nrf24l01_setrxaddr+0xae>
		memcpy(&nrf24l01_addr3, addr, NRF24L01_ADDRSIZE); //cache address
     660:	aa ec       	ldi	r26, 0xCA	; 202
     662:	b1 e0       	ldi	r27, 0x01	; 1
     664:	fb 01       	movw	r30, r22
     666:	85 e0       	ldi	r24, 0x05	; 5
     668:	01 90       	ld	r0, Z+
     66a:	0d 92       	st	X+, r0
     66c:	81 50       	subi	r24, 0x01	; 1
     66e:	e1 f7       	brne	.-8      	; 0x668 <nrf24l01_setrxaddr+0x9a>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P3, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     670:	8d e0       	ldi	r24, 0x0D	; 13
     672:	fb 01       	movw	r30, r22
     674:	64 81       	ldd	r22, Z+4	; 0x04
     676:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
     67a:	1e c0       	rjmp	.+60     	; 0x6b8 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 4) {
     67c:	84 30       	cpi	r24, 0x04	; 4
     67e:	71 f4       	brne	.+28     	; 0x69c <nrf24l01_setrxaddr+0xce>
		memcpy(&nrf24l01_addr4, addr, NRF24L01_ADDRSIZE); //cache address
     680:	af ec       	ldi	r26, 0xCF	; 207
     682:	b1 e0       	ldi	r27, 0x01	; 1
     684:	fb 01       	movw	r30, r22
     686:	85 e0       	ldi	r24, 0x05	; 5
     688:	01 90       	ld	r0, Z+
     68a:	0d 92       	st	X+, r0
     68c:	81 50       	subi	r24, 0x01	; 1
     68e:	e1 f7       	brne	.-8      	; 0x688 <nrf24l01_setrxaddr+0xba>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P4, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     690:	8e e0       	ldi	r24, 0x0E	; 14
     692:	fb 01       	movw	r30, r22
     694:	64 81       	ldd	r22, Z+4	; 0x04
     696:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
     69a:	0e c0       	rjmp	.+28     	; 0x6b8 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 5) {
     69c:	85 30       	cpi	r24, 0x05	; 5
     69e:	61 f4       	brne	.+24     	; 0x6b8 <nrf24l01_setrxaddr+0xea>
		memcpy(&nrf24l01_addr5, addr, NRF24L01_ADDRSIZE); //cache address
     6a0:	a4 ed       	ldi	r26, 0xD4	; 212
     6a2:	b1 e0       	ldi	r27, 0x01	; 1
     6a4:	fb 01       	movw	r30, r22
     6a6:	01 90       	ld	r0, Z+
     6a8:	0d 92       	st	X+, r0
     6aa:	81 50       	subi	r24, 0x01	; 1
     6ac:	e1 f7       	brne	.-8      	; 0x6a6 <nrf24l01_setrxaddr+0xd8>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P5, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     6ae:	8f e0       	ldi	r24, 0x0F	; 15
     6b0:	fb 01       	movw	r30, r22
     6b2:	64 81       	ldd	r22, Z+4	; 0x04
     6b4:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
	}
}
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
     6bc:	0f 90       	pop	r0
     6be:	0f 90       	pop	r0
     6c0:	0f 90       	pop	r0
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	08 95       	ret

000006c8 <nrf24l01_settxaddr>:

/*
 * set tx address
 */
void nrf24l01_settxaddr(uint8_t *addr) {
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	00 d0       	rcall	.+0      	; 0x6ce <nrf24l01_settxaddr+0x6>
     6ce:	00 d0       	rcall	.+0      	; 0x6d0 <nrf24l01_settxaddr+0x8>
     6d0:	0f 92       	push	r0
     6d2:	cd b7       	in	r28, 0x3d	; 61
     6d4:	de b7       	in	r29, 0x3e	; 62
	memcpy(&nrf24l01_addrtx, addr, NRF24L01_ADDRSIZE); //cache address
     6d6:	a9 ed       	ldi	r26, 0xD9	; 217
     6d8:	b1 e0       	ldi	r27, 0x01	; 1
     6da:	e8 2f       	mov	r30, r24
     6dc:	f9 2f       	mov	r31, r25
     6de:	25 e0       	ldi	r18, 0x05	; 5
     6e0:	01 90       	ld	r0, Z+
     6e2:	0d 92       	st	X+, r0
     6e4:	21 50       	subi	r18, 0x01	; 1
     6e6:	e1 f7       	brne	.-8      	; 0x6e0 <nrf24l01_settxaddr+0x18>
	uint8_t addrrev[NRF24L01_ADDRSIZE];
	nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     6e8:	be 01       	movw	r22, r28
     6ea:	6f 5f       	subi	r22, 0xFF	; 255
     6ec:	7f 4f       	sbci	r23, 0xFF	; 255
     6ee:	0e 94 d6 02 	call	0x5ac	; 0x5ac <nrf24l01_revaddress>
	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE); //set rx address for ack on pipe 0
     6f2:	8a e0       	ldi	r24, 0x0A	; 10
     6f4:	be 01       	movw	r22, r28
     6f6:	6f 5f       	subi	r22, 0xFF	; 255
     6f8:	7f 4f       	sbci	r23, 0xFF	; 255
     6fa:	45 e0       	ldi	r20, 0x05	; 5
     6fc:	0e 94 b7 02 	call	0x56e	; 0x56e <nrf24l01_writeregisters>
	nrf24l01_writeregisters(NRF24L01_REG_TX_ADDR, addrrev, NRF24L01_ADDRSIZE); //set tx address
     700:	80 e1       	ldi	r24, 0x10	; 16
     702:	be 01       	movw	r22, r28
     704:	6f 5f       	subi	r22, 0xFF	; 255
     706:	7f 4f       	sbci	r23, 0xFF	; 255
     708:	45 e0       	ldi	r20, 0x05	; 5
     70a:	0e 94 b7 02 	call	0x56e	; 0x56e <nrf24l01_writeregisters>
}
     70e:	0f 90       	pop	r0
     710:	0f 90       	pop	r0
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	08 95       	ret

0000071e <nrf24l01_flushRXfifo>:

/*
 * flush RX fifo
 */
void nrf24l01_flushRXfifo() {
	nrf24l01_CSNlo; //low CSN
     71e:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_FLUSH_RX);
     720:	82 ee       	ldi	r24, 0xE2	; 226
     722:	0e 94 03 08 	call	0x1006	; 0x1006 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     726:	ae 9a       	sbi	0x15, 6	; 21
}
     728:	08 95       	ret

0000072a <nrf24l01_flushTXfifo>:

/*
 * flush TX fifo
 */
void nrf24l01_flushTXfifo() {
	nrf24l01_CSNlo; //low CSN
     72a:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_FLUSH_TX);
     72c:	81 ee       	ldi	r24, 0xE1	; 225
     72e:	0e 94 03 08 	call	0x1006	; 0x1006 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     732:	ae 9a       	sbi	0x15, 6	; 21
}
     734:	08 95       	ret

00000736 <nrf24l01_setRX>:

/*
 * set chip as RX
 */
void nrf24l01_setRX() {
	nrf24l01_setrxaddr(0, nrf24l01_addr0); //restore pipe 0 address
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	6b eb       	ldi	r22, 0xBB	; 187
     73a:	71 e0       	ldi	r23, 0x01	; 1
     73c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <nrf24l01_setrxaddr>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PRIM_RX)); //prx mode
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	0e 94 82 02 	call	0x504	; 0x504 <nrf24l01_readregister>
     746:	68 2f       	mov	r22, r24
     748:	61 60       	ori	r22, 0x01	; 1
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	0e 94 82 02 	call	0x504	; 0x504 <nrf24l01_readregister>
     756:	68 2f       	mov	r22, r24
     758:	62 60       	ori	r22, 0x02	; 2
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     760:	87 e0       	ldi	r24, 0x07	; 7
     762:	60 e7       	ldi	r22, 0x70	; 112
     764:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
	nrf24l01_flushRXfifo(); //flush rx fifo
     768:	0e 94 8f 03 	call	0x71e	; 0x71e <nrf24l01_flushRXfifo>
	nrf24l01_flushTXfifo(); //flush tx fifo
     76c:	0e 94 95 03 	call	0x72a	; 0x72a <nrf24l01_flushTXfifo>
	nrf24l01_CEhi; //start listening
     770:	af 9a       	sbi	0x15, 7	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     772:	82 e3       	ldi	r24, 0x32	; 50
     774:	8a 95       	dec	r24
     776:	f1 f7       	brne	.-4      	; 0x774 <nrf24l01_setRX+0x3e>
	_delay_us(150); //wait for the radio to power up
}
     778:	08 95       	ret

0000077a <nrf24l01_setTX>:

/*
 * set chip as TX
 */
void nrf24l01_setTX() {
	nrf24l01_CElo; //stop listening
     77a:	af 98       	cbi	0x15, 7	; 21
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PRIM_RX)); //ptx mode
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	0e 94 82 02 	call	0x504	; 0x504 <nrf24l01_readregister>
     782:	68 2f       	mov	r22, r24
     784:	6e 7f       	andi	r22, 0xFE	; 254
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	0e 94 82 02 	call	0x504	; 0x504 <nrf24l01_readregister>
     792:	68 2f       	mov	r22, r24
     794:	62 60       	ori	r22, 0x02	; 2
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     79c:	87 e0       	ldi	r24, 0x07	; 7
     79e:	60 e7       	ldi	r22, 0x70	; 112
     7a0:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
	nrf24l01_flushTXfifo(); //flush tx fifo
     7a4:	0e 94 95 03 	call	0x72a	; 0x72a <nrf24l01_flushTXfifo>
     7a8:	82 e3       	ldi	r24, 0x32	; 50
     7aa:	8a 95       	dec	r24
     7ac:	f1 f7       	brne	.-4      	; 0x7aa <nrf24l01_setTX+0x30>
	_delay_us(150); //wait for the radio to power up
}
     7ae:	08 95       	ret

000007b0 <nrf24l01_getstatus>:
/*
 * get status register
 */
uint8_t nrf24l01_getstatus() {
	uint8_t status = 0;
	nrf24l01_CSNlo; //low CSN
     7b0:	ae 98       	cbi	0x15, 6	; 21
	status = spi_writereadbyte(NRF24L01_CMD_NOP); //get status, send NOP request
     7b2:	8f ef       	ldi	r24, 0xFF	; 255
     7b4:	0e 94 03 08 	call	0x1006	; 0x1006 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     7b8:	ae 9a       	sbi	0x15, 6	; 21
	return status;
}
     7ba:	08 95       	ret

000007bc <nrf24l01_printinfo>:

#if NRF24L01_PRINTENABLE == 1
/*
 * print info
 */
void nrf24l01_printinfo(void(*prints)(const char *), void(*printc)(unsigned char data)) {
     7bc:	ef 92       	push	r14
     7be:	ff 92       	push	r15
     7c0:	0f 93       	push	r16
     7c2:	1f 93       	push	r17
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	cd b7       	in	r28, 0x3d	; 61
     7ca:	de b7       	in	r29, 0x3e	; 62
     7cc:	c4 56       	subi	r28, 0x64	; 100
     7ce:	d0 40       	sbci	r29, 0x00	; 0
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	f8 94       	cli
     7d4:	de bf       	out	0x3e, r29	; 62
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	cd bf       	out	0x3d, r28	; 61
     7da:	7c 01       	movw	r14, r24
	char buff[100];
	prints("info\r\n");
     7dc:	81 e4       	ldi	r24, 0x41	; 65
     7de:	91 e0       	ldi	r25, 0x01	; 1
     7e0:	f7 01       	movw	r30, r14
     7e2:	09 95       	icall
	sprintf(buff,"STATUS: %02X\r\n", nrf24l01_getstatus()); prints(buff);
     7e4:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_getstatus>
     7e8:	00 d0       	rcall	.+0      	; 0x7ea <nrf24l01_printinfo+0x2e>
     7ea:	00 d0       	rcall	.+0      	; 0x7ec <nrf24l01_printinfo+0x30>
     7ec:	00 d0       	rcall	.+0      	; 0x7ee <nrf24l01_printinfo+0x32>
     7ee:	ed b7       	in	r30, 0x3d	; 61
     7f0:	fe b7       	in	r31, 0x3e	; 62
     7f2:	31 96       	adiw	r30, 0x01	; 1
     7f4:	8e 01       	movw	r16, r28
     7f6:	0f 5f       	subi	r16, 0xFF	; 255
     7f8:	1f 4f       	sbci	r17, 0xFF	; 255
     7fa:	ad b7       	in	r26, 0x3d	; 61
     7fc:	be b7       	in	r27, 0x3e	; 62
     7fe:	12 96       	adiw	r26, 0x02	; 2
     800:	1c 93       	st	X, r17
     802:	0e 93       	st	-X, r16
     804:	11 97       	sbiw	r26, 0x01	; 1
     806:	28 e4       	ldi	r18, 0x48	; 72
     808:	31 e0       	ldi	r19, 0x01	; 1
     80a:	33 83       	std	Z+3, r19	; 0x03
     80c:	22 83       	std	Z+2, r18	; 0x02
     80e:	84 83       	std	Z+4, r24	; 0x04
     810:	15 82       	std	Z+5, r1	; 0x05
     812:	0e 94 4b 0a 	call	0x1496	; 0x1496 <sprintf>
     816:	8d b7       	in	r24, 0x3d	; 61
     818:	9e b7       	in	r25, 0x3e	; 62
     81a:	06 96       	adiw	r24, 0x06	; 6
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	f8 94       	cli
     820:	9e bf       	out	0x3e, r25	; 62
     822:	0f be       	out	0x3f, r0	; 63
     824:	8d bf       	out	0x3d, r24	; 61
     826:	c8 01       	movw	r24, r16
     828:	f7 01       	movw	r30, r14
     82a:	09 95       	icall
	sprintf(buff,"CONFIG: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_CONFIG)); prints(buff);
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	0e 94 82 02 	call	0x504	; 0x504 <nrf24l01_readregister>
     832:	00 d0       	rcall	.+0      	; 0x834 <nrf24l01_printinfo+0x78>
     834:	00 d0       	rcall	.+0      	; 0x836 <nrf24l01_printinfo+0x7a>
     836:	00 d0       	rcall	.+0      	; 0x838 <nrf24l01_printinfo+0x7c>
     838:	ed b7       	in	r30, 0x3d	; 61
     83a:	fe b7       	in	r31, 0x3e	; 62
     83c:	31 96       	adiw	r30, 0x01	; 1
     83e:	ad b7       	in	r26, 0x3d	; 61
     840:	be b7       	in	r27, 0x3e	; 62
     842:	12 96       	adiw	r26, 0x02	; 2
     844:	1c 93       	st	X, r17
     846:	0e 93       	st	-X, r16
     848:	11 97       	sbiw	r26, 0x01	; 1
     84a:	27 e5       	ldi	r18, 0x57	; 87
     84c:	31 e0       	ldi	r19, 0x01	; 1
     84e:	33 83       	std	Z+3, r19	; 0x03
     850:	22 83       	std	Z+2, r18	; 0x02
     852:	84 83       	std	Z+4, r24	; 0x04
     854:	15 82       	std	Z+5, r1	; 0x05
     856:	0e 94 4b 0a 	call	0x1496	; 0x1496 <sprintf>
     85a:	8d b7       	in	r24, 0x3d	; 61
     85c:	9e b7       	in	r25, 0x3e	; 62
     85e:	06 96       	adiw	r24, 0x06	; 6
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	f8 94       	cli
     864:	9e bf       	out	0x3e, r25	; 62
     866:	0f be       	out	0x3f, r0	; 63
     868:	8d bf       	out	0x3d, r24	; 61
     86a:	c8 01       	movw	r24, r16
     86c:	f7 01       	movw	r30, r14
     86e:	09 95       	icall
	sprintf(buff,"RF_CH: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_CH)); prints(buff);
     870:	85 e0       	ldi	r24, 0x05	; 5
     872:	0e 94 82 02 	call	0x504	; 0x504 <nrf24l01_readregister>
     876:	00 d0       	rcall	.+0      	; 0x878 <nrf24l01_printinfo+0xbc>
     878:	00 d0       	rcall	.+0      	; 0x87a <nrf24l01_printinfo+0xbe>
     87a:	00 d0       	rcall	.+0      	; 0x87c <nrf24l01_printinfo+0xc0>
     87c:	ed b7       	in	r30, 0x3d	; 61
     87e:	fe b7       	in	r31, 0x3e	; 62
     880:	31 96       	adiw	r30, 0x01	; 1
     882:	ad b7       	in	r26, 0x3d	; 61
     884:	be b7       	in	r27, 0x3e	; 62
     886:	12 96       	adiw	r26, 0x02	; 2
     888:	1c 93       	st	X, r17
     88a:	0e 93       	st	-X, r16
     88c:	11 97       	sbiw	r26, 0x01	; 1
     88e:	26 e6       	ldi	r18, 0x66	; 102
     890:	31 e0       	ldi	r19, 0x01	; 1
     892:	33 83       	std	Z+3, r19	; 0x03
     894:	22 83       	std	Z+2, r18	; 0x02
     896:	84 83       	std	Z+4, r24	; 0x04
     898:	15 82       	std	Z+5, r1	; 0x05
     89a:	0e 94 4b 0a 	call	0x1496	; 0x1496 <sprintf>
     89e:	8d b7       	in	r24, 0x3d	; 61
     8a0:	9e b7       	in	r25, 0x3e	; 62
     8a2:	06 96       	adiw	r24, 0x06	; 6
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	f8 94       	cli
     8a8:	9e bf       	out	0x3e, r25	; 62
     8aa:	0f be       	out	0x3f, r0	; 63
     8ac:	8d bf       	out	0x3d, r24	; 61
     8ae:	c8 01       	movw	r24, r16
     8b0:	f7 01       	movw	r30, r14
     8b2:	09 95       	icall
	sprintf(buff,"RF_SETUP: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_SETUP)); prints(buff);
     8b4:	86 e0       	ldi	r24, 0x06	; 6
     8b6:	0e 94 82 02 	call	0x504	; 0x504 <nrf24l01_readregister>
     8ba:	00 d0       	rcall	.+0      	; 0x8bc <nrf24l01_printinfo+0x100>
     8bc:	00 d0       	rcall	.+0      	; 0x8be <nrf24l01_printinfo+0x102>
     8be:	00 d0       	rcall	.+0      	; 0x8c0 <nrf24l01_printinfo+0x104>
     8c0:	ed b7       	in	r30, 0x3d	; 61
     8c2:	fe b7       	in	r31, 0x3e	; 62
     8c4:	31 96       	adiw	r30, 0x01	; 1
     8c6:	ad b7       	in	r26, 0x3d	; 61
     8c8:	be b7       	in	r27, 0x3e	; 62
     8ca:	12 96       	adiw	r26, 0x02	; 2
     8cc:	1c 93       	st	X, r17
     8ce:	0e 93       	st	-X, r16
     8d0:	11 97       	sbiw	r26, 0x01	; 1
     8d2:	24 e7       	ldi	r18, 0x74	; 116
     8d4:	31 e0       	ldi	r19, 0x01	; 1
     8d6:	33 83       	std	Z+3, r19	; 0x03
     8d8:	22 83       	std	Z+2, r18	; 0x02
     8da:	84 83       	std	Z+4, r24	; 0x04
     8dc:	15 82       	std	Z+5, r1	; 0x05
     8de:	0e 94 4b 0a 	call	0x1496	; 0x1496 <sprintf>
     8e2:	8d b7       	in	r24, 0x3d	; 61
     8e4:	9e b7       	in	r25, 0x3e	; 62
     8e6:	06 96       	adiw	r24, 0x06	; 6
     8e8:	0f b6       	in	r0, 0x3f	; 63
     8ea:	f8 94       	cli
     8ec:	9e bf       	out	0x3e, r25	; 62
     8ee:	0f be       	out	0x3f, r0	; 63
     8f0:	8d bf       	out	0x3d, r24	; 61
     8f2:	c8 01       	movw	r24, r16
     8f4:	f7 01       	movw	r30, r14
     8f6:	09 95       	icall
	sprintf(buff,"EN_AA: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_AA)); prints(buff);
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	0e 94 82 02 	call	0x504	; 0x504 <nrf24l01_readregister>
     8fe:	00 d0       	rcall	.+0      	; 0x900 <nrf24l01_printinfo+0x144>
     900:	00 d0       	rcall	.+0      	; 0x902 <nrf24l01_printinfo+0x146>
     902:	00 d0       	rcall	.+0      	; 0x904 <nrf24l01_printinfo+0x148>
     904:	ed b7       	in	r30, 0x3d	; 61
     906:	fe b7       	in	r31, 0x3e	; 62
     908:	31 96       	adiw	r30, 0x01	; 1
     90a:	ad b7       	in	r26, 0x3d	; 61
     90c:	be b7       	in	r27, 0x3e	; 62
     90e:	12 96       	adiw	r26, 0x02	; 2
     910:	1c 93       	st	X, r17
     912:	0e 93       	st	-X, r16
     914:	11 97       	sbiw	r26, 0x01	; 1
     916:	25 e8       	ldi	r18, 0x85	; 133
     918:	31 e0       	ldi	r19, 0x01	; 1
     91a:	33 83       	std	Z+3, r19	; 0x03
     91c:	22 83       	std	Z+2, r18	; 0x02
     91e:	84 83       	std	Z+4, r24	; 0x04
     920:	15 82       	std	Z+5, r1	; 0x05
     922:	0e 94 4b 0a 	call	0x1496	; 0x1496 <sprintf>
     926:	8d b7       	in	r24, 0x3d	; 61
     928:	9e b7       	in	r25, 0x3e	; 62
     92a:	06 96       	adiw	r24, 0x06	; 6
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	f8 94       	cli
     930:	9e bf       	out	0x3e, r25	; 62
     932:	0f be       	out	0x3f, r0	; 63
     934:	8d bf       	out	0x3d, r24	; 61
     936:	c8 01       	movw	r24, r16
     938:	f7 01       	movw	r30, r14
     93a:	09 95       	icall
	sprintf(buff,"EN_RXADDR: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_RXADDR)); prints(buff);
     93c:	82 e0       	ldi	r24, 0x02	; 2
     93e:	0e 94 82 02 	call	0x504	; 0x504 <nrf24l01_readregister>
     942:	00 d0       	rcall	.+0      	; 0x944 <nrf24l01_printinfo+0x188>
     944:	00 d0       	rcall	.+0      	; 0x946 <nrf24l01_printinfo+0x18a>
     946:	00 d0       	rcall	.+0      	; 0x948 <nrf24l01_printinfo+0x18c>
     948:	ed b7       	in	r30, 0x3d	; 61
     94a:	fe b7       	in	r31, 0x3e	; 62
     94c:	31 96       	adiw	r30, 0x01	; 1
     94e:	ad b7       	in	r26, 0x3d	; 61
     950:	be b7       	in	r27, 0x3e	; 62
     952:	12 96       	adiw	r26, 0x02	; 2
     954:	1c 93       	st	X, r17
     956:	0e 93       	st	-X, r16
     958:	11 97       	sbiw	r26, 0x01	; 1
     95a:	23 e9       	ldi	r18, 0x93	; 147
     95c:	31 e0       	ldi	r19, 0x01	; 1
     95e:	33 83       	std	Z+3, r19	; 0x03
     960:	22 83       	std	Z+2, r18	; 0x02
     962:	84 83       	std	Z+4, r24	; 0x04
     964:	15 82       	std	Z+5, r1	; 0x05
     966:	0e 94 4b 0a 	call	0x1496	; 0x1496 <sprintf>
     96a:	8d b7       	in	r24, 0x3d	; 61
     96c:	9e b7       	in	r25, 0x3e	; 62
     96e:	06 96       	adiw	r24, 0x06	; 6
     970:	0f b6       	in	r0, 0x3f	; 63
     972:	f8 94       	cli
     974:	9e bf       	out	0x3e, r25	; 62
     976:	0f be       	out	0x3f, r0	; 63
     978:	8d bf       	out	0x3d, r24	; 61
     97a:	c8 01       	movw	r24, r16
     97c:	f7 01       	movw	r30, r14
     97e:	09 95       	icall
	sprintf(buff,"OBSERVE_TX: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_OBSERVE_TX)); prints(buff);
     980:	88 e0       	ldi	r24, 0x08	; 8
     982:	0e 94 82 02 	call	0x504	; 0x504 <nrf24l01_readregister>
     986:	00 d0       	rcall	.+0      	; 0x988 <nrf24l01_printinfo+0x1cc>
     988:	00 d0       	rcall	.+0      	; 0x98a <nrf24l01_printinfo+0x1ce>
     98a:	00 d0       	rcall	.+0      	; 0x98c <nrf24l01_printinfo+0x1d0>
     98c:	ed b7       	in	r30, 0x3d	; 61
     98e:	fe b7       	in	r31, 0x3e	; 62
     990:	31 96       	adiw	r30, 0x01	; 1
     992:	ad b7       	in	r26, 0x3d	; 61
     994:	be b7       	in	r27, 0x3e	; 62
     996:	12 96       	adiw	r26, 0x02	; 2
     998:	1c 93       	st	X, r17
     99a:	0e 93       	st	-X, r16
     99c:	11 97       	sbiw	r26, 0x01	; 1
     99e:	25 ea       	ldi	r18, 0xA5	; 165
     9a0:	31 e0       	ldi	r19, 0x01	; 1
     9a2:	33 83       	std	Z+3, r19	; 0x03
     9a4:	22 83       	std	Z+2, r18	; 0x02
     9a6:	84 83       	std	Z+4, r24	; 0x04
     9a8:	15 82       	std	Z+5, r1	; 0x05
     9aa:	0e 94 4b 0a 	call	0x1496	; 0x1496 <sprintf>
     9ae:	8d b7       	in	r24, 0x3d	; 61
     9b0:	9e b7       	in	r25, 0x3e	; 62
     9b2:	06 96       	adiw	r24, 0x06	; 6
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	f8 94       	cli
     9b8:	9e bf       	out	0x3e, r25	; 62
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	8d bf       	out	0x3d, r24	; 61
     9be:	c8 01       	movw	r24, r16
     9c0:	f7 01       	movw	r30, r14
     9c2:	09 95       	icall
	prints("\r\n");
     9c4:	88 eb       	ldi	r24, 0xB8	; 184
     9c6:	91 e0       	ldi	r25, 0x01	; 1
     9c8:	f7 01       	movw	r30, r14
     9ca:	09 95       	icall
}
     9cc:	cc 59       	subi	r28, 0x9C	; 156
     9ce:	df 4f       	sbci	r29, 0xFF	; 255
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	de bf       	out	0x3e, r29	; 62
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	cd bf       	out	0x3d, r28	; 61
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	ff 90       	pop	r15
     9e4:	ef 90       	pop	r14
     9e6:	08 95       	ret

000009e8 <nrf24l01_readready>:
}

/*
 * check if there is data ready
 */
uint8_t nrf24l01_readready(uint8_t* pipe) {
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	ec 01       	movw	r28, r24
    uint8_t status = nrf24l01_getstatus();
     9ee:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_getstatus>
    uint8_t ret = status & (1<<NRF24L01_REG_RX_DR);
    if(ret) {
     9f2:	98 2f       	mov	r25, r24
     9f4:	90 74       	andi	r25, 0x40	; 64
     9f6:	86 ff       	sbrs	r24, 6
     9f8:	05 c0       	rjmp	.+10     	; 0xa04 <nrf24l01_readready+0x1c>
		//get the pipe number
		if(pipe)
     9fa:	20 97       	sbiw	r28, 0x00	; 0
     9fc:	19 f0       	breq	.+6      	; 0xa04 <nrf24l01_readready+0x1c>
			*pipe = (status >> NRF24L01_REG_RX_P_NO) & 0b111;
     9fe:	86 95       	lsr	r24
     a00:	87 70       	andi	r24, 0x07	; 7
     a02:	88 83       	st	Y, r24
    }
    return ret;
}
     a04:	89 2f       	mov	r24, r25
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	08 95       	ret

00000a0c <nrf24l01_read>:

/*
 * get data
 */
void nrf24l01_read(uint8_t pipe,uint8_t *data) {
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	06 2f       	mov	r16, r22
     a16:	17 2f       	mov	r17, r23
	uint8_t i = 0;
	//read rx register
	nrf24l01_CSNlo; //low CSN
     a18:	ae 98       	cbi	0x15, 6	; 21
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
     a1a:	81 e6       	ldi	r24, 0x61	; 97
     a1c:	0e 94 03 08 	call	0x1006	; 0x1006 <spi_writereadbyte>
     a20:	c0 2f       	mov	r28, r16
     a22:	d1 2f       	mov	r29, r17
	//Thay doi lai command, lay PAYLOAD va write ACK
	//spi_writereadbyte(NRF24L01_CMD_W_ACK_PAYLOAD | pipe);
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     a24:	10 e0       	ldi	r17, 0x00	; 0
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
     a26:	8f ef       	ldi	r24, 0xFF	; 255
     a28:	0e 94 03 08 	call	0x1006	; 0x1006 <spi_writereadbyte>
     a2c:	89 93       	st	Y+, r24
	//read rx register
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
	//Thay doi lai command, lay PAYLOAD va write ACK
	//spi_writereadbyte(NRF24L01_CMD_W_ACK_PAYLOAD | pipe);
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     a2e:	1f 5f       	subi	r17, 0xFF	; 255
     a30:	10 31       	cpi	r17, 0x10	; 16
     a32:	c9 f7       	brne	.-14     	; 0xa26 <nrf24l01_read+0x1a>
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
    nrf24l01_CSNhi; //high CSN
     a34:	ae 9a       	sbi	0x15, 6	; 21
    //reset register
    nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR));
     a36:	87 e0       	ldi	r24, 0x07	; 7
     a38:	60 e4       	ldi	r22, 0x40	; 64
     a3a:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
    //handle ack payload receipt
	if (nrf24l01_getstatus() & (1<<NRF24L01_REG_TX_DS))
     a3e:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_getstatus>
     a42:	85 ff       	sbrs	r24, 5
     a44:	04 c0       	rjmp	.+8      	; 0xa4e <nrf24l01_read+0x42>
		nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_TX_DS));
     a46:	87 e0       	ldi	r24, 0x07	; 7
     a48:	60 e2       	ldi	r22, 0x20	; 32
     a4a:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
}
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	1f 91       	pop	r17
     a54:	0f 91       	pop	r16
     a56:	08 95       	ret

00000a58 <nrf24l01_write>:

/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
     a58:	0f 93       	push	r16
     a5a:	1f 93       	push	r17
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	08 2f       	mov	r16, r24
     a62:	19 2f       	mov	r17, r25
	uint8_t i = 0;
	uint8_t ret = 0;

	//set tx mode
	nrf24l01_setTX();
     a64:	0e 94 bd 03 	call	0x77a	; 0x77a <nrf24l01_setTX>

	//write data
	nrf24l01_CSNlo; //low CSN
     a68:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
     a6a:	80 ea       	ldi	r24, 0xA0	; 160
     a6c:	0e 94 03 08 	call	0x1006	; 0x1006 <spi_writereadbyte>
     a70:	c0 2f       	mov	r28, r16
     a72:	d1 2f       	mov	r29, r17
     a74:	10 e1       	ldi	r17, 0x10	; 16
	for (i=0; i<NRF24L01_PAYLOAD; i++)
		spi_writereadbyte(data[i]);
     a76:	89 91       	ld	r24, Y+
     a78:	0e 94 03 08 	call	0x1006	; 0x1006 <spi_writereadbyte>
     a7c:	11 50       	subi	r17, 0x01	; 1
	nrf24l01_setTX();

	//write data
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
	for (i=0; i<NRF24L01_PAYLOAD; i++)
     a7e:	d9 f7       	brne	.-10     	; 0xa76 <nrf24l01_write+0x1e>
		spi_writereadbyte(data[i]);
	nrf24l01_CSNhi; //high CSN
     a80:	ae 9a       	sbi	0x15, 6	; 21

	//start transmission
	nrf24l01_CEhi; //high CE
     a82:	af 9a       	sbi	0x15, 7	; 21
     a84:	85 e0       	ldi	r24, 0x05	; 5
     a86:	8a 95       	dec	r24
     a88:	f1 f7       	brne	.-4      	; 0xa86 <nrf24l01_write+0x2e>
	_delay_us(15);
	nrf24l01_CElo; //low CE
     a8a:	af 98       	cbi	0x15, 7	; 21
     a8c:	83 e0       	ldi	r24, 0x03	; 3
     a8e:	8a 95       	dec	r24
     a90:	f1 f7       	brne	.-4      	; 0xa8e <nrf24l01_write+0x36>
     a92:	00 00       	nop

	//stop if max_retries reached or send is ok
	do {
		_delay_us(10);
	}
	while( !(nrf24l01_getstatus() & (1<<NRF24L01_REG_MAX_RT | 1<<NRF24L01_REG_TX_DS)) );
     a94:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_getstatus>
     a98:	80 73       	andi	r24, 0x30	; 48
     a9a:	c1 f3       	breq	.-16     	; 0xa8c <nrf24l01_write+0x34>

	if(nrf24l01_getstatus() & 1<<NRF24L01_REG_TX_DS)
     a9c:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <nrf24l01_getstatus>
     aa0:	c8 2f       	mov	r28, r24
		ret = 1;

	//reset PLOS_CNT
	nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH);
     aa2:	85 e0       	ldi	r24, 0x05	; 5
     aa4:	6c e4       	ldi	r22, 0x4C	; 76
     aa6:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>

	//power down
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PWR_UP));
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	0e 94 82 02 	call	0x504	; 0x504 <nrf24l01_readregister>
     ab0:	68 2f       	mov	r22, r24
     ab2:	6d 7f       	andi	r22, 0xFD	; 253
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>

	//set rx mode
	nrf24l01_setRX();
     aba:	0e 94 9b 03 	call	0x736	; 0x736 <nrf24l01_setRX>
/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
	uint8_t i = 0;
	uint8_t ret = 0;
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	c5 ff       	sbrs	r28, 5
     ac2:	80 e0       	ldi	r24, 0x00	; 0

	//set rx mode
	nrf24l01_setRX();

	return ret;
}
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	08 95       	ret

00000ace <nrf24l01_setpalevel>:

/*
 * set power level
 */
void nrf24l01_setpalevel() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP);
     ace:	86 e0       	ldi	r24, 0x06	; 6
     ad0:	0e 94 82 02 	call	0x504	; 0x504 <nrf24l01_readregister>
  setup &= ~((1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH));

  if (NRF24L01_RF24_PA == NRF24L01_RF24_PA_MAX) {
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
     ad4:	68 2f       	mov	r22, r24
     ad6:	66 60       	ori	r22, 0x06	; 6
  } else {
	  //default is max power
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     ad8:	86 e0       	ldi	r24, 0x06	; 6
     ada:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
}
     ade:	08 95       	ret

00000ae0 <nrf24l01_setdatarate>:

/*
 * set datarate
 */
void nrf24l01_setdatarate() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP) ;
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 82 02 	call	0x504	; 0x504 <nrf24l01_readregister>

  setup &= ~((1<<NRF24L01_REG_RF_DR_LOW) | (1<<NRF24L01_REG_RF_DR_HIGH));
     ae6:	68 2f       	mov	r22, r24
     ae8:	67 7d       	andi	r22, 0xD7	; 215
    } else {
    	//default is 1Mbps
    }
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     aea:	86 e0       	ldi	r24, 0x06	; 6
     aec:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
}
     af0:	08 95       	ret

00000af2 <nrf24l01_setcrclength>:

/*
 * set crc length
 */
void nrf24l01_setcrclength() {
  uint8_t config = nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~((1<<NRF24L01_REG_CRCO) | (1<<NRF24L01_REG_EN_CRC));
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	0e 94 82 02 	call	0x504	; 0x504 <nrf24l01_readregister>
	  //nothing
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_8) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_16) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
	  config |= (1<<NRF24L01_REG_CRCO);
     af8:	68 2f       	mov	r22, r24
     afa:	6c 60       	ori	r22, 0x0C	; 12
  } else {
	  //default is disabled
  }

  nrf24l01_writeregister(NRF24L01_REG_CONFIG, config);
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
}
     b02:	08 95       	ret

00000b04 <nrf24l01_init>:
/*
 * init nrf24l01
 */
void nrf24l01_init() {
	//setup port
	NRF24L01_DDR |= (1<<NRF24L01_CSN); //output
     b04:	a6 9a       	sbi	0x14, 6	; 20
	NRF24L01_DDR |= (1<<NRF24L01_CE); //output
     b06:	a7 9a       	sbi	0x14, 7	; 20

    spi_init(); //init spi
     b08:	0e 94 f8 07 	call	0xff0	; 0xff0 <spi_init>

    nrf24l01_CElo; //low CE
     b0c:	af 98       	cbi	0x15, 7	; 21
    nrf24l01_CSNhi; //high CSN
     b0e:	ae 9a       	sbi	0x15, 6	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b10:	81 ee       	ldi	r24, 0xE1	; 225
     b12:	94 e0       	ldi	r25, 0x04	; 4
     b14:	01 97       	sbiw	r24, 0x01	; 1
     b16:	f1 f7       	brne	.-4      	; 0xb14 <nrf24l01_init+0x10>
     b18:	00 c0       	rjmp	.+0      	; 0xb1a <nrf24l01_init+0x16>
     b1a:	00 00       	nop

    _delay_ms(5); //wait for the radio to init

    nrf24l01_setpalevel(); //set power level
     b1c:	0e 94 67 05 	call	0xace	; 0xace <nrf24l01_setpalevel>
    nrf24l01_setdatarate(); //set data rate
     b20:	0e 94 70 05 	call	0xae0	; 0xae0 <nrf24l01_setdatarate>
    nrf24l01_setcrclength(); //set crc length
     b24:	0e 94 79 05 	call	0xaf2	; 0xaf2 <nrf24l01_setcrclength>
    nrf24l01_writeregister(NRF24L01_REG_SETUP_RETR, NRF24L01_RETR); // set retries
     b28:	84 e0       	ldi	r24, 0x04	; 4
     b2a:	67 e4       	ldi	r22, 0x47	; 71
     b2c:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_DYNPD, 0); //disable dynamic payloads
     b30:	8c e1       	ldi	r24, 0x1C	; 28
     b32:	60 e0       	ldi	r22, 0x00	; 0
     b34:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH); //set RF channel
     b38:	85 e0       	ldi	r24, 0x05	; 5
     b3a:	6c e4       	ldi	r22, 0x4C	; 76
     b3c:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>

	//payload size
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P0, NRF24L01_PAYLOAD);
     b40:	81 e1       	ldi	r24, 0x11	; 17
     b42:	60 e1       	ldi	r22, 0x10	; 16
     b44:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P1, NRF24L01_PAYLOAD);
     b48:	82 e1       	ldi	r24, 0x12	; 18
     b4a:	60 e1       	ldi	r22, 0x10	; 16
     b4c:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P2, NRF24L01_PAYLOAD);
     b50:	83 e1       	ldi	r24, 0x13	; 19
     b52:	60 e1       	ldi	r22, 0x10	; 16
     b54:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P3, NRF24L01_PAYLOAD);
     b58:	84 e1       	ldi	r24, 0x14	; 20
     b5a:	60 e1       	ldi	r22, 0x10	; 16
     b5c:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P4, NRF24L01_PAYLOAD);
     b60:	85 e1       	ldi	r24, 0x15	; 21
     b62:	60 e1       	ldi	r22, 0x10	; 16
     b64:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P5, NRF24L01_PAYLOAD);
     b68:	86 e1       	ldi	r24, 0x16	; 22
     b6a:	60 e1       	ldi	r22, 0x10	; 16
     b6c:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
	#endif

	//enable pipe
	nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, 0);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P0));
     b78:	82 e0       	ldi	r24, 0x02	; 2
     b7a:	0e 94 82 02 	call	0x504	; 0x504 <nrf24l01_readregister>
     b7e:	68 2f       	mov	r22, r24
     b80:	61 60       	ori	r22, 0x01	; 1
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P1));
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	0e 94 82 02 	call	0x504	; 0x504 <nrf24l01_readregister>
     b8e:	68 2f       	mov	r22, r24
     b90:	62 60       	ori	r22, 0x02	; 2
     b92:	82 e0       	ldi	r24, 0x02	; 2
     b94:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P2));
     b98:	82 e0       	ldi	r24, 0x02	; 2
     b9a:	0e 94 82 02 	call	0x504	; 0x504 <nrf24l01_readregister>
     b9e:	68 2f       	mov	r22, r24
     ba0:	64 60       	ori	r22, 0x04	; 4
     ba2:	82 e0       	ldi	r24, 0x02	; 2
     ba4:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P3));
     ba8:	82 e0       	ldi	r24, 0x02	; 2
     baa:	0e 94 82 02 	call	0x504	; 0x504 <nrf24l01_readregister>
     bae:	68 2f       	mov	r22, r24
     bb0:	68 60       	ori	r22, 0x08	; 8
     bb2:	82 e0       	ldi	r24, 0x02	; 2
     bb4:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P4));
     bb8:	82 e0       	ldi	r24, 0x02	; 2
     bba:	0e 94 82 02 	call	0x504	; 0x504 <nrf24l01_readregister>
     bbe:	68 2f       	mov	r22, r24
     bc0:	60 61       	ori	r22, 0x10	; 16
     bc2:	82 e0       	ldi	r24, 0x02	; 2
     bc4:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P5));
     bc8:	82 e0       	ldi	r24, 0x02	; 2
     bca:	0e 94 82 02 	call	0x504	; 0x504 <nrf24l01_readregister>
     bce:	68 2f       	mov	r22, r24
     bd0:	60 62       	ori	r22, 0x20	; 32
     bd2:	82 e0       	ldi	r24, 0x02	; 2
     bd4:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
	#endif

	//auto ack
	#if NRF24L01_ACK == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P0));
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	0e 94 82 02 	call	0x504	; 0x504 <nrf24l01_readregister>
     bde:	68 2f       	mov	r22, r24
     be0:	61 60       	ori	r22, 0x01	; 1
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P1));
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	0e 94 82 02 	call	0x504	; 0x504 <nrf24l01_readregister>
     bee:	68 2f       	mov	r22, r24
     bf0:	62 60       	ori	r22, 0x02	; 2
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P2));
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	0e 94 82 02 	call	0x504	; 0x504 <nrf24l01_readregister>
     bfe:	68 2f       	mov	r22, r24
     c00:	64 60       	ori	r22, 0x04	; 4
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P3));
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	0e 94 82 02 	call	0x504	; 0x504 <nrf24l01_readregister>
     c0e:	68 2f       	mov	r22, r24
     c10:	68 60       	ori	r22, 0x08	; 8
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P4));
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	0e 94 82 02 	call	0x504	; 0x504 <nrf24l01_readregister>
     c1e:	68 2f       	mov	r22, r24
     c20:	60 61       	ori	r22, 0x10	; 16
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P5));
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	0e 94 82 02 	call	0x504	; 0x504 <nrf24l01_readregister>
     c2e:	68 2f       	mov	r22, r24
     c30:	60 62       	ori	r22, 0x20	; 32
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	0e 94 aa 02 	call	0x554	; 0x554 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P4));
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P5));
	#endif

	//rx address
	nrf24l01_setrxaddr(0, nrf24l01_addr0);
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	6b eb       	ldi	r22, 0xBB	; 187
     c3c:	71 e0       	ldi	r23, 0x01	; 1
     c3e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(1, nrf24l01_addr1);
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	60 ec       	ldi	r22, 0xC0	; 192
     c46:	71 e0       	ldi	r23, 0x01	; 1
     c48:	0e 94 e7 02 	call	0x5ce	; 0x5ce <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(2, nrf24l01_addr2);
     c4c:	82 e0       	ldi	r24, 0x02	; 2
     c4e:	65 ec       	ldi	r22, 0xC5	; 197
     c50:	71 e0       	ldi	r23, 0x01	; 1
     c52:	0e 94 e7 02 	call	0x5ce	; 0x5ce <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(3, nrf24l01_addr3);
     c56:	83 e0       	ldi	r24, 0x03	; 3
     c58:	6a ec       	ldi	r22, 0xCA	; 202
     c5a:	71 e0       	ldi	r23, 0x01	; 1
     c5c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(4, nrf24l01_addr4);
     c60:	84 e0       	ldi	r24, 0x04	; 4
     c62:	6f ec       	ldi	r22, 0xCF	; 207
     c64:	71 e0       	ldi	r23, 0x01	; 1
     c66:	0e 94 e7 02 	call	0x5ce	; 0x5ce <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(5, nrf24l01_addr5);
     c6a:	85 e0       	ldi	r24, 0x05	; 5
     c6c:	64 ed       	ldi	r22, 0xD4	; 212
     c6e:	71 e0       	ldi	r23, 0x01	; 1
     c70:	0e 94 e7 02 	call	0x5ce	; 0x5ce <nrf24l01_setrxaddr>

	//tx address
	nrf24l01_settxaddr(nrf24l01_addrtx);
     c74:	89 ed       	ldi	r24, 0xD9	; 217
     c76:	91 e0       	ldi	r25, 0x01	; 1
     c78:	0e 94 64 03 	call	0x6c8	; 0x6c8 <nrf24l01_settxaddr>

	//set rx mode
	nrf24l01_setRX();
     c7c:	0e 94 9b 03 	call	0x736	; 0x736 <nrf24l01_setRX>
}
     c80:	08 95       	ret

00000c82 <sMR_init>:
static void clearInEvents(SMR* handle);
static void clearOutEvents(SMR* handle);


void sMR_init(SMR* handle)
{
     c82:	fc 01       	movw	r30, r24
	int i;

	for (i = 0; i < SMR_MAX_ORTHOGONAL_STATES; ++i)
		handle->stateConfVector[i] = SMR_last_state;
     c84:	86 e0       	ldi	r24, 0x06	; 6
     c86:	80 83       	st	Z, r24
	
	
	handle->stateConfVectorPosition = 0;
     c88:	12 82       	std	Z+2, r1	; 0x02
     c8a:	11 82       	std	Z+1, r1	; 0x01

	// TODO: initialize all events ...
	// TODO: initialize all variables ... (set default values - here or inenter sequence ?!?)

}
     c8c:	08 95       	ret

00000c8e <sMR_enter>:

void sMR_enter(SMR* handle)
{
     c8e:	1f 93       	push	r17
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
     c94:	ec 01       	movw	r28, r24
	sMR_entryaction(handle);
	/* Default enter sequence for region main region */
	/* Default react sequence for initial entry  */
	/* Default enter sequence for state on */
	/* Entry action for state 'on'. */
	handle->iface.lightOn = bool_true;
     c96:	11 e0       	ldi	r17, 0x01	; 1
     c98:	18 a7       	lds	r17, 0x78
	/* Default enter sequence for region r1 */
	/* Default react sequence for initial entry  */
	/* Default enter sequence for state Init */
	/* Entry action for state 'Init'. */
	sMR_setTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) , 3 * 1000, bool_false);
     c9a:	c3 96       	adiw	r24, 0x33	; 51
     c9c:	48 eb       	ldi	r20, 0xB8	; 184
     c9e:	5b e0       	ldi	r21, 0x0B	; 11
     ca0:	60 e0       	ldi	r22, 0x00	; 0
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	0e 94 1c 02 	call	0x438	; 0x438 <sMR_setTimer>
	handle->iface.tableId = 1;
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	a0 e0       	ldi	r26, 0x00	; 0
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	8d a7       	lds	r24, 0x7d
     cb4:	9e a7       	lds	r25, 0x7e
     cb6:	af a7       	lds	r26, 0x7f
     cb8:	b8 ab       	sts	0x58, r27
	sMRIfaceLCD_init();
     cba:	0e 94 a8 01 	call	0x350	; 0x350 <sMRIfaceLCD_init>
	sMRIfaceRF_init();
     cbe:	0e 94 22 02 	call	0x444	; 0x444 <sMRIfaceRF_init>
	sMRIfaceLCD_clear();
     cc2:	0e 94 9f 01 	call	0x33e	; 0x33e <sMRIfaceLCD_clear>
	sMRIfaceLCD_writeString("Waitting...");
     cc6:	8e ed       	ldi	r24, 0xDE	; 222
     cc8:	91 e0       	ldi	r25, 0x01	; 1
     cca:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <sMRIfaceLCD_writeString>
	handle->stateConfVector[0] = SMR_main_region_on_r1_Init;
     cce:	18 83       	st	Y, r17
	handle->stateConfVectorPosition = 0;
     cd0:	1a 82       	std	Y+2, r1	; 0x02
     cd2:	19 82       	std	Y+1, r1	; 0x01
}
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	1f 91       	pop	r17
     cda:	08 95       	ret

00000cdc <sMR_exit>:

void sMR_exit(SMR* handle)
{
     cdc:	fc 01       	movw	r30, r24
	/* Default exit sequence for statechart SMR */
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of main region) at position 0... */
	switch(handle->stateConfVector[ 0 ]) {
     cde:	80 81       	ld	r24, Z
     ce0:	83 30       	cpi	r24, 0x03	; 3
     ce2:	99 f0       	breq	.+38     	; 0xd0a <sMR_exit+0x2e>
     ce4:	84 30       	cpi	r24, 0x04	; 4
     ce6:	18 f4       	brcc	.+6      	; 0xcee <sMR_exit+0x12>
     ce8:	81 30       	cpi	r24, 0x01	; 1
     cea:	e9 f4       	brne	.+58     	; 0xd26 <sMR_exit+0x4a>
     cec:	05 c0       	rjmp	.+10     	; 0xcf8 <sMR_exit+0x1c>
     cee:	84 30       	cpi	r24, 0x04	; 4
     cf0:	89 f0       	breq	.+34     	; 0xd14 <sMR_exit+0x38>
     cf2:	85 30       	cpi	r24, 0x05	; 5
     cf4:	c1 f4       	brne	.+48     	; 0xd26 <sMR_exit+0x4a>
     cf6:	13 c0       	rjmp	.+38     	; 0xd1e <sMR_exit+0x42>
		case SMR_main_region_on_r1_Init : {
			/* Default exit sequence for state Init */
			handle->stateConfVector[0] = SMR_last_state;
     cf8:	86 e0       	ldi	r24, 0x06	; 6
     cfa:	80 83       	st	Z, r24
			handle->stateConfVectorPosition = 0;
     cfc:	12 82       	std	Z+2, r1	; 0x02
     cfe:	11 82       	std	Z+1, r1	; 0x01
			/* Exit action for state 'Init'. */
			sMR_unsetTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) );		
     d00:	cf 01       	movw	r24, r30
     d02:	c3 96       	adiw	r24, 0x33	; 51
     d04:	0e 94 1f 02 	call	0x43e	; 0x43e <sMR_unsetTimer>
			break;
     d08:	08 95       	ret
		}
		case SMR_main_region_on_r1_running_RF_Ready : {
			/* Default exit sequence for state Ready */
			handle->stateConfVector[0] = SMR_last_state;
     d0a:	86 e0       	ldi	r24, 0x06	; 6
     d0c:	80 83       	st	Z, r24
			handle->stateConfVectorPosition = 0;
     d0e:	12 82       	std	Z+2, r1	; 0x02
     d10:	11 82       	std	Z+1, r1	; 0x01
			break;
     d12:	08 95       	ret
		}
		case SMR_main_region_on_r1_running_RF_GetData : {
			/* Default exit sequence for state GetData */
			handle->stateConfVector[0] = SMR_last_state;
     d14:	86 e0       	ldi	r24, 0x06	; 6
     d16:	80 83       	st	Z, r24
			handle->stateConfVectorPosition = 0;
     d18:	12 82       	std	Z+2, r1	; 0x02
     d1a:	11 82       	std	Z+1, r1	; 0x01
			break;
     d1c:	08 95       	ret
		}
		case SMR_main_region_on_r1_running_RF_DataRecieved : {
			/* Default exit sequence for state DataRecieved */
			handle->stateConfVector[0] = SMR_last_state;
     d1e:	86 e0       	ldi	r24, 0x06	; 6
     d20:	80 83       	st	Z, r24
			handle->stateConfVectorPosition = 0;
     d22:	12 82       	std	Z+2, r1	; 0x02
     d24:	11 82       	std	Z+1, r1	; 0x01
     d26:	08 95       	ret

00000d28 <sMR_runCycle>:
}

static void clearOutEvents(SMR* handle) {
}

void sMR_runCycle(SMR* handle) {
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	ec 01       	movw	r28, r24
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
     d2e:	1a 82       	std	Y+2, r1	; 0x02
     d30:	19 82       	std	Y+1, r1	; 0x01
		handle->stateConfVectorPosition < SMR_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
			
		switch (handle->stateConfVector[handle->stateConfVectorPosition]) {
     d32:	88 81       	ld	r24, Y
     d34:	83 30       	cpi	r24, 0x03	; 3
     d36:	19 f1       	breq	.+70     	; 0xd7e <sMR_runCycle+0x56>
     d38:	84 30       	cpi	r24, 0x04	; 4
     d3a:	20 f4       	brcc	.+8      	; 0xd44 <sMR_runCycle+0x1c>
     d3c:	81 30       	cpi	r24, 0x01	; 1
     d3e:	09 f0       	breq	.+2      	; 0xd42 <sMR_runCycle+0x1a>
     d40:	57 c0       	rjmp	.+174    	; 0xdf0 <sMR_runCycle+0xc8>
     d42:	06 c0       	rjmp	.+12     	; 0xd50 <sMR_runCycle+0x28>
     d44:	84 30       	cpi	r24, 0x04	; 4
     d46:	41 f1       	breq	.+80     	; 0xd98 <sMR_runCycle+0x70>
     d48:	85 30       	cpi	r24, 0x05	; 5
     d4a:	09 f0       	breq	.+2      	; 0xd4e <sMR_runCycle+0x26>
     d4c:	51 c0       	rjmp	.+162    	; 0xdf0 <sMR_runCycle+0xc8>
     d4e:	43 c0       	rjmp	.+134    	; 0xdd6 <sMR_runCycle+0xae>
}

/* The reactions of state Init. */
static void sMR_react_main_region_on_r1_Init(SMR* handle) {
	/* The reactions of state Init. */
	if (handle->timeEvents.Init_time_event_0_raised) { 
     d50:	8b a9       	sts	0x4b, r24
     d52:	88 23       	and	r24, r24
     d54:	09 f4       	brne	.+2      	; 0xd58 <sMR_runCycle+0x30>
     d56:	4c c0       	rjmp	.+152    	; 0xdf0 <sMR_runCycle+0xc8>
		/* Default exit sequence for state Init */
		handle->stateConfVector[0] = SMR_last_state;
     d58:	86 e0       	ldi	r24, 0x06	; 6
     d5a:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
     d5c:	1a 82       	std	Y+2, r1	; 0x02
     d5e:	19 82       	std	Y+1, r1	; 0x01
		/* Exit action for state 'Init'. */
		sMR_unsetTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) );		
     d60:	ce 01       	movw	r24, r28
     d62:	c3 96       	adiw	r24, 0x33	; 51
     d64:	0e 94 1f 02 	call	0x43e	; 0x43e <sMR_unsetTimer>
		/* Default enter sequence for state running */
		/* Default enter sequence for region RF */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state Ready */
		/* Entry action for state 'Ready'. */
		sMRIfaceLCD_clear();
     d68:	0e 94 9f 01 	call	0x33e	; 0x33e <sMRIfaceLCD_clear>
		sMRIfaceLCD_writeString("Waiting for data");
     d6c:	8a ee       	ldi	r24, 0xEA	; 234
     d6e:	91 e0       	ldi	r25, 0x01	; 1
     d70:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <sMRIfaceLCD_writeString>
		handle->stateConfVector[0] = SMR_main_region_on_r1_running_RF_Ready;
     d74:	83 e0       	ldi	r24, 0x03	; 3
     d76:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
     d78:	1a 82       	std	Y+2, r1	; 0x02
     d7a:	19 82       	std	Y+1, r1	; 0x01
     d7c:	49 c0       	rjmp	.+146    	; 0xe10 <sMR_runCycle+0xe8>
/* The reactions of state Ready. */
static void sMR_react_main_region_on_r1_running_RF_Ready(SMR* handle) {
	/* The reactions of state Ready. */
	if (bool_true) { 
		/* Default exit sequence for state Ready */
		handle->stateConfVector[0] = SMR_last_state;
     d7e:	86 e0       	ldi	r24, 0x06	; 6
     d80:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
     d82:	1a 82       	std	Y+2, r1	; 0x02
     d84:	19 82       	std	Y+1, r1	; 0x01
		/* Default enter sequence for state GetData */
		/* Entry action for state 'GetData'. */
		handle->ifaceRF.data = sMRIfaceRF_getData();
     d86:	0e 94 ac 01 	call	0x358	; 0x358 <sMRIfaceRF_getData>
     d8a:	9b 8b       	std	Y+19, r25	; 0x13
     d8c:	8a 8b       	std	Y+18, r24	; 0x12
		handle->stateConfVector[0] = SMR_main_region_on_r1_running_RF_GetData;
     d8e:	84 e0       	ldi	r24, 0x04	; 4
     d90:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
     d92:	1a 82       	std	Y+2, r1	; 0x02
     d94:	19 82       	std	Y+1, r1	; 0x01
     d96:	3c c0       	rjmp	.+120    	; 0xe10 <sMR_runCycle+0xe8>
}

/* The reactions of state GetData. */
static void sMR_react_main_region_on_r1_running_RF_GetData(SMR* handle) {
	/* The reactions of state GetData. */
	if ((strcmp(handle->ifaceRF.data, "") != 0)
     d98:	ea 89       	ldd	r30, Y+18	; 0x12
     d9a:	fb 89       	ldd	r31, Y+19	; 0x13
     d9c:	80 81       	ld	r24, Z
     d9e:	88 23       	and	r24, r24
     da0:	89 f0       	breq	.+34     	; 0xdc4 <sMR_runCycle+0x9c>
	) { 
		/* Default exit sequence for state GetData */
		handle->stateConfVector[0] = SMR_last_state;
     da2:	86 e0       	ldi	r24, 0x06	; 6
     da4:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
     da6:	1a 82       	std	Y+2, r1	; 0x02
     da8:	19 82       	std	Y+1, r1	; 0x01
		handle->ifaceRF.lastdata = handle->ifaceRF.data;
     daa:	fd 8b       	std	Y+21, r31	; 0x15
     dac:	ec 8b       	std	Y+20, r30	; 0x14
		/* Default enter sequence for state DataRecieved */
		/* Entry action for state 'DataRecieved'. */
		sMRIfaceLCD_clear();
     dae:	0e 94 9f 01 	call	0x33e	; 0x33e <sMRIfaceLCD_clear>
		sMRIfaceLCD_writeString(handle->ifaceRF.lastdata);
     db2:	8c 89       	ldd	r24, Y+20	; 0x14
     db4:	9d 89       	ldd	r25, Y+21	; 0x15
     db6:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <sMRIfaceLCD_writeString>
		handle->stateConfVector[0] = SMR_main_region_on_r1_running_RF_DataRecieved;
     dba:	85 e0       	ldi	r24, 0x05	; 5
     dbc:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
     dbe:	1a 82       	std	Y+2, r1	; 0x02
     dc0:	19 82       	std	Y+1, r1	; 0x01
     dc2:	26 c0       	rjmp	.+76     	; 0xe10 <sMR_runCycle+0xe8>
	}  else {
		if ((strcmp(handle->ifaceRF.data, "") == 0)
		) { 
			/* Default enter sequence for state GetData */
			/* Entry action for state 'GetData'. */
			handle->ifaceRF.data = sMRIfaceRF_getData();
     dc4:	0e 94 ac 01 	call	0x358	; 0x358 <sMRIfaceRF_getData>
     dc8:	9b 8b       	std	Y+19, r25	; 0x13
     dca:	8a 8b       	std	Y+18, r24	; 0x12
			handle->stateConfVector[0] = SMR_main_region_on_r1_running_RF_GetData;
     dcc:	84 e0       	ldi	r24, 0x04	; 4
     dce:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
     dd0:	1a 82       	std	Y+2, r1	; 0x02
     dd2:	19 82       	std	Y+1, r1	; 0x01
     dd4:	1d c0       	rjmp	.+58     	; 0xe10 <sMR_runCycle+0xe8>
/* The reactions of state DataRecieved. */
static void sMR_react_main_region_on_r1_running_RF_DataRecieved(SMR* handle) {
	/* The reactions of state DataRecieved. */
	if (bool_true) { 
		/* Default exit sequence for state DataRecieved */
		handle->stateConfVector[0] = SMR_last_state;
     dd6:	86 e0       	ldi	r24, 0x06	; 6
     dd8:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
     dda:	1a 82       	std	Y+2, r1	; 0x02
     ddc:	19 82       	std	Y+1, r1	; 0x01
		/* Default enter sequence for state GetData */
		/* Entry action for state 'GetData'. */
		handle->ifaceRF.data = sMRIfaceRF_getData();
     dde:	0e 94 ac 01 	call	0x358	; 0x358 <sMRIfaceRF_getData>
     de2:	9b 8b       	std	Y+19, r25	; 0x13
     de4:	8a 8b       	std	Y+18, r24	; 0x12
		handle->stateConfVector[0] = SMR_main_region_on_r1_running_RF_GetData;
     de6:	84 e0       	ldi	r24, 0x04	; 4
     de8:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
     dea:	1a 82       	std	Y+2, r1	; 0x02
     dec:	19 82       	std	Y+1, r1	; 0x01
     dee:	10 c0       	rjmp	.+32     	; 0xe10 <sMR_runCycle+0xe8>
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMR_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	9a 81       	ldd	r25, Y+2	; 0x02
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	9a 83       	std	Y+2, r25	; 0x02
     df8:	89 83       	std	Y+1, r24	; 0x01

void sMR_runCycle(SMR* handle) {
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	09 f4       	brne	.+2      	; 0xe00 <sMR_runCycle+0xd8>
     dfe:	99 cf       	rjmp	.-206    	; 0xd32 <sMR_runCycle+0xa>
	}
	sMR_exitaction(handle);
}

static void clearInEvents(SMR* handle) {
	handle->ifaceKEYPAD.key_pressed_raised = bool_false;
     e00:	1c 86       	std	Y+12, r1	; 0x0c
	handle->ifaceUART.DataRecieved_raised = bool_false;
     e02:	19 8a       	std	Y+17, r1	; 0x11
	handle->ifaceRF.DataRecieved_raised = bool_false;
     e04:	1b 8e       	std	Y+27, r1	; 0x1b
	handle->iface.switchOff_raised = bool_false;
     e06:	19 aa       	sts	0x99, r17
	handle->iface.switchOn_raised = bool_false;
     e08:	1a aa       	sts	0x9a, r17
			break;
		}
	}
	
	clearInEvents(handle);
}
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	08 95       	ret
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMR_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	9a 81       	ldd	r25, Y+2	; 0x02
     e14:	01 96       	adiw	r24, 0x01	; 1
     e16:	9a 83       	std	Y+2, r25	; 0x02
     e18:	89 83       	std	Y+1, r24	; 0x01
     e1a:	f2 cf       	rjmp	.-28     	; 0xe00 <sMR_runCycle+0xd8>

00000e1c <sMR_raiseTimeEvent>:
	
	clearInEvents(handle);
}

void sMR_raiseTimeEvent(SMR* handle, sc_eventid evid) {
	if ( ((intptr_t)evid) >= ((intptr_t)&(handle->timeEvents))
     e1c:	c3 96       	adiw	r24, 0x33	; 51
     e1e:	68 17       	cp	r22, r24
     e20:	79 07       	cpc	r23, r25
     e22:	3c f0       	brlt	.+14     	; 0xe32 <sMR_raiseTimeEvent+0x16>
		&&  ((intptr_t)evid) < ((intptr_t)&(handle->timeEvents)) + sizeof(SMRTimeEvents)) {
     e24:	01 96       	adiw	r24, 0x01	; 1
     e26:	68 17       	cp	r22, r24
     e28:	79 07       	cpc	r23, r25
     e2a:	18 f4       	brcc	.+6      	; 0xe32 <sMR_raiseTimeEvent+0x16>
		*(sc_boolean*)evid = bool_true;
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	fb 01       	movw	r30, r22
     e30:	80 83       	st	Z, r24
     e32:	08 95       	ret

00000e34 <sMR_isActive>:
	}		
}

sc_boolean sMR_isActive(SMR* handle, SMRStates state) {
     e34:	fc 01       	movw	r30, r24
	switch (state) {
     e36:	62 30       	cpi	r22, 0x02	; 2
     e38:	d1 f0       	breq	.+52     	; 0xe6e <sMR_isActive+0x3a>
     e3a:	63 30       	cpi	r22, 0x03	; 3
     e3c:	28 f4       	brcc	.+10     	; 0xe48 <sMR_isActive+0x14>
     e3e:	66 23       	and	r22, r22
     e40:	51 f0       	breq	.+20     	; 0xe56 <sMR_isActive+0x22>
     e42:	61 30       	cpi	r22, 0x01	; 1
     e44:	69 f5       	brne	.+90     	; 0xea0 <sMR_isActive+0x6c>
     e46:	0d c0       	rjmp	.+26     	; 0xe62 <sMR_isActive+0x2e>
     e48:	64 30       	cpi	r22, 0x04	; 4
     e4a:	f1 f0       	breq	.+60     	; 0xe88 <sMR_isActive+0x54>
     e4c:	64 30       	cpi	r22, 0x04	; 4
     e4e:	b0 f0       	brcs	.+44     	; 0xe7c <sMR_isActive+0x48>
     e50:	65 30       	cpi	r22, 0x05	; 5
     e52:	31 f5       	brne	.+76     	; 0xea0 <sMR_isActive+0x6c>
     e54:	1f c0       	rjmp	.+62     	; 0xe94 <sMR_isActive+0x60>
		case SMR_main_region_on : 
			return (sc_boolean) (handle->stateConfVector[0] >= SMR_main_region_on
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 81       	ld	r25, Z
     e5a:	96 30       	cpi	r25, 0x06	; 6
     e5c:	10 f1       	brcs	.+68     	; 0xea2 <sMR_isActive+0x6e>
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	08 95       	ret
				&& handle->stateConfVector[0] <= SMR_main_region_on_r1_running_RF_DataRecieved);
		case SMR_main_region_on_r1_Init : 
			return (sc_boolean) (handle->stateConfVector[0] == SMR_main_region_on_r1_Init
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 81       	ld	r25, Z
     e66:	91 30       	cpi	r25, 0x01	; 1
     e68:	e1 f0       	breq	.+56     	; 0xea2 <sMR_isActive+0x6e>
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	08 95       	ret
			);
		case SMR_main_region_on_r1_running : 
			return (sc_boolean) (handle->stateConfVector[0] >= SMR_main_region_on_r1_running
     e6e:	90 81       	ld	r25, Z
     e70:	92 50       	subi	r25, 0x02	; 2
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	94 30       	cpi	r25, 0x04	; 4
     e76:	a8 f0       	brcs	.+42     	; 0xea2 <sMR_isActive+0x6e>
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	08 95       	ret
				&& handle->stateConfVector[0] <= SMR_main_region_on_r1_running_RF_DataRecieved);
		case SMR_main_region_on_r1_running_RF_Ready : 
			return (sc_boolean) (handle->stateConfVector[0] == SMR_main_region_on_r1_running_RF_Ready
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	90 81       	ld	r25, Z
     e80:	93 30       	cpi	r25, 0x03	; 3
     e82:	79 f0       	breq	.+30     	; 0xea2 <sMR_isActive+0x6e>
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	08 95       	ret
			);
		case SMR_main_region_on_r1_running_RF_GetData : 
			return (sc_boolean) (handle->stateConfVector[0] == SMR_main_region_on_r1_running_RF_GetData
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 81       	ld	r25, Z
     e8c:	94 30       	cpi	r25, 0x04	; 4
     e8e:	49 f0       	breq	.+18     	; 0xea2 <sMR_isActive+0x6e>
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	08 95       	ret
			);
		case SMR_main_region_on_r1_running_RF_DataRecieved : 
			return (sc_boolean) (handle->stateConfVector[0] == SMR_main_region_on_r1_running_RF_DataRecieved
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 81       	ld	r25, Z
     e98:	95 30       	cpi	r25, 0x05	; 5
     e9a:	19 f0       	breq	.+6      	; 0xea2 <sMR_isActive+0x6e>
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	08 95       	ret
			);
		default: return bool_false;
     ea0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     ea2:	08 95       	ret

00000ea4 <sMRIfaceKEYPAD_raise_key_pressed>:



void sMRIfaceKEYPAD_raise_key_pressed(SMR* handle) {
	handle->ifaceKEYPAD.key_pressed_raised = bool_true;
     ea4:	21 e0       	ldi	r18, 0x01	; 1
     ea6:	fc 01       	movw	r30, r24
     ea8:	24 87       	std	Z+12, r18	; 0x0c
}
     eaa:	08 95       	ret

00000eac <sMRIfaceKEYPAD_get_key>:


sc_integer sMRIfaceKEYPAD_get_key(SMR* handle) {
     eac:	fc 01       	movw	r30, r24
	return handle->ifaceKEYPAD.key;
     eae:	63 81       	ldd	r22, Z+3	; 0x03
     eb0:	74 81       	ldd	r23, Z+4	; 0x04
}
     eb2:	85 81       	ldd	r24, Z+5	; 0x05
     eb4:	96 81       	ldd	r25, Z+6	; 0x06
     eb6:	08 95       	ret

00000eb8 <sMRIfaceKEYPAD_set_key>:
void sMRIfaceKEYPAD_set_key(SMR* handle, sc_integer value) {
	handle->ifaceKEYPAD.key = value;
     eb8:	fc 01       	movw	r30, r24
     eba:	43 83       	std	Z+3, r20	; 0x03
     ebc:	54 83       	std	Z+4, r21	; 0x04
     ebe:	65 83       	std	Z+5, r22	; 0x05
     ec0:	76 83       	std	Z+6, r23	; 0x06
}
     ec2:	08 95       	ret

00000ec4 <sMRIfaceKEYPAD_get_lastkey>:
sc_integer sMRIfaceKEYPAD_get_lastkey(SMR* handle) {
     ec4:	fc 01       	movw	r30, r24
	return handle->ifaceKEYPAD.lastkey;
     ec6:	67 81       	ldd	r22, Z+7	; 0x07
     ec8:	70 85       	ldd	r23, Z+8	; 0x08
}
     eca:	81 85       	ldd	r24, Z+9	; 0x09
     ecc:	92 85       	ldd	r25, Z+10	; 0x0a
     ece:	08 95       	ret

00000ed0 <sMRIfaceKEYPAD_set_lastkey>:
void sMRIfaceKEYPAD_set_lastkey(SMR* handle, sc_integer value) {
	handle->ifaceKEYPAD.lastkey = value;
     ed0:	fc 01       	movw	r30, r24
     ed2:	47 83       	std	Z+7, r20	; 0x07
     ed4:	50 87       	std	Z+8, r21	; 0x08
     ed6:	61 87       	std	Z+9, r22	; 0x09
     ed8:	72 87       	std	Z+10, r23	; 0x0a
}
     eda:	08 95       	ret

00000edc <sMRIfaceKEYPAD_get_key_down>:
sc_boolean sMRIfaceKEYPAD_get_key_down(SMR* handle) {
	return handle->ifaceKEYPAD.key_down;
}
     edc:	fc 01       	movw	r30, r24
     ede:	83 85       	ldd	r24, Z+11	; 0x0b
     ee0:	08 95       	ret

00000ee2 <sMRIfaceKEYPAD_set_key_down>:
void sMRIfaceKEYPAD_set_key_down(SMR* handle, sc_boolean value) {
	handle->ifaceKEYPAD.key_down = value;
     ee2:	fc 01       	movw	r30, r24
     ee4:	63 87       	std	Z+11, r22	; 0x0b
}
     ee6:	08 95       	ret

00000ee8 <sMRIfaceUART_raise_dataRecieved>:
void sMRIfaceUART_raise_dataRecieved(SMR* handle) {
	handle->ifaceUART.DataRecieved_raised = bool_true;
     ee8:	21 e0       	ldi	r18, 0x01	; 1
     eea:	fc 01       	movw	r30, r24
     eec:	21 8b       	std	Z+17, r18	; 0x11
}
     eee:	08 95       	ret

00000ef0 <sMRIfaceUART_get_data>:


sc_string sMRIfaceUART_get_data(SMR* handle) {
     ef0:	fc 01       	movw	r30, r24
	return handle->ifaceUART.data;
}
     ef2:	85 85       	ldd	r24, Z+13	; 0x0d
     ef4:	96 85       	ldd	r25, Z+14	; 0x0e
     ef6:	08 95       	ret

00000ef8 <sMRIfaceUART_set_data>:
void sMRIfaceUART_set_data(SMR* handle, sc_string value) {
	handle->ifaceUART.data = value;
     ef8:	fc 01       	movw	r30, r24
     efa:	76 87       	std	Z+14, r23	; 0x0e
     efc:	65 87       	std	Z+13, r22	; 0x0d
}
     efe:	08 95       	ret

00000f00 <sMRIfaceUART_get_lastdata>:
sc_string sMRIfaceUART_get_lastdata(SMR* handle) {
     f00:	fc 01       	movw	r30, r24
	return handle->ifaceUART.lastdata;
}
     f02:	87 85       	ldd	r24, Z+15	; 0x0f
     f04:	90 89       	ldd	r25, Z+16	; 0x10
     f06:	08 95       	ret

00000f08 <sMRIfaceUART_set_lastdata>:
void sMRIfaceUART_set_lastdata(SMR* handle, sc_string value) {
	handle->ifaceUART.lastdata = value;
     f08:	fc 01       	movw	r30, r24
     f0a:	70 8b       	std	Z+16, r23	; 0x10
     f0c:	67 87       	std	Z+15, r22	; 0x0f
}
     f0e:	08 95       	ret

00000f10 <sMRIfaceRF_raise_dataRecieved>:
void sMRIfaceRF_raise_dataRecieved(SMR* handle) {
	handle->ifaceRF.DataRecieved_raised = bool_true;
     f10:	21 e0       	ldi	r18, 0x01	; 1
     f12:	fc 01       	movw	r30, r24
     f14:	23 8f       	std	Z+27, r18	; 0x1b
}
     f16:	08 95       	ret

00000f18 <sMRIfaceRF_get_data>:


sc_string sMRIfaceRF_get_data(SMR* handle) {
     f18:	fc 01       	movw	r30, r24
	return handle->ifaceRF.data;
}
     f1a:	82 89       	ldd	r24, Z+18	; 0x12
     f1c:	93 89       	ldd	r25, Z+19	; 0x13
     f1e:	08 95       	ret

00000f20 <sMRIfaceRF_set_data>:
void sMRIfaceRF_set_data(SMR* handle, sc_string value) {
	handle->ifaceRF.data = value;
     f20:	fc 01       	movw	r30, r24
     f22:	73 8b       	std	Z+19, r23	; 0x13
     f24:	62 8b       	std	Z+18, r22	; 0x12
}
     f26:	08 95       	ret

00000f28 <sMRIfaceRF_get_lastdata>:
sc_string sMRIfaceRF_get_lastdata(SMR* handle) {
     f28:	fc 01       	movw	r30, r24
	return handle->ifaceRF.lastdata;
}
     f2a:	84 89       	ldd	r24, Z+20	; 0x14
     f2c:	95 89       	ldd	r25, Z+21	; 0x15
     f2e:	08 95       	ret

00000f30 <sMRIfaceRF_set_lastdata>:
void sMRIfaceRF_set_lastdata(SMR* handle, sc_string value) {
	handle->ifaceRF.lastdata = value;
     f30:	fc 01       	movw	r30, r24
     f32:	75 8b       	std	Z+21, r23	; 0x15
     f34:	64 8b       	std	Z+20, r22	; 0x14
}
     f36:	08 95       	ret

00000f38 <sMRIfaceRF_get_result>:
sc_boolean sMRIfaceRF_get_result(SMR* handle) {
	return handle->ifaceRF.result;
}
     f38:	fc 01       	movw	r30, r24
     f3a:	86 89       	ldd	r24, Z+22	; 0x16
     f3c:	08 95       	ret

00000f3e <sMRIfaceRF_set_result>:
void sMRIfaceRF_set_result(SMR* handle, sc_boolean value) {
	handle->ifaceRF.result = value;
     f3e:	fc 01       	movw	r30, r24
     f40:	66 8b       	std	Z+22, r22	; 0x16
}
     f42:	08 95       	ret

00000f44 <sMRIfaceRF_get_iD>:
sc_integer sMRIfaceRF_get_iD(SMR* handle) {
     f44:	fc 01       	movw	r30, r24
	return handle->ifaceRF.ID;
     f46:	67 89       	ldd	r22, Z+23	; 0x17
     f48:	70 8d       	ldd	r23, Z+24	; 0x18
}
     f4a:	81 8d       	ldd	r24, Z+25	; 0x19
     f4c:	92 8d       	ldd	r25, Z+26	; 0x1a
     f4e:	08 95       	ret

00000f50 <sMRIfaceRF_set_iD>:
void sMRIfaceRF_set_iD(SMR* handle, sc_integer value) {
	handle->ifaceRF.ID = value;
     f50:	fc 01       	movw	r30, r24
     f52:	47 8b       	std	Z+23, r20	; 0x17
     f54:	50 8f       	std	Z+24, r21	; 0x18
     f56:	61 8f       	std	Z+25, r22	; 0x19
     f58:	72 8f       	std	Z+26, r23	; 0x1a
}
     f5a:	08 95       	ret

00000f5c <sMRIfaceDISH_get_iD>:


sc_integer sMRIfaceDISH_get_iD(SMR* handle) {
     f5c:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.ID;
     f5e:	64 8d       	ldd	r22, Z+28	; 0x1c
     f60:	75 8d       	ldd	r23, Z+29	; 0x1d
}
     f62:	86 8d       	ldd	r24, Z+30	; 0x1e
     f64:	97 8d       	ldd	r25, Z+31	; 0x1f
     f66:	08 95       	ret

00000f68 <sMRIfaceDISH_set_iD>:
void sMRIfaceDISH_set_iD(SMR* handle, sc_integer value) {
	handle->ifaceDISH.ID = value;
     f68:	fc 01       	movw	r30, r24
     f6a:	44 8f       	std	Z+28, r20	; 0x1c
     f6c:	55 8f       	std	Z+29, r21	; 0x1d
     f6e:	66 8f       	std	Z+30, r22	; 0x1e
     f70:	77 8f       	std	Z+31, r23	; 0x1f
}
     f72:	08 95       	ret

00000f74 <sMRIfaceDISH_get_amount>:
sc_integer sMRIfaceDISH_get_amount(SMR* handle) {
     f74:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.amount;
     f76:	60 a1       	lds	r22, 0x40
     f78:	71 a1       	lds	r23, 0x41
}
     f7a:	82 a1       	lds	r24, 0x42
     f7c:	93 a1       	lds	r25, 0x43
     f7e:	08 95       	ret

00000f80 <sMRIfaceDISH_set_amount>:
void sMRIfaceDISH_set_amount(SMR* handle, sc_integer value) {
	handle->ifaceDISH.amount = value;
     f80:	fc 01       	movw	r30, r24
     f82:	40 a3       	lds	r20, 0x50
     f84:	51 a3       	lds	r21, 0x51
     f86:	62 a3       	lds	r22, 0x52
     f88:	73 a3       	lds	r23, 0x53
}
     f8a:	08 95       	ret

00000f8c <sMRIfaceDISH_get_pos>:
sc_integer sMRIfaceDISH_get_pos(SMR* handle) {
     f8c:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.pos;
     f8e:	64 a1       	lds	r22, 0x44
     f90:	75 a1       	lds	r23, 0x45
}
     f92:	86 a1       	lds	r24, 0x46
     f94:	97 a1       	lds	r25, 0x47
     f96:	08 95       	ret

00000f98 <sMRIfaceDISH_set_pos>:
void sMRIfaceDISH_set_pos(SMR* handle, sc_integer value) {
	handle->ifaceDISH.pos = value;
     f98:	fc 01       	movw	r30, r24
     f9a:	44 a3       	lds	r20, 0x54
     f9c:	55 a3       	lds	r21, 0x55
     f9e:	66 a3       	lds	r22, 0x56
     fa0:	77 a3       	lds	r23, 0x57
}
     fa2:	08 95       	ret

00000fa4 <sMRIface_raise_switchOff>:
void sMRIface_raise_switchOff(SMR* handle) {
	handle->iface.switchOff_raised = bool_true;
     fa4:	21 e0       	ldi	r18, 0x01	; 1
     fa6:	fc 01       	movw	r30, r24
     fa8:	21 ab       	sts	0x51, r18
}
     faa:	08 95       	ret

00000fac <sMRIface_raise_switchOn>:
void sMRIface_raise_switchOn(SMR* handle) {
	handle->iface.switchOn_raised = bool_true;
     fac:	21 e0       	ldi	r18, 0x01	; 1
     fae:	fc 01       	movw	r30, r24
     fb0:	22 ab       	sts	0x52, r18
}
     fb2:	08 95       	ret

00000fb4 <sMRIface_get_lightOn>:


sc_boolean sMRIface_get_lightOn(SMR* handle) {
	return handle->iface.lightOn;
}
     fb4:	fc 01       	movw	r30, r24
     fb6:	80 a5       	lds	r24, 0x60
     fb8:	08 95       	ret

00000fba <sMRIface_set_lightOn>:
void sMRIface_set_lightOn(SMR* handle, sc_boolean value) {
	handle->iface.lightOn = value;
     fba:	fc 01       	movw	r30, r24
     fbc:	60 a7       	lds	r22, 0x70
}
     fbe:	08 95       	ret

00000fc0 <sMRIface_get_menuId>:
sc_integer sMRIface_get_menuId(SMR* handle) {
     fc0:	fc 01       	movw	r30, r24
	return handle->iface.menuId;
     fc2:	61 a5       	lds	r22, 0x61
     fc4:	72 a5       	lds	r23, 0x62
}
     fc6:	83 a5       	lds	r24, 0x63
     fc8:	94 a5       	lds	r25, 0x64
     fca:	08 95       	ret

00000fcc <sMRIface_set_menuId>:
void sMRIface_set_menuId(SMR* handle, sc_integer value) {
	handle->iface.menuId = value;
     fcc:	fc 01       	movw	r30, r24
     fce:	41 a7       	lds	r20, 0x71
     fd0:	52 a7       	lds	r21, 0x72
     fd2:	63 a7       	lds	r22, 0x73
     fd4:	74 a7       	lds	r23, 0x74
}
     fd6:	08 95       	ret

00000fd8 <sMRIface_get_tableId>:
sc_integer sMRIface_get_tableId(SMR* handle) {
     fd8:	fc 01       	movw	r30, r24
	return handle->iface.tableId;
     fda:	65 a5       	lds	r22, 0x65
     fdc:	76 a5       	lds	r23, 0x66
}
     fde:	87 a5       	lds	r24, 0x67
     fe0:	90 a9       	sts	0x40, r25
     fe2:	08 95       	ret

00000fe4 <sMRIface_set_tableId>:
void sMRIface_set_tableId(SMR* handle, sc_integer value) {
	handle->iface.tableId = value;
     fe4:	fc 01       	movw	r30, r24
     fe6:	45 a7       	lds	r20, 0x75
     fe8:	56 a7       	lds	r21, 0x76
     fea:	67 a7       	lds	r22, 0x77
     fec:	70 ab       	sts	0x50, r23
}
     fee:	08 95       	ret

00000ff0 <spi_init>:

/*
 * spi initialize
 */
void spi_init() {
    SPI_DDR &= ~((1<<SPI_MOSI) | (1<<SPI_MISO) | (1<<SPI_SS) | (1<<SPI_SCK)); //input
     ff0:	87 b3       	in	r24, 0x17	; 23
     ff2:	80 7f       	andi	r24, 0xF0	; 240
     ff4:	87 bb       	out	0x17, r24	; 23
    SPI_DDR |= ((1<<SPI_MOSI) | (1<<SPI_SS) | (1<<SPI_SCK)); //output
     ff6:	87 b3       	in	r24, 0x17	; 23
     ff8:	87 60       	ori	r24, 0x07	; 7
     ffa:	87 bb       	out	0x17, r24	; 23

    SPCR = ((1<<SPE)|               // SPI Enable
     ffc:	81 e5       	ldi	r24, 0x51	; 81
     ffe:	8d b9       	out	0x0d, r24	; 13
            (1<<MSTR)|              // Master/Slave select
            (0<<SPR1)|(1<<SPR0)|    // SPI Clock Rate
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR = (1<<SPI2X); // Double SPI Speed Bit
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	8e b9       	out	0x0e, r24	; 14
}
    1004:	08 95       	ret

00001006 <spi_writereadbyte>:

/*
 * spi write one byte and read it back
 */
uint8_t spi_writereadbyte(uint8_t data) {
    SPDR = data;
    1006:	8f b9       	out	0x0f, r24	; 15
    while((SPSR & (1<<SPIF)) == 0);
    1008:	77 9b       	sbis	0x0e, 7	; 14
    100a:	fe cf       	rjmp	.-4      	; 0x1008 <spi_writereadbyte+0x2>
    return SPDR;
    100c:	8f b1       	in	r24, 0x0f	; 15
}
    100e:	08 95       	ret

00001010 <TimerInit>:

TimeEvent tmrEvent[10];
int tmrCount=0;

void TimerInit() {
	TCCR0 = 0b011; //CS02=0, CS01=1, CS00=0, chon Prescaler=64
    1010:	83 e0       	ldi	r24, 0x03	; 3
    1012:	83 bf       	out	0x33, r24	; 51
	//Xung chip la 8MHZ -> 1 xung mat 1us/8 = 0.125 us
	//Prescaler=64, kich 256 lan moi tang 1 lan trong bo dem Timer-> Ton 8us
	//Vay, de Timer ngat moi 1ms, ta can: 1000/8=125 lan dem.
	//Ma Timer ngat khi bo dem toi 255, ta can set gia tri ban dau cho bo dem la: 255-125+1=131
	TCNT0=131;
    1014:	83 e8       	ldi	r24, 0x83	; 131
    1016:	82 bf       	out	0x32, r24	; 50
	TIMSK=(1<<TOIE0); //Cho phep ngat khi cho tran o T/C0
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	87 bf       	out	0x37, r24	; 55
	tmrCount=0;
    101c:	10 92 03 02 	sts	0x0203, r1
    1020:	10 92 02 02 	sts	0x0202, r1
	sei();
    1024:	78 94       	sei
}
    1026:	08 95       	ret

00001028 <TimerSet>:

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
    1028:	cf 92       	push	r12
    102a:	df 92       	push	r13
    102c:	ef 92       	push	r14
    102e:	ff 92       	push	r15
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	ec 01       	movw	r28, r24
    1036:	6a 01       	movw	r12, r20
    1038:	7b 01       	movw	r14, r22
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
    103a:	40 91 02 02 	lds	r20, 0x0202
    103e:	50 91 03 02 	lds	r21, 0x0203
    1042:	14 16       	cp	r1, r20
    1044:	15 06       	cpc	r1, r21
    1046:	e4 f4       	brge	.+56     	; 0x1080 <TimerSet+0x58>
    1048:	e6 e2       	ldi	r30, 0x26	; 38
    104a:	f2 e0       	ldi	r31, 0x02	; 2
    104c:	df 01       	movw	r26, r30
    104e:	16 96       	adiw	r26, 0x06	; 6
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
	sei();
}

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
    1054:	70 e0       	ldi	r23, 0x00	; 0
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
			check=true;
			tmrEvent[i].count=0;
			tmrEvent[i].max=max;
			tmrEvent[i].enabled=true;
    1056:	61 e0       	ldi	r22, 0x01	; 1

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
    1058:	80 81       	ld	r24, Z
    105a:	91 81       	ldd	r25, Z+1	; 0x01
    105c:	8c 17       	cp	r24, r28
    105e:	9d 07       	cpc	r25, r29
    1060:	31 f4       	brne	.+12     	; 0x106e <TimerSet+0x46>
			check=true;
			tmrEvent[i].count=0;
    1062:	13 82       	std	Z+3, r1	; 0x03
    1064:	12 82       	std	Z+2, r1	; 0x02
			tmrEvent[i].max=max;
    1066:	d5 82       	std	Z+5, r13	; 0x05
    1068:	c4 82       	std	Z+4, r12	; 0x04
			tmrEvent[i].enabled=true;
    106a:	6c 93       	st	X, r22
//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
			check=true;
    106c:	76 2f       	mov	r23, r22
}

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
    106e:	2f 5f       	subi	r18, 0xFF	; 255
    1070:	3f 4f       	sbci	r19, 0xFF	; 255
    1072:	37 96       	adiw	r30, 0x07	; 7
    1074:	17 96       	adiw	r26, 0x07	; 7
    1076:	24 17       	cp	r18, r20
    1078:	35 07       	cpc	r19, r21
    107a:	74 f3       	brlt	.-36     	; 0x1058 <TimerSet+0x30>
			tmrEvent[i].count=0;
			tmrEvent[i].max=max;
			tmrEvent[i].enabled=true;
		}
	}
	if (!check) {
    107c:	77 23       	and	r23, r23
    107e:	c9 f4       	brne	.+50     	; 0x10b2 <TimerSet+0x8a>
		tmrEvent[tmrCount].EventId=evenId;
    1080:	fa 01       	movw	r30, r20
    1082:	ee 0f       	add	r30, r30
    1084:	ff 1f       	adc	r31, r31
    1086:	ee 0f       	add	r30, r30
    1088:	ff 1f       	adc	r31, r31
    108a:	ee 0f       	add	r30, r30
    108c:	ff 1f       	adc	r31, r31
    108e:	e4 1b       	sub	r30, r20
    1090:	f5 0b       	sbc	r31, r21
    1092:	ea 5d       	subi	r30, 0xDA	; 218
    1094:	fd 4f       	sbci	r31, 0xFD	; 253
    1096:	d1 83       	std	Z+1, r29	; 0x01
    1098:	c0 83       	st	Z, r28
		tmrEvent[tmrCount].count=0;
    109a:	13 82       	std	Z+3, r1	; 0x03
    109c:	12 82       	std	Z+2, r1	; 0x02
		tmrEvent[tmrCount].max=max;
    109e:	d5 82       	std	Z+5, r13	; 0x05
    10a0:	c4 82       	std	Z+4, r12	; 0x04
		tmrEvent[tmrCount].enabled=true;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	86 83       	std	Z+6, r24	; 0x06
		tmrCount++;
    10a6:	4f 5f       	subi	r20, 0xFF	; 255
    10a8:	5f 4f       	sbci	r21, 0xFF	; 255
    10aa:	50 93 03 02 	sts	0x0203, r21
    10ae:	40 93 02 02 	sts	0x0202, r20
	}
}
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	ff 90       	pop	r15
    10b8:	ef 90       	pop	r14
    10ba:	df 90       	pop	r13
    10bc:	cf 90       	pop	r12
    10be:	08 95       	ret

000010c0 <TimerUnSet>:

void TimerUnSet(const sc_eventid evenId) {
    10c0:	dc 01       	movw	r26, r24
	for (int i=0;i<tmrCount;i++) {
    10c2:	60 91 02 02 	lds	r22, 0x0202
    10c6:	70 91 03 02 	lds	r23, 0x0203
    10ca:	16 16       	cp	r1, r22
    10cc:	17 06       	cpc	r1, r23
    10ce:	64 f5       	brge	.+88     	; 0x1128 <__stack+0x29>
		if (tmrEvent[i].EventId==evenId) {
    10d0:	80 91 26 02 	lds	r24, 0x0226
    10d4:	90 91 27 02 	lds	r25, 0x0227
    10d8:	8a 17       	cp	r24, r26
    10da:	9b 07       	cpc	r25, r27
    10dc:	e1 f4       	brne	.+56     	; 0x1116 <__stack+0x17>
    10de:	0a c0       	rjmp	.+20     	; 0x10f4 <TimerUnSet+0x34>
    10e0:	29 5f       	subi	r18, 0xF9	; 249
    10e2:	3f 4f       	sbci	r19, 0xFF	; 255
		tmrEvent[tmrCount].enabled=true;
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
    10e4:	f9 01       	movw	r30, r18
    10e6:	37 97       	sbiw	r30, 0x07	; 7
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
    10e8:	80 81       	ld	r24, Z
    10ea:	91 81       	ldd	r25, Z+1	; 0x01
    10ec:	8a 17       	cp	r24, r26
    10ee:	9b 07       	cpc	r25, r27
    10f0:	b1 f4       	brne	.+44     	; 0x111e <__stack+0x1f>
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <TimerUnSet+0x38>
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
	for (int i=0;i<tmrCount;i++) {
    10f4:	40 e0       	ldi	r20, 0x00	; 0
    10f6:	50 e0       	ldi	r21, 0x00	; 0
		if (tmrEvent[i].EventId==evenId) {
			tmrEvent[i].count=0;
    10f8:	fa 01       	movw	r30, r20
    10fa:	ee 0f       	add	r30, r30
    10fc:	ff 1f       	adc	r31, r31
    10fe:	ee 0f       	add	r30, r30
    1100:	ff 1f       	adc	r31, r31
    1102:	ee 0f       	add	r30, r30
    1104:	ff 1f       	adc	r31, r31
    1106:	e4 1b       	sub	r30, r20
    1108:	f5 0b       	sbc	r31, r21
    110a:	ea 5d       	subi	r30, 0xDA	; 218
    110c:	fd 4f       	sbci	r31, 0xFD	; 253
    110e:	13 82       	std	Z+3, r1	; 0x03
    1110:	12 82       	std	Z+2, r1	; 0x02
			tmrEvent[i].enabled=false;
    1112:	16 82       	std	Z+6, r1	; 0x06
			return;
    1114:	08 95       	ret
    1116:	2d e2       	ldi	r18, 0x2D	; 45
    1118:	32 e0       	ldi	r19, 0x02	; 2
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
	for (int i=0;i<tmrCount;i++) {
    111a:	40 e0       	ldi	r20, 0x00	; 0
    111c:	50 e0       	ldi	r21, 0x00	; 0
    111e:	4f 5f       	subi	r20, 0xFF	; 255
    1120:	5f 4f       	sbci	r21, 0xFF	; 255
    1122:	46 17       	cp	r20, r22
    1124:	57 07       	cpc	r21, r23
    1126:	e1 f6       	brne	.-72     	; 0x10e0 <TimerUnSet+0x20>
    1128:	08 95       	ret

0000112a <TimerCheck>:
			return;
		}
	}
}

void TimerCheck(SMR* handle) {
    112a:	cf 92       	push	r12
    112c:	df 92       	push	r13
    112e:	ef 92       	push	r14
    1130:	ff 92       	push	r15
    1132:	0f 93       	push	r16
    1134:	1f 93       	push	r17
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	6c 01       	movw	r12, r24
	for (int i=0;i<tmrCount;i++) {
    113c:	80 91 02 02 	lds	r24, 0x0202
    1140:	90 91 03 02 	lds	r25, 0x0203
    1144:	18 16       	cp	r1, r24
    1146:	19 06       	cpc	r1, r25
    1148:	94 f5       	brge	.+100    	; 0x11ae <TimerCheck+0x84>
    114a:	cc e2       	ldi	r28, 0x2C	; 44
    114c:	d2 e0       	ldi	r29, 0x02	; 2
    114e:	8e 01       	movw	r16, r28
    1150:	06 50       	subi	r16, 0x06	; 6
    1152:	10 40       	sbci	r17, 0x00	; 0
    1154:	ee 24       	eor	r14, r14
    1156:	ff 24       	eor	r15, r15
		if (tmrEvent[i].enabled) {
    1158:	88 81       	ld	r24, Y
    115a:	88 23       	and	r24, r24
    115c:	d9 f0       	breq	.+54     	; 0x1194 <TimerCheck+0x6a>
			tmrEvent[i].count++;
    115e:	d8 01       	movw	r26, r16
    1160:	12 96       	adiw	r26, 0x02	; 2
    1162:	8d 91       	ld	r24, X+
    1164:	9c 91       	ld	r25, X
    1166:	13 97       	sbiw	r26, 0x03	; 3
    1168:	01 96       	adiw	r24, 0x01	; 1
    116a:	13 96       	adiw	r26, 0x03	; 3
    116c:	9c 93       	st	X, r25
    116e:	8e 93       	st	-X, r24
    1170:	12 97       	sbiw	r26, 0x02	; 2
			if (tmrEvent[i].count==tmrEvent[i].max) {
    1172:	14 96       	adiw	r26, 0x04	; 4
    1174:	2d 91       	ld	r18, X+
    1176:	3c 91       	ld	r19, X
    1178:	15 97       	sbiw	r26, 0x05	; 5
    117a:	82 17       	cp	r24, r18
    117c:	93 07       	cpc	r25, r19
    117e:	51 f4       	brne	.+20     	; 0x1194 <TimerCheck+0x6a>
				tmrEvent[i].count=0;
    1180:	13 96       	adiw	r26, 0x03	; 3
    1182:	1c 92       	st	X, r1
    1184:	1e 92       	st	-X, r1
    1186:	12 97       	sbiw	r26, 0x02	; 2
				tmrEvent[i].enabled=false;
    1188:	18 82       	st	Y, r1
				sMR_raiseTimeEvent(handle,tmrEvent[i].EventId);
    118a:	6d 91       	ld	r22, X+
    118c:	7c 91       	ld	r23, X
    118e:	c6 01       	movw	r24, r12
    1190:	0e 94 0e 07 	call	0xe1c	; 0xe1c <sMR_raiseTimeEvent>
		}
	}
}

void TimerCheck(SMR* handle) {
	for (int i=0;i<tmrCount;i++) {
    1194:	08 94       	sec
    1196:	e1 1c       	adc	r14, r1
    1198:	f1 1c       	adc	r15, r1
    119a:	27 96       	adiw	r28, 0x07	; 7
    119c:	09 5f       	subi	r16, 0xF9	; 249
    119e:	1f 4f       	sbci	r17, 0xFF	; 255
    11a0:	80 91 02 02 	lds	r24, 0x0202
    11a4:	90 91 03 02 	lds	r25, 0x0203
    11a8:	e8 16       	cp	r14, r24
    11aa:	f9 06       	cpc	r15, r25
    11ac:	ac f2       	brlt	.-86     	; 0x1158 <TimerCheck+0x2e>
				tmrEvent[i].enabled=false;
				sMR_raiseTimeEvent(handle,tmrEvent[i].EventId);
			}
		}
	}
}
    11ae:	df 91       	pop	r29
    11b0:	cf 91       	pop	r28
    11b2:	1f 91       	pop	r17
    11b4:	0f 91       	pop	r16
    11b6:	ff 90       	pop	r15
    11b8:	ef 90       	pop	r14
    11ba:	df 90       	pop	r13
    11bc:	cf 90       	pop	r12
    11be:	08 95       	ret

000011c0 <TimerClear>:

void TimerClear() {
	free(tmrEvent);
    11c0:	86 e2       	ldi	r24, 0x26	; 38
    11c2:	92 e0       	ldi	r25, 0x02	; 2
    11c4:	0e 94 b2 09 	call	0x1364	; 0x1364 <free>
	tmrCount=0;
    11c8:	10 92 03 02 	sts	0x0203, r1
    11cc:	10 92 02 02 	sts	0x0202, r1
    11d0:	08 95       	ret

000011d2 <__udivmodqi4>:
    11d2:	99 1b       	sub	r25, r25
    11d4:	79 e0       	ldi	r23, 0x09	; 9
    11d6:	04 c0       	rjmp	.+8      	; 0x11e0 <__udivmodqi4_ep>

000011d8 <__udivmodqi4_loop>:
    11d8:	99 1f       	adc	r25, r25
    11da:	96 17       	cp	r25, r22
    11dc:	08 f0       	brcs	.+2      	; 0x11e0 <__udivmodqi4_ep>
    11de:	96 1b       	sub	r25, r22

000011e0 <__udivmodqi4_ep>:
    11e0:	88 1f       	adc	r24, r24
    11e2:	7a 95       	dec	r23
    11e4:	c9 f7       	brne	.-14     	; 0x11d8 <__udivmodqi4_loop>
    11e6:	80 95       	com	r24
    11e8:	08 95       	ret

000011ea <__divmodhi4>:
    11ea:	97 fb       	bst	r25, 7
    11ec:	09 2e       	mov	r0, r25
    11ee:	07 26       	eor	r0, r23
    11f0:	0a d0       	rcall	.+20     	; 0x1206 <__divmodhi4_neg1>
    11f2:	77 fd       	sbrc	r23, 7
    11f4:	04 d0       	rcall	.+8      	; 0x11fe <__divmodhi4_neg2>
    11f6:	0c d0       	rcall	.+24     	; 0x1210 <__udivmodhi4>
    11f8:	06 d0       	rcall	.+12     	; 0x1206 <__divmodhi4_neg1>
    11fa:	00 20       	and	r0, r0
    11fc:	1a f4       	brpl	.+6      	; 0x1204 <__divmodhi4_exit>

000011fe <__divmodhi4_neg2>:
    11fe:	70 95       	com	r23
    1200:	61 95       	neg	r22
    1202:	7f 4f       	sbci	r23, 0xFF	; 255

00001204 <__divmodhi4_exit>:
    1204:	08 95       	ret

00001206 <__divmodhi4_neg1>:
    1206:	f6 f7       	brtc	.-4      	; 0x1204 <__divmodhi4_exit>
    1208:	90 95       	com	r25
    120a:	81 95       	neg	r24
    120c:	9f 4f       	sbci	r25, 0xFF	; 255
    120e:	08 95       	ret

00001210 <__udivmodhi4>:
    1210:	aa 1b       	sub	r26, r26
    1212:	bb 1b       	sub	r27, r27
    1214:	51 e1       	ldi	r21, 0x11	; 17
    1216:	07 c0       	rjmp	.+14     	; 0x1226 <__udivmodhi4_ep>

00001218 <__udivmodhi4_loop>:
    1218:	aa 1f       	adc	r26, r26
    121a:	bb 1f       	adc	r27, r27
    121c:	a6 17       	cp	r26, r22
    121e:	b7 07       	cpc	r27, r23
    1220:	10 f0       	brcs	.+4      	; 0x1226 <__udivmodhi4_ep>
    1222:	a6 1b       	sub	r26, r22
    1224:	b7 0b       	sbc	r27, r23

00001226 <__udivmodhi4_ep>:
    1226:	88 1f       	adc	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	5a 95       	dec	r21
    122c:	a9 f7       	brne	.-22     	; 0x1218 <__udivmodhi4_loop>
    122e:	80 95       	com	r24
    1230:	90 95       	com	r25
    1232:	bc 01       	movw	r22, r24
    1234:	cd 01       	movw	r24, r26
    1236:	08 95       	ret

00001238 <malloc>:
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	ac 01       	movw	r20, r24
    123e:	82 30       	cpi	r24, 0x02	; 2
    1240:	91 05       	cpc	r25, r1
    1242:	10 f4       	brcc	.+4      	; 0x1248 <malloc+0x10>
    1244:	42 e0       	ldi	r20, 0x02	; 2
    1246:	50 e0       	ldi	r21, 0x00	; 0
    1248:	e0 91 6e 02 	lds	r30, 0x026E
    124c:	f0 91 6f 02 	lds	r31, 0x026F
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	a0 e0       	ldi	r26, 0x00	; 0
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	24 c0       	rjmp	.+72     	; 0x12a2 <malloc+0x6a>
    125a:	80 81       	ld	r24, Z
    125c:	91 81       	ldd	r25, Z+1	; 0x01
    125e:	84 17       	cp	r24, r20
    1260:	95 07       	cpc	r25, r21
    1262:	d0 f0       	brcs	.+52     	; 0x1298 <malloc+0x60>
    1264:	84 17       	cp	r24, r20
    1266:	95 07       	cpc	r25, r21
    1268:	71 f4       	brne	.+28     	; 0x1286 <malloc+0x4e>
    126a:	82 81       	ldd	r24, Z+2	; 0x02
    126c:	93 81       	ldd	r25, Z+3	; 0x03
    126e:	10 97       	sbiw	r26, 0x00	; 0
    1270:	29 f0       	breq	.+10     	; 0x127c <malloc+0x44>
    1272:	13 96       	adiw	r26, 0x03	; 3
    1274:	9c 93       	st	X, r25
    1276:	8e 93       	st	-X, r24
    1278:	12 97       	sbiw	r26, 0x02	; 2
    127a:	2c c0       	rjmp	.+88     	; 0x12d4 <malloc+0x9c>
    127c:	90 93 6f 02 	sts	0x026F, r25
    1280:	80 93 6e 02 	sts	0x026E, r24
    1284:	27 c0       	rjmp	.+78     	; 0x12d4 <malloc+0x9c>
    1286:	21 15       	cp	r18, r1
    1288:	31 05       	cpc	r19, r1
    128a:	19 f0       	breq	.+6      	; 0x1292 <malloc+0x5a>
    128c:	82 17       	cp	r24, r18
    128e:	93 07       	cpc	r25, r19
    1290:	18 f4       	brcc	.+6      	; 0x1298 <malloc+0x60>
    1292:	9c 01       	movw	r18, r24
    1294:	bd 01       	movw	r22, r26
    1296:	ef 01       	movw	r28, r30
    1298:	92 81       	ldd	r25, Z+2	; 0x02
    129a:	83 81       	ldd	r24, Z+3	; 0x03
    129c:	df 01       	movw	r26, r30
    129e:	e9 2f       	mov	r30, r25
    12a0:	f8 2f       	mov	r31, r24
    12a2:	30 97       	sbiw	r30, 0x00	; 0
    12a4:	d1 f6       	brne	.-76     	; 0x125a <malloc+0x22>
    12a6:	21 15       	cp	r18, r1
    12a8:	31 05       	cpc	r19, r1
    12aa:	f9 f0       	breq	.+62     	; 0x12ea <malloc+0xb2>
    12ac:	c9 01       	movw	r24, r18
    12ae:	84 1b       	sub	r24, r20
    12b0:	95 0b       	sbc	r25, r21
    12b2:	84 30       	cpi	r24, 0x04	; 4
    12b4:	91 05       	cpc	r25, r1
    12b6:	80 f4       	brcc	.+32     	; 0x12d8 <malloc+0xa0>
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	9b 81       	ldd	r25, Y+3	; 0x03
    12bc:	61 15       	cp	r22, r1
    12be:	71 05       	cpc	r23, r1
    12c0:	21 f0       	breq	.+8      	; 0x12ca <malloc+0x92>
    12c2:	fb 01       	movw	r30, r22
    12c4:	93 83       	std	Z+3, r25	; 0x03
    12c6:	82 83       	std	Z+2, r24	; 0x02
    12c8:	04 c0       	rjmp	.+8      	; 0x12d2 <malloc+0x9a>
    12ca:	90 93 6f 02 	sts	0x026F, r25
    12ce:	80 93 6e 02 	sts	0x026E, r24
    12d2:	fe 01       	movw	r30, r28
    12d4:	32 96       	adiw	r30, 0x02	; 2
    12d6:	42 c0       	rjmp	.+132    	; 0x135c <malloc+0x124>
    12d8:	fe 01       	movw	r30, r28
    12da:	e8 0f       	add	r30, r24
    12dc:	f9 1f       	adc	r31, r25
    12de:	41 93       	st	Z+, r20
    12e0:	51 93       	st	Z+, r21
    12e2:	02 97       	sbiw	r24, 0x02	; 2
    12e4:	99 83       	std	Y+1, r25	; 0x01
    12e6:	88 83       	st	Y, r24
    12e8:	39 c0       	rjmp	.+114    	; 0x135c <malloc+0x124>
    12ea:	80 91 6c 02 	lds	r24, 0x026C
    12ee:	90 91 6d 02 	lds	r25, 0x026D
    12f2:	00 97       	sbiw	r24, 0x00	; 0
    12f4:	41 f4       	brne	.+16     	; 0x1306 <malloc+0xce>
    12f6:	80 91 fd 01 	lds	r24, 0x01FD
    12fa:	90 91 fe 01 	lds	r25, 0x01FE
    12fe:	90 93 6d 02 	sts	0x026D, r25
    1302:	80 93 6c 02 	sts	0x026C, r24
    1306:	20 91 fb 01 	lds	r18, 0x01FB
    130a:	30 91 fc 01 	lds	r19, 0x01FC
    130e:	21 15       	cp	r18, r1
    1310:	31 05       	cpc	r19, r1
    1312:	41 f4       	brne	.+16     	; 0x1324 <malloc+0xec>
    1314:	2d b7       	in	r18, 0x3d	; 61
    1316:	3e b7       	in	r19, 0x3e	; 62
    1318:	80 91 ff 01 	lds	r24, 0x01FF
    131c:	90 91 00 02 	lds	r25, 0x0200
    1320:	28 1b       	sub	r18, r24
    1322:	39 0b       	sbc	r19, r25
    1324:	e0 91 6c 02 	lds	r30, 0x026C
    1328:	f0 91 6d 02 	lds	r31, 0x026D
    132c:	e2 17       	cp	r30, r18
    132e:	f3 07       	cpc	r31, r19
    1330:	98 f4       	brcc	.+38     	; 0x1358 <malloc+0x120>
    1332:	2e 1b       	sub	r18, r30
    1334:	3f 0b       	sbc	r19, r31
    1336:	24 17       	cp	r18, r20
    1338:	35 07       	cpc	r19, r21
    133a:	70 f0       	brcs	.+28     	; 0x1358 <malloc+0x120>
    133c:	ca 01       	movw	r24, r20
    133e:	02 96       	adiw	r24, 0x02	; 2
    1340:	28 17       	cp	r18, r24
    1342:	39 07       	cpc	r19, r25
    1344:	48 f0       	brcs	.+18     	; 0x1358 <malloc+0x120>
    1346:	8e 0f       	add	r24, r30
    1348:	9f 1f       	adc	r25, r31
    134a:	90 93 6d 02 	sts	0x026D, r25
    134e:	80 93 6c 02 	sts	0x026C, r24
    1352:	41 93       	st	Z+, r20
    1354:	51 93       	st	Z+, r21
    1356:	02 c0       	rjmp	.+4      	; 0x135c <malloc+0x124>
    1358:	e0 e0       	ldi	r30, 0x00	; 0
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	cf 01       	movw	r24, r30
    135e:	df 91       	pop	r29
    1360:	cf 91       	pop	r28
    1362:	08 95       	ret

00001364 <free>:
    1364:	0f 93       	push	r16
    1366:	1f 93       	push	r17
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
    136c:	9c 01       	movw	r18, r24
    136e:	00 97       	sbiw	r24, 0x00	; 0
    1370:	09 f4       	brne	.+2      	; 0x1374 <free+0x10>
    1372:	8c c0       	rjmp	.+280    	; 0x148c <free+0x128>
    1374:	dc 01       	movw	r26, r24
    1376:	12 97       	sbiw	r26, 0x02	; 2
    1378:	13 96       	adiw	r26, 0x03	; 3
    137a:	1c 92       	st	X, r1
    137c:	1e 92       	st	-X, r1
    137e:	12 97       	sbiw	r26, 0x02	; 2
    1380:	60 91 6e 02 	lds	r22, 0x026E
    1384:	70 91 6f 02 	lds	r23, 0x026F
    1388:	61 15       	cp	r22, r1
    138a:	71 05       	cpc	r23, r1
    138c:	89 f4       	brne	.+34     	; 0x13b0 <free+0x4c>
    138e:	8d 91       	ld	r24, X+
    1390:	9c 91       	ld	r25, X
    1392:	11 97       	sbiw	r26, 0x01	; 1
    1394:	82 0f       	add	r24, r18
    1396:	93 1f       	adc	r25, r19
    1398:	20 91 6c 02 	lds	r18, 0x026C
    139c:	30 91 6d 02 	lds	r19, 0x026D
    13a0:	28 17       	cp	r18, r24
    13a2:	39 07       	cpc	r19, r25
    13a4:	69 f5       	brne	.+90     	; 0x1400 <free+0x9c>
    13a6:	b0 93 6d 02 	sts	0x026D, r27
    13aa:	a0 93 6c 02 	sts	0x026C, r26
    13ae:	6e c0       	rjmp	.+220    	; 0x148c <free+0x128>
    13b0:	fb 01       	movw	r30, r22
    13b2:	40 e0       	ldi	r20, 0x00	; 0
    13b4:	50 e0       	ldi	r21, 0x00	; 0
    13b6:	01 c0       	rjmp	.+2      	; 0x13ba <free+0x56>
    13b8:	fc 01       	movw	r30, r24
    13ba:	ea 17       	cp	r30, r26
    13bc:	fb 07       	cpc	r31, r27
    13be:	30 f4       	brcc	.+12     	; 0x13cc <free+0x68>
    13c0:	82 81       	ldd	r24, Z+2	; 0x02
    13c2:	93 81       	ldd	r25, Z+3	; 0x03
    13c4:	af 01       	movw	r20, r30
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	b9 f7       	brne	.-18     	; 0x13b8 <free+0x54>
    13ca:	1f c0       	rjmp	.+62     	; 0x140a <free+0xa6>
    13cc:	e9 01       	movw	r28, r18
    13ce:	22 97       	sbiw	r28, 0x02	; 2
    13d0:	fb 83       	std	Y+3, r31	; 0x03
    13d2:	ea 83       	std	Y+2, r30	; 0x02
    13d4:	08 81       	ld	r16, Y
    13d6:	19 81       	ldd	r17, Y+1	; 0x01
    13d8:	c9 01       	movw	r24, r18
    13da:	80 0f       	add	r24, r16
    13dc:	91 1f       	adc	r25, r17
    13de:	8e 17       	cp	r24, r30
    13e0:	9f 07       	cpc	r25, r31
    13e2:	59 f4       	brne	.+22     	; 0x13fa <free+0x96>
    13e4:	80 81       	ld	r24, Z
    13e6:	91 81       	ldd	r25, Z+1	; 0x01
    13e8:	80 0f       	add	r24, r16
    13ea:	91 1f       	adc	r25, r17
    13ec:	02 96       	adiw	r24, 0x02	; 2
    13ee:	99 83       	std	Y+1, r25	; 0x01
    13f0:	88 83       	st	Y, r24
    13f2:	82 81       	ldd	r24, Z+2	; 0x02
    13f4:	93 81       	ldd	r25, Z+3	; 0x03
    13f6:	9b 83       	std	Y+3, r25	; 0x03
    13f8:	8a 83       	std	Y+2, r24	; 0x02
    13fa:	41 15       	cp	r20, r1
    13fc:	51 05       	cpc	r21, r1
    13fe:	29 f4       	brne	.+10     	; 0x140a <free+0xa6>
    1400:	b0 93 6f 02 	sts	0x026F, r27
    1404:	a0 93 6e 02 	sts	0x026E, r26
    1408:	41 c0       	rjmp	.+130    	; 0x148c <free+0x128>
    140a:	fa 01       	movw	r30, r20
    140c:	b3 83       	std	Z+3, r27	; 0x03
    140e:	a2 83       	std	Z+2, r26	; 0x02
    1410:	c1 91       	ld	r28, Z+
    1412:	d1 91       	ld	r29, Z+
    1414:	ec 0f       	add	r30, r28
    1416:	fd 1f       	adc	r31, r29
    1418:	ae 17       	cp	r26, r30
    141a:	bf 07       	cpc	r27, r31
    141c:	81 f4       	brne	.+32     	; 0x143e <free+0xda>
    141e:	f9 01       	movw	r30, r18
    1420:	92 91       	ld	r25, -Z
    1422:	82 91       	ld	r24, -Z
    1424:	8c 0f       	add	r24, r28
    1426:	9d 1f       	adc	r25, r29
    1428:	02 96       	adiw	r24, 0x02	; 2
    142a:	da 01       	movw	r26, r20
    142c:	11 96       	adiw	r26, 0x01	; 1
    142e:	9c 93       	st	X, r25
    1430:	8e 93       	st	-X, r24
    1432:	82 81       	ldd	r24, Z+2	; 0x02
    1434:	93 81       	ldd	r25, Z+3	; 0x03
    1436:	13 96       	adiw	r26, 0x03	; 3
    1438:	9c 93       	st	X, r25
    143a:	8e 93       	st	-X, r24
    143c:	12 97       	sbiw	r26, 0x02	; 2
    143e:	e0 e0       	ldi	r30, 0x00	; 0
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <free+0xe4>
    1444:	fb 01       	movw	r30, r22
    1446:	bc 01       	movw	r22, r24
    1448:	db 01       	movw	r26, r22
    144a:	12 96       	adiw	r26, 0x02	; 2
    144c:	8d 91       	ld	r24, X+
    144e:	9c 91       	ld	r25, X
    1450:	13 97       	sbiw	r26, 0x03	; 3
    1452:	00 97       	sbiw	r24, 0x00	; 0
    1454:	b9 f7       	brne	.-18     	; 0x1444 <free+0xe0>
    1456:	cb 01       	movw	r24, r22
    1458:	02 96       	adiw	r24, 0x02	; 2
    145a:	2d 91       	ld	r18, X+
    145c:	3c 91       	ld	r19, X
    145e:	11 97       	sbiw	r26, 0x01	; 1
    1460:	82 0f       	add	r24, r18
    1462:	93 1f       	adc	r25, r19
    1464:	20 91 6c 02 	lds	r18, 0x026C
    1468:	30 91 6d 02 	lds	r19, 0x026D
    146c:	28 17       	cp	r18, r24
    146e:	39 07       	cpc	r19, r25
    1470:	69 f4       	brne	.+26     	; 0x148c <free+0x128>
    1472:	30 97       	sbiw	r30, 0x00	; 0
    1474:	29 f4       	brne	.+10     	; 0x1480 <free+0x11c>
    1476:	10 92 6f 02 	sts	0x026F, r1
    147a:	10 92 6e 02 	sts	0x026E, r1
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <free+0x120>
    1480:	13 82       	std	Z+3, r1	; 0x03
    1482:	12 82       	std	Z+2, r1	; 0x02
    1484:	70 93 6d 02 	sts	0x026D, r23
    1488:	60 93 6c 02 	sts	0x026C, r22
    148c:	df 91       	pop	r29
    148e:	cf 91       	pop	r28
    1490:	1f 91       	pop	r17
    1492:	0f 91       	pop	r16
    1494:	08 95       	ret

00001496 <sprintf>:
    1496:	0f 93       	push	r16
    1498:	1f 93       	push	r17
    149a:	cf 93       	push	r28
    149c:	df 93       	push	r29
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
    14a2:	2e 97       	sbiw	r28, 0x0e	; 14
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	f8 94       	cli
    14a8:	de bf       	out	0x3e, r29	; 62
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	cd bf       	out	0x3d, r28	; 61
    14ae:	0d 89       	ldd	r16, Y+21	; 0x15
    14b0:	1e 89       	ldd	r17, Y+22	; 0x16
    14b2:	86 e0       	ldi	r24, 0x06	; 6
    14b4:	8c 83       	std	Y+4, r24	; 0x04
    14b6:	1a 83       	std	Y+2, r17	; 0x02
    14b8:	09 83       	std	Y+1, r16	; 0x01
    14ba:	8f ef       	ldi	r24, 0xFF	; 255
    14bc:	9f e7       	ldi	r25, 0x7F	; 127
    14be:	9e 83       	std	Y+6, r25	; 0x06
    14c0:	8d 83       	std	Y+5, r24	; 0x05
    14c2:	ae 01       	movw	r20, r28
    14c4:	47 5e       	subi	r20, 0xE7	; 231
    14c6:	5f 4f       	sbci	r21, 0xFF	; 255
    14c8:	ce 01       	movw	r24, r28
    14ca:	01 96       	adiw	r24, 0x01	; 1
    14cc:	6f 89       	ldd	r22, Y+23	; 0x17
    14ce:	78 8d       	ldd	r23, Y+24	; 0x18
    14d0:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <vfprintf>
    14d4:	ef 81       	ldd	r30, Y+7	; 0x07
    14d6:	f8 85       	ldd	r31, Y+8	; 0x08
    14d8:	e0 0f       	add	r30, r16
    14da:	f1 1f       	adc	r31, r17
    14dc:	10 82       	st	Z, r1
    14de:	2e 96       	adiw	r28, 0x0e	; 14
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	f8 94       	cli
    14e4:	de bf       	out	0x3e, r29	; 62
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	cd bf       	out	0x3d, r28	; 61
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	1f 91       	pop	r17
    14f0:	0f 91       	pop	r16
    14f2:	08 95       	ret

000014f4 <vfprintf>:
    14f4:	2f 92       	push	r2
    14f6:	3f 92       	push	r3
    14f8:	4f 92       	push	r4
    14fa:	5f 92       	push	r5
    14fc:	6f 92       	push	r6
    14fe:	7f 92       	push	r7
    1500:	8f 92       	push	r8
    1502:	9f 92       	push	r9
    1504:	af 92       	push	r10
    1506:	bf 92       	push	r11
    1508:	cf 92       	push	r12
    150a:	df 92       	push	r13
    150c:	ef 92       	push	r14
    150e:	ff 92       	push	r15
    1510:	0f 93       	push	r16
    1512:	1f 93       	push	r17
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	2d 97       	sbiw	r28, 0x0d	; 13
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	cd bf       	out	0x3d, r28	; 61
    1528:	3c 01       	movw	r6, r24
    152a:	7d 87       	std	Y+13, r23	; 0x0d
    152c:	6c 87       	std	Y+12, r22	; 0x0c
    152e:	5a 01       	movw	r10, r20
    1530:	fc 01       	movw	r30, r24
    1532:	17 82       	std	Z+7, r1	; 0x07
    1534:	16 82       	std	Z+6, r1	; 0x06
    1536:	83 81       	ldd	r24, Z+3	; 0x03
    1538:	81 ff       	sbrs	r24, 1
    153a:	c8 c1       	rjmp	.+912    	; 0x18cc <vfprintf+0x3d8>
    153c:	2e 01       	movw	r4, r28
    153e:	08 94       	sec
    1540:	41 1c       	adc	r4, r1
    1542:	51 1c       	adc	r5, r1
    1544:	f3 01       	movw	r30, r6
    1546:	93 81       	ldd	r25, Z+3	; 0x03
    1548:	ec 85       	ldd	r30, Y+12	; 0x0c
    154a:	fd 85       	ldd	r31, Y+13	; 0x0d
    154c:	93 fd       	sbrc	r25, 3
    154e:	85 91       	lpm	r24, Z+
    1550:	93 ff       	sbrs	r25, 3
    1552:	81 91       	ld	r24, Z+
    1554:	fd 87       	std	Y+13, r31	; 0x0d
    1556:	ec 87       	std	Y+12, r30	; 0x0c
    1558:	88 23       	and	r24, r24
    155a:	09 f4       	brne	.+2      	; 0x155e <vfprintf+0x6a>
    155c:	b3 c1       	rjmp	.+870    	; 0x18c4 <vfprintf+0x3d0>
    155e:	85 32       	cpi	r24, 0x25	; 37
    1560:	41 f4       	brne	.+16     	; 0x1572 <vfprintf+0x7e>
    1562:	93 fd       	sbrc	r25, 3
    1564:	85 91       	lpm	r24, Z+
    1566:	93 ff       	sbrs	r25, 3
    1568:	81 91       	ld	r24, Z+
    156a:	fd 87       	std	Y+13, r31	; 0x0d
    156c:	ec 87       	std	Y+12, r30	; 0x0c
    156e:	85 32       	cpi	r24, 0x25	; 37
    1570:	29 f4       	brne	.+10     	; 0x157c <vfprintf+0x88>
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	b3 01       	movw	r22, r6
    1576:	0e 94 97 0c 	call	0x192e	; 0x192e <fputc>
    157a:	e4 cf       	rjmp	.-56     	; 0x1544 <vfprintf+0x50>
    157c:	ff 24       	eor	r15, r15
    157e:	ee 24       	eor	r14, r14
    1580:	10 e0       	ldi	r17, 0x00	; 0
    1582:	10 32       	cpi	r17, 0x20	; 32
    1584:	b0 f4       	brcc	.+44     	; 0x15b2 <vfprintf+0xbe>
    1586:	8b 32       	cpi	r24, 0x2B	; 43
    1588:	69 f0       	breq	.+26     	; 0x15a4 <vfprintf+0xb0>
    158a:	8c 32       	cpi	r24, 0x2C	; 44
    158c:	28 f4       	brcc	.+10     	; 0x1598 <vfprintf+0xa4>
    158e:	80 32       	cpi	r24, 0x20	; 32
    1590:	51 f0       	breq	.+20     	; 0x15a6 <vfprintf+0xb2>
    1592:	83 32       	cpi	r24, 0x23	; 35
    1594:	71 f4       	brne	.+28     	; 0x15b2 <vfprintf+0xbe>
    1596:	0b c0       	rjmp	.+22     	; 0x15ae <vfprintf+0xba>
    1598:	8d 32       	cpi	r24, 0x2D	; 45
    159a:	39 f0       	breq	.+14     	; 0x15aa <vfprintf+0xb6>
    159c:	80 33       	cpi	r24, 0x30	; 48
    159e:	49 f4       	brne	.+18     	; 0x15b2 <vfprintf+0xbe>
    15a0:	11 60       	ori	r17, 0x01	; 1
    15a2:	2c c0       	rjmp	.+88     	; 0x15fc <vfprintf+0x108>
    15a4:	12 60       	ori	r17, 0x02	; 2
    15a6:	14 60       	ori	r17, 0x04	; 4
    15a8:	29 c0       	rjmp	.+82     	; 0x15fc <vfprintf+0x108>
    15aa:	18 60       	ori	r17, 0x08	; 8
    15ac:	27 c0       	rjmp	.+78     	; 0x15fc <vfprintf+0x108>
    15ae:	10 61       	ori	r17, 0x10	; 16
    15b0:	25 c0       	rjmp	.+74     	; 0x15fc <vfprintf+0x108>
    15b2:	17 fd       	sbrc	r17, 7
    15b4:	2e c0       	rjmp	.+92     	; 0x1612 <vfprintf+0x11e>
    15b6:	28 2f       	mov	r18, r24
    15b8:	20 53       	subi	r18, 0x30	; 48
    15ba:	2a 30       	cpi	r18, 0x0A	; 10
    15bc:	98 f4       	brcc	.+38     	; 0x15e4 <vfprintf+0xf0>
    15be:	16 ff       	sbrs	r17, 6
    15c0:	08 c0       	rjmp	.+16     	; 0x15d2 <vfprintf+0xde>
    15c2:	8f 2d       	mov	r24, r15
    15c4:	88 0f       	add	r24, r24
    15c6:	f8 2e       	mov	r15, r24
    15c8:	ff 0c       	add	r15, r15
    15ca:	ff 0c       	add	r15, r15
    15cc:	f8 0e       	add	r15, r24
    15ce:	f2 0e       	add	r15, r18
    15d0:	15 c0       	rjmp	.+42     	; 0x15fc <vfprintf+0x108>
    15d2:	8e 2d       	mov	r24, r14
    15d4:	88 0f       	add	r24, r24
    15d6:	e8 2e       	mov	r14, r24
    15d8:	ee 0c       	add	r14, r14
    15da:	ee 0c       	add	r14, r14
    15dc:	e8 0e       	add	r14, r24
    15de:	e2 0e       	add	r14, r18
    15e0:	10 62       	ori	r17, 0x20	; 32
    15e2:	0c c0       	rjmp	.+24     	; 0x15fc <vfprintf+0x108>
    15e4:	8e 32       	cpi	r24, 0x2E	; 46
    15e6:	21 f4       	brne	.+8      	; 0x15f0 <vfprintf+0xfc>
    15e8:	16 fd       	sbrc	r17, 6
    15ea:	6c c1       	rjmp	.+728    	; 0x18c4 <vfprintf+0x3d0>
    15ec:	10 64       	ori	r17, 0x40	; 64
    15ee:	06 c0       	rjmp	.+12     	; 0x15fc <vfprintf+0x108>
    15f0:	8c 36       	cpi	r24, 0x6C	; 108
    15f2:	11 f4       	brne	.+4      	; 0x15f8 <vfprintf+0x104>
    15f4:	10 68       	ori	r17, 0x80	; 128
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <vfprintf+0x108>
    15f8:	88 36       	cpi	r24, 0x68	; 104
    15fa:	59 f4       	brne	.+22     	; 0x1612 <vfprintf+0x11e>
    15fc:	ec 85       	ldd	r30, Y+12	; 0x0c
    15fe:	fd 85       	ldd	r31, Y+13	; 0x0d
    1600:	93 fd       	sbrc	r25, 3
    1602:	85 91       	lpm	r24, Z+
    1604:	93 ff       	sbrs	r25, 3
    1606:	81 91       	ld	r24, Z+
    1608:	fd 87       	std	Y+13, r31	; 0x0d
    160a:	ec 87       	std	Y+12, r30	; 0x0c
    160c:	88 23       	and	r24, r24
    160e:	09 f0       	breq	.+2      	; 0x1612 <vfprintf+0x11e>
    1610:	b8 cf       	rjmp	.-144    	; 0x1582 <vfprintf+0x8e>
    1612:	98 2f       	mov	r25, r24
    1614:	95 54       	subi	r25, 0x45	; 69
    1616:	93 30       	cpi	r25, 0x03	; 3
    1618:	18 f0       	brcs	.+6      	; 0x1620 <vfprintf+0x12c>
    161a:	90 52       	subi	r25, 0x20	; 32
    161c:	93 30       	cpi	r25, 0x03	; 3
    161e:	38 f4       	brcc	.+14     	; 0x162e <vfprintf+0x13a>
    1620:	24 e0       	ldi	r18, 0x04	; 4
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	a2 0e       	add	r10, r18
    1626:	b3 1e       	adc	r11, r19
    1628:	3f e3       	ldi	r19, 0x3F	; 63
    162a:	39 83       	std	Y+1, r19	; 0x01
    162c:	0f c0       	rjmp	.+30     	; 0x164c <vfprintf+0x158>
    162e:	83 36       	cpi	r24, 0x63	; 99
    1630:	31 f0       	breq	.+12     	; 0x163e <vfprintf+0x14a>
    1632:	83 37       	cpi	r24, 0x73	; 115
    1634:	81 f0       	breq	.+32     	; 0x1656 <vfprintf+0x162>
    1636:	83 35       	cpi	r24, 0x53	; 83
    1638:	09 f0       	breq	.+2      	; 0x163c <vfprintf+0x148>
    163a:	5a c0       	rjmp	.+180    	; 0x16f0 <vfprintf+0x1fc>
    163c:	22 c0       	rjmp	.+68     	; 0x1682 <vfprintf+0x18e>
    163e:	f5 01       	movw	r30, r10
    1640:	80 81       	ld	r24, Z
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	22 e0       	ldi	r18, 0x02	; 2
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	a2 0e       	add	r10, r18
    164a:	b3 1e       	adc	r11, r19
    164c:	21 e0       	ldi	r18, 0x01	; 1
    164e:	c2 2e       	mov	r12, r18
    1650:	d1 2c       	mov	r13, r1
    1652:	42 01       	movw	r8, r4
    1654:	14 c0       	rjmp	.+40     	; 0x167e <vfprintf+0x18a>
    1656:	92 e0       	ldi	r25, 0x02	; 2
    1658:	29 2e       	mov	r2, r25
    165a:	31 2c       	mov	r3, r1
    165c:	2a 0c       	add	r2, r10
    165e:	3b 1c       	adc	r3, r11
    1660:	f5 01       	movw	r30, r10
    1662:	80 80       	ld	r8, Z
    1664:	91 80       	ldd	r9, Z+1	; 0x01
    1666:	16 ff       	sbrs	r17, 6
    1668:	03 c0       	rjmp	.+6      	; 0x1670 <vfprintf+0x17c>
    166a:	6f 2d       	mov	r22, r15
    166c:	70 e0       	ldi	r23, 0x00	; 0
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <vfprintf+0x180>
    1670:	6f ef       	ldi	r22, 0xFF	; 255
    1672:	7f ef       	ldi	r23, 0xFF	; 255
    1674:	c4 01       	movw	r24, r8
    1676:	0e 94 8c 0c 	call	0x1918	; 0x1918 <strnlen>
    167a:	6c 01       	movw	r12, r24
    167c:	51 01       	movw	r10, r2
    167e:	1f 77       	andi	r17, 0x7F	; 127
    1680:	15 c0       	rjmp	.+42     	; 0x16ac <vfprintf+0x1b8>
    1682:	82 e0       	ldi	r24, 0x02	; 2
    1684:	28 2e       	mov	r2, r24
    1686:	31 2c       	mov	r3, r1
    1688:	2a 0c       	add	r2, r10
    168a:	3b 1c       	adc	r3, r11
    168c:	f5 01       	movw	r30, r10
    168e:	80 80       	ld	r8, Z
    1690:	91 80       	ldd	r9, Z+1	; 0x01
    1692:	16 ff       	sbrs	r17, 6
    1694:	03 c0       	rjmp	.+6      	; 0x169c <vfprintf+0x1a8>
    1696:	6f 2d       	mov	r22, r15
    1698:	70 e0       	ldi	r23, 0x00	; 0
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <vfprintf+0x1ac>
    169c:	6f ef       	ldi	r22, 0xFF	; 255
    169e:	7f ef       	ldi	r23, 0xFF	; 255
    16a0:	c4 01       	movw	r24, r8
    16a2:	0e 94 81 0c 	call	0x1902	; 0x1902 <strnlen_P>
    16a6:	6c 01       	movw	r12, r24
    16a8:	10 68       	ori	r17, 0x80	; 128
    16aa:	51 01       	movw	r10, r2
    16ac:	13 fd       	sbrc	r17, 3
    16ae:	1c c0       	rjmp	.+56     	; 0x16e8 <vfprintf+0x1f4>
    16b0:	06 c0       	rjmp	.+12     	; 0x16be <vfprintf+0x1ca>
    16b2:	80 e2       	ldi	r24, 0x20	; 32
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	b3 01       	movw	r22, r6
    16b8:	0e 94 97 0c 	call	0x192e	; 0x192e <fputc>
    16bc:	ea 94       	dec	r14
    16be:	8e 2d       	mov	r24, r14
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	c8 16       	cp	r12, r24
    16c4:	d9 06       	cpc	r13, r25
    16c6:	a8 f3       	brcs	.-22     	; 0x16b2 <vfprintf+0x1be>
    16c8:	0f c0       	rjmp	.+30     	; 0x16e8 <vfprintf+0x1f4>
    16ca:	f4 01       	movw	r30, r8
    16cc:	17 fd       	sbrc	r17, 7
    16ce:	85 91       	lpm	r24, Z+
    16d0:	17 ff       	sbrs	r17, 7
    16d2:	81 91       	ld	r24, Z+
    16d4:	4f 01       	movw	r8, r30
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	b3 01       	movw	r22, r6
    16da:	0e 94 97 0c 	call	0x192e	; 0x192e <fputc>
    16de:	e1 10       	cpse	r14, r1
    16e0:	ea 94       	dec	r14
    16e2:	08 94       	sec
    16e4:	c1 08       	sbc	r12, r1
    16e6:	d1 08       	sbc	r13, r1
    16e8:	c1 14       	cp	r12, r1
    16ea:	d1 04       	cpc	r13, r1
    16ec:	71 f7       	brne	.-36     	; 0x16ca <vfprintf+0x1d6>
    16ee:	e7 c0       	rjmp	.+462    	; 0x18be <vfprintf+0x3ca>
    16f0:	84 36       	cpi	r24, 0x64	; 100
    16f2:	11 f0       	breq	.+4      	; 0x16f8 <vfprintf+0x204>
    16f4:	89 36       	cpi	r24, 0x69	; 105
    16f6:	51 f5       	brne	.+84     	; 0x174c <vfprintf+0x258>
    16f8:	f5 01       	movw	r30, r10
    16fa:	17 ff       	sbrs	r17, 7
    16fc:	07 c0       	rjmp	.+14     	; 0x170c <vfprintf+0x218>
    16fe:	80 81       	ld	r24, Z
    1700:	91 81       	ldd	r25, Z+1	; 0x01
    1702:	a2 81       	ldd	r26, Z+2	; 0x02
    1704:	b3 81       	ldd	r27, Z+3	; 0x03
    1706:	24 e0       	ldi	r18, 0x04	; 4
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	08 c0       	rjmp	.+16     	; 0x171c <vfprintf+0x228>
    170c:	80 81       	ld	r24, Z
    170e:	91 81       	ldd	r25, Z+1	; 0x01
    1710:	aa 27       	eor	r26, r26
    1712:	97 fd       	sbrc	r25, 7
    1714:	a0 95       	com	r26
    1716:	ba 2f       	mov	r27, r26
    1718:	22 e0       	ldi	r18, 0x02	; 2
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	a2 0e       	add	r10, r18
    171e:	b3 1e       	adc	r11, r19
    1720:	01 2f       	mov	r16, r17
    1722:	0f 76       	andi	r16, 0x6F	; 111
    1724:	b7 ff       	sbrs	r27, 7
    1726:	08 c0       	rjmp	.+16     	; 0x1738 <vfprintf+0x244>
    1728:	b0 95       	com	r27
    172a:	a0 95       	com	r26
    172c:	90 95       	com	r25
    172e:	81 95       	neg	r24
    1730:	9f 4f       	sbci	r25, 0xFF	; 255
    1732:	af 4f       	sbci	r26, 0xFF	; 255
    1734:	bf 4f       	sbci	r27, 0xFF	; 255
    1736:	00 68       	ori	r16, 0x80	; 128
    1738:	bc 01       	movw	r22, r24
    173a:	cd 01       	movw	r24, r26
    173c:	a2 01       	movw	r20, r4
    173e:	2a e0       	ldi	r18, 0x0A	; 10
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	0e 94 c3 0c 	call	0x1986	; 0x1986 <__ultoa_invert>
    1746:	d8 2e       	mov	r13, r24
    1748:	d4 18       	sub	r13, r4
    174a:	3f c0       	rjmp	.+126    	; 0x17ca <vfprintf+0x2d6>
    174c:	85 37       	cpi	r24, 0x75	; 117
    174e:	21 f4       	brne	.+8      	; 0x1758 <vfprintf+0x264>
    1750:	1f 7e       	andi	r17, 0xEF	; 239
    1752:	2a e0       	ldi	r18, 0x0A	; 10
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	20 c0       	rjmp	.+64     	; 0x1798 <vfprintf+0x2a4>
    1758:	19 7f       	andi	r17, 0xF9	; 249
    175a:	8f 36       	cpi	r24, 0x6F	; 111
    175c:	a9 f0       	breq	.+42     	; 0x1788 <vfprintf+0x294>
    175e:	80 37       	cpi	r24, 0x70	; 112
    1760:	20 f4       	brcc	.+8      	; 0x176a <vfprintf+0x276>
    1762:	88 35       	cpi	r24, 0x58	; 88
    1764:	09 f0       	breq	.+2      	; 0x1768 <vfprintf+0x274>
    1766:	ae c0       	rjmp	.+348    	; 0x18c4 <vfprintf+0x3d0>
    1768:	0b c0       	rjmp	.+22     	; 0x1780 <vfprintf+0x28c>
    176a:	80 37       	cpi	r24, 0x70	; 112
    176c:	21 f0       	breq	.+8      	; 0x1776 <vfprintf+0x282>
    176e:	88 37       	cpi	r24, 0x78	; 120
    1770:	09 f0       	breq	.+2      	; 0x1774 <vfprintf+0x280>
    1772:	a8 c0       	rjmp	.+336    	; 0x18c4 <vfprintf+0x3d0>
    1774:	01 c0       	rjmp	.+2      	; 0x1778 <vfprintf+0x284>
    1776:	10 61       	ori	r17, 0x10	; 16
    1778:	14 ff       	sbrs	r17, 4
    177a:	09 c0       	rjmp	.+18     	; 0x178e <vfprintf+0x29a>
    177c:	14 60       	ori	r17, 0x04	; 4
    177e:	07 c0       	rjmp	.+14     	; 0x178e <vfprintf+0x29a>
    1780:	14 ff       	sbrs	r17, 4
    1782:	08 c0       	rjmp	.+16     	; 0x1794 <vfprintf+0x2a0>
    1784:	16 60       	ori	r17, 0x06	; 6
    1786:	06 c0       	rjmp	.+12     	; 0x1794 <vfprintf+0x2a0>
    1788:	28 e0       	ldi	r18, 0x08	; 8
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	05 c0       	rjmp	.+10     	; 0x1798 <vfprintf+0x2a4>
    178e:	20 e1       	ldi	r18, 0x10	; 16
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <vfprintf+0x2a4>
    1794:	20 e1       	ldi	r18, 0x10	; 16
    1796:	32 e0       	ldi	r19, 0x02	; 2
    1798:	f5 01       	movw	r30, r10
    179a:	17 ff       	sbrs	r17, 7
    179c:	07 c0       	rjmp	.+14     	; 0x17ac <vfprintf+0x2b8>
    179e:	60 81       	ld	r22, Z
    17a0:	71 81       	ldd	r23, Z+1	; 0x01
    17a2:	82 81       	ldd	r24, Z+2	; 0x02
    17a4:	93 81       	ldd	r25, Z+3	; 0x03
    17a6:	44 e0       	ldi	r20, 0x04	; 4
    17a8:	50 e0       	ldi	r21, 0x00	; 0
    17aa:	06 c0       	rjmp	.+12     	; 0x17b8 <vfprintf+0x2c4>
    17ac:	60 81       	ld	r22, Z
    17ae:	71 81       	ldd	r23, Z+1	; 0x01
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	42 e0       	ldi	r20, 0x02	; 2
    17b6:	50 e0       	ldi	r21, 0x00	; 0
    17b8:	a4 0e       	add	r10, r20
    17ba:	b5 1e       	adc	r11, r21
    17bc:	a2 01       	movw	r20, r4
    17be:	0e 94 c3 0c 	call	0x1986	; 0x1986 <__ultoa_invert>
    17c2:	d8 2e       	mov	r13, r24
    17c4:	d4 18       	sub	r13, r4
    17c6:	01 2f       	mov	r16, r17
    17c8:	0f 77       	andi	r16, 0x7F	; 127
    17ca:	06 ff       	sbrs	r16, 6
    17cc:	09 c0       	rjmp	.+18     	; 0x17e0 <vfprintf+0x2ec>
    17ce:	0e 7f       	andi	r16, 0xFE	; 254
    17d0:	df 14       	cp	r13, r15
    17d2:	30 f4       	brcc	.+12     	; 0x17e0 <vfprintf+0x2ec>
    17d4:	04 ff       	sbrs	r16, 4
    17d6:	06 c0       	rjmp	.+12     	; 0x17e4 <vfprintf+0x2f0>
    17d8:	02 fd       	sbrc	r16, 2
    17da:	04 c0       	rjmp	.+8      	; 0x17e4 <vfprintf+0x2f0>
    17dc:	0f 7e       	andi	r16, 0xEF	; 239
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <vfprintf+0x2f0>
    17e0:	1d 2d       	mov	r17, r13
    17e2:	01 c0       	rjmp	.+2      	; 0x17e6 <vfprintf+0x2f2>
    17e4:	1f 2d       	mov	r17, r15
    17e6:	80 2f       	mov	r24, r16
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	04 ff       	sbrs	r16, 4
    17ec:	0c c0       	rjmp	.+24     	; 0x1806 <vfprintf+0x312>
    17ee:	fe 01       	movw	r30, r28
    17f0:	ed 0d       	add	r30, r13
    17f2:	f1 1d       	adc	r31, r1
    17f4:	20 81       	ld	r18, Z
    17f6:	20 33       	cpi	r18, 0x30	; 48
    17f8:	11 f4       	brne	.+4      	; 0x17fe <vfprintf+0x30a>
    17fa:	09 7e       	andi	r16, 0xE9	; 233
    17fc:	09 c0       	rjmp	.+18     	; 0x1810 <vfprintf+0x31c>
    17fe:	02 ff       	sbrs	r16, 2
    1800:	06 c0       	rjmp	.+12     	; 0x180e <vfprintf+0x31a>
    1802:	1e 5f       	subi	r17, 0xFE	; 254
    1804:	05 c0       	rjmp	.+10     	; 0x1810 <vfprintf+0x31c>
    1806:	86 78       	andi	r24, 0x86	; 134
    1808:	90 70       	andi	r25, 0x00	; 0
    180a:	00 97       	sbiw	r24, 0x00	; 0
    180c:	09 f0       	breq	.+2      	; 0x1810 <vfprintf+0x31c>
    180e:	1f 5f       	subi	r17, 0xFF	; 255
    1810:	80 2e       	mov	r8, r16
    1812:	99 24       	eor	r9, r9
    1814:	03 fd       	sbrc	r16, 3
    1816:	12 c0       	rjmp	.+36     	; 0x183c <vfprintf+0x348>
    1818:	00 ff       	sbrs	r16, 0
    181a:	0d c0       	rjmp	.+26     	; 0x1836 <vfprintf+0x342>
    181c:	fd 2c       	mov	r15, r13
    181e:	1e 15       	cp	r17, r14
    1820:	50 f4       	brcc	.+20     	; 0x1836 <vfprintf+0x342>
    1822:	fe 0c       	add	r15, r14
    1824:	f1 1a       	sub	r15, r17
    1826:	1e 2d       	mov	r17, r14
    1828:	06 c0       	rjmp	.+12     	; 0x1836 <vfprintf+0x342>
    182a:	80 e2       	ldi	r24, 0x20	; 32
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	b3 01       	movw	r22, r6
    1830:	0e 94 97 0c 	call	0x192e	; 0x192e <fputc>
    1834:	1f 5f       	subi	r17, 0xFF	; 255
    1836:	1e 15       	cp	r17, r14
    1838:	c0 f3       	brcs	.-16     	; 0x182a <vfprintf+0x336>
    183a:	04 c0       	rjmp	.+8      	; 0x1844 <vfprintf+0x350>
    183c:	1e 15       	cp	r17, r14
    183e:	10 f4       	brcc	.+4      	; 0x1844 <vfprintf+0x350>
    1840:	e1 1a       	sub	r14, r17
    1842:	01 c0       	rjmp	.+2      	; 0x1846 <vfprintf+0x352>
    1844:	ee 24       	eor	r14, r14
    1846:	84 fe       	sbrs	r8, 4
    1848:	0f c0       	rjmp	.+30     	; 0x1868 <vfprintf+0x374>
    184a:	80 e3       	ldi	r24, 0x30	; 48
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	b3 01       	movw	r22, r6
    1850:	0e 94 97 0c 	call	0x192e	; 0x192e <fputc>
    1854:	82 fe       	sbrs	r8, 2
    1856:	1f c0       	rjmp	.+62     	; 0x1896 <vfprintf+0x3a2>
    1858:	81 fe       	sbrs	r8, 1
    185a:	03 c0       	rjmp	.+6      	; 0x1862 <vfprintf+0x36e>
    185c:	88 e5       	ldi	r24, 0x58	; 88
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	10 c0       	rjmp	.+32     	; 0x1882 <vfprintf+0x38e>
    1862:	88 e7       	ldi	r24, 0x78	; 120
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	0d c0       	rjmp	.+26     	; 0x1882 <vfprintf+0x38e>
    1868:	c4 01       	movw	r24, r8
    186a:	86 78       	andi	r24, 0x86	; 134
    186c:	90 70       	andi	r25, 0x00	; 0
    186e:	00 97       	sbiw	r24, 0x00	; 0
    1870:	91 f0       	breq	.+36     	; 0x1896 <vfprintf+0x3a2>
    1872:	81 fc       	sbrc	r8, 1
    1874:	02 c0       	rjmp	.+4      	; 0x187a <vfprintf+0x386>
    1876:	80 e2       	ldi	r24, 0x20	; 32
    1878:	01 c0       	rjmp	.+2      	; 0x187c <vfprintf+0x388>
    187a:	8b e2       	ldi	r24, 0x2B	; 43
    187c:	07 fd       	sbrc	r16, 7
    187e:	8d e2       	ldi	r24, 0x2D	; 45
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	b3 01       	movw	r22, r6
    1884:	0e 94 97 0c 	call	0x192e	; 0x192e <fputc>
    1888:	06 c0       	rjmp	.+12     	; 0x1896 <vfprintf+0x3a2>
    188a:	80 e3       	ldi	r24, 0x30	; 48
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	b3 01       	movw	r22, r6
    1890:	0e 94 97 0c 	call	0x192e	; 0x192e <fputc>
    1894:	fa 94       	dec	r15
    1896:	df 14       	cp	r13, r15
    1898:	c0 f3       	brcs	.-16     	; 0x188a <vfprintf+0x396>
    189a:	da 94       	dec	r13
    189c:	f2 01       	movw	r30, r4
    189e:	ed 0d       	add	r30, r13
    18a0:	f1 1d       	adc	r31, r1
    18a2:	80 81       	ld	r24, Z
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	b3 01       	movw	r22, r6
    18a8:	0e 94 97 0c 	call	0x192e	; 0x192e <fputc>
    18ac:	dd 20       	and	r13, r13
    18ae:	a9 f7       	brne	.-22     	; 0x189a <vfprintf+0x3a6>
    18b0:	06 c0       	rjmp	.+12     	; 0x18be <vfprintf+0x3ca>
    18b2:	80 e2       	ldi	r24, 0x20	; 32
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	b3 01       	movw	r22, r6
    18b8:	0e 94 97 0c 	call	0x192e	; 0x192e <fputc>
    18bc:	ea 94       	dec	r14
    18be:	ee 20       	and	r14, r14
    18c0:	c1 f7       	brne	.-16     	; 0x18b2 <vfprintf+0x3be>
    18c2:	40 ce       	rjmp	.-896    	; 0x1544 <vfprintf+0x50>
    18c4:	f3 01       	movw	r30, r6
    18c6:	86 81       	ldd	r24, Z+6	; 0x06
    18c8:	97 81       	ldd	r25, Z+7	; 0x07
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <vfprintf+0x3dc>
    18cc:	8f ef       	ldi	r24, 0xFF	; 255
    18ce:	9f ef       	ldi	r25, 0xFF	; 255
    18d0:	2d 96       	adiw	r28, 0x0d	; 13
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	f8 94       	cli
    18d6:	de bf       	out	0x3e, r29	; 62
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	cd bf       	out	0x3d, r28	; 61
    18dc:	df 91       	pop	r29
    18de:	cf 91       	pop	r28
    18e0:	1f 91       	pop	r17
    18e2:	0f 91       	pop	r16
    18e4:	ff 90       	pop	r15
    18e6:	ef 90       	pop	r14
    18e8:	df 90       	pop	r13
    18ea:	cf 90       	pop	r12
    18ec:	bf 90       	pop	r11
    18ee:	af 90       	pop	r10
    18f0:	9f 90       	pop	r9
    18f2:	8f 90       	pop	r8
    18f4:	7f 90       	pop	r7
    18f6:	6f 90       	pop	r6
    18f8:	5f 90       	pop	r5
    18fa:	4f 90       	pop	r4
    18fc:	3f 90       	pop	r3
    18fe:	2f 90       	pop	r2
    1900:	08 95       	ret

00001902 <strnlen_P>:
    1902:	fc 01       	movw	r30, r24
    1904:	05 90       	lpm	r0, Z+
    1906:	61 50       	subi	r22, 0x01	; 1
    1908:	70 40       	sbci	r23, 0x00	; 0
    190a:	01 10       	cpse	r0, r1
    190c:	d8 f7       	brcc	.-10     	; 0x1904 <strnlen_P+0x2>
    190e:	80 95       	com	r24
    1910:	90 95       	com	r25
    1912:	8e 0f       	add	r24, r30
    1914:	9f 1f       	adc	r25, r31
    1916:	08 95       	ret

00001918 <strnlen>:
    1918:	fc 01       	movw	r30, r24
    191a:	61 50       	subi	r22, 0x01	; 1
    191c:	70 40       	sbci	r23, 0x00	; 0
    191e:	01 90       	ld	r0, Z+
    1920:	01 10       	cpse	r0, r1
    1922:	d8 f7       	brcc	.-10     	; 0x191a <strnlen+0x2>
    1924:	80 95       	com	r24
    1926:	90 95       	com	r25
    1928:	8e 0f       	add	r24, r30
    192a:	9f 1f       	adc	r25, r31
    192c:	08 95       	ret

0000192e <fputc>:
    192e:	0f 93       	push	r16
    1930:	1f 93       	push	r17
    1932:	cf 93       	push	r28
    1934:	df 93       	push	r29
    1936:	8c 01       	movw	r16, r24
    1938:	eb 01       	movw	r28, r22
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	81 ff       	sbrs	r24, 1
    193e:	1b c0       	rjmp	.+54     	; 0x1976 <fputc+0x48>
    1940:	82 ff       	sbrs	r24, 2
    1942:	0d c0       	rjmp	.+26     	; 0x195e <fputc+0x30>
    1944:	2e 81       	ldd	r18, Y+6	; 0x06
    1946:	3f 81       	ldd	r19, Y+7	; 0x07
    1948:	8c 81       	ldd	r24, Y+4	; 0x04
    194a:	9d 81       	ldd	r25, Y+5	; 0x05
    194c:	28 17       	cp	r18, r24
    194e:	39 07       	cpc	r19, r25
    1950:	64 f4       	brge	.+24     	; 0x196a <fputc+0x3c>
    1952:	e8 81       	ld	r30, Y
    1954:	f9 81       	ldd	r31, Y+1	; 0x01
    1956:	01 93       	st	Z+, r16
    1958:	f9 83       	std	Y+1, r31	; 0x01
    195a:	e8 83       	st	Y, r30
    195c:	06 c0       	rjmp	.+12     	; 0x196a <fputc+0x3c>
    195e:	e8 85       	ldd	r30, Y+8	; 0x08
    1960:	f9 85       	ldd	r31, Y+9	; 0x09
    1962:	80 2f       	mov	r24, r16
    1964:	09 95       	icall
    1966:	00 97       	sbiw	r24, 0x00	; 0
    1968:	31 f4       	brne	.+12     	; 0x1976 <fputc+0x48>
    196a:	8e 81       	ldd	r24, Y+6	; 0x06
    196c:	9f 81       	ldd	r25, Y+7	; 0x07
    196e:	01 96       	adiw	r24, 0x01	; 1
    1970:	9f 83       	std	Y+7, r25	; 0x07
    1972:	8e 83       	std	Y+6, r24	; 0x06
    1974:	02 c0       	rjmp	.+4      	; 0x197a <fputc+0x4c>
    1976:	0f ef       	ldi	r16, 0xFF	; 255
    1978:	1f ef       	ldi	r17, 0xFF	; 255
    197a:	c8 01       	movw	r24, r16
    197c:	df 91       	pop	r29
    197e:	cf 91       	pop	r28
    1980:	1f 91       	pop	r17
    1982:	0f 91       	pop	r16
    1984:	08 95       	ret

00001986 <__ultoa_invert>:
    1986:	fa 01       	movw	r30, r20
    1988:	aa 27       	eor	r26, r26
    198a:	28 30       	cpi	r18, 0x08	; 8
    198c:	51 f1       	breq	.+84     	; 0x19e2 <__ultoa_invert+0x5c>
    198e:	20 31       	cpi	r18, 0x10	; 16
    1990:	81 f1       	breq	.+96     	; 0x19f2 <__ultoa_invert+0x6c>
    1992:	e8 94       	clt
    1994:	6f 93       	push	r22
    1996:	6e 7f       	andi	r22, 0xFE	; 254
    1998:	6e 5f       	subi	r22, 0xFE	; 254
    199a:	7f 4f       	sbci	r23, 0xFF	; 255
    199c:	8f 4f       	sbci	r24, 0xFF	; 255
    199e:	9f 4f       	sbci	r25, 0xFF	; 255
    19a0:	af 4f       	sbci	r26, 0xFF	; 255
    19a2:	b1 e0       	ldi	r27, 0x01	; 1
    19a4:	3e d0       	rcall	.+124    	; 0x1a22 <__ultoa_invert+0x9c>
    19a6:	b4 e0       	ldi	r27, 0x04	; 4
    19a8:	3c d0       	rcall	.+120    	; 0x1a22 <__ultoa_invert+0x9c>
    19aa:	67 0f       	add	r22, r23
    19ac:	78 1f       	adc	r23, r24
    19ae:	89 1f       	adc	r24, r25
    19b0:	9a 1f       	adc	r25, r26
    19b2:	a1 1d       	adc	r26, r1
    19b4:	68 0f       	add	r22, r24
    19b6:	79 1f       	adc	r23, r25
    19b8:	8a 1f       	adc	r24, r26
    19ba:	91 1d       	adc	r25, r1
    19bc:	a1 1d       	adc	r26, r1
    19be:	6a 0f       	add	r22, r26
    19c0:	71 1d       	adc	r23, r1
    19c2:	81 1d       	adc	r24, r1
    19c4:	91 1d       	adc	r25, r1
    19c6:	a1 1d       	adc	r26, r1
    19c8:	20 d0       	rcall	.+64     	; 0x1a0a <__ultoa_invert+0x84>
    19ca:	09 f4       	brne	.+2      	; 0x19ce <__ultoa_invert+0x48>
    19cc:	68 94       	set
    19ce:	3f 91       	pop	r19
    19d0:	2a e0       	ldi	r18, 0x0A	; 10
    19d2:	26 9f       	mul	r18, r22
    19d4:	11 24       	eor	r1, r1
    19d6:	30 19       	sub	r19, r0
    19d8:	30 5d       	subi	r19, 0xD0	; 208
    19da:	31 93       	st	Z+, r19
    19dc:	de f6       	brtc	.-74     	; 0x1994 <__ultoa_invert+0xe>
    19de:	cf 01       	movw	r24, r30
    19e0:	08 95       	ret
    19e2:	46 2f       	mov	r20, r22
    19e4:	47 70       	andi	r20, 0x07	; 7
    19e6:	40 5d       	subi	r20, 0xD0	; 208
    19e8:	41 93       	st	Z+, r20
    19ea:	b3 e0       	ldi	r27, 0x03	; 3
    19ec:	0f d0       	rcall	.+30     	; 0x1a0c <__ultoa_invert+0x86>
    19ee:	c9 f7       	brne	.-14     	; 0x19e2 <__ultoa_invert+0x5c>
    19f0:	f6 cf       	rjmp	.-20     	; 0x19de <__ultoa_invert+0x58>
    19f2:	46 2f       	mov	r20, r22
    19f4:	4f 70       	andi	r20, 0x0F	; 15
    19f6:	40 5d       	subi	r20, 0xD0	; 208
    19f8:	4a 33       	cpi	r20, 0x3A	; 58
    19fa:	18 f0       	brcs	.+6      	; 0x1a02 <__ultoa_invert+0x7c>
    19fc:	49 5d       	subi	r20, 0xD9	; 217
    19fe:	31 fd       	sbrc	r19, 1
    1a00:	40 52       	subi	r20, 0x20	; 32
    1a02:	41 93       	st	Z+, r20
    1a04:	02 d0       	rcall	.+4      	; 0x1a0a <__ultoa_invert+0x84>
    1a06:	a9 f7       	brne	.-22     	; 0x19f2 <__ultoa_invert+0x6c>
    1a08:	ea cf       	rjmp	.-44     	; 0x19de <__ultoa_invert+0x58>
    1a0a:	b4 e0       	ldi	r27, 0x04	; 4
    1a0c:	a6 95       	lsr	r26
    1a0e:	97 95       	ror	r25
    1a10:	87 95       	ror	r24
    1a12:	77 95       	ror	r23
    1a14:	67 95       	ror	r22
    1a16:	ba 95       	dec	r27
    1a18:	c9 f7       	brne	.-14     	; 0x1a0c <__ultoa_invert+0x86>
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	61 05       	cpc	r22, r1
    1a1e:	71 05       	cpc	r23, r1
    1a20:	08 95       	ret
    1a22:	9b 01       	movw	r18, r22
    1a24:	ac 01       	movw	r20, r24
    1a26:	0a 2e       	mov	r0, r26
    1a28:	06 94       	lsr	r0
    1a2a:	57 95       	ror	r21
    1a2c:	47 95       	ror	r20
    1a2e:	37 95       	ror	r19
    1a30:	27 95       	ror	r18
    1a32:	ba 95       	dec	r27
    1a34:	c9 f7       	brne	.-14     	; 0x1a28 <__ultoa_invert+0xa2>
    1a36:	62 0f       	add	r22, r18
    1a38:	73 1f       	adc	r23, r19
    1a3a:	84 1f       	adc	r24, r20
    1a3c:	95 1f       	adc	r25, r21
    1a3e:	a0 1d       	adc	r26, r0
    1a40:	08 95       	ret

00001a42 <_exit>:
    1a42:	f8 94       	cli

00001a44 <__stop_program>:
    1a44:	ff cf       	rjmp	.-2      	; 0x1a44 <__stop_program>
