
SMR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000120  00800100  00001e8c  00001f20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008d  00800220  00800220  00002040  2**0
                  ALLOC
  3 .stab         00000f0c  00000000  00000000  00002040  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000027e  00000000  00000000  00002f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000248  00000000  00000000  000031d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003780  00000000  00000000  00003418  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001168  00000000  00000000  00006b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000174e  00000000  00000000  00007d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b40  00000000  00000000  00009450  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001076  00000000  00000000  00009f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002611  00000000  00000000  0000b006  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000d617  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e8       	ldi	r30, 0x8C	; 140
      a0:	fe e1       	ldi	r31, 0x1E	; 30
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 32       	cpi	r26, 0x20	; 32
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	a0 e2       	ldi	r26, 0x20	; 32
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ad 3a       	cpi	r26, 0xAD	; 173
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <main>
      c6:	0c 94 44 0f 	jmp	0x1e88	; 0x1e88 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <KEYPAD_Check>:
//uint8_t ascii_code[4][4]={16,15,14,13,
						  //12,9,6,3,
						  //10,8,5,2,
						  //11,7,4,1};

uint8_t KEYPAD_Check() {
      ce:	af 92       	push	r10
      d0:	bf 92       	push	r11
      d2:	cf 92       	push	r12
      d4:	df 92       	push	r13
      d6:	ef 92       	push	r14
      d8:	ff 92       	push	r15
      da:	0f 93       	push	r16
      dc:	1f 93       	push	r17
      de:	cf 93       	push	r28
      e0:	df 93       	push	r29
      e2:	20 e0       	ldi	r18, 0x00	; 0
      e4:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
      e6:	41 e0       	ldi	r20, 0x01	; 1
      e8:	50 e0       	ldi	r21, 0x00	; 0
      ea:	e2 e6       	ldi	r30, 0x62	; 98
      ec:	f0 e0       	ldi	r31, 0x00	; 0
		_delay_us(10);
		keyin=KEYPAD_PIN & 0x0F;
		if (keyin!=0x0F)
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
      ee:	a0 e1       	ldi	r26, 0x10	; 16
      f0:	b1 e0       	ldi	r27, 0x01	; 1
      f2:	0f 2e       	mov	r0, r31
      f4:	f1 e1       	ldi	r31, 0x11	; 17
      f6:	af 2e       	mov	r10, r31
      f8:	f1 e0       	ldi	r31, 0x01	; 1
      fa:	bf 2e       	mov	r11, r31
      fc:	f0 2d       	mov	r31, r0
      fe:	02 e1       	ldi	r16, 0x12	; 18
     100:	11 e0       	ldi	r17, 0x01	; 1
     102:	0f 2e       	mov	r0, r31
     104:	f3 e1       	ldi	r31, 0x13	; 19
     106:	ef 2e       	mov	r14, r31
     108:	f1 e0       	ldi	r31, 0x01	; 1
     10a:	ff 2e       	mov	r15, r31
     10c:	f0 2d       	mov	r31, r0
						  //11,7,4,1};

uint8_t KEYPAD_Check() {
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     10e:	b9 01       	movw	r22, r18
//uint8_t ascii_code[4][4]={16,15,14,13,
						  //12,9,6,3,
						  //10,8,5,2,
						  //11,7,4,1};

uint8_t KEYPAD_Check() {
     110:	c9 01       	movw	r24, r18
     112:	04 96       	adiw	r24, 0x04	; 4
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     114:	6a 01       	movw	r12, r20
     116:	02 c0       	rjmp	.+4      	; 0x11c <KEYPAD_Check+0x4e>
     118:	cc 0c       	add	r12, r12
     11a:	dd 1c       	adc	r13, r13
     11c:	8a 95       	dec	r24
     11e:	e2 f7       	brpl	.-8      	; 0x118 <KEYPAD_Check+0x4a>
     120:	c6 01       	movw	r24, r12
     122:	80 95       	com	r24
     124:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     126:	83 e0       	ldi	r24, 0x03	; 3
     128:	8a 95       	dec	r24
     12a:	f1 f7       	brne	.-4      	; 0x128 <KEYPAD_Check+0x5a>
     12c:	00 00       	nop
		_delay_us(10);
		keyin=KEYPAD_PIN & 0x0F;
     12e:	80 b1       	in	r24, 0x00	; 0
     130:	8f 70       	andi	r24, 0x0F	; 15
		if (keyin!=0x0F)
     132:	8f 30       	cpi	r24, 0x0F	; 15
     134:	29 f1       	breq	.+74     	; 0x180 <KEYPAD_Check+0xb2>
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
     136:	9c 91       	ld	r25, X
     138:	98 17       	cp	r25, r24
     13a:	a9 f0       	breq	.+42     	; 0x166 <KEYPAD_Check+0x98>
     13c:	e5 01       	movw	r28, r10
     13e:	98 81       	ld	r25, Y
     140:	98 17       	cp	r25, r24
     142:	59 f0       	breq	.+22     	; 0x15a <KEYPAD_Check+0x8c>
     144:	e8 01       	movw	r28, r16
     146:	98 81       	ld	r25, Y
     148:	98 17       	cp	r25, r24
     14a:	51 f0       	breq	.+20     	; 0x160 <KEYPAD_Check+0x92>
     14c:	e7 01       	movw	r28, r14
     14e:	98 81       	ld	r25, Y
     150:	98 17       	cp	r25, r24
     152:	b1 f4       	brne	.+44     	; 0x180 <KEYPAD_Check+0xb2>
     154:	e3 e0       	ldi	r30, 0x03	; 3
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	08 c0       	rjmp	.+16     	; 0x16a <KEYPAD_Check+0x9c>
     15a:	e1 e0       	ldi	r30, 0x01	; 1
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	05 c0       	rjmp	.+10     	; 0x16a <KEYPAD_Check+0x9c>
     160:	e2 e0       	ldi	r30, 0x02	; 2
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	02 c0       	rjmp	.+4      	; 0x16a <KEYPAD_Check+0x9c>
     166:	e0 e0       	ldi	r30, 0x00	; 0
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	ee 0f       	add	r30, r30
     16c:	ff 1f       	adc	r31, r31
     16e:	ee 0f       	add	r30, r30
     170:	ff 1f       	adc	r31, r31
     172:	6e 0f       	add	r22, r30
     174:	7f 1f       	adc	r23, r31
     176:	fb 01       	movw	r30, r22
     178:	e0 50       	subi	r30, 0x00	; 0
     17a:	ff 4f       	sbci	r31, 0xFF	; 255
     17c:	80 81       	ld	r24, Z
     17e:	06 c0       	rjmp	.+12     	; 0x18c <KEYPAD_Check+0xbe>
     180:	2f 5f       	subi	r18, 0xFF	; 255
     182:	3f 4f       	sbci	r19, 0xFF	; 255
						  //10,8,5,2,
						  //11,7,4,1};

uint8_t KEYPAD_Check() {
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
     184:	24 30       	cpi	r18, 0x04	; 4
     186:	31 05       	cpc	r19, r1
     188:	11 f6       	brne	.-124    	; 0x10e <KEYPAD_Check+0x40>
		keyin=KEYPAD_PIN & 0x0F;
		if (keyin!=0x0F)
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
	}
	return 0;
     18a:	80 e0       	ldi	r24, 0x00	; 0
}
     18c:	df 91       	pop	r29
     18e:	cf 91       	pop	r28
     190:	1f 91       	pop	r17
     192:	0f 91       	pop	r16
     194:	ff 90       	pop	r15
     196:	ef 90       	pop	r14
     198:	df 90       	pop	r13
     19a:	cf 90       	pop	r12
     19c:	bf 90       	pop	r11
     19e:	af 90       	pop	r10
     1a0:	08 95       	ret

000001a2 <KEYPAD_Init>:

void KEYPAD_Init()
{
	//Khai bao huong cho cac chan ket noi keypad
	KEYPAD_DDR=0xF0;
     1a2:	80 ef       	ldi	r24, 0xF0	; 240
     1a4:	80 93 61 00 	sts	0x0061, r24
	KEYPAD_PORT=0x0F;
     1a8:	8f e0       	ldi	r24, 0x0F	; 15
     1aa:	80 93 62 00 	sts	0x0062, r24
     1ae:	08 95       	ret

000001b0 <LCDBusyLoop>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1b0:	8f ec       	ldi	r24, 0xCF	; 207
     1b2:	97 e0       	ldi	r25, 0x07	; 7
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	f1 f7       	brne	.-4      	; 0x1b4 <LCDBusyLoop+0x4>
     1b8:	00 c0       	rjmp	.+0      	; 0x1ba <LCDBusyLoop+0xa>
     1ba:	00 00       	nop
}

void LCDBusyLoop()
{
	_delay_ms(8);
}
     1bc:	08 95       	ret

000001be <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
     1be:	28 2f       	mov	r18, r24
     1c0:	22 95       	swap	r18
     1c2:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
     1c4:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
     1c6:	66 23       	and	r22, r22
     1c8:	11 f4       	brne	.+4      	; 0x1ce <LCDByte+0x10>
CLEAR_RS();
     1ca:	d8 98       	cbi	0x1b, 0	; 27
     1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <LCDByte+0x12>
else
SET_RS();
     1ce:	d8 9a       	sbi	0x1b, 0	; 27

//_delay_ms(0.500);		//tAS

SET_E();
     1d0:	d9 9a       	sbi	0x1b, 1	; 27

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
     1d2:	9b b3       	in	r25, 0x1b	; 27
     1d4:	22 0f       	add	r18, r18
     1d6:	22 0f       	add	r18, r18
     1d8:	93 7c       	andi	r25, 0xC3	; 195
     1da:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
     1dc:	9b bb       	out	0x1b, r25	; 27

//_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
     1de:	d9 98       	cbi	0x1b, 1	; 27

//_delay_us(1);

//Send the lower nibble
SET_E();
     1e0:	d9 9a       	sbi	0x1b, 1	; 27

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
     1e2:	9b b3       	in	r25, 0x1b	; 27
     1e4:	88 0f       	add	r24, r24
     1e6:	88 0f       	add	r24, r24
     1e8:	93 7c       	andi	r25, 0xC3	; 195
     1ea:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     1ec:	8b bb       	out	0x1b, r24	; 27

//_delay_us(1);			//tEH

//SEND

CLEAR_E();
     1ee:	d9 98       	cbi	0x1b, 1	; 27

//_delay_us(1);			//tEL

LCDBusyLoop();
     1f0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCDBusyLoop>
}
     1f4:	08 95       	ret

000001f6 <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
     1f6:	0f 93       	push	r16
     1f8:	1f 93       	push	r17
     1fa:	cf 93       	push	r28
     1fc:	df 93       	push	r29
     1fe:	8c 01       	movw	r16, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     200:	fc 01       	movw	r30, r24
     202:	80 81       	ld	r24, Z
     204:	88 23       	and	r24, r24
     206:	09 f1       	breq	.+66     	; 0x24a <LCDWriteString+0x54>
 {
 	//Custom Char Support
	if(*msg=='%')
     208:	85 32       	cpi	r24, 0x25	; 37
     20a:	a9 f4       	brne	.+42     	; 0x236 <LCDWriteString+0x40>
	{
		msg++;
     20c:	e8 01       	movw	r28, r16
     20e:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
     210:	f8 01       	movw	r30, r16
     212:	81 81       	ldd	r24, Z+1	; 0x01
     214:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
     216:	88 30       	cpi	r24, 0x08	; 8
     218:	20 f4       	brcc	.+8      	; 0x222 <LCDWriteString+0x2c>
		{
			LCDData(cc);
     21a:	61 e0       	ldi	r22, 0x01	; 1
     21c:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
     220:	0e c0       	rjmp	.+28     	; 0x23e <LCDWriteString+0x48>
		}
		else
		{
			LCDData('%');
     222:	85 e2       	ldi	r24, 0x25	; 37
     224:	61 e0       	ldi	r22, 0x01	; 1
     226:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
			LCDData(*msg);
     22a:	f8 01       	movw	r30, r16
     22c:	81 81       	ldd	r24, Z+1	; 0x01
     22e:	61 e0       	ldi	r22, 0x01	; 1
     230:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
     234:	04 c0       	rjmp	.+8      	; 0x23e <LCDWriteString+0x48>
		}
	}
	else
	{
		LCDData(*msg);
     236:	61 e0       	ldi	r22, 0x01	; 1
     238:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
     23c:	e8 01       	movw	r28, r16
	}
	msg++;
     23e:	8e 01       	movw	r16, r28
     240:	0f 5f       	subi	r16, 0xFF	; 255
     242:	1f 4f       	sbci	r17, 0xFF	; 255
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     244:	89 81       	ldd	r24, Y+1	; 0x01
     246:	88 23       	and	r24, r24
     248:	f9 f6       	brne	.-66     	; 0x208 <LCDWriteString+0x12>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	1f 91       	pop	r17
     250:	0f 91       	pop	r16
     252:	08 95       	ret

00000254 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     254:	ef 92       	push	r14
     256:	ff 92       	push	r15
     258:	0f 93       	push	r16
     25a:	1f 93       	push	r17
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	00 d0       	rcall	.+0      	; 0x262 <LCDWriteInt+0xe>
     262:	00 d0       	rcall	.+0      	; 0x264 <LCDWriteInt+0x10>
     264:	0f 92       	push	r0
     266:	cd b7       	in	r28, 0x3d	; 61
     268:	de b7       	in	r29, 0x3e	; 62
     26a:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     26c:	fe 01       	movw	r30, r28
     26e:	31 96       	adiw	r30, 0x01	; 1
     270:	25 e0       	ldi	r18, 0x05	; 5
     272:	df 01       	movw	r26, r30
     274:	1d 92       	st	X+, r1
     276:	2a 95       	dec	r18
     278:	e9 f7       	brne	.-6      	; 0x274 <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
     27a:	00 97       	sbiw	r24, 0x00	; 0
     27c:	61 f0       	breq	.+24     	; 0x296 <LCDWriteInt+0x42>
     27e:	fe 01       	movw	r30, r28
     280:	36 96       	adiw	r30, 0x06	; 6
	{
	str[i]=val%10;
     282:	2a e0       	ldi	r18, 0x0A	; 10
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	b9 01       	movw	r22, r18
     288:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__divmodhi4>
     28c:	82 93       	st	-Z, r24
	val=val/10;
     28e:	86 2f       	mov	r24, r22
     290:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     292:	00 97       	sbiw	r24, 0x00	; 0
     294:	c1 f7       	brne	.-16     	; 0x286 <LCDWriteInt+0x32>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     296:	bf ef       	ldi	r27, 0xFF	; 255
     298:	eb 16       	cp	r14, r27
     29a:	bf ef       	ldi	r27, 0xFF	; 255
     29c:	fb 06       	cpc	r15, r27
     29e:	69 f4       	brne	.+26     	; 0x2ba <LCDWriteInt+0x66>
		while(str[j]==0) j++;
     2a0:	29 81       	ldd	r18, Y+1	; 0x01
     2a2:	22 23       	and	r18, r18
     2a4:	79 f4       	brne	.+30     	; 0x2c4 <LCDWriteInt+0x70>
     2a6:	fe 01       	movw	r30, r28
     2a8:	32 96       	adiw	r30, 0x02	; 2
     2aa:	00 e0       	ldi	r16, 0x00	; 0
     2ac:	10 e0       	ldi	r17, 0x00	; 0
     2ae:	0f 5f       	subi	r16, 0xFF	; 255
     2b0:	1f 4f       	sbci	r17, 0xFF	; 255
     2b2:	21 91       	ld	r18, Z+
     2b4:	22 23       	and	r18, r18
     2b6:	d9 f3       	breq	.-10     	; 0x2ae <LCDWriteInt+0x5a>
     2b8:	07 c0       	rjmp	.+14     	; 0x2c8 <LCDWriteInt+0x74>
	else
		j=5-field_length;
     2ba:	05 e0       	ldi	r16, 0x05	; 5
     2bc:	10 e0       	ldi	r17, 0x00	; 0
     2be:	0e 19       	sub	r16, r14
     2c0:	1f 09       	sbc	r17, r15
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <LCDWriteInt+0x74>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
     2c4:	00 e0       	ldi	r16, 0x00	; 0
     2c6:	10 e0       	ldi	r17, 0x00	; 0
	else
		j=5-field_length;

	if(val<0) LCDData('-');
     2c8:	99 23       	and	r25, r25
     2ca:	24 f4       	brge	.+8      	; 0x2d4 <LCDWriteInt+0x80>
     2cc:	8d e2       	ldi	r24, 0x2D	; 45
     2ce:	61 e0       	ldi	r22, 0x01	; 1
     2d0:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
	for(i=j;i<5;i++)
     2d4:	05 30       	cpi	r16, 0x05	; 5
     2d6:	11 05       	cpc	r17, r1
     2d8:	bc f4       	brge	.+46     	; 0x308 <LCDWriteInt+0xb4>
	}
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
     2da:	e1 e0       	ldi	r30, 0x01	; 1
     2dc:	f0 e0       	ldi	r31, 0x00	; 0
     2de:	ec 0f       	add	r30, r28
     2e0:	fd 1f       	adc	r31, r29
     2e2:	0e 0f       	add	r16, r30
     2e4:	1f 1f       	adc	r17, r31
     2e6:	0f 2e       	mov	r0, r31
     2e8:	f6 e0       	ldi	r31, 0x06	; 6
     2ea:	ef 2e       	mov	r14, r31
     2ec:	ff 24       	eor	r15, r15
     2ee:	f0 2d       	mov	r31, r0
     2f0:	ec 0e       	add	r14, r28
     2f2:	fd 1e       	adc	r15, r29
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     2f4:	d8 01       	movw	r26, r16
     2f6:	8d 91       	ld	r24, X+
     2f8:	8d 01       	movw	r16, r26
     2fa:	80 5d       	subi	r24, 0xD0	; 208
     2fc:	61 e0       	ldi	r22, 0x01	; 1
     2fe:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     302:	0e 15       	cp	r16, r14
     304:	1f 05       	cpc	r17, r15
     306:	b1 f7       	brne	.-20     	; 0x2f4 <LCDWriteInt+0xa0>
	{
	LCDData(48+str[i]);
	}
}
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	0f 90       	pop	r0
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	1f 91       	pop	r17
     318:	0f 91       	pop	r16
     31a:	ff 90       	pop	r15
     31c:	ef 90       	pop	r14
     31e:	08 95       	ret

00000320 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
     320:	84 31       	cpi	r24, 0x14	; 20
     322:	78 f4       	brcc	.+30     	; 0x342 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
     324:	62 30       	cpi	r22, 0x02	; 2
     326:	31 f0       	breq	.+12     	; 0x334 <LCDGotoXY+0x14>
     328:	63 30       	cpi	r22, 0x03	; 3
     32a:	31 f0       	breq	.+12     	; 0x338 <LCDGotoXY+0x18>
     32c:	61 30       	cpi	r22, 0x01	; 1
     32e:	29 f4       	brne	.+10     	; 0x33a <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
     330:	80 64       	ori	r24, 0x40	; 64
			break;
     332:	03 c0       	rjmp	.+6      	; 0x33a <LCDGotoXY+0x1a>
		case 2:
			x+=0x14;
     334:	8c 5e       	subi	r24, 0xEC	; 236
			break;
     336:	01 c0       	rjmp	.+2      	; 0x33a <LCDGotoXY+0x1a>
		case 3:
			x+=0x54;
     338:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
     33a:	80 68       	ori	r24, 0x80	; 128
     33c:	60 e0       	ldi	r22, 0x00	; 0
     33e:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
     342:	08 95       	ret

00000344 <LCDInit>:
{
	_delay_ms(8);
}

void LCDInit(uint8_t style)
{
     344:	0f 93       	push	r16
     346:	1f 93       	push	r17
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	c8 2f       	mov	r28, r24
     34e:	8b e4       	ldi	r24, 0x4B	; 75
     350:	9d e1       	ldi	r25, 0x1D	; 29
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	f1 f7       	brne	.-4      	; 0x352 <LCDInit+0xe>
     356:	00 c0       	rjmp	.+0      	; 0x358 <LCDInit+0x14>
     358:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
     35a:	8a b3       	in	r24, 0x1a	; 26
     35c:	8c 63       	ori	r24, 0x3C	; 60
     35e:	8a bb       	out	0x1a, r24	; 26
	LCD_E_DDR|=(1<<LCD_E_POS);
     360:	d1 9a       	sbi	0x1a, 1	; 26
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     362:	d0 9a       	sbi	0x1a, 0	; 26

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
     364:	8b b3       	in	r24, 0x1b	; 27
     366:	83 7c       	andi	r24, 0xC3	; 195
     368:	8b bb       	out	0x1b, r24	; 27
	CLEAR_E();
     36a:	d9 98       	cbi	0x1b, 1	; 27
	CLEAR_RS();
     36c:	d8 98       	cbi	0x1b, 0	; 27

	//Set 4-bit mode
	//_delay_us(0.3);	//tAS

	SET_E();
     36e:	d9 9a       	sbi	0x1b, 1	; 27
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     370:	db 9a       	sbi	0x1b, 3	; 27
	//_delay_us(1);
	CLEAR_E();
     372:	d9 98       	cbi	0x1b, 1	; 27
	//_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     374:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     378:	8c 2f       	mov	r24, r28
     37a:	8c 60       	ori	r24, 0x0C	; 12
     37c:	60 e0       	ldi	r22, 0x00	; 0
     37e:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     382:	88 e2       	ldi	r24, 0x28	; 40
     384:	60 e0       	ldi	r22, 0x00	; 0
     386:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
     38a:	80 e4       	ldi	r24, 0x40	; 64
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
     392:	c4 e1       	ldi	r28, 0x14	; 20
     394:	d1 e0       	ldi	r29, 0x01	; 1
void LCDBusyLoop()
{
	_delay_ms(8);
}

void LCDInit(uint8_t style)
     396:	04 e5       	ldi	r16, 0x54	; 84
     398:	11 e0       	ldi	r17, 0x01	; 1
	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
     39a:	89 91       	ld	r24, Y+
     39c:	61 e0       	ldi	r22, 0x01	; 1
     39e:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
     3a2:	c0 17       	cp	r28, r16
     3a4:	d1 07       	cpc	r29, r17
     3a6:	c9 f7       	brne	.-14     	; 0x39a <LCDInit+0x56>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	0e 94 90 01 	call	0x320	; 0x320 <LCDGotoXY>

}
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	1f 91       	pop	r17
     3b6:	0f 91       	pop	r16
     3b8:	08 95       	ret

000003ba <sMRIfaceKEYPAD_checkpress>:

static uint8_t nrf24l01_addr5[NRF24L01_ADDRSIZE] = NRF24L01_ADDRP5;
static uint8_t nrf24l01_addrtx[NRF24L01_ADDRSIZE] = NRF24L01_ADDRTX;

sc_integer sMRIfaceKEYPAD_checkpress() {
	return KEYPAD_Check();
     3ba:	0e 94 67 00 	call	0xce	; 0xce <KEYPAD_Check>
}
     3be:	68 2f       	mov	r22, r24
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	08 95       	ret

000003c8 <sMRIfaceKEYPAD_init>:
void sMRIfaceKEYPAD_init() {
	KEYPAD_Init();
     3c8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <KEYPAD_Init>
}
     3cc:	08 95       	ret

000003ce <sMRIfaceLCD_writeString>:

void sMRIfaceLCD_writeString(const sc_string chr) {
	LCDWriteString(chr);
     3ce:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDWriteString>
}
     3d2:	08 95       	ret

000003d4 <sMRIfaceLCD_writeStringXY>:
void sMRIfaceLCD_writeStringXY(const sc_string chr, const sc_integer x, const sc_integer y) {
     3d4:	0f 93       	push	r16
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	ec 01       	movw	r28, r24
     3dc:	84 2f       	mov	r24, r20
     3de:	60 2f       	mov	r22, r16
	LCDWriteStringXY(x,y,chr);
     3e0:	0e 94 90 01 	call	0x320	; 0x320 <LCDGotoXY>
     3e4:	ce 01       	movw	r24, r28
     3e6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDWriteString>
}
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	0f 91       	pop	r16
     3f0:	08 95       	ret

000003f2 <sMRIfaceLCD_writeNumberXY>:
void sMRIfaceLCD_writeNumberXY(const sc_integer num, const sc_integer x, const sc_integer y, const sc_integer l) {
     3f2:	4f 92       	push	r4
     3f4:	5f 92       	push	r5
     3f6:	6f 92       	push	r6
     3f8:	7f 92       	push	r7
     3fa:	af 92       	push	r10
     3fc:	bf 92       	push	r11
     3fe:	cf 92       	push	r12
     400:	df 92       	push	r13
     402:	ef 92       	push	r14
     404:	ff 92       	push	r15
     406:	2b 01       	movw	r4, r22
     408:	3c 01       	movw	r6, r24
     40a:	82 2f       	mov	r24, r18
     40c:	6e 2d       	mov	r22, r14
     40e:	76 01       	movw	r14, r12
     410:	65 01       	movw	r12, r10
	LCDWriteIntXY(x,y,num,l);
     412:	0e 94 90 01 	call	0x320	; 0x320 <LCDGotoXY>
     416:	c2 01       	movw	r24, r4
     418:	b6 01       	movw	r22, r12
     41a:	0e 94 2a 01 	call	0x254	; 0x254 <LCDWriteInt>
}
     41e:	ff 90       	pop	r15
     420:	ef 90       	pop	r14
     422:	df 90       	pop	r13
     424:	cf 90       	pop	r12
     426:	bf 90       	pop	r11
     428:	af 90       	pop	r10
     42a:	7f 90       	pop	r7
     42c:	6f 90       	pop	r6
     42e:	5f 90       	pop	r5
     430:	4f 90       	pop	r4
     432:	08 95       	ret

00000434 <sMRIfaceLCD_clear>:
void sMRIfaceLCD_clear() {
	LCDClear();
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	60 e0       	ldi	r22, 0x00	; 0
     438:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
     43c:	82 e0       	ldi	r24, 0x02	; 2
     43e:	60 e0       	ldi	r22, 0x00	; 0
     440:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
}
     444:	08 95       	ret

00000446 <sMRIfaceLCD_init>:
void sMRIfaceLCD_init() {
	LCDInit(0);
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	0e 94 a2 01 	call	0x344	; 0x344 <LCDInit>
}
     44c:	08 95       	ret

0000044e <sMRIfaceRF_getData>:

sc_string sMRIfaceRF_getData() {
     44e:	0f 93       	push	r16
     450:	1f 93       	push	r17
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	0f 92       	push	r0
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
	uint8_t pipe = 0;
     45c:	19 82       	std	Y+1, r1	; 0x01
	if (nrf24l01_readready(&pipe)) {
     45e:	ce 01       	movw	r24, r28
     460:	01 96       	adiw	r24, 0x01	; 1
     462:	0e 94 3d 06 	call	0xc7a	; 0xc7a <nrf24l01_readready>
     466:	88 23       	and	r24, r24
     468:	e9 f0       	breq	.+58     	; 0x4a4 <sMRIfaceRF_getData+0x56>
		LCDWriteIntXY(0,1,pipe,1);
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	61 e0       	ldi	r22, 0x01	; 1
     46e:	0e 94 90 01 	call	0x320	; 0x320 <LCDGotoXY>
     472:	89 81       	ldd	r24, Y+1	; 0x01
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	61 e0       	ldi	r22, 0x01	; 1
     478:	70 e0       	ldi	r23, 0x00	; 0
     47a:	0e 94 2a 01 	call	0x254	; 0x254 <LCDWriteInt>
		if (pipe==0) {
     47e:	89 81       	ldd	r24, Y+1	; 0x01
     480:	88 23       	and	r24, r24
     482:	99 f4       	brne	.+38     	; 0x4aa <sMRIfaceRF_getData+0x5c>
     484:	e4 e2       	ldi	r30, 0x24	; 36
     486:	f2 e0       	ldi	r31, 0x02	; 2
}
void sMRIfaceLCD_init() {
	LCDInit(0);
}

sc_string sMRIfaceRF_getData() {
     488:	cf 01       	movw	r24, r30
     48a:	09 96       	adiw	r24, 0x09	; 9
	uint8_t pipe = 0;
	if (nrf24l01_readready(&pipe)) {
		LCDWriteIntXY(0,1,pipe,1);
		if (pipe==0) {
			//clear buffer
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
     48c:	11 92       	st	Z+, r1
     48e:	e8 17       	cp	r30, r24
     490:	f9 07       	cpc	r31, r25
     492:	e1 f7       	brne	.-8      	; 0x48c <sMRIfaceRF_getData+0x3e>
			
			//read buffer
			nrf24l01_read(pipe,bufferin);
     494:	04 e2       	ldi	r16, 0x24	; 36
     496:	12 e0       	ldi	r17, 0x02	; 2
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	b8 01       	movw	r22, r16
     49c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <nrf24l01_read>
			return bufferin;
     4a0:	c8 01       	movw	r24, r16
     4a2:	05 c0       	rjmp	.+10     	; 0x4ae <sMRIfaceRF_getData+0x60>
		}
	}
	return "";
     4a4:	84 e5       	ldi	r24, 0x54	; 84
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <sMRIfaceRF_getData+0x60>
     4aa:	84 e5       	ldi	r24, 0x54	; 84
     4ac:	91 e0       	ldi	r25, 0x01	; 1
}
     4ae:	0f 90       	pop	r0
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	0f 91       	pop	r16
     4b8:	08 95       	ret

000004ba <sMRIfaceRF_sendMsg>:

sc_boolean sMRIfaceRF_sendMsg(const sc_string msg) {
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	9c 01       	movw	r18, r24
     4c0:	c8 e3       	ldi	r28, 0x38	; 56
     4c2:	d2 e0       	ldi	r29, 0x02	; 2
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	90 e0       	ldi	r25, 0x00	; 0
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
		if (i<strlen(msg)) bufferout[i]=msg[i];
     4c8:	a2 2f       	mov	r26, r18
     4ca:	b3 2f       	mov	r27, r19
     4cc:	fd 01       	movw	r30, r26
     4ce:	01 90       	ld	r0, Z+
     4d0:	00 20       	and	r0, r0
     4d2:	e9 f7       	brne	.-6      	; 0x4ce <sMRIfaceRF_sendMsg+0x14>
     4d4:	31 97       	sbiw	r30, 0x01	; 1
     4d6:	ea 1b       	sub	r30, r26
     4d8:	fb 0b       	sbc	r31, r27
     4da:	8e 17       	cp	r24, r30
     4dc:	9f 07       	cpc	r25, r31
     4de:	30 f4       	brcc	.+12     	; 0x4ec <sMRIfaceRF_sendMsg+0x32>
		}
	}
	return "";
}

sc_boolean sMRIfaceRF_sendMsg(const sc_string msg) {
     4e0:	f9 01       	movw	r30, r18
     4e2:	e8 0f       	add	r30, r24
     4e4:	f9 1f       	adc	r31, r25
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
		if (i<strlen(msg)) bufferout[i]=msg[i];
     4e6:	40 81       	ld	r20, Z
     4e8:	48 83       	st	Y, r20
     4ea:	01 c0       	rjmp	.+2      	; 0x4ee <sMRIfaceRF_sendMsg+0x34>
		else bufferout[i] = 0;
     4ec:	18 82       	st	Y, r1
     4ee:	01 96       	adiw	r24, 0x01	; 1
     4f0:	21 96       	adiw	r28, 0x01	; 1
	return "";
}

sc_boolean sMRIfaceRF_sendMsg(const sc_string msg) {
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
     4f2:	89 30       	cpi	r24, 0x09	; 9
     4f4:	91 05       	cpc	r25, r1
     4f6:	41 f7       	brne	.-48     	; 0x4c8 <sMRIfaceRF_sendMsg+0xe>
		if (i<strlen(msg)) bufferout[i]=msg[i];
		else bufferout[i] = 0;
	}
	
	//Set Address for Data
	nrf24l01_settxaddr(nrf24l01_addrtx);
     4f8:	85 e5       	ldi	r24, 0x55	; 85
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	0e 94 ad 04 	call	0x95a	; 0x95a <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     500:	88 e3       	ldi	r24, 0x38	; 56
     502:	92 e0       	ldi	r25, 0x02	; 2
     504:	0e 94 75 06 	call	0xcea	; 0xcea <nrf24l01_write>
     508:	98 2f       	mov	r25, r24
     50a:	ef ec       	ldi	r30, 0xCF	; 207
     50c:	f7 e0       	ldi	r31, 0x07	; 7
     50e:	31 97       	sbiw	r30, 0x01	; 1
     510:	f1 f7       	brne	.-4      	; 0x50e <sMRIfaceRF_sendMsg+0x54>
     512:	00 c0       	rjmp	.+0      	; 0x514 <sMRIfaceRF_sendMsg+0x5a>
     514:	00 00       	nop
		}
	}
	return "";
}

sc_boolean sMRIfaceRF_sendMsg(const sc_string msg) {
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	91 30       	cpi	r25, 0x01	; 1
     51a:	09 f0       	breq	.+2      	; 0x51e <sMRIfaceRF_sendMsg+0x64>
     51c:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	08 95       	ret

00000524 <sMRIfaceRF_sendCheck>:

sc_boolean sMRIfaceRF_sendCheck() {
     524:	e8 e3       	ldi	r30, 0x38	; 56
     526:	f2 e0       	ldi	r31, 0x02	; 2
     528:	cf 01       	movw	r24, r30
     52a:	09 96       	adiw	r24, 0x09	; 9
	//set all buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferout[i] = 1;
     52c:	21 e0       	ldi	r18, 0x01	; 1
     52e:	21 93       	st	Z+, r18
     530:	e8 17       	cp	r30, r24
     532:	f9 07       	cpc	r31, r25
     534:	e1 f7       	brne	.-8      	; 0x52e <sMRIfaceRF_sendCheck+0xa>
	//Set Address for check
	nrf24l01_settxaddr(nrf24l01_addr5);
     536:	8a e5       	ldi	r24, 0x5A	; 90
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	0e 94 ad 04 	call	0x95a	; 0x95a <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     53e:	88 e3       	ldi	r24, 0x38	; 56
     540:	92 e0       	ldi	r25, 0x02	; 2
     542:	0e 94 75 06 	call	0xcea	; 0xcea <nrf24l01_write>
     546:	98 2f       	mov	r25, r24
     548:	ef ec       	ldi	r30, 0xCF	; 207
     54a:	f7 e0       	ldi	r31, 0x07	; 7
     54c:	31 97       	sbiw	r30, 0x01	; 1
     54e:	f1 f7       	brne	.-4      	; 0x54c <sMRIfaceRF_sendCheck+0x28>
     550:	00 c0       	rjmp	.+0      	; 0x552 <sMRIfaceRF_sendCheck+0x2e>
     552:	00 00       	nop
	} else {
		return false;
	}
}

sc_boolean sMRIfaceRF_sendCheck() {
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	91 30       	cpi	r25, 0x01	; 1
     558:	09 f0       	breq	.+2      	; 0x55c <sMRIfaceRF_sendCheck+0x38>
     55a:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     55c:	08 95       	ret

0000055e <sMRIfaceRF_getCheck>:

sc_boolean sMRIfaceRF_getCheck() {
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	0f 92       	push	r0
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
	uint8_t pipe = 0;
     56c:	19 82       	std	Y+1, r1	; 0x01
	if (nrf24l01_readready(&pipe)) {
     56e:	ce 01       	movw	r24, r28
     570:	01 96       	adiw	r24, 0x01	; 1
     572:	0e 94 3d 06 	call	0xc7a	; 0xc7a <nrf24l01_readready>
     576:	88 23       	and	r24, r24
     578:	f1 f0       	breq	.+60     	; 0x5b6 <sMRIfaceRF_getCheck+0x58>
		if (pipe==5) {
     57a:	89 81       	ldd	r24, Y+1	; 0x01
     57c:	85 30       	cpi	r24, 0x05	; 5
     57e:	e9 f4       	brne	.+58     	; 0x5ba <sMRIfaceRF_getCheck+0x5c>
     580:	e4 e2       	ldi	r30, 0x24	; 36
     582:	f2 e0       	ldi	r31, 0x02	; 2
	} else {
		return false;
	}
}

sc_boolean sMRIfaceRF_getCheck() {
     584:	8f 01       	movw	r16, r30
     586:	07 5f       	subi	r16, 0xF7	; 247
     588:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t pipe = 0;
	if (nrf24l01_readready(&pipe)) {
		if (pipe==5) {
			//clear buffer
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
     58a:	11 92       	st	Z+, r1
     58c:	e0 17       	cp	r30, r16
     58e:	f1 07       	cpc	r31, r17
     590:	e1 f7       	brne	.-8      	; 0x58a <sMRIfaceRF_getCheck+0x2c>
			
			//read buffer
			nrf24l01_read(pipe,bufferin);
     592:	85 e0       	ldi	r24, 0x05	; 5
     594:	64 e2       	ldi	r22, 0x24	; 36
     596:	72 e0       	ldi	r23, 0x02	; 2
     598:	0e 94 4f 06 	call	0xc9e	; 0xc9e <nrf24l01_read>
			
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) if (bufferin[i]!=1) return false;
     59c:	80 91 24 02 	lds	r24, 0x0224
     5a0:	81 30       	cpi	r24, 0x01	; 1
     5a2:	69 f4       	brne	.+26     	; 0x5be <sMRIfaceRF_getCheck+0x60>
     5a4:	e5 e2       	ldi	r30, 0x25	; 37
     5a6:	f2 e0       	ldi	r31, 0x02	; 2
     5a8:	81 91       	ld	r24, Z+
     5aa:	81 30       	cpi	r24, 0x01	; 1
     5ac:	51 f4       	brne	.+20     	; 0x5c2 <sMRIfaceRF_getCheck+0x64>
     5ae:	e0 17       	cp	r30, r16
     5b0:	f1 07       	cpc	r31, r17
     5b2:	d1 f7       	brne	.-12     	; 0x5a8 <sMRIfaceRF_getCheck+0x4a>
     5b4:	07 c0       	rjmp	.+14     	; 0x5c4 <sMRIfaceRF_getCheck+0x66>
			return true;
		}
	}
	return false;
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	05 c0       	rjmp	.+10     	; 0x5c4 <sMRIfaceRF_getCheck+0x66>
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	03 c0       	rjmp	.+6      	; 0x5c4 <sMRIfaceRF_getCheck+0x66>
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
			
			//read buffer
			nrf24l01_read(pipe,bufferin);
			
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) if (bufferin[i]!=1) return false;
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <sMRIfaceRF_getCheck+0x66>
     5c2:	80 e0       	ldi	r24, 0x00	; 0
			return true;
		}
	}
	return false;
}
     5c4:	0f 90       	pop	r0
     5c6:	df 91       	pop	r29
     5c8:	cf 91       	pop	r28
     5ca:	1f 91       	pop	r17
     5cc:	0f 91       	pop	r16
     5ce:	08 95       	ret

000005d0 <sMRIfaceRF_sendData>:

sc_boolean sMRIfaceRF_sendData(const sc_integer cmd, const sc_integer id, const sc_integer dish_id, const sc_integer amount) {
     5d0:	af 92       	push	r10
     5d2:	ef 92       	push	r14
     5d4:	82 2f       	mov	r24, r18
     5d6:	e8 e3       	ldi	r30, 0x38	; 56
     5d8:	f2 e0       	ldi	r31, 0x02	; 2
     5da:	af 01       	movw	r20, r30
     5dc:	47 5f       	subi	r20, 0xF7	; 247
     5de:	5f 4f       	sbci	r21, 0xFF	; 255
	
	unsigned char num;
	unsigned char mod;
	//clear buffer
	for(uint8_t i=0; i<sizeof(bufferout); i++) bufferout[i] = 0;
     5e0:	11 92       	st	Z+, r1
     5e2:	e4 17       	cp	r30, r20
     5e4:	f5 07       	cpc	r31, r21
     5e6:	e1 f7       	brne	.-8      	; 0x5e0 <sMRIfaceRF_sendData+0x10>
	
	//Lenh cho data: 1-goi mon, 2-huy mon, 3-thanh toan, 4-goi boi ban
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
     5e8:	60 5d       	subi	r22, 0xD0	; 208
     5ea:	60 93 38 02 	sts	0x0238, r22
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     5ee:	3a e0       	ldi	r19, 0x0A	; 10
     5f0:	63 2f       	mov	r22, r19
     5f2:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     5f6:	90 5d       	subi	r25, 0xD0	; 208
     5f8:	90 93 3a 02 	sts	0x023A, r25
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     5fc:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     600:	90 5d       	subi	r25, 0xD0	; 208
     602:	90 93 39 02 	sts	0x0239, r25
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
		num/=10;
     606:	8e 2d       	mov	r24, r14
     608:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__udivmodqi4>
		bufferout[3+i]=mod+'0';
     60c:	90 5d       	subi	r25, 0xD0	; 208
     60e:	90 93 3d 02 	sts	0x023D, r25
	}
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
     612:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__udivmodqi4>
		num/=10;
		bufferout[3+i]=mod+'0';
     616:	90 5d       	subi	r25, 0xD0	; 208
     618:	90 93 3c 02 	sts	0x023C, r25
	}
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
     61c:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__udivmodqi4>
		num/=10;
		bufferout[3+i]=mod+'0';
     620:	90 5d       	subi	r25, 0xD0	; 208
     622:	90 93 3b 02 	sts	0x023B, r25
	}
	
	//Chuyen doi so luong mon an
	num=amount;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     626:	8a 2d       	mov	r24, r10
     628:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__udivmodqi4>
		num/=10;
		bufferout[6+i]=mod+'0';
     62c:	90 5d       	subi	r25, 0xD0	; 208
     62e:	90 93 3f 02 	sts	0x023F, r25
	}
	
	//Chuyen doi so luong mon an
	num=amount;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     632:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__udivmodqi4>
		num/=10;
		bufferout[6+i]=mod+'0';
     636:	90 5d       	subi	r25, 0xD0	; 208
     638:	90 93 3e 02 	sts	0x023E, r25
	}
	
	//Set Address for Data
	nrf24l01_settxaddr(nrf24l01_addrtx);
     63c:	85 e5       	ldi	r24, 0x55	; 85
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	0e 94 ad 04 	call	0x95a	; 0x95a <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     644:	88 e3       	ldi	r24, 0x38	; 56
     646:	92 e0       	ldi	r25, 0x02	; 2
     648:	0e 94 75 06 	call	0xcea	; 0xcea <nrf24l01_write>
     64c:	98 2f       	mov	r25, r24
     64e:	ef ec       	ldi	r30, 0xCF	; 207
     650:	f7 e0       	ldi	r31, 0x07	; 7
     652:	31 97       	sbiw	r30, 0x01	; 1
     654:	f1 f7       	brne	.-4      	; 0x652 <sMRIfaceRF_sendData+0x82>
     656:	00 c0       	rjmp	.+0      	; 0x658 <sMRIfaceRF_sendData+0x88>
     658:	00 00       	nop
		}
	}
	return false;
}

sc_boolean sMRIfaceRF_sendData(const sc_integer cmd, const sc_integer id, const sc_integer dish_id, const sc_integer amount) {
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	91 30       	cpi	r25, 0x01	; 1
     65e:	09 f0       	breq	.+2      	; 0x662 <sMRIfaceRF_sendData+0x92>
     660:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     662:	ef 90       	pop	r14
     664:	af 90       	pop	r10
     666:	08 95       	ret

00000668 <sMRIfaceUART_init>:

void sMRIfaceUART_init() {
	UART_Init(MYUBRR);
     668:	83 e3       	ldi	r24, 0x33	; 51
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	0e 94 9b 0a 	call	0x1536	; 0x1536 <UART_Init>
}
     670:	08 95       	ret

00000672 <sMRIfaceUART_sendMsg>:
char temp[9];

void sMRIfaceUART_sendMsg(const sc_string msg) {
	uart_puts(msg);
     672:	0e 94 a8 0a 	call	0x1550	; 0x1550 <uart_puts>
}
     676:	08 95       	ret

00000678 <sMR_setTimer>:

void sMR_setTimer(const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
	TimerSet(evid,time_ms);
     678:	0e 94 a6 09 	call	0x134c	; 0x134c <TimerSet>
}
     67c:	08 95       	ret

0000067e <sMR_unsetTimer>:
void sMR_unsetTimer(const sc_eventid evid) {
	TimerUnSet(evid);
     67e:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <TimerUnSet>
}
     682:	08 95       	ret

00000684 <sMRIfaceRF_init>:

void sMRIfaceRF_init() {
	nrf24l01_init();
     684:	0e 94 cb 06 	call	0xd96	; 0xd96 <nrf24l01_init>
}
     688:	08 95       	ret

0000068a <sMRIface_convertNumber>:



void sMRIface_convertNumber(const sc_integer num, const sc_integer pos) {
     68a:	da 01       	movw	r26, r20
     68c:	c9 01       	movw	r24, r18
	temp[pos-1]=num+'0';
     68e:	01 97       	sbiw	r24, 0x01	; 1
     690:	a1 09       	sbc	r26, r1
     692:	b1 09       	sbc	r27, r1
     694:	81 5d       	subi	r24, 0xD1	; 209
     696:	9d 4f       	sbci	r25, 0xFD	; 253
     698:	60 5d       	subi	r22, 0xD0	; 208
     69a:	fc 01       	movw	r30, r24
     69c:	60 83       	st	Z, r22
}
     69e:	08 95       	ret

000006a0 <sMRIfaceUART_sendTemp>:

void sMRIfaceUART_sendTemp() {
	temp[sizeof(temp)-1]='\0';
     6a0:	10 92 37 02 	sts	0x0237, r1
	uart_puts(temp);
     6a4:	8f e2       	ldi	r24, 0x2F	; 47
     6a6:	92 e0       	ldi	r25, 0x02	; 2
     6a8:	0e 94 a8 0a 	call	0x1550	; 0x1550 <uart_puts>
}
     6ac:	08 95       	ret

000006ae <sMRIfaceUART_getData>:

sc_string sMRIfaceUART_getData() {
	return uart_gets();
     6ae:	0e 94 ba 0a 	call	0x1574	; 0x1574 <uart_gets>
}
     6b2:	08 95       	ret

000006b4 <main>:


int main(void)
{
	uint8_t i;
	DDRC=0x0F;
     6b4:	8f e0       	ldi	r24, 0x0F	; 15
     6b6:	84 bb       	out	0x14, r24	; 20
	PORTC=0x0F;
     6b8:	85 bb       	out	0x15, r24	; 21
	l=malloc(sizeof(SMR*)) ;
     6ba:	82 e0       	ldi	r24, 0x02	; 2
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	0e 94 0e 0b 	call	0x161c	; 0x161c <malloc>
     6c2:	80 93 2d 02 	sts	0x022D, r24
     6c6:	90 93 2e 02 	sts	0x022E, r25
	TimerInit();
     6ca:	0e 94 9a 09 	call	0x1334	; 0x1334 <TimerInit>
	sMR_init(l);
     6ce:	80 91 2d 02 	lds	r24, 0x022D
     6d2:	90 91 2e 02 	lds	r25, 0x022E
     6d6:	0e 94 8a 07 	call	0xf14	; 0xf14 <sMR_init>
	sMR_enter(l);
     6da:	80 91 2d 02 	lds	r24, 0x022D
     6de:	90 91 2e 02 	lds	r25, 0x022E
     6e2:	0e 94 90 07 	call	0xf20	; 0xf20 <sMR_enter>
	
	//setup buffer
	for(i=0; i<sizeof(bufferout); i++)
	bufferout[i] = i+'a';
     6e6:	81 e6       	ldi	r24, 0x61	; 97
     6e8:	80 93 38 02 	sts	0x0238, r24
     6ec:	82 e6       	ldi	r24, 0x62	; 98
     6ee:	80 93 39 02 	sts	0x0239, r24
     6f2:	83 e6       	ldi	r24, 0x63	; 99
     6f4:	80 93 3a 02 	sts	0x023A, r24
     6f8:	84 e6       	ldi	r24, 0x64	; 100
     6fa:	80 93 3b 02 	sts	0x023B, r24
     6fe:	85 e6       	ldi	r24, 0x65	; 101
     700:	80 93 3c 02 	sts	0x023C, r24
     704:	86 e6       	ldi	r24, 0x66	; 102
     706:	80 93 3d 02 	sts	0x023D, r24
     70a:	87 e6       	ldi	r24, 0x67	; 103
     70c:	80 93 3e 02 	sts	0x023E, r24
     710:	88 e6       	ldi	r24, 0x68	; 104
     712:	80 93 3f 02 	sts	0x023F, r24
     716:	89 e6       	ldi	r24, 0x69	; 105
     718:	80 93 40 02 	sts	0x0240, r24
     71c:	e4 e2       	ldi	r30, 0x24	; 36
     71e:	f2 e0       	ldi	r31, 0x02	; 2
sc_string sMRIfaceUART_getData() {
	return uart_gets();
}


int main(void)
     720:	cf 01       	movw	r24, r30
     722:	09 96       	adiw	r24, 0x09	; 9
	
	//setup buffer
	for(i=0; i<sizeof(bufferout); i++)
	bufferout[i] = i+'a';
	for(i=0; i<sizeof(bufferin); i++)
	bufferin[i] = 0;
     724:	11 92       	st	Z+, r1
	sMR_enter(l);
	
	//setup buffer
	for(i=0; i<sizeof(bufferout); i++)
	bufferout[i] = i+'a';
	for(i=0; i<sizeof(bufferin); i++)
     726:	e8 17       	cp	r30, r24
     728:	f9 07       	cpc	r31, r25
     72a:	e1 f7       	brne	.-8      	; 0x724 <main+0x70>
	
	uint8_t down=0;
	
	while(1)
	{
		sMR_runCycle(l);
     72c:	80 91 2d 02 	lds	r24, 0x022D
     730:	90 91 2e 02 	lds	r25, 0x022E
     734:	0e 94 e6 07 	call	0xfcc	; 0xfcc <sMR_runCycle>
     738:	f9 cf       	rjmp	.-14     	; 0x72c <main+0x78>

0000073a <__vector_16>:
	}
}

ISR (TIMER0_OVF_vect) {
     73a:	1f 92       	push	r1
     73c:	0f 92       	push	r0
     73e:	0f b6       	in	r0, 0x3f	; 63
     740:	0f 92       	push	r0
     742:	0b b6       	in	r0, 0x3b	; 59
     744:	0f 92       	push	r0
     746:	11 24       	eor	r1, r1
     748:	2f 93       	push	r18
     74a:	3f 93       	push	r19
     74c:	4f 93       	push	r20
     74e:	5f 93       	push	r21
     750:	6f 93       	push	r22
     752:	7f 93       	push	r23
     754:	8f 93       	push	r24
     756:	9f 93       	push	r25
     758:	af 93       	push	r26
     75a:	bf 93       	push	r27
     75c:	ef 93       	push	r30
     75e:	ff 93       	push	r31
	TCNT0=131;
     760:	83 e8       	ldi	r24, 0x83	; 131
     762:	82 bf       	out	0x32, r24	; 50
	TimerCheck(l);
     764:	80 91 2d 02 	lds	r24, 0x022D
     768:	90 91 2e 02 	lds	r25, 0x022E
     76c:	0e 94 28 0a 	call	0x1450	; 0x1450 <TimerCheck>
     770:	ff 91       	pop	r31
     772:	ef 91       	pop	r30
     774:	bf 91       	pop	r27
     776:	af 91       	pop	r26
     778:	9f 91       	pop	r25
     77a:	8f 91       	pop	r24
     77c:	7f 91       	pop	r23
     77e:	6f 91       	pop	r22
     780:	5f 91       	pop	r21
     782:	4f 91       	pop	r20
     784:	3f 91       	pop	r19
     786:	2f 91       	pop	r18
     788:	0f 90       	pop	r0
     78a:	0b be       	out	0x3b, r0	; 59
     78c:	0f 90       	pop	r0
     78e:	0f be       	out	0x3f, r0	; 63
     790:	0f 90       	pop	r0
     792:	1f 90       	pop	r1
     794:	18 95       	reti

00000796 <nrf24l01_readregister>:

/*
 * read one register
 */
uint8_t nrf24l01_readregister(uint8_t reg) {
	nrf24l01_CSNlo; //low CSN
     796:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     798:	8f 71       	andi	r24, 0x1F	; 31
     79a:	0e 94 95 09 	call	0x132a	; 0x132a <spi_writereadbyte>
    uint8_t result = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
     79e:	8f ef       	ldi	r24, 0xFF	; 255
     7a0:	0e 94 95 09 	call	0x132a	; 0x132a <spi_writereadbyte>
    nrf24l01_CSNhi; //high CSN
     7a4:	ae 9a       	sbi	0x15, 6	; 21
    return result;
}
     7a6:	08 95       	ret

000007a8 <nrf24l01_readregisters>:

/*
 * read many registers
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
     7a8:	ff 92       	push	r15
     7aa:	0f 93       	push	r16
     7ac:	1f 93       	push	r17
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	06 2f       	mov	r16, r22
     7b4:	f7 2e       	mov	r15, r23
     7b6:	14 2f       	mov	r17, r20
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
     7b8:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     7ba:	8f 71       	andi	r24, 0x1F	; 31
     7bc:	0e 94 95 09 	call	0x132a	; 0x132a <spi_writereadbyte>
	for(i=0; i<len; i++)
     7c0:	11 23       	and	r17, r17
     7c2:	51 f0       	breq	.+20     	; 0x7d8 <nrf24l01_readregisters+0x30>
     7c4:	c0 2f       	mov	r28, r16
     7c6:	df 2d       	mov	r29, r15
     7c8:	00 e0       	ldi	r16, 0x00	; 0
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
     7ca:	8f ef       	ldi	r24, 0xFF	; 255
     7cc:	0e 94 95 09 	call	0x132a	; 0x132a <spi_writereadbyte>
     7d0:	89 93       	st	Y+, r24
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     7d2:	0f 5f       	subi	r16, 0xFF	; 255
     7d4:	01 17       	cp	r16, r17
     7d6:	c9 f7       	brne	.-14     	; 0x7ca <nrf24l01_readregisters+0x22>
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
	nrf24l01_CSNhi; //high CSN
     7d8:	ae 9a       	sbi	0x15, 6	; 21
}
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	1f 91       	pop	r17
     7e0:	0f 91       	pop	r16
     7e2:	ff 90       	pop	r15
     7e4:	08 95       	ret

000007e6 <nrf24l01_writeregister>:

/*
 * write one register
 */
void nrf24l01_writeregister(uint8_t reg, uint8_t value) {
     7e6:	cf 93       	push	r28
     7e8:	c6 2f       	mov	r28, r22
	nrf24l01_CSNlo; //low CSN
     7ea:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     7ec:	8f 71       	andi	r24, 0x1F	; 31
     7ee:	80 62       	ori	r24, 0x20	; 32
     7f0:	0e 94 95 09 	call	0x132a	; 0x132a <spi_writereadbyte>
	spi_writereadbyte(value); //write register
     7f4:	8c 2f       	mov	r24, r28
     7f6:	0e 94 95 09 	call	0x132a	; 0x132a <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     7fa:	ae 9a       	sbi	0x15, 6	; 21
}
     7fc:	cf 91       	pop	r28
     7fe:	08 95       	ret

00000800 <nrf24l01_writeregisters>:

/*
 * write many registers
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
     800:	ff 92       	push	r15
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	06 2f       	mov	r16, r22
     80c:	f7 2e       	mov	r15, r23
     80e:	14 2f       	mov	r17, r20
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
     810:	ae 98       	cbi	0x15, 6	; 21
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     812:	8f 71       	andi	r24, 0x1F	; 31
     814:	80 62       	ori	r24, 0x20	; 32
     816:	0e 94 95 09 	call	0x132a	; 0x132a <spi_writereadbyte>
	for(i=0; i<len; i++)
     81a:	11 23       	and	r17, r17
     81c:	49 f0       	breq	.+18     	; 0x830 <nrf24l01_writeregisters+0x30>
     81e:	c0 2f       	mov	r28, r16
     820:	df 2d       	mov	r29, r15
     822:	00 e0       	ldi	r16, 0x00	; 0
		 spi_writereadbyte(value[i]); //write register
     824:	89 91       	ld	r24, Y+
     826:	0e 94 95 09 	call	0x132a	; 0x132a <spi_writereadbyte>
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     82a:	0f 5f       	subi	r16, 0xFF	; 255
     82c:	01 17       	cp	r16, r17
     82e:	d1 f7       	brne	.-12     	; 0x824 <nrf24l01_writeregisters+0x24>
		 spi_writereadbyte(value[i]); //write register
	nrf24l01_CSNhi; //high CSN
     830:	ae 9a       	sbi	0x15, 6	; 21
}
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	1f 91       	pop	r17
     838:	0f 91       	pop	r16
     83a:	ff 90       	pop	r15
     83c:	08 95       	ret

0000083e <nrf24l01_revaddress>:

/*
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	04 96       	adiw	r24, 0x04	; 4
     844:	db 01       	movw	r26, r22
     846:	a2 0f       	add	r26, r18
     848:	b3 1f       	adc	r27, r19
     84a:	fc 01       	movw	r30, r24
     84c:	e2 1b       	sub	r30, r18
     84e:	f3 0b       	sbc	r31, r19
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
     850:	40 81       	ld	r20, Z
     852:	4c 93       	st	X, r20
     854:	2f 5f       	subi	r18, 0xFF	; 255
     856:	3f 4f       	sbci	r19, 0xFF	; 255
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
     858:	25 30       	cpi	r18, 0x05	; 5
     85a:	31 05       	cpc	r19, r1
     85c:	99 f7       	brne	.-26     	; 0x844 <nrf24l01_revaddress+0x6>
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
}
     85e:	08 95       	ret

00000860 <nrf24l01_setrxaddr>:

/*
 * set rx address
 */
void nrf24l01_setrxaddr(uint8_t pipe, uint8_t *addr) {
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	00 d0       	rcall	.+0      	; 0x866 <nrf24l01_setrxaddr+0x6>
     866:	00 d0       	rcall	.+0      	; 0x868 <nrf24l01_setrxaddr+0x8>
     868:	0f 92       	push	r0
     86a:	cd b7       	in	r28, 0x3d	; 61
     86c:	de b7       	in	r29, 0x3e	; 62
	if(pipe == 0) {
     86e:	88 23       	and	r24, r24
     870:	b1 f4       	brne	.+44     	; 0x89e <nrf24l01_setrxaddr+0x3e>
		memcpy(&nrf24l01_addr0, addr, NRF24L01_ADDRSIZE); //cache address
     872:	a9 ed       	ldi	r26, 0xD9	; 217
     874:	b1 e0       	ldi	r27, 0x01	; 1
     876:	fb 01       	movw	r30, r22
     878:	85 e0       	ldi	r24, 0x05	; 5
     87a:	01 90       	ld	r0, Z+
     87c:	0d 92       	st	X+, r0
     87e:	81 50       	subi	r24, 0x01	; 1
     880:	e1 f7       	brne	.-8      	; 0x87a <nrf24l01_setrxaddr+0x1a>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     882:	cb 01       	movw	r24, r22
     884:	be 01       	movw	r22, r28
     886:	6f 5f       	subi	r22, 0xFF	; 255
     888:	7f 4f       	sbci	r23, 0xFF	; 255
     88a:	0e 94 1f 04 	call	0x83e	; 0x83e <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE);
     88e:	8a e0       	ldi	r24, 0x0A	; 10
     890:	be 01       	movw	r22, r28
     892:	6f 5f       	subi	r22, 0xFF	; 255
     894:	7f 4f       	sbci	r23, 0xFF	; 255
     896:	45 e0       	ldi	r20, 0x05	; 5
     898:	0e 94 00 04 	call	0x800	; 0x800 <nrf24l01_writeregisters>
     89c:	56 c0       	rjmp	.+172    	; 0x94a <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 1) {
     89e:	81 30       	cpi	r24, 0x01	; 1
     8a0:	b1 f4       	brne	.+44     	; 0x8ce <nrf24l01_setrxaddr+0x6e>
		memcpy(&nrf24l01_addr1, addr, NRF24L01_ADDRSIZE); //cache address
     8a2:	ae ed       	ldi	r26, 0xDE	; 222
     8a4:	b1 e0       	ldi	r27, 0x01	; 1
     8a6:	fb 01       	movw	r30, r22
     8a8:	85 e0       	ldi	r24, 0x05	; 5
     8aa:	01 90       	ld	r0, Z+
     8ac:	0d 92       	st	X+, r0
     8ae:	81 50       	subi	r24, 0x01	; 1
     8b0:	e1 f7       	brne	.-8      	; 0x8aa <nrf24l01_setrxaddr+0x4a>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     8b2:	cb 01       	movw	r24, r22
     8b4:	be 01       	movw	r22, r28
     8b6:	6f 5f       	subi	r22, 0xFF	; 255
     8b8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ba:	0e 94 1f 04 	call	0x83e	; 0x83e <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P1, addrrev, NRF24L01_ADDRSIZE);
     8be:	8b e0       	ldi	r24, 0x0B	; 11
     8c0:	be 01       	movw	r22, r28
     8c2:	6f 5f       	subi	r22, 0xFF	; 255
     8c4:	7f 4f       	sbci	r23, 0xFF	; 255
     8c6:	45 e0       	ldi	r20, 0x05	; 5
     8c8:	0e 94 00 04 	call	0x800	; 0x800 <nrf24l01_writeregisters>
     8cc:	3e c0       	rjmp	.+124    	; 0x94a <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 2) {
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	71 f4       	brne	.+28     	; 0x8ee <nrf24l01_setrxaddr+0x8e>
		memcpy(&nrf24l01_addr2, addr, NRF24L01_ADDRSIZE); //cache address
     8d2:	a3 ee       	ldi	r26, 0xE3	; 227
     8d4:	b1 e0       	ldi	r27, 0x01	; 1
     8d6:	fb 01       	movw	r30, r22
     8d8:	85 e0       	ldi	r24, 0x05	; 5
     8da:	01 90       	ld	r0, Z+
     8dc:	0d 92       	st	X+, r0
     8de:	81 50       	subi	r24, 0x01	; 1
     8e0:	e1 f7       	brne	.-8      	; 0x8da <nrf24l01_setrxaddr+0x7a>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P2, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     8e2:	8c e0       	ldi	r24, 0x0C	; 12
     8e4:	fb 01       	movw	r30, r22
     8e6:	64 81       	ldd	r22, Z+4	; 0x04
     8e8:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
     8ec:	2e c0       	rjmp	.+92     	; 0x94a <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 3) {
     8ee:	83 30       	cpi	r24, 0x03	; 3
     8f0:	71 f4       	brne	.+28     	; 0x90e <nrf24l01_setrxaddr+0xae>
		memcpy(&nrf24l01_addr3, addr, NRF24L01_ADDRSIZE); //cache address
     8f2:	a8 ee       	ldi	r26, 0xE8	; 232
     8f4:	b1 e0       	ldi	r27, 0x01	; 1
     8f6:	fb 01       	movw	r30, r22
     8f8:	85 e0       	ldi	r24, 0x05	; 5
     8fa:	01 90       	ld	r0, Z+
     8fc:	0d 92       	st	X+, r0
     8fe:	81 50       	subi	r24, 0x01	; 1
     900:	e1 f7       	brne	.-8      	; 0x8fa <nrf24l01_setrxaddr+0x9a>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P3, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     902:	8d e0       	ldi	r24, 0x0D	; 13
     904:	fb 01       	movw	r30, r22
     906:	64 81       	ldd	r22, Z+4	; 0x04
     908:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
     90c:	1e c0       	rjmp	.+60     	; 0x94a <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 4) {
     90e:	84 30       	cpi	r24, 0x04	; 4
     910:	71 f4       	brne	.+28     	; 0x92e <nrf24l01_setrxaddr+0xce>
		memcpy(&nrf24l01_addr4, addr, NRF24L01_ADDRSIZE); //cache address
     912:	ad ee       	ldi	r26, 0xED	; 237
     914:	b1 e0       	ldi	r27, 0x01	; 1
     916:	fb 01       	movw	r30, r22
     918:	85 e0       	ldi	r24, 0x05	; 5
     91a:	01 90       	ld	r0, Z+
     91c:	0d 92       	st	X+, r0
     91e:	81 50       	subi	r24, 0x01	; 1
     920:	e1 f7       	brne	.-8      	; 0x91a <nrf24l01_setrxaddr+0xba>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P4, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     922:	8e e0       	ldi	r24, 0x0E	; 14
     924:	fb 01       	movw	r30, r22
     926:	64 81       	ldd	r22, Z+4	; 0x04
     928:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
     92c:	0e c0       	rjmp	.+28     	; 0x94a <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 5) {
     92e:	85 30       	cpi	r24, 0x05	; 5
     930:	61 f4       	brne	.+24     	; 0x94a <nrf24l01_setrxaddr+0xea>
		memcpy(&nrf24l01_addr5, addr, NRF24L01_ADDRSIZE); //cache address
     932:	a2 ef       	ldi	r26, 0xF2	; 242
     934:	b1 e0       	ldi	r27, 0x01	; 1
     936:	fb 01       	movw	r30, r22
     938:	01 90       	ld	r0, Z+
     93a:	0d 92       	st	X+, r0
     93c:	81 50       	subi	r24, 0x01	; 1
     93e:	e1 f7       	brne	.-8      	; 0x938 <nrf24l01_setrxaddr+0xd8>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P5, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     940:	8f e0       	ldi	r24, 0x0F	; 15
     942:	fb 01       	movw	r30, r22
     944:	64 81       	ldd	r22, Z+4	; 0x04
     946:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
	}
}
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
     950:	0f 90       	pop	r0
     952:	0f 90       	pop	r0
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	08 95       	ret

0000095a <nrf24l01_settxaddr>:

/*
 * set tx address
 */
void nrf24l01_settxaddr(uint8_t *addr) {
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	00 d0       	rcall	.+0      	; 0x960 <nrf24l01_settxaddr+0x6>
     960:	00 d0       	rcall	.+0      	; 0x962 <nrf24l01_settxaddr+0x8>
     962:	0f 92       	push	r0
     964:	cd b7       	in	r28, 0x3d	; 61
     966:	de b7       	in	r29, 0x3e	; 62
	memcpy(&nrf24l01_addrtx, addr, NRF24L01_ADDRSIZE); //cache address
     968:	a7 ef       	ldi	r26, 0xF7	; 247
     96a:	b1 e0       	ldi	r27, 0x01	; 1
     96c:	e8 2f       	mov	r30, r24
     96e:	f9 2f       	mov	r31, r25
     970:	25 e0       	ldi	r18, 0x05	; 5
     972:	01 90       	ld	r0, Z+
     974:	0d 92       	st	X+, r0
     976:	21 50       	subi	r18, 0x01	; 1
     978:	e1 f7       	brne	.-8      	; 0x972 <nrf24l01_settxaddr+0x18>
	uint8_t addrrev[NRF24L01_ADDRSIZE];
	nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     97a:	be 01       	movw	r22, r28
     97c:	6f 5f       	subi	r22, 0xFF	; 255
     97e:	7f 4f       	sbci	r23, 0xFF	; 255
     980:	0e 94 1f 04 	call	0x83e	; 0x83e <nrf24l01_revaddress>
	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE); //set rx address for ack on pipe 0
     984:	8a e0       	ldi	r24, 0x0A	; 10
     986:	be 01       	movw	r22, r28
     988:	6f 5f       	subi	r22, 0xFF	; 255
     98a:	7f 4f       	sbci	r23, 0xFF	; 255
     98c:	45 e0       	ldi	r20, 0x05	; 5
     98e:	0e 94 00 04 	call	0x800	; 0x800 <nrf24l01_writeregisters>
	nrf24l01_writeregisters(NRF24L01_REG_TX_ADDR, addrrev, NRF24L01_ADDRSIZE); //set tx address
     992:	80 e1       	ldi	r24, 0x10	; 16
     994:	be 01       	movw	r22, r28
     996:	6f 5f       	subi	r22, 0xFF	; 255
     998:	7f 4f       	sbci	r23, 0xFF	; 255
     99a:	45 e0       	ldi	r20, 0x05	; 5
     99c:	0e 94 00 04 	call	0x800	; 0x800 <nrf24l01_writeregisters>
}
     9a0:	0f 90       	pop	r0
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	08 95       	ret

000009b0 <nrf24l01_flushRXfifo>:

/*
 * flush RX fifo
 */
void nrf24l01_flushRXfifo() {
	nrf24l01_CSNlo; //low CSN
     9b0:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_FLUSH_RX);
     9b2:	82 ee       	ldi	r24, 0xE2	; 226
     9b4:	0e 94 95 09 	call	0x132a	; 0x132a <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     9b8:	ae 9a       	sbi	0x15, 6	; 21
}
     9ba:	08 95       	ret

000009bc <nrf24l01_flushTXfifo>:

/*
 * flush TX fifo
 */
void nrf24l01_flushTXfifo() {
	nrf24l01_CSNlo; //low CSN
     9bc:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_FLUSH_TX);
     9be:	81 ee       	ldi	r24, 0xE1	; 225
     9c0:	0e 94 95 09 	call	0x132a	; 0x132a <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     9c4:	ae 9a       	sbi	0x15, 6	; 21
}
     9c6:	08 95       	ret

000009c8 <nrf24l01_setRX>:

/*
 * set chip as RX
 */
void nrf24l01_setRX() {
	nrf24l01_setrxaddr(0, nrf24l01_addr0); //restore pipe 0 address
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	69 ed       	ldi	r22, 0xD9	; 217
     9cc:	71 e0       	ldi	r23, 0x01	; 1
     9ce:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_setrxaddr>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PRIM_RX)); //prx mode
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	0e 94 cb 03 	call	0x796	; 0x796 <nrf24l01_readregister>
     9d8:	68 2f       	mov	r22, r24
     9da:	61 60       	ori	r22, 0x01	; 1
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	0e 94 cb 03 	call	0x796	; 0x796 <nrf24l01_readregister>
     9e8:	68 2f       	mov	r22, r24
     9ea:	62 60       	ori	r22, 0x02	; 2
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     9f2:	87 e0       	ldi	r24, 0x07	; 7
     9f4:	60 e7       	ldi	r22, 0x70	; 112
     9f6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
	nrf24l01_flushRXfifo(); //flush rx fifo
     9fa:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <nrf24l01_flushRXfifo>
	nrf24l01_flushTXfifo(); //flush tx fifo
     9fe:	0e 94 de 04 	call	0x9bc	; 0x9bc <nrf24l01_flushTXfifo>
	nrf24l01_CEhi; //start listening
     a02:	af 9a       	sbi	0x15, 7	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a04:	82 e3       	ldi	r24, 0x32	; 50
     a06:	8a 95       	dec	r24
     a08:	f1 f7       	brne	.-4      	; 0xa06 <nrf24l01_setRX+0x3e>
	_delay_us(150); //wait for the radio to power up
}
     a0a:	08 95       	ret

00000a0c <nrf24l01_setTX>:

/*
 * set chip as TX
 */
void nrf24l01_setTX() {
	nrf24l01_CElo; //stop listening
     a0c:	af 98       	cbi	0x15, 7	; 21
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PRIM_RX)); //ptx mode
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	0e 94 cb 03 	call	0x796	; 0x796 <nrf24l01_readregister>
     a14:	68 2f       	mov	r22, r24
     a16:	6e 7f       	andi	r22, 0xFE	; 254
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	0e 94 cb 03 	call	0x796	; 0x796 <nrf24l01_readregister>
     a24:	68 2f       	mov	r22, r24
     a26:	62 60       	ori	r22, 0x02	; 2
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     a2e:	87 e0       	ldi	r24, 0x07	; 7
     a30:	60 e7       	ldi	r22, 0x70	; 112
     a32:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
	nrf24l01_flushTXfifo(); //flush tx fifo
     a36:	0e 94 de 04 	call	0x9bc	; 0x9bc <nrf24l01_flushTXfifo>
     a3a:	82 e3       	ldi	r24, 0x32	; 50
     a3c:	8a 95       	dec	r24
     a3e:	f1 f7       	brne	.-4      	; 0xa3c <nrf24l01_setTX+0x30>
	_delay_us(150); //wait for the radio to power up
}
     a40:	08 95       	ret

00000a42 <nrf24l01_getstatus>:
/*
 * get status register
 */
uint8_t nrf24l01_getstatus() {
	uint8_t status = 0;
	nrf24l01_CSNlo; //low CSN
     a42:	ae 98       	cbi	0x15, 6	; 21
	status = spi_writereadbyte(NRF24L01_CMD_NOP); //get status, send NOP request
     a44:	8f ef       	ldi	r24, 0xFF	; 255
     a46:	0e 94 95 09 	call	0x132a	; 0x132a <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     a4a:	ae 9a       	sbi	0x15, 6	; 21
	return status;
}
     a4c:	08 95       	ret

00000a4e <nrf24l01_printinfo>:

#if NRF24L01_PRINTENABLE == 1
/*
 * print info
 */
void nrf24l01_printinfo(void(*prints)(const char *), void(*printc)(unsigned char data)) {
     a4e:	ef 92       	push	r14
     a50:	ff 92       	push	r15
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	cd b7       	in	r28, 0x3d	; 61
     a5c:	de b7       	in	r29, 0x3e	; 62
     a5e:	c4 56       	subi	r28, 0x64	; 100
     a60:	d0 40       	sbci	r29, 0x00	; 0
     a62:	0f b6       	in	r0, 0x3f	; 63
     a64:	f8 94       	cli
     a66:	de bf       	out	0x3e, r29	; 62
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	cd bf       	out	0x3d, r28	; 61
     a6c:	7c 01       	movw	r14, r24
	char buff[100];
	prints("info\r\n");
     a6e:	8f e5       	ldi	r24, 0x5F	; 95
     a70:	91 e0       	ldi	r25, 0x01	; 1
     a72:	f7 01       	movw	r30, r14
     a74:	09 95       	icall
	sprintf(buff,"STATUS: %02X\r\n", nrf24l01_getstatus()); prints(buff);
     a76:	0e 94 21 05 	call	0xa42	; 0xa42 <nrf24l01_getstatus>
     a7a:	00 d0       	rcall	.+0      	; 0xa7c <nrf24l01_printinfo+0x2e>
     a7c:	00 d0       	rcall	.+0      	; 0xa7e <nrf24l01_printinfo+0x30>
     a7e:	00 d0       	rcall	.+0      	; 0xa80 <nrf24l01_printinfo+0x32>
     a80:	ed b7       	in	r30, 0x3d	; 61
     a82:	fe b7       	in	r31, 0x3e	; 62
     a84:	31 96       	adiw	r30, 0x01	; 1
     a86:	8e 01       	movw	r16, r28
     a88:	0f 5f       	subi	r16, 0xFF	; 255
     a8a:	1f 4f       	sbci	r17, 0xFF	; 255
     a8c:	ad b7       	in	r26, 0x3d	; 61
     a8e:	be b7       	in	r27, 0x3e	; 62
     a90:	12 96       	adiw	r26, 0x02	; 2
     a92:	1c 93       	st	X, r17
     a94:	0e 93       	st	-X, r16
     a96:	11 97       	sbiw	r26, 0x01	; 1
     a98:	26 e6       	ldi	r18, 0x66	; 102
     a9a:	31 e0       	ldi	r19, 0x01	; 1
     a9c:	33 83       	std	Z+3, r19	; 0x03
     a9e:	22 83       	std	Z+2, r18	; 0x02
     aa0:	84 83       	std	Z+4, r24	; 0x04
     aa2:	15 82       	std	Z+5, r1	; 0x05
     aa4:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <sprintf>
     aa8:	8d b7       	in	r24, 0x3d	; 61
     aaa:	9e b7       	in	r25, 0x3e	; 62
     aac:	06 96       	adiw	r24, 0x06	; 6
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	f8 94       	cli
     ab2:	9e bf       	out	0x3e, r25	; 62
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	8d bf       	out	0x3d, r24	; 61
     ab8:	c8 01       	movw	r24, r16
     aba:	f7 01       	movw	r30, r14
     abc:	09 95       	icall
	sprintf(buff,"CONFIG: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_CONFIG)); prints(buff);
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	0e 94 cb 03 	call	0x796	; 0x796 <nrf24l01_readregister>
     ac4:	00 d0       	rcall	.+0      	; 0xac6 <nrf24l01_printinfo+0x78>
     ac6:	00 d0       	rcall	.+0      	; 0xac8 <nrf24l01_printinfo+0x7a>
     ac8:	00 d0       	rcall	.+0      	; 0xaca <nrf24l01_printinfo+0x7c>
     aca:	ed b7       	in	r30, 0x3d	; 61
     acc:	fe b7       	in	r31, 0x3e	; 62
     ace:	31 96       	adiw	r30, 0x01	; 1
     ad0:	ad b7       	in	r26, 0x3d	; 61
     ad2:	be b7       	in	r27, 0x3e	; 62
     ad4:	12 96       	adiw	r26, 0x02	; 2
     ad6:	1c 93       	st	X, r17
     ad8:	0e 93       	st	-X, r16
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	25 e7       	ldi	r18, 0x75	; 117
     ade:	31 e0       	ldi	r19, 0x01	; 1
     ae0:	33 83       	std	Z+3, r19	; 0x03
     ae2:	22 83       	std	Z+2, r18	; 0x02
     ae4:	84 83       	std	Z+4, r24	; 0x04
     ae6:	15 82       	std	Z+5, r1	; 0x05
     ae8:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <sprintf>
     aec:	8d b7       	in	r24, 0x3d	; 61
     aee:	9e b7       	in	r25, 0x3e	; 62
     af0:	06 96       	adiw	r24, 0x06	; 6
     af2:	0f b6       	in	r0, 0x3f	; 63
     af4:	f8 94       	cli
     af6:	9e bf       	out	0x3e, r25	; 62
     af8:	0f be       	out	0x3f, r0	; 63
     afa:	8d bf       	out	0x3d, r24	; 61
     afc:	c8 01       	movw	r24, r16
     afe:	f7 01       	movw	r30, r14
     b00:	09 95       	icall
	sprintf(buff,"RF_CH: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_CH)); prints(buff);
     b02:	85 e0       	ldi	r24, 0x05	; 5
     b04:	0e 94 cb 03 	call	0x796	; 0x796 <nrf24l01_readregister>
     b08:	00 d0       	rcall	.+0      	; 0xb0a <nrf24l01_printinfo+0xbc>
     b0a:	00 d0       	rcall	.+0      	; 0xb0c <nrf24l01_printinfo+0xbe>
     b0c:	00 d0       	rcall	.+0      	; 0xb0e <nrf24l01_printinfo+0xc0>
     b0e:	ed b7       	in	r30, 0x3d	; 61
     b10:	fe b7       	in	r31, 0x3e	; 62
     b12:	31 96       	adiw	r30, 0x01	; 1
     b14:	ad b7       	in	r26, 0x3d	; 61
     b16:	be b7       	in	r27, 0x3e	; 62
     b18:	12 96       	adiw	r26, 0x02	; 2
     b1a:	1c 93       	st	X, r17
     b1c:	0e 93       	st	-X, r16
     b1e:	11 97       	sbiw	r26, 0x01	; 1
     b20:	24 e8       	ldi	r18, 0x84	; 132
     b22:	31 e0       	ldi	r19, 0x01	; 1
     b24:	33 83       	std	Z+3, r19	; 0x03
     b26:	22 83       	std	Z+2, r18	; 0x02
     b28:	84 83       	std	Z+4, r24	; 0x04
     b2a:	15 82       	std	Z+5, r1	; 0x05
     b2c:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <sprintf>
     b30:	8d b7       	in	r24, 0x3d	; 61
     b32:	9e b7       	in	r25, 0x3e	; 62
     b34:	06 96       	adiw	r24, 0x06	; 6
     b36:	0f b6       	in	r0, 0x3f	; 63
     b38:	f8 94       	cli
     b3a:	9e bf       	out	0x3e, r25	; 62
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	8d bf       	out	0x3d, r24	; 61
     b40:	c8 01       	movw	r24, r16
     b42:	f7 01       	movw	r30, r14
     b44:	09 95       	icall
	sprintf(buff,"RF_SETUP: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_SETUP)); prints(buff);
     b46:	86 e0       	ldi	r24, 0x06	; 6
     b48:	0e 94 cb 03 	call	0x796	; 0x796 <nrf24l01_readregister>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <nrf24l01_printinfo+0x100>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <nrf24l01_printinfo+0x102>
     b50:	00 d0       	rcall	.+0      	; 0xb52 <nrf24l01_printinfo+0x104>
     b52:	ed b7       	in	r30, 0x3d	; 61
     b54:	fe b7       	in	r31, 0x3e	; 62
     b56:	31 96       	adiw	r30, 0x01	; 1
     b58:	ad b7       	in	r26, 0x3d	; 61
     b5a:	be b7       	in	r27, 0x3e	; 62
     b5c:	12 96       	adiw	r26, 0x02	; 2
     b5e:	1c 93       	st	X, r17
     b60:	0e 93       	st	-X, r16
     b62:	11 97       	sbiw	r26, 0x01	; 1
     b64:	22 e9       	ldi	r18, 0x92	; 146
     b66:	31 e0       	ldi	r19, 0x01	; 1
     b68:	33 83       	std	Z+3, r19	; 0x03
     b6a:	22 83       	std	Z+2, r18	; 0x02
     b6c:	84 83       	std	Z+4, r24	; 0x04
     b6e:	15 82       	std	Z+5, r1	; 0x05
     b70:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <sprintf>
     b74:	8d b7       	in	r24, 0x3d	; 61
     b76:	9e b7       	in	r25, 0x3e	; 62
     b78:	06 96       	adiw	r24, 0x06	; 6
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	9e bf       	out	0x3e, r25	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	8d bf       	out	0x3d, r24	; 61
     b84:	c8 01       	movw	r24, r16
     b86:	f7 01       	movw	r30, r14
     b88:	09 95       	icall
	sprintf(buff,"EN_AA: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_AA)); prints(buff);
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	0e 94 cb 03 	call	0x796	; 0x796 <nrf24l01_readregister>
     b90:	00 d0       	rcall	.+0      	; 0xb92 <nrf24l01_printinfo+0x144>
     b92:	00 d0       	rcall	.+0      	; 0xb94 <nrf24l01_printinfo+0x146>
     b94:	00 d0       	rcall	.+0      	; 0xb96 <nrf24l01_printinfo+0x148>
     b96:	ed b7       	in	r30, 0x3d	; 61
     b98:	fe b7       	in	r31, 0x3e	; 62
     b9a:	31 96       	adiw	r30, 0x01	; 1
     b9c:	ad b7       	in	r26, 0x3d	; 61
     b9e:	be b7       	in	r27, 0x3e	; 62
     ba0:	12 96       	adiw	r26, 0x02	; 2
     ba2:	1c 93       	st	X, r17
     ba4:	0e 93       	st	-X, r16
     ba6:	11 97       	sbiw	r26, 0x01	; 1
     ba8:	23 ea       	ldi	r18, 0xA3	; 163
     baa:	31 e0       	ldi	r19, 0x01	; 1
     bac:	33 83       	std	Z+3, r19	; 0x03
     bae:	22 83       	std	Z+2, r18	; 0x02
     bb0:	84 83       	std	Z+4, r24	; 0x04
     bb2:	15 82       	std	Z+5, r1	; 0x05
     bb4:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <sprintf>
     bb8:	8d b7       	in	r24, 0x3d	; 61
     bba:	9e b7       	in	r25, 0x3e	; 62
     bbc:	06 96       	adiw	r24, 0x06	; 6
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	f8 94       	cli
     bc2:	9e bf       	out	0x3e, r25	; 62
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	8d bf       	out	0x3d, r24	; 61
     bc8:	c8 01       	movw	r24, r16
     bca:	f7 01       	movw	r30, r14
     bcc:	09 95       	icall
	sprintf(buff,"EN_RXADDR: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_RXADDR)); prints(buff);
     bce:	82 e0       	ldi	r24, 0x02	; 2
     bd0:	0e 94 cb 03 	call	0x796	; 0x796 <nrf24l01_readregister>
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <nrf24l01_printinfo+0x188>
     bd6:	00 d0       	rcall	.+0      	; 0xbd8 <nrf24l01_printinfo+0x18a>
     bd8:	00 d0       	rcall	.+0      	; 0xbda <nrf24l01_printinfo+0x18c>
     bda:	ed b7       	in	r30, 0x3d	; 61
     bdc:	fe b7       	in	r31, 0x3e	; 62
     bde:	31 96       	adiw	r30, 0x01	; 1
     be0:	ad b7       	in	r26, 0x3d	; 61
     be2:	be b7       	in	r27, 0x3e	; 62
     be4:	12 96       	adiw	r26, 0x02	; 2
     be6:	1c 93       	st	X, r17
     be8:	0e 93       	st	-X, r16
     bea:	11 97       	sbiw	r26, 0x01	; 1
     bec:	21 eb       	ldi	r18, 0xB1	; 177
     bee:	31 e0       	ldi	r19, 0x01	; 1
     bf0:	33 83       	std	Z+3, r19	; 0x03
     bf2:	22 83       	std	Z+2, r18	; 0x02
     bf4:	84 83       	std	Z+4, r24	; 0x04
     bf6:	15 82       	std	Z+5, r1	; 0x05
     bf8:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <sprintf>
     bfc:	8d b7       	in	r24, 0x3d	; 61
     bfe:	9e b7       	in	r25, 0x3e	; 62
     c00:	06 96       	adiw	r24, 0x06	; 6
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	9e bf       	out	0x3e, r25	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	8d bf       	out	0x3d, r24	; 61
     c0c:	c8 01       	movw	r24, r16
     c0e:	f7 01       	movw	r30, r14
     c10:	09 95       	icall
	sprintf(buff,"OBSERVE_TX: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_OBSERVE_TX)); prints(buff);
     c12:	88 e0       	ldi	r24, 0x08	; 8
     c14:	0e 94 cb 03 	call	0x796	; 0x796 <nrf24l01_readregister>
     c18:	00 d0       	rcall	.+0      	; 0xc1a <nrf24l01_printinfo+0x1cc>
     c1a:	00 d0       	rcall	.+0      	; 0xc1c <nrf24l01_printinfo+0x1ce>
     c1c:	00 d0       	rcall	.+0      	; 0xc1e <nrf24l01_printinfo+0x1d0>
     c1e:	ed b7       	in	r30, 0x3d	; 61
     c20:	fe b7       	in	r31, 0x3e	; 62
     c22:	31 96       	adiw	r30, 0x01	; 1
     c24:	ad b7       	in	r26, 0x3d	; 61
     c26:	be b7       	in	r27, 0x3e	; 62
     c28:	12 96       	adiw	r26, 0x02	; 2
     c2a:	1c 93       	st	X, r17
     c2c:	0e 93       	st	-X, r16
     c2e:	11 97       	sbiw	r26, 0x01	; 1
     c30:	23 ec       	ldi	r18, 0xC3	; 195
     c32:	31 e0       	ldi	r19, 0x01	; 1
     c34:	33 83       	std	Z+3, r19	; 0x03
     c36:	22 83       	std	Z+2, r18	; 0x02
     c38:	84 83       	std	Z+4, r24	; 0x04
     c3a:	15 82       	std	Z+5, r1	; 0x05
     c3c:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <sprintf>
     c40:	8d b7       	in	r24, 0x3d	; 61
     c42:	9e b7       	in	r25, 0x3e	; 62
     c44:	06 96       	adiw	r24, 0x06	; 6
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	f8 94       	cli
     c4a:	9e bf       	out	0x3e, r25	; 62
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	8d bf       	out	0x3d, r24	; 61
     c50:	c8 01       	movw	r24, r16
     c52:	f7 01       	movw	r30, r14
     c54:	09 95       	icall
	prints("\r\n");
     c56:	86 ed       	ldi	r24, 0xD6	; 214
     c58:	91 e0       	ldi	r25, 0x01	; 1
     c5a:	f7 01       	movw	r30, r14
     c5c:	09 95       	icall
}
     c5e:	cc 59       	subi	r28, 0x9C	; 156
     c60:	df 4f       	sbci	r29, 0xFF	; 255
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	df 91       	pop	r29
     c6e:	cf 91       	pop	r28
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	08 95       	ret

00000c7a <nrf24l01_readready>:
}

/*
 * check if there is data ready
 */
uint8_t nrf24l01_readready(uint8_t* pipe) {
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
     c7e:	ec 01       	movw	r28, r24
    uint8_t status = nrf24l01_getstatus();
     c80:	0e 94 21 05 	call	0xa42	; 0xa42 <nrf24l01_getstatus>
    uint8_t ret = status & (1<<NRF24L01_REG_RX_DR);
    if(ret) {
     c84:	98 2f       	mov	r25, r24
     c86:	90 74       	andi	r25, 0x40	; 64
     c88:	86 ff       	sbrs	r24, 6
     c8a:	05 c0       	rjmp	.+10     	; 0xc96 <nrf24l01_readready+0x1c>
		//get the pipe number
		if(pipe)
     c8c:	20 97       	sbiw	r28, 0x00	; 0
     c8e:	19 f0       	breq	.+6      	; 0xc96 <nrf24l01_readready+0x1c>
			*pipe = (status >> NRF24L01_REG_RX_P_NO) & 0b111;
     c90:	86 95       	lsr	r24
     c92:	87 70       	andi	r24, 0x07	; 7
     c94:	88 83       	st	Y, r24
    }
    return ret;
}
     c96:	89 2f       	mov	r24, r25
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	08 95       	ret

00000c9e <nrf24l01_read>:

/*
 * get data
 */
void nrf24l01_read(uint8_t pipe,uint8_t *data) {
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	06 2f       	mov	r16, r22
     ca8:	17 2f       	mov	r17, r23
	uint8_t i = 0;
	//read rx register
	nrf24l01_CSNlo; //low CSN
     caa:	ae 98       	cbi	0x15, 6	; 21
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
     cac:	81 e6       	ldi	r24, 0x61	; 97
     cae:	0e 94 95 09 	call	0x132a	; 0x132a <spi_writereadbyte>
     cb2:	c0 2f       	mov	r28, r16
     cb4:	d1 2f       	mov	r29, r17
	//Thay doi lai command, lay PAYLOAD va write ACK
	//spi_writereadbyte(NRF24L01_CMD_W_ACK_PAYLOAD | pipe);
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     cb6:	10 e0       	ldi	r17, 0x00	; 0
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
     cb8:	8f ef       	ldi	r24, 0xFF	; 255
     cba:	0e 94 95 09 	call	0x132a	; 0x132a <spi_writereadbyte>
     cbe:	89 93       	st	Y+, r24
	//read rx register
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
	//Thay doi lai command, lay PAYLOAD va write ACK
	//spi_writereadbyte(NRF24L01_CMD_W_ACK_PAYLOAD | pipe);
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     cc0:	1f 5f       	subi	r17, 0xFF	; 255
     cc2:	19 30       	cpi	r17, 0x09	; 9
     cc4:	c9 f7       	brne	.-14     	; 0xcb8 <nrf24l01_read+0x1a>
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
    nrf24l01_CSNhi; //high CSN
     cc6:	ae 9a       	sbi	0x15, 6	; 21
    //reset register
    nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR));
     cc8:	87 e0       	ldi	r24, 0x07	; 7
     cca:	60 e4       	ldi	r22, 0x40	; 64
     ccc:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
    //handle ack payload receipt
	if (nrf24l01_getstatus() & (1<<NRF24L01_REG_TX_DS))
     cd0:	0e 94 21 05 	call	0xa42	; 0xa42 <nrf24l01_getstatus>
     cd4:	85 ff       	sbrs	r24, 5
     cd6:	04 c0       	rjmp	.+8      	; 0xce0 <nrf24l01_read+0x42>
		nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_TX_DS));
     cd8:	87 e0       	ldi	r24, 0x07	; 7
     cda:	60 e2       	ldi	r22, 0x20	; 32
     cdc:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
}
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	1f 91       	pop	r17
     ce6:	0f 91       	pop	r16
     ce8:	08 95       	ret

00000cea <nrf24l01_write>:

/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	08 2f       	mov	r16, r24
     cf4:	19 2f       	mov	r17, r25
	uint8_t i = 0;
	uint8_t ret = 0;

	//set tx mode
	nrf24l01_setTX();
     cf6:	0e 94 06 05 	call	0xa0c	; 0xa0c <nrf24l01_setTX>

	//write data
	nrf24l01_CSNlo; //low CSN
     cfa:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
     cfc:	80 ea       	ldi	r24, 0xA0	; 160
     cfe:	0e 94 95 09 	call	0x132a	; 0x132a <spi_writereadbyte>
     d02:	c0 2f       	mov	r28, r16
     d04:	d1 2f       	mov	r29, r17
     d06:	19 e0       	ldi	r17, 0x09	; 9
	for (i=0; i<NRF24L01_PAYLOAD; i++)
		spi_writereadbyte(data[i]);
     d08:	89 91       	ld	r24, Y+
     d0a:	0e 94 95 09 	call	0x132a	; 0x132a <spi_writereadbyte>
     d0e:	11 50       	subi	r17, 0x01	; 1
	nrf24l01_setTX();

	//write data
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
	for (i=0; i<NRF24L01_PAYLOAD; i++)
     d10:	d9 f7       	brne	.-10     	; 0xd08 <nrf24l01_write+0x1e>
		spi_writereadbyte(data[i]);
	nrf24l01_CSNhi; //high CSN
     d12:	ae 9a       	sbi	0x15, 6	; 21

	//start transmission
	nrf24l01_CEhi; //high CE
     d14:	af 9a       	sbi	0x15, 7	; 21
     d16:	85 e0       	ldi	r24, 0x05	; 5
     d18:	8a 95       	dec	r24
     d1a:	f1 f7       	brne	.-4      	; 0xd18 <nrf24l01_write+0x2e>
	_delay_us(15);
	nrf24l01_CElo; //low CE
     d1c:	af 98       	cbi	0x15, 7	; 21
     d1e:	83 e0       	ldi	r24, 0x03	; 3
     d20:	8a 95       	dec	r24
     d22:	f1 f7       	brne	.-4      	; 0xd20 <nrf24l01_write+0x36>
     d24:	00 00       	nop

	//stop if max_retries reached or send is ok
	do {
		_delay_us(10);
	}
	while( !(nrf24l01_getstatus() & (1<<NRF24L01_REG_MAX_RT | 1<<NRF24L01_REG_TX_DS)) );
     d26:	0e 94 21 05 	call	0xa42	; 0xa42 <nrf24l01_getstatus>
     d2a:	80 73       	andi	r24, 0x30	; 48
     d2c:	c1 f3       	breq	.-16     	; 0xd1e <nrf24l01_write+0x34>

	if(nrf24l01_getstatus() & 1<<NRF24L01_REG_TX_DS)
     d2e:	0e 94 21 05 	call	0xa42	; 0xa42 <nrf24l01_getstatus>
     d32:	c8 2f       	mov	r28, r24
		ret = 1;

	//reset PLOS_CNT
	nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH);
     d34:	85 e0       	ldi	r24, 0x05	; 5
     d36:	6c e4       	ldi	r22, 0x4C	; 76
     d38:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>

	//power down
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PWR_UP));
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	0e 94 cb 03 	call	0x796	; 0x796 <nrf24l01_readregister>
     d42:	68 2f       	mov	r22, r24
     d44:	6d 7f       	andi	r22, 0xFD	; 253
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>

	//set rx mode
	nrf24l01_setRX();
     d4c:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <nrf24l01_setRX>
/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
	uint8_t i = 0;
	uint8_t ret = 0;
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	c5 ff       	sbrs	r28, 5
     d54:	80 e0       	ldi	r24, 0x00	; 0

	//set rx mode
	nrf24l01_setRX();

	return ret;
}
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	1f 91       	pop	r17
     d5c:	0f 91       	pop	r16
     d5e:	08 95       	ret

00000d60 <nrf24l01_setpalevel>:

/*
 * set power level
 */
void nrf24l01_setpalevel() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP);
     d60:	86 e0       	ldi	r24, 0x06	; 6
     d62:	0e 94 cb 03 	call	0x796	; 0x796 <nrf24l01_readregister>
  setup &= ~((1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH));

  if (NRF24L01_RF24_PA == NRF24L01_RF24_PA_MAX) {
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
     d66:	68 2f       	mov	r22, r24
     d68:	66 60       	ori	r22, 0x06	; 6
  } else {
	  //default is max power
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     d6a:	86 e0       	ldi	r24, 0x06	; 6
     d6c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
}
     d70:	08 95       	ret

00000d72 <nrf24l01_setdatarate>:

/*
 * set datarate
 */
void nrf24l01_setdatarate() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP) ;
     d72:	86 e0       	ldi	r24, 0x06	; 6
     d74:	0e 94 cb 03 	call	0x796	; 0x796 <nrf24l01_readregister>

  setup &= ~((1<<NRF24L01_REG_RF_DR_LOW) | (1<<NRF24L01_REG_RF_DR_HIGH));
     d78:	68 2f       	mov	r22, r24
     d7a:	67 7d       	andi	r22, 0xD7	; 215
    } else {
    	//default is 1Mbps
    }
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     d7c:	86 e0       	ldi	r24, 0x06	; 6
     d7e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
}
     d82:	08 95       	ret

00000d84 <nrf24l01_setcrclength>:

/*
 * set crc length
 */
void nrf24l01_setcrclength() {
  uint8_t config = nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~((1<<NRF24L01_REG_CRCO) | (1<<NRF24L01_REG_EN_CRC));
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	0e 94 cb 03 	call	0x796	; 0x796 <nrf24l01_readregister>
	  //nothing
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_8) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_16) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
	  config |= (1<<NRF24L01_REG_CRCO);
     d8a:	68 2f       	mov	r22, r24
     d8c:	6c 60       	ori	r22, 0x0C	; 12
  } else {
	  //default is disabled
  }

  nrf24l01_writeregister(NRF24L01_REG_CONFIG, config);
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
}
     d94:	08 95       	ret

00000d96 <nrf24l01_init>:
/*
 * init nrf24l01
 */
void nrf24l01_init() {
	//setup port
	NRF24L01_DDR |= (1<<NRF24L01_CSN); //output
     d96:	a6 9a       	sbi	0x14, 6	; 20
	NRF24L01_DDR |= (1<<NRF24L01_CE); //output
     d98:	a7 9a       	sbi	0x14, 7	; 20

    spi_init(); //init spi
     d9a:	0e 94 8a 09 	call	0x1314	; 0x1314 <spi_init>

    nrf24l01_CElo; //low CE
     d9e:	af 98       	cbi	0x15, 7	; 21
    nrf24l01_CSNhi; //high CSN
     da0:	ae 9a       	sbi	0x15, 6	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     da2:	81 ee       	ldi	r24, 0xE1	; 225
     da4:	94 e0       	ldi	r25, 0x04	; 4
     da6:	01 97       	sbiw	r24, 0x01	; 1
     da8:	f1 f7       	brne	.-4      	; 0xda6 <nrf24l01_init+0x10>
     daa:	00 c0       	rjmp	.+0      	; 0xdac <nrf24l01_init+0x16>
     dac:	00 00       	nop

    _delay_ms(5); //wait for the radio to init

    nrf24l01_setpalevel(); //set power level
     dae:	0e 94 b0 06 	call	0xd60	; 0xd60 <nrf24l01_setpalevel>
    nrf24l01_setdatarate(); //set data rate
     db2:	0e 94 b9 06 	call	0xd72	; 0xd72 <nrf24l01_setdatarate>
    nrf24l01_setcrclength(); //set crc length
     db6:	0e 94 c2 06 	call	0xd84	; 0xd84 <nrf24l01_setcrclength>
    nrf24l01_writeregister(NRF24L01_REG_SETUP_RETR, NRF24L01_RETR); // set retries
     dba:	84 e0       	ldi	r24, 0x04	; 4
     dbc:	67 e4       	ldi	r22, 0x47	; 71
     dbe:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_DYNPD, 0); //disable dynamic payloads
     dc2:	8c e1       	ldi	r24, 0x1C	; 28
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH); //set RF channel
     dca:	85 e0       	ldi	r24, 0x05	; 5
     dcc:	6c e4       	ldi	r22, 0x4C	; 76
     dce:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>

	//payload size
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P0, NRF24L01_PAYLOAD);
     dd2:	81 e1       	ldi	r24, 0x11	; 17
     dd4:	69 e0       	ldi	r22, 0x09	; 9
     dd6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P1, NRF24L01_PAYLOAD);
     dda:	82 e1       	ldi	r24, 0x12	; 18
     ddc:	69 e0       	ldi	r22, 0x09	; 9
     dde:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P2, NRF24L01_PAYLOAD);
     de2:	83 e1       	ldi	r24, 0x13	; 19
     de4:	69 e0       	ldi	r22, 0x09	; 9
     de6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P3, NRF24L01_PAYLOAD);
     dea:	84 e1       	ldi	r24, 0x14	; 20
     dec:	69 e0       	ldi	r22, 0x09	; 9
     dee:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P4, NRF24L01_PAYLOAD);
     df2:	85 e1       	ldi	r24, 0x15	; 21
     df4:	69 e0       	ldi	r22, 0x09	; 9
     df6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P5, NRF24L01_PAYLOAD);
     dfa:	86 e1       	ldi	r24, 0x16	; 22
     dfc:	69 e0       	ldi	r22, 0x09	; 9
     dfe:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
	#endif

	//enable pipe
	nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, 0);
     e02:	82 e0       	ldi	r24, 0x02	; 2
     e04:	60 e0       	ldi	r22, 0x00	; 0
     e06:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P0));
     e0a:	82 e0       	ldi	r24, 0x02	; 2
     e0c:	0e 94 cb 03 	call	0x796	; 0x796 <nrf24l01_readregister>
     e10:	68 2f       	mov	r22, r24
     e12:	61 60       	ori	r22, 0x01	; 1
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P1));
     e1a:	82 e0       	ldi	r24, 0x02	; 2
     e1c:	0e 94 cb 03 	call	0x796	; 0x796 <nrf24l01_readregister>
     e20:	68 2f       	mov	r22, r24
     e22:	62 60       	ori	r22, 0x02	; 2
     e24:	82 e0       	ldi	r24, 0x02	; 2
     e26:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P2));
     e2a:	82 e0       	ldi	r24, 0x02	; 2
     e2c:	0e 94 cb 03 	call	0x796	; 0x796 <nrf24l01_readregister>
     e30:	68 2f       	mov	r22, r24
     e32:	64 60       	ori	r22, 0x04	; 4
     e34:	82 e0       	ldi	r24, 0x02	; 2
     e36:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P3));
     e3a:	82 e0       	ldi	r24, 0x02	; 2
     e3c:	0e 94 cb 03 	call	0x796	; 0x796 <nrf24l01_readregister>
     e40:	68 2f       	mov	r22, r24
     e42:	68 60       	ori	r22, 0x08	; 8
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P4));
     e4a:	82 e0       	ldi	r24, 0x02	; 2
     e4c:	0e 94 cb 03 	call	0x796	; 0x796 <nrf24l01_readregister>
     e50:	68 2f       	mov	r22, r24
     e52:	60 61       	ori	r22, 0x10	; 16
     e54:	82 e0       	ldi	r24, 0x02	; 2
     e56:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P5));
     e5a:	82 e0       	ldi	r24, 0x02	; 2
     e5c:	0e 94 cb 03 	call	0x796	; 0x796 <nrf24l01_readregister>
     e60:	68 2f       	mov	r22, r24
     e62:	60 62       	ori	r22, 0x20	; 32
     e64:	82 e0       	ldi	r24, 0x02	; 2
     e66:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
	#endif

	//auto ack
	#if NRF24L01_ACK == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P0));
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	0e 94 cb 03 	call	0x796	; 0x796 <nrf24l01_readregister>
     e70:	68 2f       	mov	r22, r24
     e72:	61 60       	ori	r22, 0x01	; 1
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P1));
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	0e 94 cb 03 	call	0x796	; 0x796 <nrf24l01_readregister>
     e80:	68 2f       	mov	r22, r24
     e82:	62 60       	ori	r22, 0x02	; 2
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P2));
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	0e 94 cb 03 	call	0x796	; 0x796 <nrf24l01_readregister>
     e90:	68 2f       	mov	r22, r24
     e92:	64 60       	ori	r22, 0x04	; 4
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P3));
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	0e 94 cb 03 	call	0x796	; 0x796 <nrf24l01_readregister>
     ea0:	68 2f       	mov	r22, r24
     ea2:	68 60       	ori	r22, 0x08	; 8
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P4));
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	0e 94 cb 03 	call	0x796	; 0x796 <nrf24l01_readregister>
     eb0:	68 2f       	mov	r22, r24
     eb2:	60 61       	ori	r22, 0x10	; 16
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P5));
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	0e 94 cb 03 	call	0x796	; 0x796 <nrf24l01_readregister>
     ec0:	68 2f       	mov	r22, r24
     ec2:	60 62       	ori	r22, 0x20	; 32
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P4));
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P5));
	#endif

	//rx address
	nrf24l01_setrxaddr(0, nrf24l01_addr0);
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	69 ed       	ldi	r22, 0xD9	; 217
     ece:	71 e0       	ldi	r23, 0x01	; 1
     ed0:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(1, nrf24l01_addr1);
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	6e ed       	ldi	r22, 0xDE	; 222
     ed8:	71 e0       	ldi	r23, 0x01	; 1
     eda:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(2, nrf24l01_addr2);
     ede:	82 e0       	ldi	r24, 0x02	; 2
     ee0:	63 ee       	ldi	r22, 0xE3	; 227
     ee2:	71 e0       	ldi	r23, 0x01	; 1
     ee4:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(3, nrf24l01_addr3);
     ee8:	83 e0       	ldi	r24, 0x03	; 3
     eea:	68 ee       	ldi	r22, 0xE8	; 232
     eec:	71 e0       	ldi	r23, 0x01	; 1
     eee:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(4, nrf24l01_addr4);
     ef2:	84 e0       	ldi	r24, 0x04	; 4
     ef4:	6d ee       	ldi	r22, 0xED	; 237
     ef6:	71 e0       	ldi	r23, 0x01	; 1
     ef8:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(5, nrf24l01_addr5);
     efc:	85 e0       	ldi	r24, 0x05	; 5
     efe:	62 ef       	ldi	r22, 0xF2	; 242
     f00:	71 e0       	ldi	r23, 0x01	; 1
     f02:	0e 94 30 04 	call	0x860	; 0x860 <nrf24l01_setrxaddr>

	//tx address
	nrf24l01_settxaddr(nrf24l01_addrtx);
     f06:	87 ef       	ldi	r24, 0xF7	; 247
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	0e 94 ad 04 	call	0x95a	; 0x95a <nrf24l01_settxaddr>

	//set rx mode
	nrf24l01_setRX();
     f0e:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <nrf24l01_setRX>
}
     f12:	08 95       	ret

00000f14 <sMR_init>:
static void clearInEvents(SMR* handle);
static void clearOutEvents(SMR* handle);


void sMR_init(SMR* handle)
{
     f14:	fc 01       	movw	r30, r24
	int i;

	for (i = 0; i < SMR_MAX_ORTHOGONAL_STATES; ++i)
		handle->stateConfVector[i] = SMR_last_state;
     f16:	87 e0       	ldi	r24, 0x07	; 7
     f18:	80 83       	st	Z, r24
	
	
	handle->stateConfVectorPosition = 0;
     f1a:	12 82       	std	Z+2, r1	; 0x02
     f1c:	11 82       	std	Z+1, r1	; 0x01

	// TODO: initialize all events ...
	// TODO: initialize all variables ... (set default values - here or inenter sequence ?!?)

}
     f1e:	08 95       	ret

00000f20 <sMR_enter>:

void sMR_enter(SMR* handle)
{
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	ec 01       	movw	r28, r24
	sMR_entryaction(handle);
	/* Default enter sequence for region main region */
	/* Default react sequence for initial entry  */
	/* Default enter sequence for state on */
	/* Entry action for state 'on'. */
	handle->iface.lightOn = bool_true;
     f28:	11 e0       	ldi	r17, 0x01	; 1
     f2a:	1c a7       	lds	r17, 0x7c
	/* Default enter sequence for region r1 */
	/* Default react sequence for initial entry  */
	/* Default enter sequence for state Init */
	/* Entry action for state 'Init'. */
	sMR_setTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) , 1 * 1000, bool_false);
     f2c:	c7 96       	adiw	r24, 0x37	; 55
     f2e:	48 ee       	ldi	r20, 0xE8	; 232
     f30:	53 e0       	ldi	r21, 0x03	; 3
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	0e 94 3c 03 	call	0x678	; 0x678 <sMR_setTimer>
	handle->iface.tableId = 1;
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	a0 e0       	ldi	r26, 0x00	; 0
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	89 ab       	sts	0x59, r24
     f46:	9a ab       	sts	0x5a, r25
     f48:	ab ab       	sts	0x5b, r26
     f4a:	bc ab       	sts	0x5c, r27
	sMRIfaceLCD_init();
     f4c:	0e 94 23 02 	call	0x446	; 0x446 <sMRIfaceLCD_init>
	sMRIfaceRF_init();
     f50:	0e 94 42 03 	call	0x684	; 0x684 <sMRIfaceRF_init>
	sMRIfaceUART_init();
     f54:	0e 94 34 03 	call	0x668	; 0x668 <sMRIfaceUART_init>
	sMRIfaceLCD_clear();
     f58:	0e 94 1a 02 	call	0x434	; 0x434 <sMRIfaceLCD_clear>
	sMRIfaceLCD_writeString("Waitting...");
     f5c:	8c ef       	ldi	r24, 0xFC	; 252
     f5e:	91 e0       	ldi	r25, 0x01	; 1
     f60:	0e 94 e7 01 	call	0x3ce	; 0x3ce <sMRIfaceLCD_writeString>
	handle->stateConfVector[0] = SMR_main_region_on_r1_Init;
     f64:	18 83       	st	Y, r17
	handle->stateConfVectorPosition = 0;
     f66:	1a 82       	std	Y+2, r1	; 0x02
     f68:	19 82       	std	Y+1, r1	; 0x01
}
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	1f 91       	pop	r17
     f70:	08 95       	ret

00000f72 <sMR_exit>:

void sMR_exit(SMR* handle)
{
     f72:	fc 01       	movw	r30, r24
	/* Default exit sequence for statechart SMR */
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of main region) at position 0... */
	switch(handle->stateConfVector[ 0 ]) {
     f74:	80 81       	ld	r24, Z
     f76:	84 30       	cpi	r24, 0x04	; 4
     f78:	d1 f0       	breq	.+52     	; 0xfae <sMR_exit+0x3c>
     f7a:	85 30       	cpi	r24, 0x05	; 5
     f7c:	28 f4       	brcc	.+10     	; 0xf88 <sMR_exit+0x16>
     f7e:	81 30       	cpi	r24, 0x01	; 1
     f80:	41 f0       	breq	.+16     	; 0xf92 <sMR_exit+0x20>
     f82:	83 30       	cpi	r24, 0x03	; 3
     f84:	11 f5       	brne	.+68     	; 0xfca <sMR_exit+0x58>
     f86:	0e c0       	rjmp	.+28     	; 0xfa4 <sMR_exit+0x32>
     f88:	85 30       	cpi	r24, 0x05	; 5
     f8a:	b1 f0       	breq	.+44     	; 0xfb8 <sMR_exit+0x46>
     f8c:	86 30       	cpi	r24, 0x06	; 6
     f8e:	e9 f4       	brne	.+58     	; 0xfca <sMR_exit+0x58>
     f90:	18 c0       	rjmp	.+48     	; 0xfc2 <sMR_exit+0x50>
		case SMR_main_region_on_r1_Init : {
			/* Default exit sequence for state Init */
			handle->stateConfVector[0] = SMR_last_state;
     f92:	87 e0       	ldi	r24, 0x07	; 7
     f94:	80 83       	st	Z, r24
			handle->stateConfVectorPosition = 0;
     f96:	12 82       	std	Z+2, r1	; 0x02
     f98:	11 82       	std	Z+1, r1	; 0x01
			/* Exit action for state 'Init'. */
			sMR_unsetTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) );		
     f9a:	cf 01       	movw	r24, r30
     f9c:	c7 96       	adiw	r24, 0x37	; 55
     f9e:	0e 94 3f 03 	call	0x67e	; 0x67e <sMR_unsetTimer>
			break;
     fa2:	08 95       	ret
		}
		case SMR_main_region_on_r1_running_main_ShowMsg : {
			/* Default exit sequence for state ShowMsg */
			handle->stateConfVector[0] = SMR_last_state;
     fa4:	87 e0       	ldi	r24, 0x07	; 7
     fa6:	80 83       	st	Z, r24
			handle->stateConfVectorPosition = 0;
     fa8:	12 82       	std	Z+2, r1	; 0x02
     faa:	11 82       	std	Z+1, r1	; 0x01
			break;
     fac:	08 95       	ret
		}
		case SMR_main_region_on_r1_running_main_CheckData : {
			/* Default exit sequence for state CheckData */
			handle->stateConfVector[0] = SMR_last_state;
     fae:	87 e0       	ldi	r24, 0x07	; 7
     fb0:	80 83       	st	Z, r24
			handle->stateConfVectorPosition = 0;
     fb2:	12 82       	std	Z+2, r1	; 0x02
     fb4:	11 82       	std	Z+1, r1	; 0x01
			break;
     fb6:	08 95       	ret
		}
		case SMR_main_region_on_r1_running_main_DataReceived : {
			/* Default exit sequence for state DataReceived */
			handle->stateConfVector[0] = SMR_last_state;
     fb8:	87 e0       	ldi	r24, 0x07	; 7
     fba:	80 83       	st	Z, r24
			handle->stateConfVectorPosition = 0;
     fbc:	12 82       	std	Z+2, r1	; 0x02
     fbe:	11 82       	std	Z+1, r1	; 0x01
			break;
     fc0:	08 95       	ret
		}
		case SMR_main_region_on_r1_running_main_SendCheck : {
			/* Default exit sequence for state SendCheck */
			handle->stateConfVector[0] = SMR_last_state;
     fc2:	87 e0       	ldi	r24, 0x07	; 7
     fc4:	80 83       	st	Z, r24
			handle->stateConfVectorPosition = 0;
     fc6:	12 82       	std	Z+2, r1	; 0x02
     fc8:	11 82       	std	Z+1, r1	; 0x01
     fca:	08 95       	ret

00000fcc <sMR_runCycle>:
}

static void clearOutEvents(SMR* handle) {
}

void sMR_runCycle(SMR* handle) {
     fcc:	0f 93       	push	r16
     fce:	1f 93       	push	r17
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	ec 01       	movw	r28, r24
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
     fd6:	1a 82       	std	Y+2, r1	; 0x02
     fd8:	19 82       	std	Y+1, r1	; 0x01
		handle->stateConfVectorPosition < SMR_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
			
		switch (handle->stateConfVector[handle->stateConfVectorPosition]) {
     fda:	88 81       	ld	r24, Y
     fdc:	84 30       	cpi	r24, 0x04	; 4
     fde:	b9 f1       	breq	.+110    	; 0x104e <sMR_runCycle+0x82>
     fe0:	85 30       	cpi	r24, 0x05	; 5
     fe2:	30 f4       	brcc	.+12     	; 0xff0 <sMR_runCycle+0x24>
     fe4:	81 30       	cpi	r24, 0x01	; 1
     fe6:	59 f0       	breq	.+22     	; 0xffe <sMR_runCycle+0x32>
     fe8:	83 30       	cpi	r24, 0x03	; 3
     fea:	09 f0       	breq	.+2      	; 0xfee <sMR_runCycle+0x22>
     fec:	7f c0       	rjmp	.+254    	; 0x10ec <sMR_runCycle+0x120>
     fee:	22 c0       	rjmp	.+68     	; 0x1034 <sMR_runCycle+0x68>
     ff0:	85 30       	cpi	r24, 0x05	; 5
     ff2:	09 f4       	brne	.+2      	; 0xff6 <sMR_runCycle+0x2a>
     ff4:	51 c0       	rjmp	.+162    	; 0x1098 <sMR_runCycle+0xcc>
     ff6:	86 30       	cpi	r24, 0x06	; 6
     ff8:	09 f0       	breq	.+2      	; 0xffc <sMR_runCycle+0x30>
     ffa:	78 c0       	rjmp	.+240    	; 0x10ec <sMR_runCycle+0x120>
     ffc:	59 c0       	rjmp	.+178    	; 0x10b0 <sMR_runCycle+0xe4>
}

/* The reactions of state Init. */
static void sMR_react_main_region_on_r1_Init(SMR* handle) {
	/* The reactions of state Init. */
	if (handle->timeEvents.Init_time_event_0_raised) { 
     ffe:	8f a9       	sts	0x4f, r24
    1000:	88 23       	and	r24, r24
    1002:	09 f4       	brne	.+2      	; 0x1006 <sMR_runCycle+0x3a>
    1004:	73 c0       	rjmp	.+230    	; 0x10ec <sMR_runCycle+0x120>
		/* Default exit sequence for state Init */
		handle->stateConfVector[0] = SMR_last_state;
    1006:	87 e0       	ldi	r24, 0x07	; 7
    1008:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    100a:	1a 82       	std	Y+2, r1	; 0x02
    100c:	19 82       	std	Y+1, r1	; 0x01
		/* Exit action for state 'Init'. */
		sMR_unsetTimer( (sc_eventid) &(handle->timeEvents.Init_time_event_0_raised) );		
    100e:	ce 01       	movw	r24, r28
    1010:	c7 96       	adiw	r24, 0x37	; 55
    1012:	0e 94 3f 03 	call	0x67e	; 0x67e <sMR_unsetTimer>
		/* Default enter sequence for state running */
		/* Default enter sequence for region main */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state ShowMsg */
		/* Entry action for state 'ShowMsg'. */
		sMRIfaceLCD_writeStringXY("Waiting for data", 0, 0);
    1016:	88 e0       	ldi	r24, 0x08	; 8
    1018:	92 e0       	ldi	r25, 0x02	; 2
    101a:	40 e0       	ldi	r20, 0x00	; 0
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	ba 01       	movw	r22, r20
    1020:	00 e0       	ldi	r16, 0x00	; 0
    1022:	10 e0       	ldi	r17, 0x00	; 0
    1024:	98 01       	movw	r18, r16
    1026:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <sMRIfaceLCD_writeStringXY>
		handle->stateConfVector[0] = SMR_main_region_on_r1_running_main_ShowMsg;
    102a:	83 e0       	ldi	r24, 0x03	; 3
    102c:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    102e:	1a 82       	std	Y+2, r1	; 0x02
    1030:	19 82       	std	Y+1, r1	; 0x01
    1032:	6e c0       	rjmp	.+220    	; 0x1110 <__stack+0x11>
/* The reactions of state ShowMsg. */
static void sMR_react_main_region_on_r1_running_main_ShowMsg(SMR* handle) {
	/* The reactions of state ShowMsg. */
	if (bool_true) { 
		/* Default exit sequence for state ShowMsg */
		handle->stateConfVector[0] = SMR_last_state;
    1034:	87 e0       	ldi	r24, 0x07	; 7
    1036:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    1038:	1a 82       	std	Y+2, r1	; 0x02
    103a:	19 82       	std	Y+1, r1	; 0x01
		/* Default enter sequence for state CheckData */
		/* Entry action for state 'CheckData'. */
		handle->ifaceRF.data = sMRIfaceRF_getData();
    103c:	0e 94 27 02 	call	0x44e	; 0x44e <sMRIfaceRF_getData>
    1040:	9b 8b       	std	Y+19, r25	; 0x13
    1042:	8a 8b       	std	Y+18, r24	; 0x12
		handle->stateConfVector[0] = SMR_main_region_on_r1_running_main_CheckData;
    1044:	84 e0       	ldi	r24, 0x04	; 4
    1046:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    1048:	1a 82       	std	Y+2, r1	; 0x02
    104a:	19 82       	std	Y+1, r1	; 0x01
    104c:	61 c0       	rjmp	.+194    	; 0x1110 <__stack+0x11>
}

/* The reactions of state CheckData. */
static void sMR_react_main_region_on_r1_running_main_CheckData(SMR* handle) {
	/* The reactions of state CheckData. */
	if ((strcmp(handle->ifaceRF.data, "") != 0)
    104e:	ea 89       	ldd	r30, Y+18	; 0x12
    1050:	fb 89       	ldd	r31, Y+19	; 0x13
    1052:	80 81       	ld	r24, Z
    1054:	88 23       	and	r24, r24
    1056:	b9 f0       	breq	.+46     	; 0x1086 <sMR_runCycle+0xba>
	) { 
		/* Default exit sequence for state CheckData */
		handle->stateConfVector[0] = SMR_last_state;
    1058:	87 e0       	ldi	r24, 0x07	; 7
    105a:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    105c:	1a 82       	std	Y+2, r1	; 0x02
    105e:	19 82       	std	Y+1, r1	; 0x01
		/* Default enter sequence for state DataReceived */
		/* Entry action for state 'DataReceived'. */
		sMRIfaceLCD_writeStringXY(handle->ifaceRF.data, 0, 1);
    1060:	cf 01       	movw	r24, r30
    1062:	40 e0       	ldi	r20, 0x00	; 0
    1064:	50 e0       	ldi	r21, 0x00	; 0
    1066:	ba 01       	movw	r22, r20
    1068:	01 e0       	ldi	r16, 0x01	; 1
    106a:	10 e0       	ldi	r17, 0x00	; 0
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <sMRIfaceLCD_writeStringXY>
		sMRIfaceUART_sendMsg(handle->ifaceRF.data);
    1074:	8a 89       	ldd	r24, Y+18	; 0x12
    1076:	9b 89       	ldd	r25, Y+19	; 0x13
    1078:	0e 94 39 03 	call	0x672	; 0x672 <sMRIfaceUART_sendMsg>
		handle->stateConfVector[0] = SMR_main_region_on_r1_running_main_DataReceived;
    107c:	85 e0       	ldi	r24, 0x05	; 5
    107e:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    1080:	1a 82       	std	Y+2, r1	; 0x02
    1082:	19 82       	std	Y+1, r1	; 0x01
    1084:	45 c0       	rjmp	.+138    	; 0x1110 <__stack+0x11>
	}  else {
		if ((strcmp(handle->ifaceRF.data, "") == 0)
		) { 
			/* Default enter sequence for state CheckData */
			/* Entry action for state 'CheckData'. */
			handle->ifaceRF.data = sMRIfaceRF_getData();
    1086:	0e 94 27 02 	call	0x44e	; 0x44e <sMRIfaceRF_getData>
    108a:	9b 8b       	std	Y+19, r25	; 0x13
    108c:	8a 8b       	std	Y+18, r24	; 0x12
			handle->stateConfVector[0] = SMR_main_region_on_r1_running_main_CheckData;
    108e:	84 e0       	ldi	r24, 0x04	; 4
    1090:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    1092:	1a 82       	std	Y+2, r1	; 0x02
    1094:	19 82       	std	Y+1, r1	; 0x01
    1096:	3c c0       	rjmp	.+120    	; 0x1110 <__stack+0x11>
/* The reactions of state DataReceived. */
static void sMR_react_main_region_on_r1_running_main_DataReceived(SMR* handle) {
	/* The reactions of state DataReceived. */
	if (bool_true) { 
		/* Default exit sequence for state DataReceived */
		handle->stateConfVector[0] = SMR_last_state;
    1098:	87 e0       	ldi	r24, 0x07	; 7
    109a:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    109c:	1a 82       	std	Y+2, r1	; 0x02
    109e:	19 82       	std	Y+1, r1	; 0x01
		/* Default enter sequence for state SendCheck */
		/* Entry action for state 'SendCheck'. */
		handle->ifaceRF.result = sMRIfaceRF_sendCheck();
    10a0:	0e 94 92 02 	call	0x524	; 0x524 <sMRIfaceRF_sendCheck>
    10a4:	8e 8b       	std	Y+22, r24	; 0x16
		handle->stateConfVector[0] = SMR_main_region_on_r1_running_main_SendCheck;
    10a6:	86 e0       	ldi	r24, 0x06	; 6
    10a8:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    10aa:	1a 82       	std	Y+2, r1	; 0x02
    10ac:	19 82       	std	Y+1, r1	; 0x01
    10ae:	30 c0       	rjmp	.+96     	; 0x1110 <__stack+0x11>
}

/* The reactions of state SendCheck. */
static void sMR_react_main_region_on_r1_running_main_SendCheck(SMR* handle) {
	/* The reactions of state SendCheck. */
	if (handle->ifaceRF.result == bool_false) { 
    10b0:	8e 89       	ldd	r24, Y+22	; 0x16
    10b2:	88 23       	and	r24, r24
    10b4:	41 f4       	brne	.+16     	; 0x10c6 <sMR_runCycle+0xfa>
		/* Default enter sequence for state SendCheck */
		/* Entry action for state 'SendCheck'. */
		handle->ifaceRF.result = sMRIfaceRF_sendCheck();
    10b6:	0e 94 92 02 	call	0x524	; 0x524 <sMRIfaceRF_sendCheck>
    10ba:	8e 8b       	std	Y+22, r24	; 0x16
		handle->stateConfVector[0] = SMR_main_region_on_r1_running_main_SendCheck;
    10bc:	86 e0       	ldi	r24, 0x06	; 6
    10be:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    10c0:	1a 82       	std	Y+2, r1	; 0x02
    10c2:	19 82       	std	Y+1, r1	; 0x01
    10c4:	25 c0       	rjmp	.+74     	; 0x1110 <__stack+0x11>
	}  else {
		if (handle->ifaceRF.result == bool_true) { 
			/* Default exit sequence for state SendCheck */
			handle->stateConfVector[0] = SMR_last_state;
    10c6:	87 e0       	ldi	r24, 0x07	; 7
    10c8:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    10ca:	1a 82       	std	Y+2, r1	; 0x02
    10cc:	19 82       	std	Y+1, r1	; 0x01
			/* Default enter sequence for state ShowMsg */
			/* Entry action for state 'ShowMsg'. */
			sMRIfaceLCD_writeStringXY("Waiting for data", 0, 0);
    10ce:	88 e0       	ldi	r24, 0x08	; 8
    10d0:	92 e0       	ldi	r25, 0x02	; 2
    10d2:	40 e0       	ldi	r20, 0x00	; 0
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    10d6:	ba 01       	movw	r22, r20
    10d8:	00 e0       	ldi	r16, 0x00	; 0
    10da:	10 e0       	ldi	r17, 0x00	; 0
    10dc:	98 01       	movw	r18, r16
    10de:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <sMRIfaceLCD_writeStringXY>
			handle->stateConfVector[0] = SMR_main_region_on_r1_running_main_ShowMsg;
    10e2:	83 e0       	ldi	r24, 0x03	; 3
    10e4:	88 83       	st	Y, r24
			handle->stateConfVectorPosition = 0;
    10e6:	1a 82       	std	Y+2, r1	; 0x02
    10e8:	19 82       	std	Y+1, r1	; 0x01
    10ea:	12 c0       	rjmp	.+36     	; 0x1110 <__stack+0x11>
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMR_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	9a 81       	ldd	r25, Y+2	; 0x02
    10f0:	01 96       	adiw	r24, 0x01	; 1
    10f2:	9a 83       	std	Y+2, r25	; 0x02
    10f4:	89 83       	std	Y+1, r24	; 0x01

void sMR_runCycle(SMR* handle) {
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
    10f6:	00 97       	sbiw	r24, 0x00	; 0
    10f8:	09 f4       	brne	.+2      	; 0x10fc <sMR_runCycle+0x130>
    10fa:	6f cf       	rjmp	.-290    	; 0xfda <sMR_runCycle+0xe>
	}
	sMR_exitaction(handle);
}

static void clearInEvents(SMR* handle) {
	handle->ifaceKEYPAD.key_pressed_raised = bool_false;
    10fc:	1c 86       	std	Y+12, r1	; 0x0c
	handle->ifaceUART.DataRecieved_raised = bool_false;
    10fe:	19 8a       	std	Y+17, r1	; 0x11
	handle->ifaceRF.DataRecieved_raised = bool_false;
    1100:	1f 8e       	std	Y+31, r1	; 0x1f
	handle->iface.switchOff_raised = bool_false;
    1102:	1d aa       	sts	0x9d, r17
	handle->iface.switchOn_raised = bool_false;
    1104:	1e aa       	sts	0x9e, r17
			break;
		}
	}
	
	clearInEvents(handle);
}
    1106:	df 91       	pop	r29
    1108:	cf 91       	pop	r28
    110a:	1f 91       	pop	r17
    110c:	0f 91       	pop	r16
    110e:	08 95       	ret
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMR_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	9a 81       	ldd	r25, Y+2	; 0x02
    1114:	01 96       	adiw	r24, 0x01	; 1
    1116:	9a 83       	std	Y+2, r25	; 0x02
    1118:	89 83       	std	Y+1, r24	; 0x01
    111a:	f0 cf       	rjmp	.-32     	; 0x10fc <sMR_runCycle+0x130>

0000111c <sMR_raiseTimeEvent>:
	
	clearInEvents(handle);
}

void sMR_raiseTimeEvent(SMR* handle, sc_eventid evid) {
	if ( ((intptr_t)evid) >= ((intptr_t)&(handle->timeEvents))
    111c:	c7 96       	adiw	r24, 0x37	; 55
    111e:	68 17       	cp	r22, r24
    1120:	79 07       	cpc	r23, r25
    1122:	3c f0       	brlt	.+14     	; 0x1132 <sMR_raiseTimeEvent+0x16>
		&&  ((intptr_t)evid) < ((intptr_t)&(handle->timeEvents)) + sizeof(SMRTimeEvents)) {
    1124:	01 96       	adiw	r24, 0x01	; 1
    1126:	68 17       	cp	r22, r24
    1128:	79 07       	cpc	r23, r25
    112a:	18 f4       	brcc	.+6      	; 0x1132 <sMR_raiseTimeEvent+0x16>
		*(sc_boolean*)evid = bool_true;
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	fb 01       	movw	r30, r22
    1130:	80 83       	st	Z, r24
    1132:	08 95       	ret

00001134 <sMR_isActive>:
	}		
}

sc_boolean sMR_isActive(SMR* handle, SMRStates state) {
    1134:	fc 01       	movw	r30, r24
	switch (state) {
    1136:	63 30       	cpi	r22, 0x03	; 3
    1138:	09 f1       	breq	.+66     	; 0x117c <sMR_isActive+0x48>
    113a:	64 30       	cpi	r22, 0x04	; 4
    113c:	28 f4       	brcc	.+10     	; 0x1148 <sMR_isActive+0x14>
    113e:	61 30       	cpi	r22, 0x01	; 1
    1140:	81 f0       	breq	.+32     	; 0x1162 <sMR_isActive+0x2e>
    1142:	62 30       	cpi	r22, 0x02	; 2
    1144:	a0 f4       	brcc	.+40     	; 0x116e <sMR_isActive+0x3a>
    1146:	07 c0       	rjmp	.+14     	; 0x1156 <sMR_isActive+0x22>
    1148:	65 30       	cpi	r22, 0x05	; 5
    114a:	21 f1       	breq	.+72     	; 0x1194 <sMR_isActive+0x60>
    114c:	65 30       	cpi	r22, 0x05	; 5
    114e:	e0 f0       	brcs	.+56     	; 0x1188 <sMR_isActive+0x54>
    1150:	66 30       	cpi	r22, 0x06	; 6
    1152:	61 f5       	brne	.+88     	; 0x11ac <sMR_isActive+0x78>
    1154:	25 c0       	rjmp	.+74     	; 0x11a0 <sMR_isActive+0x6c>
		case SMR_main_region_on : 
			return (sc_boolean) (handle->stateConfVector[0] >= SMR_main_region_on
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 81       	ld	r25, Z
    115a:	97 30       	cpi	r25, 0x07	; 7
    115c:	40 f1       	brcs	.+80     	; 0x11ae <sMR_isActive+0x7a>
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	08 95       	ret
				&& handle->stateConfVector[0] <= SMR_main_region_on_r1_running_main_SendCheck);
		case SMR_main_region_on_r1_Init : 
			return (sc_boolean) (handle->stateConfVector[0] == SMR_main_region_on_r1_Init
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 81       	ld	r25, Z
    1166:	91 30       	cpi	r25, 0x01	; 1
    1168:	11 f1       	breq	.+68     	; 0x11ae <sMR_isActive+0x7a>
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	08 95       	ret
			);
		case SMR_main_region_on_r1_running : 
			return (sc_boolean) (handle->stateConfVector[0] >= SMR_main_region_on_r1_running
    116e:	90 81       	ld	r25, Z
    1170:	92 50       	subi	r25, 0x02	; 2
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	95 30       	cpi	r25, 0x05	; 5
    1176:	d8 f0       	brcs	.+54     	; 0x11ae <sMR_isActive+0x7a>
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	08 95       	ret
				&& handle->stateConfVector[0] <= SMR_main_region_on_r1_running_main_SendCheck);
		case SMR_main_region_on_r1_running_main_ShowMsg : 
			return (sc_boolean) (handle->stateConfVector[0] == SMR_main_region_on_r1_running_main_ShowMsg
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 81       	ld	r25, Z
    1180:	93 30       	cpi	r25, 0x03	; 3
    1182:	a9 f0       	breq	.+42     	; 0x11ae <sMR_isActive+0x7a>
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	08 95       	ret
			);
		case SMR_main_region_on_r1_running_main_CheckData : 
			return (sc_boolean) (handle->stateConfVector[0] == SMR_main_region_on_r1_running_main_CheckData
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 81       	ld	r25, Z
    118c:	94 30       	cpi	r25, 0x04	; 4
    118e:	79 f0       	breq	.+30     	; 0x11ae <sMR_isActive+0x7a>
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	08 95       	ret
			);
		case SMR_main_region_on_r1_running_main_DataReceived : 
			return (sc_boolean) (handle->stateConfVector[0] == SMR_main_region_on_r1_running_main_DataReceived
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 81       	ld	r25, Z
    1198:	95 30       	cpi	r25, 0x05	; 5
    119a:	49 f0       	breq	.+18     	; 0x11ae <sMR_isActive+0x7a>
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	08 95       	ret
			);
		case SMR_main_region_on_r1_running_main_SendCheck : 
			return (sc_boolean) (handle->stateConfVector[0] == SMR_main_region_on_r1_running_main_SendCheck
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 81       	ld	r25, Z
    11a4:	96 30       	cpi	r25, 0x06	; 6
    11a6:	19 f0       	breq	.+6      	; 0x11ae <sMR_isActive+0x7a>
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	08 95       	ret
			);
		default: return bool_false;
    11ac:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    11ae:	08 95       	ret

000011b0 <sMRIfaceKEYPAD_raise_key_pressed>:



void sMRIfaceKEYPAD_raise_key_pressed(SMR* handle) {
	handle->ifaceKEYPAD.key_pressed_raised = bool_true;
    11b0:	21 e0       	ldi	r18, 0x01	; 1
    11b2:	fc 01       	movw	r30, r24
    11b4:	24 87       	std	Z+12, r18	; 0x0c
}
    11b6:	08 95       	ret

000011b8 <sMRIfaceKEYPAD_get_key>:


sc_integer sMRIfaceKEYPAD_get_key(SMR* handle) {
    11b8:	fc 01       	movw	r30, r24
	return handle->ifaceKEYPAD.key;
    11ba:	63 81       	ldd	r22, Z+3	; 0x03
    11bc:	74 81       	ldd	r23, Z+4	; 0x04
}
    11be:	85 81       	ldd	r24, Z+5	; 0x05
    11c0:	96 81       	ldd	r25, Z+6	; 0x06
    11c2:	08 95       	ret

000011c4 <sMRIfaceKEYPAD_set_key>:
void sMRIfaceKEYPAD_set_key(SMR* handle, sc_integer value) {
	handle->ifaceKEYPAD.key = value;
    11c4:	fc 01       	movw	r30, r24
    11c6:	43 83       	std	Z+3, r20	; 0x03
    11c8:	54 83       	std	Z+4, r21	; 0x04
    11ca:	65 83       	std	Z+5, r22	; 0x05
    11cc:	76 83       	std	Z+6, r23	; 0x06
}
    11ce:	08 95       	ret

000011d0 <sMRIfaceKEYPAD_get_lastkey>:
sc_integer sMRIfaceKEYPAD_get_lastkey(SMR* handle) {
    11d0:	fc 01       	movw	r30, r24
	return handle->ifaceKEYPAD.lastkey;
    11d2:	67 81       	ldd	r22, Z+7	; 0x07
    11d4:	70 85       	ldd	r23, Z+8	; 0x08
}
    11d6:	81 85       	ldd	r24, Z+9	; 0x09
    11d8:	92 85       	ldd	r25, Z+10	; 0x0a
    11da:	08 95       	ret

000011dc <sMRIfaceKEYPAD_set_lastkey>:
void sMRIfaceKEYPAD_set_lastkey(SMR* handle, sc_integer value) {
	handle->ifaceKEYPAD.lastkey = value;
    11dc:	fc 01       	movw	r30, r24
    11de:	47 83       	std	Z+7, r20	; 0x07
    11e0:	50 87       	std	Z+8, r21	; 0x08
    11e2:	61 87       	std	Z+9, r22	; 0x09
    11e4:	72 87       	std	Z+10, r23	; 0x0a
}
    11e6:	08 95       	ret

000011e8 <sMRIfaceKEYPAD_get_key_down>:
sc_boolean sMRIfaceKEYPAD_get_key_down(SMR* handle) {
	return handle->ifaceKEYPAD.key_down;
}
    11e8:	fc 01       	movw	r30, r24
    11ea:	83 85       	ldd	r24, Z+11	; 0x0b
    11ec:	08 95       	ret

000011ee <sMRIfaceKEYPAD_set_key_down>:
void sMRIfaceKEYPAD_set_key_down(SMR* handle, sc_boolean value) {
	handle->ifaceKEYPAD.key_down = value;
    11ee:	fc 01       	movw	r30, r24
    11f0:	63 87       	std	Z+11, r22	; 0x0b
}
    11f2:	08 95       	ret

000011f4 <sMRIfaceUART_raise_dataRecieved>:
void sMRIfaceUART_raise_dataRecieved(SMR* handle) {
	handle->ifaceUART.DataRecieved_raised = bool_true;
    11f4:	21 e0       	ldi	r18, 0x01	; 1
    11f6:	fc 01       	movw	r30, r24
    11f8:	21 8b       	std	Z+17, r18	; 0x11
}
    11fa:	08 95       	ret

000011fc <sMRIfaceUART_get_data>:


sc_string sMRIfaceUART_get_data(SMR* handle) {
    11fc:	fc 01       	movw	r30, r24
	return handle->ifaceUART.data;
}
    11fe:	85 85       	ldd	r24, Z+13	; 0x0d
    1200:	96 85       	ldd	r25, Z+14	; 0x0e
    1202:	08 95       	ret

00001204 <sMRIfaceUART_set_data>:
void sMRIfaceUART_set_data(SMR* handle, sc_string value) {
	handle->ifaceUART.data = value;
    1204:	fc 01       	movw	r30, r24
    1206:	76 87       	std	Z+14, r23	; 0x0e
    1208:	65 87       	std	Z+13, r22	; 0x0d
}
    120a:	08 95       	ret

0000120c <sMRIfaceUART_get_lastdata>:
sc_string sMRIfaceUART_get_lastdata(SMR* handle) {
    120c:	fc 01       	movw	r30, r24
	return handle->ifaceUART.lastdata;
}
    120e:	87 85       	ldd	r24, Z+15	; 0x0f
    1210:	90 89       	ldd	r25, Z+16	; 0x10
    1212:	08 95       	ret

00001214 <sMRIfaceUART_set_lastdata>:
void sMRIfaceUART_set_lastdata(SMR* handle, sc_string value) {
	handle->ifaceUART.lastdata = value;
    1214:	fc 01       	movw	r30, r24
    1216:	70 8b       	std	Z+16, r23	; 0x10
    1218:	67 87       	std	Z+15, r22	; 0x0f
}
    121a:	08 95       	ret

0000121c <sMRIfaceRF_raise_dataRecieved>:
void sMRIfaceRF_raise_dataRecieved(SMR* handle) {
	handle->ifaceRF.DataRecieved_raised = bool_true;
    121c:	21 e0       	ldi	r18, 0x01	; 1
    121e:	fc 01       	movw	r30, r24
    1220:	27 8f       	std	Z+31, r18	; 0x1f
}
    1222:	08 95       	ret

00001224 <sMRIfaceRF_get_data>:


sc_string sMRIfaceRF_get_data(SMR* handle) {
    1224:	fc 01       	movw	r30, r24
	return handle->ifaceRF.data;
}
    1226:	82 89       	ldd	r24, Z+18	; 0x12
    1228:	93 89       	ldd	r25, Z+19	; 0x13
    122a:	08 95       	ret

0000122c <sMRIfaceRF_set_data>:
void sMRIfaceRF_set_data(SMR* handle, sc_string value) {
	handle->ifaceRF.data = value;
    122c:	fc 01       	movw	r30, r24
    122e:	73 8b       	std	Z+19, r23	; 0x13
    1230:	62 8b       	std	Z+18, r22	; 0x12
}
    1232:	08 95       	ret

00001234 <sMRIfaceRF_get_lastdata>:
sc_string sMRIfaceRF_get_lastdata(SMR* handle) {
    1234:	fc 01       	movw	r30, r24
	return handle->ifaceRF.lastdata;
}
    1236:	84 89       	ldd	r24, Z+20	; 0x14
    1238:	95 89       	ldd	r25, Z+21	; 0x15
    123a:	08 95       	ret

0000123c <sMRIfaceRF_set_lastdata>:
void sMRIfaceRF_set_lastdata(SMR* handle, sc_string value) {
	handle->ifaceRF.lastdata = value;
    123c:	fc 01       	movw	r30, r24
    123e:	75 8b       	std	Z+21, r23	; 0x15
    1240:	64 8b       	std	Z+20, r22	; 0x14
}
    1242:	08 95       	ret

00001244 <sMRIfaceRF_get_result>:
sc_boolean sMRIfaceRF_get_result(SMR* handle) {
	return handle->ifaceRF.result;
}
    1244:	fc 01       	movw	r30, r24
    1246:	86 89       	ldd	r24, Z+22	; 0x16
    1248:	08 95       	ret

0000124a <sMRIfaceRF_set_result>:
void sMRIfaceRF_set_result(SMR* handle, sc_boolean value) {
	handle->ifaceRF.result = value;
    124a:	fc 01       	movw	r30, r24
    124c:	66 8b       	std	Z+22, r22	; 0x16
}
    124e:	08 95       	ret

00001250 <sMRIfaceRF_get_retry>:
sc_integer sMRIfaceRF_get_retry(SMR* handle) {
    1250:	fc 01       	movw	r30, r24
	return handle->ifaceRF.retry;
    1252:	67 89       	ldd	r22, Z+23	; 0x17
    1254:	70 8d       	ldd	r23, Z+24	; 0x18
}
    1256:	81 8d       	ldd	r24, Z+25	; 0x19
    1258:	92 8d       	ldd	r25, Z+26	; 0x1a
    125a:	08 95       	ret

0000125c <sMRIfaceRF_set_retry>:
void sMRIfaceRF_set_retry(SMR* handle, sc_integer value) {
	handle->ifaceRF.retry = value;
    125c:	fc 01       	movw	r30, r24
    125e:	47 8b       	std	Z+23, r20	; 0x17
    1260:	50 8f       	std	Z+24, r21	; 0x18
    1262:	61 8f       	std	Z+25, r22	; 0x19
    1264:	72 8f       	std	Z+26, r23	; 0x1a
}
    1266:	08 95       	ret

00001268 <sMRIfaceRF_get_iD>:
sc_integer sMRIfaceRF_get_iD(SMR* handle) {
    1268:	fc 01       	movw	r30, r24
	return handle->ifaceRF.ID;
    126a:	63 8d       	ldd	r22, Z+27	; 0x1b
    126c:	74 8d       	ldd	r23, Z+28	; 0x1c
}
    126e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1270:	96 8d       	ldd	r25, Z+30	; 0x1e
    1272:	08 95       	ret

00001274 <sMRIfaceRF_set_iD>:
void sMRIfaceRF_set_iD(SMR* handle, sc_integer value) {
	handle->ifaceRF.ID = value;
    1274:	fc 01       	movw	r30, r24
    1276:	43 8f       	std	Z+27, r20	; 0x1b
    1278:	54 8f       	std	Z+28, r21	; 0x1c
    127a:	65 8f       	std	Z+29, r22	; 0x1d
    127c:	76 8f       	std	Z+30, r23	; 0x1e
}
    127e:	08 95       	ret

00001280 <sMRIfaceDISH_get_iD>:


sc_integer sMRIfaceDISH_get_iD(SMR* handle) {
    1280:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.ID;
    1282:	60 a1       	lds	r22, 0x40
    1284:	71 a1       	lds	r23, 0x41
}
    1286:	82 a1       	lds	r24, 0x42
    1288:	93 a1       	lds	r25, 0x43
    128a:	08 95       	ret

0000128c <sMRIfaceDISH_set_iD>:
void sMRIfaceDISH_set_iD(SMR* handle, sc_integer value) {
	handle->ifaceDISH.ID = value;
    128c:	fc 01       	movw	r30, r24
    128e:	40 a3       	lds	r20, 0x50
    1290:	51 a3       	lds	r21, 0x51
    1292:	62 a3       	lds	r22, 0x52
    1294:	73 a3       	lds	r23, 0x53
}
    1296:	08 95       	ret

00001298 <sMRIfaceDISH_get_amount>:
sc_integer sMRIfaceDISH_get_amount(SMR* handle) {
    1298:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.amount;
    129a:	64 a1       	lds	r22, 0x44
    129c:	75 a1       	lds	r23, 0x45
}
    129e:	86 a1       	lds	r24, 0x46
    12a0:	97 a1       	lds	r25, 0x47
    12a2:	08 95       	ret

000012a4 <sMRIfaceDISH_set_amount>:
void sMRIfaceDISH_set_amount(SMR* handle, sc_integer value) {
	handle->ifaceDISH.amount = value;
    12a4:	fc 01       	movw	r30, r24
    12a6:	44 a3       	lds	r20, 0x54
    12a8:	55 a3       	lds	r21, 0x55
    12aa:	66 a3       	lds	r22, 0x56
    12ac:	77 a3       	lds	r23, 0x57
}
    12ae:	08 95       	ret

000012b0 <sMRIfaceDISH_get_pos>:
sc_integer sMRIfaceDISH_get_pos(SMR* handle) {
    12b0:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.pos;
    12b2:	60 a5       	lds	r22, 0x60
    12b4:	71 a5       	lds	r23, 0x61
}
    12b6:	82 a5       	lds	r24, 0x62
    12b8:	93 a5       	lds	r25, 0x63
    12ba:	08 95       	ret

000012bc <sMRIfaceDISH_set_pos>:
void sMRIfaceDISH_set_pos(SMR* handle, sc_integer value) {
	handle->ifaceDISH.pos = value;
    12bc:	fc 01       	movw	r30, r24
    12be:	40 a7       	lds	r20, 0x70
    12c0:	51 a7       	lds	r21, 0x71
    12c2:	62 a7       	lds	r22, 0x72
    12c4:	73 a7       	lds	r23, 0x73
}
    12c6:	08 95       	ret

000012c8 <sMRIface_raise_switchOff>:
void sMRIface_raise_switchOff(SMR* handle) {
	handle->iface.switchOff_raised = bool_true;
    12c8:	21 e0       	ldi	r18, 0x01	; 1
    12ca:	fc 01       	movw	r30, r24
    12cc:	25 ab       	sts	0x55, r18
}
    12ce:	08 95       	ret

000012d0 <sMRIface_raise_switchOn>:
void sMRIface_raise_switchOn(SMR* handle) {
	handle->iface.switchOn_raised = bool_true;
    12d0:	21 e0       	ldi	r18, 0x01	; 1
    12d2:	fc 01       	movw	r30, r24
    12d4:	26 ab       	sts	0x56, r18
}
    12d6:	08 95       	ret

000012d8 <sMRIface_get_lightOn>:


sc_boolean sMRIface_get_lightOn(SMR* handle) {
	return handle->iface.lightOn;
}
    12d8:	fc 01       	movw	r30, r24
    12da:	84 a5       	lds	r24, 0x64
    12dc:	08 95       	ret

000012de <sMRIface_set_lightOn>:
void sMRIface_set_lightOn(SMR* handle, sc_boolean value) {
	handle->iface.lightOn = value;
    12de:	fc 01       	movw	r30, r24
    12e0:	64 a7       	lds	r22, 0x74
}
    12e2:	08 95       	ret

000012e4 <sMRIface_get_menuId>:
sc_integer sMRIface_get_menuId(SMR* handle) {
    12e4:	fc 01       	movw	r30, r24
	return handle->iface.menuId;
    12e6:	65 a5       	lds	r22, 0x65
    12e8:	76 a5       	lds	r23, 0x66
}
    12ea:	87 a5       	lds	r24, 0x67
    12ec:	90 a9       	sts	0x40, r25
    12ee:	08 95       	ret

000012f0 <sMRIface_set_menuId>:
void sMRIface_set_menuId(SMR* handle, sc_integer value) {
	handle->iface.menuId = value;
    12f0:	fc 01       	movw	r30, r24
    12f2:	45 a7       	lds	r20, 0x75
    12f4:	56 a7       	lds	r21, 0x76
    12f6:	67 a7       	lds	r22, 0x77
    12f8:	70 ab       	sts	0x50, r23
}
    12fa:	08 95       	ret

000012fc <sMRIface_get_tableId>:
sc_integer sMRIface_get_tableId(SMR* handle) {
    12fc:	fc 01       	movw	r30, r24
	return handle->iface.tableId;
    12fe:	61 a9       	sts	0x41, r22
    1300:	72 a9       	sts	0x42, r23
}
    1302:	83 a9       	sts	0x43, r24
    1304:	94 a9       	sts	0x44, r25
    1306:	08 95       	ret

00001308 <sMRIface_set_tableId>:
void sMRIface_set_tableId(SMR* handle, sc_integer value) {
	handle->iface.tableId = value;
    1308:	fc 01       	movw	r30, r24
    130a:	41 ab       	sts	0x51, r20
    130c:	52 ab       	sts	0x52, r21
    130e:	63 ab       	sts	0x53, r22
    1310:	74 ab       	sts	0x54, r23
}
    1312:	08 95       	ret

00001314 <spi_init>:

/*
 * spi initialize
 */
void spi_init() {
    SPI_DDR &= ~((1<<SPI_MOSI) | (1<<SPI_MISO) | (1<<SPI_SS) | (1<<SPI_SCK)); //input
    1314:	87 b3       	in	r24, 0x17	; 23
    1316:	80 7f       	andi	r24, 0xF0	; 240
    1318:	87 bb       	out	0x17, r24	; 23
    SPI_DDR |= ((1<<SPI_MOSI) | (1<<SPI_SS) | (1<<SPI_SCK)); //output
    131a:	87 b3       	in	r24, 0x17	; 23
    131c:	87 60       	ori	r24, 0x07	; 7
    131e:	87 bb       	out	0x17, r24	; 23

    SPCR = ((1<<SPE)|               // SPI Enable
    1320:	81 e5       	ldi	r24, 0x51	; 81
    1322:	8d b9       	out	0x0d, r24	; 13
            (1<<MSTR)|              // Master/Slave select
            (0<<SPR1)|(1<<SPR0)|    // SPI Clock Rate
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR = (1<<SPI2X); // Double SPI Speed Bit
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	8e b9       	out	0x0e, r24	; 14
}
    1328:	08 95       	ret

0000132a <spi_writereadbyte>:

/*
 * spi write one byte and read it back
 */
uint8_t spi_writereadbyte(uint8_t data) {
    SPDR = data;
    132a:	8f b9       	out	0x0f, r24	; 15
    while((SPSR & (1<<SPIF)) == 0);
    132c:	77 9b       	sbis	0x0e, 7	; 14
    132e:	fe cf       	rjmp	.-4      	; 0x132c <spi_writereadbyte+0x2>
    return SPDR;
    1330:	8f b1       	in	r24, 0x0f	; 15
}
    1332:	08 95       	ret

00001334 <TimerInit>:
#include <stdlib.h>
TimeEvent tmrEvent[10];
int tmrCount=0;

void TimerInit() {
	TCCR0 = 0b011; //CS02=0, CS01=1, CS00=0, chon Prescaler=64
    1334:	83 e0       	ldi	r24, 0x03	; 3
    1336:	83 bf       	out	0x33, r24	; 51
	//Xung chip la 8MHZ -> 1 xung mat 1us/8 = 0.125 us
	//Xung chip la 16MHZ -> 1 xung mat 1us/18 = 0.0625 us
	//Prescaler=64, kich 256 lan moi tang 1 lan trong bo dem Timer-> Ton 8us
	//Vay, de Timer ngat moi 1ms, ta can: 1000/8=125 lan dem.
	//Ma Timer ngat khi bo dem toi 255, ta can set gia tri ban dau cho bo dem la: 255-125+1=131
	TCNT0=131;
    1338:	83 e8       	ldi	r24, 0x83	; 131
    133a:	82 bf       	out	0x32, r24	; 50
	TIMSK=(1<<TOIE0); //Cho phep ngat khi cho tran o T/C0
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	87 bf       	out	0x37, r24	; 55
	tmrCount=0;
    1340:	10 92 21 02 	sts	0x0221, r1
    1344:	10 92 20 02 	sts	0x0220, r1
	sei();
    1348:	78 94       	sei
}
    134a:	08 95       	ret

0000134c <TimerSet>:

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
    134c:	cf 92       	push	r12
    134e:	df 92       	push	r13
    1350:	ef 92       	push	r14
    1352:	ff 92       	push	r15
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	ec 01       	movw	r28, r24
    135a:	6a 01       	movw	r12, r20
    135c:	7b 01       	movw	r14, r22
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
    135e:	40 91 20 02 	lds	r20, 0x0220
    1362:	50 91 21 02 	lds	r21, 0x0221
    1366:	14 16       	cp	r1, r20
    1368:	15 06       	cpc	r1, r21
    136a:	e4 f4       	brge	.+56     	; 0x13a4 <TimerSet+0x58>
    136c:	e1 e4       	ldi	r30, 0x41	; 65
    136e:	f2 e0       	ldi	r31, 0x02	; 2
    1370:	df 01       	movw	r26, r30
    1372:	16 96       	adiw	r26, 0x06	; 6
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
	sei();
}

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
    1378:	70 e0       	ldi	r23, 0x00	; 0
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
			check=true;
			tmrEvent[i].count=0;
			tmrEvent[i].max=max;
			tmrEvent[i].enabled=true;
    137a:	61 e0       	ldi	r22, 0x01	; 1

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
    137c:	80 81       	ld	r24, Z
    137e:	91 81       	ldd	r25, Z+1	; 0x01
    1380:	8c 17       	cp	r24, r28
    1382:	9d 07       	cpc	r25, r29
    1384:	31 f4       	brne	.+12     	; 0x1392 <TimerSet+0x46>
			check=true;
			tmrEvent[i].count=0;
    1386:	13 82       	std	Z+3, r1	; 0x03
    1388:	12 82       	std	Z+2, r1	; 0x02
			tmrEvent[i].max=max;
    138a:	d5 82       	std	Z+5, r13	; 0x05
    138c:	c4 82       	std	Z+4, r12	; 0x04
			tmrEvent[i].enabled=true;
    138e:	6c 93       	st	X, r22
//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
			check=true;
    1390:	76 2f       	mov	r23, r22
}

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
    1392:	2f 5f       	subi	r18, 0xFF	; 255
    1394:	3f 4f       	sbci	r19, 0xFF	; 255
    1396:	37 96       	adiw	r30, 0x07	; 7
    1398:	17 96       	adiw	r26, 0x07	; 7
    139a:	24 17       	cp	r18, r20
    139c:	35 07       	cpc	r19, r21
    139e:	74 f3       	brlt	.-36     	; 0x137c <TimerSet+0x30>
			tmrEvent[i].count=0;
			tmrEvent[i].max=max;
			tmrEvent[i].enabled=true;
		}
	}
	if (!check) {
    13a0:	77 23       	and	r23, r23
    13a2:	c9 f4       	brne	.+50     	; 0x13d6 <TimerSet+0x8a>
		tmrEvent[tmrCount].EventId=evenId;
    13a4:	fa 01       	movw	r30, r20
    13a6:	ee 0f       	add	r30, r30
    13a8:	ff 1f       	adc	r31, r31
    13aa:	ee 0f       	add	r30, r30
    13ac:	ff 1f       	adc	r31, r31
    13ae:	ee 0f       	add	r30, r30
    13b0:	ff 1f       	adc	r31, r31
    13b2:	e4 1b       	sub	r30, r20
    13b4:	f5 0b       	sbc	r31, r21
    13b6:	ef 5b       	subi	r30, 0xBF	; 191
    13b8:	fd 4f       	sbci	r31, 0xFD	; 253
    13ba:	d1 83       	std	Z+1, r29	; 0x01
    13bc:	c0 83       	st	Z, r28
		tmrEvent[tmrCount].count=0;
    13be:	13 82       	std	Z+3, r1	; 0x03
    13c0:	12 82       	std	Z+2, r1	; 0x02
		tmrEvent[tmrCount].max=max;
    13c2:	d5 82       	std	Z+5, r13	; 0x05
    13c4:	c4 82       	std	Z+4, r12	; 0x04
		tmrEvent[tmrCount].enabled=true;
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	86 83       	std	Z+6, r24	; 0x06
		tmrCount++;
    13ca:	4f 5f       	subi	r20, 0xFF	; 255
    13cc:	5f 4f       	sbci	r21, 0xFF	; 255
    13ce:	50 93 21 02 	sts	0x0221, r21
    13d2:	40 93 20 02 	sts	0x0220, r20
	}
}
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	ff 90       	pop	r15
    13dc:	ef 90       	pop	r14
    13de:	df 90       	pop	r13
    13e0:	cf 90       	pop	r12
    13e2:	08 95       	ret

000013e4 <TimerUnSet>:

void TimerUnSet(const sc_eventid evenId) {
    13e4:	dc 01       	movw	r26, r24
	for (int i=0;i<tmrCount;i++) {
    13e6:	60 91 20 02 	lds	r22, 0x0220
    13ea:	70 91 21 02 	lds	r23, 0x0221
    13ee:	16 16       	cp	r1, r22
    13f0:	17 06       	cpc	r1, r23
    13f2:	6c f5       	brge	.+90     	; 0x144e <TimerUnSet+0x6a>
		if (tmrEvent[i].EventId==evenId) {
    13f4:	80 91 41 02 	lds	r24, 0x0241
    13f8:	90 91 42 02 	lds	r25, 0x0242
    13fc:	8a 17       	cp	r24, r26
    13fe:	9b 07       	cpc	r25, r27
    1400:	e9 f4       	brne	.+58     	; 0x143c <TimerUnSet+0x58>
    1402:	0a c0       	rjmp	.+20     	; 0x1418 <TimerUnSet+0x34>
    1404:	29 5f       	subi	r18, 0xF9	; 249
    1406:	3f 4f       	sbci	r19, 0xFF	; 255
		tmrEvent[tmrCount].enabled=true;
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
    1408:	f9 01       	movw	r30, r18
    140a:	37 97       	sbiw	r30, 0x07	; 7
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
    140c:	80 81       	ld	r24, Z
    140e:	91 81       	ldd	r25, Z+1	; 0x01
    1410:	8a 17       	cp	r24, r26
    1412:	9b 07       	cpc	r25, r27
    1414:	b9 f4       	brne	.+46     	; 0x1444 <TimerUnSet+0x60>
    1416:	02 c0       	rjmp	.+4      	; 0x141c <TimerUnSet+0x38>
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
	for (int i=0;i<tmrCount;i++) {
    1418:	40 e0       	ldi	r20, 0x00	; 0
    141a:	50 e0       	ldi	r21, 0x00	; 0
		if (tmrEvent[i].EventId==evenId) {
			tmrEvent[i].count=0;
    141c:	fa 01       	movw	r30, r20
    141e:	ee 0f       	add	r30, r30
    1420:	ff 1f       	adc	r31, r31
    1422:	ee 0f       	add	r30, r30
    1424:	ff 1f       	adc	r31, r31
    1426:	ee 0f       	add	r30, r30
    1428:	ff 1f       	adc	r31, r31
    142a:	e4 1b       	sub	r30, r20
    142c:	f5 0b       	sbc	r31, r21
    142e:	ef 5b       	subi	r30, 0xBF	; 191
    1430:	fd 4f       	sbci	r31, 0xFD	; 253
    1432:	13 82       	std	Z+3, r1	; 0x03
    1434:	12 82       	std	Z+2, r1	; 0x02
			tmrEvent[i].enabled=false;
    1436:	16 82       	std	Z+6, r1	; 0x06
			*(sc_boolean*)evenId=bool_false;
    1438:	1c 92       	st	X, r1
			return;
    143a:	08 95       	ret
    143c:	28 e4       	ldi	r18, 0x48	; 72
    143e:	32 e0       	ldi	r19, 0x02	; 2
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
	for (int i=0;i<tmrCount;i++) {
    1440:	40 e0       	ldi	r20, 0x00	; 0
    1442:	50 e0       	ldi	r21, 0x00	; 0
    1444:	4f 5f       	subi	r20, 0xFF	; 255
    1446:	5f 4f       	sbci	r21, 0xFF	; 255
    1448:	46 17       	cp	r20, r22
    144a:	57 07       	cpc	r21, r23
    144c:	d9 f6       	brne	.-74     	; 0x1404 <TimerUnSet+0x20>
    144e:	08 95       	ret

00001450 <TimerCheck>:
			return;
		}
	}
}

void TimerCheck(SMR* handle) {
    1450:	cf 92       	push	r12
    1452:	df 92       	push	r13
    1454:	ef 92       	push	r14
    1456:	ff 92       	push	r15
    1458:	0f 93       	push	r16
    145a:	1f 93       	push	r17
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	6c 01       	movw	r12, r24
	for (int i=0;i<tmrCount;i++) {
    1462:	80 91 20 02 	lds	r24, 0x0220
    1466:	90 91 21 02 	lds	r25, 0x0221
    146a:	18 16       	cp	r1, r24
    146c:	19 06       	cpc	r1, r25
    146e:	94 f5       	brge	.+100    	; 0x14d4 <TimerCheck+0x84>
    1470:	c7 e4       	ldi	r28, 0x47	; 71
    1472:	d2 e0       	ldi	r29, 0x02	; 2
    1474:	8e 01       	movw	r16, r28
    1476:	06 50       	subi	r16, 0x06	; 6
    1478:	10 40       	sbci	r17, 0x00	; 0
    147a:	ee 24       	eor	r14, r14
    147c:	ff 24       	eor	r15, r15
		if (tmrEvent[i].enabled) {
    147e:	88 81       	ld	r24, Y
    1480:	88 23       	and	r24, r24
    1482:	d9 f0       	breq	.+54     	; 0x14ba <TimerCheck+0x6a>
			tmrEvent[i].count++;
    1484:	d8 01       	movw	r26, r16
    1486:	12 96       	adiw	r26, 0x02	; 2
    1488:	8d 91       	ld	r24, X+
    148a:	9c 91       	ld	r25, X
    148c:	13 97       	sbiw	r26, 0x03	; 3
    148e:	01 96       	adiw	r24, 0x01	; 1
    1490:	13 96       	adiw	r26, 0x03	; 3
    1492:	9c 93       	st	X, r25
    1494:	8e 93       	st	-X, r24
    1496:	12 97       	sbiw	r26, 0x02	; 2
			if (tmrEvent[i].count==tmrEvent[i].max) {
    1498:	14 96       	adiw	r26, 0x04	; 4
    149a:	2d 91       	ld	r18, X+
    149c:	3c 91       	ld	r19, X
    149e:	15 97       	sbiw	r26, 0x05	; 5
    14a0:	82 17       	cp	r24, r18
    14a2:	93 07       	cpc	r25, r19
    14a4:	51 f4       	brne	.+20     	; 0x14ba <TimerCheck+0x6a>
				tmrEvent[i].count=0;
    14a6:	13 96       	adiw	r26, 0x03	; 3
    14a8:	1c 92       	st	X, r1
    14aa:	1e 92       	st	-X, r1
    14ac:	12 97       	sbiw	r26, 0x02	; 2
				tmrEvent[i].enabled=false;		
    14ae:	18 82       	st	Y, r1
				sMR_raiseTimeEvent(handle,tmrEvent[i].EventId);
    14b0:	6d 91       	ld	r22, X+
    14b2:	7c 91       	ld	r23, X
    14b4:	c6 01       	movw	r24, r12
    14b6:	0e 94 8e 08 	call	0x111c	; 0x111c <sMR_raiseTimeEvent>
		}
	}
}

void TimerCheck(SMR* handle) {
	for (int i=0;i<tmrCount;i++) {
    14ba:	08 94       	sec
    14bc:	e1 1c       	adc	r14, r1
    14be:	f1 1c       	adc	r15, r1
    14c0:	27 96       	adiw	r28, 0x07	; 7
    14c2:	09 5f       	subi	r16, 0xF9	; 249
    14c4:	1f 4f       	sbci	r17, 0xFF	; 255
    14c6:	80 91 20 02 	lds	r24, 0x0220
    14ca:	90 91 21 02 	lds	r25, 0x0221
    14ce:	e8 16       	cp	r14, r24
    14d0:	f9 06       	cpc	r15, r25
    14d2:	ac f2       	brlt	.-86     	; 0x147e <TimerCheck+0x2e>
				tmrEvent[i].enabled=false;		
				sMR_raiseTimeEvent(handle,tmrEvent[i].EventId);
			}
		}
	}
}
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	1f 91       	pop	r17
    14da:	0f 91       	pop	r16
    14dc:	ff 90       	pop	r15
    14de:	ef 90       	pop	r14
    14e0:	df 90       	pop	r13
    14e2:	cf 90       	pop	r12
    14e4:	08 95       	ret

000014e6 <TimerClear>:

void TimerClear() {
	free(tmrEvent);
    14e6:	81 e4       	ldi	r24, 0x41	; 65
    14e8:	92 e0       	ldi	r25, 0x02	; 2
    14ea:	0e 94 a4 0b 	call	0x1748	; 0x1748 <free>
	tmrCount=0;
    14ee:	10 92 21 02 	sts	0x0221, r1
    14f2:	10 92 20 02 	sts	0x0220, r1
}
    14f6:	08 95       	ret

000014f8 <print>:

void print(int i) {
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <print+0x6>
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <print+0x8>
    1500:	0f 92       	push	r0
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
	char buf[5];
	for (int i=0;i<5;i++) buf[i]=0;
    1506:	19 82       	std	Y+1, r1	; 0x01
    1508:	1a 82       	std	Y+2, r1	; 0x02
    150a:	1b 82       	std	Y+3, r1	; 0x03
    150c:	1c 82       	std	Y+4, r1	; 0x04
    150e:	1d 82       	std	Y+5, r1	; 0x05
	itoa(i,buf,10);
    1510:	be 01       	movw	r22, r28
    1512:	6f 5f       	subi	r22, 0xFF	; 255
    1514:	7f 4f       	sbci	r23, 0xFF	; 255
    1516:	4a e0       	ldi	r20, 0x0A	; 10
    1518:	50 e0       	ldi	r21, 0x00	; 0
    151a:	0e 94 3d 0c 	call	0x187a	; 0x187a <itoa>
	uart_puts(buf);
    151e:	ce 01       	movw	r24, r28
    1520:	01 96       	adiw	r24, 0x01	; 1
    1522:	0e 94 a8 0a 	call	0x1550	; 0x1550 <uart_puts>
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	08 95       	ret

00001536 <UART_Init>:
unsigned char* u_Data;

void UART_Init( unsigned int ubrr )
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
    1536:	90 93 90 00 	sts	0x0090, r25
	UBRR0L = (unsigned char)ubrr;
    153a:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver, transmitter and interrup when receive finish */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);//|(1<<RXCIE0);
    153c:	88 e1       	ldi	r24, 0x18	; 24
    153e:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
    1540:	86 e0       	ldi	r24, 0x06	; 6
    1542:	80 93 95 00 	sts	0x0095, r24
	//sei();
}
    1546:	08 95       	ret

00001548 <uart_putc>:

void uart_putc(unsigned char chr) {
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    1548:	5d 9b       	sbis	0x0b, 5	; 11
    154a:	fe cf       	rjmp	.-4      	; 0x1548 <uart_putc>
	/* Put data into buffer, sends the data */
	UDR0 = chr;
    154c:	8c b9       	out	0x0c, r24	; 12
}
    154e:	08 95       	ret

00001550 <uart_puts>:

void uart_puts(const char* s){
    1550:	cf 93       	push	r28
    1552:	df 93       	push	r29
    1554:	ec 01       	movw	r28, r24
	while(*s != '\0'){
    1556:	88 81       	ld	r24, Y
    1558:	88 23       	and	r24, r24
    155a:	31 f0       	breq	.+12     	; 0x1568 <uart_puts+0x18>
	while ( !( UCSR0A & (1<<UDRE0)) );
	/* Put data into buffer, sends the data */
	UDR0 = chr;
}

void uart_puts(const char* s){
    155c:	21 96       	adiw	r28, 0x01	; 1
	while(*s != '\0'){
		uart_putc(*s);
    155e:	0e 94 a4 0a 	call	0x1548	; 0x1548 <uart_putc>
	/* Put data into buffer, sends the data */
	UDR0 = chr;
}

void uart_puts(const char* s){
	while(*s != '\0'){
    1562:	89 91       	ld	r24, Y+
    1564:	88 23       	and	r24, r24
    1566:	d9 f7       	brne	.-10     	; 0x155e <uart_puts+0xe>
		uart_putc(*s);
		s++;
	}
	uart_putc('\0');
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	0e 94 a4 0a 	call	0x1548	; 0x1548 <uart_putc>
}
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	08 95       	ret

00001574 <uart_gets>:
unsigned char rc[32];
int rc_count=0;
unsigned char* uart_gets() {
	unsigned chr;
	rc_count=0;
    1574:	10 92 23 02 	sts	0x0223, r1
    1578:	10 92 22 02 	sts	0x0222, r1
	do {
		while ( !(UCSR0A & (1<<RXC0)) )
		chr=UDR0;
		rc[rc_count]=chr;
    157c:	47 e8       	ldi	r20, 0x87	; 135
    157e:	52 e0       	ldi	r21, 0x02	; 2
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <uart_gets+0x12>
unsigned char* uart_gets() {
	unsigned chr;
	rc_count=0;
	do {
		while ( !(UCSR0A & (1<<RXC0)) )
		chr=UDR0;
    1582:	2c b1       	in	r18, 0x0c	; 12
    1584:	30 e0       	ldi	r19, 0x00	; 0
int rc_count=0;
unsigned char* uart_gets() {
	unsigned chr;
	rc_count=0;
	do {
		while ( !(UCSR0A & (1<<RXC0)) )
    1586:	5f 9b       	sbis	0x0b, 7	; 11
    1588:	fc cf       	rjmp	.-8      	; 0x1582 <uart_gets+0xe>
		chr=UDR0;
		rc[rc_count]=chr;
    158a:	80 91 22 02 	lds	r24, 0x0222
    158e:	90 91 23 02 	lds	r25, 0x0223
    1592:	fa 01       	movw	r30, r20
    1594:	e8 0f       	add	r30, r24
    1596:	f9 1f       	adc	r31, r25
    1598:	20 83       	st	Z, r18
		rc_count++;
    159a:	01 96       	adiw	r24, 0x01	; 1
    159c:	90 93 23 02 	sts	0x0223, r25
    15a0:	80 93 22 02 	sts	0x0222, r24
		
	} while (chr!='\0' && rc_count<32);
    15a4:	21 15       	cp	r18, r1
    15a6:	31 05       	cpc	r19, r1
    15a8:	19 f0       	breq	.+6      	; 0x15b0 <uart_gets+0x3c>
    15aa:	80 32       	cpi	r24, 0x20	; 32
    15ac:	91 05       	cpc	r25, r1
    15ae:	5c f3       	brlt	.-42     	; 0x1586 <uart_gets+0x12>
	return rc;
    15b0:	87 e8       	ldi	r24, 0x87	; 135
    15b2:	92 e0       	ldi	r25, 0x02	; 2
    15b4:	08 95       	ret

000015b6 <__udivmodqi4>:
    15b6:	99 1b       	sub	r25, r25
    15b8:	79 e0       	ldi	r23, 0x09	; 9
    15ba:	04 c0       	rjmp	.+8      	; 0x15c4 <__udivmodqi4_ep>

000015bc <__udivmodqi4_loop>:
    15bc:	99 1f       	adc	r25, r25
    15be:	96 17       	cp	r25, r22
    15c0:	08 f0       	brcs	.+2      	; 0x15c4 <__udivmodqi4_ep>
    15c2:	96 1b       	sub	r25, r22

000015c4 <__udivmodqi4_ep>:
    15c4:	88 1f       	adc	r24, r24
    15c6:	7a 95       	dec	r23
    15c8:	c9 f7       	brne	.-14     	; 0x15bc <__udivmodqi4_loop>
    15ca:	80 95       	com	r24
    15cc:	08 95       	ret

000015ce <__divmodhi4>:
    15ce:	97 fb       	bst	r25, 7
    15d0:	09 2e       	mov	r0, r25
    15d2:	07 26       	eor	r0, r23
    15d4:	0a d0       	rcall	.+20     	; 0x15ea <__divmodhi4_neg1>
    15d6:	77 fd       	sbrc	r23, 7
    15d8:	04 d0       	rcall	.+8      	; 0x15e2 <__divmodhi4_neg2>
    15da:	0c d0       	rcall	.+24     	; 0x15f4 <__udivmodhi4>
    15dc:	06 d0       	rcall	.+12     	; 0x15ea <__divmodhi4_neg1>
    15de:	00 20       	and	r0, r0
    15e0:	1a f4       	brpl	.+6      	; 0x15e8 <__divmodhi4_exit>

000015e2 <__divmodhi4_neg2>:
    15e2:	70 95       	com	r23
    15e4:	61 95       	neg	r22
    15e6:	7f 4f       	sbci	r23, 0xFF	; 255

000015e8 <__divmodhi4_exit>:
    15e8:	08 95       	ret

000015ea <__divmodhi4_neg1>:
    15ea:	f6 f7       	brtc	.-4      	; 0x15e8 <__divmodhi4_exit>
    15ec:	90 95       	com	r25
    15ee:	81 95       	neg	r24
    15f0:	9f 4f       	sbci	r25, 0xFF	; 255
    15f2:	08 95       	ret

000015f4 <__udivmodhi4>:
    15f4:	aa 1b       	sub	r26, r26
    15f6:	bb 1b       	sub	r27, r27
    15f8:	51 e1       	ldi	r21, 0x11	; 17
    15fa:	07 c0       	rjmp	.+14     	; 0x160a <__udivmodhi4_ep>

000015fc <__udivmodhi4_loop>:
    15fc:	aa 1f       	adc	r26, r26
    15fe:	bb 1f       	adc	r27, r27
    1600:	a6 17       	cp	r26, r22
    1602:	b7 07       	cpc	r27, r23
    1604:	10 f0       	brcs	.+4      	; 0x160a <__udivmodhi4_ep>
    1606:	a6 1b       	sub	r26, r22
    1608:	b7 0b       	sbc	r27, r23

0000160a <__udivmodhi4_ep>:
    160a:	88 1f       	adc	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	5a 95       	dec	r21
    1610:	a9 f7       	brne	.-22     	; 0x15fc <__udivmodhi4_loop>
    1612:	80 95       	com	r24
    1614:	90 95       	com	r25
    1616:	bc 01       	movw	r22, r24
    1618:	cd 01       	movw	r24, r26
    161a:	08 95       	ret

0000161c <malloc>:
    161c:	cf 93       	push	r28
    161e:	df 93       	push	r29
    1620:	ac 01       	movw	r20, r24
    1622:	82 30       	cpi	r24, 0x02	; 2
    1624:	91 05       	cpc	r25, r1
    1626:	10 f4       	brcc	.+4      	; 0x162c <malloc+0x10>
    1628:	42 e0       	ldi	r20, 0x02	; 2
    162a:	50 e0       	ldi	r21, 0x00	; 0
    162c:	e0 91 ab 02 	lds	r30, 0x02AB
    1630:	f0 91 ac 02 	lds	r31, 0x02AC
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	a0 e0       	ldi	r26, 0x00	; 0
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	24 c0       	rjmp	.+72     	; 0x1686 <malloc+0x6a>
    163e:	80 81       	ld	r24, Z
    1640:	91 81       	ldd	r25, Z+1	; 0x01
    1642:	84 17       	cp	r24, r20
    1644:	95 07       	cpc	r25, r21
    1646:	d0 f0       	brcs	.+52     	; 0x167c <malloc+0x60>
    1648:	84 17       	cp	r24, r20
    164a:	95 07       	cpc	r25, r21
    164c:	71 f4       	brne	.+28     	; 0x166a <malloc+0x4e>
    164e:	82 81       	ldd	r24, Z+2	; 0x02
    1650:	93 81       	ldd	r25, Z+3	; 0x03
    1652:	10 97       	sbiw	r26, 0x00	; 0
    1654:	29 f0       	breq	.+10     	; 0x1660 <malloc+0x44>
    1656:	13 96       	adiw	r26, 0x03	; 3
    1658:	9c 93       	st	X, r25
    165a:	8e 93       	st	-X, r24
    165c:	12 97       	sbiw	r26, 0x02	; 2
    165e:	2c c0       	rjmp	.+88     	; 0x16b8 <malloc+0x9c>
    1660:	90 93 ac 02 	sts	0x02AC, r25
    1664:	80 93 ab 02 	sts	0x02AB, r24
    1668:	27 c0       	rjmp	.+78     	; 0x16b8 <malloc+0x9c>
    166a:	21 15       	cp	r18, r1
    166c:	31 05       	cpc	r19, r1
    166e:	19 f0       	breq	.+6      	; 0x1676 <malloc+0x5a>
    1670:	82 17       	cp	r24, r18
    1672:	93 07       	cpc	r25, r19
    1674:	18 f4       	brcc	.+6      	; 0x167c <malloc+0x60>
    1676:	9c 01       	movw	r18, r24
    1678:	bd 01       	movw	r22, r26
    167a:	ef 01       	movw	r28, r30
    167c:	92 81       	ldd	r25, Z+2	; 0x02
    167e:	83 81       	ldd	r24, Z+3	; 0x03
    1680:	df 01       	movw	r26, r30
    1682:	e9 2f       	mov	r30, r25
    1684:	f8 2f       	mov	r31, r24
    1686:	30 97       	sbiw	r30, 0x00	; 0
    1688:	d1 f6       	brne	.-76     	; 0x163e <malloc+0x22>
    168a:	21 15       	cp	r18, r1
    168c:	31 05       	cpc	r19, r1
    168e:	f9 f0       	breq	.+62     	; 0x16ce <malloc+0xb2>
    1690:	c9 01       	movw	r24, r18
    1692:	84 1b       	sub	r24, r20
    1694:	95 0b       	sbc	r25, r21
    1696:	84 30       	cpi	r24, 0x04	; 4
    1698:	91 05       	cpc	r25, r1
    169a:	80 f4       	brcc	.+32     	; 0x16bc <malloc+0xa0>
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	9b 81       	ldd	r25, Y+3	; 0x03
    16a0:	61 15       	cp	r22, r1
    16a2:	71 05       	cpc	r23, r1
    16a4:	21 f0       	breq	.+8      	; 0x16ae <malloc+0x92>
    16a6:	fb 01       	movw	r30, r22
    16a8:	93 83       	std	Z+3, r25	; 0x03
    16aa:	82 83       	std	Z+2, r24	; 0x02
    16ac:	04 c0       	rjmp	.+8      	; 0x16b6 <malloc+0x9a>
    16ae:	90 93 ac 02 	sts	0x02AC, r25
    16b2:	80 93 ab 02 	sts	0x02AB, r24
    16b6:	fe 01       	movw	r30, r28
    16b8:	32 96       	adiw	r30, 0x02	; 2
    16ba:	42 c0       	rjmp	.+132    	; 0x1740 <malloc+0x124>
    16bc:	fe 01       	movw	r30, r28
    16be:	e8 0f       	add	r30, r24
    16c0:	f9 1f       	adc	r31, r25
    16c2:	41 93       	st	Z+, r20
    16c4:	51 93       	st	Z+, r21
    16c6:	02 97       	sbiw	r24, 0x02	; 2
    16c8:	99 83       	std	Y+1, r25	; 0x01
    16ca:	88 83       	st	Y, r24
    16cc:	39 c0       	rjmp	.+114    	; 0x1740 <malloc+0x124>
    16ce:	80 91 a9 02 	lds	r24, 0x02A9
    16d2:	90 91 aa 02 	lds	r25, 0x02AA
    16d6:	00 97       	sbiw	r24, 0x00	; 0
    16d8:	41 f4       	brne	.+16     	; 0x16ea <malloc+0xce>
    16da:	80 91 1b 02 	lds	r24, 0x021B
    16de:	90 91 1c 02 	lds	r25, 0x021C
    16e2:	90 93 aa 02 	sts	0x02AA, r25
    16e6:	80 93 a9 02 	sts	0x02A9, r24
    16ea:	20 91 19 02 	lds	r18, 0x0219
    16ee:	30 91 1a 02 	lds	r19, 0x021A
    16f2:	21 15       	cp	r18, r1
    16f4:	31 05       	cpc	r19, r1
    16f6:	41 f4       	brne	.+16     	; 0x1708 <malloc+0xec>
    16f8:	2d b7       	in	r18, 0x3d	; 61
    16fa:	3e b7       	in	r19, 0x3e	; 62
    16fc:	80 91 1d 02 	lds	r24, 0x021D
    1700:	90 91 1e 02 	lds	r25, 0x021E
    1704:	28 1b       	sub	r18, r24
    1706:	39 0b       	sbc	r19, r25
    1708:	e0 91 a9 02 	lds	r30, 0x02A9
    170c:	f0 91 aa 02 	lds	r31, 0x02AA
    1710:	e2 17       	cp	r30, r18
    1712:	f3 07       	cpc	r31, r19
    1714:	98 f4       	brcc	.+38     	; 0x173c <malloc+0x120>
    1716:	2e 1b       	sub	r18, r30
    1718:	3f 0b       	sbc	r19, r31
    171a:	24 17       	cp	r18, r20
    171c:	35 07       	cpc	r19, r21
    171e:	70 f0       	brcs	.+28     	; 0x173c <malloc+0x120>
    1720:	ca 01       	movw	r24, r20
    1722:	02 96       	adiw	r24, 0x02	; 2
    1724:	28 17       	cp	r18, r24
    1726:	39 07       	cpc	r19, r25
    1728:	48 f0       	brcs	.+18     	; 0x173c <malloc+0x120>
    172a:	8e 0f       	add	r24, r30
    172c:	9f 1f       	adc	r25, r31
    172e:	90 93 aa 02 	sts	0x02AA, r25
    1732:	80 93 a9 02 	sts	0x02A9, r24
    1736:	41 93       	st	Z+, r20
    1738:	51 93       	st	Z+, r21
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <malloc+0x124>
    173c:	e0 e0       	ldi	r30, 0x00	; 0
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	cf 01       	movw	r24, r30
    1742:	df 91       	pop	r29
    1744:	cf 91       	pop	r28
    1746:	08 95       	ret

00001748 <free>:
    1748:	0f 93       	push	r16
    174a:	1f 93       	push	r17
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	9c 01       	movw	r18, r24
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	09 f4       	brne	.+2      	; 0x1758 <free+0x10>
    1756:	8c c0       	rjmp	.+280    	; 0x1870 <free+0x128>
    1758:	dc 01       	movw	r26, r24
    175a:	12 97       	sbiw	r26, 0x02	; 2
    175c:	13 96       	adiw	r26, 0x03	; 3
    175e:	1c 92       	st	X, r1
    1760:	1e 92       	st	-X, r1
    1762:	12 97       	sbiw	r26, 0x02	; 2
    1764:	60 91 ab 02 	lds	r22, 0x02AB
    1768:	70 91 ac 02 	lds	r23, 0x02AC
    176c:	61 15       	cp	r22, r1
    176e:	71 05       	cpc	r23, r1
    1770:	89 f4       	brne	.+34     	; 0x1794 <free+0x4c>
    1772:	8d 91       	ld	r24, X+
    1774:	9c 91       	ld	r25, X
    1776:	11 97       	sbiw	r26, 0x01	; 1
    1778:	82 0f       	add	r24, r18
    177a:	93 1f       	adc	r25, r19
    177c:	20 91 a9 02 	lds	r18, 0x02A9
    1780:	30 91 aa 02 	lds	r19, 0x02AA
    1784:	28 17       	cp	r18, r24
    1786:	39 07       	cpc	r19, r25
    1788:	69 f5       	brne	.+90     	; 0x17e4 <free+0x9c>
    178a:	b0 93 aa 02 	sts	0x02AA, r27
    178e:	a0 93 a9 02 	sts	0x02A9, r26
    1792:	6e c0       	rjmp	.+220    	; 0x1870 <free+0x128>
    1794:	fb 01       	movw	r30, r22
    1796:	40 e0       	ldi	r20, 0x00	; 0
    1798:	50 e0       	ldi	r21, 0x00	; 0
    179a:	01 c0       	rjmp	.+2      	; 0x179e <free+0x56>
    179c:	fc 01       	movw	r30, r24
    179e:	ea 17       	cp	r30, r26
    17a0:	fb 07       	cpc	r31, r27
    17a2:	30 f4       	brcc	.+12     	; 0x17b0 <free+0x68>
    17a4:	82 81       	ldd	r24, Z+2	; 0x02
    17a6:	93 81       	ldd	r25, Z+3	; 0x03
    17a8:	af 01       	movw	r20, r30
    17aa:	00 97       	sbiw	r24, 0x00	; 0
    17ac:	b9 f7       	brne	.-18     	; 0x179c <free+0x54>
    17ae:	1f c0       	rjmp	.+62     	; 0x17ee <free+0xa6>
    17b0:	e9 01       	movw	r28, r18
    17b2:	22 97       	sbiw	r28, 0x02	; 2
    17b4:	fb 83       	std	Y+3, r31	; 0x03
    17b6:	ea 83       	std	Y+2, r30	; 0x02
    17b8:	08 81       	ld	r16, Y
    17ba:	19 81       	ldd	r17, Y+1	; 0x01
    17bc:	c9 01       	movw	r24, r18
    17be:	80 0f       	add	r24, r16
    17c0:	91 1f       	adc	r25, r17
    17c2:	8e 17       	cp	r24, r30
    17c4:	9f 07       	cpc	r25, r31
    17c6:	59 f4       	brne	.+22     	; 0x17de <free+0x96>
    17c8:	80 81       	ld	r24, Z
    17ca:	91 81       	ldd	r25, Z+1	; 0x01
    17cc:	80 0f       	add	r24, r16
    17ce:	91 1f       	adc	r25, r17
    17d0:	02 96       	adiw	r24, 0x02	; 2
    17d2:	99 83       	std	Y+1, r25	; 0x01
    17d4:	88 83       	st	Y, r24
    17d6:	82 81       	ldd	r24, Z+2	; 0x02
    17d8:	93 81       	ldd	r25, Z+3	; 0x03
    17da:	9b 83       	std	Y+3, r25	; 0x03
    17dc:	8a 83       	std	Y+2, r24	; 0x02
    17de:	41 15       	cp	r20, r1
    17e0:	51 05       	cpc	r21, r1
    17e2:	29 f4       	brne	.+10     	; 0x17ee <free+0xa6>
    17e4:	b0 93 ac 02 	sts	0x02AC, r27
    17e8:	a0 93 ab 02 	sts	0x02AB, r26
    17ec:	41 c0       	rjmp	.+130    	; 0x1870 <free+0x128>
    17ee:	fa 01       	movw	r30, r20
    17f0:	b3 83       	std	Z+3, r27	; 0x03
    17f2:	a2 83       	std	Z+2, r26	; 0x02
    17f4:	c1 91       	ld	r28, Z+
    17f6:	d1 91       	ld	r29, Z+
    17f8:	ec 0f       	add	r30, r28
    17fa:	fd 1f       	adc	r31, r29
    17fc:	ae 17       	cp	r26, r30
    17fe:	bf 07       	cpc	r27, r31
    1800:	81 f4       	brne	.+32     	; 0x1822 <free+0xda>
    1802:	f9 01       	movw	r30, r18
    1804:	92 91       	ld	r25, -Z
    1806:	82 91       	ld	r24, -Z
    1808:	8c 0f       	add	r24, r28
    180a:	9d 1f       	adc	r25, r29
    180c:	02 96       	adiw	r24, 0x02	; 2
    180e:	da 01       	movw	r26, r20
    1810:	11 96       	adiw	r26, 0x01	; 1
    1812:	9c 93       	st	X, r25
    1814:	8e 93       	st	-X, r24
    1816:	82 81       	ldd	r24, Z+2	; 0x02
    1818:	93 81       	ldd	r25, Z+3	; 0x03
    181a:	13 96       	adiw	r26, 0x03	; 3
    181c:	9c 93       	st	X, r25
    181e:	8e 93       	st	-X, r24
    1820:	12 97       	sbiw	r26, 0x02	; 2
    1822:	e0 e0       	ldi	r30, 0x00	; 0
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	02 c0       	rjmp	.+4      	; 0x182c <free+0xe4>
    1828:	fb 01       	movw	r30, r22
    182a:	bc 01       	movw	r22, r24
    182c:	db 01       	movw	r26, r22
    182e:	12 96       	adiw	r26, 0x02	; 2
    1830:	8d 91       	ld	r24, X+
    1832:	9c 91       	ld	r25, X
    1834:	13 97       	sbiw	r26, 0x03	; 3
    1836:	00 97       	sbiw	r24, 0x00	; 0
    1838:	b9 f7       	brne	.-18     	; 0x1828 <free+0xe0>
    183a:	cb 01       	movw	r24, r22
    183c:	02 96       	adiw	r24, 0x02	; 2
    183e:	2d 91       	ld	r18, X+
    1840:	3c 91       	ld	r19, X
    1842:	11 97       	sbiw	r26, 0x01	; 1
    1844:	82 0f       	add	r24, r18
    1846:	93 1f       	adc	r25, r19
    1848:	20 91 a9 02 	lds	r18, 0x02A9
    184c:	30 91 aa 02 	lds	r19, 0x02AA
    1850:	28 17       	cp	r18, r24
    1852:	39 07       	cpc	r19, r25
    1854:	69 f4       	brne	.+26     	; 0x1870 <free+0x128>
    1856:	30 97       	sbiw	r30, 0x00	; 0
    1858:	29 f4       	brne	.+10     	; 0x1864 <free+0x11c>
    185a:	10 92 ac 02 	sts	0x02AC, r1
    185e:	10 92 ab 02 	sts	0x02AB, r1
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <free+0x120>
    1864:	13 82       	std	Z+3, r1	; 0x03
    1866:	12 82       	std	Z+2, r1	; 0x02
    1868:	70 93 aa 02 	sts	0x02AA, r23
    186c:	60 93 a9 02 	sts	0x02A9, r22
    1870:	df 91       	pop	r29
    1872:	cf 91       	pop	r28
    1874:	1f 91       	pop	r17
    1876:	0f 91       	pop	r16
    1878:	08 95       	ret

0000187a <itoa>:
    187a:	fb 01       	movw	r30, r22
    187c:	9f 01       	movw	r18, r30
    187e:	e8 94       	clt
    1880:	42 30       	cpi	r20, 0x02	; 2
    1882:	c4 f0       	brlt	.+48     	; 0x18b4 <itoa+0x3a>
    1884:	45 32       	cpi	r20, 0x25	; 37
    1886:	b4 f4       	brge	.+44     	; 0x18b4 <itoa+0x3a>
    1888:	4a 30       	cpi	r20, 0x0A	; 10
    188a:	29 f4       	brne	.+10     	; 0x1896 <itoa+0x1c>
    188c:	97 fb       	bst	r25, 7
    188e:	1e f4       	brtc	.+6      	; 0x1896 <itoa+0x1c>
    1890:	90 95       	com	r25
    1892:	81 95       	neg	r24
    1894:	9f 4f       	sbci	r25, 0xFF	; 255
    1896:	64 2f       	mov	r22, r20
    1898:	77 27       	eor	r23, r23
    189a:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__udivmodhi4>
    189e:	80 5d       	subi	r24, 0xD0	; 208
    18a0:	8a 33       	cpi	r24, 0x3A	; 58
    18a2:	0c f0       	brlt	.+2      	; 0x18a6 <itoa+0x2c>
    18a4:	89 5d       	subi	r24, 0xD9	; 217
    18a6:	81 93       	st	Z+, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	00 97       	sbiw	r24, 0x00	; 0
    18ac:	a1 f7       	brne	.-24     	; 0x1896 <itoa+0x1c>
    18ae:	16 f4       	brtc	.+4      	; 0x18b4 <itoa+0x3a>
    18b0:	5d e2       	ldi	r21, 0x2D	; 45
    18b2:	51 93       	st	Z+, r21
    18b4:	10 82       	st	Z, r1
    18b6:	c9 01       	movw	r24, r18
    18b8:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <strrev>

000018bc <sprintf>:
    18bc:	0f 93       	push	r16
    18be:	1f 93       	push	r17
    18c0:	cf 93       	push	r28
    18c2:	df 93       	push	r29
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
    18c8:	2e 97       	sbiw	r28, 0x0e	; 14
    18ca:	0f b6       	in	r0, 0x3f	; 63
    18cc:	f8 94       	cli
    18ce:	de bf       	out	0x3e, r29	; 62
    18d0:	0f be       	out	0x3f, r0	; 63
    18d2:	cd bf       	out	0x3d, r28	; 61
    18d4:	0d 89       	ldd	r16, Y+21	; 0x15
    18d6:	1e 89       	ldd	r17, Y+22	; 0x16
    18d8:	86 e0       	ldi	r24, 0x06	; 6
    18da:	8c 83       	std	Y+4, r24	; 0x04
    18dc:	1a 83       	std	Y+2, r17	; 0x02
    18de:	09 83       	std	Y+1, r16	; 0x01
    18e0:	8f ef       	ldi	r24, 0xFF	; 255
    18e2:	9f e7       	ldi	r25, 0x7F	; 127
    18e4:	9e 83       	std	Y+6, r25	; 0x06
    18e6:	8d 83       	std	Y+5, r24	; 0x05
    18e8:	ae 01       	movw	r20, r28
    18ea:	47 5e       	subi	r20, 0xE7	; 231
    18ec:	5f 4f       	sbci	r21, 0xFF	; 255
    18ee:	ce 01       	movw	r24, r28
    18f0:	01 96       	adiw	r24, 0x01	; 1
    18f2:	6f 89       	ldd	r22, Y+23	; 0x17
    18f4:	78 8d       	ldd	r23, Y+24	; 0x18
    18f6:	0e 94 8d 0c 	call	0x191a	; 0x191a <vfprintf>
    18fa:	ef 81       	ldd	r30, Y+7	; 0x07
    18fc:	f8 85       	ldd	r31, Y+8	; 0x08
    18fe:	e0 0f       	add	r30, r16
    1900:	f1 1f       	adc	r31, r17
    1902:	10 82       	st	Z, r1
    1904:	2e 96       	adiw	r28, 0x0e	; 14
    1906:	0f b6       	in	r0, 0x3f	; 63
    1908:	f8 94       	cli
    190a:	de bf       	out	0x3e, r29	; 62
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	cd bf       	out	0x3d, r28	; 61
    1910:	df 91       	pop	r29
    1912:	cf 91       	pop	r28
    1914:	1f 91       	pop	r17
    1916:	0f 91       	pop	r16
    1918:	08 95       	ret

0000191a <vfprintf>:
    191a:	2f 92       	push	r2
    191c:	3f 92       	push	r3
    191e:	4f 92       	push	r4
    1920:	5f 92       	push	r5
    1922:	6f 92       	push	r6
    1924:	7f 92       	push	r7
    1926:	8f 92       	push	r8
    1928:	9f 92       	push	r9
    192a:	af 92       	push	r10
    192c:	bf 92       	push	r11
    192e:	cf 92       	push	r12
    1930:	df 92       	push	r13
    1932:	ef 92       	push	r14
    1934:	ff 92       	push	r15
    1936:	0f 93       	push	r16
    1938:	1f 93       	push	r17
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	2d 97       	sbiw	r28, 0x0d	; 13
    1944:	0f b6       	in	r0, 0x3f	; 63
    1946:	f8 94       	cli
    1948:	de bf       	out	0x3e, r29	; 62
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	cd bf       	out	0x3d, r28	; 61
    194e:	3c 01       	movw	r6, r24
    1950:	7d 87       	std	Y+13, r23	; 0x0d
    1952:	6c 87       	std	Y+12, r22	; 0x0c
    1954:	5a 01       	movw	r10, r20
    1956:	fc 01       	movw	r30, r24
    1958:	17 82       	std	Z+7, r1	; 0x07
    195a:	16 82       	std	Z+6, r1	; 0x06
    195c:	83 81       	ldd	r24, Z+3	; 0x03
    195e:	81 ff       	sbrs	r24, 1
    1960:	c8 c1       	rjmp	.+912    	; 0x1cf2 <vfprintf+0x3d8>
    1962:	2e 01       	movw	r4, r28
    1964:	08 94       	sec
    1966:	41 1c       	adc	r4, r1
    1968:	51 1c       	adc	r5, r1
    196a:	f3 01       	movw	r30, r6
    196c:	93 81       	ldd	r25, Z+3	; 0x03
    196e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1970:	fd 85       	ldd	r31, Y+13	; 0x0d
    1972:	93 fd       	sbrc	r25, 3
    1974:	85 91       	lpm	r24, Z+
    1976:	93 ff       	sbrs	r25, 3
    1978:	81 91       	ld	r24, Z+
    197a:	fd 87       	std	Y+13, r31	; 0x0d
    197c:	ec 87       	std	Y+12, r30	; 0x0c
    197e:	88 23       	and	r24, r24
    1980:	09 f4       	brne	.+2      	; 0x1984 <vfprintf+0x6a>
    1982:	b3 c1       	rjmp	.+870    	; 0x1cea <vfprintf+0x3d0>
    1984:	85 32       	cpi	r24, 0x25	; 37
    1986:	41 f4       	brne	.+16     	; 0x1998 <vfprintf+0x7e>
    1988:	93 fd       	sbrc	r25, 3
    198a:	85 91       	lpm	r24, Z+
    198c:	93 ff       	sbrs	r25, 3
    198e:	81 91       	ld	r24, Z+
    1990:	fd 87       	std	Y+13, r31	; 0x0d
    1992:	ec 87       	std	Y+12, r30	; 0x0c
    1994:	85 32       	cpi	r24, 0x25	; 37
    1996:	29 f4       	brne	.+10     	; 0x19a2 <vfprintf+0x88>
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	b3 01       	movw	r22, r6
    199c:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <fputc>
    19a0:	e4 cf       	rjmp	.-56     	; 0x196a <vfprintf+0x50>
    19a2:	ff 24       	eor	r15, r15
    19a4:	ee 24       	eor	r14, r14
    19a6:	10 e0       	ldi	r17, 0x00	; 0
    19a8:	10 32       	cpi	r17, 0x20	; 32
    19aa:	b0 f4       	brcc	.+44     	; 0x19d8 <vfprintf+0xbe>
    19ac:	8b 32       	cpi	r24, 0x2B	; 43
    19ae:	69 f0       	breq	.+26     	; 0x19ca <vfprintf+0xb0>
    19b0:	8c 32       	cpi	r24, 0x2C	; 44
    19b2:	28 f4       	brcc	.+10     	; 0x19be <vfprintf+0xa4>
    19b4:	80 32       	cpi	r24, 0x20	; 32
    19b6:	51 f0       	breq	.+20     	; 0x19cc <vfprintf+0xb2>
    19b8:	83 32       	cpi	r24, 0x23	; 35
    19ba:	71 f4       	brne	.+28     	; 0x19d8 <vfprintf+0xbe>
    19bc:	0b c0       	rjmp	.+22     	; 0x19d4 <vfprintf+0xba>
    19be:	8d 32       	cpi	r24, 0x2D	; 45
    19c0:	39 f0       	breq	.+14     	; 0x19d0 <vfprintf+0xb6>
    19c2:	80 33       	cpi	r24, 0x30	; 48
    19c4:	49 f4       	brne	.+18     	; 0x19d8 <vfprintf+0xbe>
    19c6:	11 60       	ori	r17, 0x01	; 1
    19c8:	2c c0       	rjmp	.+88     	; 0x1a22 <vfprintf+0x108>
    19ca:	12 60       	ori	r17, 0x02	; 2
    19cc:	14 60       	ori	r17, 0x04	; 4
    19ce:	29 c0       	rjmp	.+82     	; 0x1a22 <vfprintf+0x108>
    19d0:	18 60       	ori	r17, 0x08	; 8
    19d2:	27 c0       	rjmp	.+78     	; 0x1a22 <vfprintf+0x108>
    19d4:	10 61       	ori	r17, 0x10	; 16
    19d6:	25 c0       	rjmp	.+74     	; 0x1a22 <vfprintf+0x108>
    19d8:	17 fd       	sbrc	r17, 7
    19da:	2e c0       	rjmp	.+92     	; 0x1a38 <vfprintf+0x11e>
    19dc:	28 2f       	mov	r18, r24
    19de:	20 53       	subi	r18, 0x30	; 48
    19e0:	2a 30       	cpi	r18, 0x0A	; 10
    19e2:	98 f4       	brcc	.+38     	; 0x1a0a <vfprintf+0xf0>
    19e4:	16 ff       	sbrs	r17, 6
    19e6:	08 c0       	rjmp	.+16     	; 0x19f8 <vfprintf+0xde>
    19e8:	8f 2d       	mov	r24, r15
    19ea:	88 0f       	add	r24, r24
    19ec:	f8 2e       	mov	r15, r24
    19ee:	ff 0c       	add	r15, r15
    19f0:	ff 0c       	add	r15, r15
    19f2:	f8 0e       	add	r15, r24
    19f4:	f2 0e       	add	r15, r18
    19f6:	15 c0       	rjmp	.+42     	; 0x1a22 <vfprintf+0x108>
    19f8:	8e 2d       	mov	r24, r14
    19fa:	88 0f       	add	r24, r24
    19fc:	e8 2e       	mov	r14, r24
    19fe:	ee 0c       	add	r14, r14
    1a00:	ee 0c       	add	r14, r14
    1a02:	e8 0e       	add	r14, r24
    1a04:	e2 0e       	add	r14, r18
    1a06:	10 62       	ori	r17, 0x20	; 32
    1a08:	0c c0       	rjmp	.+24     	; 0x1a22 <vfprintf+0x108>
    1a0a:	8e 32       	cpi	r24, 0x2E	; 46
    1a0c:	21 f4       	brne	.+8      	; 0x1a16 <vfprintf+0xfc>
    1a0e:	16 fd       	sbrc	r17, 6
    1a10:	6c c1       	rjmp	.+728    	; 0x1cea <vfprintf+0x3d0>
    1a12:	10 64       	ori	r17, 0x40	; 64
    1a14:	06 c0       	rjmp	.+12     	; 0x1a22 <vfprintf+0x108>
    1a16:	8c 36       	cpi	r24, 0x6C	; 108
    1a18:	11 f4       	brne	.+4      	; 0x1a1e <vfprintf+0x104>
    1a1a:	10 68       	ori	r17, 0x80	; 128
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <vfprintf+0x108>
    1a1e:	88 36       	cpi	r24, 0x68	; 104
    1a20:	59 f4       	brne	.+22     	; 0x1a38 <vfprintf+0x11e>
    1a22:	ec 85       	ldd	r30, Y+12	; 0x0c
    1a24:	fd 85       	ldd	r31, Y+13	; 0x0d
    1a26:	93 fd       	sbrc	r25, 3
    1a28:	85 91       	lpm	r24, Z+
    1a2a:	93 ff       	sbrs	r25, 3
    1a2c:	81 91       	ld	r24, Z+
    1a2e:	fd 87       	std	Y+13, r31	; 0x0d
    1a30:	ec 87       	std	Y+12, r30	; 0x0c
    1a32:	88 23       	and	r24, r24
    1a34:	09 f0       	breq	.+2      	; 0x1a38 <vfprintf+0x11e>
    1a36:	b8 cf       	rjmp	.-144    	; 0x19a8 <vfprintf+0x8e>
    1a38:	98 2f       	mov	r25, r24
    1a3a:	95 54       	subi	r25, 0x45	; 69
    1a3c:	93 30       	cpi	r25, 0x03	; 3
    1a3e:	18 f0       	brcs	.+6      	; 0x1a46 <vfprintf+0x12c>
    1a40:	90 52       	subi	r25, 0x20	; 32
    1a42:	93 30       	cpi	r25, 0x03	; 3
    1a44:	38 f4       	brcc	.+14     	; 0x1a54 <vfprintf+0x13a>
    1a46:	24 e0       	ldi	r18, 0x04	; 4
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	a2 0e       	add	r10, r18
    1a4c:	b3 1e       	adc	r11, r19
    1a4e:	3f e3       	ldi	r19, 0x3F	; 63
    1a50:	39 83       	std	Y+1, r19	; 0x01
    1a52:	0f c0       	rjmp	.+30     	; 0x1a72 <vfprintf+0x158>
    1a54:	83 36       	cpi	r24, 0x63	; 99
    1a56:	31 f0       	breq	.+12     	; 0x1a64 <vfprintf+0x14a>
    1a58:	83 37       	cpi	r24, 0x73	; 115
    1a5a:	81 f0       	breq	.+32     	; 0x1a7c <vfprintf+0x162>
    1a5c:	83 35       	cpi	r24, 0x53	; 83
    1a5e:	09 f0       	breq	.+2      	; 0x1a62 <vfprintf+0x148>
    1a60:	5a c0       	rjmp	.+180    	; 0x1b16 <vfprintf+0x1fc>
    1a62:	22 c0       	rjmp	.+68     	; 0x1aa8 <vfprintf+0x18e>
    1a64:	f5 01       	movw	r30, r10
    1a66:	80 81       	ld	r24, Z
    1a68:	89 83       	std	Y+1, r24	; 0x01
    1a6a:	22 e0       	ldi	r18, 0x02	; 2
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	a2 0e       	add	r10, r18
    1a70:	b3 1e       	adc	r11, r19
    1a72:	21 e0       	ldi	r18, 0x01	; 1
    1a74:	c2 2e       	mov	r12, r18
    1a76:	d1 2c       	mov	r13, r1
    1a78:	42 01       	movw	r8, r4
    1a7a:	14 c0       	rjmp	.+40     	; 0x1aa4 <vfprintf+0x18a>
    1a7c:	92 e0       	ldi	r25, 0x02	; 2
    1a7e:	29 2e       	mov	r2, r25
    1a80:	31 2c       	mov	r3, r1
    1a82:	2a 0c       	add	r2, r10
    1a84:	3b 1c       	adc	r3, r11
    1a86:	f5 01       	movw	r30, r10
    1a88:	80 80       	ld	r8, Z
    1a8a:	91 80       	ldd	r9, Z+1	; 0x01
    1a8c:	16 ff       	sbrs	r17, 6
    1a8e:	03 c0       	rjmp	.+6      	; 0x1a96 <vfprintf+0x17c>
    1a90:	6f 2d       	mov	r22, r15
    1a92:	70 e0       	ldi	r23, 0x00	; 0
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <vfprintf+0x180>
    1a96:	6f ef       	ldi	r22, 0xFF	; 255
    1a98:	7f ef       	ldi	r23, 0xFF	; 255
    1a9a:	c4 01       	movw	r24, r8
    1a9c:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <strnlen>
    1aa0:	6c 01       	movw	r12, r24
    1aa2:	51 01       	movw	r10, r2
    1aa4:	1f 77       	andi	r17, 0x7F	; 127
    1aa6:	15 c0       	rjmp	.+42     	; 0x1ad2 <vfprintf+0x1b8>
    1aa8:	82 e0       	ldi	r24, 0x02	; 2
    1aaa:	28 2e       	mov	r2, r24
    1aac:	31 2c       	mov	r3, r1
    1aae:	2a 0c       	add	r2, r10
    1ab0:	3b 1c       	adc	r3, r11
    1ab2:	f5 01       	movw	r30, r10
    1ab4:	80 80       	ld	r8, Z
    1ab6:	91 80       	ldd	r9, Z+1	; 0x01
    1ab8:	16 ff       	sbrs	r17, 6
    1aba:	03 c0       	rjmp	.+6      	; 0x1ac2 <vfprintf+0x1a8>
    1abc:	6f 2d       	mov	r22, r15
    1abe:	70 e0       	ldi	r23, 0x00	; 0
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <vfprintf+0x1ac>
    1ac2:	6f ef       	ldi	r22, 0xFF	; 255
    1ac4:	7f ef       	ldi	r23, 0xFF	; 255
    1ac6:	c4 01       	movw	r24, r8
    1ac8:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <strnlen_P>
    1acc:	6c 01       	movw	r12, r24
    1ace:	10 68       	ori	r17, 0x80	; 128
    1ad0:	51 01       	movw	r10, r2
    1ad2:	13 fd       	sbrc	r17, 3
    1ad4:	1c c0       	rjmp	.+56     	; 0x1b0e <vfprintf+0x1f4>
    1ad6:	06 c0       	rjmp	.+12     	; 0x1ae4 <vfprintf+0x1ca>
    1ad8:	80 e2       	ldi	r24, 0x20	; 32
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	b3 01       	movw	r22, r6
    1ade:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <fputc>
    1ae2:	ea 94       	dec	r14
    1ae4:	8e 2d       	mov	r24, r14
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	c8 16       	cp	r12, r24
    1aea:	d9 06       	cpc	r13, r25
    1aec:	a8 f3       	brcs	.-22     	; 0x1ad8 <vfprintf+0x1be>
    1aee:	0f c0       	rjmp	.+30     	; 0x1b0e <vfprintf+0x1f4>
    1af0:	f4 01       	movw	r30, r8
    1af2:	17 fd       	sbrc	r17, 7
    1af4:	85 91       	lpm	r24, Z+
    1af6:	17 ff       	sbrs	r17, 7
    1af8:	81 91       	ld	r24, Z+
    1afa:	4f 01       	movw	r8, r30
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	b3 01       	movw	r22, r6
    1b00:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <fputc>
    1b04:	e1 10       	cpse	r14, r1
    1b06:	ea 94       	dec	r14
    1b08:	08 94       	sec
    1b0a:	c1 08       	sbc	r12, r1
    1b0c:	d1 08       	sbc	r13, r1
    1b0e:	c1 14       	cp	r12, r1
    1b10:	d1 04       	cpc	r13, r1
    1b12:	71 f7       	brne	.-36     	; 0x1af0 <vfprintf+0x1d6>
    1b14:	e7 c0       	rjmp	.+462    	; 0x1ce4 <vfprintf+0x3ca>
    1b16:	84 36       	cpi	r24, 0x64	; 100
    1b18:	11 f0       	breq	.+4      	; 0x1b1e <vfprintf+0x204>
    1b1a:	89 36       	cpi	r24, 0x69	; 105
    1b1c:	51 f5       	brne	.+84     	; 0x1b72 <vfprintf+0x258>
    1b1e:	f5 01       	movw	r30, r10
    1b20:	17 ff       	sbrs	r17, 7
    1b22:	07 c0       	rjmp	.+14     	; 0x1b32 <vfprintf+0x218>
    1b24:	80 81       	ld	r24, Z
    1b26:	91 81       	ldd	r25, Z+1	; 0x01
    1b28:	a2 81       	ldd	r26, Z+2	; 0x02
    1b2a:	b3 81       	ldd	r27, Z+3	; 0x03
    1b2c:	24 e0       	ldi	r18, 0x04	; 4
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	08 c0       	rjmp	.+16     	; 0x1b42 <vfprintf+0x228>
    1b32:	80 81       	ld	r24, Z
    1b34:	91 81       	ldd	r25, Z+1	; 0x01
    1b36:	aa 27       	eor	r26, r26
    1b38:	97 fd       	sbrc	r25, 7
    1b3a:	a0 95       	com	r26
    1b3c:	ba 2f       	mov	r27, r26
    1b3e:	22 e0       	ldi	r18, 0x02	; 2
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	a2 0e       	add	r10, r18
    1b44:	b3 1e       	adc	r11, r19
    1b46:	01 2f       	mov	r16, r17
    1b48:	0f 76       	andi	r16, 0x6F	; 111
    1b4a:	b7 ff       	sbrs	r27, 7
    1b4c:	08 c0       	rjmp	.+16     	; 0x1b5e <vfprintf+0x244>
    1b4e:	b0 95       	com	r27
    1b50:	a0 95       	com	r26
    1b52:	90 95       	com	r25
    1b54:	81 95       	neg	r24
    1b56:	9f 4f       	sbci	r25, 0xFF	; 255
    1b58:	af 4f       	sbci	r26, 0xFF	; 255
    1b5a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b5c:	00 68       	ori	r16, 0x80	; 128
    1b5e:	bc 01       	movw	r22, r24
    1b60:	cd 01       	movw	r24, r26
    1b62:	a2 01       	movw	r20, r4
    1b64:	2a e0       	ldi	r18, 0x0A	; 10
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__ultoa_invert>
    1b6c:	d8 2e       	mov	r13, r24
    1b6e:	d4 18       	sub	r13, r4
    1b70:	3f c0       	rjmp	.+126    	; 0x1bf0 <vfprintf+0x2d6>
    1b72:	85 37       	cpi	r24, 0x75	; 117
    1b74:	21 f4       	brne	.+8      	; 0x1b7e <vfprintf+0x264>
    1b76:	1f 7e       	andi	r17, 0xEF	; 239
    1b78:	2a e0       	ldi	r18, 0x0A	; 10
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	20 c0       	rjmp	.+64     	; 0x1bbe <vfprintf+0x2a4>
    1b7e:	19 7f       	andi	r17, 0xF9	; 249
    1b80:	8f 36       	cpi	r24, 0x6F	; 111
    1b82:	a9 f0       	breq	.+42     	; 0x1bae <vfprintf+0x294>
    1b84:	80 37       	cpi	r24, 0x70	; 112
    1b86:	20 f4       	brcc	.+8      	; 0x1b90 <vfprintf+0x276>
    1b88:	88 35       	cpi	r24, 0x58	; 88
    1b8a:	09 f0       	breq	.+2      	; 0x1b8e <vfprintf+0x274>
    1b8c:	ae c0       	rjmp	.+348    	; 0x1cea <vfprintf+0x3d0>
    1b8e:	0b c0       	rjmp	.+22     	; 0x1ba6 <vfprintf+0x28c>
    1b90:	80 37       	cpi	r24, 0x70	; 112
    1b92:	21 f0       	breq	.+8      	; 0x1b9c <vfprintf+0x282>
    1b94:	88 37       	cpi	r24, 0x78	; 120
    1b96:	09 f0       	breq	.+2      	; 0x1b9a <vfprintf+0x280>
    1b98:	a8 c0       	rjmp	.+336    	; 0x1cea <vfprintf+0x3d0>
    1b9a:	01 c0       	rjmp	.+2      	; 0x1b9e <vfprintf+0x284>
    1b9c:	10 61       	ori	r17, 0x10	; 16
    1b9e:	14 ff       	sbrs	r17, 4
    1ba0:	09 c0       	rjmp	.+18     	; 0x1bb4 <vfprintf+0x29a>
    1ba2:	14 60       	ori	r17, 0x04	; 4
    1ba4:	07 c0       	rjmp	.+14     	; 0x1bb4 <vfprintf+0x29a>
    1ba6:	14 ff       	sbrs	r17, 4
    1ba8:	08 c0       	rjmp	.+16     	; 0x1bba <vfprintf+0x2a0>
    1baa:	16 60       	ori	r17, 0x06	; 6
    1bac:	06 c0       	rjmp	.+12     	; 0x1bba <vfprintf+0x2a0>
    1bae:	28 e0       	ldi	r18, 0x08	; 8
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	05 c0       	rjmp	.+10     	; 0x1bbe <vfprintf+0x2a4>
    1bb4:	20 e1       	ldi	r18, 0x10	; 16
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <vfprintf+0x2a4>
    1bba:	20 e1       	ldi	r18, 0x10	; 16
    1bbc:	32 e0       	ldi	r19, 0x02	; 2
    1bbe:	f5 01       	movw	r30, r10
    1bc0:	17 ff       	sbrs	r17, 7
    1bc2:	07 c0       	rjmp	.+14     	; 0x1bd2 <vfprintf+0x2b8>
    1bc4:	60 81       	ld	r22, Z
    1bc6:	71 81       	ldd	r23, Z+1	; 0x01
    1bc8:	82 81       	ldd	r24, Z+2	; 0x02
    1bca:	93 81       	ldd	r25, Z+3	; 0x03
    1bcc:	44 e0       	ldi	r20, 0x04	; 4
    1bce:	50 e0       	ldi	r21, 0x00	; 0
    1bd0:	06 c0       	rjmp	.+12     	; 0x1bde <vfprintf+0x2c4>
    1bd2:	60 81       	ld	r22, Z
    1bd4:	71 81       	ldd	r23, Z+1	; 0x01
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	42 e0       	ldi	r20, 0x02	; 2
    1bdc:	50 e0       	ldi	r21, 0x00	; 0
    1bde:	a4 0e       	add	r10, r20
    1be0:	b5 1e       	adc	r11, r21
    1be2:	a2 01       	movw	r20, r4
    1be4:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__ultoa_invert>
    1be8:	d8 2e       	mov	r13, r24
    1bea:	d4 18       	sub	r13, r4
    1bec:	01 2f       	mov	r16, r17
    1bee:	0f 77       	andi	r16, 0x7F	; 127
    1bf0:	06 ff       	sbrs	r16, 6
    1bf2:	09 c0       	rjmp	.+18     	; 0x1c06 <vfprintf+0x2ec>
    1bf4:	0e 7f       	andi	r16, 0xFE	; 254
    1bf6:	df 14       	cp	r13, r15
    1bf8:	30 f4       	brcc	.+12     	; 0x1c06 <vfprintf+0x2ec>
    1bfa:	04 ff       	sbrs	r16, 4
    1bfc:	06 c0       	rjmp	.+12     	; 0x1c0a <vfprintf+0x2f0>
    1bfe:	02 fd       	sbrc	r16, 2
    1c00:	04 c0       	rjmp	.+8      	; 0x1c0a <vfprintf+0x2f0>
    1c02:	0f 7e       	andi	r16, 0xEF	; 239
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <vfprintf+0x2f0>
    1c06:	1d 2d       	mov	r17, r13
    1c08:	01 c0       	rjmp	.+2      	; 0x1c0c <vfprintf+0x2f2>
    1c0a:	1f 2d       	mov	r17, r15
    1c0c:	80 2f       	mov	r24, r16
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	04 ff       	sbrs	r16, 4
    1c12:	0c c0       	rjmp	.+24     	; 0x1c2c <vfprintf+0x312>
    1c14:	fe 01       	movw	r30, r28
    1c16:	ed 0d       	add	r30, r13
    1c18:	f1 1d       	adc	r31, r1
    1c1a:	20 81       	ld	r18, Z
    1c1c:	20 33       	cpi	r18, 0x30	; 48
    1c1e:	11 f4       	brne	.+4      	; 0x1c24 <vfprintf+0x30a>
    1c20:	09 7e       	andi	r16, 0xE9	; 233
    1c22:	09 c0       	rjmp	.+18     	; 0x1c36 <vfprintf+0x31c>
    1c24:	02 ff       	sbrs	r16, 2
    1c26:	06 c0       	rjmp	.+12     	; 0x1c34 <vfprintf+0x31a>
    1c28:	1e 5f       	subi	r17, 0xFE	; 254
    1c2a:	05 c0       	rjmp	.+10     	; 0x1c36 <vfprintf+0x31c>
    1c2c:	86 78       	andi	r24, 0x86	; 134
    1c2e:	90 70       	andi	r25, 0x00	; 0
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	09 f0       	breq	.+2      	; 0x1c36 <vfprintf+0x31c>
    1c34:	1f 5f       	subi	r17, 0xFF	; 255
    1c36:	80 2e       	mov	r8, r16
    1c38:	99 24       	eor	r9, r9
    1c3a:	03 fd       	sbrc	r16, 3
    1c3c:	12 c0       	rjmp	.+36     	; 0x1c62 <vfprintf+0x348>
    1c3e:	00 ff       	sbrs	r16, 0
    1c40:	0d c0       	rjmp	.+26     	; 0x1c5c <vfprintf+0x342>
    1c42:	fd 2c       	mov	r15, r13
    1c44:	1e 15       	cp	r17, r14
    1c46:	50 f4       	brcc	.+20     	; 0x1c5c <vfprintf+0x342>
    1c48:	fe 0c       	add	r15, r14
    1c4a:	f1 1a       	sub	r15, r17
    1c4c:	1e 2d       	mov	r17, r14
    1c4e:	06 c0       	rjmp	.+12     	; 0x1c5c <vfprintf+0x342>
    1c50:	80 e2       	ldi	r24, 0x20	; 32
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	b3 01       	movw	r22, r6
    1c56:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <fputc>
    1c5a:	1f 5f       	subi	r17, 0xFF	; 255
    1c5c:	1e 15       	cp	r17, r14
    1c5e:	c0 f3       	brcs	.-16     	; 0x1c50 <vfprintf+0x336>
    1c60:	04 c0       	rjmp	.+8      	; 0x1c6a <vfprintf+0x350>
    1c62:	1e 15       	cp	r17, r14
    1c64:	10 f4       	brcc	.+4      	; 0x1c6a <vfprintf+0x350>
    1c66:	e1 1a       	sub	r14, r17
    1c68:	01 c0       	rjmp	.+2      	; 0x1c6c <vfprintf+0x352>
    1c6a:	ee 24       	eor	r14, r14
    1c6c:	84 fe       	sbrs	r8, 4
    1c6e:	0f c0       	rjmp	.+30     	; 0x1c8e <vfprintf+0x374>
    1c70:	80 e3       	ldi	r24, 0x30	; 48
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	b3 01       	movw	r22, r6
    1c76:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <fputc>
    1c7a:	82 fe       	sbrs	r8, 2
    1c7c:	1f c0       	rjmp	.+62     	; 0x1cbc <vfprintf+0x3a2>
    1c7e:	81 fe       	sbrs	r8, 1
    1c80:	03 c0       	rjmp	.+6      	; 0x1c88 <vfprintf+0x36e>
    1c82:	88 e5       	ldi	r24, 0x58	; 88
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	10 c0       	rjmp	.+32     	; 0x1ca8 <vfprintf+0x38e>
    1c88:	88 e7       	ldi	r24, 0x78	; 120
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	0d c0       	rjmp	.+26     	; 0x1ca8 <vfprintf+0x38e>
    1c8e:	c4 01       	movw	r24, r8
    1c90:	86 78       	andi	r24, 0x86	; 134
    1c92:	90 70       	andi	r25, 0x00	; 0
    1c94:	00 97       	sbiw	r24, 0x00	; 0
    1c96:	91 f0       	breq	.+36     	; 0x1cbc <vfprintf+0x3a2>
    1c98:	81 fc       	sbrc	r8, 1
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <vfprintf+0x386>
    1c9c:	80 e2       	ldi	r24, 0x20	; 32
    1c9e:	01 c0       	rjmp	.+2      	; 0x1ca2 <vfprintf+0x388>
    1ca0:	8b e2       	ldi	r24, 0x2B	; 43
    1ca2:	07 fd       	sbrc	r16, 7
    1ca4:	8d e2       	ldi	r24, 0x2D	; 45
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	b3 01       	movw	r22, r6
    1caa:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <fputc>
    1cae:	06 c0       	rjmp	.+12     	; 0x1cbc <vfprintf+0x3a2>
    1cb0:	80 e3       	ldi	r24, 0x30	; 48
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	b3 01       	movw	r22, r6
    1cb6:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <fputc>
    1cba:	fa 94       	dec	r15
    1cbc:	df 14       	cp	r13, r15
    1cbe:	c0 f3       	brcs	.-16     	; 0x1cb0 <vfprintf+0x396>
    1cc0:	da 94       	dec	r13
    1cc2:	f2 01       	movw	r30, r4
    1cc4:	ed 0d       	add	r30, r13
    1cc6:	f1 1d       	adc	r31, r1
    1cc8:	80 81       	ld	r24, Z
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	b3 01       	movw	r22, r6
    1cce:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <fputc>
    1cd2:	dd 20       	and	r13, r13
    1cd4:	a9 f7       	brne	.-22     	; 0x1cc0 <vfprintf+0x3a6>
    1cd6:	06 c0       	rjmp	.+12     	; 0x1ce4 <vfprintf+0x3ca>
    1cd8:	80 e2       	ldi	r24, 0x20	; 32
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	b3 01       	movw	r22, r6
    1cde:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <fputc>
    1ce2:	ea 94       	dec	r14
    1ce4:	ee 20       	and	r14, r14
    1ce6:	c1 f7       	brne	.-16     	; 0x1cd8 <vfprintf+0x3be>
    1ce8:	40 ce       	rjmp	.-896    	; 0x196a <vfprintf+0x50>
    1cea:	f3 01       	movw	r30, r6
    1cec:	86 81       	ldd	r24, Z+6	; 0x06
    1cee:	97 81       	ldd	r25, Z+7	; 0x07
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <vfprintf+0x3dc>
    1cf2:	8f ef       	ldi	r24, 0xFF	; 255
    1cf4:	9f ef       	ldi	r25, 0xFF	; 255
    1cf6:	2d 96       	adiw	r28, 0x0d	; 13
    1cf8:	0f b6       	in	r0, 0x3f	; 63
    1cfa:	f8 94       	cli
    1cfc:	de bf       	out	0x3e, r29	; 62
    1cfe:	0f be       	out	0x3f, r0	; 63
    1d00:	cd bf       	out	0x3d, r28	; 61
    1d02:	df 91       	pop	r29
    1d04:	cf 91       	pop	r28
    1d06:	1f 91       	pop	r17
    1d08:	0f 91       	pop	r16
    1d0a:	ff 90       	pop	r15
    1d0c:	ef 90       	pop	r14
    1d0e:	df 90       	pop	r13
    1d10:	cf 90       	pop	r12
    1d12:	bf 90       	pop	r11
    1d14:	af 90       	pop	r10
    1d16:	9f 90       	pop	r9
    1d18:	8f 90       	pop	r8
    1d1a:	7f 90       	pop	r7
    1d1c:	6f 90       	pop	r6
    1d1e:	5f 90       	pop	r5
    1d20:	4f 90       	pop	r4
    1d22:	3f 90       	pop	r3
    1d24:	2f 90       	pop	r2
    1d26:	08 95       	ret

00001d28 <strnlen_P>:
    1d28:	fc 01       	movw	r30, r24
    1d2a:	05 90       	lpm	r0, Z+
    1d2c:	61 50       	subi	r22, 0x01	; 1
    1d2e:	70 40       	sbci	r23, 0x00	; 0
    1d30:	01 10       	cpse	r0, r1
    1d32:	d8 f7       	brcc	.-10     	; 0x1d2a <strnlen_P+0x2>
    1d34:	80 95       	com	r24
    1d36:	90 95       	com	r25
    1d38:	8e 0f       	add	r24, r30
    1d3a:	9f 1f       	adc	r25, r31
    1d3c:	08 95       	ret

00001d3e <strnlen>:
    1d3e:	fc 01       	movw	r30, r24
    1d40:	61 50       	subi	r22, 0x01	; 1
    1d42:	70 40       	sbci	r23, 0x00	; 0
    1d44:	01 90       	ld	r0, Z+
    1d46:	01 10       	cpse	r0, r1
    1d48:	d8 f7       	brcc	.-10     	; 0x1d40 <strnlen+0x2>
    1d4a:	80 95       	com	r24
    1d4c:	90 95       	com	r25
    1d4e:	8e 0f       	add	r24, r30
    1d50:	9f 1f       	adc	r25, r31
    1d52:	08 95       	ret

00001d54 <strrev>:
    1d54:	dc 01       	movw	r26, r24
    1d56:	fc 01       	movw	r30, r24
    1d58:	67 2f       	mov	r22, r23
    1d5a:	71 91       	ld	r23, Z+
    1d5c:	77 23       	and	r23, r23
    1d5e:	e1 f7       	brne	.-8      	; 0x1d58 <strrev+0x4>
    1d60:	32 97       	sbiw	r30, 0x02	; 2
    1d62:	04 c0       	rjmp	.+8      	; 0x1d6c <strrev+0x18>
    1d64:	7c 91       	ld	r23, X
    1d66:	6d 93       	st	X+, r22
    1d68:	70 83       	st	Z, r23
    1d6a:	62 91       	ld	r22, -Z
    1d6c:	ae 17       	cp	r26, r30
    1d6e:	bf 07       	cpc	r27, r31
    1d70:	c8 f3       	brcs	.-14     	; 0x1d64 <strrev+0x10>
    1d72:	08 95       	ret

00001d74 <fputc>:
    1d74:	0f 93       	push	r16
    1d76:	1f 93       	push	r17
    1d78:	cf 93       	push	r28
    1d7a:	df 93       	push	r29
    1d7c:	8c 01       	movw	r16, r24
    1d7e:	eb 01       	movw	r28, r22
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	81 ff       	sbrs	r24, 1
    1d84:	1b c0       	rjmp	.+54     	; 0x1dbc <fputc+0x48>
    1d86:	82 ff       	sbrs	r24, 2
    1d88:	0d c0       	rjmp	.+26     	; 0x1da4 <fputc+0x30>
    1d8a:	2e 81       	ldd	r18, Y+6	; 0x06
    1d8c:	3f 81       	ldd	r19, Y+7	; 0x07
    1d8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d90:	9d 81       	ldd	r25, Y+5	; 0x05
    1d92:	28 17       	cp	r18, r24
    1d94:	39 07       	cpc	r19, r25
    1d96:	64 f4       	brge	.+24     	; 0x1db0 <fputc+0x3c>
    1d98:	e8 81       	ld	r30, Y
    1d9a:	f9 81       	ldd	r31, Y+1	; 0x01
    1d9c:	01 93       	st	Z+, r16
    1d9e:	f9 83       	std	Y+1, r31	; 0x01
    1da0:	e8 83       	st	Y, r30
    1da2:	06 c0       	rjmp	.+12     	; 0x1db0 <fputc+0x3c>
    1da4:	e8 85       	ldd	r30, Y+8	; 0x08
    1da6:	f9 85       	ldd	r31, Y+9	; 0x09
    1da8:	80 2f       	mov	r24, r16
    1daa:	09 95       	icall
    1dac:	00 97       	sbiw	r24, 0x00	; 0
    1dae:	31 f4       	brne	.+12     	; 0x1dbc <fputc+0x48>
    1db0:	8e 81       	ldd	r24, Y+6	; 0x06
    1db2:	9f 81       	ldd	r25, Y+7	; 0x07
    1db4:	01 96       	adiw	r24, 0x01	; 1
    1db6:	9f 83       	std	Y+7, r25	; 0x07
    1db8:	8e 83       	std	Y+6, r24	; 0x06
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <fputc+0x4c>
    1dbc:	0f ef       	ldi	r16, 0xFF	; 255
    1dbe:	1f ef       	ldi	r17, 0xFF	; 255
    1dc0:	c8 01       	movw	r24, r16
    1dc2:	df 91       	pop	r29
    1dc4:	cf 91       	pop	r28
    1dc6:	1f 91       	pop	r17
    1dc8:	0f 91       	pop	r16
    1dca:	08 95       	ret

00001dcc <__ultoa_invert>:
    1dcc:	fa 01       	movw	r30, r20
    1dce:	aa 27       	eor	r26, r26
    1dd0:	28 30       	cpi	r18, 0x08	; 8
    1dd2:	51 f1       	breq	.+84     	; 0x1e28 <__ultoa_invert+0x5c>
    1dd4:	20 31       	cpi	r18, 0x10	; 16
    1dd6:	81 f1       	breq	.+96     	; 0x1e38 <__ultoa_invert+0x6c>
    1dd8:	e8 94       	clt
    1dda:	6f 93       	push	r22
    1ddc:	6e 7f       	andi	r22, 0xFE	; 254
    1dde:	6e 5f       	subi	r22, 0xFE	; 254
    1de0:	7f 4f       	sbci	r23, 0xFF	; 255
    1de2:	8f 4f       	sbci	r24, 0xFF	; 255
    1de4:	9f 4f       	sbci	r25, 0xFF	; 255
    1de6:	af 4f       	sbci	r26, 0xFF	; 255
    1de8:	b1 e0       	ldi	r27, 0x01	; 1
    1dea:	3e d0       	rcall	.+124    	; 0x1e68 <__ultoa_invert+0x9c>
    1dec:	b4 e0       	ldi	r27, 0x04	; 4
    1dee:	3c d0       	rcall	.+120    	; 0x1e68 <__ultoa_invert+0x9c>
    1df0:	67 0f       	add	r22, r23
    1df2:	78 1f       	adc	r23, r24
    1df4:	89 1f       	adc	r24, r25
    1df6:	9a 1f       	adc	r25, r26
    1df8:	a1 1d       	adc	r26, r1
    1dfa:	68 0f       	add	r22, r24
    1dfc:	79 1f       	adc	r23, r25
    1dfe:	8a 1f       	adc	r24, r26
    1e00:	91 1d       	adc	r25, r1
    1e02:	a1 1d       	adc	r26, r1
    1e04:	6a 0f       	add	r22, r26
    1e06:	71 1d       	adc	r23, r1
    1e08:	81 1d       	adc	r24, r1
    1e0a:	91 1d       	adc	r25, r1
    1e0c:	a1 1d       	adc	r26, r1
    1e0e:	20 d0       	rcall	.+64     	; 0x1e50 <__ultoa_invert+0x84>
    1e10:	09 f4       	brne	.+2      	; 0x1e14 <__ultoa_invert+0x48>
    1e12:	68 94       	set
    1e14:	3f 91       	pop	r19
    1e16:	2a e0       	ldi	r18, 0x0A	; 10
    1e18:	26 9f       	mul	r18, r22
    1e1a:	11 24       	eor	r1, r1
    1e1c:	30 19       	sub	r19, r0
    1e1e:	30 5d       	subi	r19, 0xD0	; 208
    1e20:	31 93       	st	Z+, r19
    1e22:	de f6       	brtc	.-74     	; 0x1dda <__ultoa_invert+0xe>
    1e24:	cf 01       	movw	r24, r30
    1e26:	08 95       	ret
    1e28:	46 2f       	mov	r20, r22
    1e2a:	47 70       	andi	r20, 0x07	; 7
    1e2c:	40 5d       	subi	r20, 0xD0	; 208
    1e2e:	41 93       	st	Z+, r20
    1e30:	b3 e0       	ldi	r27, 0x03	; 3
    1e32:	0f d0       	rcall	.+30     	; 0x1e52 <__ultoa_invert+0x86>
    1e34:	c9 f7       	brne	.-14     	; 0x1e28 <__ultoa_invert+0x5c>
    1e36:	f6 cf       	rjmp	.-20     	; 0x1e24 <__ultoa_invert+0x58>
    1e38:	46 2f       	mov	r20, r22
    1e3a:	4f 70       	andi	r20, 0x0F	; 15
    1e3c:	40 5d       	subi	r20, 0xD0	; 208
    1e3e:	4a 33       	cpi	r20, 0x3A	; 58
    1e40:	18 f0       	brcs	.+6      	; 0x1e48 <__ultoa_invert+0x7c>
    1e42:	49 5d       	subi	r20, 0xD9	; 217
    1e44:	31 fd       	sbrc	r19, 1
    1e46:	40 52       	subi	r20, 0x20	; 32
    1e48:	41 93       	st	Z+, r20
    1e4a:	02 d0       	rcall	.+4      	; 0x1e50 <__ultoa_invert+0x84>
    1e4c:	a9 f7       	brne	.-22     	; 0x1e38 <__ultoa_invert+0x6c>
    1e4e:	ea cf       	rjmp	.-44     	; 0x1e24 <__ultoa_invert+0x58>
    1e50:	b4 e0       	ldi	r27, 0x04	; 4
    1e52:	a6 95       	lsr	r26
    1e54:	97 95       	ror	r25
    1e56:	87 95       	ror	r24
    1e58:	77 95       	ror	r23
    1e5a:	67 95       	ror	r22
    1e5c:	ba 95       	dec	r27
    1e5e:	c9 f7       	brne	.-14     	; 0x1e52 <__ultoa_invert+0x86>
    1e60:	00 97       	sbiw	r24, 0x00	; 0
    1e62:	61 05       	cpc	r22, r1
    1e64:	71 05       	cpc	r23, r1
    1e66:	08 95       	ret
    1e68:	9b 01       	movw	r18, r22
    1e6a:	ac 01       	movw	r20, r24
    1e6c:	0a 2e       	mov	r0, r26
    1e6e:	06 94       	lsr	r0
    1e70:	57 95       	ror	r21
    1e72:	47 95       	ror	r20
    1e74:	37 95       	ror	r19
    1e76:	27 95       	ror	r18
    1e78:	ba 95       	dec	r27
    1e7a:	c9 f7       	brne	.-14     	; 0x1e6e <__ultoa_invert+0xa2>
    1e7c:	62 0f       	add	r22, r18
    1e7e:	73 1f       	adc	r23, r19
    1e80:	84 1f       	adc	r24, r20
    1e82:	95 1f       	adc	r25, r21
    1e84:	a0 1d       	adc	r26, r0
    1e86:	08 95       	ret

00001e88 <_exit>:
    1e88:	f8 94       	cli

00001e8a <__stop_program>:
    1e8a:	ff cf       	rjmp	.-2      	; 0x1e8a <__stop_program>
