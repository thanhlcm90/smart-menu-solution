
SMC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800100  000024e8  0000257c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000084  0080020c  0080020c  00002688  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00002688  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  0000330c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000248  00000000  00000000  000034c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003edf  00000000  00000000  00003710  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001152  00000000  00000000  000075ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001852  00000000  00000000  00008741  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ba8  00000000  00000000  00009f94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001587  00000000  00000000  0000ab3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002835  00000000  00000000  0000c0c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000e8f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 a2 03 	jmp	0x744	; 0x744 <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 ee       	ldi	r30, 0xE8	; 232
      a0:	f4 e2       	ldi	r31, 0x24	; 36
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 30       	cpi	r26, 0x0C	; 12
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	ac e0       	ldi	r26, 0x0C	; 12
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 39       	cpi	r26, 0x90	; 144
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 5f 03 	call	0x6be	; 0x6be <main>
      c6:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <KEYPAD_Check>:
uint8_t ascii_code[4][4]={16,15,14,13,
						  12,9,6,3,
						  10,8,5,2,
						  11,7,4,1};

uint8_t KEYPAD_Check() {
      ce:	af 92       	push	r10
      d0:	bf 92       	push	r11
      d2:	cf 92       	push	r12
      d4:	df 92       	push	r13
      d6:	ef 92       	push	r14
      d8:	ff 92       	push	r15
      da:	0f 93       	push	r16
      dc:	1f 93       	push	r17
      de:	cf 93       	push	r28
      e0:	df 93       	push	r29
      e2:	20 e0       	ldi	r18, 0x00	; 0
      e4:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
      e6:	41 e0       	ldi	r20, 0x01	; 1
      e8:	50 e0       	ldi	r21, 0x00	; 0
      ea:	e2 e6       	ldi	r30, 0x62	; 98
      ec:	f0 e0       	ldi	r31, 0x00	; 0
		_delay_us(10);
		keyin=KEYPAD_PIN & 0x0F;
		if (keyin!=0x0F)
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
      ee:	a0 e1       	ldi	r26, 0x10	; 16
      f0:	b1 e0       	ldi	r27, 0x01	; 1
      f2:	0f 2e       	mov	r0, r31
      f4:	f1 e1       	ldi	r31, 0x11	; 17
      f6:	af 2e       	mov	r10, r31
      f8:	f1 e0       	ldi	r31, 0x01	; 1
      fa:	bf 2e       	mov	r11, r31
      fc:	f0 2d       	mov	r31, r0
      fe:	02 e1       	ldi	r16, 0x12	; 18
     100:	11 e0       	ldi	r17, 0x01	; 1
     102:	0f 2e       	mov	r0, r31
     104:	f3 e1       	ldi	r31, 0x13	; 19
     106:	ef 2e       	mov	r14, r31
     108:	f1 e0       	ldi	r31, 0x01	; 1
     10a:	ff 2e       	mov	r15, r31
     10c:	f0 2d       	mov	r31, r0
						  11,7,4,1};

uint8_t KEYPAD_Check() {
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     10e:	b9 01       	movw	r22, r18
uint8_t ascii_code[4][4]={16,15,14,13,
						  12,9,6,3,
						  10,8,5,2,
						  11,7,4,1};

uint8_t KEYPAD_Check() {
     110:	c9 01       	movw	r24, r18
     112:	04 96       	adiw	r24, 0x04	; 4
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     114:	6a 01       	movw	r12, r20
     116:	02 c0       	rjmp	.+4      	; 0x11c <KEYPAD_Check+0x4e>
     118:	cc 0c       	add	r12, r12
     11a:	dd 1c       	adc	r13, r13
     11c:	8a 95       	dec	r24
     11e:	e2 f7       	brpl	.-8      	; 0x118 <KEYPAD_Check+0x4a>
     120:	c6 01       	movw	r24, r12
     122:	80 95       	com	r24
     124:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     126:	83 e0       	ldi	r24, 0x03	; 3
     128:	8a 95       	dec	r24
     12a:	f1 f7       	brne	.-4      	; 0x128 <KEYPAD_Check+0x5a>
     12c:	00 00       	nop
		_delay_us(10);
		keyin=KEYPAD_PIN & 0x0F;
     12e:	80 b1       	in	r24, 0x00	; 0
     130:	8f 70       	andi	r24, 0x0F	; 15
		if (keyin!=0x0F)
     132:	8f 30       	cpi	r24, 0x0F	; 15
     134:	29 f1       	breq	.+74     	; 0x180 <KEYPAD_Check+0xb2>
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
     136:	9c 91       	ld	r25, X
     138:	98 17       	cp	r25, r24
     13a:	a9 f0       	breq	.+42     	; 0x166 <KEYPAD_Check+0x98>
     13c:	e5 01       	movw	r28, r10
     13e:	98 81       	ld	r25, Y
     140:	98 17       	cp	r25, r24
     142:	59 f0       	breq	.+22     	; 0x15a <KEYPAD_Check+0x8c>
     144:	e8 01       	movw	r28, r16
     146:	98 81       	ld	r25, Y
     148:	98 17       	cp	r25, r24
     14a:	51 f0       	breq	.+20     	; 0x160 <KEYPAD_Check+0x92>
     14c:	e7 01       	movw	r28, r14
     14e:	98 81       	ld	r25, Y
     150:	98 17       	cp	r25, r24
     152:	b1 f4       	brne	.+44     	; 0x180 <KEYPAD_Check+0xb2>
     154:	e3 e0       	ldi	r30, 0x03	; 3
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	08 c0       	rjmp	.+16     	; 0x16a <KEYPAD_Check+0x9c>
     15a:	e1 e0       	ldi	r30, 0x01	; 1
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	05 c0       	rjmp	.+10     	; 0x16a <KEYPAD_Check+0x9c>
     160:	e2 e0       	ldi	r30, 0x02	; 2
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	02 c0       	rjmp	.+4      	; 0x16a <KEYPAD_Check+0x9c>
     166:	e0 e0       	ldi	r30, 0x00	; 0
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	ee 0f       	add	r30, r30
     16c:	ff 1f       	adc	r31, r31
     16e:	ee 0f       	add	r30, r30
     170:	ff 1f       	adc	r31, r31
     172:	6e 0f       	add	r22, r30
     174:	7f 1f       	adc	r23, r31
     176:	fb 01       	movw	r30, r22
     178:	e0 50       	subi	r30, 0x00	; 0
     17a:	ff 4f       	sbci	r31, 0xFF	; 255
     17c:	80 81       	ld	r24, Z
     17e:	06 c0       	rjmp	.+12     	; 0x18c <KEYPAD_Check+0xbe>
     180:	2f 5f       	subi	r18, 0xFF	; 255
     182:	3f 4f       	sbci	r19, 0xFF	; 255
						  10,8,5,2,
						  11,7,4,1};

uint8_t KEYPAD_Check() {
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
     184:	24 30       	cpi	r18, 0x04	; 4
     186:	31 05       	cpc	r19, r1
     188:	11 f6       	brne	.-124    	; 0x10e <KEYPAD_Check+0x40>
		keyin=KEYPAD_PIN & 0x0F;
		if (keyin!=0x0F)
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
	}
	return 0;
     18a:	80 e0       	ldi	r24, 0x00	; 0
}
     18c:	df 91       	pop	r29
     18e:	cf 91       	pop	r28
     190:	1f 91       	pop	r17
     192:	0f 91       	pop	r16
     194:	ff 90       	pop	r15
     196:	ef 90       	pop	r14
     198:	df 90       	pop	r13
     19a:	cf 90       	pop	r12
     19c:	bf 90       	pop	r11
     19e:	af 90       	pop	r10
     1a0:	08 95       	ret

000001a2 <KEYPAD_Init>:

void KEYPAD_Init()
{
	//Khai bao huong cho cac chan ket noi keypad
	KEYPAD_DDR=0xF0;
     1a2:	80 ef       	ldi	r24, 0xF0	; 240
     1a4:	80 93 61 00 	sts	0x0061, r24
	KEYPAD_PORT=0x0F;
     1a8:	8f e0       	ldi	r24, 0x0F	; 15
     1aa:	80 93 62 00 	sts	0x0062, r24
     1ae:	08 95       	ret

000001b0 <LCDBusyLoop>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1b0:	8f ec       	ldi	r24, 0xCF	; 207
     1b2:	97 e0       	ldi	r25, 0x07	; 7
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	f1 f7       	brne	.-4      	; 0x1b4 <LCDBusyLoop+0x4>
     1b8:	00 c0       	rjmp	.+0      	; 0x1ba <LCDBusyLoop+0xa>
     1ba:	00 00       	nop
}

void LCDBusyLoop()
{
	_delay_ms(8);
}
     1bc:	08 95       	ret

000001be <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
     1be:	28 2f       	mov	r18, r24
     1c0:	22 95       	swap	r18
     1c2:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
     1c4:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
     1c6:	66 23       	and	r22, r22
     1c8:	11 f4       	brne	.+4      	; 0x1ce <LCDByte+0x10>
CLEAR_RS();
     1ca:	d8 98       	cbi	0x1b, 0	; 27
     1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <LCDByte+0x12>
else
SET_RS();
     1ce:	d8 9a       	sbi	0x1b, 0	; 27

//_delay_ms(0.500);		//tAS

SET_E();
     1d0:	d9 9a       	sbi	0x1b, 1	; 27

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
     1d2:	9b b3       	in	r25, 0x1b	; 27
     1d4:	22 0f       	add	r18, r18
     1d6:	22 0f       	add	r18, r18
     1d8:	93 7c       	andi	r25, 0xC3	; 195
     1da:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
     1dc:	9b bb       	out	0x1b, r25	; 27

//_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
     1de:	d9 98       	cbi	0x1b, 1	; 27

//_delay_us(1);

//Send the lower nibble
SET_E();
     1e0:	d9 9a       	sbi	0x1b, 1	; 27

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
     1e2:	9b b3       	in	r25, 0x1b	; 27
     1e4:	88 0f       	add	r24, r24
     1e6:	88 0f       	add	r24, r24
     1e8:	93 7c       	andi	r25, 0xC3	; 195
     1ea:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     1ec:	8b bb       	out	0x1b, r24	; 27

//_delay_us(1);			//tEH

//SEND

CLEAR_E();
     1ee:	d9 98       	cbi	0x1b, 1	; 27

//_delay_us(1);			//tEL

LCDBusyLoop();
     1f0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCDBusyLoop>
}
     1f4:	08 95       	ret

000001f6 <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
     1f6:	0f 93       	push	r16
     1f8:	1f 93       	push	r17
     1fa:	cf 93       	push	r28
     1fc:	df 93       	push	r29
     1fe:	8c 01       	movw	r16, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     200:	fc 01       	movw	r30, r24
     202:	80 81       	ld	r24, Z
     204:	88 23       	and	r24, r24
     206:	09 f1       	breq	.+66     	; 0x24a <LCDWriteString+0x54>
 {
 	//Custom Char Support
	if(*msg=='%')
     208:	85 32       	cpi	r24, 0x25	; 37
     20a:	a9 f4       	brne	.+42     	; 0x236 <LCDWriteString+0x40>
	{
		msg++;
     20c:	e8 01       	movw	r28, r16
     20e:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
     210:	f8 01       	movw	r30, r16
     212:	81 81       	ldd	r24, Z+1	; 0x01
     214:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
     216:	88 30       	cpi	r24, 0x08	; 8
     218:	20 f4       	brcc	.+8      	; 0x222 <LCDWriteString+0x2c>
		{
			LCDData(cc);
     21a:	61 e0       	ldi	r22, 0x01	; 1
     21c:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
     220:	0e c0       	rjmp	.+28     	; 0x23e <LCDWriteString+0x48>
		}
		else
		{
			LCDData('%');
     222:	85 e2       	ldi	r24, 0x25	; 37
     224:	61 e0       	ldi	r22, 0x01	; 1
     226:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
			LCDData(*msg);
     22a:	f8 01       	movw	r30, r16
     22c:	81 81       	ldd	r24, Z+1	; 0x01
     22e:	61 e0       	ldi	r22, 0x01	; 1
     230:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
     234:	04 c0       	rjmp	.+8      	; 0x23e <LCDWriteString+0x48>
		}
	}
	else
	{
		LCDData(*msg);
     236:	61 e0       	ldi	r22, 0x01	; 1
     238:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
     23c:	e8 01       	movw	r28, r16
	}
	msg++;
     23e:	8e 01       	movw	r16, r28
     240:	0f 5f       	subi	r16, 0xFF	; 255
     242:	1f 4f       	sbci	r17, 0xFF	; 255
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     244:	89 81       	ldd	r24, Y+1	; 0x01
     246:	88 23       	and	r24, r24
     248:	f9 f6       	brne	.-66     	; 0x208 <LCDWriteString+0x12>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	1f 91       	pop	r17
     250:	0f 91       	pop	r16
     252:	08 95       	ret

00000254 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     254:	ef 92       	push	r14
     256:	ff 92       	push	r15
     258:	0f 93       	push	r16
     25a:	1f 93       	push	r17
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	00 d0       	rcall	.+0      	; 0x262 <LCDWriteInt+0xe>
     262:	00 d0       	rcall	.+0      	; 0x264 <LCDWriteInt+0x10>
     264:	0f 92       	push	r0
     266:	cd b7       	in	r28, 0x3d	; 61
     268:	de b7       	in	r29, 0x3e	; 62
     26a:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     26c:	fe 01       	movw	r30, r28
     26e:	31 96       	adiw	r30, 0x01	; 1
     270:	25 e0       	ldi	r18, 0x05	; 5
     272:	df 01       	movw	r26, r30
     274:	1d 92       	st	X+, r1
     276:	2a 95       	dec	r18
     278:	e9 f7       	brne	.-6      	; 0x274 <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
     27a:	00 97       	sbiw	r24, 0x00	; 0
     27c:	61 f0       	breq	.+24     	; 0x296 <LCDWriteInt+0x42>
     27e:	fe 01       	movw	r30, r28
     280:	36 96       	adiw	r30, 0x06	; 6
	{
	str[i]=val%10;
     282:	2a e0       	ldi	r18, 0x0A	; 10
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	b9 01       	movw	r22, r18
     288:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__divmodhi4>
     28c:	82 93       	st	-Z, r24
	val=val/10;
     28e:	86 2f       	mov	r24, r22
     290:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     292:	00 97       	sbiw	r24, 0x00	; 0
     294:	c1 f7       	brne	.-16     	; 0x286 <LCDWriteInt+0x32>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     296:	bf ef       	ldi	r27, 0xFF	; 255
     298:	eb 16       	cp	r14, r27
     29a:	bf ef       	ldi	r27, 0xFF	; 255
     29c:	fb 06       	cpc	r15, r27
     29e:	69 f4       	brne	.+26     	; 0x2ba <LCDWriteInt+0x66>
		while(str[j]==0) j++;
     2a0:	29 81       	ldd	r18, Y+1	; 0x01
     2a2:	22 23       	and	r18, r18
     2a4:	79 f4       	brne	.+30     	; 0x2c4 <LCDWriteInt+0x70>
     2a6:	fe 01       	movw	r30, r28
     2a8:	32 96       	adiw	r30, 0x02	; 2
     2aa:	00 e0       	ldi	r16, 0x00	; 0
     2ac:	10 e0       	ldi	r17, 0x00	; 0
     2ae:	0f 5f       	subi	r16, 0xFF	; 255
     2b0:	1f 4f       	sbci	r17, 0xFF	; 255
     2b2:	21 91       	ld	r18, Z+
     2b4:	22 23       	and	r18, r18
     2b6:	d9 f3       	breq	.-10     	; 0x2ae <LCDWriteInt+0x5a>
     2b8:	07 c0       	rjmp	.+14     	; 0x2c8 <LCDWriteInt+0x74>
	else
		j=5-field_length;
     2ba:	05 e0       	ldi	r16, 0x05	; 5
     2bc:	10 e0       	ldi	r17, 0x00	; 0
     2be:	0e 19       	sub	r16, r14
     2c0:	1f 09       	sbc	r17, r15
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <LCDWriteInt+0x74>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
     2c4:	00 e0       	ldi	r16, 0x00	; 0
     2c6:	10 e0       	ldi	r17, 0x00	; 0
	else
		j=5-field_length;

	if(val<0) LCDData('-');
     2c8:	99 23       	and	r25, r25
     2ca:	24 f4       	brge	.+8      	; 0x2d4 <LCDWriteInt+0x80>
     2cc:	8d e2       	ldi	r24, 0x2D	; 45
     2ce:	61 e0       	ldi	r22, 0x01	; 1
     2d0:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
	for(i=j;i<5;i++)
     2d4:	05 30       	cpi	r16, 0x05	; 5
     2d6:	11 05       	cpc	r17, r1
     2d8:	bc f4       	brge	.+46     	; 0x308 <LCDWriteInt+0xb4>
	}
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
     2da:	e1 e0       	ldi	r30, 0x01	; 1
     2dc:	f0 e0       	ldi	r31, 0x00	; 0
     2de:	ec 0f       	add	r30, r28
     2e0:	fd 1f       	adc	r31, r29
     2e2:	0e 0f       	add	r16, r30
     2e4:	1f 1f       	adc	r17, r31
     2e6:	0f 2e       	mov	r0, r31
     2e8:	f6 e0       	ldi	r31, 0x06	; 6
     2ea:	ef 2e       	mov	r14, r31
     2ec:	ff 24       	eor	r15, r15
     2ee:	f0 2d       	mov	r31, r0
     2f0:	ec 0e       	add	r14, r28
     2f2:	fd 1e       	adc	r15, r29
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     2f4:	d8 01       	movw	r26, r16
     2f6:	8d 91       	ld	r24, X+
     2f8:	8d 01       	movw	r16, r26
     2fa:	80 5d       	subi	r24, 0xD0	; 208
     2fc:	61 e0       	ldi	r22, 0x01	; 1
     2fe:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     302:	0e 15       	cp	r16, r14
     304:	1f 05       	cpc	r17, r15
     306:	b1 f7       	brne	.-20     	; 0x2f4 <LCDWriteInt+0xa0>
	{
	LCDData(48+str[i]);
	}
}
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	0f 90       	pop	r0
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	1f 91       	pop	r17
     318:	0f 91       	pop	r16
     31a:	ff 90       	pop	r15
     31c:	ef 90       	pop	r14
     31e:	08 95       	ret

00000320 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
     320:	84 31       	cpi	r24, 0x14	; 20
     322:	78 f4       	brcc	.+30     	; 0x342 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
     324:	62 30       	cpi	r22, 0x02	; 2
     326:	31 f0       	breq	.+12     	; 0x334 <LCDGotoXY+0x14>
     328:	63 30       	cpi	r22, 0x03	; 3
     32a:	31 f0       	breq	.+12     	; 0x338 <LCDGotoXY+0x18>
     32c:	61 30       	cpi	r22, 0x01	; 1
     32e:	29 f4       	brne	.+10     	; 0x33a <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
     330:	80 64       	ori	r24, 0x40	; 64
			break;
     332:	03 c0       	rjmp	.+6      	; 0x33a <LCDGotoXY+0x1a>
		case 2:
			x+=0x14;
     334:	8c 5e       	subi	r24, 0xEC	; 236
			break;
     336:	01 c0       	rjmp	.+2      	; 0x33a <LCDGotoXY+0x1a>
		case 3:
			x+=0x54;
     338:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
     33a:	80 68       	ori	r24, 0x80	; 128
     33c:	60 e0       	ldi	r22, 0x00	; 0
     33e:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
     342:	08 95       	ret

00000344 <LCDInit>:
{
	_delay_ms(8);
}

void LCDInit(uint8_t style)
{
     344:	0f 93       	push	r16
     346:	1f 93       	push	r17
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	c8 2f       	mov	r28, r24
     34e:	8b e4       	ldi	r24, 0x4B	; 75
     350:	9d e1       	ldi	r25, 0x1D	; 29
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	f1 f7       	brne	.-4      	; 0x352 <LCDInit+0xe>
     356:	00 c0       	rjmp	.+0      	; 0x358 <LCDInit+0x14>
     358:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
     35a:	8a b3       	in	r24, 0x1a	; 26
     35c:	8c 63       	ori	r24, 0x3C	; 60
     35e:	8a bb       	out	0x1a, r24	; 26
	LCD_E_DDR|=(1<<LCD_E_POS);
     360:	d1 9a       	sbi	0x1a, 1	; 26
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     362:	d0 9a       	sbi	0x1a, 0	; 26

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
     364:	8b b3       	in	r24, 0x1b	; 27
     366:	83 7c       	andi	r24, 0xC3	; 195
     368:	8b bb       	out	0x1b, r24	; 27
	CLEAR_E();
     36a:	d9 98       	cbi	0x1b, 1	; 27
	CLEAR_RS();
     36c:	d8 98       	cbi	0x1b, 0	; 27

	//Set 4-bit mode
	//_delay_us(0.3);	//tAS

	SET_E();
     36e:	d9 9a       	sbi	0x1b, 1	; 27
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     370:	db 9a       	sbi	0x1b, 3	; 27
	//_delay_us(1);
	CLEAR_E();
     372:	d9 98       	cbi	0x1b, 1	; 27
	//_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     374:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     378:	8c 2f       	mov	r24, r28
     37a:	8c 60       	ori	r24, 0x0C	; 12
     37c:	60 e0       	ldi	r22, 0x00	; 0
     37e:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     382:	88 e2       	ldi	r24, 0x28	; 40
     384:	60 e0       	ldi	r22, 0x00	; 0
     386:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
     38a:	80 e4       	ldi	r24, 0x40	; 64
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
     392:	c4 e1       	ldi	r28, 0x14	; 20
     394:	d1 e0       	ldi	r29, 0x01	; 1
void LCDBusyLoop()
{
	_delay_ms(8);
}

void LCDInit(uint8_t style)
     396:	04 e5       	ldi	r16, 0x54	; 84
     398:	11 e0       	ldi	r17, 0x01	; 1
	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
     39a:	89 91       	ld	r24, Y+
     39c:	61 e0       	ldi	r22, 0x01	; 1
     39e:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
     3a2:	c0 17       	cp	r28, r16
     3a4:	d1 07       	cpc	r29, r17
     3a6:	c9 f7       	brne	.-14     	; 0x39a <LCDInit+0x56>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	0e 94 90 01 	call	0x320	; 0x320 <LCDGotoXY>

}
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	1f 91       	pop	r17
     3b6:	0f 91       	pop	r16
     3b8:	08 95       	ret

000003ba <sMCIfaceKEYPAD_checkpress>:

static uint8_t nrf24l01_addr5[NRF24L01_ADDRSIZE] = NRF24L01_ADDRP5;
static uint8_t nrf24l01_addrtx[NRF24L01_ADDRSIZE] = NRF24L01_ADDRTX;

sc_integer sMCIfaceKEYPAD_checkpress() {
	return KEYPAD_Check();
     3ba:	0e 94 67 00 	call	0xce	; 0xce <KEYPAD_Check>
}
     3be:	68 2f       	mov	r22, r24
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	08 95       	ret

000003c8 <sMCIfaceKEYPAD_init>:
void sMCIfaceKEYPAD_init() {
	KEYPAD_Init();
     3c8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <KEYPAD_Init>
}
     3cc:	08 95       	ret

000003ce <sMCIfaceLCD_writeString>:

void sMCIfaceLCD_writeString(const sc_string chr) {
	LCDWriteString(chr);
     3ce:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDWriteString>
}
     3d2:	08 95       	ret

000003d4 <sMCIfaceLCD_writeStringXY>:
void sMCIfaceLCD_writeStringXY(const sc_string chr, const sc_integer x, const sc_integer y) {
     3d4:	0f 93       	push	r16
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	ec 01       	movw	r28, r24
     3dc:	84 2f       	mov	r24, r20
     3de:	60 2f       	mov	r22, r16
	LCDWriteStringXY(x,y,chr);
     3e0:	0e 94 90 01 	call	0x320	; 0x320 <LCDGotoXY>
     3e4:	ce 01       	movw	r24, r28
     3e6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDWriteString>
}
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	0f 91       	pop	r16
     3f0:	08 95       	ret

000003f2 <sMCIfaceLCD_writeNumberXY>:
void sMCIfaceLCD_writeNumberXY(const sc_integer num, const sc_integer x, const sc_integer y, const sc_integer l) {
     3f2:	4f 92       	push	r4
     3f4:	5f 92       	push	r5
     3f6:	6f 92       	push	r6
     3f8:	7f 92       	push	r7
     3fa:	af 92       	push	r10
     3fc:	bf 92       	push	r11
     3fe:	cf 92       	push	r12
     400:	df 92       	push	r13
     402:	ef 92       	push	r14
     404:	ff 92       	push	r15
     406:	2b 01       	movw	r4, r22
     408:	3c 01       	movw	r6, r24
     40a:	82 2f       	mov	r24, r18
     40c:	6e 2d       	mov	r22, r14
     40e:	76 01       	movw	r14, r12
     410:	65 01       	movw	r12, r10
	LCDWriteIntXY(x,y,num,l);
     412:	0e 94 90 01 	call	0x320	; 0x320 <LCDGotoXY>
     416:	c2 01       	movw	r24, r4
     418:	b6 01       	movw	r22, r12
     41a:	0e 94 2a 01 	call	0x254	; 0x254 <LCDWriteInt>
}
     41e:	ff 90       	pop	r15
     420:	ef 90       	pop	r14
     422:	df 90       	pop	r13
     424:	cf 90       	pop	r12
     426:	bf 90       	pop	r11
     428:	af 90       	pop	r10
     42a:	7f 90       	pop	r7
     42c:	6f 90       	pop	r6
     42e:	5f 90       	pop	r5
     430:	4f 90       	pop	r4
     432:	08 95       	ret

00000434 <sMCIfaceLCD_clear>:
void sMCIfaceLCD_clear() {
	LCDClear();
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	60 e0       	ldi	r22, 0x00	; 0
     438:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
     43c:	82 e0       	ldi	r24, 0x02	; 2
     43e:	60 e0       	ldi	r22, 0x00	; 0
     440:	0e 94 df 00 	call	0x1be	; 0x1be <LCDByte>
}
     444:	08 95       	ret

00000446 <sMCIfaceLCD_init>:
void sMCIfaceLCD_init() {
	LCDInit(0);
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	0e 94 a2 01 	call	0x344	; 0x344 <LCDInit>
}
     44c:	08 95       	ret

0000044e <sMCIfaceRF_getData>:

sc_string sMCIfaceRF_getData() {
     44e:	0f 93       	push	r16
     450:	1f 93       	push	r17
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	0f 92       	push	r0
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
	uint8_t pipe = 0;
     45c:	19 82       	std	Y+1, r1	; 0x01
	if (nrf24l01_readready(&pipe)) {
     45e:	ce 01       	movw	r24, r28
     460:	01 96       	adiw	r24, 0x01	; 1
     462:	0e 94 42 06 	call	0xc84	; 0xc84 <nrf24l01_readready>
     466:	88 23       	and	r24, r24
     468:	e9 f0       	breq	.+58     	; 0x4a4 <sMCIfaceRF_getData+0x56>
		LCDWriteIntXY(0,1,pipe,1);
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	61 e0       	ldi	r22, 0x01	; 1
     46e:	0e 94 90 01 	call	0x320	; 0x320 <LCDGotoXY>
     472:	89 81       	ldd	r24, Y+1	; 0x01
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	61 e0       	ldi	r22, 0x01	; 1
     478:	70 e0       	ldi	r23, 0x00	; 0
     47a:	0e 94 2a 01 	call	0x254	; 0x254 <LCDWriteInt>
		if (pipe==0) {
     47e:	89 81       	ldd	r24, Y+1	; 0x01
     480:	88 23       	and	r24, r24
     482:	99 f4       	brne	.+38     	; 0x4aa <sMCIfaceRF_getData+0x5c>
     484:	e0 e1       	ldi	r30, 0x10	; 16
     486:	f2 e0       	ldi	r31, 0x02	; 2
}
void sMCIfaceLCD_init() {
	LCDInit(0);
}

sc_string sMCIfaceRF_getData() {
     488:	cf 01       	movw	r24, r30
     48a:	09 96       	adiw	r24, 0x09	; 9
	uint8_t pipe = 0;
	if (nrf24l01_readready(&pipe)) {
		LCDWriteIntXY(0,1,pipe,1);
		if (pipe==0) {
			//clear buffer
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
     48c:	11 92       	st	Z+, r1
     48e:	e8 17       	cp	r30, r24
     490:	f9 07       	cpc	r31, r25
     492:	e1 f7       	brne	.-8      	; 0x48c <sMCIfaceRF_getData+0x3e>
			
			//read buffer
			nrf24l01_read(pipe,bufferin);
     494:	00 e1       	ldi	r16, 0x10	; 16
     496:	12 e0       	ldi	r17, 0x02	; 2
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	b8 01       	movw	r22, r16
     49c:	0e 94 54 06 	call	0xca8	; 0xca8 <nrf24l01_read>
			return bufferin;
     4a0:	c8 01       	movw	r24, r16
     4a2:	05 c0       	rjmp	.+10     	; 0x4ae <sMCIfaceRF_getData+0x60>
		}
	}
	return "";
     4a4:	84 e5       	ldi	r24, 0x54	; 84
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <sMCIfaceRF_getData+0x60>
     4aa:	84 e5       	ldi	r24, 0x54	; 84
     4ac:	91 e0       	ldi	r25, 0x01	; 1
}
     4ae:	0f 90       	pop	r0
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	0f 91       	pop	r16
     4b8:	08 95       	ret

000004ba <sMCIfaceRF_sendMsg>:

sc_boolean sMCIfaceRF_sendMsg(const sc_string msg) {
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	9c 01       	movw	r18, r24
     4c0:	cb e1       	ldi	r28, 0x1B	; 27
     4c2:	d2 e0       	ldi	r29, 0x02	; 2
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	90 e0       	ldi	r25, 0x00	; 0
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
		if (i<strlen(msg)) bufferout[i]=msg[i];
     4c8:	a2 2f       	mov	r26, r18
     4ca:	b3 2f       	mov	r27, r19
     4cc:	fd 01       	movw	r30, r26
     4ce:	01 90       	ld	r0, Z+
     4d0:	00 20       	and	r0, r0
     4d2:	e9 f7       	brne	.-6      	; 0x4ce <sMCIfaceRF_sendMsg+0x14>
     4d4:	31 97       	sbiw	r30, 0x01	; 1
     4d6:	ea 1b       	sub	r30, r26
     4d8:	fb 0b       	sbc	r31, r27
     4da:	8e 17       	cp	r24, r30
     4dc:	9f 07       	cpc	r25, r31
     4de:	30 f4       	brcc	.+12     	; 0x4ec <sMCIfaceRF_sendMsg+0x32>
		}
	}
	return "";
}

sc_boolean sMCIfaceRF_sendMsg(const sc_string msg) {
     4e0:	f9 01       	movw	r30, r18
     4e2:	e8 0f       	add	r30, r24
     4e4:	f9 1f       	adc	r31, r25
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
		if (i<strlen(msg)) bufferout[i]=msg[i];
     4e6:	40 81       	ld	r20, Z
     4e8:	48 83       	st	Y, r20
     4ea:	01 c0       	rjmp	.+2      	; 0x4ee <sMCIfaceRF_sendMsg+0x34>
		else bufferout[i] = 0;
     4ec:	18 82       	st	Y, r1
     4ee:	01 96       	adiw	r24, 0x01	; 1
     4f0:	21 96       	adiw	r28, 0x01	; 1
	return "";
}

sc_boolean sMCIfaceRF_sendMsg(const sc_string msg) {
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
     4f2:	89 30       	cpi	r24, 0x09	; 9
     4f4:	91 05       	cpc	r25, r1
     4f6:	41 f7       	brne	.-48     	; 0x4c8 <sMCIfaceRF_sendMsg+0xe>
		if (i<strlen(msg)) bufferout[i]=msg[i];
		else bufferout[i] = 0;
	}
	
	//Set Address for Data
	nrf24l01_settxaddr(nrf24l01_addrtx);
     4f8:	85 e5       	ldi	r24, 0x55	; 85
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	0e 94 b2 04 	call	0x964	; 0x964 <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     500:	8b e1       	ldi	r24, 0x1B	; 27
     502:	92 e0       	ldi	r25, 0x02	; 2
     504:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <nrf24l01_write>
     508:	98 2f       	mov	r25, r24
     50a:	ef ec       	ldi	r30, 0xCF	; 207
     50c:	f7 e0       	ldi	r31, 0x07	; 7
     50e:	31 97       	sbiw	r30, 0x01	; 1
     510:	f1 f7       	brne	.-4      	; 0x50e <sMCIfaceRF_sendMsg+0x54>
     512:	00 c0       	rjmp	.+0      	; 0x514 <sMCIfaceRF_sendMsg+0x5a>
     514:	00 00       	nop
		}
	}
	return "";
}

sc_boolean sMCIfaceRF_sendMsg(const sc_string msg) {
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	91 30       	cpi	r25, 0x01	; 1
     51a:	09 f0       	breq	.+2      	; 0x51e <sMCIfaceRF_sendMsg+0x64>
     51c:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	08 95       	ret

00000524 <sMCIfaceRF_sendCheck>:

sc_boolean sMCIfaceRF_sendCheck() {
     524:	eb e1       	ldi	r30, 0x1B	; 27
     526:	f2 e0       	ldi	r31, 0x02	; 2
     528:	cf 01       	movw	r24, r30
     52a:	09 96       	adiw	r24, 0x09	; 9
	//set all buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferout[i] = 1;
     52c:	21 e0       	ldi	r18, 0x01	; 1
     52e:	21 93       	st	Z+, r18
     530:	e8 17       	cp	r30, r24
     532:	f9 07       	cpc	r31, r25
     534:	e1 f7       	brne	.-8      	; 0x52e <sMCIfaceRF_sendCheck+0xa>
	//Set Address for check
	nrf24l01_settxaddr(nrf24l01_addr5);
     536:	8a e5       	ldi	r24, 0x5A	; 90
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	0e 94 b2 04 	call	0x964	; 0x964 <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     53e:	8b e1       	ldi	r24, 0x1B	; 27
     540:	92 e0       	ldi	r25, 0x02	; 2
     542:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <nrf24l01_write>
     546:	98 2f       	mov	r25, r24
     548:	ef ec       	ldi	r30, 0xCF	; 207
     54a:	f7 e0       	ldi	r31, 0x07	; 7
     54c:	31 97       	sbiw	r30, 0x01	; 1
     54e:	f1 f7       	brne	.-4      	; 0x54c <sMCIfaceRF_sendCheck+0x28>
     550:	00 c0       	rjmp	.+0      	; 0x552 <sMCIfaceRF_sendCheck+0x2e>
     552:	00 00       	nop
	} else {
		return false;
	}
}

sc_boolean sMCIfaceRF_sendCheck() {
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	91 30       	cpi	r25, 0x01	; 1
     558:	09 f0       	breq	.+2      	; 0x55c <sMCIfaceRF_sendCheck+0x38>
     55a:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     55c:	08 95       	ret

0000055e <sMCIfaceRF_getCheck>:

sc_boolean sMCIfaceRF_getCheck() {
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	0f 92       	push	r0
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
	uint8_t pipe = 0;
     56c:	19 82       	std	Y+1, r1	; 0x01
	if (nrf24l01_readready(&pipe)) {
     56e:	ce 01       	movw	r24, r28
     570:	01 96       	adiw	r24, 0x01	; 1
     572:	0e 94 42 06 	call	0xc84	; 0xc84 <nrf24l01_readready>
     576:	88 23       	and	r24, r24
     578:	f1 f0       	breq	.+60     	; 0x5b6 <sMCIfaceRF_getCheck+0x58>
		if (pipe==5) {
     57a:	89 81       	ldd	r24, Y+1	; 0x01
     57c:	85 30       	cpi	r24, 0x05	; 5
     57e:	e9 f4       	brne	.+58     	; 0x5ba <sMCIfaceRF_getCheck+0x5c>
     580:	e0 e1       	ldi	r30, 0x10	; 16
     582:	f2 e0       	ldi	r31, 0x02	; 2
	} else {
		return false;
	}
}

sc_boolean sMCIfaceRF_getCheck() {
     584:	8f 01       	movw	r16, r30
     586:	07 5f       	subi	r16, 0xF7	; 247
     588:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t pipe = 0;
	if (nrf24l01_readready(&pipe)) {
		if (pipe==5) {
			//clear buffer
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
     58a:	11 92       	st	Z+, r1
     58c:	e0 17       	cp	r30, r16
     58e:	f1 07       	cpc	r31, r17
     590:	e1 f7       	brne	.-8      	; 0x58a <sMCIfaceRF_getCheck+0x2c>
			
			//read buffer
			nrf24l01_read(pipe,bufferin);
     592:	85 e0       	ldi	r24, 0x05	; 5
     594:	60 e1       	ldi	r22, 0x10	; 16
     596:	72 e0       	ldi	r23, 0x02	; 2
     598:	0e 94 54 06 	call	0xca8	; 0xca8 <nrf24l01_read>
			
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) if (bufferin[i]!=1) return false;
     59c:	80 91 10 02 	lds	r24, 0x0210
     5a0:	81 30       	cpi	r24, 0x01	; 1
     5a2:	69 f4       	brne	.+26     	; 0x5be <sMCIfaceRF_getCheck+0x60>
     5a4:	e1 e1       	ldi	r30, 0x11	; 17
     5a6:	f2 e0       	ldi	r31, 0x02	; 2
     5a8:	81 91       	ld	r24, Z+
     5aa:	81 30       	cpi	r24, 0x01	; 1
     5ac:	51 f4       	brne	.+20     	; 0x5c2 <sMCIfaceRF_getCheck+0x64>
     5ae:	e0 17       	cp	r30, r16
     5b0:	f1 07       	cpc	r31, r17
     5b2:	d1 f7       	brne	.-12     	; 0x5a8 <sMCIfaceRF_getCheck+0x4a>
     5b4:	07 c0       	rjmp	.+14     	; 0x5c4 <sMCIfaceRF_getCheck+0x66>
			return true;
		}
	}
	return false;
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	05 c0       	rjmp	.+10     	; 0x5c4 <sMCIfaceRF_getCheck+0x66>
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	03 c0       	rjmp	.+6      	; 0x5c4 <sMCIfaceRF_getCheck+0x66>
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
			
			//read buffer
			nrf24l01_read(pipe,bufferin);
			
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) if (bufferin[i]!=1) return false;
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <sMCIfaceRF_getCheck+0x66>
     5c2:	80 e0       	ldi	r24, 0x00	; 0
			return true;
		}
	}
	return false;
}
     5c4:	0f 90       	pop	r0
     5c6:	df 91       	pop	r29
     5c8:	cf 91       	pop	r28
     5ca:	1f 91       	pop	r17
     5cc:	0f 91       	pop	r16
     5ce:	08 95       	ret

000005d0 <sMCIfaceRF_sendData>:

sc_boolean sMCIfaceRF_sendData(const sc_integer cmd, const sc_integer id, const sc_integer dish_id, const sc_integer amount) {
     5d0:	af 92       	push	r10
     5d2:	ef 92       	push	r14
     5d4:	82 2f       	mov	r24, r18
     5d6:	eb e1       	ldi	r30, 0x1B	; 27
     5d8:	f2 e0       	ldi	r31, 0x02	; 2
     5da:	af 01       	movw	r20, r30
     5dc:	47 5f       	subi	r20, 0xF7	; 247
     5de:	5f 4f       	sbci	r21, 0xFF	; 255
	
	unsigned char num;
	unsigned char mod;
	//clear buffer
	for(uint8_t i=0; i<sizeof(bufferout); i++) bufferout[i] = 0;
     5e0:	11 92       	st	Z+, r1
     5e2:	e4 17       	cp	r30, r20
     5e4:	f5 07       	cpc	r31, r21
     5e6:	e1 f7       	brne	.-8      	; 0x5e0 <sMCIfaceRF_sendData+0x10>
	
	//Lenh cho data: 1-goi mon, 2-huy mon, 3-thanh toan, 4-goi boi ban
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
     5e8:	60 5d       	subi	r22, 0xD0	; 208
     5ea:	60 93 1b 02 	sts	0x021B, r22
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     5ee:	3a e0       	ldi	r19, 0x0A	; 10
     5f0:	63 2f       	mov	r22, r19
     5f2:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     5f6:	90 5d       	subi	r25, 0xD0	; 208
     5f8:	90 93 1d 02 	sts	0x021D, r25
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     5fc:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     600:	90 5d       	subi	r25, 0xD0	; 208
     602:	90 93 1c 02 	sts	0x021C, r25
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
		num/=10;
     606:	8e 2d       	mov	r24, r14
     608:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__udivmodqi4>
		bufferout[3+i]=mod+'0';
     60c:	90 5d       	subi	r25, 0xD0	; 208
     60e:	90 93 20 02 	sts	0x0220, r25
	}
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
     612:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__udivmodqi4>
		num/=10;
		bufferout[3+i]=mod+'0';
     616:	90 5d       	subi	r25, 0xD0	; 208
     618:	90 93 1f 02 	sts	0x021F, r25
	}
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
     61c:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__udivmodqi4>
		num/=10;
		bufferout[3+i]=mod+'0';
     620:	90 5d       	subi	r25, 0xD0	; 208
     622:	90 93 1e 02 	sts	0x021E, r25
	}
	
	//Chuyen doi so luong mon an
	num=amount;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     626:	8a 2d       	mov	r24, r10
     628:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__udivmodqi4>
		num/=10;
		bufferout[6+i]=mod+'0';
     62c:	90 5d       	subi	r25, 0xD0	; 208
     62e:	90 93 22 02 	sts	0x0222, r25
	}
	
	//Chuyen doi so luong mon an
	num=amount;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     632:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__udivmodqi4>
		num/=10;
		bufferout[6+i]=mod+'0';
     636:	90 5d       	subi	r25, 0xD0	; 208
     638:	90 93 21 02 	sts	0x0221, r25
	}
	
	//Set Address for Data
	nrf24l01_settxaddr(nrf24l01_addrtx);
     63c:	85 e5       	ldi	r24, 0x55	; 85
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	0e 94 b2 04 	call	0x964	; 0x964 <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     644:	8b e1       	ldi	r24, 0x1B	; 27
     646:	92 e0       	ldi	r25, 0x02	; 2
     648:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <nrf24l01_write>
     64c:	98 2f       	mov	r25, r24
     64e:	ef ec       	ldi	r30, 0xCF	; 207
     650:	f7 e0       	ldi	r31, 0x07	; 7
     652:	31 97       	sbiw	r30, 0x01	; 1
     654:	f1 f7       	brne	.-4      	; 0x652 <sMCIfaceRF_sendData+0x82>
     656:	00 c0       	rjmp	.+0      	; 0x658 <sMCIfaceRF_sendData+0x88>
     658:	00 00       	nop
		}
	}
	return false;
}

sc_boolean sMCIfaceRF_sendData(const sc_integer cmd, const sc_integer id, const sc_integer dish_id, const sc_integer amount) {
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	91 30       	cpi	r25, 0x01	; 1
     65e:	09 f0       	breq	.+2      	; 0x662 <sMCIfaceRF_sendData+0x92>
     660:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     662:	ef 90       	pop	r14
     664:	af 90       	pop	r10
     666:	08 95       	ret

00000668 <sMCIfaceRF_sendReq>:

sc_boolean sMCIfaceRF_sendReq(const sc_integer cmd, const sc_integer id) {
     668:	eb e1       	ldi	r30, 0x1B	; 27
     66a:	f2 e0       	ldi	r31, 0x02	; 2
     66c:	cf 01       	movw	r24, r30
     66e:	09 96       	adiw	r24, 0x09	; 9
	
	unsigned char num;
	unsigned char mod;
	//clear buffer
	for(uint8_t i=0; i<sizeof(bufferout); i++) bufferout[i] = 0;
     670:	11 92       	st	Z+, r1
     672:	e8 17       	cp	r30, r24
     674:	f9 07       	cpc	r31, r25
     676:	e1 f7       	brne	.-8      	; 0x670 <sMCIfaceRF_sendReq+0x8>
	
	//Lenh cho data: 1-xong mon an, 2-huy mon
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
     678:	60 5d       	subi	r22, 0xD0	; 208
     67a:	60 93 1b 02 	sts	0x021B, r22
	
	//So thu tu mon an
	bufferout[1]=id+'0';
     67e:	20 5d       	subi	r18, 0xD0	; 208
     680:	20 93 1c 02 	sts	0x021C, r18
	
	//Set Address for Data
	nrf24l01_settxaddr(nrf24l01_addrtx);
     684:	85 e5       	ldi	r24, 0x55	; 85
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	0e 94 b2 04 	call	0x964	; 0x964 <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     68c:	8b e1       	ldi	r24, 0x1B	; 27
     68e:	92 e0       	ldi	r25, 0x02	; 2
     690:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <nrf24l01_write>
     694:	98 2f       	mov	r25, r24
     696:	ef ec       	ldi	r30, 0xCF	; 207
     698:	f7 e0       	ldi	r31, 0x07	; 7
     69a:	31 97       	sbiw	r30, 0x01	; 1
     69c:	f1 f7       	brne	.-4      	; 0x69a <sMCIfaceRF_sendReq+0x32>
     69e:	00 c0       	rjmp	.+0      	; 0x6a0 <sMCIfaceRF_sendReq+0x38>
     6a0:	00 00       	nop
	} else {
		return false;
	}
}

sc_boolean sMCIfaceRF_sendReq(const sc_integer cmd, const sc_integer id) {
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	91 30       	cpi	r25, 0x01	; 1
     6a6:	09 f0       	breq	.+2      	; 0x6aa <sMCIfaceRF_sendReq+0x42>
     6a8:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     6aa:	08 95       	ret

000006ac <sMC_setTimer>:

void sMC_setTimer(const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
	TimerSet(evid,time_ms);
     6ac:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <TimerSet>
}
     6b0:	08 95       	ret

000006b2 <sMC_unsetTimer>:
void sMC_unsetTimer(const sc_eventid evid) {
	TimerUnSet(evid);
     6b2:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <TimerUnSet>
}
     6b6:	08 95       	ret

000006b8 <sMCIfaceRF_init>:

void sMCIfaceRF_init() {
	nrf24l01_init();
     6b8:	0e 94 d0 06 	call	0xda0	; 0xda0 <nrf24l01_init>
}
     6bc:	08 95       	ret

000006be <main>:

int main(void)
{
	uint8_t i;
	DDRC=0x0F;
     6be:	8f e0       	ldi	r24, 0x0F	; 15
     6c0:	84 bb       	out	0x14, r24	; 20
	PORTC=0x0F;
     6c2:	85 bb       	out	0x15, r24	; 21
	l=malloc(sizeof(SMC*)) ;
     6c4:	82 e0       	ldi	r24, 0x02	; 2
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <malloc>
     6cc:	80 93 19 02 	sts	0x0219, r24
     6d0:	90 93 1a 02 	sts	0x021A, r25
	TimerInit();
     6d4:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <TimerInit>
	sMC_init(l);
     6d8:	80 91 19 02 	lds	r24, 0x0219
     6dc:	90 91 1a 02 	lds	r25, 0x021A
     6e0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <sMC_init>
	sMC_enter(l);
     6e4:	80 91 19 02 	lds	r24, 0x0219
     6e8:	90 91 1a 02 	lds	r25, 0x021A
     6ec:	0e 94 96 07 	call	0xf2c	; 0xf2c <sMC_enter>
	
	//setup buffer
	for(i=0; i<sizeof(bufferout); i++)
	bufferout[i] = i+'a';
     6f0:	81 e6       	ldi	r24, 0x61	; 97
     6f2:	80 93 1b 02 	sts	0x021B, r24
     6f6:	82 e6       	ldi	r24, 0x62	; 98
     6f8:	80 93 1c 02 	sts	0x021C, r24
     6fc:	83 e6       	ldi	r24, 0x63	; 99
     6fe:	80 93 1d 02 	sts	0x021D, r24
     702:	84 e6       	ldi	r24, 0x64	; 100
     704:	80 93 1e 02 	sts	0x021E, r24
     708:	85 e6       	ldi	r24, 0x65	; 101
     70a:	80 93 1f 02 	sts	0x021F, r24
     70e:	86 e6       	ldi	r24, 0x66	; 102
     710:	80 93 20 02 	sts	0x0220, r24
     714:	87 e6       	ldi	r24, 0x67	; 103
     716:	80 93 21 02 	sts	0x0221, r24
     71a:	88 e6       	ldi	r24, 0x68	; 104
     71c:	80 93 22 02 	sts	0x0222, r24
     720:	89 e6       	ldi	r24, 0x69	; 105
     722:	80 93 23 02 	sts	0x0223, r24
     726:	e0 e1       	ldi	r30, 0x10	; 16
     728:	f2 e0       	ldi	r31, 0x02	; 2

void sMCIfaceRF_init() {
	nrf24l01_init();
}

int main(void)
     72a:	cf 01       	movw	r24, r30
     72c:	09 96       	adiw	r24, 0x09	; 9
	
	//setup buffer
	for(i=0; i<sizeof(bufferout); i++)
	bufferout[i] = i+'a';
	for(i=0; i<sizeof(bufferin); i++)
	bufferin[i] = 0;
     72e:	11 92       	st	Z+, r1
	sMC_enter(l);
	
	//setup buffer
	for(i=0; i<sizeof(bufferout); i++)
	bufferout[i] = i+'a';
	for(i=0; i<sizeof(bufferin); i++)
     730:	e8 17       	cp	r30, r24
     732:	f9 07       	cpc	r31, r25
     734:	e1 f7       	brne	.-8      	; 0x72e <main+0x70>
	
	uint8_t down=0;
	
	while(1)
	{
		sMC_runCycle(l);
     736:	80 91 19 02 	lds	r24, 0x0219
     73a:	90 91 1a 02 	lds	r25, 0x021A
     73e:	0e 94 2f 08 	call	0x105e	; 0x105e <sMC_runCycle>
     742:	f9 cf       	rjmp	.-14     	; 0x736 <main+0x78>

00000744 <__vector_16>:
	}
}

ISR (TIMER0_OVF_vect) {
     744:	1f 92       	push	r1
     746:	0f 92       	push	r0
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	0f 92       	push	r0
     74c:	0b b6       	in	r0, 0x3b	; 59
     74e:	0f 92       	push	r0
     750:	11 24       	eor	r1, r1
     752:	2f 93       	push	r18
     754:	3f 93       	push	r19
     756:	4f 93       	push	r20
     758:	5f 93       	push	r21
     75a:	6f 93       	push	r22
     75c:	7f 93       	push	r23
     75e:	8f 93       	push	r24
     760:	9f 93       	push	r25
     762:	af 93       	push	r26
     764:	bf 93       	push	r27
     766:	ef 93       	push	r30
     768:	ff 93       	push	r31
	TCNT0=131;
     76a:	83 e8       	ldi	r24, 0x83	; 131
     76c:	82 bf       	out	0x32, r24	; 50
	TimerCheck(l);
     76e:	80 91 19 02 	lds	r24, 0x0219
     772:	90 91 1a 02 	lds	r25, 0x021A
     776:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <TimerCheck>
     77a:	ff 91       	pop	r31
     77c:	ef 91       	pop	r30
     77e:	bf 91       	pop	r27
     780:	af 91       	pop	r26
     782:	9f 91       	pop	r25
     784:	8f 91       	pop	r24
     786:	7f 91       	pop	r23
     788:	6f 91       	pop	r22
     78a:	5f 91       	pop	r21
     78c:	4f 91       	pop	r20
     78e:	3f 91       	pop	r19
     790:	2f 91       	pop	r18
     792:	0f 90       	pop	r0
     794:	0b be       	out	0x3b, r0	; 59
     796:	0f 90       	pop	r0
     798:	0f be       	out	0x3f, r0	; 63
     79a:	0f 90       	pop	r0
     79c:	1f 90       	pop	r1
     79e:	18 95       	reti

000007a0 <nrf24l01_readregister>:

/*
 * read one register
 */
uint8_t nrf24l01_readregister(uint8_t reg) {
	nrf24l01_CSNlo; //low CSN
     7a0:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     7a2:	8f 71       	andi	r24, 0x1F	; 31
     7a4:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <spi_writereadbyte>
    uint8_t result = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
     7a8:	8f ef       	ldi	r24, 0xFF	; 255
     7aa:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <spi_writereadbyte>
    nrf24l01_CSNhi; //high CSN
     7ae:	ae 9a       	sbi	0x15, 6	; 21
    return result;
}
     7b0:	08 95       	ret

000007b2 <nrf24l01_readregisters>:

/*
 * read many registers
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
     7b2:	ff 92       	push	r15
     7b4:	0f 93       	push	r16
     7b6:	1f 93       	push	r17
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	06 2f       	mov	r16, r22
     7be:	f7 2e       	mov	r15, r23
     7c0:	14 2f       	mov	r17, r20
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
     7c2:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     7c4:	8f 71       	andi	r24, 0x1F	; 31
     7c6:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <spi_writereadbyte>
	for(i=0; i<len; i++)
     7ca:	11 23       	and	r17, r17
     7cc:	51 f0       	breq	.+20     	; 0x7e2 <nrf24l01_readregisters+0x30>
     7ce:	c0 2f       	mov	r28, r16
     7d0:	df 2d       	mov	r29, r15
     7d2:	00 e0       	ldi	r16, 0x00	; 0
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
     7d4:	8f ef       	ldi	r24, 0xFF	; 255
     7d6:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <spi_writereadbyte>
     7da:	89 93       	st	Y+, r24
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     7dc:	0f 5f       	subi	r16, 0xFF	; 255
     7de:	01 17       	cp	r16, r17
     7e0:	c9 f7       	brne	.-14     	; 0x7d4 <nrf24l01_readregisters+0x22>
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
	nrf24l01_CSNhi; //high CSN
     7e2:	ae 9a       	sbi	0x15, 6	; 21
}
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	ff 90       	pop	r15
     7ee:	08 95       	ret

000007f0 <nrf24l01_writeregister>:

/*
 * write one register
 */
void nrf24l01_writeregister(uint8_t reg, uint8_t value) {
     7f0:	cf 93       	push	r28
     7f2:	c6 2f       	mov	r28, r22
	nrf24l01_CSNlo; //low CSN
     7f4:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     7f6:	8f 71       	andi	r24, 0x1F	; 31
     7f8:	80 62       	ori	r24, 0x20	; 32
     7fa:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <spi_writereadbyte>
	spi_writereadbyte(value); //write register
     7fe:	8c 2f       	mov	r24, r28
     800:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     804:	ae 9a       	sbi	0x15, 6	; 21
}
     806:	cf 91       	pop	r28
     808:	08 95       	ret

0000080a <nrf24l01_writeregisters>:

/*
 * write many registers
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
     80a:	ff 92       	push	r15
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	06 2f       	mov	r16, r22
     816:	f7 2e       	mov	r15, r23
     818:	14 2f       	mov	r17, r20
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
     81a:	ae 98       	cbi	0x15, 6	; 21
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     81c:	8f 71       	andi	r24, 0x1F	; 31
     81e:	80 62       	ori	r24, 0x20	; 32
     820:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <spi_writereadbyte>
	for(i=0; i<len; i++)
     824:	11 23       	and	r17, r17
     826:	49 f0       	breq	.+18     	; 0x83a <nrf24l01_writeregisters+0x30>
     828:	c0 2f       	mov	r28, r16
     82a:	df 2d       	mov	r29, r15
     82c:	00 e0       	ldi	r16, 0x00	; 0
		 spi_writereadbyte(value[i]); //write register
     82e:	89 91       	ld	r24, Y+
     830:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <spi_writereadbyte>
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     834:	0f 5f       	subi	r16, 0xFF	; 255
     836:	01 17       	cp	r16, r17
     838:	d1 f7       	brne	.-12     	; 0x82e <nrf24l01_writeregisters+0x24>
		 spi_writereadbyte(value[i]); //write register
	nrf24l01_CSNhi; //high CSN
     83a:	ae 9a       	sbi	0x15, 6	; 21
}
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	ff 90       	pop	r15
     846:	08 95       	ret

00000848 <nrf24l01_revaddress>:

/*
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	04 96       	adiw	r24, 0x04	; 4
     84e:	db 01       	movw	r26, r22
     850:	a2 0f       	add	r26, r18
     852:	b3 1f       	adc	r27, r19
     854:	fc 01       	movw	r30, r24
     856:	e2 1b       	sub	r30, r18
     858:	f3 0b       	sbc	r31, r19
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
     85a:	40 81       	ld	r20, Z
     85c:	4c 93       	st	X, r20
     85e:	2f 5f       	subi	r18, 0xFF	; 255
     860:	3f 4f       	sbci	r19, 0xFF	; 255
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
     862:	25 30       	cpi	r18, 0x05	; 5
     864:	31 05       	cpc	r19, r1
     866:	99 f7       	brne	.-26     	; 0x84e <nrf24l01_revaddress+0x6>
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
}
     868:	08 95       	ret

0000086a <nrf24l01_setrxaddr>:

/*
 * set rx address
 */
void nrf24l01_setrxaddr(uint8_t pipe, uint8_t *addr) {
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	00 d0       	rcall	.+0      	; 0x870 <nrf24l01_setrxaddr+0x6>
     870:	00 d0       	rcall	.+0      	; 0x872 <nrf24l01_setrxaddr+0x8>
     872:	0f 92       	push	r0
     874:	cd b7       	in	r28, 0x3d	; 61
     876:	de b7       	in	r29, 0x3e	; 62
	if(pipe == 0) {
     878:	88 23       	and	r24, r24
     87a:	b1 f4       	brne	.+44     	; 0x8a8 <nrf24l01_setrxaddr+0x3e>
		memcpy(&nrf24l01_addr0, addr, NRF24L01_ADDRSIZE); //cache address
     87c:	a9 ed       	ldi	r26, 0xD9	; 217
     87e:	b1 e0       	ldi	r27, 0x01	; 1
     880:	fb 01       	movw	r30, r22
     882:	85 e0       	ldi	r24, 0x05	; 5
     884:	01 90       	ld	r0, Z+
     886:	0d 92       	st	X+, r0
     888:	81 50       	subi	r24, 0x01	; 1
     88a:	e1 f7       	brne	.-8      	; 0x884 <nrf24l01_setrxaddr+0x1a>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     88c:	cb 01       	movw	r24, r22
     88e:	be 01       	movw	r22, r28
     890:	6f 5f       	subi	r22, 0xFF	; 255
     892:	7f 4f       	sbci	r23, 0xFF	; 255
     894:	0e 94 24 04 	call	0x848	; 0x848 <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE);
     898:	8a e0       	ldi	r24, 0x0A	; 10
     89a:	be 01       	movw	r22, r28
     89c:	6f 5f       	subi	r22, 0xFF	; 255
     89e:	7f 4f       	sbci	r23, 0xFF	; 255
     8a0:	45 e0       	ldi	r20, 0x05	; 5
     8a2:	0e 94 05 04 	call	0x80a	; 0x80a <nrf24l01_writeregisters>
     8a6:	56 c0       	rjmp	.+172    	; 0x954 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 1) {
     8a8:	81 30       	cpi	r24, 0x01	; 1
     8aa:	b1 f4       	brne	.+44     	; 0x8d8 <nrf24l01_setrxaddr+0x6e>
		memcpy(&nrf24l01_addr1, addr, NRF24L01_ADDRSIZE); //cache address
     8ac:	ae ed       	ldi	r26, 0xDE	; 222
     8ae:	b1 e0       	ldi	r27, 0x01	; 1
     8b0:	fb 01       	movw	r30, r22
     8b2:	85 e0       	ldi	r24, 0x05	; 5
     8b4:	01 90       	ld	r0, Z+
     8b6:	0d 92       	st	X+, r0
     8b8:	81 50       	subi	r24, 0x01	; 1
     8ba:	e1 f7       	brne	.-8      	; 0x8b4 <nrf24l01_setrxaddr+0x4a>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     8bc:	cb 01       	movw	r24, r22
     8be:	be 01       	movw	r22, r28
     8c0:	6f 5f       	subi	r22, 0xFF	; 255
     8c2:	7f 4f       	sbci	r23, 0xFF	; 255
     8c4:	0e 94 24 04 	call	0x848	; 0x848 <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P1, addrrev, NRF24L01_ADDRSIZE);
     8c8:	8b e0       	ldi	r24, 0x0B	; 11
     8ca:	be 01       	movw	r22, r28
     8cc:	6f 5f       	subi	r22, 0xFF	; 255
     8ce:	7f 4f       	sbci	r23, 0xFF	; 255
     8d0:	45 e0       	ldi	r20, 0x05	; 5
     8d2:	0e 94 05 04 	call	0x80a	; 0x80a <nrf24l01_writeregisters>
     8d6:	3e c0       	rjmp	.+124    	; 0x954 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 2) {
     8d8:	82 30       	cpi	r24, 0x02	; 2
     8da:	71 f4       	brne	.+28     	; 0x8f8 <nrf24l01_setrxaddr+0x8e>
		memcpy(&nrf24l01_addr2, addr, NRF24L01_ADDRSIZE); //cache address
     8dc:	a3 ee       	ldi	r26, 0xE3	; 227
     8de:	b1 e0       	ldi	r27, 0x01	; 1
     8e0:	fb 01       	movw	r30, r22
     8e2:	85 e0       	ldi	r24, 0x05	; 5
     8e4:	01 90       	ld	r0, Z+
     8e6:	0d 92       	st	X+, r0
     8e8:	81 50       	subi	r24, 0x01	; 1
     8ea:	e1 f7       	brne	.-8      	; 0x8e4 <nrf24l01_setrxaddr+0x7a>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P2, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     8ec:	8c e0       	ldi	r24, 0x0C	; 12
     8ee:	fb 01       	movw	r30, r22
     8f0:	64 81       	ldd	r22, Z+4	; 0x04
     8f2:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
     8f6:	2e c0       	rjmp	.+92     	; 0x954 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 3) {
     8f8:	83 30       	cpi	r24, 0x03	; 3
     8fa:	71 f4       	brne	.+28     	; 0x918 <nrf24l01_setrxaddr+0xae>
		memcpy(&nrf24l01_addr3, addr, NRF24L01_ADDRSIZE); //cache address
     8fc:	a8 ee       	ldi	r26, 0xE8	; 232
     8fe:	b1 e0       	ldi	r27, 0x01	; 1
     900:	fb 01       	movw	r30, r22
     902:	85 e0       	ldi	r24, 0x05	; 5
     904:	01 90       	ld	r0, Z+
     906:	0d 92       	st	X+, r0
     908:	81 50       	subi	r24, 0x01	; 1
     90a:	e1 f7       	brne	.-8      	; 0x904 <nrf24l01_setrxaddr+0x9a>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P3, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     90c:	8d e0       	ldi	r24, 0x0D	; 13
     90e:	fb 01       	movw	r30, r22
     910:	64 81       	ldd	r22, Z+4	; 0x04
     912:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
     916:	1e c0       	rjmp	.+60     	; 0x954 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 4) {
     918:	84 30       	cpi	r24, 0x04	; 4
     91a:	71 f4       	brne	.+28     	; 0x938 <nrf24l01_setrxaddr+0xce>
		memcpy(&nrf24l01_addr4, addr, NRF24L01_ADDRSIZE); //cache address
     91c:	ad ee       	ldi	r26, 0xED	; 237
     91e:	b1 e0       	ldi	r27, 0x01	; 1
     920:	fb 01       	movw	r30, r22
     922:	85 e0       	ldi	r24, 0x05	; 5
     924:	01 90       	ld	r0, Z+
     926:	0d 92       	st	X+, r0
     928:	81 50       	subi	r24, 0x01	; 1
     92a:	e1 f7       	brne	.-8      	; 0x924 <nrf24l01_setrxaddr+0xba>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P4, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     92c:	8e e0       	ldi	r24, 0x0E	; 14
     92e:	fb 01       	movw	r30, r22
     930:	64 81       	ldd	r22, Z+4	; 0x04
     932:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
     936:	0e c0       	rjmp	.+28     	; 0x954 <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 5) {
     938:	85 30       	cpi	r24, 0x05	; 5
     93a:	61 f4       	brne	.+24     	; 0x954 <nrf24l01_setrxaddr+0xea>
		memcpy(&nrf24l01_addr5, addr, NRF24L01_ADDRSIZE); //cache address
     93c:	a2 ef       	ldi	r26, 0xF2	; 242
     93e:	b1 e0       	ldi	r27, 0x01	; 1
     940:	fb 01       	movw	r30, r22
     942:	01 90       	ld	r0, Z+
     944:	0d 92       	st	X+, r0
     946:	81 50       	subi	r24, 0x01	; 1
     948:	e1 f7       	brne	.-8      	; 0x942 <nrf24l01_setrxaddr+0xd8>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P5, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     94a:	8f e0       	ldi	r24, 0x0F	; 15
     94c:	fb 01       	movw	r30, r22
     94e:	64 81       	ldd	r22, Z+4	; 0x04
     950:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
	}
}
     954:	0f 90       	pop	r0
     956:	0f 90       	pop	r0
     958:	0f 90       	pop	r0
     95a:	0f 90       	pop	r0
     95c:	0f 90       	pop	r0
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	08 95       	ret

00000964 <nrf24l01_settxaddr>:

/*
 * set tx address
 */
void nrf24l01_settxaddr(uint8_t *addr) {
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	00 d0       	rcall	.+0      	; 0x96a <nrf24l01_settxaddr+0x6>
     96a:	00 d0       	rcall	.+0      	; 0x96c <nrf24l01_settxaddr+0x8>
     96c:	0f 92       	push	r0
     96e:	cd b7       	in	r28, 0x3d	; 61
     970:	de b7       	in	r29, 0x3e	; 62
	memcpy(&nrf24l01_addrtx, addr, NRF24L01_ADDRSIZE); //cache address
     972:	a7 ef       	ldi	r26, 0xF7	; 247
     974:	b1 e0       	ldi	r27, 0x01	; 1
     976:	e8 2f       	mov	r30, r24
     978:	f9 2f       	mov	r31, r25
     97a:	25 e0       	ldi	r18, 0x05	; 5
     97c:	01 90       	ld	r0, Z+
     97e:	0d 92       	st	X+, r0
     980:	21 50       	subi	r18, 0x01	; 1
     982:	e1 f7       	brne	.-8      	; 0x97c <nrf24l01_settxaddr+0x18>
	uint8_t addrrev[NRF24L01_ADDRSIZE];
	nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     984:	be 01       	movw	r22, r28
     986:	6f 5f       	subi	r22, 0xFF	; 255
     988:	7f 4f       	sbci	r23, 0xFF	; 255
     98a:	0e 94 24 04 	call	0x848	; 0x848 <nrf24l01_revaddress>
	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE); //set rx address for ack on pipe 0
     98e:	8a e0       	ldi	r24, 0x0A	; 10
     990:	be 01       	movw	r22, r28
     992:	6f 5f       	subi	r22, 0xFF	; 255
     994:	7f 4f       	sbci	r23, 0xFF	; 255
     996:	45 e0       	ldi	r20, 0x05	; 5
     998:	0e 94 05 04 	call	0x80a	; 0x80a <nrf24l01_writeregisters>
	nrf24l01_writeregisters(NRF24L01_REG_TX_ADDR, addrrev, NRF24L01_ADDRSIZE); //set tx address
     99c:	80 e1       	ldi	r24, 0x10	; 16
     99e:	be 01       	movw	r22, r28
     9a0:	6f 5f       	subi	r22, 0xFF	; 255
     9a2:	7f 4f       	sbci	r23, 0xFF	; 255
     9a4:	45 e0       	ldi	r20, 0x05	; 5
     9a6:	0e 94 05 04 	call	0x80a	; 0x80a <nrf24l01_writeregisters>
}
     9aa:	0f 90       	pop	r0
     9ac:	0f 90       	pop	r0
     9ae:	0f 90       	pop	r0
     9b0:	0f 90       	pop	r0
     9b2:	0f 90       	pop	r0
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	08 95       	ret

000009ba <nrf24l01_flushRXfifo>:

/*
 * flush RX fifo
 */
void nrf24l01_flushRXfifo() {
	nrf24l01_CSNlo; //low CSN
     9ba:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_FLUSH_RX);
     9bc:	82 ee       	ldi	r24, 0xE2	; 226
     9be:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     9c2:	ae 9a       	sbi	0x15, 6	; 21
}
     9c4:	08 95       	ret

000009c6 <nrf24l01_flushTXfifo>:

/*
 * flush TX fifo
 */
void nrf24l01_flushTXfifo() {
	nrf24l01_CSNlo; //low CSN
     9c6:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_FLUSH_TX);
     9c8:	81 ee       	ldi	r24, 0xE1	; 225
     9ca:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     9ce:	ae 9a       	sbi	0x15, 6	; 21
}
     9d0:	08 95       	ret

000009d2 <nrf24l01_setRX>:

/*
 * set chip as RX
 */
void nrf24l01_setRX() {
	nrf24l01_setrxaddr(0, nrf24l01_addr0); //restore pipe 0 address
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	69 ed       	ldi	r22, 0xD9	; 217
     9d6:	71 e0       	ldi	r23, 0x01	; 1
     9d8:	0e 94 35 04 	call	0x86a	; 0x86a <nrf24l01_setrxaddr>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PRIM_RX)); //prx mode
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <nrf24l01_readregister>
     9e2:	68 2f       	mov	r22, r24
     9e4:	61 60       	ori	r22, 0x01	; 1
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <nrf24l01_readregister>
     9f2:	68 2f       	mov	r22, r24
     9f4:	62 60       	ori	r22, 0x02	; 2
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     9fc:	87 e0       	ldi	r24, 0x07	; 7
     9fe:	60 e7       	ldi	r22, 0x70	; 112
     a00:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
	nrf24l01_flushRXfifo(); //flush rx fifo
     a04:	0e 94 dd 04 	call	0x9ba	; 0x9ba <nrf24l01_flushRXfifo>
	nrf24l01_flushTXfifo(); //flush tx fifo
     a08:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <nrf24l01_flushTXfifo>
	nrf24l01_CEhi; //start listening
     a0c:	af 9a       	sbi	0x15, 7	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a0e:	82 e3       	ldi	r24, 0x32	; 50
     a10:	8a 95       	dec	r24
     a12:	f1 f7       	brne	.-4      	; 0xa10 <nrf24l01_setRX+0x3e>
	_delay_us(150); //wait for the radio to power up
}
     a14:	08 95       	ret

00000a16 <nrf24l01_setTX>:

/*
 * set chip as TX
 */
void nrf24l01_setTX() {
	nrf24l01_CElo; //stop listening
     a16:	af 98       	cbi	0x15, 7	; 21
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PRIM_RX)); //ptx mode
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <nrf24l01_readregister>
     a1e:	68 2f       	mov	r22, r24
     a20:	6e 7f       	andi	r22, 0xFE	; 254
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <nrf24l01_readregister>
     a2e:	68 2f       	mov	r22, r24
     a30:	62 60       	ori	r22, 0x02	; 2
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     a38:	87 e0       	ldi	r24, 0x07	; 7
     a3a:	60 e7       	ldi	r22, 0x70	; 112
     a3c:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
	nrf24l01_flushTXfifo(); //flush tx fifo
     a40:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <nrf24l01_flushTXfifo>
     a44:	82 e3       	ldi	r24, 0x32	; 50
     a46:	8a 95       	dec	r24
     a48:	f1 f7       	brne	.-4      	; 0xa46 <nrf24l01_setTX+0x30>
	_delay_us(150); //wait for the radio to power up
}
     a4a:	08 95       	ret

00000a4c <nrf24l01_getstatus>:
/*
 * get status register
 */
uint8_t nrf24l01_getstatus() {
	uint8_t status = 0;
	nrf24l01_CSNlo; //low CSN
     a4c:	ae 98       	cbi	0x15, 6	; 21
	status = spi_writereadbyte(NRF24L01_CMD_NOP); //get status, send NOP request
     a4e:	8f ef       	ldi	r24, 0xFF	; 255
     a50:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     a54:	ae 9a       	sbi	0x15, 6	; 21
	return status;
}
     a56:	08 95       	ret

00000a58 <nrf24l01_printinfo>:

#if NRF24L01_PRINTENABLE == 1
/*
 * print info
 */
void nrf24l01_printinfo(void(*prints)(const char *), void(*printc)(unsigned char data)) {
     a58:	ef 92       	push	r14
     a5a:	ff 92       	push	r15
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	cd b7       	in	r28, 0x3d	; 61
     a66:	de b7       	in	r29, 0x3e	; 62
     a68:	c4 56       	subi	r28, 0x64	; 100
     a6a:	d0 40       	sbci	r29, 0x00	; 0
     a6c:	0f b6       	in	r0, 0x3f	; 63
     a6e:	f8 94       	cli
     a70:	de bf       	out	0x3e, r29	; 62
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	cd bf       	out	0x3d, r28	; 61
     a76:	7c 01       	movw	r14, r24
	char buff[100];
	prints("info\r\n");
     a78:	8f e5       	ldi	r24, 0x5F	; 95
     a7a:	91 e0       	ldi	r25, 0x01	; 1
     a7c:	f7 01       	movw	r30, r14
     a7e:	09 95       	icall
	sprintf(buff,"STATUS: %02X\r\n", nrf24l01_getstatus()); prints(buff);
     a80:	0e 94 26 05 	call	0xa4c	; 0xa4c <nrf24l01_getstatus>
     a84:	00 d0       	rcall	.+0      	; 0xa86 <nrf24l01_printinfo+0x2e>
     a86:	00 d0       	rcall	.+0      	; 0xa88 <nrf24l01_printinfo+0x30>
     a88:	00 d0       	rcall	.+0      	; 0xa8a <nrf24l01_printinfo+0x32>
     a8a:	ed b7       	in	r30, 0x3d	; 61
     a8c:	fe b7       	in	r31, 0x3e	; 62
     a8e:	31 96       	adiw	r30, 0x01	; 1
     a90:	8e 01       	movw	r16, r28
     a92:	0f 5f       	subi	r16, 0xFF	; 255
     a94:	1f 4f       	sbci	r17, 0xFF	; 255
     a96:	ad b7       	in	r26, 0x3d	; 61
     a98:	be b7       	in	r27, 0x3e	; 62
     a9a:	12 96       	adiw	r26, 0x02	; 2
     a9c:	1c 93       	st	X, r17
     a9e:	0e 93       	st	-X, r16
     aa0:	11 97       	sbiw	r26, 0x01	; 1
     aa2:	26 e6       	ldi	r18, 0x66	; 102
     aa4:	31 e0       	ldi	r19, 0x01	; 1
     aa6:	33 83       	std	Z+3, r19	; 0x03
     aa8:	22 83       	std	Z+2, r18	; 0x02
     aaa:	84 83       	std	Z+4, r24	; 0x04
     aac:	15 82       	std	Z+5, r1	; 0x05
     aae:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <sprintf>
     ab2:	8d b7       	in	r24, 0x3d	; 61
     ab4:	9e b7       	in	r25, 0x3e	; 62
     ab6:	06 96       	adiw	r24, 0x06	; 6
     ab8:	0f b6       	in	r0, 0x3f	; 63
     aba:	f8 94       	cli
     abc:	9e bf       	out	0x3e, r25	; 62
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	8d bf       	out	0x3d, r24	; 61
     ac2:	c8 01       	movw	r24, r16
     ac4:	f7 01       	movw	r30, r14
     ac6:	09 95       	icall
	sprintf(buff,"CONFIG: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_CONFIG)); prints(buff);
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <nrf24l01_readregister>
     ace:	00 d0       	rcall	.+0      	; 0xad0 <nrf24l01_printinfo+0x78>
     ad0:	00 d0       	rcall	.+0      	; 0xad2 <nrf24l01_printinfo+0x7a>
     ad2:	00 d0       	rcall	.+0      	; 0xad4 <nrf24l01_printinfo+0x7c>
     ad4:	ed b7       	in	r30, 0x3d	; 61
     ad6:	fe b7       	in	r31, 0x3e	; 62
     ad8:	31 96       	adiw	r30, 0x01	; 1
     ada:	ad b7       	in	r26, 0x3d	; 61
     adc:	be b7       	in	r27, 0x3e	; 62
     ade:	12 96       	adiw	r26, 0x02	; 2
     ae0:	1c 93       	st	X, r17
     ae2:	0e 93       	st	-X, r16
     ae4:	11 97       	sbiw	r26, 0x01	; 1
     ae6:	25 e7       	ldi	r18, 0x75	; 117
     ae8:	31 e0       	ldi	r19, 0x01	; 1
     aea:	33 83       	std	Z+3, r19	; 0x03
     aec:	22 83       	std	Z+2, r18	; 0x02
     aee:	84 83       	std	Z+4, r24	; 0x04
     af0:	15 82       	std	Z+5, r1	; 0x05
     af2:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <sprintf>
     af6:	8d b7       	in	r24, 0x3d	; 61
     af8:	9e b7       	in	r25, 0x3e	; 62
     afa:	06 96       	adiw	r24, 0x06	; 6
     afc:	0f b6       	in	r0, 0x3f	; 63
     afe:	f8 94       	cli
     b00:	9e bf       	out	0x3e, r25	; 62
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	8d bf       	out	0x3d, r24	; 61
     b06:	c8 01       	movw	r24, r16
     b08:	f7 01       	movw	r30, r14
     b0a:	09 95       	icall
	sprintf(buff,"RF_CH: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_CH)); prints(buff);
     b0c:	85 e0       	ldi	r24, 0x05	; 5
     b0e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <nrf24l01_readregister>
     b12:	00 d0       	rcall	.+0      	; 0xb14 <nrf24l01_printinfo+0xbc>
     b14:	00 d0       	rcall	.+0      	; 0xb16 <nrf24l01_printinfo+0xbe>
     b16:	00 d0       	rcall	.+0      	; 0xb18 <nrf24l01_printinfo+0xc0>
     b18:	ed b7       	in	r30, 0x3d	; 61
     b1a:	fe b7       	in	r31, 0x3e	; 62
     b1c:	31 96       	adiw	r30, 0x01	; 1
     b1e:	ad b7       	in	r26, 0x3d	; 61
     b20:	be b7       	in	r27, 0x3e	; 62
     b22:	12 96       	adiw	r26, 0x02	; 2
     b24:	1c 93       	st	X, r17
     b26:	0e 93       	st	-X, r16
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	24 e8       	ldi	r18, 0x84	; 132
     b2c:	31 e0       	ldi	r19, 0x01	; 1
     b2e:	33 83       	std	Z+3, r19	; 0x03
     b30:	22 83       	std	Z+2, r18	; 0x02
     b32:	84 83       	std	Z+4, r24	; 0x04
     b34:	15 82       	std	Z+5, r1	; 0x05
     b36:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <sprintf>
     b3a:	8d b7       	in	r24, 0x3d	; 61
     b3c:	9e b7       	in	r25, 0x3e	; 62
     b3e:	06 96       	adiw	r24, 0x06	; 6
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	9e bf       	out	0x3e, r25	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	8d bf       	out	0x3d, r24	; 61
     b4a:	c8 01       	movw	r24, r16
     b4c:	f7 01       	movw	r30, r14
     b4e:	09 95       	icall
	sprintf(buff,"RF_SETUP: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_SETUP)); prints(buff);
     b50:	86 e0       	ldi	r24, 0x06	; 6
     b52:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <nrf24l01_readregister>
     b56:	00 d0       	rcall	.+0      	; 0xb58 <nrf24l01_printinfo+0x100>
     b58:	00 d0       	rcall	.+0      	; 0xb5a <nrf24l01_printinfo+0x102>
     b5a:	00 d0       	rcall	.+0      	; 0xb5c <nrf24l01_printinfo+0x104>
     b5c:	ed b7       	in	r30, 0x3d	; 61
     b5e:	fe b7       	in	r31, 0x3e	; 62
     b60:	31 96       	adiw	r30, 0x01	; 1
     b62:	ad b7       	in	r26, 0x3d	; 61
     b64:	be b7       	in	r27, 0x3e	; 62
     b66:	12 96       	adiw	r26, 0x02	; 2
     b68:	1c 93       	st	X, r17
     b6a:	0e 93       	st	-X, r16
     b6c:	11 97       	sbiw	r26, 0x01	; 1
     b6e:	22 e9       	ldi	r18, 0x92	; 146
     b70:	31 e0       	ldi	r19, 0x01	; 1
     b72:	33 83       	std	Z+3, r19	; 0x03
     b74:	22 83       	std	Z+2, r18	; 0x02
     b76:	84 83       	std	Z+4, r24	; 0x04
     b78:	15 82       	std	Z+5, r1	; 0x05
     b7a:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <sprintf>
     b7e:	8d b7       	in	r24, 0x3d	; 61
     b80:	9e b7       	in	r25, 0x3e	; 62
     b82:	06 96       	adiw	r24, 0x06	; 6
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	f8 94       	cli
     b88:	9e bf       	out	0x3e, r25	; 62
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	8d bf       	out	0x3d, r24	; 61
     b8e:	c8 01       	movw	r24, r16
     b90:	f7 01       	movw	r30, r14
     b92:	09 95       	icall
	sprintf(buff,"EN_AA: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_AA)); prints(buff);
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <nrf24l01_readregister>
     b9a:	00 d0       	rcall	.+0      	; 0xb9c <nrf24l01_printinfo+0x144>
     b9c:	00 d0       	rcall	.+0      	; 0xb9e <nrf24l01_printinfo+0x146>
     b9e:	00 d0       	rcall	.+0      	; 0xba0 <nrf24l01_printinfo+0x148>
     ba0:	ed b7       	in	r30, 0x3d	; 61
     ba2:	fe b7       	in	r31, 0x3e	; 62
     ba4:	31 96       	adiw	r30, 0x01	; 1
     ba6:	ad b7       	in	r26, 0x3d	; 61
     ba8:	be b7       	in	r27, 0x3e	; 62
     baa:	12 96       	adiw	r26, 0x02	; 2
     bac:	1c 93       	st	X, r17
     bae:	0e 93       	st	-X, r16
     bb0:	11 97       	sbiw	r26, 0x01	; 1
     bb2:	23 ea       	ldi	r18, 0xA3	; 163
     bb4:	31 e0       	ldi	r19, 0x01	; 1
     bb6:	33 83       	std	Z+3, r19	; 0x03
     bb8:	22 83       	std	Z+2, r18	; 0x02
     bba:	84 83       	std	Z+4, r24	; 0x04
     bbc:	15 82       	std	Z+5, r1	; 0x05
     bbe:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <sprintf>
     bc2:	8d b7       	in	r24, 0x3d	; 61
     bc4:	9e b7       	in	r25, 0x3e	; 62
     bc6:	06 96       	adiw	r24, 0x06	; 6
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	f8 94       	cli
     bcc:	9e bf       	out	0x3e, r25	; 62
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	8d bf       	out	0x3d, r24	; 61
     bd2:	c8 01       	movw	r24, r16
     bd4:	f7 01       	movw	r30, r14
     bd6:	09 95       	icall
	sprintf(buff,"EN_RXADDR: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_RXADDR)); prints(buff);
     bd8:	82 e0       	ldi	r24, 0x02	; 2
     bda:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <nrf24l01_readregister>
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <nrf24l01_printinfo+0x188>
     be0:	00 d0       	rcall	.+0      	; 0xbe2 <nrf24l01_printinfo+0x18a>
     be2:	00 d0       	rcall	.+0      	; 0xbe4 <nrf24l01_printinfo+0x18c>
     be4:	ed b7       	in	r30, 0x3d	; 61
     be6:	fe b7       	in	r31, 0x3e	; 62
     be8:	31 96       	adiw	r30, 0x01	; 1
     bea:	ad b7       	in	r26, 0x3d	; 61
     bec:	be b7       	in	r27, 0x3e	; 62
     bee:	12 96       	adiw	r26, 0x02	; 2
     bf0:	1c 93       	st	X, r17
     bf2:	0e 93       	st	-X, r16
     bf4:	11 97       	sbiw	r26, 0x01	; 1
     bf6:	21 eb       	ldi	r18, 0xB1	; 177
     bf8:	31 e0       	ldi	r19, 0x01	; 1
     bfa:	33 83       	std	Z+3, r19	; 0x03
     bfc:	22 83       	std	Z+2, r18	; 0x02
     bfe:	84 83       	std	Z+4, r24	; 0x04
     c00:	15 82       	std	Z+5, r1	; 0x05
     c02:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <sprintf>
     c06:	8d b7       	in	r24, 0x3d	; 61
     c08:	9e b7       	in	r25, 0x3e	; 62
     c0a:	06 96       	adiw	r24, 0x06	; 6
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	f8 94       	cli
     c10:	9e bf       	out	0x3e, r25	; 62
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	8d bf       	out	0x3d, r24	; 61
     c16:	c8 01       	movw	r24, r16
     c18:	f7 01       	movw	r30, r14
     c1a:	09 95       	icall
	sprintf(buff,"OBSERVE_TX: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_OBSERVE_TX)); prints(buff);
     c1c:	88 e0       	ldi	r24, 0x08	; 8
     c1e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <nrf24l01_readregister>
     c22:	00 d0       	rcall	.+0      	; 0xc24 <nrf24l01_printinfo+0x1cc>
     c24:	00 d0       	rcall	.+0      	; 0xc26 <nrf24l01_printinfo+0x1ce>
     c26:	00 d0       	rcall	.+0      	; 0xc28 <nrf24l01_printinfo+0x1d0>
     c28:	ed b7       	in	r30, 0x3d	; 61
     c2a:	fe b7       	in	r31, 0x3e	; 62
     c2c:	31 96       	adiw	r30, 0x01	; 1
     c2e:	ad b7       	in	r26, 0x3d	; 61
     c30:	be b7       	in	r27, 0x3e	; 62
     c32:	12 96       	adiw	r26, 0x02	; 2
     c34:	1c 93       	st	X, r17
     c36:	0e 93       	st	-X, r16
     c38:	11 97       	sbiw	r26, 0x01	; 1
     c3a:	23 ec       	ldi	r18, 0xC3	; 195
     c3c:	31 e0       	ldi	r19, 0x01	; 1
     c3e:	33 83       	std	Z+3, r19	; 0x03
     c40:	22 83       	std	Z+2, r18	; 0x02
     c42:	84 83       	std	Z+4, r24	; 0x04
     c44:	15 82       	std	Z+5, r1	; 0x05
     c46:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <sprintf>
     c4a:	8d b7       	in	r24, 0x3d	; 61
     c4c:	9e b7       	in	r25, 0x3e	; 62
     c4e:	06 96       	adiw	r24, 0x06	; 6
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	f8 94       	cli
     c54:	9e bf       	out	0x3e, r25	; 62
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	8d bf       	out	0x3d, r24	; 61
     c5a:	c8 01       	movw	r24, r16
     c5c:	f7 01       	movw	r30, r14
     c5e:	09 95       	icall
	prints("\r\n");
     c60:	86 ed       	ldi	r24, 0xD6	; 214
     c62:	91 e0       	ldi	r25, 0x01	; 1
     c64:	f7 01       	movw	r30, r14
     c66:	09 95       	icall
}
     c68:	cc 59       	subi	r28, 0x9C	; 156
     c6a:	df 4f       	sbci	r29, 0xFF	; 255
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	cd bf       	out	0x3d, r28	; 61
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	1f 91       	pop	r17
     c7c:	0f 91       	pop	r16
     c7e:	ff 90       	pop	r15
     c80:	ef 90       	pop	r14
     c82:	08 95       	ret

00000c84 <nrf24l01_readready>:
}

/*
 * check if there is data ready
 */
uint8_t nrf24l01_readready(uint8_t* pipe) {
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	ec 01       	movw	r28, r24
    uint8_t status = nrf24l01_getstatus();
     c8a:	0e 94 26 05 	call	0xa4c	; 0xa4c <nrf24l01_getstatus>
    uint8_t ret = status & (1<<NRF24L01_REG_RX_DR);
    if(ret) {
     c8e:	98 2f       	mov	r25, r24
     c90:	90 74       	andi	r25, 0x40	; 64
     c92:	86 ff       	sbrs	r24, 6
     c94:	05 c0       	rjmp	.+10     	; 0xca0 <nrf24l01_readready+0x1c>
		//get the pipe number
		if(pipe)
     c96:	20 97       	sbiw	r28, 0x00	; 0
     c98:	19 f0       	breq	.+6      	; 0xca0 <nrf24l01_readready+0x1c>
			*pipe = (status >> NRF24L01_REG_RX_P_NO) & 0b111;
     c9a:	86 95       	lsr	r24
     c9c:	87 70       	andi	r24, 0x07	; 7
     c9e:	88 83       	st	Y, r24
    }
    return ret;
}
     ca0:	89 2f       	mov	r24, r25
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	08 95       	ret

00000ca8 <nrf24l01_read>:

/*
 * get data
 */
void nrf24l01_read(uint8_t pipe,uint8_t *data) {
     ca8:	0f 93       	push	r16
     caa:	1f 93       	push	r17
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
     cb0:	06 2f       	mov	r16, r22
     cb2:	17 2f       	mov	r17, r23
	uint8_t i = 0;
	//read rx register
	nrf24l01_CSNlo; //low CSN
     cb4:	ae 98       	cbi	0x15, 6	; 21
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
     cb6:	81 e6       	ldi	r24, 0x61	; 97
     cb8:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <spi_writereadbyte>
     cbc:	c0 2f       	mov	r28, r16
     cbe:	d1 2f       	mov	r29, r17
	//Thay doi lai command, lay PAYLOAD va write ACK
	//spi_writereadbyte(NRF24L01_CMD_W_ACK_PAYLOAD | pipe);
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     cc0:	10 e0       	ldi	r17, 0x00	; 0
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
     cc2:	8f ef       	ldi	r24, 0xFF	; 255
     cc4:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <spi_writereadbyte>
     cc8:	89 93       	st	Y+, r24
	//read rx register
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
	//Thay doi lai command, lay PAYLOAD va write ACK
	//spi_writereadbyte(NRF24L01_CMD_W_ACK_PAYLOAD | pipe);
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     cca:	1f 5f       	subi	r17, 0xFF	; 255
     ccc:	19 30       	cpi	r17, 0x09	; 9
     cce:	c9 f7       	brne	.-14     	; 0xcc2 <nrf24l01_read+0x1a>
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
    nrf24l01_CSNhi; //high CSN
     cd0:	ae 9a       	sbi	0x15, 6	; 21
    //reset register
    nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR));
     cd2:	87 e0       	ldi	r24, 0x07	; 7
     cd4:	60 e4       	ldi	r22, 0x40	; 64
     cd6:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
    //handle ack payload receipt
	if (nrf24l01_getstatus() & (1<<NRF24L01_REG_TX_DS))
     cda:	0e 94 26 05 	call	0xa4c	; 0xa4c <nrf24l01_getstatus>
     cde:	85 ff       	sbrs	r24, 5
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <nrf24l01_read+0x42>
		nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_TX_DS));
     ce2:	87 e0       	ldi	r24, 0x07	; 7
     ce4:	60 e2       	ldi	r22, 0x20	; 32
     ce6:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
}
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	08 95       	ret

00000cf4 <nrf24l01_write>:

/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
     cf4:	0f 93       	push	r16
     cf6:	1f 93       	push	r17
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	08 2f       	mov	r16, r24
     cfe:	19 2f       	mov	r17, r25
	uint8_t i = 0;
	uint8_t ret = 0;

	//set tx mode
	nrf24l01_setTX();
     d00:	0e 94 0b 05 	call	0xa16	; 0xa16 <nrf24l01_setTX>

	//write data
	nrf24l01_CSNlo; //low CSN
     d04:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
     d06:	80 ea       	ldi	r24, 0xA0	; 160
     d08:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <spi_writereadbyte>
     d0c:	c0 2f       	mov	r28, r16
     d0e:	d1 2f       	mov	r29, r17
     d10:	19 e0       	ldi	r17, 0x09	; 9
	for (i=0; i<NRF24L01_PAYLOAD; i++)
		spi_writereadbyte(data[i]);
     d12:	89 91       	ld	r24, Y+
     d14:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <spi_writereadbyte>
     d18:	11 50       	subi	r17, 0x01	; 1
	nrf24l01_setTX();

	//write data
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
	for (i=0; i<NRF24L01_PAYLOAD; i++)
     d1a:	d9 f7       	brne	.-10     	; 0xd12 <nrf24l01_write+0x1e>
		spi_writereadbyte(data[i]);
	nrf24l01_CSNhi; //high CSN
     d1c:	ae 9a       	sbi	0x15, 6	; 21

	//start transmission
	nrf24l01_CEhi; //high CE
     d1e:	af 9a       	sbi	0x15, 7	; 21
     d20:	85 e0       	ldi	r24, 0x05	; 5
     d22:	8a 95       	dec	r24
     d24:	f1 f7       	brne	.-4      	; 0xd22 <nrf24l01_write+0x2e>
	_delay_us(15);
	nrf24l01_CElo; //low CE
     d26:	af 98       	cbi	0x15, 7	; 21
     d28:	83 e0       	ldi	r24, 0x03	; 3
     d2a:	8a 95       	dec	r24
     d2c:	f1 f7       	brne	.-4      	; 0xd2a <nrf24l01_write+0x36>
     d2e:	00 00       	nop

	//stop if max_retries reached or send is ok
	do {
		_delay_us(10);
	}
	while( !(nrf24l01_getstatus() & (1<<NRF24L01_REG_MAX_RT | 1<<NRF24L01_REG_TX_DS)) );
     d30:	0e 94 26 05 	call	0xa4c	; 0xa4c <nrf24l01_getstatus>
     d34:	80 73       	andi	r24, 0x30	; 48
     d36:	c1 f3       	breq	.-16     	; 0xd28 <nrf24l01_write+0x34>

	if(nrf24l01_getstatus() & 1<<NRF24L01_REG_TX_DS)
     d38:	0e 94 26 05 	call	0xa4c	; 0xa4c <nrf24l01_getstatus>
     d3c:	c8 2f       	mov	r28, r24
		ret = 1;

	//reset PLOS_CNT
	nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH);
     d3e:	85 e0       	ldi	r24, 0x05	; 5
     d40:	6c e4       	ldi	r22, 0x4C	; 76
     d42:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>

	//power down
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PWR_UP));
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <nrf24l01_readregister>
     d4c:	68 2f       	mov	r22, r24
     d4e:	6d 7f       	andi	r22, 0xFD	; 253
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>

	//set rx mode
	nrf24l01_setRX();
     d56:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <nrf24l01_setRX>
/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
	uint8_t i = 0;
	uint8_t ret = 0;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	c5 ff       	sbrs	r28, 5
     d5e:	80 e0       	ldi	r24, 0x00	; 0

	//set rx mode
	nrf24l01_setRX();

	return ret;
}
     d60:	df 91       	pop	r29
     d62:	cf 91       	pop	r28
     d64:	1f 91       	pop	r17
     d66:	0f 91       	pop	r16
     d68:	08 95       	ret

00000d6a <nrf24l01_setpalevel>:

/*
 * set power level
 */
void nrf24l01_setpalevel() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP);
     d6a:	86 e0       	ldi	r24, 0x06	; 6
     d6c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <nrf24l01_readregister>
  setup &= ~((1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH));

  if (NRF24L01_RF24_PA == NRF24L01_RF24_PA_MAX) {
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
     d70:	68 2f       	mov	r22, r24
     d72:	66 60       	ori	r22, 0x06	; 6
  } else {
	  //default is max power
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     d74:	86 e0       	ldi	r24, 0x06	; 6
     d76:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
}
     d7a:	08 95       	ret

00000d7c <nrf24l01_setdatarate>:

/*
 * set datarate
 */
void nrf24l01_setdatarate() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP) ;
     d7c:	86 e0       	ldi	r24, 0x06	; 6
     d7e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <nrf24l01_readregister>

  setup &= ~((1<<NRF24L01_REG_RF_DR_LOW) | (1<<NRF24L01_REG_RF_DR_HIGH));
     d82:	68 2f       	mov	r22, r24
     d84:	67 7d       	andi	r22, 0xD7	; 215
    } else {
    	//default is 1Mbps
    }
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     d86:	86 e0       	ldi	r24, 0x06	; 6
     d88:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
}
     d8c:	08 95       	ret

00000d8e <nrf24l01_setcrclength>:

/*
 * set crc length
 */
void nrf24l01_setcrclength() {
  uint8_t config = nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~((1<<NRF24L01_REG_CRCO) | (1<<NRF24L01_REG_EN_CRC));
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <nrf24l01_readregister>
	  //nothing
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_8) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_16) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
	  config |= (1<<NRF24L01_REG_CRCO);
     d94:	68 2f       	mov	r22, r24
     d96:	6c 60       	ori	r22, 0x0C	; 12
  } else {
	  //default is disabled
  }

  nrf24l01_writeregister(NRF24L01_REG_CONFIG, config);
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
}
     d9e:	08 95       	ret

00000da0 <nrf24l01_init>:
/*
 * init nrf24l01
 */
void nrf24l01_init() {
	//setup port
	NRF24L01_DDR |= (1<<NRF24L01_CSN); //output
     da0:	a6 9a       	sbi	0x14, 6	; 20
	NRF24L01_DDR |= (1<<NRF24L01_CE); //output
     da2:	a7 9a       	sbi	0x14, 7	; 20

    spi_init(); //init spi
     da4:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <spi_init>

    nrf24l01_CElo; //low CE
     da8:	af 98       	cbi	0x15, 7	; 21
    nrf24l01_CSNhi; //high CSN
     daa:	ae 9a       	sbi	0x15, 6	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     dac:	81 ee       	ldi	r24, 0xE1	; 225
     dae:	94 e0       	ldi	r25, 0x04	; 4
     db0:	01 97       	sbiw	r24, 0x01	; 1
     db2:	f1 f7       	brne	.-4      	; 0xdb0 <nrf24l01_init+0x10>
     db4:	00 c0       	rjmp	.+0      	; 0xdb6 <nrf24l01_init+0x16>
     db6:	00 00       	nop

    _delay_ms(5); //wait for the radio to init

    nrf24l01_setpalevel(); //set power level
     db8:	0e 94 b5 06 	call	0xd6a	; 0xd6a <nrf24l01_setpalevel>
    nrf24l01_setdatarate(); //set data rate
     dbc:	0e 94 be 06 	call	0xd7c	; 0xd7c <nrf24l01_setdatarate>
    nrf24l01_setcrclength(); //set crc length
     dc0:	0e 94 c7 06 	call	0xd8e	; 0xd8e <nrf24l01_setcrclength>
    nrf24l01_writeregister(NRF24L01_REG_SETUP_RETR, NRF24L01_RETR); // set retries
     dc4:	84 e0       	ldi	r24, 0x04	; 4
     dc6:	67 e4       	ldi	r22, 0x47	; 71
     dc8:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_DYNPD, 0); //disable dynamic payloads
     dcc:	8c e1       	ldi	r24, 0x1C	; 28
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH); //set RF channel
     dd4:	85 e0       	ldi	r24, 0x05	; 5
     dd6:	6c e4       	ldi	r22, 0x4C	; 76
     dd8:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>

	//payload size
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P0, NRF24L01_PAYLOAD);
     ddc:	81 e1       	ldi	r24, 0x11	; 17
     dde:	69 e0       	ldi	r22, 0x09	; 9
     de0:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P1, NRF24L01_PAYLOAD);
     de4:	82 e1       	ldi	r24, 0x12	; 18
     de6:	69 e0       	ldi	r22, 0x09	; 9
     de8:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P2, NRF24L01_PAYLOAD);
     dec:	83 e1       	ldi	r24, 0x13	; 19
     dee:	69 e0       	ldi	r22, 0x09	; 9
     df0:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P3, NRF24L01_PAYLOAD);
     df4:	84 e1       	ldi	r24, 0x14	; 20
     df6:	69 e0       	ldi	r22, 0x09	; 9
     df8:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P4, NRF24L01_PAYLOAD);
     dfc:	85 e1       	ldi	r24, 0x15	; 21
     dfe:	69 e0       	ldi	r22, 0x09	; 9
     e00:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P5, NRF24L01_PAYLOAD);
     e04:	86 e1       	ldi	r24, 0x16	; 22
     e06:	69 e0       	ldi	r22, 0x09	; 9
     e08:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
	#endif

	//enable pipe
	nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, 0);
     e0c:	82 e0       	ldi	r24, 0x02	; 2
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P0));
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <nrf24l01_readregister>
     e1a:	68 2f       	mov	r22, r24
     e1c:	61 60       	ori	r22, 0x01	; 1
     e1e:	82 e0       	ldi	r24, 0x02	; 2
     e20:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P1));
     e24:	82 e0       	ldi	r24, 0x02	; 2
     e26:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <nrf24l01_readregister>
     e2a:	68 2f       	mov	r22, r24
     e2c:	62 60       	ori	r22, 0x02	; 2
     e2e:	82 e0       	ldi	r24, 0x02	; 2
     e30:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P2));
     e34:	82 e0       	ldi	r24, 0x02	; 2
     e36:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <nrf24l01_readregister>
     e3a:	68 2f       	mov	r22, r24
     e3c:	64 60       	ori	r22, 0x04	; 4
     e3e:	82 e0       	ldi	r24, 0x02	; 2
     e40:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P3));
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <nrf24l01_readregister>
     e4a:	68 2f       	mov	r22, r24
     e4c:	68 60       	ori	r22, 0x08	; 8
     e4e:	82 e0       	ldi	r24, 0x02	; 2
     e50:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P4));
     e54:	82 e0       	ldi	r24, 0x02	; 2
     e56:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <nrf24l01_readregister>
     e5a:	68 2f       	mov	r22, r24
     e5c:	60 61       	ori	r22, 0x10	; 16
     e5e:	82 e0       	ldi	r24, 0x02	; 2
     e60:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P5));
     e64:	82 e0       	ldi	r24, 0x02	; 2
     e66:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <nrf24l01_readregister>
     e6a:	68 2f       	mov	r22, r24
     e6c:	60 62       	ori	r22, 0x20	; 32
     e6e:	82 e0       	ldi	r24, 0x02	; 2
     e70:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
	#endif

	//auto ack
	#if NRF24L01_ACK == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P0));
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <nrf24l01_readregister>
     e7a:	68 2f       	mov	r22, r24
     e7c:	61 60       	ori	r22, 0x01	; 1
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P1));
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <nrf24l01_readregister>
     e8a:	68 2f       	mov	r22, r24
     e8c:	62 60       	ori	r22, 0x02	; 2
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P2));
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <nrf24l01_readregister>
     e9a:	68 2f       	mov	r22, r24
     e9c:	64 60       	ori	r22, 0x04	; 4
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P3));
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <nrf24l01_readregister>
     eaa:	68 2f       	mov	r22, r24
     eac:	68 60       	ori	r22, 0x08	; 8
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P4));
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <nrf24l01_readregister>
     eba:	68 2f       	mov	r22, r24
     ebc:	60 61       	ori	r22, 0x10	; 16
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P5));
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <nrf24l01_readregister>
     eca:	68 2f       	mov	r22, r24
     ecc:	60 62       	ori	r22, 0x20	; 32
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P4));
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P5));
	#endif

	//rx address
	nrf24l01_setrxaddr(0, nrf24l01_addr0);
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	69 ed       	ldi	r22, 0xD9	; 217
     ed8:	71 e0       	ldi	r23, 0x01	; 1
     eda:	0e 94 35 04 	call	0x86a	; 0x86a <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(1, nrf24l01_addr1);
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	6e ed       	ldi	r22, 0xDE	; 222
     ee2:	71 e0       	ldi	r23, 0x01	; 1
     ee4:	0e 94 35 04 	call	0x86a	; 0x86a <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(2, nrf24l01_addr2);
     ee8:	82 e0       	ldi	r24, 0x02	; 2
     eea:	63 ee       	ldi	r22, 0xE3	; 227
     eec:	71 e0       	ldi	r23, 0x01	; 1
     eee:	0e 94 35 04 	call	0x86a	; 0x86a <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(3, nrf24l01_addr3);
     ef2:	83 e0       	ldi	r24, 0x03	; 3
     ef4:	68 ee       	ldi	r22, 0xE8	; 232
     ef6:	71 e0       	ldi	r23, 0x01	; 1
     ef8:	0e 94 35 04 	call	0x86a	; 0x86a <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(4, nrf24l01_addr4);
     efc:	84 e0       	ldi	r24, 0x04	; 4
     efe:	6d ee       	ldi	r22, 0xED	; 237
     f00:	71 e0       	ldi	r23, 0x01	; 1
     f02:	0e 94 35 04 	call	0x86a	; 0x86a <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(5, nrf24l01_addr5);
     f06:	85 e0       	ldi	r24, 0x05	; 5
     f08:	62 ef       	ldi	r22, 0xF2	; 242
     f0a:	71 e0       	ldi	r23, 0x01	; 1
     f0c:	0e 94 35 04 	call	0x86a	; 0x86a <nrf24l01_setrxaddr>

	//tx address
	nrf24l01_settxaddr(nrf24l01_addrtx);
     f10:	87 ef       	ldi	r24, 0xF7	; 247
     f12:	91 e0       	ldi	r25, 0x01	; 1
     f14:	0e 94 b2 04 	call	0x964	; 0x964 <nrf24l01_settxaddr>

	//set rx mode
	nrf24l01_setRX();
     f18:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <nrf24l01_setRX>
}
     f1c:	08 95       	ret

00000f1e <sMC_init>:
static void clearInEvents(SMC* handle);
static void clearOutEvents(SMC* handle);


void sMC_init(SMC* handle)
{
     f1e:	fc 01       	movw	r30, r24
	int i;

	for (i = 0; i < SMC_MAX_ORTHOGONAL_STATES; ++i)
		handle->stateConfVector[i] = SMC_last_state;
     f20:	80 e1       	ldi	r24, 0x10	; 16
     f22:	80 83       	st	Z, r24
     f24:	81 83       	std	Z+1, r24	; 0x01
	
	
	handle->stateConfVectorPosition = 0;
     f26:	13 82       	std	Z+3, r1	; 0x03
     f28:	12 82       	std	Z+2, r1	; 0x02

	// TODO: initialize all events ...
	// TODO: initialize all variables ... (set default values - here or inenter sequence ?!?)

}
     f2a:	08 95       	ret

00000f2c <sMC_enter>:

void sMC_enter(SMC* handle)
{
     f2c:	1f 93       	push	r17
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	ec 01       	movw	r28, r24
	sMC_entryaction(handle);
	/* Default enter sequence for region main region */
	/* Default react sequence for initial entry  */
	/* Default enter sequence for state On */
	/* Entry action for state 'On'. */
	handle->iface.lightOn = bool_true;
     f34:	11 e0       	ldi	r17, 0x01	; 1
     f36:	1a ab       	sts	0x5a, r17
	/* Default enter sequence for region r1 */
	/* Default react sequence for initial entry  */
	/* Default enter sequence for state Init */
	/* Entry action for state 'Init'. */
	sMCIfaceLCD_init();
     f38:	0e 94 23 02 	call	0x446	; 0x446 <sMCIfaceLCD_init>
	sMCIfaceRF_init();
     f3c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <sMCIfaceRF_init>
	sMCIfaceKEYPAD_init();
     f40:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <sMCIfaceKEYPAD_init>
	handle->stateConfVector[0] = SMC_main_region_On_r1_Init;
     f44:	18 83       	st	Y, r17
	handle->stateConfVectorPosition = 0;
     f46:	1b 82       	std	Y+3, r1	; 0x03
     f48:	1a 82       	std	Y+2, r1	; 0x02
}
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	1f 91       	pop	r17
     f50:	08 95       	ret

00000f52 <sMC_exit>:

void sMC_exit(SMC* handle)
{
     f52:	fc 01       	movw	r30, r24
	/* Default exit sequence for statechart SMC */
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of main region) at position 0... */
	switch(handle->stateConfVector[ 0 ]) {
     f54:	80 81       	ld	r24, Z
     f56:	83 30       	cpi	r24, 0x03	; 3
     f58:	49 f0       	breq	.+18     	; 0xf6c <sMC_exit+0x1a>
     f5a:	84 30       	cpi	r24, 0x04	; 4
     f5c:	61 f0       	breq	.+24     	; 0xf76 <sMC_exit+0x24>
     f5e:	81 30       	cpi	r24, 0x01	; 1
     f60:	71 f4       	brne	.+28     	; 0xf7e <sMC_exit+0x2c>
		case SMC_main_region_On_r1_Init : {
			/* Default exit sequence for state Init */
			handle->stateConfVector[0] = SMC_last_state;
     f62:	80 e1       	ldi	r24, 0x10	; 16
     f64:	80 83       	st	Z, r24
			handle->stateConfVectorPosition = 0;
     f66:	13 82       	std	Z+3, r1	; 0x03
     f68:	12 82       	std	Z+2, r1	; 0x02
			break;
     f6a:	09 c0       	rjmp	.+18     	; 0xf7e <sMC_exit+0x2c>
		}
		case SMC_main_region_On_r1_Running_keypad_CheckKey : {
			/* Default exit sequence for state CheckKey */
			handle->stateConfVector[0] = SMC_last_state;
     f6c:	80 e1       	ldi	r24, 0x10	; 16
     f6e:	80 83       	st	Z, r24
			handle->stateConfVectorPosition = 0;
     f70:	13 82       	std	Z+3, r1	; 0x03
     f72:	12 82       	std	Z+2, r1	; 0x02
			break;
     f74:	04 c0       	rjmp	.+8      	; 0xf7e <sMC_exit+0x2c>
		}
		case SMC_main_region_On_r1_Running_keypad_CheckKeyDown : {
			/* Default exit sequence for state CheckKeyDown */
			handle->stateConfVector[0] = SMC_last_state;
     f76:	80 e1       	ldi	r24, 0x10	; 16
     f78:	80 83       	st	Z, r24
			handle->stateConfVectorPosition = 0;
     f7a:	13 82       	std	Z+3, r1	; 0x03
     f7c:	12 82       	std	Z+2, r1	; 0x02
			break;
		}
		default: break;
	}
	/* Handle exit of all possible states (of main region) at position 1... */
	switch(handle->stateConfVector[ 1 ]) {
     f7e:	81 81       	ldd	r24, Z+1	; 0x01
     f80:	8a 30       	cpi	r24, 0x0A	; 10
     f82:	f1 f1       	breq	.+124    	; 0x1000 <sMC_exit+0xae>
     f84:	8b 30       	cpi	r24, 0x0B	; 11
     f86:	70 f4       	brcc	.+28     	; 0xfa4 <sMC_exit+0x52>
     f88:	86 30       	cpi	r24, 0x06	; 6
     f8a:	29 f1       	breq	.+74     	; 0xfd6 <sMC_exit+0x84>
     f8c:	87 30       	cpi	r24, 0x07	; 7
     f8e:	20 f4       	brcc	.+8      	; 0xf98 <sMC_exit+0x46>
     f90:	85 30       	cpi	r24, 0x05	; 5
     f92:	09 f0       	breq	.+2      	; 0xf96 <sMC_exit+0x44>
     f94:	63 c0       	rjmp	.+198    	; 0x105c <sMC_exit+0x10a>
     f96:	18 c0       	rjmp	.+48     	; 0xfc8 <sMC_exit+0x76>
     f98:	87 30       	cpi	r24, 0x07	; 7
     f9a:	21 f1       	breq	.+72     	; 0xfe4 <sMC_exit+0x92>
     f9c:	88 30       	cpi	r24, 0x08	; 8
     f9e:	09 f0       	breq	.+2      	; 0xfa2 <sMC_exit+0x50>
     fa0:	5d c0       	rjmp	.+186    	; 0x105c <sMC_exit+0x10a>
     fa2:	27 c0       	rjmp	.+78     	; 0xff2 <sMC_exit+0xa0>
     fa4:	8d 30       	cpi	r24, 0x0D	; 13
     fa6:	09 f4       	brne	.+2      	; 0xfaa <sMC_exit+0x58>
     fa8:	45 c0       	rjmp	.+138    	; 0x1034 <sMC_exit+0xe2>
     faa:	8e 30       	cpi	r24, 0x0E	; 14
     fac:	30 f4       	brcc	.+12     	; 0xfba <sMC_exit+0x68>
     fae:	8b 30       	cpi	r24, 0x0B	; 11
     fb0:	71 f1       	breq	.+92     	; 0x100e <sMC_exit+0xbc>
     fb2:	8c 30       	cpi	r24, 0x0C	; 12
     fb4:	09 f0       	breq	.+2      	; 0xfb8 <sMC_exit+0x66>
     fb6:	52 c0       	rjmp	.+164    	; 0x105c <sMC_exit+0x10a>
     fb8:	31 c0       	rjmp	.+98     	; 0x101c <sMC_exit+0xca>
     fba:	8e 30       	cpi	r24, 0x0E	; 14
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <sMC_exit+0x6e>
     fbe:	41 c0       	rjmp	.+130    	; 0x1042 <sMC_exit+0xf0>
     fc0:	8f 30       	cpi	r24, 0x0F	; 15
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <sMC_exit+0x74>
     fc4:	4b c0       	rjmp	.+150    	; 0x105c <sMC_exit+0x10a>
     fc6:	44 c0       	rjmp	.+136    	; 0x1050 <sMC_exit+0xfe>
		case SMC_main_region_On_r1_Running_running_main_WaitingForRequest : {
			/* Default exit sequence for state WaitingForRequest */
			handle->stateConfVector[1] = SMC_last_state;
     fc8:	80 e1       	ldi	r24, 0x10	; 16
     fca:	81 83       	std	Z+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	93 83       	std	Z+3, r25	; 0x03
     fd2:	82 83       	std	Z+2, r24	; 0x02
			break;
     fd4:	08 95       	ret
		}
		case SMC_main_region_On_r1_Running_running_main_CheckKeyPress : {
			/* Default exit sequence for state CheckKeyPress */
			handle->stateConfVector[1] = SMC_last_state;
     fd6:	80 e1       	ldi	r24, 0x10	; 16
     fd8:	81 83       	std	Z+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	93 83       	std	Z+3, r25	; 0x03
     fe0:	82 83       	std	Z+2, r24	; 0x02
			break;
     fe2:	08 95       	ret
		}
		case SMC_main_region_On_r1_Running_running_main_FinishDish : {
			/* Default exit sequence for state FinishDish */
			handle->stateConfVector[1] = SMC_last_state;
     fe4:	80 e1       	ldi	r24, 0x10	; 16
     fe6:	81 83       	std	Z+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	93 83       	std	Z+3, r25	; 0x03
     fee:	82 83       	std	Z+2, r24	; 0x02
			break;
     ff0:	08 95       	ret
		}
		case SMC_main_region_On_r1_Running_running_main_CancelDish : {
			/* Default exit sequence for state CancelDish */
			handle->stateConfVector[1] = SMC_last_state;
     ff2:	80 e1       	ldi	r24, 0x10	; 16
     ff4:	81 83       	std	Z+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	93 83       	std	Z+3, r25	; 0x03
     ffc:	82 83       	std	Z+2, r24	; 0x02
			break;
     ffe:	08 95       	ret
		}
		case SMC_main_region_On_r1_Running_running_main_Send_Request_send_Send : {
			/* Default exit sequence for state Send */
			handle->stateConfVector[1] = SMC_last_state;
    1000:	80 e1       	ldi	r24, 0x10	; 16
    1002:	81 83       	std	Z+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	93 83       	std	Z+3, r25	; 0x03
    100a:	82 83       	std	Z+2, r24	; 0x02
			break;
    100c:	08 95       	ret
		}
		case SMC_main_region_On_r1_Running_running_main_Send_Request_send_Check : {
			/* Default exit sequence for state Check */
			handle->stateConfVector[1] = SMC_last_state;
    100e:	80 e1       	ldi	r24, 0x10	; 16
    1010:	81 83       	std	Z+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	93 83       	std	Z+3, r25	; 0x03
    1018:	82 83       	std	Z+2, r24	; 0x02
			break;
    101a:	08 95       	ret
		}
		case SMC_main_region_On_r1_Running_running_main_Send_Request_send_SendFail : {
			/* Default exit sequence for state SendFail */
			handle->stateConfVector[1] = SMC_last_state;
    101c:	80 e1       	ldi	r24, 0x10	; 16
    101e:	81 83       	std	Z+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	93 83       	std	Z+3, r25	; 0x03
    1026:	82 83       	std	Z+2, r24	; 0x02
			/* Exit action for state 'SendFail'. */
			sMC_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail_time_event_0_raised) );		
    1028:	cf 01       	movw	r24, r30
    102a:	8b 5b       	subi	r24, 0xBB	; 187
    102c:	9f 4f       	sbci	r25, 0xFF	; 255
    102e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <sMC_unsetTimer>
			break;
    1032:	08 95       	ret
		}
		case SMC_main_region_On_r1_Running_running_main_Send_Request_send_ResetResult : {
			/* Default exit sequence for state ResetResult */
			handle->stateConfVector[1] = SMC_last_state;
    1034:	80 e1       	ldi	r24, 0x10	; 16
    1036:	81 83       	std	Z+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	93 83       	std	Z+3, r25	; 0x03
    103e:	82 83       	std	Z+2, r24	; 0x02
			break;
    1040:	08 95       	ret
		}
		case SMC_main_region_On_r1_Running_running_main_Send_Request_send__final_ : {
			/* Default exit sequence for final state. */
			handle->stateConfVector[1] = SMC_last_state;
    1042:	80 e1       	ldi	r24, 0x10	; 16
    1044:	81 83       	std	Z+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	93 83       	std	Z+3, r25	; 0x03
    104c:	82 83       	std	Z+2, r24	; 0x02
			break;
    104e:	08 95       	ret
		}
		case SMC_main_region_On_r1_Running_running_main_CheckKeyPress1 : {
			/* Default exit sequence for state CheckKeyPress1 */
			handle->stateConfVector[1] = SMC_last_state;
    1050:	80 e1       	ldi	r24, 0x10	; 16
    1052:	81 83       	std	Z+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	93 83       	std	Z+3, r25	; 0x03
    105a:	82 83       	std	Z+2, r24	; 0x02
    105c:	08 95       	ret

0000105e <sMC_runCycle>:
}

static void clearOutEvents(SMC* handle) {
}

void sMC_runCycle(SMC* handle) {
    105e:	2f 92       	push	r2
    1060:	3f 92       	push	r3
    1062:	4f 92       	push	r4
    1064:	5f 92       	push	r5
    1066:	6f 92       	push	r6
    1068:	7f 92       	push	r7
    106a:	8f 92       	push	r8
    106c:	9f 92       	push	r9
    106e:	af 92       	push	r10
    1070:	bf 92       	push	r11
    1072:	cf 92       	push	r12
    1074:	df 92       	push	r13
    1076:	ef 92       	push	r14
    1078:	ff 92       	push	r15
    107a:	0f 93       	push	r16
    107c:	1f 93       	push	r17
    107e:	cf 93       	push	r28
    1080:	df 93       	push	r29
    1082:	ec 01       	movw	r28, r24
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
    1084:	1b 82       	std	Y+3, r1	; 0x03
    1086:	1a 82       	std	Y+2, r1	; 0x02
		handle->stateConfVectorPosition < SMC_MAX_ORTHOGONAL_STATES;
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
		/* Entry action for state 'WaitingForRequest'. */
		handle->iface.requestId = 0;
		handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_WaitingForRequest;
		handle->stateConfVectorPosition = 1;
	}  else {
		if (handle->timeEvents.SendFail_time_event_0_raised) { 
    108c:	0f 2e       	mov	r0, r31
    108e:	f5 e4       	ldi	r31, 0x45	; 69
    1090:	8f 2e       	mov	r8, r31
    1092:	99 24       	eor	r9, r9
    1094:	f0 2d       	mov	r31, r0
    1096:	8c 0e       	add	r8, r28
    1098:	9d 1e       	adc	r9, r29
		handle->stateConfVectorPosition = 1;
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state ResetResult */
			handle->stateConfVector[1] = SMC_last_state;
			handle->stateConfVectorPosition = 1;
    109a:	ee 24       	eor	r14, r14
    109c:	ff 24       	eor	r15, r15
    109e:	e3 94       	inc	r14
			/* Default enter sequence for state null */
			handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_Send_Request_send__final_;
    10a0:	0f 2e       	mov	r0, r31
    10a2:	fe e0       	ldi	r31, 0x0E	; 14
    10a4:	2f 2e       	mov	r2, r31
    10a6:	f0 2d       	mov	r31, r0
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMC_last_state;
				handle->stateConfVectorPosition = 1;
				/* Default enter sequence for state ResetResult */
				/* Entry action for state 'ResetResult'. */
				handle->ifaceRF.result = bool_true;
    10a8:	bb 24       	eor	r11, r11
    10aa:	b3 94       	inc	r11
		if (handle->ifaceKEYPAD.key != 0) { 
			/* Default enter sequence for state CheckKeyDown */
			/* Entry action for state 'CheckKeyDown'. */
			handle->ifaceKEYPAD.key = sMCIfaceKEYPAD_checkpress();
			handle->ifaceKEYPAD.key_down = bool_true;
			handle->stateConfVector[0] = SMC_main_region_On_r1_Running_keypad_CheckKeyDown;
    10ac:	aa 24       	eor	r10, r10
    10ae:	68 94       	set
    10b0:	a2 f8       	bld	r10, 2
		handle->ifaceKEYPAD.key_pressed_raised = bool_true;
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.key = sMCIfaceKEYPAD_checkpress();
		handle->ifaceKEYPAD.key_down = bool_false;
		handle->stateConfVector[0] = SMC_main_region_On_r1_Running_keypad_CheckKey;
    10b2:	0f 2e       	mov	r0, r31
    10b4:	f3 e0       	ldi	r31, 0x03	; 3
    10b6:	3f 2e       	mov	r3, r31
    10b8:	f0 2d       	mov	r31, r0
			/* Default exit sequence for state CheckKeyPress */
			handle->stateConfVector[1] = SMC_last_state;
			handle->stateConfVectorPosition = 1;
			/* Default enter sequence for state CancelDish */
			/* Entry action for state 'CancelDish'. */
			handle->iface.requestId = 6;
    10ba:	0f 2e       	mov	r0, r31
    10bc:	f6 e0       	ldi	r31, 0x06	; 6
    10be:	4f 2e       	mov	r4, r31
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	5f 2e       	mov	r5, r31
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	6f 2e       	mov	r6, r31
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	7f 2e       	mov	r7, r31
    10cc:	f0 2d       	mov	r31, r0
		/* Default exit sequence for state FinishDish */
		handle->stateConfVector[1] = SMC_last_state;
		handle->stateConfVectorPosition = 1;
		/* Default enter sequence for state CheckKeyPress1 */
		/* Entry action for state 'CheckKeyPress1'. */
		handle->iface.listId = 0;
    10ce:	0f 2e       	mov	r0, r31
    10d0:	ff e3       	ldi	r31, 0x3F	; 63
    10d2:	cf 2e       	mov	r12, r31
    10d4:	dd 24       	eor	r13, r13
    10d6:	f0 2d       	mov	r31, r0
    10d8:	cc 0e       	add	r12, r28
    10da:	dd 1e       	adc	r13, r29
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMC_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
			
		switch (handle->stateConfVector[handle->stateConfVectorPosition]) {
    10dc:	8c 0f       	add	r24, r28
    10de:	9d 1f       	adc	r25, r29
    10e0:	dc 01       	movw	r26, r24
    10e2:	8c 91       	ld	r24, X
    10e4:	88 30       	cpi	r24, 0x08	; 8
    10e6:	09 f4       	brne	.+2      	; 0x10ea <sMC_runCycle+0x8c>
    10e8:	d8 c0       	rjmp	.+432    	; 0x129a <__stack+0x19b>
    10ea:	89 30       	cpi	r24, 0x09	; 9
    10ec:	90 f4       	brcc	.+36     	; 0x1112 <__stack+0x13>
    10ee:	84 30       	cpi	r24, 0x04	; 4
    10f0:	09 f4       	brne	.+2      	; 0x10f4 <sMC_runCycle+0x96>
    10f2:	69 c0       	rjmp	.+210    	; 0x11c6 <__stack+0xc7>
    10f4:	85 30       	cpi	r24, 0x05	; 5
    10f6:	30 f4       	brcc	.+12     	; 0x1104 <__stack+0x5>
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	09 f1       	breq	.+66     	; 0x113e <__stack+0x3f>
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	09 f0       	breq	.+2      	; 0x1102 <__stack+0x3>
    1100:	c7 c2       	rjmp	.+1422   	; 0x1690 <__stack+0x591>
    1102:	37 c0       	rjmp	.+110    	; 0x1172 <__stack+0x73>
    1104:	86 30       	cpi	r24, 0x06	; 6
    1106:	09 f4       	brne	.+2      	; 0x110a <__stack+0xb>
    1108:	8e c0       	rjmp	.+284    	; 0x1226 <__stack+0x127>
    110a:	87 30       	cpi	r24, 0x07	; 7
    110c:	08 f0       	brcs	.+2      	; 0x1110 <__stack+0x11>
    110e:	b7 c0       	rjmp	.+366    	; 0x127e <__stack+0x17f>
    1110:	81 c0       	rjmp	.+258    	; 0x1214 <__stack+0x115>
    1112:	8c 30       	cpi	r24, 0x0C	; 12
    1114:	09 f4       	brne	.+2      	; 0x1118 <__stack+0x19>
    1116:	cc c1       	rjmp	.+920    	; 0x14b0 <__stack+0x3b1>
    1118:	8d 30       	cpi	r24, 0x0D	; 13
    111a:	38 f4       	brcc	.+14     	; 0x112a <__stack+0x2b>
    111c:	8a 30       	cpi	r24, 0x0A	; 10
    111e:	09 f4       	brne	.+2      	; 0x1122 <__stack+0x23>
    1120:	cb c0       	rjmp	.+406    	; 0x12b8 <__stack+0x1b9>
    1122:	8b 30       	cpi	r24, 0x0B	; 11
    1124:	09 f0       	breq	.+2      	; 0x1128 <__stack+0x29>
    1126:	b4 c2       	rjmp	.+1384   	; 0x1690 <__stack+0x591>
    1128:	4b c1       	rjmp	.+662    	; 0x13c0 <__stack+0x2c1>
    112a:	8e 30       	cpi	r24, 0x0E	; 14
    112c:	09 f4       	brne	.+2      	; 0x1130 <__stack+0x31>
    112e:	25 c2       	rjmp	.+1098   	; 0x157a <__stack+0x47b>
    1130:	8e 30       	cpi	r24, 0x0E	; 14
    1132:	08 f4       	brcc	.+2      	; 0x1136 <__stack+0x37>
    1134:	fd c1       	rjmp	.+1018   	; 0x1530 <__stack+0x431>
    1136:	8f 30       	cpi	r24, 0x0F	; 15
    1138:	09 f0       	breq	.+2      	; 0x113c <__stack+0x3d>
    113a:	aa c2       	rjmp	.+1364   	; 0x1690 <__stack+0x591>
    113c:	40 c2       	rjmp	.+1152   	; 0x15be <__stack+0x4bf>
/* The reactions of state Init. */
static void sMC_react_main_region_On_r1_Init(SMC* handle) {
	/* The reactions of state Init. */
	if (bool_true) { 
		/* Default exit sequence for state Init */
		handle->stateConfVector[0] = SMC_last_state;
    113e:	80 e1       	ldi	r24, 0x10	; 16
    1140:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
    1142:	1b 82       	std	Y+3, r1	; 0x03
    1144:	1a 82       	std	Y+2, r1	; 0x02
		/* Default enter sequence for state Running */
		/* Default enter sequence for region keypad */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.key = sMCIfaceKEYPAD_checkpress();
    1146:	0e 94 dd 01 	call	0x3ba	; 0x3ba <sMCIfaceKEYPAD_checkpress>
    114a:	dc 01       	movw	r26, r24
    114c:	cb 01       	movw	r24, r22
    114e:	8c 83       	std	Y+4, r24	; 0x04
    1150:	9d 83       	std	Y+5, r25	; 0x05
    1152:	ae 83       	std	Y+6, r26	; 0x06
    1154:	bf 83       	std	Y+7, r27	; 0x07
		handle->ifaceKEYPAD.key_down = bool_false;
    1156:	1c 86       	std	Y+12, r1	; 0x0c
		handle->stateConfVector[0] = SMC_main_region_On_r1_Running_keypad_CheckKey;
    1158:	83 e0       	ldi	r24, 0x03	; 3
    115a:	88 83       	st	Y, r24
		handle->stateConfVectorPosition = 0;
		/* Default enter sequence for region running main */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state WaitingForRequest */
		/* Entry action for state 'WaitingForRequest'. */
		handle->iface.requestId = 0;
    115c:	1b ae       	sts	0xbb, r17
    115e:	1c ae       	sts	0xbc, r17
    1160:	1d ae       	sts	0xbd, r17
    1162:	1e ae       	sts	0xbe, r17
		handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_WaitingForRequest;
    1164:	85 e0       	ldi	r24, 0x05	; 5
    1166:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	9b 83       	std	Y+3, r25	; 0x03
    116e:	8a 83       	std	Y+2, r24	; 0x02
    1170:	b5 c2       	rjmp	.+1386   	; 0x16dc <__stack+0x5dd>
}

/* The reactions of state CheckKey. */
static void sMC_react_main_region_On_r1_Running_keypad_CheckKey(SMC* handle) {
	/* The reactions of state CheckKey. */
	if (handle->ifaceKEYPAD.key != 0) { 
    1172:	8c 81       	ldd	r24, Y+4	; 0x04
    1174:	9d 81       	ldd	r25, Y+5	; 0x05
    1176:	ae 81       	ldd	r26, Y+6	; 0x06
    1178:	bf 81       	ldd	r27, Y+7	; 0x07
    117a:	00 97       	sbiw	r24, 0x00	; 0
    117c:	a1 05       	cpc	r26, r1
    117e:	b1 05       	cpc	r27, r1
    1180:	a9 f0       	breq	.+42     	; 0x11ac <__stack+0xad>
		/* Default exit sequence for state CheckKey */
		handle->stateConfVector[0] = SMC_last_state;
    1182:	e0 e1       	ldi	r30, 0x10	; 16
    1184:	e8 83       	st	Y, r30
		handle->stateConfVectorPosition = 0;
    1186:	1b 82       	std	Y+3, r1	; 0x03
    1188:	1a 82       	std	Y+2, r1	; 0x02
		handle->ifaceKEYPAD.lastkey = handle->ifaceKEYPAD.key;
    118a:	88 87       	std	Y+8, r24	; 0x08
    118c:	99 87       	std	Y+9, r25	; 0x09
    118e:	aa 87       	std	Y+10, r26	; 0x0a
    1190:	bb 87       	std	Y+11, r27	; 0x0b
		/* Default enter sequence for state CheckKeyDown */
		/* Entry action for state 'CheckKeyDown'. */
		handle->ifaceKEYPAD.key = sMCIfaceKEYPAD_checkpress();
    1192:	0e 94 dd 01 	call	0x3ba	; 0x3ba <sMCIfaceKEYPAD_checkpress>
    1196:	dc 01       	movw	r26, r24
    1198:	cb 01       	movw	r24, r22
    119a:	8c 83       	std	Y+4, r24	; 0x04
    119c:	9d 83       	std	Y+5, r25	; 0x05
    119e:	ae 83       	std	Y+6, r26	; 0x06
    11a0:	bf 83       	std	Y+7, r27	; 0x07
		handle->ifaceKEYPAD.key_down = bool_true;
    11a2:	bc 86       	std	Y+12, r11	; 0x0c
		handle->stateConfVector[0] = SMC_main_region_On_r1_Running_keypad_CheckKeyDown;
    11a4:	a8 82       	st	Y, r10
		handle->stateConfVectorPosition = 0;
    11a6:	1b 82       	std	Y+3, r1	; 0x03
    11a8:	1a 82       	std	Y+2, r1	; 0x02
    11aa:	9e c2       	rjmp	.+1340   	; 0x16e8 <__stack+0x5e9>
	}  else {
		if (handle->ifaceKEYPAD.key == 0) { 
			/* Default enter sequence for state CheckKey */
			/* Entry action for state 'CheckKey'. */
			handle->ifaceKEYPAD.key = sMCIfaceKEYPAD_checkpress();
    11ac:	0e 94 dd 01 	call	0x3ba	; 0x3ba <sMCIfaceKEYPAD_checkpress>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	8c 83       	std	Y+4, r24	; 0x04
    11b6:	9d 83       	std	Y+5, r25	; 0x05
    11b8:	ae 83       	std	Y+6, r26	; 0x06
    11ba:	bf 83       	std	Y+7, r27	; 0x07
			handle->ifaceKEYPAD.key_down = bool_false;
    11bc:	1c 86       	std	Y+12, r1	; 0x0c
			handle->stateConfVector[0] = SMC_main_region_On_r1_Running_keypad_CheckKey;
    11be:	38 82       	st	Y, r3
			handle->stateConfVectorPosition = 0;
    11c0:	1b 82       	std	Y+3, r1	; 0x03
    11c2:	1a 82       	std	Y+2, r1	; 0x02
    11c4:	91 c2       	rjmp	.+1314   	; 0x16e8 <__stack+0x5e9>
}

/* The reactions of state CheckKeyDown. */
static void sMC_react_main_region_On_r1_Running_keypad_CheckKeyDown(SMC* handle) {
	/* The reactions of state CheckKeyDown. */
	if (handle->ifaceKEYPAD.key == 0) { 
    11c6:	8c 81       	ldd	r24, Y+4	; 0x04
    11c8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ca:	ae 81       	ldd	r26, Y+6	; 0x06
    11cc:	bf 81       	ldd	r27, Y+7	; 0x07
    11ce:	00 97       	sbiw	r24, 0x00	; 0
    11d0:	a1 05       	cpc	r26, r1
    11d2:	b1 05       	cpc	r27, r1
    11d4:	91 f4       	brne	.+36     	; 0x11fa <__stack+0xfb>
		/* Default exit sequence for state CheckKeyDown */
		handle->stateConfVector[0] = SMC_last_state;
    11d6:	f0 e1       	ldi	r31, 0x10	; 16
    11d8:	f8 83       	st	Y, r31
		handle->stateConfVectorPosition = 0;
    11da:	1b 82       	std	Y+3, r1	; 0x03
    11dc:	1a 82       	std	Y+2, r1	; 0x02
		handle->ifaceKEYPAD.key_pressed_raised = bool_true;
    11de:	bd 86       	std	Y+13, r11	; 0x0d
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.key = sMCIfaceKEYPAD_checkpress();
    11e0:	0e 94 dd 01 	call	0x3ba	; 0x3ba <sMCIfaceKEYPAD_checkpress>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	8c 83       	std	Y+4, r24	; 0x04
    11ea:	9d 83       	std	Y+5, r25	; 0x05
    11ec:	ae 83       	std	Y+6, r26	; 0x06
    11ee:	bf 83       	std	Y+7, r27	; 0x07
		handle->ifaceKEYPAD.key_down = bool_false;
    11f0:	1c 86       	std	Y+12, r1	; 0x0c
		handle->stateConfVector[0] = SMC_main_region_On_r1_Running_keypad_CheckKey;
    11f2:	38 82       	st	Y, r3
		handle->stateConfVectorPosition = 0;
    11f4:	1b 82       	std	Y+3, r1	; 0x03
    11f6:	1a 82       	std	Y+2, r1	; 0x02
    11f8:	77 c2       	rjmp	.+1262   	; 0x16e8 <__stack+0x5e9>
	}  else {
		if (handle->ifaceKEYPAD.key != 0) { 
			/* Default enter sequence for state CheckKeyDown */
			/* Entry action for state 'CheckKeyDown'. */
			handle->ifaceKEYPAD.key = sMCIfaceKEYPAD_checkpress();
    11fa:	0e 94 dd 01 	call	0x3ba	; 0x3ba <sMCIfaceKEYPAD_checkpress>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	8c 83       	std	Y+4, r24	; 0x04
    1204:	9d 83       	std	Y+5, r25	; 0x05
    1206:	ae 83       	std	Y+6, r26	; 0x06
    1208:	bf 83       	std	Y+7, r27	; 0x07
			handle->ifaceKEYPAD.key_down = bool_true;
    120a:	bc 86       	std	Y+12, r11	; 0x0c
			handle->stateConfVector[0] = SMC_main_region_On_r1_Running_keypad_CheckKeyDown;
    120c:	a8 82       	st	Y, r10
			handle->stateConfVectorPosition = 0;
    120e:	1b 82       	std	Y+3, r1	; 0x03
    1210:	1a 82       	std	Y+2, r1	; 0x02
    1212:	6a c2       	rjmp	.+1236   	; 0x16e8 <__stack+0x5e9>
static void sMC_react_main_region_On_r1_Running_running_main_WaitingForRequest(SMC* handle) {
	/* The reactions of state WaitingForRequest. */
	if (bool_true) { 
		/* Default exit sequence for state WaitingForRequest */
		handle->stateConfVector[1] = SMC_last_state;
		handle->stateConfVectorPosition = 1;
    1214:	fb 82       	std	Y+3, r15	; 0x03
    1216:	ea 82       	std	Y+2, r14	; 0x02
		/* Default enter sequence for state CheckKeyPress */
		/* Entry action for state 'CheckKeyPress'. */
		handle->ifaceKEYPAD.lastkey = 0;
    1218:	18 86       	std	Y+8, r1	; 0x08
    121a:	19 86       	std	Y+9, r1	; 0x09
    121c:	1a 86       	std	Y+10, r1	; 0x0a
    121e:	1b 86       	std	Y+11, r1	; 0x0b
		handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_CheckKeyPress;
    1220:	86 e0       	ldi	r24, 0x06	; 6
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	35 c2       	rjmp	.+1130   	; 0x1690 <__stack+0x591>
}

/* The reactions of state CheckKeyPress. */
static void sMC_react_main_region_On_r1_Running_running_main_CheckKeyPress(SMC* handle) {
	/* The reactions of state CheckKeyPress. */
	if (handle->ifaceKEYPAD.lastkey == 13 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1226:	88 85       	ldd	r24, Y+8	; 0x08
    1228:	99 85       	ldd	r25, Y+9	; 0x09
    122a:	aa 85       	ldd	r26, Y+10	; 0x0a
    122c:	bb 85       	ldd	r27, Y+11	; 0x0b
    122e:	8d 30       	cpi	r24, 0x0D	; 13
    1230:	91 05       	cpc	r25, r1
    1232:	a1 05       	cpc	r26, r1
    1234:	b1 05       	cpc	r27, r1
    1236:	81 f4       	brne	.+32     	; 0x1258 <__stack+0x159>
    1238:	2d 85       	ldd	r18, Y+13	; 0x0d
    123a:	22 23       	and	r18, r18
    123c:	69 f0       	breq	.+26     	; 0x1258 <__stack+0x159>
		/* Default exit sequence for state CheckKeyPress */
		handle->stateConfVector[1] = SMC_last_state;
		handle->stateConfVectorPosition = 1;
    123e:	fb 82       	std	Y+3, r15	; 0x03
    1240:	ea 82       	std	Y+2, r14	; 0x02
		/* Default enter sequence for state FinishDish */
		/* Entry action for state 'FinishDish'. */
		handle->iface.requestId = 5;
    1242:	85 e0       	ldi	r24, 0x05	; 5
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	a0 e0       	ldi	r26, 0x00	; 0
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	8b af       	sts	0x7b, r24
    124c:	9c af       	sts	0x7c, r25
    124e:	ad af       	sts	0x7d, r26
    1250:	be af       	sts	0x7e, r27
		handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_FinishDish;
    1252:	97 e0       	ldi	r25, 0x07	; 7
    1254:	99 83       	std	Y+1, r25	; 0x01
    1256:	1c c2       	rjmp	.+1080   	; 0x1690 <__stack+0x591>
		handle->stateConfVectorPosition = 1;
	}  else {
		if (handle->ifaceKEYPAD.lastkey == 14 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1258:	8e 30       	cpi	r24, 0x0E	; 14
    125a:	91 05       	cpc	r25, r1
    125c:	a1 05       	cpc	r26, r1
    125e:	b1 05       	cpc	r27, r1
    1260:	09 f0       	breq	.+2      	; 0x1264 <__stack+0x165>
    1262:	16 c2       	rjmp	.+1068   	; 0x1690 <__stack+0x591>
    1264:	8d 85       	ldd	r24, Y+13	; 0x0d
    1266:	88 23       	and	r24, r24
    1268:	09 f4       	brne	.+2      	; 0x126c <__stack+0x16d>
    126a:	12 c2       	rjmp	.+1060   	; 0x1690 <__stack+0x591>
			/* Default exit sequence for state CheckKeyPress */
			handle->stateConfVector[1] = SMC_last_state;
			handle->stateConfVectorPosition = 1;
    126c:	fb 82       	std	Y+3, r15	; 0x03
    126e:	ea 82       	std	Y+2, r14	; 0x02
			/* Default enter sequence for state CancelDish */
			/* Entry action for state 'CancelDish'. */
			handle->iface.requestId = 6;
    1270:	4b ae       	sts	0xbb, r20
    1272:	5c ae       	sts	0xbc, r21
    1274:	6d ae       	sts	0xbd, r22
    1276:	7e ae       	sts	0xbe, r23
			handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_CancelDish;
    1278:	a8 e0       	ldi	r26, 0x08	; 8
    127a:	a9 83       	std	Y+1, r26	; 0x01
    127c:	09 c2       	rjmp	.+1042   	; 0x1690 <__stack+0x591>
static void sMC_react_main_region_On_r1_Running_running_main_FinishDish(SMC* handle) {
	/* The reactions of state FinishDish. */
	if (bool_true) { 
		/* Default exit sequence for state FinishDish */
		handle->stateConfVector[1] = SMC_last_state;
		handle->stateConfVectorPosition = 1;
    127e:	fb 82       	std	Y+3, r15	; 0x03
    1280:	ea 82       	std	Y+2, r14	; 0x02
		/* Default enter sequence for state CheckKeyPress1 */
		/* Entry action for state 'CheckKeyPress1'. */
		handle->iface.listId = 0;
    1282:	f6 01       	movw	r30, r12
    1284:	10 82       	st	Z, r1
    1286:	11 82       	std	Z+1, r1	; 0x01
    1288:	12 82       	std	Z+2, r1	; 0x02
    128a:	13 82       	std	Z+3, r1	; 0x03
		handle->ifaceKEYPAD.lastkey = 0;
    128c:	18 86       	std	Y+8, r1	; 0x08
    128e:	19 86       	std	Y+9, r1	; 0x09
    1290:	1a 86       	std	Y+10, r1	; 0x0a
    1292:	1b 86       	std	Y+11, r1	; 0x0b
		handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_CheckKeyPress1;
    1294:	8f e0       	ldi	r24, 0x0F	; 15
    1296:	89 83       	std	Y+1, r24	; 0x01
    1298:	fb c1       	rjmp	.+1014   	; 0x1690 <__stack+0x591>
static void sMC_react_main_region_On_r1_Running_running_main_CancelDish(SMC* handle) {
	/* The reactions of state CancelDish. */
	if (bool_true) { 
		/* Default exit sequence for state CancelDish */
		handle->stateConfVector[1] = SMC_last_state;
		handle->stateConfVectorPosition = 1;
    129a:	fb 82       	std	Y+3, r15	; 0x03
    129c:	ea 82       	std	Y+2, r14	; 0x02
		/* Default enter sequence for state CheckKeyPress1 */
		/* Entry action for state 'CheckKeyPress1'. */
		handle->iface.listId = 0;
    129e:	d6 01       	movw	r26, r12
    12a0:	1d 92       	st	X+, r1
    12a2:	1d 92       	st	X+, r1
    12a4:	1d 92       	st	X+, r1
    12a6:	1c 92       	st	X, r1
    12a8:	13 97       	sbiw	r26, 0x03	; 3
		handle->ifaceKEYPAD.lastkey = 0;
    12aa:	18 86       	std	Y+8, r1	; 0x08
    12ac:	19 86       	std	Y+9, r1	; 0x09
    12ae:	1a 86       	std	Y+10, r1	; 0x0a
    12b0:	1b 86       	std	Y+11, r1	; 0x0b
		handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_CheckKeyPress1;
    12b2:	8f e0       	ldi	r24, 0x0F	; 15
    12b4:	89 83       	std	Y+1, r24	; 0x01
    12b6:	ec c1       	rjmp	.+984    	; 0x1690 <__stack+0x591>
}

/* The reactions of state Send. */
static void sMC_react_main_region_On_r1_Running_running_main_Send_Request_send_Send(SMC* handle) {
	/* The reactions of state Send. */
	if (handle->iface.requestId == 0) { 
    12b8:	4b ad       	sts	0x6b, r20
    12ba:	5c ad       	sts	0x6c, r21
    12bc:	6d ad       	sts	0x6d, r22
    12be:	7e ad       	sts	0x6e, r23
    12c0:	41 15       	cp	r20, r1
    12c2:	51 05       	cpc	r21, r1
    12c4:	61 05       	cpc	r22, r1
    12c6:	71 05       	cpc	r23, r1
    12c8:	c9 f4       	brne	.+50     	; 0x12fc <__stack+0x1fd>
		/* Default exit sequence for state Send Request */
		/* Default exit sequence for region send */
		/* Handle exit of all possible states (of send) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	8c 30       	cpi	r24, 0x0C	; 12
    12ce:	59 f4       	brne	.+22     	; 0x12e6 <__stack+0x1e7>
				handle->stateConfVectorPosition = 1;
				break;
			}
			case SMC_main_region_On_r1_Running_running_main_Send_Request_send_SendFail : {
				/* Default exit sequence for state SendFail */
				handle->stateConfVector[1] = SMC_last_state;
    12d0:	80 e1       	ldi	r24, 0x10	; 16
    12d2:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	9b 83       	std	Y+3, r25	; 0x03
    12da:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail'. */
				sMC_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail_time_event_0_raised) );		
    12dc:	ce 01       	movw	r24, r28
    12de:	8b 5b       	subi	r24, 0xBB	; 187
    12e0:	9f 4f       	sbci	r25, 0xFF	; 255
    12e2:	0e 94 59 03 	call	0x6b2	; 0x6b2 <sMC_unsetTimer>
			}
			default: break;
		}
		/* Default enter sequence for state WaitingForRequest */
		/* Entry action for state 'WaitingForRequest'. */
		handle->iface.requestId = 0;
    12e6:	1b ae       	sts	0xbb, r17
    12e8:	1c ae       	sts	0xbc, r17
    12ea:	1d ae       	sts	0xbd, r17
    12ec:	1e ae       	sts	0xbe, r17
		handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_WaitingForRequest;
    12ee:	85 e0       	ldi	r24, 0x05	; 5
    12f0:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	9b 83       	std	Y+3, r25	; 0x03
    12f8:	8a 83       	std	Y+2, r24	; 0x02
    12fa:	f0 c1       	rjmp	.+992    	; 0x16dc <__stack+0x5dd>
	}  else {
		if (handle->ifaceRF.result == bool_true) { 
    12fc:	2f 89       	ldd	r18, Y+23	; 0x17
    12fe:	22 23       	and	r18, r18
    1300:	c9 f0       	breq	.+50     	; 0x1334 <__stack+0x235>
			/* Default exit sequence for state Send */
			handle->stateConfVector[1] = SMC_last_state;
    1302:	80 e1       	ldi	r24, 0x10	; 16
    1304:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1306:	01 e0       	ldi	r16, 0x01	; 1
    1308:	10 e0       	ldi	r17, 0x00	; 0
    130a:	1b 83       	std	Y+3, r17	; 0x03
    130c:	0a 83       	std	Y+2, r16	; 0x02
			/* Default enter sequence for state Check */
			/* Entry action for state 'Check'. */
			handle->ifaceRF.retryCheck += 1;
    130e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1310:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1312:	af 8d       	ldd	r26, Y+31	; 0x1f
    1314:	b8 a1       	lds	r27, 0x48
    1316:	01 96       	adiw	r24, 0x01	; 1
    1318:	a1 1d       	adc	r26, r1
    131a:	b1 1d       	adc	r27, r1
    131c:	8d 8f       	std	Y+29, r24	; 0x1d
    131e:	9e 8f       	std	Y+30, r25	; 0x1e
    1320:	af 8f       	std	Y+31, r26	; 0x1f
    1322:	b8 a3       	lds	r27, 0x58
			handle->ifaceRF.resultCheck = sMCIfaceRF_getCheck();
    1324:	0e 94 af 02 	call	0x55e	; 0x55e <sMCIfaceRF_getCheck>
    1328:	88 8f       	std	Y+24, r24	; 0x18
			handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_Send_Request_send_Check;
    132a:	8b e0       	ldi	r24, 0x0B	; 11
    132c:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    132e:	1b 83       	std	Y+3, r17	; 0x03
    1330:	0a 83       	std	Y+2, r16	; 0x02
    1332:	d4 c1       	rjmp	.+936    	; 0x16dc <__stack+0x5dd>
		}  else {
			if (handle->ifaceRF.retry > 15 && handle->ifaceRF.result == bool_false) { 
    1334:	89 8d       	ldd	r24, Y+25	; 0x19
    1336:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1338:	ab 8d       	ldd	r26, Y+27	; 0x1b
    133a:	bc 8d       	ldd	r27, Y+28	; 0x1c
    133c:	80 31       	cpi	r24, 0x10	; 16
    133e:	91 05       	cpc	r25, r1
    1340:	a1 05       	cpc	r26, r1
    1342:	b1 05       	cpc	r27, r1
    1344:	dc f0       	brlt	.+54     	; 0x137c <__stack+0x27d>
				/* Default exit sequence for state Send */
				handle->stateConfVector[1] = SMC_last_state;
    1346:	80 e1       	ldi	r24, 0x10	; 16
    1348:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    134a:	01 e0       	ldi	r16, 0x01	; 1
    134c:	10 e0       	ldi	r17, 0x00	; 0
    134e:	1b 83       	std	Y+3, r17	; 0x03
    1350:	0a 83       	std	Y+2, r16	; 0x02
				/* Default enter sequence for state SendFail */
				/* Entry action for state 'SendFail'. */
				sMC_setTimer( (sc_eventid) &(handle->timeEvents.SendFail_time_event_0_raised) , 2 * 1000, bool_false);
    1352:	ce 01       	movw	r24, r28
    1354:	8b 5b       	subi	r24, 0xBB	; 187
    1356:	9f 4f       	sbci	r25, 0xFF	; 255
    1358:	40 ed       	ldi	r20, 0xD0	; 208
    135a:	57 e0       	ldi	r21, 0x07	; 7
    135c:	60 e0       	ldi	r22, 0x00	; 0
    135e:	70 e0       	ldi	r23, 0x00	; 0
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	0e 94 56 03 	call	0x6ac	; 0x6ac <sMC_setTimer>
				sMCIfaceLCD_clear();
    1366:	0e 94 1a 02 	call	0x434	; 0x434 <sMCIfaceLCD_clear>
				sMCIfaceLCD_writeString("Send fail");
    136a:	8c ef       	ldi	r24, 0xFC	; 252
    136c:	91 e0       	ldi	r25, 0x01	; 1
    136e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <sMCIfaceLCD_writeString>
				handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_Send_Request_send_SendFail;
    1372:	8c e0       	ldi	r24, 0x0C	; 12
    1374:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1376:	1b 83       	std	Y+3, r17	; 0x03
    1378:	0a 83       	std	Y+2, r16	; 0x02
    137a:	b0 c1       	rjmp	.+864    	; 0x16dc <__stack+0x5dd>
			}  else {
				if (handle->ifaceRF.retry <= 15 && handle->ifaceRF.result == bool_false) { 
    137c:	22 23       	and	r18, r18
    137e:	09 f0       	breq	.+2      	; 0x1382 <__stack+0x283>
    1380:	87 c1       	rjmp	.+782    	; 0x1690 <__stack+0x591>
					/* Default enter sequence for state Send */
					/* Entry action for state 'Send'. */
					handle->ifaceRF.retry += 1;
    1382:	01 96       	adiw	r24, 0x01	; 1
    1384:	a1 1d       	adc	r26, r1
    1386:	b1 1d       	adc	r27, r1
    1388:	89 8f       	std	Y+25, r24	; 0x19
    138a:	9a 8f       	std	Y+26, r25	; 0x1a
    138c:	ab 8f       	std	Y+27, r26	; 0x1b
    138e:	bc 8f       	std	Y+28, r27	; 0x1c
					handle->ifaceRF.retryCheck = 0;
    1390:	1d 8e       	std	Y+29, r1	; 0x1d
    1392:	1e 8e       	std	Y+30, r1	; 0x1e
    1394:	1f 8e       	std	Y+31, r1	; 0x1f
    1396:	18 a2       	lds	r17, 0x98
					handle->ifaceRF.result = sMCIfaceRF_sendReq(handle->iface.requestId, handle->iface.listId);
    1398:	fe 01       	movw	r30, r28
    139a:	ff 96       	adiw	r30, 0x3f	; 63
    139c:	00 81       	ld	r16, Z
    139e:	11 81       	ldd	r17, Z+1	; 0x01
    13a0:	22 81       	ldd	r18, Z+2	; 0x02
    13a2:	33 81       	ldd	r19, Z+3	; 0x03
    13a4:	cb 01       	movw	r24, r22
    13a6:	ba 01       	movw	r22, r20
    13a8:	a9 01       	movw	r20, r18
    13aa:	98 01       	movw	r18, r16
    13ac:	0e 94 34 03 	call	0x668	; 0x668 <sMCIfaceRF_sendReq>
    13b0:	8f 8b       	std	Y+23, r24	; 0x17
					handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_Send_Request_send_Send;
    13b2:	8a e0       	ldi	r24, 0x0A	; 10
    13b4:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	9b 83       	std	Y+3, r25	; 0x03
    13bc:	8a 83       	std	Y+2, r24	; 0x02
    13be:	8e c1       	rjmp	.+796    	; 0x16dc <__stack+0x5dd>
}

/* The reactions of state Check. */
static void sMC_react_main_region_On_r1_Running_running_main_Send_Request_send_Check(SMC* handle) {
	/* The reactions of state Check. */
	if (handle->iface.requestId == 0) { 
    13c0:	4b ad       	sts	0x6b, r20
    13c2:	5c ad       	sts	0x6c, r21
    13c4:	6d ad       	sts	0x6d, r22
    13c6:	7e ad       	sts	0x6e, r23
    13c8:	41 15       	cp	r20, r1
    13ca:	51 05       	cpc	r21, r1
    13cc:	61 05       	cpc	r22, r1
    13ce:	71 05       	cpc	r23, r1
    13d0:	c9 f4       	brne	.+50     	; 0x1404 <__stack+0x305>
		/* Default exit sequence for state Send Request */
		/* Default exit sequence for region send */
		/* Handle exit of all possible states (of send) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	8c 30       	cpi	r24, 0x0C	; 12
    13d6:	59 f4       	brne	.+22     	; 0x13ee <__stack+0x2ef>
				handle->stateConfVectorPosition = 1;
				break;
			}
			case SMC_main_region_On_r1_Running_running_main_Send_Request_send_SendFail : {
				/* Default exit sequence for state SendFail */
				handle->stateConfVector[1] = SMC_last_state;
    13d8:	80 e1       	ldi	r24, 0x10	; 16
    13da:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	9b 83       	std	Y+3, r25	; 0x03
    13e2:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail'. */
				sMC_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail_time_event_0_raised) );		
    13e4:	ce 01       	movw	r24, r28
    13e6:	8b 5b       	subi	r24, 0xBB	; 187
    13e8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ea:	0e 94 59 03 	call	0x6b2	; 0x6b2 <sMC_unsetTimer>
			}
			default: break;
		}
		/* Default enter sequence for state WaitingForRequest */
		/* Entry action for state 'WaitingForRequest'. */
		handle->iface.requestId = 0;
    13ee:	1b ae       	sts	0xbb, r17
    13f0:	1c ae       	sts	0xbc, r17
    13f2:	1d ae       	sts	0xbd, r17
    13f4:	1e ae       	sts	0xbe, r17
		handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_WaitingForRequest;
    13f6:	85 e0       	ldi	r24, 0x05	; 5
    13f8:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	9b 83       	std	Y+3, r25	; 0x03
    1400:	8a 83       	std	Y+2, r24	; 0x02
    1402:	6c c1       	rjmp	.+728    	; 0x16dc <__stack+0x5dd>
	}  else {
		if (handle->ifaceRF.retryCheck > 15 && handle->ifaceRF.resultCheck == bool_false) { 
    1404:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1406:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1408:	af 8d       	ldd	r26, Y+31	; 0x1f
    140a:	b8 a1       	lds	r27, 0x48
    140c:	80 31       	cpi	r24, 0x10	; 16
    140e:	91 05       	cpc	r25, r1
    1410:	a1 05       	cpc	r26, r1
    1412:	b1 05       	cpc	r27, r1
    1414:	5c f1       	brlt	.+86     	; 0x146c <__stack+0x36d>
    1416:	88 8d       	ldd	r24, Y+24	; 0x18
    1418:	88 23       	and	r24, r24
    141a:	59 f5       	brne	.+86     	; 0x1472 <__stack+0x373>
			/* Default exit sequence for state Check */
			handle->stateConfVector[1] = SMC_last_state;
    141c:	80 e1       	ldi	r24, 0x10	; 16
    141e:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1420:	ee 24       	eor	r14, r14
    1422:	ff 24       	eor	r15, r15
    1424:	e3 94       	inc	r14
    1426:	fb 82       	std	Y+3, r15	; 0x03
    1428:	ea 82       	std	Y+2, r14	; 0x02
			/* Default enter sequence for state Send */
			/* Entry action for state 'Send'. */
			handle->ifaceRF.retry += 1;
    142a:	89 8d       	ldd	r24, Y+25	; 0x19
    142c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    142e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1430:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1432:	01 96       	adiw	r24, 0x01	; 1
    1434:	a1 1d       	adc	r26, r1
    1436:	b1 1d       	adc	r27, r1
    1438:	89 8f       	std	Y+25, r24	; 0x19
    143a:	9a 8f       	std	Y+26, r25	; 0x1a
    143c:	ab 8f       	std	Y+27, r26	; 0x1b
    143e:	bc 8f       	std	Y+28, r27	; 0x1c
			handle->ifaceRF.retryCheck = 0;
    1440:	1d 8e       	std	Y+29, r1	; 0x1d
    1442:	1e 8e       	std	Y+30, r1	; 0x1e
    1444:	1f 8e       	std	Y+31, r1	; 0x1f
    1446:	18 a2       	lds	r17, 0x98
			handle->ifaceRF.result = sMCIfaceRF_sendReq(handle->iface.requestId, handle->iface.listId);
    1448:	fe 01       	movw	r30, r28
    144a:	ff 96       	adiw	r30, 0x3f	; 63
    144c:	00 81       	ld	r16, Z
    144e:	11 81       	ldd	r17, Z+1	; 0x01
    1450:	22 81       	ldd	r18, Z+2	; 0x02
    1452:	33 81       	ldd	r19, Z+3	; 0x03
    1454:	cb 01       	movw	r24, r22
    1456:	ba 01       	movw	r22, r20
    1458:	a9 01       	movw	r20, r18
    145a:	98 01       	movw	r18, r16
    145c:	0e 94 34 03 	call	0x668	; 0x668 <sMCIfaceRF_sendReq>
    1460:	8f 8b       	std	Y+23, r24	; 0x17
			handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_Send_Request_send_Send;
    1462:	8a e0       	ldi	r24, 0x0A	; 10
    1464:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1466:	fb 82       	std	Y+3, r15	; 0x03
    1468:	ea 82       	std	Y+2, r14	; 0x02
    146a:	38 c1       	rjmp	.+624    	; 0x16dc <__stack+0x5dd>
		}  else {
			if (handle->ifaceRF.resultCheck == bool_true) { 
    146c:	28 8d       	ldd	r18, Y+24	; 0x18
    146e:	22 23       	and	r18, r18
    1470:	71 f0       	breq	.+28     	; 0x148e <__stack+0x38f>
				/* Default exit sequence for state Check */
				handle->stateConfVector[1] = SMC_last_state;
				handle->stateConfVectorPosition = 1;
    1472:	fb 82       	std	Y+3, r15	; 0x03
    1474:	ea 82       	std	Y+2, r14	; 0x02
				/* Default enter sequence for state ResetResult */
				/* Entry action for state 'ResetResult'. */
				handle->ifaceRF.result = bool_true;
    1476:	bf 8a       	std	Y+23, r11	; 0x17
				handle->ifaceRF.retry = 0;
    1478:	19 8e       	std	Y+25, r1	; 0x19
    147a:	1a 8e       	std	Y+26, r1	; 0x1a
    147c:	1b 8e       	std	Y+27, r1	; 0x1b
    147e:	1c 8e       	std	Y+28, r1	; 0x1c
				handle->iface.requestId = 0;
    1480:	1b ae       	sts	0xbb, r17
    1482:	1c ae       	sts	0xbc, r17
    1484:	1d ae       	sts	0xbd, r17
    1486:	1e ae       	sts	0xbe, r17
				handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_Send_Request_send_ResetResult;
    1488:	bd e0       	ldi	r27, 0x0D	; 13
    148a:	b9 83       	std	Y+1, r27	; 0x01
    148c:	01 c1       	rjmp	.+514    	; 0x1690 <__stack+0x591>
				handle->stateConfVectorPosition = 1;
			}  else {
				if (handle->ifaceRF.retryCheck <= 15 && handle->ifaceRF.resultCheck == bool_false) { 
					/* Default enter sequence for state Check */
					/* Entry action for state 'Check'. */
					handle->ifaceRF.retryCheck += 1;
    148e:	01 96       	adiw	r24, 0x01	; 1
    1490:	a1 1d       	adc	r26, r1
    1492:	b1 1d       	adc	r27, r1
    1494:	8d 8f       	std	Y+29, r24	; 0x1d
    1496:	9e 8f       	std	Y+30, r25	; 0x1e
    1498:	af 8f       	std	Y+31, r26	; 0x1f
    149a:	b8 a3       	lds	r27, 0x58
					handle->ifaceRF.resultCheck = sMCIfaceRF_getCheck();
    149c:	0e 94 af 02 	call	0x55e	; 0x55e <sMCIfaceRF_getCheck>
    14a0:	88 8f       	std	Y+24, r24	; 0x18
					handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_Send_Request_send_Check;
    14a2:	8b e0       	ldi	r24, 0x0B	; 11
    14a4:	89 83       	std	Y+1, r24	; 0x01
					handle->stateConfVectorPosition = 1;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	9b 83       	std	Y+3, r25	; 0x03
    14ac:	8a 83       	std	Y+2, r24	; 0x02
    14ae:	16 c1       	rjmp	.+556    	; 0x16dc <__stack+0x5dd>
}

/* The reactions of state SendFail. */
static void sMC_react_main_region_On_r1_Running_running_main_Send_Request_send_SendFail(SMC* handle) {
	/* The reactions of state SendFail. */
	if (handle->iface.requestId == 0) { 
    14b0:	8b ad       	sts	0x6b, r24
    14b2:	9c ad       	sts	0x6c, r25
    14b4:	ad ad       	sts	0x6d, r26
    14b6:	be ad       	sts	0x6e, r27
    14b8:	00 97       	sbiw	r24, 0x00	; 0
    14ba:	a1 05       	cpc	r26, r1
    14bc:	b1 05       	cpc	r27, r1
    14be:	c9 f4       	brne	.+50     	; 0x14f2 <__stack+0x3f3>
		/* Default exit sequence for state Send Request */
		/* Default exit sequence for region send */
		/* Handle exit of all possible states (of send) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	8c 30       	cpi	r24, 0x0C	; 12
    14c4:	59 f4       	brne	.+22     	; 0x14dc <__stack+0x3dd>
				handle->stateConfVectorPosition = 1;
				break;
			}
			case SMC_main_region_On_r1_Running_running_main_Send_Request_send_SendFail : {
				/* Default exit sequence for state SendFail */
				handle->stateConfVector[1] = SMC_last_state;
    14c6:	80 e1       	ldi	r24, 0x10	; 16
    14c8:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	9b 83       	std	Y+3, r25	; 0x03
    14d0:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail'. */
				sMC_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail_time_event_0_raised) );		
    14d2:	ce 01       	movw	r24, r28
    14d4:	8b 5b       	subi	r24, 0xBB	; 187
    14d6:	9f 4f       	sbci	r25, 0xFF	; 255
    14d8:	0e 94 59 03 	call	0x6b2	; 0x6b2 <sMC_unsetTimer>
			}
			default: break;
		}
		/* Default enter sequence for state WaitingForRequest */
		/* Entry action for state 'WaitingForRequest'. */
		handle->iface.requestId = 0;
    14dc:	1b ae       	sts	0xbb, r17
    14de:	1c ae       	sts	0xbc, r17
    14e0:	1d ae       	sts	0xbd, r17
    14e2:	1e ae       	sts	0xbe, r17
		handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_WaitingForRequest;
    14e4:	85 e0       	ldi	r24, 0x05	; 5
    14e6:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	9b 83       	std	Y+3, r25	; 0x03
    14ee:	8a 83       	std	Y+2, r24	; 0x02
    14f0:	f5 c0       	rjmp	.+490    	; 0x16dc <__stack+0x5dd>
	}  else {
		if (handle->timeEvents.SendFail_time_event_0_raised) { 
    14f2:	f4 01       	movw	r30, r8
    14f4:	80 81       	ld	r24, Z
    14f6:	88 23       	and	r24, r24
    14f8:	09 f4       	brne	.+2      	; 0x14fc <__stack+0x3fd>
    14fa:	ca c0       	rjmp	.+404    	; 0x1690 <__stack+0x591>
			/* Default exit sequence for state SendFail */
			handle->stateConfVector[1] = SMC_last_state;
    14fc:	80 e1       	ldi	r24, 0x10	; 16
    14fe:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1500:	01 e0       	ldi	r16, 0x01	; 1
    1502:	10 e0       	ldi	r17, 0x00	; 0
    1504:	1b 83       	std	Y+3, r17	; 0x03
    1506:	0a 83       	std	Y+2, r16	; 0x02
			/* Exit action for state 'SendFail'. */
			sMC_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail_time_event_0_raised) );		
    1508:	ce 01       	movw	r24, r28
    150a:	8b 5b       	subi	r24, 0xBB	; 187
    150c:	9f 4f       	sbci	r25, 0xFF	; 255
    150e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <sMC_unsetTimer>
			/* Default enter sequence for state ResetResult */
			/* Entry action for state 'ResetResult'. */
			handle->ifaceRF.result = bool_true;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	8f 8b       	std	Y+23, r24	; 0x17
			handle->ifaceRF.retry = 0;
    1516:	19 8e       	std	Y+25, r1	; 0x19
    1518:	1a 8e       	std	Y+26, r1	; 0x1a
    151a:	1b 8e       	std	Y+27, r1	; 0x1b
    151c:	1c 8e       	std	Y+28, r1	; 0x1c
			handle->iface.requestId = 0;
    151e:	1b ae       	sts	0xbb, r17
    1520:	1c ae       	sts	0xbc, r17
    1522:	1d ae       	sts	0xbd, r17
    1524:	1e ae       	sts	0xbe, r17
			handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_Send_Request_send_ResetResult;
    1526:	8d e0       	ldi	r24, 0x0D	; 13
    1528:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    152a:	1b 83       	std	Y+3, r17	; 0x03
    152c:	0a 83       	std	Y+2, r16	; 0x02
    152e:	d6 c0       	rjmp	.+428    	; 0x16dc <__stack+0x5dd>
}

/* The reactions of state ResetResult. */
static void sMC_react_main_region_On_r1_Running_running_main_Send_Request_send_ResetResult(SMC* handle) {
	/* The reactions of state ResetResult. */
	if (handle->iface.requestId == 0) { 
    1530:	8b ad       	sts	0x6b, r24
    1532:	9c ad       	sts	0x6c, r25
    1534:	ad ad       	sts	0x6d, r26
    1536:	be ad       	sts	0x6e, r27
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	a1 05       	cpc	r26, r1
    153c:	b1 05       	cpc	r27, r1
    153e:	c9 f4       	brne	.+50     	; 0x1572 <__stack+0x473>
		/* Default exit sequence for state Send Request */
		/* Default exit sequence for region send */
		/* Handle exit of all possible states (of send) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	8c 30       	cpi	r24, 0x0C	; 12
    1544:	59 f4       	brne	.+22     	; 0x155c <__stack+0x45d>
				handle->stateConfVectorPosition = 1;
				break;
			}
			case SMC_main_region_On_r1_Running_running_main_Send_Request_send_SendFail : {
				/* Default exit sequence for state SendFail */
				handle->stateConfVector[1] = SMC_last_state;
    1546:	80 e1       	ldi	r24, 0x10	; 16
    1548:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	9b 83       	std	Y+3, r25	; 0x03
    1550:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail'. */
				sMC_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail_time_event_0_raised) );		
    1552:	ce 01       	movw	r24, r28
    1554:	8b 5b       	subi	r24, 0xBB	; 187
    1556:	9f 4f       	sbci	r25, 0xFF	; 255
    1558:	0e 94 59 03 	call	0x6b2	; 0x6b2 <sMC_unsetTimer>
			}
			default: break;
		}
		/* Default enter sequence for state WaitingForRequest */
		/* Entry action for state 'WaitingForRequest'. */
		handle->iface.requestId = 0;
    155c:	1b ae       	sts	0xbb, r17
    155e:	1c ae       	sts	0xbc, r17
    1560:	1d ae       	sts	0xbd, r17
    1562:	1e ae       	sts	0xbe, r17
		handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_WaitingForRequest;
    1564:	85 e0       	ldi	r24, 0x05	; 5
    1566:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	9b 83       	std	Y+3, r25	; 0x03
    156e:	8a 83       	std	Y+2, r24	; 0x02
    1570:	b5 c0       	rjmp	.+362    	; 0x16dc <__stack+0x5dd>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state ResetResult */
			handle->stateConfVector[1] = SMC_last_state;
			handle->stateConfVectorPosition = 1;
    1572:	fb 82       	std	Y+3, r15	; 0x03
    1574:	ea 82       	std	Y+2, r14	; 0x02
			/* Default enter sequence for state null */
			handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_Send_Request_send__final_;
    1576:	29 82       	std	Y+1, r2	; 0x01
    1578:	8b c0       	rjmp	.+278    	; 0x1690 <__stack+0x591>
}

/* The reactions of state null. */
static void sMC_react_main_region_On_r1_Running_running_main_Send_Request_send__final_0(SMC* handle) {
	/* The reactions of state null. */
	if (handle->iface.requestId == 0) { 
    157a:	8b ad       	sts	0x6b, r24
    157c:	9c ad       	sts	0x6c, r25
    157e:	ad ad       	sts	0x6d, r26
    1580:	be ad       	sts	0x6e, r27
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	a1 05       	cpc	r26, r1
    1586:	b1 05       	cpc	r27, r1
    1588:	09 f0       	breq	.+2      	; 0x158c <__stack+0x48d>
    158a:	82 c0       	rjmp	.+260    	; 0x1690 <__stack+0x591>
		/* Default exit sequence for state Send Request */
		/* Default exit sequence for region send */
		/* Handle exit of all possible states (of send) at position 1... */
		switch(handle->stateConfVector[ 1 ]) {
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	8c 30       	cpi	r24, 0x0C	; 12
    1590:	59 f4       	brne	.+22     	; 0x15a8 <__stack+0x4a9>
				handle->stateConfVectorPosition = 1;
				break;
			}
			case SMC_main_region_On_r1_Running_running_main_Send_Request_send_SendFail : {
				/* Default exit sequence for state SendFail */
				handle->stateConfVector[1] = SMC_last_state;
    1592:	80 e1       	ldi	r24, 0x10	; 16
    1594:	89 83       	std	Y+1, r24	; 0x01
				handle->stateConfVectorPosition = 1;
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	9b 83       	std	Y+3, r25	; 0x03
    159c:	8a 83       	std	Y+2, r24	; 0x02
				/* Exit action for state 'SendFail'. */
				sMC_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail_time_event_0_raised) );		
    159e:	ce 01       	movw	r24, r28
    15a0:	8b 5b       	subi	r24, 0xBB	; 187
    15a2:	9f 4f       	sbci	r25, 0xFF	; 255
    15a4:	0e 94 59 03 	call	0x6b2	; 0x6b2 <sMC_unsetTimer>
			}
			default: break;
		}
		/* Default enter sequence for state WaitingForRequest */
		/* Entry action for state 'WaitingForRequest'. */
		handle->iface.requestId = 0;
    15a8:	1b ae       	sts	0xbb, r17
    15aa:	1c ae       	sts	0xbc, r17
    15ac:	1d ae       	sts	0xbd, r17
    15ae:	1e ae       	sts	0xbe, r17
		handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_WaitingForRequest;
    15b0:	85 e0       	ldi	r24, 0x05	; 5
    15b2:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	9b 83       	std	Y+3, r25	; 0x03
    15ba:	8a 83       	std	Y+2, r24	; 0x02
    15bc:	8f c0       	rjmp	.+286    	; 0x16dc <__stack+0x5dd>
}

/* The reactions of state CheckKeyPress1. */
static void sMC_react_main_region_On_r1_Running_running_main_CheckKeyPress1(SMC* handle) {
	/* The reactions of state CheckKeyPress1. */
	if (handle->ifaceKEYPAD.lastkey <= 9 && handle->ifaceKEYPAD.lastkey >= 1 && handle->ifaceKEYPAD.key_pressed_raised) { 
    15be:	08 85       	ldd	r16, Y+8	; 0x08
    15c0:	19 85       	ldd	r17, Y+9	; 0x09
    15c2:	2a 85       	ldd	r18, Y+10	; 0x0a
    15c4:	3b 85       	ldd	r19, Y+11	; 0x0b
    15c6:	d9 01       	movw	r26, r18
    15c8:	c8 01       	movw	r24, r16
    15ca:	01 97       	sbiw	r24, 0x01	; 1
    15cc:	a1 09       	sbc	r26, r1
    15ce:	b1 09       	sbc	r27, r1
    15d0:	89 30       	cpi	r24, 0x09	; 9
    15d2:	91 05       	cpc	r25, r1
    15d4:	a1 05       	cpc	r26, r1
    15d6:	b1 05       	cpc	r27, r1
    15d8:	58 f5       	brcc	.+86     	; 0x1630 <__stack+0x531>
    15da:	8d 85       	ldd	r24, Y+13	; 0x0d
    15dc:	88 23       	and	r24, r24
    15de:	41 f1       	breq	.+80     	; 0x1630 <__stack+0x531>
		/* Default exit sequence for state CheckKeyPress1 */
		handle->stateConfVector[1] = SMC_last_state;
    15e0:	80 e1       	ldi	r24, 0x10	; 16
    15e2:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    15e4:	ee 24       	eor	r14, r14
    15e6:	ff 24       	eor	r15, r15
    15e8:	e3 94       	inc	r14
    15ea:	fb 82       	std	Y+3, r15	; 0x03
    15ec:	ea 82       	std	Y+2, r14	; 0x02
		handle->iface.listId = handle->ifaceKEYPAD.lastkey;
    15ee:	fe 01       	movw	r30, r28
    15f0:	ff 96       	adiw	r30, 0x3f	; 63
    15f2:	00 83       	st	Z, r16
    15f4:	11 83       	std	Z+1, r17	; 0x01
    15f6:	22 83       	std	Z+2, r18	; 0x02
    15f8:	33 83       	std	Z+3, r19	; 0x03
		/* Default enter sequence for state Send Request */
		/* Entry action for state 'Send Request'. */
		handle->ifaceRF.result = bool_false;
    15fa:	1f 8a       	std	Y+23, r1	; 0x17
		handle->ifaceRF.retry = 0;
		/* Default enter sequence for region send */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state Send */
		/* Entry action for state 'Send'. */
		handle->ifaceRF.retry += 1;
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	a0 e0       	ldi	r26, 0x00	; 0
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	89 8f       	std	Y+25, r24	; 0x19
    1606:	9a 8f       	std	Y+26, r25	; 0x1a
    1608:	ab 8f       	std	Y+27, r26	; 0x1b
    160a:	bc 8f       	std	Y+28, r27	; 0x1c
		handle->ifaceRF.retryCheck = 0;
    160c:	1d 8e       	std	Y+29, r1	; 0x1d
    160e:	1e 8e       	std	Y+30, r1	; 0x1e
    1610:	1f 8e       	std	Y+31, r1	; 0x1f
    1612:	18 a2       	lds	r17, 0x98
		handle->ifaceRF.result = sMCIfaceRF_sendReq(handle->iface.requestId, handle->iface.listId);
    1614:	6b ad       	sts	0x6b, r22
    1616:	7c ad       	sts	0x6c, r23
    1618:	8d ad       	sts	0x6d, r24
    161a:	9e ad       	sts	0x6e, r25
    161c:	a9 01       	movw	r20, r18
    161e:	98 01       	movw	r18, r16
    1620:	0e 94 34 03 	call	0x668	; 0x668 <sMCIfaceRF_sendReq>
    1624:	8f 8b       	std	Y+23, r24	; 0x17
		handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_Send_Request_send_Send;
    1626:	8a e0       	ldi	r24, 0x0A	; 10
    1628:	89 83       	std	Y+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    162a:	fb 82       	std	Y+3, r15	; 0x03
    162c:	ea 82       	std	Y+2, r14	; 0x02
    162e:	56 c0       	rjmp	.+172    	; 0x16dc <__stack+0x5dd>
	}  else {
		if (handle->ifaceKEYPAD.lastkey == 10 && handle->ifaceKEYPAD.key_pressed_raised) { 
    1630:	0a 30       	cpi	r16, 0x0A	; 10
    1632:	11 05       	cpc	r17, r1
    1634:	21 05       	cpc	r18, r1
    1636:	31 05       	cpc	r19, r1
    1638:	59 f5       	brne	.+86     	; 0x1690 <__stack+0x591>
    163a:	8d 85       	ldd	r24, Y+13	; 0x0d
    163c:	88 23       	and	r24, r24
    163e:	41 f1       	breq	.+80     	; 0x1690 <__stack+0x591>
			/* Default exit sequence for state CheckKeyPress1 */
			handle->stateConfVector[1] = SMC_last_state;
    1640:	80 e1       	ldi	r24, 0x10	; 16
    1642:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1644:	01 e0       	ldi	r16, 0x01	; 1
    1646:	10 e0       	ldi	r17, 0x00	; 0
    1648:	1b 83       	std	Y+3, r17	; 0x03
    164a:	0a 83       	std	Y+2, r16	; 0x02
			handle->iface.listId = 0;
    164c:	fe 01       	movw	r30, r28
    164e:	ff 96       	adiw	r30, 0x3f	; 63
    1650:	10 82       	st	Z, r1
    1652:	11 82       	std	Z+1, r1	; 0x01
    1654:	12 82       	std	Z+2, r1	; 0x02
    1656:	13 82       	std	Z+3, r1	; 0x03
			/* Default enter sequence for state Send Request */
			/* Entry action for state 'Send Request'. */
			handle->ifaceRF.result = bool_false;
    1658:	1f 8a       	std	Y+23, r1	; 0x17
			handle->ifaceRF.retry = 0;
			/* Default enter sequence for region send */
			/* Default react sequence for initial entry  */
			/* Default enter sequence for state Send */
			/* Entry action for state 'Send'. */
			handle->ifaceRF.retry += 1;
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	a0 e0       	ldi	r26, 0x00	; 0
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	89 8f       	std	Y+25, r24	; 0x19
    1664:	9a 8f       	std	Y+26, r25	; 0x1a
    1666:	ab 8f       	std	Y+27, r26	; 0x1b
    1668:	bc 8f       	std	Y+28, r27	; 0x1c
			handle->ifaceRF.retryCheck = 0;
    166a:	1d 8e       	std	Y+29, r1	; 0x1d
    166c:	1e 8e       	std	Y+30, r1	; 0x1e
    166e:	1f 8e       	std	Y+31, r1	; 0x1f
    1670:	18 a2       	lds	r17, 0x98
			handle->ifaceRF.result = sMCIfaceRF_sendReq(handle->iface.requestId, handle->iface.listId);
    1672:	6b ad       	sts	0x6b, r22
    1674:	7c ad       	sts	0x6c, r23
    1676:	8d ad       	sts	0x6d, r24
    1678:	9e ad       	sts	0x6e, r25
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	a9 01       	movw	r20, r18
    1680:	0e 94 34 03 	call	0x668	; 0x668 <sMCIfaceRF_sendReq>
    1684:	8f 8b       	std	Y+23, r24	; 0x17
			handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_Send_Request_send_Send;
    1686:	8a e0       	ldi	r24, 0x0A	; 10
    1688:	89 83       	std	Y+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    168a:	1b 83       	std	Y+3, r17	; 0x03
    168c:	0a 83       	std	Y+2, r16	; 0x02
    168e:	26 c0       	rjmp	.+76     	; 0x16dc <__stack+0x5dd>
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMC_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
    1690:	8a 81       	ldd	r24, Y+2	; 0x02
    1692:	9b 81       	ldd	r25, Y+3	; 0x03
    1694:	01 96       	adiw	r24, 0x01	; 1
    1696:	9b 83       	std	Y+3, r25	; 0x03
    1698:	8a 83       	std	Y+2, r24	; 0x02

void sMC_runCycle(SMC* handle) {
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
    169a:	82 30       	cpi	r24, 0x02	; 2
    169c:	91 05       	cpc	r25, r1
    169e:	08 f4       	brcc	.+2      	; 0x16a2 <__stack+0x5a3>
    16a0:	1d cd       	rjmp	.-1478   	; 0x10dc <sMC_runCycle+0x7e>
	}
	sMC_exitaction(handle);
}

static void clearInEvents(SMC* handle) {
	handle->ifaceKEYPAD.key_pressed_raised = bool_false;
    16a2:	1d 86       	std	Y+13, r1	; 0x0d
	handle->ifaceUART.DataRecieved_raised = bool_false;
    16a4:	1a 8a       	std	Y+18, r1	; 0x12
	handle->ifaceRF.DataRecieved_raised = bool_false;
    16a6:	1d a2       	lds	r17, 0x9d
	handle->iface.switchOff_raised = bool_false;
    16a8:	fe 01       	movw	r30, r28
    16aa:	ed 5b       	subi	r30, 0xBD	; 189
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	10 82       	st	Z, r1
	handle->iface.switchOn_raised = bool_false;
    16b0:	cc 5b       	subi	r28, 0xBC	; 188
    16b2:	df 4f       	sbci	r29, 0xFF	; 255
    16b4:	18 82       	st	Y, r1
			break;
		}
	}
	
	clearInEvents(handle);
}
    16b6:	df 91       	pop	r29
    16b8:	cf 91       	pop	r28
    16ba:	1f 91       	pop	r17
    16bc:	0f 91       	pop	r16
    16be:	ff 90       	pop	r15
    16c0:	ef 90       	pop	r14
    16c2:	df 90       	pop	r13
    16c4:	cf 90       	pop	r12
    16c6:	bf 90       	pop	r11
    16c8:	af 90       	pop	r10
    16ca:	9f 90       	pop	r9
    16cc:	8f 90       	pop	r8
    16ce:	7f 90       	pop	r7
    16d0:	6f 90       	pop	r6
    16d2:	5f 90       	pop	r5
    16d4:	4f 90       	pop	r4
    16d6:	3f 90       	pop	r3
    16d8:	2f 90       	pop	r2
    16da:	08 95       	ret
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMC_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	9b 81       	ldd	r25, Y+3	; 0x03
    16e0:	01 96       	adiw	r24, 0x01	; 1
    16e2:	9b 83       	std	Y+3, r25	; 0x03
    16e4:	8a 83       	std	Y+2, r24	; 0x02
    16e6:	dd cf       	rjmp	.-70     	; 0x16a2 <__stack+0x5a3>
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	9b 81       	ldd	r25, Y+3	; 0x03
    16ec:	01 96       	adiw	r24, 0x01	; 1
    16ee:	9b 83       	std	Y+3, r25	; 0x03
    16f0:	8a 83       	std	Y+2, r24	; 0x02
    16f2:	f4 cc       	rjmp	.-1560   	; 0x10dc <sMC_runCycle+0x7e>

000016f4 <sMC_raiseTimeEvent>:
	
	clearInEvents(handle);
}

void sMC_raiseTimeEvent(SMC* handle, sc_eventid evid) {
	if ( ((intptr_t)evid) >= ((intptr_t)&(handle->timeEvents))
    16f4:	8b 5b       	subi	r24, 0xBB	; 187
    16f6:	9f 4f       	sbci	r25, 0xFF	; 255
    16f8:	68 17       	cp	r22, r24
    16fa:	79 07       	cpc	r23, r25
    16fc:	3c f0       	brlt	.+14     	; 0x170c <sMC_raiseTimeEvent+0x18>
		&&  ((intptr_t)evid) < ((intptr_t)&(handle->timeEvents)) + sizeof(SMCTimeEvents)) {
    16fe:	01 96       	adiw	r24, 0x01	; 1
    1700:	68 17       	cp	r22, r24
    1702:	79 07       	cpc	r23, r25
    1704:	18 f4       	brcc	.+6      	; 0x170c <sMC_raiseTimeEvent+0x18>
		*(sc_boolean*)evid = bool_true;
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	fb 01       	movw	r30, r22
    170a:	80 83       	st	Z, r24
    170c:	08 95       	ret

0000170e <sMC_isActive>:
	}		
}

sc_boolean sMC_isActive(SMC* handle, SMCStates state) {
    170e:	fc 01       	movw	r30, r24
	switch (state) {
    1710:	67 30       	cpi	r22, 0x07	; 7
    1712:	09 f4       	brne	.+2      	; 0x1716 <sMC_isActive+0x8>
    1714:	5c c0       	rjmp	.+184    	; 0x17ce <sMC_isActive+0xc0>
    1716:	68 30       	cpi	r22, 0x08	; 8
    1718:	80 f4       	brcc	.+32     	; 0x173a <sMC_isActive+0x2c>
    171a:	63 30       	cpi	r22, 0x03	; 3
    171c:	e9 f1       	breq	.+122    	; 0x1798 <sMC_isActive+0x8a>
    171e:	64 30       	cpi	r22, 0x04	; 4
    1720:	28 f4       	brcc	.+10     	; 0x172c <sMC_isActive+0x1e>
    1722:	61 30       	cpi	r22, 0x01	; 1
    1724:	51 f1       	breq	.+84     	; 0x177a <sMC_isActive+0x6c>
    1726:	62 30       	cpi	r22, 0x02	; 2
    1728:	78 f5       	brcc	.+94     	; 0x1788 <sMC_isActive+0x7a>
    172a:	20 c0       	rjmp	.+64     	; 0x176c <sMC_isActive+0x5e>
    172c:	65 30       	cpi	r22, 0x05	; 5
    172e:	09 f4       	brne	.+2      	; 0x1732 <sMC_isActive+0x24>
    1730:	41 c0       	rjmp	.+130    	; 0x17b4 <sMC_isActive+0xa6>
    1732:	66 30       	cpi	r22, 0x06	; 6
    1734:	08 f0       	brcs	.+2      	; 0x1738 <sMC_isActive+0x2a>
    1736:	45 c0       	rjmp	.+138    	; 0x17c2 <sMC_isActive+0xb4>
    1738:	36 c0       	rjmp	.+108    	; 0x17a6 <sMC_isActive+0x98>
    173a:	6b 30       	cpi	r22, 0x0B	; 11
    173c:	09 f4       	brne	.+2      	; 0x1740 <sMC_isActive+0x32>
    173e:	60 c0       	rjmp	.+192    	; 0x1800 <sMC_isActive+0xf2>
    1740:	6c 30       	cpi	r22, 0x0C	; 12
    1742:	38 f4       	brcc	.+14     	; 0x1752 <sMC_isActive+0x44>
    1744:	69 30       	cpi	r22, 0x09	; 9
    1746:	09 f4       	brne	.+2      	; 0x174a <sMC_isActive+0x3c>
    1748:	4e c0       	rjmp	.+156    	; 0x17e6 <sMC_isActive+0xd8>
    174a:	6a 30       	cpi	r22, 0x0A	; 10
    174c:	08 f0       	brcs	.+2      	; 0x1750 <sMC_isActive+0x42>
    174e:	52 c0       	rjmp	.+164    	; 0x17f4 <sMC_isActive+0xe6>
    1750:	44 c0       	rjmp	.+136    	; 0x17da <sMC_isActive+0xcc>
    1752:	6d 30       	cpi	r22, 0x0D	; 13
    1754:	09 f4       	brne	.+2      	; 0x1758 <sMC_isActive+0x4a>
    1756:	60 c0       	rjmp	.+192    	; 0x1818 <sMC_isActive+0x10a>
    1758:	6d 30       	cpi	r22, 0x0D	; 13
    175a:	08 f4       	brcc	.+2      	; 0x175e <sMC_isActive+0x50>
    175c:	57 c0       	rjmp	.+174    	; 0x180c <sMC_isActive+0xfe>
    175e:	6e 30       	cpi	r22, 0x0E	; 14
    1760:	09 f4       	brne	.+2      	; 0x1764 <sMC_isActive+0x56>
    1762:	60 c0       	rjmp	.+192    	; 0x1824 <sMC_isActive+0x116>
    1764:	6f 30       	cpi	r22, 0x0F	; 15
    1766:	09 f0       	breq	.+2      	; 0x176a <sMC_isActive+0x5c>
    1768:	69 c0       	rjmp	.+210    	; 0x183c <sMC_isActive+0x12e>
    176a:	62 c0       	rjmp	.+196    	; 0x1830 <sMC_isActive+0x122>
		case SMC_main_region_On : 
			return (sc_boolean) (handle->stateConfVector[0] >= SMC_main_region_On
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 81       	ld	r25, Z
    1770:	90 31       	cpi	r25, 0x10	; 16
    1772:	08 f4       	brcc	.+2      	; 0x1776 <sMC_isActive+0x68>
    1774:	64 c0       	rjmp	.+200    	; 0x183e <sMC_isActive+0x130>
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	08 95       	ret
				&& handle->stateConfVector[0] <= SMC_main_region_On_r1_Running_running_main_CheckKeyPress1);
		case SMC_main_region_On_r1_Init : 
			return (sc_boolean) (handle->stateConfVector[0] == SMC_main_region_On_r1_Init
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 81       	ld	r25, Z
    177e:	91 30       	cpi	r25, 0x01	; 1
    1780:	09 f4       	brne	.+2      	; 0x1784 <sMC_isActive+0x76>
    1782:	5d c0       	rjmp	.+186    	; 0x183e <sMC_isActive+0x130>
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	08 95       	ret
			);
		case SMC_main_region_On_r1_Running : 
			return (sc_boolean) (handle->stateConfVector[0] >= SMC_main_region_On_r1_Running
    1788:	90 81       	ld	r25, Z
    178a:	92 50       	subi	r25, 0x02	; 2
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	9e 30       	cpi	r25, 0x0E	; 14
    1790:	08 f4       	brcc	.+2      	; 0x1794 <sMC_isActive+0x86>
    1792:	55 c0       	rjmp	.+170    	; 0x183e <sMC_isActive+0x130>
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	08 95       	ret
				&& handle->stateConfVector[0] <= SMC_main_region_On_r1_Running_running_main_CheckKeyPress1);
		case SMC_main_region_On_r1_Running_keypad_CheckKey : 
			return (sc_boolean) (handle->stateConfVector[0] == SMC_main_region_On_r1_Running_keypad_CheckKey
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	90 81       	ld	r25, Z
    179c:	93 30       	cpi	r25, 0x03	; 3
    179e:	09 f4       	brne	.+2      	; 0x17a2 <sMC_isActive+0x94>
    17a0:	4e c0       	rjmp	.+156    	; 0x183e <sMC_isActive+0x130>
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	08 95       	ret
			);
		case SMC_main_region_On_r1_Running_keypad_CheckKeyDown : 
			return (sc_boolean) (handle->stateConfVector[0] == SMC_main_region_On_r1_Running_keypad_CheckKeyDown
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 81       	ld	r25, Z
    17aa:	94 30       	cpi	r25, 0x04	; 4
    17ac:	09 f4       	brne	.+2      	; 0x17b0 <sMC_isActive+0xa2>
    17ae:	47 c0       	rjmp	.+142    	; 0x183e <sMC_isActive+0x130>
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	08 95       	ret
			);
		case SMC_main_region_On_r1_Running_running_main_WaitingForRequest : 
			return (sc_boolean) (handle->stateConfVector[1] == SMC_main_region_On_r1_Running_running_main_WaitingForRequest
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	91 81       	ldd	r25, Z+1	; 0x01
    17b8:	95 30       	cpi	r25, 0x05	; 5
    17ba:	09 f4       	brne	.+2      	; 0x17be <sMC_isActive+0xb0>
    17bc:	40 c0       	rjmp	.+128    	; 0x183e <sMC_isActive+0x130>
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	08 95       	ret
			);
		case SMC_main_region_On_r1_Running_running_main_CheckKeyPress : 
			return (sc_boolean) (handle->stateConfVector[1] == SMC_main_region_On_r1_Running_running_main_CheckKeyPress
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	91 81       	ldd	r25, Z+1	; 0x01
    17c6:	96 30       	cpi	r25, 0x06	; 6
    17c8:	d1 f1       	breq	.+116    	; 0x183e <sMC_isActive+0x130>
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	08 95       	ret
			);
		case SMC_main_region_On_r1_Running_running_main_FinishDish : 
			return (sc_boolean) (handle->stateConfVector[1] == SMC_main_region_On_r1_Running_running_main_FinishDish
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	91 81       	ldd	r25, Z+1	; 0x01
    17d2:	97 30       	cpi	r25, 0x07	; 7
    17d4:	a1 f1       	breq	.+104    	; 0x183e <sMC_isActive+0x130>
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	08 95       	ret
			);
		case SMC_main_region_On_r1_Running_running_main_CancelDish : 
			return (sc_boolean) (handle->stateConfVector[1] == SMC_main_region_On_r1_Running_running_main_CancelDish
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	91 81       	ldd	r25, Z+1	; 0x01
    17de:	98 30       	cpi	r25, 0x08	; 8
    17e0:	71 f1       	breq	.+92     	; 0x183e <sMC_isActive+0x130>
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	08 95       	ret
			);
		case SMC_main_region_On_r1_Running_running_main_Send_Request : 
			return (sc_boolean) (handle->stateConfVector[1] >= SMC_main_region_On_r1_Running_running_main_Send_Request
    17e6:	91 81       	ldd	r25, Z+1	; 0x01
    17e8:	99 50       	subi	r25, 0x09	; 9
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	96 30       	cpi	r25, 0x06	; 6
    17ee:	38 f1       	brcs	.+78     	; 0x183e <sMC_isActive+0x130>
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	08 95       	ret
				&& handle->stateConfVector[1] <= SMC_main_region_On_r1_Running_running_main_Send_Request_send__final_);
		case SMC_main_region_On_r1_Running_running_main_Send_Request_send_Send : 
			return (sc_boolean) (handle->stateConfVector[1] == SMC_main_region_On_r1_Running_running_main_Send_Request_send_Send
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	91 81       	ldd	r25, Z+1	; 0x01
    17f8:	9a 30       	cpi	r25, 0x0A	; 10
    17fa:	09 f1       	breq	.+66     	; 0x183e <sMC_isActive+0x130>
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	08 95       	ret
			);
		case SMC_main_region_On_r1_Running_running_main_Send_Request_send_Check : 
			return (sc_boolean) (handle->stateConfVector[1] == SMC_main_region_On_r1_Running_running_main_Send_Request_send_Check
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	91 81       	ldd	r25, Z+1	; 0x01
    1804:	9b 30       	cpi	r25, 0x0B	; 11
    1806:	d9 f0       	breq	.+54     	; 0x183e <sMC_isActive+0x130>
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	08 95       	ret
			);
		case SMC_main_region_On_r1_Running_running_main_Send_Request_send_SendFail : 
			return (sc_boolean) (handle->stateConfVector[1] == SMC_main_region_On_r1_Running_running_main_Send_Request_send_SendFail
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	91 81       	ldd	r25, Z+1	; 0x01
    1810:	9c 30       	cpi	r25, 0x0C	; 12
    1812:	a9 f0       	breq	.+42     	; 0x183e <sMC_isActive+0x130>
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	08 95       	ret
			);
		case SMC_main_region_On_r1_Running_running_main_Send_Request_send_ResetResult : 
			return (sc_boolean) (handle->stateConfVector[1] == SMC_main_region_On_r1_Running_running_main_Send_Request_send_ResetResult
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	91 81       	ldd	r25, Z+1	; 0x01
    181c:	9d 30       	cpi	r25, 0x0D	; 13
    181e:	79 f0       	breq	.+30     	; 0x183e <sMC_isActive+0x130>
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	08 95       	ret
			);
		case SMC_main_region_On_r1_Running_running_main_Send_Request_send__final_ : 
			return (sc_boolean) (handle->stateConfVector[1] == SMC_main_region_On_r1_Running_running_main_Send_Request_send__final_
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	91 81       	ldd	r25, Z+1	; 0x01
    1828:	9e 30       	cpi	r25, 0x0E	; 14
    182a:	49 f0       	breq	.+18     	; 0x183e <sMC_isActive+0x130>
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	08 95       	ret
			);
		case SMC_main_region_On_r1_Running_running_main_CheckKeyPress1 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMC_main_region_On_r1_Running_running_main_CheckKeyPress1
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	91 81       	ldd	r25, Z+1	; 0x01
    1834:	9f 30       	cpi	r25, 0x0F	; 15
    1836:	19 f0       	breq	.+6      	; 0x183e <sMC_isActive+0x130>
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	08 95       	ret
			);
		default: return bool_false;
    183c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    183e:	08 95       	ret

00001840 <sMCIfaceKEYPAD_raise_key_pressed>:



void sMCIfaceKEYPAD_raise_key_pressed(SMC* handle) {
	handle->ifaceKEYPAD.key_pressed_raised = bool_true;
    1840:	21 e0       	ldi	r18, 0x01	; 1
    1842:	fc 01       	movw	r30, r24
    1844:	25 87       	std	Z+13, r18	; 0x0d
}
    1846:	08 95       	ret

00001848 <sMCIfaceKEYPAD_get_key>:


sc_integer sMCIfaceKEYPAD_get_key(SMC* handle) {
    1848:	fc 01       	movw	r30, r24
	return handle->ifaceKEYPAD.key;
    184a:	64 81       	ldd	r22, Z+4	; 0x04
    184c:	75 81       	ldd	r23, Z+5	; 0x05
}
    184e:	86 81       	ldd	r24, Z+6	; 0x06
    1850:	97 81       	ldd	r25, Z+7	; 0x07
    1852:	08 95       	ret

00001854 <sMCIfaceKEYPAD_set_key>:
void sMCIfaceKEYPAD_set_key(SMC* handle, sc_integer value) {
	handle->ifaceKEYPAD.key = value;
    1854:	fc 01       	movw	r30, r24
    1856:	44 83       	std	Z+4, r20	; 0x04
    1858:	55 83       	std	Z+5, r21	; 0x05
    185a:	66 83       	std	Z+6, r22	; 0x06
    185c:	77 83       	std	Z+7, r23	; 0x07
}
    185e:	08 95       	ret

00001860 <sMCIfaceKEYPAD_get_lastkey>:
sc_integer sMCIfaceKEYPAD_get_lastkey(SMC* handle) {
    1860:	fc 01       	movw	r30, r24
	return handle->ifaceKEYPAD.lastkey;
    1862:	60 85       	ldd	r22, Z+8	; 0x08
    1864:	71 85       	ldd	r23, Z+9	; 0x09
}
    1866:	82 85       	ldd	r24, Z+10	; 0x0a
    1868:	93 85       	ldd	r25, Z+11	; 0x0b
    186a:	08 95       	ret

0000186c <sMCIfaceKEYPAD_set_lastkey>:
void sMCIfaceKEYPAD_set_lastkey(SMC* handle, sc_integer value) {
	handle->ifaceKEYPAD.lastkey = value;
    186c:	fc 01       	movw	r30, r24
    186e:	40 87       	std	Z+8, r20	; 0x08
    1870:	51 87       	std	Z+9, r21	; 0x09
    1872:	62 87       	std	Z+10, r22	; 0x0a
    1874:	73 87       	std	Z+11, r23	; 0x0b
}
    1876:	08 95       	ret

00001878 <sMCIfaceKEYPAD_get_key_down>:
sc_boolean sMCIfaceKEYPAD_get_key_down(SMC* handle) {
	return handle->ifaceKEYPAD.key_down;
}
    1878:	fc 01       	movw	r30, r24
    187a:	84 85       	ldd	r24, Z+12	; 0x0c
    187c:	08 95       	ret

0000187e <sMCIfaceKEYPAD_set_key_down>:
void sMCIfaceKEYPAD_set_key_down(SMC* handle, sc_boolean value) {
	handle->ifaceKEYPAD.key_down = value;
    187e:	fc 01       	movw	r30, r24
    1880:	64 87       	std	Z+12, r22	; 0x0c
}
    1882:	08 95       	ret

00001884 <sMCIfaceUART_raise_dataRecieved>:
void sMCIfaceUART_raise_dataRecieved(SMC* handle) {
	handle->ifaceUART.DataRecieved_raised = bool_true;
    1884:	21 e0       	ldi	r18, 0x01	; 1
    1886:	fc 01       	movw	r30, r24
    1888:	22 8b       	std	Z+18, r18	; 0x12
}
    188a:	08 95       	ret

0000188c <sMCIfaceUART_get_data>:


sc_string sMCIfaceUART_get_data(SMC* handle) {
    188c:	fc 01       	movw	r30, r24
	return handle->ifaceUART.data;
}
    188e:	86 85       	ldd	r24, Z+14	; 0x0e
    1890:	97 85       	ldd	r25, Z+15	; 0x0f
    1892:	08 95       	ret

00001894 <sMCIfaceUART_set_data>:
void sMCIfaceUART_set_data(SMC* handle, sc_string value) {
	handle->ifaceUART.data = value;
    1894:	fc 01       	movw	r30, r24
    1896:	77 87       	std	Z+15, r23	; 0x0f
    1898:	66 87       	std	Z+14, r22	; 0x0e
}
    189a:	08 95       	ret

0000189c <sMCIfaceUART_get_lastdata>:
sc_string sMCIfaceUART_get_lastdata(SMC* handle) {
    189c:	fc 01       	movw	r30, r24
	return handle->ifaceUART.lastdata;
}
    189e:	80 89       	ldd	r24, Z+16	; 0x10
    18a0:	91 89       	ldd	r25, Z+17	; 0x11
    18a2:	08 95       	ret

000018a4 <sMCIfaceUART_set_lastdata>:
void sMCIfaceUART_set_lastdata(SMC* handle, sc_string value) {
	handle->ifaceUART.lastdata = value;
    18a4:	fc 01       	movw	r30, r24
    18a6:	71 8b       	std	Z+17, r23	; 0x11
    18a8:	60 8b       	std	Z+16, r22	; 0x10
}
    18aa:	08 95       	ret

000018ac <sMCIfaceRF_raise_dataRecieved>:
void sMCIfaceRF_raise_dataRecieved(SMC* handle) {
	handle->ifaceRF.DataRecieved_raised = bool_true;
    18ac:	21 e0       	ldi	r18, 0x01	; 1
    18ae:	fc 01       	movw	r30, r24
    18b0:	25 a3       	lds	r18, 0x55
}
    18b2:	08 95       	ret

000018b4 <sMCIfaceRF_get_data>:


sc_string sMCIfaceRF_get_data(SMC* handle) {
    18b4:	fc 01       	movw	r30, r24
	return handle->ifaceRF.data;
}
    18b6:	83 89       	ldd	r24, Z+19	; 0x13
    18b8:	94 89       	ldd	r25, Z+20	; 0x14
    18ba:	08 95       	ret

000018bc <sMCIfaceRF_set_data>:
void sMCIfaceRF_set_data(SMC* handle, sc_string value) {
	handle->ifaceRF.data = value;
    18bc:	fc 01       	movw	r30, r24
    18be:	74 8b       	std	Z+20, r23	; 0x14
    18c0:	63 8b       	std	Z+19, r22	; 0x13
}
    18c2:	08 95       	ret

000018c4 <sMCIfaceRF_get_lastdata>:
sc_string sMCIfaceRF_get_lastdata(SMC* handle) {
    18c4:	fc 01       	movw	r30, r24
	return handle->ifaceRF.lastdata;
}
    18c6:	85 89       	ldd	r24, Z+21	; 0x15
    18c8:	96 89       	ldd	r25, Z+22	; 0x16
    18ca:	08 95       	ret

000018cc <sMCIfaceRF_set_lastdata>:
void sMCIfaceRF_set_lastdata(SMC* handle, sc_string value) {
	handle->ifaceRF.lastdata = value;
    18cc:	fc 01       	movw	r30, r24
    18ce:	76 8b       	std	Z+22, r23	; 0x16
    18d0:	65 8b       	std	Z+21, r22	; 0x15
}
    18d2:	08 95       	ret

000018d4 <sMCIfaceRF_get_result>:
sc_boolean sMCIfaceRF_get_result(SMC* handle) {
	return handle->ifaceRF.result;
}
    18d4:	fc 01       	movw	r30, r24
    18d6:	87 89       	ldd	r24, Z+23	; 0x17
    18d8:	08 95       	ret

000018da <sMCIfaceRF_set_result>:
void sMCIfaceRF_set_result(SMC* handle, sc_boolean value) {
	handle->ifaceRF.result = value;
    18da:	fc 01       	movw	r30, r24
    18dc:	67 8b       	std	Z+23, r22	; 0x17
}
    18de:	08 95       	ret

000018e0 <sMCIfaceRF_get_resultCheck>:
sc_boolean sMCIfaceRF_get_resultCheck(SMC* handle) {
	return handle->ifaceRF.resultCheck;
}
    18e0:	fc 01       	movw	r30, r24
    18e2:	80 8d       	ldd	r24, Z+24	; 0x18
    18e4:	08 95       	ret

000018e6 <sMCIfaceRF_set_resultCheck>:
void sMCIfaceRF_set_resultCheck(SMC* handle, sc_boolean value) {
	handle->ifaceRF.resultCheck = value;
    18e6:	fc 01       	movw	r30, r24
    18e8:	60 8f       	std	Z+24, r22	; 0x18
}
    18ea:	08 95       	ret

000018ec <sMCIfaceRF_get_retry>:
sc_integer sMCIfaceRF_get_retry(SMC* handle) {
    18ec:	fc 01       	movw	r30, r24
	return handle->ifaceRF.retry;
    18ee:	61 8d       	ldd	r22, Z+25	; 0x19
    18f0:	72 8d       	ldd	r23, Z+26	; 0x1a
}
    18f2:	83 8d       	ldd	r24, Z+27	; 0x1b
    18f4:	94 8d       	ldd	r25, Z+28	; 0x1c
    18f6:	08 95       	ret

000018f8 <sMCIfaceRF_set_retry>:
void sMCIfaceRF_set_retry(SMC* handle, sc_integer value) {
	handle->ifaceRF.retry = value;
    18f8:	fc 01       	movw	r30, r24
    18fa:	41 8f       	std	Z+25, r20	; 0x19
    18fc:	52 8f       	std	Z+26, r21	; 0x1a
    18fe:	63 8f       	std	Z+27, r22	; 0x1b
    1900:	74 8f       	std	Z+28, r23	; 0x1c
}
    1902:	08 95       	ret

00001904 <sMCIfaceRF_get_retryCheck>:
sc_integer sMCIfaceRF_get_retryCheck(SMC* handle) {
    1904:	fc 01       	movw	r30, r24
	return handle->ifaceRF.retryCheck;
    1906:	65 8d       	ldd	r22, Z+29	; 0x1d
    1908:	76 8d       	ldd	r23, Z+30	; 0x1e
}
    190a:	87 8d       	ldd	r24, Z+31	; 0x1f
    190c:	90 a1       	lds	r25, 0x40
    190e:	08 95       	ret

00001910 <sMCIfaceRF_set_retryCheck>:
void sMCIfaceRF_set_retryCheck(SMC* handle, sc_integer value) {
	handle->ifaceRF.retryCheck = value;
    1910:	fc 01       	movw	r30, r24
    1912:	45 8f       	std	Z+29, r20	; 0x1d
    1914:	56 8f       	std	Z+30, r21	; 0x1e
    1916:	67 8f       	std	Z+31, r22	; 0x1f
    1918:	70 a3       	lds	r23, 0x50
}
    191a:	08 95       	ret

0000191c <sMCIfaceRF_get_iD>:
sc_integer sMCIfaceRF_get_iD(SMC* handle) {
    191c:	fc 01       	movw	r30, r24
	return handle->ifaceRF.ID;
    191e:	61 a1       	lds	r22, 0x41
    1920:	72 a1       	lds	r23, 0x42
}
    1922:	83 a1       	lds	r24, 0x43
    1924:	94 a1       	lds	r25, 0x44
    1926:	08 95       	ret

00001928 <sMCIfaceRF_set_iD>:
void sMCIfaceRF_set_iD(SMC* handle, sc_integer value) {
	handle->ifaceRF.ID = value;
    1928:	fc 01       	movw	r30, r24
    192a:	41 a3       	lds	r20, 0x51
    192c:	52 a3       	lds	r21, 0x52
    192e:	63 a3       	lds	r22, 0x53
    1930:	74 a3       	lds	r23, 0x54
}
    1932:	08 95       	ret

00001934 <sMCIfaceDISH_get_iD>:


sc_integer sMCIfaceDISH_get_iD(SMC* handle) {
    1934:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.ID;
    1936:	66 a1       	lds	r22, 0x46
    1938:	77 a1       	lds	r23, 0x47
}
    193a:	80 a5       	lds	r24, 0x60
    193c:	91 a5       	lds	r25, 0x61
    193e:	08 95       	ret

00001940 <sMCIfaceDISH_set_iD>:
void sMCIfaceDISH_set_iD(SMC* handle, sc_integer value) {
	handle->ifaceDISH.ID = value;
    1940:	fc 01       	movw	r30, r24
    1942:	46 a3       	lds	r20, 0x56
    1944:	57 a3       	lds	r21, 0x57
    1946:	60 a7       	lds	r22, 0x70
    1948:	71 a7       	lds	r23, 0x71
}
    194a:	08 95       	ret

0000194c <sMCIfaceDISH_get_amount>:
sc_integer sMCIfaceDISH_get_amount(SMC* handle) {
    194c:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.amount;
    194e:	62 a5       	lds	r22, 0x62
    1950:	73 a5       	lds	r23, 0x63
}
    1952:	84 a5       	lds	r24, 0x64
    1954:	95 a5       	lds	r25, 0x65
    1956:	08 95       	ret

00001958 <sMCIfaceDISH_set_amount>:
void sMCIfaceDISH_set_amount(SMC* handle, sc_integer value) {
	handle->ifaceDISH.amount = value;
    1958:	fc 01       	movw	r30, r24
    195a:	42 a7       	lds	r20, 0x72
    195c:	53 a7       	lds	r21, 0x73
    195e:	64 a7       	lds	r22, 0x74
    1960:	75 a7       	lds	r23, 0x75
}
    1962:	08 95       	ret

00001964 <sMCIfaceDISH_get_pos>:
sc_integer sMCIfaceDISH_get_pos(SMC* handle) {
    1964:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.pos;
    1966:	66 a5       	lds	r22, 0x66
    1968:	77 a5       	lds	r23, 0x67
}
    196a:	80 a9       	sts	0x40, r24
    196c:	91 a9       	sts	0x41, r25
    196e:	08 95       	ret

00001970 <sMCIfaceDISH_set_pos>:
void sMCIfaceDISH_set_pos(SMC* handle, sc_integer value) {
	handle->ifaceDISH.pos = value;
    1970:	fc 01       	movw	r30, r24
    1972:	46 a7       	lds	r20, 0x76
    1974:	57 a7       	lds	r21, 0x77
    1976:	60 ab       	sts	0x50, r22
    1978:	71 ab       	sts	0x51, r23
}
    197a:	08 95       	ret

0000197c <sMCIface_raise_switchOff>:
void sMCIface_raise_switchOff(SMC* handle) {
	handle->iface.switchOff_raised = bool_true;
    197c:	fc 01       	movw	r30, r24
    197e:	ed 5b       	subi	r30, 0xBD	; 189
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	80 83       	st	Z, r24
}
    1986:	08 95       	ret

00001988 <sMCIface_raise_switchOn>:
void sMCIface_raise_switchOn(SMC* handle) {
	handle->iface.switchOn_raised = bool_true;
    1988:	fc 01       	movw	r30, r24
    198a:	ec 5b       	subi	r30, 0xBC	; 188
    198c:	ff 4f       	sbci	r31, 0xFF	; 255
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	80 83       	st	Z, r24
}
    1992:	08 95       	ret

00001994 <sMCIface_get_lightOn>:


sc_boolean sMCIface_get_lightOn(SMC* handle) {
	return handle->iface.lightOn;
}
    1994:	fc 01       	movw	r30, r24
    1996:	82 a9       	sts	0x42, r24
    1998:	08 95       	ret

0000199a <sMCIface_set_lightOn>:
void sMCIface_set_lightOn(SMC* handle, sc_boolean value) {
	handle->iface.lightOn = value;
    199a:	fc 01       	movw	r30, r24
    199c:	62 ab       	sts	0x52, r22
}
    199e:	08 95       	ret

000019a0 <sMCIface_get_menuId>:
sc_integer sMCIface_get_menuId(SMC* handle) {
    19a0:	fc 01       	movw	r30, r24
	return handle->iface.menuId;
    19a2:	63 a9       	sts	0x43, r22
    19a4:	74 a9       	sts	0x44, r23
}
    19a6:	85 a9       	sts	0x45, r24
    19a8:	96 a9       	sts	0x46, r25
    19aa:	08 95       	ret

000019ac <sMCIface_set_menuId>:
void sMCIface_set_menuId(SMC* handle, sc_integer value) {
	handle->iface.menuId = value;
    19ac:	fc 01       	movw	r30, r24
    19ae:	43 ab       	sts	0x53, r20
    19b0:	54 ab       	sts	0x54, r21
    19b2:	65 ab       	sts	0x55, r22
    19b4:	76 ab       	sts	0x56, r23
}
    19b6:	08 95       	ret

000019b8 <sMCIface_get_tableId>:
sc_integer sMCIface_get_tableId(SMC* handle) {
    19b8:	fc 01       	movw	r30, r24
	return handle->iface.tableId;
    19ba:	67 a9       	sts	0x47, r22
    19bc:	70 ad       	sts	0x60, r23
}
    19be:	81 ad       	sts	0x61, r24
    19c0:	92 ad       	sts	0x62, r25
    19c2:	08 95       	ret

000019c4 <sMCIface_set_tableId>:
void sMCIface_set_tableId(SMC* handle, sc_integer value) {
	handle->iface.tableId = value;
    19c4:	fc 01       	movw	r30, r24
    19c6:	47 ab       	sts	0x57, r20
    19c8:	50 af       	sts	0x70, r21
    19ca:	61 af       	sts	0x71, r22
    19cc:	72 af       	sts	0x72, r23
}
    19ce:	08 95       	ret

000019d0 <sMCIface_get_requestId>:
sc_integer sMCIface_get_requestId(SMC* handle) {
    19d0:	fc 01       	movw	r30, r24
	return handle->iface.requestId;
    19d2:	63 ad       	sts	0x63, r22
    19d4:	74 ad       	sts	0x64, r23
}
    19d6:	85 ad       	sts	0x65, r24
    19d8:	96 ad       	sts	0x66, r25
    19da:	08 95       	ret

000019dc <sMCIface_set_requestId>:
void sMCIface_set_requestId(SMC* handle, sc_integer value) {
	handle->iface.requestId = value;
    19dc:	fc 01       	movw	r30, r24
    19de:	43 af       	sts	0x73, r20
    19e0:	54 af       	sts	0x74, r21
    19e2:	65 af       	sts	0x75, r22
    19e4:	76 af       	sts	0x76, r23
}
    19e6:	08 95       	ret

000019e8 <sMCIface_get_listId>:
sc_integer sMCIface_get_listId(SMC* handle) {
	return handle->iface.listId;
    19e8:	fc 01       	movw	r30, r24
    19ea:	ff 96       	adiw	r30, 0x3f	; 63
    19ec:	60 81       	ld	r22, Z
    19ee:	71 81       	ldd	r23, Z+1	; 0x01
}
    19f0:	82 81       	ldd	r24, Z+2	; 0x02
    19f2:	93 81       	ldd	r25, Z+3	; 0x03
    19f4:	08 95       	ret

000019f6 <sMCIface_set_listId>:
void sMCIface_set_listId(SMC* handle, sc_integer value) {
	handle->iface.listId = value;
    19f6:	fc 01       	movw	r30, r24
    19f8:	ff 96       	adiw	r30, 0x3f	; 63
    19fa:	40 83       	st	Z, r20
    19fc:	51 83       	std	Z+1, r21	; 0x01
    19fe:	62 83       	std	Z+2, r22	; 0x02
    1a00:	73 83       	std	Z+3, r23	; 0x03
}
    1a02:	08 95       	ret

00001a04 <spi_init>:

/*
 * spi initialize
 */
void spi_init() {
    SPI_DDR &= ~((1<<SPI_MOSI) | (1<<SPI_MISO) | (1<<SPI_SS) | (1<<SPI_SCK)); //input
    1a04:	87 b3       	in	r24, 0x17	; 23
    1a06:	80 7f       	andi	r24, 0xF0	; 240
    1a08:	87 bb       	out	0x17, r24	; 23
    SPI_DDR |= ((1<<SPI_MOSI) | (1<<SPI_SS) | (1<<SPI_SCK)); //output
    1a0a:	87 b3       	in	r24, 0x17	; 23
    1a0c:	87 60       	ori	r24, 0x07	; 7
    1a0e:	87 bb       	out	0x17, r24	; 23

    SPCR = ((1<<SPE)|               // SPI Enable
    1a10:	81 e5       	ldi	r24, 0x51	; 81
    1a12:	8d b9       	out	0x0d, r24	; 13
            (1<<MSTR)|              // Master/Slave select
            (0<<SPR1)|(1<<SPR0)|    // SPI Clock Rate
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR = (1<<SPI2X); // Double SPI Speed Bit
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	8e b9       	out	0x0e, r24	; 14
}
    1a18:	08 95       	ret

00001a1a <spi_writereadbyte>:

/*
 * spi write one byte and read it back
 */
uint8_t spi_writereadbyte(uint8_t data) {
    SPDR = data;
    1a1a:	8f b9       	out	0x0f, r24	; 15
    while((SPSR & (1<<SPIF)) == 0);
    1a1c:	77 9b       	sbis	0x0e, 7	; 14
    1a1e:	fe cf       	rjmp	.-4      	; 0x1a1c <spi_writereadbyte+0x2>
    return SPDR;
    1a20:	8f b1       	in	r24, 0x0f	; 15
}
    1a22:	08 95       	ret

00001a24 <TimerInit>:

TimeEvent tmrEvent[10];
int tmrCount=0;

void TimerInit() {
	TCCR0 = 0b011; //CS02=0, CS01=1, CS00=0, chon Prescaler=64
    1a24:	83 e0       	ldi	r24, 0x03	; 3
    1a26:	83 bf       	out	0x33, r24	; 51
	//Xung chip la 8MHZ -> 1 xung mat 1us/8 = 0.125 us
	//Prescaler=64, kich 256 lan moi tang 1 lan trong bo dem Timer-> Ton 8us
	//Vay, de Timer ngat moi 1ms, ta can: 1000/8=125 lan dem.
	//Ma Timer ngat khi bo dem toi 255, ta can set gia tri ban dau cho bo dem la: 255-125+1=131
	TCNT0=131;
    1a28:	83 e8       	ldi	r24, 0x83	; 131
    1a2a:	82 bf       	out	0x32, r24	; 50
	TIMSK=(1<<TOIE0); //Cho phep ngat khi cho tran o T/C0
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	87 bf       	out	0x37, r24	; 55
	tmrCount=0;
    1a30:	10 92 0d 02 	sts	0x020D, r1
    1a34:	10 92 0c 02 	sts	0x020C, r1
	sei();
    1a38:	78 94       	sei
}
    1a3a:	08 95       	ret

00001a3c <TimerSet>:

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
    1a3c:	cf 92       	push	r12
    1a3e:	df 92       	push	r13
    1a40:	ef 92       	push	r14
    1a42:	ff 92       	push	r15
    1a44:	cf 93       	push	r28
    1a46:	df 93       	push	r29
    1a48:	ec 01       	movw	r28, r24
    1a4a:	6a 01       	movw	r12, r20
    1a4c:	7b 01       	movw	r14, r22
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
    1a4e:	40 91 0c 02 	lds	r20, 0x020C
    1a52:	50 91 0d 02 	lds	r21, 0x020D
    1a56:	14 16       	cp	r1, r20
    1a58:	15 06       	cpc	r1, r21
    1a5a:	e4 f4       	brge	.+56     	; 0x1a94 <TimerSet+0x58>
    1a5c:	e4 e2       	ldi	r30, 0x24	; 36
    1a5e:	f2 e0       	ldi	r31, 0x02	; 2
    1a60:	df 01       	movw	r26, r30
    1a62:	16 96       	adiw	r26, 0x06	; 6
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
	sei();
}

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
    1a68:	70 e0       	ldi	r23, 0x00	; 0
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
			check=true;
			tmrEvent[i].count=0;
			tmrEvent[i].max=max;
			tmrEvent[i].enabled=true;
    1a6a:	61 e0       	ldi	r22, 0x01	; 1

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
    1a6c:	80 81       	ld	r24, Z
    1a6e:	91 81       	ldd	r25, Z+1	; 0x01
    1a70:	8c 17       	cp	r24, r28
    1a72:	9d 07       	cpc	r25, r29
    1a74:	31 f4       	brne	.+12     	; 0x1a82 <TimerSet+0x46>
			check=true;
			tmrEvent[i].count=0;
    1a76:	13 82       	std	Z+3, r1	; 0x03
    1a78:	12 82       	std	Z+2, r1	; 0x02
			tmrEvent[i].max=max;
    1a7a:	d5 82       	std	Z+5, r13	; 0x05
    1a7c:	c4 82       	std	Z+4, r12	; 0x04
			tmrEvent[i].enabled=true;
    1a7e:	6c 93       	st	X, r22
//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
			check=true;
    1a80:	76 2f       	mov	r23, r22
}

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
    1a82:	2f 5f       	subi	r18, 0xFF	; 255
    1a84:	3f 4f       	sbci	r19, 0xFF	; 255
    1a86:	37 96       	adiw	r30, 0x07	; 7
    1a88:	17 96       	adiw	r26, 0x07	; 7
    1a8a:	24 17       	cp	r18, r20
    1a8c:	35 07       	cpc	r19, r21
    1a8e:	74 f3       	brlt	.-36     	; 0x1a6c <TimerSet+0x30>
			tmrEvent[i].count=0;
			tmrEvent[i].max=max;
			tmrEvent[i].enabled=true;
		}
	}
	if (!check) {
    1a90:	77 23       	and	r23, r23
    1a92:	c9 f4       	brne	.+50     	; 0x1ac6 <TimerSet+0x8a>
		tmrEvent[tmrCount].EventId=evenId;
    1a94:	fa 01       	movw	r30, r20
    1a96:	ee 0f       	add	r30, r30
    1a98:	ff 1f       	adc	r31, r31
    1a9a:	ee 0f       	add	r30, r30
    1a9c:	ff 1f       	adc	r31, r31
    1a9e:	ee 0f       	add	r30, r30
    1aa0:	ff 1f       	adc	r31, r31
    1aa2:	e4 1b       	sub	r30, r20
    1aa4:	f5 0b       	sbc	r31, r21
    1aa6:	ec 5d       	subi	r30, 0xDC	; 220
    1aa8:	fd 4f       	sbci	r31, 0xFD	; 253
    1aaa:	d1 83       	std	Z+1, r29	; 0x01
    1aac:	c0 83       	st	Z, r28
		tmrEvent[tmrCount].count=0;
    1aae:	13 82       	std	Z+3, r1	; 0x03
    1ab0:	12 82       	std	Z+2, r1	; 0x02
		tmrEvent[tmrCount].max=max;
    1ab2:	d5 82       	std	Z+5, r13	; 0x05
    1ab4:	c4 82       	std	Z+4, r12	; 0x04
		tmrEvent[tmrCount].enabled=true;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	86 83       	std	Z+6, r24	; 0x06
		tmrCount++;
    1aba:	4f 5f       	subi	r20, 0xFF	; 255
    1abc:	5f 4f       	sbci	r21, 0xFF	; 255
    1abe:	50 93 0d 02 	sts	0x020D, r21
    1ac2:	40 93 0c 02 	sts	0x020C, r20
	}
}
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	ff 90       	pop	r15
    1acc:	ef 90       	pop	r14
    1ace:	df 90       	pop	r13
    1ad0:	cf 90       	pop	r12
    1ad2:	08 95       	ret

00001ad4 <TimerUnSet>:

void TimerUnSet(const sc_eventid evenId) {
    1ad4:	dc 01       	movw	r26, r24
	for (int i=0;i<tmrCount;i++) {
    1ad6:	60 91 0c 02 	lds	r22, 0x020C
    1ada:	70 91 0d 02 	lds	r23, 0x020D
    1ade:	16 16       	cp	r1, r22
    1ae0:	17 06       	cpc	r1, r23
    1ae2:	6c f5       	brge	.+90     	; 0x1b3e <TimerUnSet+0x6a>
		if (tmrEvent[i].EventId==evenId) {
    1ae4:	80 91 24 02 	lds	r24, 0x0224
    1ae8:	90 91 25 02 	lds	r25, 0x0225
    1aec:	8a 17       	cp	r24, r26
    1aee:	9b 07       	cpc	r25, r27
    1af0:	e9 f4       	brne	.+58     	; 0x1b2c <TimerUnSet+0x58>
    1af2:	0a c0       	rjmp	.+20     	; 0x1b08 <TimerUnSet+0x34>
    1af4:	29 5f       	subi	r18, 0xF9	; 249
    1af6:	3f 4f       	sbci	r19, 0xFF	; 255
		tmrEvent[tmrCount].enabled=true;
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
    1af8:	f9 01       	movw	r30, r18
    1afa:	37 97       	sbiw	r30, 0x07	; 7
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
    1afc:	80 81       	ld	r24, Z
    1afe:	91 81       	ldd	r25, Z+1	; 0x01
    1b00:	8a 17       	cp	r24, r26
    1b02:	9b 07       	cpc	r25, r27
    1b04:	b9 f4       	brne	.+46     	; 0x1b34 <TimerUnSet+0x60>
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <TimerUnSet+0x38>
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
	for (int i=0;i<tmrCount;i++) {
    1b08:	40 e0       	ldi	r20, 0x00	; 0
    1b0a:	50 e0       	ldi	r21, 0x00	; 0
		if (tmrEvent[i].EventId==evenId) {
			tmrEvent[i].count=0;
    1b0c:	fa 01       	movw	r30, r20
    1b0e:	ee 0f       	add	r30, r30
    1b10:	ff 1f       	adc	r31, r31
    1b12:	ee 0f       	add	r30, r30
    1b14:	ff 1f       	adc	r31, r31
    1b16:	ee 0f       	add	r30, r30
    1b18:	ff 1f       	adc	r31, r31
    1b1a:	e4 1b       	sub	r30, r20
    1b1c:	f5 0b       	sbc	r31, r21
    1b1e:	ec 5d       	subi	r30, 0xDC	; 220
    1b20:	fd 4f       	sbci	r31, 0xFD	; 253
    1b22:	13 82       	std	Z+3, r1	; 0x03
    1b24:	12 82       	std	Z+2, r1	; 0x02
			tmrEvent[i].enabled=false;
    1b26:	16 82       	std	Z+6, r1	; 0x06
			*(sc_boolean*)evenId=bool_false;
    1b28:	1c 92       	st	X, r1
			return;
    1b2a:	08 95       	ret
    1b2c:	2b e2       	ldi	r18, 0x2B	; 43
    1b2e:	32 e0       	ldi	r19, 0x02	; 2
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
	for (int i=0;i<tmrCount;i++) {
    1b30:	40 e0       	ldi	r20, 0x00	; 0
    1b32:	50 e0       	ldi	r21, 0x00	; 0
    1b34:	4f 5f       	subi	r20, 0xFF	; 255
    1b36:	5f 4f       	sbci	r21, 0xFF	; 255
    1b38:	46 17       	cp	r20, r22
    1b3a:	57 07       	cpc	r21, r23
    1b3c:	d9 f6       	brne	.-74     	; 0x1af4 <TimerUnSet+0x20>
    1b3e:	08 95       	ret

00001b40 <TimerCheck>:
			return;
		}
	}
}

void TimerCheck(SMC* handle) {
    1b40:	cf 92       	push	r12
    1b42:	df 92       	push	r13
    1b44:	ef 92       	push	r14
    1b46:	ff 92       	push	r15
    1b48:	0f 93       	push	r16
    1b4a:	1f 93       	push	r17
    1b4c:	cf 93       	push	r28
    1b4e:	df 93       	push	r29
    1b50:	6c 01       	movw	r12, r24
	for (int i=0;i<tmrCount;i++) {
    1b52:	80 91 0c 02 	lds	r24, 0x020C
    1b56:	90 91 0d 02 	lds	r25, 0x020D
    1b5a:	18 16       	cp	r1, r24
    1b5c:	19 06       	cpc	r1, r25
    1b5e:	94 f5       	brge	.+100    	; 0x1bc4 <TimerCheck+0x84>
    1b60:	ca e2       	ldi	r28, 0x2A	; 42
    1b62:	d2 e0       	ldi	r29, 0x02	; 2
    1b64:	8e 01       	movw	r16, r28
    1b66:	06 50       	subi	r16, 0x06	; 6
    1b68:	10 40       	sbci	r17, 0x00	; 0
    1b6a:	ee 24       	eor	r14, r14
    1b6c:	ff 24       	eor	r15, r15
		if (tmrEvent[i].enabled) {
    1b6e:	88 81       	ld	r24, Y
    1b70:	88 23       	and	r24, r24
    1b72:	d9 f0       	breq	.+54     	; 0x1baa <TimerCheck+0x6a>
			tmrEvent[i].count++;
    1b74:	d8 01       	movw	r26, r16
    1b76:	12 96       	adiw	r26, 0x02	; 2
    1b78:	8d 91       	ld	r24, X+
    1b7a:	9c 91       	ld	r25, X
    1b7c:	13 97       	sbiw	r26, 0x03	; 3
    1b7e:	01 96       	adiw	r24, 0x01	; 1
    1b80:	13 96       	adiw	r26, 0x03	; 3
    1b82:	9c 93       	st	X, r25
    1b84:	8e 93       	st	-X, r24
    1b86:	12 97       	sbiw	r26, 0x02	; 2
			if (tmrEvent[i].count==tmrEvent[i].max) {
    1b88:	14 96       	adiw	r26, 0x04	; 4
    1b8a:	2d 91       	ld	r18, X+
    1b8c:	3c 91       	ld	r19, X
    1b8e:	15 97       	sbiw	r26, 0x05	; 5
    1b90:	82 17       	cp	r24, r18
    1b92:	93 07       	cpc	r25, r19
    1b94:	51 f4       	brne	.+20     	; 0x1baa <TimerCheck+0x6a>
				tmrEvent[i].count=0;
    1b96:	13 96       	adiw	r26, 0x03	; 3
    1b98:	1c 92       	st	X, r1
    1b9a:	1e 92       	st	-X, r1
    1b9c:	12 97       	sbiw	r26, 0x02	; 2
				tmrEvent[i].enabled=false;
    1b9e:	18 82       	st	Y, r1
				sMC_raiseTimeEvent(handle,tmrEvent[i].EventId);
    1ba0:	6d 91       	ld	r22, X+
    1ba2:	7c 91       	ld	r23, X
    1ba4:	c6 01       	movw	r24, r12
    1ba6:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <sMC_raiseTimeEvent>
		}
	}
}

void TimerCheck(SMC* handle) {
	for (int i=0;i<tmrCount;i++) {
    1baa:	08 94       	sec
    1bac:	e1 1c       	adc	r14, r1
    1bae:	f1 1c       	adc	r15, r1
    1bb0:	27 96       	adiw	r28, 0x07	; 7
    1bb2:	09 5f       	subi	r16, 0xF9	; 249
    1bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb6:	80 91 0c 02 	lds	r24, 0x020C
    1bba:	90 91 0d 02 	lds	r25, 0x020D
    1bbe:	e8 16       	cp	r14, r24
    1bc0:	f9 06       	cpc	r15, r25
    1bc2:	ac f2       	brlt	.-86     	; 0x1b6e <TimerCheck+0x2e>
				tmrEvent[i].enabled=false;
				sMC_raiseTimeEvent(handle,tmrEvent[i].EventId);
			}
		}
	}
}
    1bc4:	df 91       	pop	r29
    1bc6:	cf 91       	pop	r28
    1bc8:	1f 91       	pop	r17
    1bca:	0f 91       	pop	r16
    1bcc:	ff 90       	pop	r15
    1bce:	ef 90       	pop	r14
    1bd0:	df 90       	pop	r13
    1bd2:	cf 90       	pop	r12
    1bd4:	08 95       	ret

00001bd6 <TimerClear>:

void TimerClear() {
	free(tmrEvent);
    1bd6:	84 e2       	ldi	r24, 0x24	; 36
    1bd8:	92 e0       	ldi	r25, 0x02	; 2
    1bda:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <free>
	tmrCount=0;
    1bde:	10 92 0d 02 	sts	0x020D, r1
    1be2:	10 92 0c 02 	sts	0x020C, r1
    1be6:	08 95       	ret

00001be8 <UART_Init>:
unsigned char* u_Data;

void UART_Init( unsigned int ubrr )
{
	/* Set baud rate */
	UBRR1H = (unsigned char)(ubrr>>8);
    1be8:	90 93 98 00 	sts	0x0098, r25
	UBRR1L = (unsigned char)ubrr;
    1bec:	80 93 99 00 	sts	0x0099, r24
	/* Enable receiver, transmitter and interrup when receive finish */
	UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1);
    1bf0:	88 e9       	ldi	r24, 0x98	; 152
    1bf2:	80 93 9a 00 	sts	0x009A, r24
	/* Set frame format: 8data, 1stop bit */
	UCSR1C = (1<<UCSZ10)|(1<<UCSZ11);
    1bf6:	86 e0       	ldi	r24, 0x06	; 6
    1bf8:	80 93 9d 00 	sts	0x009D, r24
	sei();
    1bfc:	78 94       	sei
}
    1bfe:	08 95       	ret

00001c00 <uart_putc>:

void uart_putc(unsigned char chr) {
	/* Wait for empty transmit buffer */
	while ( !( UCSR1A & (1<<UDRE1)) );
    1c00:	eb e9       	ldi	r30, 0x9B	; 155
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	90 81       	ld	r25, Z
    1c06:	95 ff       	sbrs	r25, 5
    1c08:	fd cf       	rjmp	.-6      	; 0x1c04 <uart_putc+0x4>
	/* Put data into buffer, sends the data */
	UDR1 = chr;
    1c0a:	80 93 9c 00 	sts	0x009C, r24
}
    1c0e:	08 95       	ret

00001c10 <uart_puts>:

void uart_puts(const char* s){
    1c10:	cf 93       	push	r28
    1c12:	df 93       	push	r29
    1c14:	ec 01       	movw	r28, r24
	while(*s != '\0'){
    1c16:	88 81       	ld	r24, Y
    1c18:	88 23       	and	r24, r24
    1c1a:	31 f0       	breq	.+12     	; 0x1c28 <uart_puts+0x18>
	while ( !( UCSR1A & (1<<UDRE1)) );
	/* Put data into buffer, sends the data */
	UDR1 = chr;
}

void uart_puts(const char* s){
    1c1c:	21 96       	adiw	r28, 0x01	; 1
	while(*s != '\0'){
		uart_putc(*s);
    1c1e:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <uart_putc>
	/* Put data into buffer, sends the data */
	UDR1 = chr;
}

void uart_puts(const char* s){
	while(*s != '\0'){
    1c22:	89 91       	ld	r24, Y+
    1c24:	88 23       	and	r24, r24
    1c26:	d9 f7       	brne	.-10     	; 0x1c1e <uart_puts+0xe>
		uart_putc(*s);
		s++;
	}
	uart_putc('\0');
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <uart_putc>
}
    1c2e:	df 91       	pop	r29
    1c30:	cf 91       	pop	r28
    1c32:	08 95       	ret

00001c34 <uart_getc>:
unsigned char rc[32];
int rc_count=0;
void uart_getc(SMC* handle,unsigned char chr) {
	if (chr!='\0') {
    1c34:	66 23       	and	r22, r22
    1c36:	71 f0       	breq	.+28     	; 0x1c54 <uart_getc+0x20>
		rc[rc_count]=chr;
    1c38:	80 91 0e 02 	lds	r24, 0x020E
    1c3c:	90 91 0f 02 	lds	r25, 0x020F
    1c40:	fc 01       	movw	r30, r24
    1c42:	e6 59       	subi	r30, 0x96	; 150
    1c44:	fd 4f       	sbci	r31, 0xFD	; 253
    1c46:	60 83       	st	Z, r22
		rc_count++;
    1c48:	01 96       	adiw	r24, 0x01	; 1
    1c4a:	90 93 0f 02 	sts	0x020F, r25
    1c4e:	80 93 0e 02 	sts	0x020E, r24
    1c52:	08 95       	ret
	} else {
		rc[rc_count]='\0';
    1c54:	6a e6       	ldi	r22, 0x6A	; 106
    1c56:	72 e0       	ldi	r23, 0x02	; 2
    1c58:	e0 91 0e 02 	lds	r30, 0x020E
    1c5c:	f0 91 0f 02 	lds	r31, 0x020F
    1c60:	e6 0f       	add	r30, r22
    1c62:	f7 1f       	adc	r31, r23
    1c64:	10 82       	st	Z, r1
		sMCIfaceRF_set_data(handle,rc);
    1c66:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <sMCIfaceRF_set_data>
		rc_count=0;
    1c6a:	10 92 0f 02 	sts	0x020F, r1
    1c6e:	10 92 0e 02 	sts	0x020E, r1
    1c72:	08 95       	ret

00001c74 <__udivmodqi4>:
    1c74:	99 1b       	sub	r25, r25
    1c76:	79 e0       	ldi	r23, 0x09	; 9
    1c78:	04 c0       	rjmp	.+8      	; 0x1c82 <__udivmodqi4_ep>

00001c7a <__udivmodqi4_loop>:
    1c7a:	99 1f       	adc	r25, r25
    1c7c:	96 17       	cp	r25, r22
    1c7e:	08 f0       	brcs	.+2      	; 0x1c82 <__udivmodqi4_ep>
    1c80:	96 1b       	sub	r25, r22

00001c82 <__udivmodqi4_ep>:
    1c82:	88 1f       	adc	r24, r24
    1c84:	7a 95       	dec	r23
    1c86:	c9 f7       	brne	.-14     	; 0x1c7a <__udivmodqi4_loop>
    1c88:	80 95       	com	r24
    1c8a:	08 95       	ret

00001c8c <__divmodhi4>:
    1c8c:	97 fb       	bst	r25, 7
    1c8e:	09 2e       	mov	r0, r25
    1c90:	07 26       	eor	r0, r23
    1c92:	0a d0       	rcall	.+20     	; 0x1ca8 <__divmodhi4_neg1>
    1c94:	77 fd       	sbrc	r23, 7
    1c96:	04 d0       	rcall	.+8      	; 0x1ca0 <__divmodhi4_neg2>
    1c98:	0c d0       	rcall	.+24     	; 0x1cb2 <__udivmodhi4>
    1c9a:	06 d0       	rcall	.+12     	; 0x1ca8 <__divmodhi4_neg1>
    1c9c:	00 20       	and	r0, r0
    1c9e:	1a f4       	brpl	.+6      	; 0x1ca6 <__divmodhi4_exit>

00001ca0 <__divmodhi4_neg2>:
    1ca0:	70 95       	com	r23
    1ca2:	61 95       	neg	r22
    1ca4:	7f 4f       	sbci	r23, 0xFF	; 255

00001ca6 <__divmodhi4_exit>:
    1ca6:	08 95       	ret

00001ca8 <__divmodhi4_neg1>:
    1ca8:	f6 f7       	brtc	.-4      	; 0x1ca6 <__divmodhi4_exit>
    1caa:	90 95       	com	r25
    1cac:	81 95       	neg	r24
    1cae:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb0:	08 95       	ret

00001cb2 <__udivmodhi4>:
    1cb2:	aa 1b       	sub	r26, r26
    1cb4:	bb 1b       	sub	r27, r27
    1cb6:	51 e1       	ldi	r21, 0x11	; 17
    1cb8:	07 c0       	rjmp	.+14     	; 0x1cc8 <__udivmodhi4_ep>

00001cba <__udivmodhi4_loop>:
    1cba:	aa 1f       	adc	r26, r26
    1cbc:	bb 1f       	adc	r27, r27
    1cbe:	a6 17       	cp	r26, r22
    1cc0:	b7 07       	cpc	r27, r23
    1cc2:	10 f0       	brcs	.+4      	; 0x1cc8 <__udivmodhi4_ep>
    1cc4:	a6 1b       	sub	r26, r22
    1cc6:	b7 0b       	sbc	r27, r23

00001cc8 <__udivmodhi4_ep>:
    1cc8:	88 1f       	adc	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	5a 95       	dec	r21
    1cce:	a9 f7       	brne	.-22     	; 0x1cba <__udivmodhi4_loop>
    1cd0:	80 95       	com	r24
    1cd2:	90 95       	com	r25
    1cd4:	bc 01       	movw	r22, r24
    1cd6:	cd 01       	movw	r24, r26
    1cd8:	08 95       	ret

00001cda <malloc>:
    1cda:	cf 93       	push	r28
    1cdc:	df 93       	push	r29
    1cde:	ac 01       	movw	r20, r24
    1ce0:	82 30       	cpi	r24, 0x02	; 2
    1ce2:	91 05       	cpc	r25, r1
    1ce4:	10 f4       	brcc	.+4      	; 0x1cea <malloc+0x10>
    1ce6:	42 e0       	ldi	r20, 0x02	; 2
    1ce8:	50 e0       	ldi	r21, 0x00	; 0
    1cea:	e0 91 8e 02 	lds	r30, 0x028E
    1cee:	f0 91 8f 02 	lds	r31, 0x028F
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	a0 e0       	ldi	r26, 0x00	; 0
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	24 c0       	rjmp	.+72     	; 0x1d44 <malloc+0x6a>
    1cfc:	80 81       	ld	r24, Z
    1cfe:	91 81       	ldd	r25, Z+1	; 0x01
    1d00:	84 17       	cp	r24, r20
    1d02:	95 07       	cpc	r25, r21
    1d04:	d0 f0       	brcs	.+52     	; 0x1d3a <malloc+0x60>
    1d06:	84 17       	cp	r24, r20
    1d08:	95 07       	cpc	r25, r21
    1d0a:	71 f4       	brne	.+28     	; 0x1d28 <malloc+0x4e>
    1d0c:	82 81       	ldd	r24, Z+2	; 0x02
    1d0e:	93 81       	ldd	r25, Z+3	; 0x03
    1d10:	10 97       	sbiw	r26, 0x00	; 0
    1d12:	29 f0       	breq	.+10     	; 0x1d1e <malloc+0x44>
    1d14:	13 96       	adiw	r26, 0x03	; 3
    1d16:	9c 93       	st	X, r25
    1d18:	8e 93       	st	-X, r24
    1d1a:	12 97       	sbiw	r26, 0x02	; 2
    1d1c:	2c c0       	rjmp	.+88     	; 0x1d76 <malloc+0x9c>
    1d1e:	90 93 8f 02 	sts	0x028F, r25
    1d22:	80 93 8e 02 	sts	0x028E, r24
    1d26:	27 c0       	rjmp	.+78     	; 0x1d76 <malloc+0x9c>
    1d28:	21 15       	cp	r18, r1
    1d2a:	31 05       	cpc	r19, r1
    1d2c:	19 f0       	breq	.+6      	; 0x1d34 <malloc+0x5a>
    1d2e:	82 17       	cp	r24, r18
    1d30:	93 07       	cpc	r25, r19
    1d32:	18 f4       	brcc	.+6      	; 0x1d3a <malloc+0x60>
    1d34:	9c 01       	movw	r18, r24
    1d36:	bd 01       	movw	r22, r26
    1d38:	ef 01       	movw	r28, r30
    1d3a:	92 81       	ldd	r25, Z+2	; 0x02
    1d3c:	83 81       	ldd	r24, Z+3	; 0x03
    1d3e:	df 01       	movw	r26, r30
    1d40:	e9 2f       	mov	r30, r25
    1d42:	f8 2f       	mov	r31, r24
    1d44:	30 97       	sbiw	r30, 0x00	; 0
    1d46:	d1 f6       	brne	.-76     	; 0x1cfc <malloc+0x22>
    1d48:	21 15       	cp	r18, r1
    1d4a:	31 05       	cpc	r19, r1
    1d4c:	f9 f0       	breq	.+62     	; 0x1d8c <malloc+0xb2>
    1d4e:	c9 01       	movw	r24, r18
    1d50:	84 1b       	sub	r24, r20
    1d52:	95 0b       	sbc	r25, r21
    1d54:	84 30       	cpi	r24, 0x04	; 4
    1d56:	91 05       	cpc	r25, r1
    1d58:	80 f4       	brcc	.+32     	; 0x1d7a <malloc+0xa0>
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d5e:	61 15       	cp	r22, r1
    1d60:	71 05       	cpc	r23, r1
    1d62:	21 f0       	breq	.+8      	; 0x1d6c <malloc+0x92>
    1d64:	fb 01       	movw	r30, r22
    1d66:	93 83       	std	Z+3, r25	; 0x03
    1d68:	82 83       	std	Z+2, r24	; 0x02
    1d6a:	04 c0       	rjmp	.+8      	; 0x1d74 <malloc+0x9a>
    1d6c:	90 93 8f 02 	sts	0x028F, r25
    1d70:	80 93 8e 02 	sts	0x028E, r24
    1d74:	fe 01       	movw	r30, r28
    1d76:	32 96       	adiw	r30, 0x02	; 2
    1d78:	42 c0       	rjmp	.+132    	; 0x1dfe <malloc+0x124>
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	e8 0f       	add	r30, r24
    1d7e:	f9 1f       	adc	r31, r25
    1d80:	41 93       	st	Z+, r20
    1d82:	51 93       	st	Z+, r21
    1d84:	02 97       	sbiw	r24, 0x02	; 2
    1d86:	99 83       	std	Y+1, r25	; 0x01
    1d88:	88 83       	st	Y, r24
    1d8a:	39 c0       	rjmp	.+114    	; 0x1dfe <malloc+0x124>
    1d8c:	80 91 8c 02 	lds	r24, 0x028C
    1d90:	90 91 8d 02 	lds	r25, 0x028D
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	41 f4       	brne	.+16     	; 0x1da8 <malloc+0xce>
    1d98:	80 91 08 02 	lds	r24, 0x0208
    1d9c:	90 91 09 02 	lds	r25, 0x0209
    1da0:	90 93 8d 02 	sts	0x028D, r25
    1da4:	80 93 8c 02 	sts	0x028C, r24
    1da8:	20 91 06 02 	lds	r18, 0x0206
    1dac:	30 91 07 02 	lds	r19, 0x0207
    1db0:	21 15       	cp	r18, r1
    1db2:	31 05       	cpc	r19, r1
    1db4:	41 f4       	brne	.+16     	; 0x1dc6 <malloc+0xec>
    1db6:	2d b7       	in	r18, 0x3d	; 61
    1db8:	3e b7       	in	r19, 0x3e	; 62
    1dba:	80 91 0a 02 	lds	r24, 0x020A
    1dbe:	90 91 0b 02 	lds	r25, 0x020B
    1dc2:	28 1b       	sub	r18, r24
    1dc4:	39 0b       	sbc	r19, r25
    1dc6:	e0 91 8c 02 	lds	r30, 0x028C
    1dca:	f0 91 8d 02 	lds	r31, 0x028D
    1dce:	e2 17       	cp	r30, r18
    1dd0:	f3 07       	cpc	r31, r19
    1dd2:	98 f4       	brcc	.+38     	; 0x1dfa <malloc+0x120>
    1dd4:	2e 1b       	sub	r18, r30
    1dd6:	3f 0b       	sbc	r19, r31
    1dd8:	24 17       	cp	r18, r20
    1dda:	35 07       	cpc	r19, r21
    1ddc:	70 f0       	brcs	.+28     	; 0x1dfa <malloc+0x120>
    1dde:	ca 01       	movw	r24, r20
    1de0:	02 96       	adiw	r24, 0x02	; 2
    1de2:	28 17       	cp	r18, r24
    1de4:	39 07       	cpc	r19, r25
    1de6:	48 f0       	brcs	.+18     	; 0x1dfa <malloc+0x120>
    1de8:	8e 0f       	add	r24, r30
    1dea:	9f 1f       	adc	r25, r31
    1dec:	90 93 8d 02 	sts	0x028D, r25
    1df0:	80 93 8c 02 	sts	0x028C, r24
    1df4:	41 93       	st	Z+, r20
    1df6:	51 93       	st	Z+, r21
    1df8:	02 c0       	rjmp	.+4      	; 0x1dfe <malloc+0x124>
    1dfa:	e0 e0       	ldi	r30, 0x00	; 0
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	cf 01       	movw	r24, r30
    1e00:	df 91       	pop	r29
    1e02:	cf 91       	pop	r28
    1e04:	08 95       	ret

00001e06 <free>:
    1e06:	0f 93       	push	r16
    1e08:	1f 93       	push	r17
    1e0a:	cf 93       	push	r28
    1e0c:	df 93       	push	r29
    1e0e:	9c 01       	movw	r18, r24
    1e10:	00 97       	sbiw	r24, 0x00	; 0
    1e12:	09 f4       	brne	.+2      	; 0x1e16 <free+0x10>
    1e14:	8c c0       	rjmp	.+280    	; 0x1f2e <free+0x128>
    1e16:	dc 01       	movw	r26, r24
    1e18:	12 97       	sbiw	r26, 0x02	; 2
    1e1a:	13 96       	adiw	r26, 0x03	; 3
    1e1c:	1c 92       	st	X, r1
    1e1e:	1e 92       	st	-X, r1
    1e20:	12 97       	sbiw	r26, 0x02	; 2
    1e22:	60 91 8e 02 	lds	r22, 0x028E
    1e26:	70 91 8f 02 	lds	r23, 0x028F
    1e2a:	61 15       	cp	r22, r1
    1e2c:	71 05       	cpc	r23, r1
    1e2e:	89 f4       	brne	.+34     	; 0x1e52 <free+0x4c>
    1e30:	8d 91       	ld	r24, X+
    1e32:	9c 91       	ld	r25, X
    1e34:	11 97       	sbiw	r26, 0x01	; 1
    1e36:	82 0f       	add	r24, r18
    1e38:	93 1f       	adc	r25, r19
    1e3a:	20 91 8c 02 	lds	r18, 0x028C
    1e3e:	30 91 8d 02 	lds	r19, 0x028D
    1e42:	28 17       	cp	r18, r24
    1e44:	39 07       	cpc	r19, r25
    1e46:	69 f5       	brne	.+90     	; 0x1ea2 <free+0x9c>
    1e48:	b0 93 8d 02 	sts	0x028D, r27
    1e4c:	a0 93 8c 02 	sts	0x028C, r26
    1e50:	6e c0       	rjmp	.+220    	; 0x1f2e <free+0x128>
    1e52:	fb 01       	movw	r30, r22
    1e54:	40 e0       	ldi	r20, 0x00	; 0
    1e56:	50 e0       	ldi	r21, 0x00	; 0
    1e58:	01 c0       	rjmp	.+2      	; 0x1e5c <free+0x56>
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	ea 17       	cp	r30, r26
    1e5e:	fb 07       	cpc	r31, r27
    1e60:	30 f4       	brcc	.+12     	; 0x1e6e <free+0x68>
    1e62:	82 81       	ldd	r24, Z+2	; 0x02
    1e64:	93 81       	ldd	r25, Z+3	; 0x03
    1e66:	af 01       	movw	r20, r30
    1e68:	00 97       	sbiw	r24, 0x00	; 0
    1e6a:	b9 f7       	brne	.-18     	; 0x1e5a <free+0x54>
    1e6c:	1f c0       	rjmp	.+62     	; 0x1eac <free+0xa6>
    1e6e:	e9 01       	movw	r28, r18
    1e70:	22 97       	sbiw	r28, 0x02	; 2
    1e72:	fb 83       	std	Y+3, r31	; 0x03
    1e74:	ea 83       	std	Y+2, r30	; 0x02
    1e76:	08 81       	ld	r16, Y
    1e78:	19 81       	ldd	r17, Y+1	; 0x01
    1e7a:	c9 01       	movw	r24, r18
    1e7c:	80 0f       	add	r24, r16
    1e7e:	91 1f       	adc	r25, r17
    1e80:	8e 17       	cp	r24, r30
    1e82:	9f 07       	cpc	r25, r31
    1e84:	59 f4       	brne	.+22     	; 0x1e9c <free+0x96>
    1e86:	80 81       	ld	r24, Z
    1e88:	91 81       	ldd	r25, Z+1	; 0x01
    1e8a:	80 0f       	add	r24, r16
    1e8c:	91 1f       	adc	r25, r17
    1e8e:	02 96       	adiw	r24, 0x02	; 2
    1e90:	99 83       	std	Y+1, r25	; 0x01
    1e92:	88 83       	st	Y, r24
    1e94:	82 81       	ldd	r24, Z+2	; 0x02
    1e96:	93 81       	ldd	r25, Z+3	; 0x03
    1e98:	9b 83       	std	Y+3, r25	; 0x03
    1e9a:	8a 83       	std	Y+2, r24	; 0x02
    1e9c:	41 15       	cp	r20, r1
    1e9e:	51 05       	cpc	r21, r1
    1ea0:	29 f4       	brne	.+10     	; 0x1eac <free+0xa6>
    1ea2:	b0 93 8f 02 	sts	0x028F, r27
    1ea6:	a0 93 8e 02 	sts	0x028E, r26
    1eaa:	41 c0       	rjmp	.+130    	; 0x1f2e <free+0x128>
    1eac:	fa 01       	movw	r30, r20
    1eae:	b3 83       	std	Z+3, r27	; 0x03
    1eb0:	a2 83       	std	Z+2, r26	; 0x02
    1eb2:	c1 91       	ld	r28, Z+
    1eb4:	d1 91       	ld	r29, Z+
    1eb6:	ec 0f       	add	r30, r28
    1eb8:	fd 1f       	adc	r31, r29
    1eba:	ae 17       	cp	r26, r30
    1ebc:	bf 07       	cpc	r27, r31
    1ebe:	81 f4       	brne	.+32     	; 0x1ee0 <free+0xda>
    1ec0:	f9 01       	movw	r30, r18
    1ec2:	92 91       	ld	r25, -Z
    1ec4:	82 91       	ld	r24, -Z
    1ec6:	8c 0f       	add	r24, r28
    1ec8:	9d 1f       	adc	r25, r29
    1eca:	02 96       	adiw	r24, 0x02	; 2
    1ecc:	da 01       	movw	r26, r20
    1ece:	11 96       	adiw	r26, 0x01	; 1
    1ed0:	9c 93       	st	X, r25
    1ed2:	8e 93       	st	-X, r24
    1ed4:	82 81       	ldd	r24, Z+2	; 0x02
    1ed6:	93 81       	ldd	r25, Z+3	; 0x03
    1ed8:	13 96       	adiw	r26, 0x03	; 3
    1eda:	9c 93       	st	X, r25
    1edc:	8e 93       	st	-X, r24
    1ede:	12 97       	sbiw	r26, 0x02	; 2
    1ee0:	e0 e0       	ldi	r30, 0x00	; 0
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	02 c0       	rjmp	.+4      	; 0x1eea <free+0xe4>
    1ee6:	fb 01       	movw	r30, r22
    1ee8:	bc 01       	movw	r22, r24
    1eea:	db 01       	movw	r26, r22
    1eec:	12 96       	adiw	r26, 0x02	; 2
    1eee:	8d 91       	ld	r24, X+
    1ef0:	9c 91       	ld	r25, X
    1ef2:	13 97       	sbiw	r26, 0x03	; 3
    1ef4:	00 97       	sbiw	r24, 0x00	; 0
    1ef6:	b9 f7       	brne	.-18     	; 0x1ee6 <free+0xe0>
    1ef8:	cb 01       	movw	r24, r22
    1efa:	02 96       	adiw	r24, 0x02	; 2
    1efc:	2d 91       	ld	r18, X+
    1efe:	3c 91       	ld	r19, X
    1f00:	11 97       	sbiw	r26, 0x01	; 1
    1f02:	82 0f       	add	r24, r18
    1f04:	93 1f       	adc	r25, r19
    1f06:	20 91 8c 02 	lds	r18, 0x028C
    1f0a:	30 91 8d 02 	lds	r19, 0x028D
    1f0e:	28 17       	cp	r18, r24
    1f10:	39 07       	cpc	r19, r25
    1f12:	69 f4       	brne	.+26     	; 0x1f2e <free+0x128>
    1f14:	30 97       	sbiw	r30, 0x00	; 0
    1f16:	29 f4       	brne	.+10     	; 0x1f22 <free+0x11c>
    1f18:	10 92 8f 02 	sts	0x028F, r1
    1f1c:	10 92 8e 02 	sts	0x028E, r1
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <free+0x120>
    1f22:	13 82       	std	Z+3, r1	; 0x03
    1f24:	12 82       	std	Z+2, r1	; 0x02
    1f26:	70 93 8d 02 	sts	0x028D, r23
    1f2a:	60 93 8c 02 	sts	0x028C, r22
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	1f 91       	pop	r17
    1f34:	0f 91       	pop	r16
    1f36:	08 95       	ret

00001f38 <sprintf>:
    1f38:	0f 93       	push	r16
    1f3a:	1f 93       	push	r17
    1f3c:	cf 93       	push	r28
    1f3e:	df 93       	push	r29
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
    1f44:	2e 97       	sbiw	r28, 0x0e	; 14
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	f8 94       	cli
    1f4a:	de bf       	out	0x3e, r29	; 62
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	cd bf       	out	0x3d, r28	; 61
    1f50:	0d 89       	ldd	r16, Y+21	; 0x15
    1f52:	1e 89       	ldd	r17, Y+22	; 0x16
    1f54:	86 e0       	ldi	r24, 0x06	; 6
    1f56:	8c 83       	std	Y+4, r24	; 0x04
    1f58:	1a 83       	std	Y+2, r17	; 0x02
    1f5a:	09 83       	std	Y+1, r16	; 0x01
    1f5c:	8f ef       	ldi	r24, 0xFF	; 255
    1f5e:	9f e7       	ldi	r25, 0x7F	; 127
    1f60:	9e 83       	std	Y+6, r25	; 0x06
    1f62:	8d 83       	std	Y+5, r24	; 0x05
    1f64:	ae 01       	movw	r20, r28
    1f66:	47 5e       	subi	r20, 0xE7	; 231
    1f68:	5f 4f       	sbci	r21, 0xFF	; 255
    1f6a:	ce 01       	movw	r24, r28
    1f6c:	01 96       	adiw	r24, 0x01	; 1
    1f6e:	6f 89       	ldd	r22, Y+23	; 0x17
    1f70:	78 8d       	ldd	r23, Y+24	; 0x18
    1f72:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <vfprintf>
    1f76:	ef 81       	ldd	r30, Y+7	; 0x07
    1f78:	f8 85       	ldd	r31, Y+8	; 0x08
    1f7a:	e0 0f       	add	r30, r16
    1f7c:	f1 1f       	adc	r31, r17
    1f7e:	10 82       	st	Z, r1
    1f80:	2e 96       	adiw	r28, 0x0e	; 14
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	cd bf       	out	0x3d, r28	; 61
    1f8c:	df 91       	pop	r29
    1f8e:	cf 91       	pop	r28
    1f90:	1f 91       	pop	r17
    1f92:	0f 91       	pop	r16
    1f94:	08 95       	ret

00001f96 <vfprintf>:
    1f96:	2f 92       	push	r2
    1f98:	3f 92       	push	r3
    1f9a:	4f 92       	push	r4
    1f9c:	5f 92       	push	r5
    1f9e:	6f 92       	push	r6
    1fa0:	7f 92       	push	r7
    1fa2:	8f 92       	push	r8
    1fa4:	9f 92       	push	r9
    1fa6:	af 92       	push	r10
    1fa8:	bf 92       	push	r11
    1faa:	cf 92       	push	r12
    1fac:	df 92       	push	r13
    1fae:	ef 92       	push	r14
    1fb0:	ff 92       	push	r15
    1fb2:	0f 93       	push	r16
    1fb4:	1f 93       	push	r17
    1fb6:	cf 93       	push	r28
    1fb8:	df 93       	push	r29
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	2d 97       	sbiw	r28, 0x0d	; 13
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	f8 94       	cli
    1fc4:	de bf       	out	0x3e, r29	; 62
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	cd bf       	out	0x3d, r28	; 61
    1fca:	3c 01       	movw	r6, r24
    1fcc:	7d 87       	std	Y+13, r23	; 0x0d
    1fce:	6c 87       	std	Y+12, r22	; 0x0c
    1fd0:	5a 01       	movw	r10, r20
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	17 82       	std	Z+7, r1	; 0x07
    1fd6:	16 82       	std	Z+6, r1	; 0x06
    1fd8:	83 81       	ldd	r24, Z+3	; 0x03
    1fda:	81 ff       	sbrs	r24, 1
    1fdc:	c8 c1       	rjmp	.+912    	; 0x236e <vfprintf+0x3d8>
    1fde:	2e 01       	movw	r4, r28
    1fe0:	08 94       	sec
    1fe2:	41 1c       	adc	r4, r1
    1fe4:	51 1c       	adc	r5, r1
    1fe6:	f3 01       	movw	r30, r6
    1fe8:	93 81       	ldd	r25, Z+3	; 0x03
    1fea:	ec 85       	ldd	r30, Y+12	; 0x0c
    1fec:	fd 85       	ldd	r31, Y+13	; 0x0d
    1fee:	93 fd       	sbrc	r25, 3
    1ff0:	85 91       	lpm	r24, Z+
    1ff2:	93 ff       	sbrs	r25, 3
    1ff4:	81 91       	ld	r24, Z+
    1ff6:	fd 87       	std	Y+13, r31	; 0x0d
    1ff8:	ec 87       	std	Y+12, r30	; 0x0c
    1ffa:	88 23       	and	r24, r24
    1ffc:	09 f4       	brne	.+2      	; 0x2000 <vfprintf+0x6a>
    1ffe:	b3 c1       	rjmp	.+870    	; 0x2366 <vfprintf+0x3d0>
    2000:	85 32       	cpi	r24, 0x25	; 37
    2002:	41 f4       	brne	.+16     	; 0x2014 <vfprintf+0x7e>
    2004:	93 fd       	sbrc	r25, 3
    2006:	85 91       	lpm	r24, Z+
    2008:	93 ff       	sbrs	r25, 3
    200a:	81 91       	ld	r24, Z+
    200c:	fd 87       	std	Y+13, r31	; 0x0d
    200e:	ec 87       	std	Y+12, r30	; 0x0c
    2010:	85 32       	cpi	r24, 0x25	; 37
    2012:	29 f4       	brne	.+10     	; 0x201e <vfprintf+0x88>
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	b3 01       	movw	r22, r6
    2018:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <fputc>
    201c:	e4 cf       	rjmp	.-56     	; 0x1fe6 <vfprintf+0x50>
    201e:	ff 24       	eor	r15, r15
    2020:	ee 24       	eor	r14, r14
    2022:	10 e0       	ldi	r17, 0x00	; 0
    2024:	10 32       	cpi	r17, 0x20	; 32
    2026:	b0 f4       	brcc	.+44     	; 0x2054 <vfprintf+0xbe>
    2028:	8b 32       	cpi	r24, 0x2B	; 43
    202a:	69 f0       	breq	.+26     	; 0x2046 <vfprintf+0xb0>
    202c:	8c 32       	cpi	r24, 0x2C	; 44
    202e:	28 f4       	brcc	.+10     	; 0x203a <vfprintf+0xa4>
    2030:	80 32       	cpi	r24, 0x20	; 32
    2032:	51 f0       	breq	.+20     	; 0x2048 <vfprintf+0xb2>
    2034:	83 32       	cpi	r24, 0x23	; 35
    2036:	71 f4       	brne	.+28     	; 0x2054 <vfprintf+0xbe>
    2038:	0b c0       	rjmp	.+22     	; 0x2050 <vfprintf+0xba>
    203a:	8d 32       	cpi	r24, 0x2D	; 45
    203c:	39 f0       	breq	.+14     	; 0x204c <vfprintf+0xb6>
    203e:	80 33       	cpi	r24, 0x30	; 48
    2040:	49 f4       	brne	.+18     	; 0x2054 <vfprintf+0xbe>
    2042:	11 60       	ori	r17, 0x01	; 1
    2044:	2c c0       	rjmp	.+88     	; 0x209e <vfprintf+0x108>
    2046:	12 60       	ori	r17, 0x02	; 2
    2048:	14 60       	ori	r17, 0x04	; 4
    204a:	29 c0       	rjmp	.+82     	; 0x209e <vfprintf+0x108>
    204c:	18 60       	ori	r17, 0x08	; 8
    204e:	27 c0       	rjmp	.+78     	; 0x209e <vfprintf+0x108>
    2050:	10 61       	ori	r17, 0x10	; 16
    2052:	25 c0       	rjmp	.+74     	; 0x209e <vfprintf+0x108>
    2054:	17 fd       	sbrc	r17, 7
    2056:	2e c0       	rjmp	.+92     	; 0x20b4 <vfprintf+0x11e>
    2058:	28 2f       	mov	r18, r24
    205a:	20 53       	subi	r18, 0x30	; 48
    205c:	2a 30       	cpi	r18, 0x0A	; 10
    205e:	98 f4       	brcc	.+38     	; 0x2086 <vfprintf+0xf0>
    2060:	16 ff       	sbrs	r17, 6
    2062:	08 c0       	rjmp	.+16     	; 0x2074 <vfprintf+0xde>
    2064:	8f 2d       	mov	r24, r15
    2066:	88 0f       	add	r24, r24
    2068:	f8 2e       	mov	r15, r24
    206a:	ff 0c       	add	r15, r15
    206c:	ff 0c       	add	r15, r15
    206e:	f8 0e       	add	r15, r24
    2070:	f2 0e       	add	r15, r18
    2072:	15 c0       	rjmp	.+42     	; 0x209e <vfprintf+0x108>
    2074:	8e 2d       	mov	r24, r14
    2076:	88 0f       	add	r24, r24
    2078:	e8 2e       	mov	r14, r24
    207a:	ee 0c       	add	r14, r14
    207c:	ee 0c       	add	r14, r14
    207e:	e8 0e       	add	r14, r24
    2080:	e2 0e       	add	r14, r18
    2082:	10 62       	ori	r17, 0x20	; 32
    2084:	0c c0       	rjmp	.+24     	; 0x209e <vfprintf+0x108>
    2086:	8e 32       	cpi	r24, 0x2E	; 46
    2088:	21 f4       	brne	.+8      	; 0x2092 <vfprintf+0xfc>
    208a:	16 fd       	sbrc	r17, 6
    208c:	6c c1       	rjmp	.+728    	; 0x2366 <vfprintf+0x3d0>
    208e:	10 64       	ori	r17, 0x40	; 64
    2090:	06 c0       	rjmp	.+12     	; 0x209e <vfprintf+0x108>
    2092:	8c 36       	cpi	r24, 0x6C	; 108
    2094:	11 f4       	brne	.+4      	; 0x209a <vfprintf+0x104>
    2096:	10 68       	ori	r17, 0x80	; 128
    2098:	02 c0       	rjmp	.+4      	; 0x209e <vfprintf+0x108>
    209a:	88 36       	cpi	r24, 0x68	; 104
    209c:	59 f4       	brne	.+22     	; 0x20b4 <vfprintf+0x11e>
    209e:	ec 85       	ldd	r30, Y+12	; 0x0c
    20a0:	fd 85       	ldd	r31, Y+13	; 0x0d
    20a2:	93 fd       	sbrc	r25, 3
    20a4:	85 91       	lpm	r24, Z+
    20a6:	93 ff       	sbrs	r25, 3
    20a8:	81 91       	ld	r24, Z+
    20aa:	fd 87       	std	Y+13, r31	; 0x0d
    20ac:	ec 87       	std	Y+12, r30	; 0x0c
    20ae:	88 23       	and	r24, r24
    20b0:	09 f0       	breq	.+2      	; 0x20b4 <vfprintf+0x11e>
    20b2:	b8 cf       	rjmp	.-144    	; 0x2024 <vfprintf+0x8e>
    20b4:	98 2f       	mov	r25, r24
    20b6:	95 54       	subi	r25, 0x45	; 69
    20b8:	93 30       	cpi	r25, 0x03	; 3
    20ba:	18 f0       	brcs	.+6      	; 0x20c2 <vfprintf+0x12c>
    20bc:	90 52       	subi	r25, 0x20	; 32
    20be:	93 30       	cpi	r25, 0x03	; 3
    20c0:	38 f4       	brcc	.+14     	; 0x20d0 <vfprintf+0x13a>
    20c2:	24 e0       	ldi	r18, 0x04	; 4
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	a2 0e       	add	r10, r18
    20c8:	b3 1e       	adc	r11, r19
    20ca:	3f e3       	ldi	r19, 0x3F	; 63
    20cc:	39 83       	std	Y+1, r19	; 0x01
    20ce:	0f c0       	rjmp	.+30     	; 0x20ee <vfprintf+0x158>
    20d0:	83 36       	cpi	r24, 0x63	; 99
    20d2:	31 f0       	breq	.+12     	; 0x20e0 <vfprintf+0x14a>
    20d4:	83 37       	cpi	r24, 0x73	; 115
    20d6:	81 f0       	breq	.+32     	; 0x20f8 <vfprintf+0x162>
    20d8:	83 35       	cpi	r24, 0x53	; 83
    20da:	09 f0       	breq	.+2      	; 0x20de <vfprintf+0x148>
    20dc:	5a c0       	rjmp	.+180    	; 0x2192 <vfprintf+0x1fc>
    20de:	22 c0       	rjmp	.+68     	; 0x2124 <vfprintf+0x18e>
    20e0:	f5 01       	movw	r30, r10
    20e2:	80 81       	ld	r24, Z
    20e4:	89 83       	std	Y+1, r24	; 0x01
    20e6:	22 e0       	ldi	r18, 0x02	; 2
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	a2 0e       	add	r10, r18
    20ec:	b3 1e       	adc	r11, r19
    20ee:	21 e0       	ldi	r18, 0x01	; 1
    20f0:	c2 2e       	mov	r12, r18
    20f2:	d1 2c       	mov	r13, r1
    20f4:	42 01       	movw	r8, r4
    20f6:	14 c0       	rjmp	.+40     	; 0x2120 <vfprintf+0x18a>
    20f8:	92 e0       	ldi	r25, 0x02	; 2
    20fa:	29 2e       	mov	r2, r25
    20fc:	31 2c       	mov	r3, r1
    20fe:	2a 0c       	add	r2, r10
    2100:	3b 1c       	adc	r3, r11
    2102:	f5 01       	movw	r30, r10
    2104:	80 80       	ld	r8, Z
    2106:	91 80       	ldd	r9, Z+1	; 0x01
    2108:	16 ff       	sbrs	r17, 6
    210a:	03 c0       	rjmp	.+6      	; 0x2112 <vfprintf+0x17c>
    210c:	6f 2d       	mov	r22, r15
    210e:	70 e0       	ldi	r23, 0x00	; 0
    2110:	02 c0       	rjmp	.+4      	; 0x2116 <vfprintf+0x180>
    2112:	6f ef       	ldi	r22, 0xFF	; 255
    2114:	7f ef       	ldi	r23, 0xFF	; 255
    2116:	c4 01       	movw	r24, r8
    2118:	0e 94 dd 11 	call	0x23ba	; 0x23ba <strnlen>
    211c:	6c 01       	movw	r12, r24
    211e:	51 01       	movw	r10, r2
    2120:	1f 77       	andi	r17, 0x7F	; 127
    2122:	15 c0       	rjmp	.+42     	; 0x214e <vfprintf+0x1b8>
    2124:	82 e0       	ldi	r24, 0x02	; 2
    2126:	28 2e       	mov	r2, r24
    2128:	31 2c       	mov	r3, r1
    212a:	2a 0c       	add	r2, r10
    212c:	3b 1c       	adc	r3, r11
    212e:	f5 01       	movw	r30, r10
    2130:	80 80       	ld	r8, Z
    2132:	91 80       	ldd	r9, Z+1	; 0x01
    2134:	16 ff       	sbrs	r17, 6
    2136:	03 c0       	rjmp	.+6      	; 0x213e <vfprintf+0x1a8>
    2138:	6f 2d       	mov	r22, r15
    213a:	70 e0       	ldi	r23, 0x00	; 0
    213c:	02 c0       	rjmp	.+4      	; 0x2142 <vfprintf+0x1ac>
    213e:	6f ef       	ldi	r22, 0xFF	; 255
    2140:	7f ef       	ldi	r23, 0xFF	; 255
    2142:	c4 01       	movw	r24, r8
    2144:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <strnlen_P>
    2148:	6c 01       	movw	r12, r24
    214a:	10 68       	ori	r17, 0x80	; 128
    214c:	51 01       	movw	r10, r2
    214e:	13 fd       	sbrc	r17, 3
    2150:	1c c0       	rjmp	.+56     	; 0x218a <vfprintf+0x1f4>
    2152:	06 c0       	rjmp	.+12     	; 0x2160 <vfprintf+0x1ca>
    2154:	80 e2       	ldi	r24, 0x20	; 32
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	b3 01       	movw	r22, r6
    215a:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <fputc>
    215e:	ea 94       	dec	r14
    2160:	8e 2d       	mov	r24, r14
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	c8 16       	cp	r12, r24
    2166:	d9 06       	cpc	r13, r25
    2168:	a8 f3       	brcs	.-22     	; 0x2154 <vfprintf+0x1be>
    216a:	0f c0       	rjmp	.+30     	; 0x218a <vfprintf+0x1f4>
    216c:	f4 01       	movw	r30, r8
    216e:	17 fd       	sbrc	r17, 7
    2170:	85 91       	lpm	r24, Z+
    2172:	17 ff       	sbrs	r17, 7
    2174:	81 91       	ld	r24, Z+
    2176:	4f 01       	movw	r8, r30
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	b3 01       	movw	r22, r6
    217c:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <fputc>
    2180:	e1 10       	cpse	r14, r1
    2182:	ea 94       	dec	r14
    2184:	08 94       	sec
    2186:	c1 08       	sbc	r12, r1
    2188:	d1 08       	sbc	r13, r1
    218a:	c1 14       	cp	r12, r1
    218c:	d1 04       	cpc	r13, r1
    218e:	71 f7       	brne	.-36     	; 0x216c <vfprintf+0x1d6>
    2190:	e7 c0       	rjmp	.+462    	; 0x2360 <vfprintf+0x3ca>
    2192:	84 36       	cpi	r24, 0x64	; 100
    2194:	11 f0       	breq	.+4      	; 0x219a <vfprintf+0x204>
    2196:	89 36       	cpi	r24, 0x69	; 105
    2198:	51 f5       	brne	.+84     	; 0x21ee <vfprintf+0x258>
    219a:	f5 01       	movw	r30, r10
    219c:	17 ff       	sbrs	r17, 7
    219e:	07 c0       	rjmp	.+14     	; 0x21ae <vfprintf+0x218>
    21a0:	80 81       	ld	r24, Z
    21a2:	91 81       	ldd	r25, Z+1	; 0x01
    21a4:	a2 81       	ldd	r26, Z+2	; 0x02
    21a6:	b3 81       	ldd	r27, Z+3	; 0x03
    21a8:	24 e0       	ldi	r18, 0x04	; 4
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	08 c0       	rjmp	.+16     	; 0x21be <vfprintf+0x228>
    21ae:	80 81       	ld	r24, Z
    21b0:	91 81       	ldd	r25, Z+1	; 0x01
    21b2:	aa 27       	eor	r26, r26
    21b4:	97 fd       	sbrc	r25, 7
    21b6:	a0 95       	com	r26
    21b8:	ba 2f       	mov	r27, r26
    21ba:	22 e0       	ldi	r18, 0x02	; 2
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	a2 0e       	add	r10, r18
    21c0:	b3 1e       	adc	r11, r19
    21c2:	01 2f       	mov	r16, r17
    21c4:	0f 76       	andi	r16, 0x6F	; 111
    21c6:	b7 ff       	sbrs	r27, 7
    21c8:	08 c0       	rjmp	.+16     	; 0x21da <vfprintf+0x244>
    21ca:	b0 95       	com	r27
    21cc:	a0 95       	com	r26
    21ce:	90 95       	com	r25
    21d0:	81 95       	neg	r24
    21d2:	9f 4f       	sbci	r25, 0xFF	; 255
    21d4:	af 4f       	sbci	r26, 0xFF	; 255
    21d6:	bf 4f       	sbci	r27, 0xFF	; 255
    21d8:	00 68       	ori	r16, 0x80	; 128
    21da:	bc 01       	movw	r22, r24
    21dc:	cd 01       	movw	r24, r26
    21de:	a2 01       	movw	r20, r4
    21e0:	2a e0       	ldi	r18, 0x0A	; 10
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	0e 94 14 12 	call	0x2428	; 0x2428 <__ultoa_invert>
    21e8:	d8 2e       	mov	r13, r24
    21ea:	d4 18       	sub	r13, r4
    21ec:	3f c0       	rjmp	.+126    	; 0x226c <vfprintf+0x2d6>
    21ee:	85 37       	cpi	r24, 0x75	; 117
    21f0:	21 f4       	brne	.+8      	; 0x21fa <vfprintf+0x264>
    21f2:	1f 7e       	andi	r17, 0xEF	; 239
    21f4:	2a e0       	ldi	r18, 0x0A	; 10
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	20 c0       	rjmp	.+64     	; 0x223a <vfprintf+0x2a4>
    21fa:	19 7f       	andi	r17, 0xF9	; 249
    21fc:	8f 36       	cpi	r24, 0x6F	; 111
    21fe:	a9 f0       	breq	.+42     	; 0x222a <vfprintf+0x294>
    2200:	80 37       	cpi	r24, 0x70	; 112
    2202:	20 f4       	brcc	.+8      	; 0x220c <vfprintf+0x276>
    2204:	88 35       	cpi	r24, 0x58	; 88
    2206:	09 f0       	breq	.+2      	; 0x220a <vfprintf+0x274>
    2208:	ae c0       	rjmp	.+348    	; 0x2366 <vfprintf+0x3d0>
    220a:	0b c0       	rjmp	.+22     	; 0x2222 <vfprintf+0x28c>
    220c:	80 37       	cpi	r24, 0x70	; 112
    220e:	21 f0       	breq	.+8      	; 0x2218 <vfprintf+0x282>
    2210:	88 37       	cpi	r24, 0x78	; 120
    2212:	09 f0       	breq	.+2      	; 0x2216 <vfprintf+0x280>
    2214:	a8 c0       	rjmp	.+336    	; 0x2366 <vfprintf+0x3d0>
    2216:	01 c0       	rjmp	.+2      	; 0x221a <vfprintf+0x284>
    2218:	10 61       	ori	r17, 0x10	; 16
    221a:	14 ff       	sbrs	r17, 4
    221c:	09 c0       	rjmp	.+18     	; 0x2230 <vfprintf+0x29a>
    221e:	14 60       	ori	r17, 0x04	; 4
    2220:	07 c0       	rjmp	.+14     	; 0x2230 <vfprintf+0x29a>
    2222:	14 ff       	sbrs	r17, 4
    2224:	08 c0       	rjmp	.+16     	; 0x2236 <vfprintf+0x2a0>
    2226:	16 60       	ori	r17, 0x06	; 6
    2228:	06 c0       	rjmp	.+12     	; 0x2236 <vfprintf+0x2a0>
    222a:	28 e0       	ldi	r18, 0x08	; 8
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	05 c0       	rjmp	.+10     	; 0x223a <vfprintf+0x2a4>
    2230:	20 e1       	ldi	r18, 0x10	; 16
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	02 c0       	rjmp	.+4      	; 0x223a <vfprintf+0x2a4>
    2236:	20 e1       	ldi	r18, 0x10	; 16
    2238:	32 e0       	ldi	r19, 0x02	; 2
    223a:	f5 01       	movw	r30, r10
    223c:	17 ff       	sbrs	r17, 7
    223e:	07 c0       	rjmp	.+14     	; 0x224e <vfprintf+0x2b8>
    2240:	60 81       	ld	r22, Z
    2242:	71 81       	ldd	r23, Z+1	; 0x01
    2244:	82 81       	ldd	r24, Z+2	; 0x02
    2246:	93 81       	ldd	r25, Z+3	; 0x03
    2248:	44 e0       	ldi	r20, 0x04	; 4
    224a:	50 e0       	ldi	r21, 0x00	; 0
    224c:	06 c0       	rjmp	.+12     	; 0x225a <vfprintf+0x2c4>
    224e:	60 81       	ld	r22, Z
    2250:	71 81       	ldd	r23, Z+1	; 0x01
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	42 e0       	ldi	r20, 0x02	; 2
    2258:	50 e0       	ldi	r21, 0x00	; 0
    225a:	a4 0e       	add	r10, r20
    225c:	b5 1e       	adc	r11, r21
    225e:	a2 01       	movw	r20, r4
    2260:	0e 94 14 12 	call	0x2428	; 0x2428 <__ultoa_invert>
    2264:	d8 2e       	mov	r13, r24
    2266:	d4 18       	sub	r13, r4
    2268:	01 2f       	mov	r16, r17
    226a:	0f 77       	andi	r16, 0x7F	; 127
    226c:	06 ff       	sbrs	r16, 6
    226e:	09 c0       	rjmp	.+18     	; 0x2282 <vfprintf+0x2ec>
    2270:	0e 7f       	andi	r16, 0xFE	; 254
    2272:	df 14       	cp	r13, r15
    2274:	30 f4       	brcc	.+12     	; 0x2282 <vfprintf+0x2ec>
    2276:	04 ff       	sbrs	r16, 4
    2278:	06 c0       	rjmp	.+12     	; 0x2286 <vfprintf+0x2f0>
    227a:	02 fd       	sbrc	r16, 2
    227c:	04 c0       	rjmp	.+8      	; 0x2286 <vfprintf+0x2f0>
    227e:	0f 7e       	andi	r16, 0xEF	; 239
    2280:	02 c0       	rjmp	.+4      	; 0x2286 <vfprintf+0x2f0>
    2282:	1d 2d       	mov	r17, r13
    2284:	01 c0       	rjmp	.+2      	; 0x2288 <vfprintf+0x2f2>
    2286:	1f 2d       	mov	r17, r15
    2288:	80 2f       	mov	r24, r16
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	04 ff       	sbrs	r16, 4
    228e:	0c c0       	rjmp	.+24     	; 0x22a8 <vfprintf+0x312>
    2290:	fe 01       	movw	r30, r28
    2292:	ed 0d       	add	r30, r13
    2294:	f1 1d       	adc	r31, r1
    2296:	20 81       	ld	r18, Z
    2298:	20 33       	cpi	r18, 0x30	; 48
    229a:	11 f4       	brne	.+4      	; 0x22a0 <vfprintf+0x30a>
    229c:	09 7e       	andi	r16, 0xE9	; 233
    229e:	09 c0       	rjmp	.+18     	; 0x22b2 <vfprintf+0x31c>
    22a0:	02 ff       	sbrs	r16, 2
    22a2:	06 c0       	rjmp	.+12     	; 0x22b0 <vfprintf+0x31a>
    22a4:	1e 5f       	subi	r17, 0xFE	; 254
    22a6:	05 c0       	rjmp	.+10     	; 0x22b2 <vfprintf+0x31c>
    22a8:	86 78       	andi	r24, 0x86	; 134
    22aa:	90 70       	andi	r25, 0x00	; 0
    22ac:	00 97       	sbiw	r24, 0x00	; 0
    22ae:	09 f0       	breq	.+2      	; 0x22b2 <vfprintf+0x31c>
    22b0:	1f 5f       	subi	r17, 0xFF	; 255
    22b2:	80 2e       	mov	r8, r16
    22b4:	99 24       	eor	r9, r9
    22b6:	03 fd       	sbrc	r16, 3
    22b8:	12 c0       	rjmp	.+36     	; 0x22de <vfprintf+0x348>
    22ba:	00 ff       	sbrs	r16, 0
    22bc:	0d c0       	rjmp	.+26     	; 0x22d8 <vfprintf+0x342>
    22be:	fd 2c       	mov	r15, r13
    22c0:	1e 15       	cp	r17, r14
    22c2:	50 f4       	brcc	.+20     	; 0x22d8 <vfprintf+0x342>
    22c4:	fe 0c       	add	r15, r14
    22c6:	f1 1a       	sub	r15, r17
    22c8:	1e 2d       	mov	r17, r14
    22ca:	06 c0       	rjmp	.+12     	; 0x22d8 <vfprintf+0x342>
    22cc:	80 e2       	ldi	r24, 0x20	; 32
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	b3 01       	movw	r22, r6
    22d2:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <fputc>
    22d6:	1f 5f       	subi	r17, 0xFF	; 255
    22d8:	1e 15       	cp	r17, r14
    22da:	c0 f3       	brcs	.-16     	; 0x22cc <vfprintf+0x336>
    22dc:	04 c0       	rjmp	.+8      	; 0x22e6 <vfprintf+0x350>
    22de:	1e 15       	cp	r17, r14
    22e0:	10 f4       	brcc	.+4      	; 0x22e6 <vfprintf+0x350>
    22e2:	e1 1a       	sub	r14, r17
    22e4:	01 c0       	rjmp	.+2      	; 0x22e8 <vfprintf+0x352>
    22e6:	ee 24       	eor	r14, r14
    22e8:	84 fe       	sbrs	r8, 4
    22ea:	0f c0       	rjmp	.+30     	; 0x230a <vfprintf+0x374>
    22ec:	80 e3       	ldi	r24, 0x30	; 48
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	b3 01       	movw	r22, r6
    22f2:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <fputc>
    22f6:	82 fe       	sbrs	r8, 2
    22f8:	1f c0       	rjmp	.+62     	; 0x2338 <vfprintf+0x3a2>
    22fa:	81 fe       	sbrs	r8, 1
    22fc:	03 c0       	rjmp	.+6      	; 0x2304 <vfprintf+0x36e>
    22fe:	88 e5       	ldi	r24, 0x58	; 88
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	10 c0       	rjmp	.+32     	; 0x2324 <vfprintf+0x38e>
    2304:	88 e7       	ldi	r24, 0x78	; 120
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	0d c0       	rjmp	.+26     	; 0x2324 <vfprintf+0x38e>
    230a:	c4 01       	movw	r24, r8
    230c:	86 78       	andi	r24, 0x86	; 134
    230e:	90 70       	andi	r25, 0x00	; 0
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	91 f0       	breq	.+36     	; 0x2338 <vfprintf+0x3a2>
    2314:	81 fc       	sbrc	r8, 1
    2316:	02 c0       	rjmp	.+4      	; 0x231c <vfprintf+0x386>
    2318:	80 e2       	ldi	r24, 0x20	; 32
    231a:	01 c0       	rjmp	.+2      	; 0x231e <vfprintf+0x388>
    231c:	8b e2       	ldi	r24, 0x2B	; 43
    231e:	07 fd       	sbrc	r16, 7
    2320:	8d e2       	ldi	r24, 0x2D	; 45
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	b3 01       	movw	r22, r6
    2326:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <fputc>
    232a:	06 c0       	rjmp	.+12     	; 0x2338 <vfprintf+0x3a2>
    232c:	80 e3       	ldi	r24, 0x30	; 48
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	b3 01       	movw	r22, r6
    2332:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <fputc>
    2336:	fa 94       	dec	r15
    2338:	df 14       	cp	r13, r15
    233a:	c0 f3       	brcs	.-16     	; 0x232c <vfprintf+0x396>
    233c:	da 94       	dec	r13
    233e:	f2 01       	movw	r30, r4
    2340:	ed 0d       	add	r30, r13
    2342:	f1 1d       	adc	r31, r1
    2344:	80 81       	ld	r24, Z
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	b3 01       	movw	r22, r6
    234a:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <fputc>
    234e:	dd 20       	and	r13, r13
    2350:	a9 f7       	brne	.-22     	; 0x233c <vfprintf+0x3a6>
    2352:	06 c0       	rjmp	.+12     	; 0x2360 <vfprintf+0x3ca>
    2354:	80 e2       	ldi	r24, 0x20	; 32
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	b3 01       	movw	r22, r6
    235a:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <fputc>
    235e:	ea 94       	dec	r14
    2360:	ee 20       	and	r14, r14
    2362:	c1 f7       	brne	.-16     	; 0x2354 <vfprintf+0x3be>
    2364:	40 ce       	rjmp	.-896    	; 0x1fe6 <vfprintf+0x50>
    2366:	f3 01       	movw	r30, r6
    2368:	86 81       	ldd	r24, Z+6	; 0x06
    236a:	97 81       	ldd	r25, Z+7	; 0x07
    236c:	02 c0       	rjmp	.+4      	; 0x2372 <vfprintf+0x3dc>
    236e:	8f ef       	ldi	r24, 0xFF	; 255
    2370:	9f ef       	ldi	r25, 0xFF	; 255
    2372:	2d 96       	adiw	r28, 0x0d	; 13
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61
    237e:	df 91       	pop	r29
    2380:	cf 91       	pop	r28
    2382:	1f 91       	pop	r17
    2384:	0f 91       	pop	r16
    2386:	ff 90       	pop	r15
    2388:	ef 90       	pop	r14
    238a:	df 90       	pop	r13
    238c:	cf 90       	pop	r12
    238e:	bf 90       	pop	r11
    2390:	af 90       	pop	r10
    2392:	9f 90       	pop	r9
    2394:	8f 90       	pop	r8
    2396:	7f 90       	pop	r7
    2398:	6f 90       	pop	r6
    239a:	5f 90       	pop	r5
    239c:	4f 90       	pop	r4
    239e:	3f 90       	pop	r3
    23a0:	2f 90       	pop	r2
    23a2:	08 95       	ret

000023a4 <strnlen_P>:
    23a4:	fc 01       	movw	r30, r24
    23a6:	05 90       	lpm	r0, Z+
    23a8:	61 50       	subi	r22, 0x01	; 1
    23aa:	70 40       	sbci	r23, 0x00	; 0
    23ac:	01 10       	cpse	r0, r1
    23ae:	d8 f7       	brcc	.-10     	; 0x23a6 <strnlen_P+0x2>
    23b0:	80 95       	com	r24
    23b2:	90 95       	com	r25
    23b4:	8e 0f       	add	r24, r30
    23b6:	9f 1f       	adc	r25, r31
    23b8:	08 95       	ret

000023ba <strnlen>:
    23ba:	fc 01       	movw	r30, r24
    23bc:	61 50       	subi	r22, 0x01	; 1
    23be:	70 40       	sbci	r23, 0x00	; 0
    23c0:	01 90       	ld	r0, Z+
    23c2:	01 10       	cpse	r0, r1
    23c4:	d8 f7       	brcc	.-10     	; 0x23bc <strnlen+0x2>
    23c6:	80 95       	com	r24
    23c8:	90 95       	com	r25
    23ca:	8e 0f       	add	r24, r30
    23cc:	9f 1f       	adc	r25, r31
    23ce:	08 95       	ret

000023d0 <fputc>:
    23d0:	0f 93       	push	r16
    23d2:	1f 93       	push	r17
    23d4:	cf 93       	push	r28
    23d6:	df 93       	push	r29
    23d8:	8c 01       	movw	r16, r24
    23da:	eb 01       	movw	r28, r22
    23dc:	8b 81       	ldd	r24, Y+3	; 0x03
    23de:	81 ff       	sbrs	r24, 1
    23e0:	1b c0       	rjmp	.+54     	; 0x2418 <fputc+0x48>
    23e2:	82 ff       	sbrs	r24, 2
    23e4:	0d c0       	rjmp	.+26     	; 0x2400 <fputc+0x30>
    23e6:	2e 81       	ldd	r18, Y+6	; 0x06
    23e8:	3f 81       	ldd	r19, Y+7	; 0x07
    23ea:	8c 81       	ldd	r24, Y+4	; 0x04
    23ec:	9d 81       	ldd	r25, Y+5	; 0x05
    23ee:	28 17       	cp	r18, r24
    23f0:	39 07       	cpc	r19, r25
    23f2:	64 f4       	brge	.+24     	; 0x240c <fputc+0x3c>
    23f4:	e8 81       	ld	r30, Y
    23f6:	f9 81       	ldd	r31, Y+1	; 0x01
    23f8:	01 93       	st	Z+, r16
    23fa:	f9 83       	std	Y+1, r31	; 0x01
    23fc:	e8 83       	st	Y, r30
    23fe:	06 c0       	rjmp	.+12     	; 0x240c <fputc+0x3c>
    2400:	e8 85       	ldd	r30, Y+8	; 0x08
    2402:	f9 85       	ldd	r31, Y+9	; 0x09
    2404:	80 2f       	mov	r24, r16
    2406:	09 95       	icall
    2408:	00 97       	sbiw	r24, 0x00	; 0
    240a:	31 f4       	brne	.+12     	; 0x2418 <fputc+0x48>
    240c:	8e 81       	ldd	r24, Y+6	; 0x06
    240e:	9f 81       	ldd	r25, Y+7	; 0x07
    2410:	01 96       	adiw	r24, 0x01	; 1
    2412:	9f 83       	std	Y+7, r25	; 0x07
    2414:	8e 83       	std	Y+6, r24	; 0x06
    2416:	02 c0       	rjmp	.+4      	; 0x241c <fputc+0x4c>
    2418:	0f ef       	ldi	r16, 0xFF	; 255
    241a:	1f ef       	ldi	r17, 0xFF	; 255
    241c:	c8 01       	movw	r24, r16
    241e:	df 91       	pop	r29
    2420:	cf 91       	pop	r28
    2422:	1f 91       	pop	r17
    2424:	0f 91       	pop	r16
    2426:	08 95       	ret

00002428 <__ultoa_invert>:
    2428:	fa 01       	movw	r30, r20
    242a:	aa 27       	eor	r26, r26
    242c:	28 30       	cpi	r18, 0x08	; 8
    242e:	51 f1       	breq	.+84     	; 0x2484 <__ultoa_invert+0x5c>
    2430:	20 31       	cpi	r18, 0x10	; 16
    2432:	81 f1       	breq	.+96     	; 0x2494 <__ultoa_invert+0x6c>
    2434:	e8 94       	clt
    2436:	6f 93       	push	r22
    2438:	6e 7f       	andi	r22, 0xFE	; 254
    243a:	6e 5f       	subi	r22, 0xFE	; 254
    243c:	7f 4f       	sbci	r23, 0xFF	; 255
    243e:	8f 4f       	sbci	r24, 0xFF	; 255
    2440:	9f 4f       	sbci	r25, 0xFF	; 255
    2442:	af 4f       	sbci	r26, 0xFF	; 255
    2444:	b1 e0       	ldi	r27, 0x01	; 1
    2446:	3e d0       	rcall	.+124    	; 0x24c4 <__ultoa_invert+0x9c>
    2448:	b4 e0       	ldi	r27, 0x04	; 4
    244a:	3c d0       	rcall	.+120    	; 0x24c4 <__ultoa_invert+0x9c>
    244c:	67 0f       	add	r22, r23
    244e:	78 1f       	adc	r23, r24
    2450:	89 1f       	adc	r24, r25
    2452:	9a 1f       	adc	r25, r26
    2454:	a1 1d       	adc	r26, r1
    2456:	68 0f       	add	r22, r24
    2458:	79 1f       	adc	r23, r25
    245a:	8a 1f       	adc	r24, r26
    245c:	91 1d       	adc	r25, r1
    245e:	a1 1d       	adc	r26, r1
    2460:	6a 0f       	add	r22, r26
    2462:	71 1d       	adc	r23, r1
    2464:	81 1d       	adc	r24, r1
    2466:	91 1d       	adc	r25, r1
    2468:	a1 1d       	adc	r26, r1
    246a:	20 d0       	rcall	.+64     	; 0x24ac <__ultoa_invert+0x84>
    246c:	09 f4       	brne	.+2      	; 0x2470 <__ultoa_invert+0x48>
    246e:	68 94       	set
    2470:	3f 91       	pop	r19
    2472:	2a e0       	ldi	r18, 0x0A	; 10
    2474:	26 9f       	mul	r18, r22
    2476:	11 24       	eor	r1, r1
    2478:	30 19       	sub	r19, r0
    247a:	30 5d       	subi	r19, 0xD0	; 208
    247c:	31 93       	st	Z+, r19
    247e:	de f6       	brtc	.-74     	; 0x2436 <__ultoa_invert+0xe>
    2480:	cf 01       	movw	r24, r30
    2482:	08 95       	ret
    2484:	46 2f       	mov	r20, r22
    2486:	47 70       	andi	r20, 0x07	; 7
    2488:	40 5d       	subi	r20, 0xD0	; 208
    248a:	41 93       	st	Z+, r20
    248c:	b3 e0       	ldi	r27, 0x03	; 3
    248e:	0f d0       	rcall	.+30     	; 0x24ae <__ultoa_invert+0x86>
    2490:	c9 f7       	brne	.-14     	; 0x2484 <__ultoa_invert+0x5c>
    2492:	f6 cf       	rjmp	.-20     	; 0x2480 <__ultoa_invert+0x58>
    2494:	46 2f       	mov	r20, r22
    2496:	4f 70       	andi	r20, 0x0F	; 15
    2498:	40 5d       	subi	r20, 0xD0	; 208
    249a:	4a 33       	cpi	r20, 0x3A	; 58
    249c:	18 f0       	brcs	.+6      	; 0x24a4 <__ultoa_invert+0x7c>
    249e:	49 5d       	subi	r20, 0xD9	; 217
    24a0:	31 fd       	sbrc	r19, 1
    24a2:	40 52       	subi	r20, 0x20	; 32
    24a4:	41 93       	st	Z+, r20
    24a6:	02 d0       	rcall	.+4      	; 0x24ac <__ultoa_invert+0x84>
    24a8:	a9 f7       	brne	.-22     	; 0x2494 <__ultoa_invert+0x6c>
    24aa:	ea cf       	rjmp	.-44     	; 0x2480 <__ultoa_invert+0x58>
    24ac:	b4 e0       	ldi	r27, 0x04	; 4
    24ae:	a6 95       	lsr	r26
    24b0:	97 95       	ror	r25
    24b2:	87 95       	ror	r24
    24b4:	77 95       	ror	r23
    24b6:	67 95       	ror	r22
    24b8:	ba 95       	dec	r27
    24ba:	c9 f7       	brne	.-14     	; 0x24ae <__ultoa_invert+0x86>
    24bc:	00 97       	sbiw	r24, 0x00	; 0
    24be:	61 05       	cpc	r22, r1
    24c0:	71 05       	cpc	r23, r1
    24c2:	08 95       	ret
    24c4:	9b 01       	movw	r18, r22
    24c6:	ac 01       	movw	r20, r24
    24c8:	0a 2e       	mov	r0, r26
    24ca:	06 94       	lsr	r0
    24cc:	57 95       	ror	r21
    24ce:	47 95       	ror	r20
    24d0:	37 95       	ror	r19
    24d2:	27 95       	ror	r18
    24d4:	ba 95       	dec	r27
    24d6:	c9 f7       	brne	.-14     	; 0x24ca <__ultoa_invert+0xa2>
    24d8:	62 0f       	add	r22, r18
    24da:	73 1f       	adc	r23, r19
    24dc:	84 1f       	adc	r24, r20
    24de:	95 1f       	adc	r25, r21
    24e0:	a0 1d       	adc	r26, r0
    24e2:	08 95       	ret

000024e4 <_exit>:
    24e4:	f8 94       	cli

000024e6 <__stop_program>:
    24e6:	ff cf       	rjmp	.-2      	; 0x24e6 <__stop_program>
