
SMC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800100  00002382  00002416  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002382  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000084  0080020c  0080020c  00002522  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00002524  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  000031a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000248  00000000  00000000  00003360  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003e25  00000000  00000000  000035a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000112a  00000000  00000000  000073cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000180c  00000000  00000000  000084f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b6c  00000000  00000000  00009d04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001633  00000000  00000000  0000a870  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002770  00000000  00000000  0000bea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000e613  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__ctors_end>
       4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
       8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
       c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      10:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      14:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      18:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      1c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      20:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      24:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      28:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      2c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      30:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      34:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      38:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      3c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      40:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__vector_16>
      44:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      48:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      4c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      50:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      54:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      58:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      5c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      60:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      64:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      68:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      6c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      70:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      74:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      78:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      7c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      80:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      84:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      88:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      8c:	e7 0a       	sbc	r14, r23
      8e:	ee 0a       	sbc	r14, r30
      90:	f5 0a       	sbc	r15, r21
      92:	fd 0a       	sbc	r15, r29
      94:	04 0b       	sbc	r16, r20
      96:	0b 0b       	sbc	r16, r27
      98:	14 0b       	sbc	r17, r20
      9a:	1d 0b       	sbc	r17, r29
      9c:	26 0b       	sbc	r18, r22
      9e:	2f 0b       	sbc	r18, r31
      a0:	39 0b       	sbc	r19, r25
      a2:	42 0b       	sbc	r20, r18
      a4:	4a 0b       	sbc	r20, r26
      a6:	52 0b       	sbc	r21, r18
      a8:	5b 0b       	sbc	r21, r27
      aa:	63 0b       	sbc	r22, r19
      ac:	6b 0b       	sbc	r22, r27
      ae:	73 0b       	sbc	r23, r19
      b0:	7b 0b       	sbc	r23, r27

000000b2 <__ctors_end>:
      b2:	11 24       	eor	r1, r1
      b4:	1f be       	out	0x3f, r1	; 63
      b6:	cf ef       	ldi	r28, 0xFF	; 255
      b8:	d0 e1       	ldi	r29, 0x10	; 16
      ba:	de bf       	out	0x3e, r29	; 62
      bc:	cd bf       	out	0x3d, r28	; 61

000000be <__do_copy_data>:
      be:	12 e0       	ldi	r17, 0x02	; 2
      c0:	a0 e0       	ldi	r26, 0x00	; 0
      c2:	b1 e0       	ldi	r27, 0x01	; 1
      c4:	e2 e8       	ldi	r30, 0x82	; 130
      c6:	f3 e2       	ldi	r31, 0x23	; 35
      c8:	00 e0       	ldi	r16, 0x00	; 0
      ca:	0b bf       	out	0x3b, r16	; 59
      cc:	02 c0       	rjmp	.+4      	; 0xd2 <__do_copy_data+0x14>
      ce:	07 90       	elpm	r0, Z+
      d0:	0d 92       	st	X+, r0
      d2:	ac 30       	cpi	r26, 0x0C	; 12
      d4:	b1 07       	cpc	r27, r17
      d6:	d9 f7       	brne	.-10     	; 0xce <__do_copy_data+0x10>

000000d8 <__do_clear_bss>:
      d8:	12 e0       	ldi	r17, 0x02	; 2
      da:	ac e0       	ldi	r26, 0x0C	; 12
      dc:	b2 e0       	ldi	r27, 0x02	; 2
      de:	01 c0       	rjmp	.+2      	; 0xe2 <.do_clear_bss_start>

000000e0 <.do_clear_bss_loop>:
      e0:	1d 92       	st	X+, r1

000000e2 <.do_clear_bss_start>:
      e2:	a0 39       	cpi	r26, 0x90	; 144
      e4:	b1 07       	cpc	r27, r17
      e6:	e1 f7       	brne	.-8      	; 0xe0 <.do_clear_bss_loop>
      e8:	0e 94 72 03 	call	0x6e4	; 0x6e4 <main>
      ec:	0c 94 bf 11 	jmp	0x237e	; 0x237e <_exit>

000000f0 <__bad_interrupt>:
      f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f4 <KEYPAD_Check>:
uint8_t ascii_code[4][4]={16,15,14,13,
						  12,9,6,3,
						  10,8,5,2,
						  11,7,4,1};

uint8_t KEYPAD_Check() {
      f4:	af 92       	push	r10
      f6:	bf 92       	push	r11
      f8:	cf 92       	push	r12
      fa:	df 92       	push	r13
      fc:	ef 92       	push	r14
      fe:	ff 92       	push	r15
     100:	0f 93       	push	r16
     102:	1f 93       	push	r17
     104:	cf 93       	push	r28
     106:	df 93       	push	r29
     108:	20 e0       	ldi	r18, 0x00	; 0
     10a:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     10c:	41 e0       	ldi	r20, 0x01	; 1
     10e:	50 e0       	ldi	r21, 0x00	; 0
     110:	e2 e6       	ldi	r30, 0x62	; 98
     112:	f0 e0       	ldi	r31, 0x00	; 0
		_delay_us(10);
		keyin=KEYPAD_PIN & 0x0F;
		if (keyin!=0x0F)
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
     114:	a0 e1       	ldi	r26, 0x10	; 16
     116:	b1 e0       	ldi	r27, 0x01	; 1
     118:	0f 2e       	mov	r0, r31
     11a:	f1 e1       	ldi	r31, 0x11	; 17
     11c:	af 2e       	mov	r10, r31
     11e:	f1 e0       	ldi	r31, 0x01	; 1
     120:	bf 2e       	mov	r11, r31
     122:	f0 2d       	mov	r31, r0
     124:	02 e1       	ldi	r16, 0x12	; 18
     126:	11 e0       	ldi	r17, 0x01	; 1
     128:	0f 2e       	mov	r0, r31
     12a:	f3 e1       	ldi	r31, 0x13	; 19
     12c:	ef 2e       	mov	r14, r31
     12e:	f1 e0       	ldi	r31, 0x01	; 1
     130:	ff 2e       	mov	r15, r31
     132:	f0 2d       	mov	r31, r0
						  11,7,4,1};

uint8_t KEYPAD_Check() {
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     134:	b9 01       	movw	r22, r18
uint8_t ascii_code[4][4]={16,15,14,13,
						  12,9,6,3,
						  10,8,5,2,
						  11,7,4,1};

uint8_t KEYPAD_Check() {
     136:	c9 01       	movw	r24, r18
     138:	04 96       	adiw	r24, 0x04	; 4
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
		KEYPAD_PORT=0xFF-(1<<(i+4));
     13a:	6a 01       	movw	r12, r20
     13c:	02 c0       	rjmp	.+4      	; 0x142 <KEYPAD_Check+0x4e>
     13e:	cc 0c       	add	r12, r12
     140:	dd 1c       	adc	r13, r13
     142:	8a 95       	dec	r24
     144:	e2 f7       	brpl	.-8      	; 0x13e <KEYPAD_Check+0x4a>
     146:	c6 01       	movw	r24, r12
     148:	80 95       	com	r24
     14a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     14c:	83 e0       	ldi	r24, 0x03	; 3
     14e:	8a 95       	dec	r24
     150:	f1 f7       	brne	.-4      	; 0x14e <KEYPAD_Check+0x5a>
     152:	00 00       	nop
		_delay_us(10);
		keyin=KEYPAD_PIN & 0x0F;
     154:	80 b1       	in	r24, 0x00	; 0
     156:	8f 70       	andi	r24, 0x0F	; 15
		if (keyin!=0x0F)
     158:	8f 30       	cpi	r24, 0x0F	; 15
     15a:	29 f1       	breq	.+74     	; 0x1a6 <KEYPAD_Check+0xb2>
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
     15c:	9c 91       	ld	r25, X
     15e:	98 17       	cp	r25, r24
     160:	a9 f0       	breq	.+42     	; 0x18c <KEYPAD_Check+0x98>
     162:	e5 01       	movw	r28, r10
     164:	98 81       	ld	r25, Y
     166:	98 17       	cp	r25, r24
     168:	59 f0       	breq	.+22     	; 0x180 <KEYPAD_Check+0x8c>
     16a:	e8 01       	movw	r28, r16
     16c:	98 81       	ld	r25, Y
     16e:	98 17       	cp	r25, r24
     170:	51 f0       	breq	.+20     	; 0x186 <KEYPAD_Check+0x92>
     172:	e7 01       	movw	r28, r14
     174:	98 81       	ld	r25, Y
     176:	98 17       	cp	r25, r24
     178:	b1 f4       	brne	.+44     	; 0x1a6 <KEYPAD_Check+0xb2>
     17a:	e3 e0       	ldi	r30, 0x03	; 3
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	08 c0       	rjmp	.+16     	; 0x190 <KEYPAD_Check+0x9c>
     180:	e1 e0       	ldi	r30, 0x01	; 1
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	05 c0       	rjmp	.+10     	; 0x190 <KEYPAD_Check+0x9c>
     186:	e2 e0       	ldi	r30, 0x02	; 2
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	02 c0       	rjmp	.+4      	; 0x190 <KEYPAD_Check+0x9c>
     18c:	e0 e0       	ldi	r30, 0x00	; 0
     18e:	f0 e0       	ldi	r31, 0x00	; 0
     190:	ee 0f       	add	r30, r30
     192:	ff 1f       	adc	r31, r31
     194:	ee 0f       	add	r30, r30
     196:	ff 1f       	adc	r31, r31
     198:	6e 0f       	add	r22, r30
     19a:	7f 1f       	adc	r23, r31
     19c:	fb 01       	movw	r30, r22
     19e:	e0 50       	subi	r30, 0x00	; 0
     1a0:	ff 4f       	sbci	r31, 0xFF	; 255
     1a2:	80 81       	ld	r24, Z
     1a4:	06 c0       	rjmp	.+12     	; 0x1b2 <KEYPAD_Check+0xbe>
     1a6:	2f 5f       	subi	r18, 0xFF	; 255
     1a8:	3f 4f       	sbci	r19, 0xFF	; 255
						  10,8,5,2,
						  11,7,4,1};

uint8_t KEYPAD_Check() {
	uint8_t i,j,keyin;
	for (i=0;i<4;i++) {
     1aa:	24 30       	cpi	r18, 0x04	; 4
     1ac:	31 05       	cpc	r19, r1
     1ae:	11 f6       	brne	.-124    	; 0x134 <KEYPAD_Check+0x40>
		keyin=KEYPAD_PIN & 0x0F;
		if (keyin!=0x0F)
			for (j=0;j<4;j++)
				if (keyin==scan_code[j]) return ascii_code[j][i];					
	}
	return 0;
     1b0:	80 e0       	ldi	r24, 0x00	; 0
}
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	1f 91       	pop	r17
     1b8:	0f 91       	pop	r16
     1ba:	ff 90       	pop	r15
     1bc:	ef 90       	pop	r14
     1be:	df 90       	pop	r13
     1c0:	cf 90       	pop	r12
     1c2:	bf 90       	pop	r11
     1c4:	af 90       	pop	r10
     1c6:	08 95       	ret

000001c8 <KEYPAD_Init>:

void KEYPAD_Init()
{
	//Khai bao huong cho cac chan ket noi keypad
	KEYPAD_DDR=0xF0;
     1c8:	80 ef       	ldi	r24, 0xF0	; 240
     1ca:	80 93 61 00 	sts	0x0061, r24
	KEYPAD_PORT=0x0F;
     1ce:	8f e0       	ldi	r24, 0x0F	; 15
     1d0:	80 93 62 00 	sts	0x0062, r24
     1d4:	08 95       	ret

000001d6 <LCDBusyLoop>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1d6:	8f ec       	ldi	r24, 0xCF	; 207
     1d8:	97 e0       	ldi	r25, 0x07	; 7
     1da:	01 97       	sbiw	r24, 0x01	; 1
     1dc:	f1 f7       	brne	.-4      	; 0x1da <LCDBusyLoop+0x4>
     1de:	00 c0       	rjmp	.+0      	; 0x1e0 <LCDBusyLoop+0xa>
     1e0:	00 00       	nop
}

void LCDBusyLoop()
{
	_delay_ms(8);
}
     1e2:	08 95       	ret

000001e4 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
     1e4:	28 2f       	mov	r18, r24
     1e6:	22 95       	swap	r18
     1e8:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
     1ea:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
     1ec:	66 23       	and	r22, r22
     1ee:	11 f4       	brne	.+4      	; 0x1f4 <LCDByte+0x10>
CLEAR_RS();
     1f0:	d8 98       	cbi	0x1b, 0	; 27
     1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <LCDByte+0x12>
else
SET_RS();
     1f4:	d8 9a       	sbi	0x1b, 0	; 27

//_delay_ms(0.500);		//tAS

SET_E();
     1f6:	d9 9a       	sbi	0x1b, 1	; 27

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
     1f8:	9b b3       	in	r25, 0x1b	; 27
     1fa:	22 0f       	add	r18, r18
     1fc:	22 0f       	add	r18, r18
     1fe:	93 7c       	andi	r25, 0xC3	; 195
     200:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
     202:	9b bb       	out	0x1b, r25	; 27

//_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
     204:	d9 98       	cbi	0x1b, 1	; 27

//_delay_us(1);

//Send the lower nibble
SET_E();
     206:	d9 9a       	sbi	0x1b, 1	; 27

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
     208:	9b b3       	in	r25, 0x1b	; 27
     20a:	88 0f       	add	r24, r24
     20c:	88 0f       	add	r24, r24
     20e:	93 7c       	andi	r25, 0xC3	; 195
     210:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     212:	8b bb       	out	0x1b, r24	; 27

//_delay_us(1);			//tEH

//SEND

CLEAR_E();
     214:	d9 98       	cbi	0x1b, 1	; 27

//_delay_us(1);			//tEL

LCDBusyLoop();
     216:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCDBusyLoop>
}
     21a:	08 95       	ret

0000021c <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
     21c:	0f 93       	push	r16
     21e:	1f 93       	push	r17
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
     224:	8c 01       	movw	r16, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     226:	fc 01       	movw	r30, r24
     228:	80 81       	ld	r24, Z
     22a:	88 23       	and	r24, r24
     22c:	09 f1       	breq	.+66     	; 0x270 <LCDWriteString+0x54>
 {
 	//Custom Char Support
	if(*msg=='%')
     22e:	85 32       	cpi	r24, 0x25	; 37
     230:	a9 f4       	brne	.+42     	; 0x25c <LCDWriteString+0x40>
	{
		msg++;
     232:	e8 01       	movw	r28, r16
     234:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
     236:	f8 01       	movw	r30, r16
     238:	81 81       	ldd	r24, Z+1	; 0x01
     23a:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
     23c:	88 30       	cpi	r24, 0x08	; 8
     23e:	20 f4       	brcc	.+8      	; 0x248 <LCDWriteString+0x2c>
		{
			LCDData(cc);
     240:	61 e0       	ldi	r22, 0x01	; 1
     242:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCDByte>
     246:	0e c0       	rjmp	.+28     	; 0x264 <LCDWriteString+0x48>
		}
		else
		{
			LCDData('%');
     248:	85 e2       	ldi	r24, 0x25	; 37
     24a:	61 e0       	ldi	r22, 0x01	; 1
     24c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCDByte>
			LCDData(*msg);
     250:	f8 01       	movw	r30, r16
     252:	81 81       	ldd	r24, Z+1	; 0x01
     254:	61 e0       	ldi	r22, 0x01	; 1
     256:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCDByte>
     25a:	04 c0       	rjmp	.+8      	; 0x264 <LCDWriteString+0x48>
		}
	}
	else
	{
		LCDData(*msg);
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCDByte>
     262:	e8 01       	movw	r28, r16
	}
	msg++;
     264:	8e 01       	movw	r16, r28
     266:	0f 5f       	subi	r16, 0xFF	; 255
     268:	1f 4f       	sbci	r17, 0xFF	; 255
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     26a:	89 81       	ldd	r24, Y+1	; 0x01
     26c:	88 23       	and	r24, r24
     26e:	f9 f6       	brne	.-66     	; 0x22e <LCDWriteString+0x12>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	1f 91       	pop	r17
     276:	0f 91       	pop	r16
     278:	08 95       	ret

0000027a <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     27a:	ef 92       	push	r14
     27c:	ff 92       	push	r15
     27e:	0f 93       	push	r16
     280:	1f 93       	push	r17
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	00 d0       	rcall	.+0      	; 0x288 <LCDWriteInt+0xe>
     288:	00 d0       	rcall	.+0      	; 0x28a <LCDWriteInt+0x10>
     28a:	0f 92       	push	r0
     28c:	cd b7       	in	r28, 0x3d	; 61
     28e:	de b7       	in	r29, 0x3e	; 62
     290:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     292:	fe 01       	movw	r30, r28
     294:	31 96       	adiw	r30, 0x01	; 1
     296:	25 e0       	ldi	r18, 0x05	; 5
     298:	df 01       	movw	r26, r30
     29a:	1d 92       	st	X+, r1
     29c:	2a 95       	dec	r18
     29e:	e9 f7       	brne	.-6      	; 0x29a <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
     2a0:	00 97       	sbiw	r24, 0x00	; 0
     2a2:	61 f0       	breq	.+24     	; 0x2bc <LCDWriteInt+0x42>
     2a4:	fe 01       	movw	r30, r28
     2a6:	36 96       	adiw	r30, 0x06	; 6
	{
	str[i]=val%10;
     2a8:	2a e0       	ldi	r18, 0x0A	; 10
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	b9 01       	movw	r22, r18
     2ae:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__divmodhi4>
     2b2:	82 93       	st	-Z, r24
	val=val/10;
     2b4:	86 2f       	mov	r24, r22
     2b6:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     2b8:	00 97       	sbiw	r24, 0x00	; 0
     2ba:	c1 f7       	brne	.-16     	; 0x2ac <LCDWriteInt+0x32>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     2bc:	bf ef       	ldi	r27, 0xFF	; 255
     2be:	eb 16       	cp	r14, r27
     2c0:	bf ef       	ldi	r27, 0xFF	; 255
     2c2:	fb 06       	cpc	r15, r27
     2c4:	69 f4       	brne	.+26     	; 0x2e0 <LCDWriteInt+0x66>
		while(str[j]==0) j++;
     2c6:	29 81       	ldd	r18, Y+1	; 0x01
     2c8:	22 23       	and	r18, r18
     2ca:	79 f4       	brne	.+30     	; 0x2ea <LCDWriteInt+0x70>
     2cc:	fe 01       	movw	r30, r28
     2ce:	32 96       	adiw	r30, 0x02	; 2
     2d0:	00 e0       	ldi	r16, 0x00	; 0
     2d2:	10 e0       	ldi	r17, 0x00	; 0
     2d4:	0f 5f       	subi	r16, 0xFF	; 255
     2d6:	1f 4f       	sbci	r17, 0xFF	; 255
     2d8:	21 91       	ld	r18, Z+
     2da:	22 23       	and	r18, r18
     2dc:	d9 f3       	breq	.-10     	; 0x2d4 <LCDWriteInt+0x5a>
     2de:	07 c0       	rjmp	.+14     	; 0x2ee <LCDWriteInt+0x74>
	else
		j=5-field_length;
     2e0:	05 e0       	ldi	r16, 0x05	; 5
     2e2:	10 e0       	ldi	r17, 0x00	; 0
     2e4:	0e 19       	sub	r16, r14
     2e6:	1f 09       	sbc	r17, r15
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <LCDWriteInt+0x74>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
     2ea:	00 e0       	ldi	r16, 0x00	; 0
     2ec:	10 e0       	ldi	r17, 0x00	; 0
	else
		j=5-field_length;

	if(val<0) LCDData('-');
     2ee:	99 23       	and	r25, r25
     2f0:	24 f4       	brge	.+8      	; 0x2fa <LCDWriteInt+0x80>
     2f2:	8d e2       	ldi	r24, 0x2D	; 45
     2f4:	61 e0       	ldi	r22, 0x01	; 1
     2f6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCDByte>
	for(i=j;i<5;i++)
     2fa:	05 30       	cpi	r16, 0x05	; 5
     2fc:	11 05       	cpc	r17, r1
     2fe:	bc f4       	brge	.+46     	; 0x32e <LCDWriteInt+0xb4>
	}
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
     300:	e1 e0       	ldi	r30, 0x01	; 1
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	ec 0f       	add	r30, r28
     306:	fd 1f       	adc	r31, r29
     308:	0e 0f       	add	r16, r30
     30a:	1f 1f       	adc	r17, r31
     30c:	0f 2e       	mov	r0, r31
     30e:	f6 e0       	ldi	r31, 0x06	; 6
     310:	ef 2e       	mov	r14, r31
     312:	ff 24       	eor	r15, r15
     314:	f0 2d       	mov	r31, r0
     316:	ec 0e       	add	r14, r28
     318:	fd 1e       	adc	r15, r29
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     31a:	d8 01       	movw	r26, r16
     31c:	8d 91       	ld	r24, X+
     31e:	8d 01       	movw	r16, r26
     320:	80 5d       	subi	r24, 0xD0	; 208
     322:	61 e0       	ldi	r22, 0x01	; 1
     324:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     328:	0e 15       	cp	r16, r14
     32a:	1f 05       	cpc	r17, r15
     32c:	b1 f7       	brne	.-20     	; 0x31a <LCDWriteInt+0xa0>
	{
	LCDData(48+str[i]);
	}
}
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	1f 91       	pop	r17
     33e:	0f 91       	pop	r16
     340:	ff 90       	pop	r15
     342:	ef 90       	pop	r14
     344:	08 95       	ret

00000346 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
     346:	84 31       	cpi	r24, 0x14	; 20
     348:	78 f4       	brcc	.+30     	; 0x368 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
     34a:	62 30       	cpi	r22, 0x02	; 2
     34c:	31 f0       	breq	.+12     	; 0x35a <LCDGotoXY+0x14>
     34e:	63 30       	cpi	r22, 0x03	; 3
     350:	31 f0       	breq	.+12     	; 0x35e <LCDGotoXY+0x18>
     352:	61 30       	cpi	r22, 0x01	; 1
     354:	29 f4       	brne	.+10     	; 0x360 <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
     356:	80 64       	ori	r24, 0x40	; 64
			break;
     358:	03 c0       	rjmp	.+6      	; 0x360 <LCDGotoXY+0x1a>
		case 2:
			x+=0x14;
     35a:	8c 5e       	subi	r24, 0xEC	; 236
			break;
     35c:	01 c0       	rjmp	.+2      	; 0x360 <LCDGotoXY+0x1a>
		case 3:
			x+=0x54;
     35e:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
     360:	80 68       	ori	r24, 0x80	; 128
     362:	60 e0       	ldi	r22, 0x00	; 0
     364:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCDByte>
     368:	08 95       	ret

0000036a <LCDInit>:
{
	_delay_ms(8);
}

void LCDInit(uint8_t style)
{
     36a:	0f 93       	push	r16
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	c8 2f       	mov	r28, r24
     374:	8b e4       	ldi	r24, 0x4B	; 75
     376:	9d e1       	ldi	r25, 0x1D	; 29
     378:	01 97       	sbiw	r24, 0x01	; 1
     37a:	f1 f7       	brne	.-4      	; 0x378 <LCDInit+0xe>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <LCDInit+0x14>
     37e:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
     380:	8a b3       	in	r24, 0x1a	; 26
     382:	8c 63       	ori	r24, 0x3C	; 60
     384:	8a bb       	out	0x1a, r24	; 26
	LCD_E_DDR|=(1<<LCD_E_POS);
     386:	d1 9a       	sbi	0x1a, 1	; 26
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     388:	d0 9a       	sbi	0x1a, 0	; 26

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
     38a:	8b b3       	in	r24, 0x1b	; 27
     38c:	83 7c       	andi	r24, 0xC3	; 195
     38e:	8b bb       	out	0x1b, r24	; 27
	CLEAR_E();
     390:	d9 98       	cbi	0x1b, 1	; 27
	CLEAR_RS();
     392:	d8 98       	cbi	0x1b, 0	; 27

	//Set 4-bit mode
	//_delay_us(0.3);	//tAS

	SET_E();
     394:	d9 9a       	sbi	0x1b, 1	; 27
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     396:	db 9a       	sbi	0x1b, 3	; 27
	//_delay_us(1);
	CLEAR_E();
     398:	d9 98       	cbi	0x1b, 1	; 27
	//_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     39a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     39e:	8c 2f       	mov	r24, r28
     3a0:	8c 60       	ori	r24, 0x0C	; 12
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     3a8:	88 e2       	ldi	r24, 0x28	; 40
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
     3b0:	80 e4       	ldi	r24, 0x40	; 64
     3b2:	60 e0       	ldi	r22, 0x00	; 0
     3b4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCDByte>
     3b8:	c4 e1       	ldi	r28, 0x14	; 20
     3ba:	d1 e0       	ldi	r29, 0x01	; 1
void LCDBusyLoop()
{
	_delay_ms(8);
}

void LCDInit(uint8_t style)
     3bc:	04 e5       	ldi	r16, 0x54	; 84
     3be:	11 e0       	ldi	r17, 0x01	; 1
	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
     3c0:	89 91       	ld	r24, Y+
     3c2:	61 e0       	ldi	r22, 0x01	; 1
     3c4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
     3c8:	c0 17       	cp	r28, r16
     3ca:	d1 07       	cpc	r29, r17
     3cc:	c9 f7       	brne	.-14     	; 0x3c0 <LCDInit+0x56>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	60 e0       	ldi	r22, 0x00	; 0
     3d2:	0e 94 a3 01 	call	0x346	; 0x346 <LCDGotoXY>

}
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	08 95       	ret

000003e0 <sMCIfaceKEYPAD_checkpress>:

static uint8_t nrf24l01_addr5[NRF24L01_ADDRSIZE] = NRF24L01_ADDRP5;
static uint8_t nrf24l01_addrtx[NRF24L01_ADDRSIZE] = NRF24L01_ADDRTX;

sc_integer sMCIfaceKEYPAD_checkpress() {
	return KEYPAD_Check();
     3e0:	0e 94 7a 00 	call	0xf4	; 0xf4 <KEYPAD_Check>
}
     3e4:	68 2f       	mov	r22, r24
     3e6:	70 e0       	ldi	r23, 0x00	; 0
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	08 95       	ret

000003ee <sMCIfaceKEYPAD_init>:
void sMCIfaceKEYPAD_init() {
	KEYPAD_Init();
     3ee:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <KEYPAD_Init>
}
     3f2:	08 95       	ret

000003f4 <sMCIfaceLCD_writeString>:

void sMCIfaceLCD_writeString(const sc_string chr) {
	LCDWriteString(chr);
     3f4:	0e 94 0e 01 	call	0x21c	; 0x21c <LCDWriteString>
}
     3f8:	08 95       	ret

000003fa <sMCIfaceLCD_writeStringXY>:
void sMCIfaceLCD_writeStringXY(const sc_string chr, const sc_integer x, const sc_integer y) {
     3fa:	0f 93       	push	r16
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	ec 01       	movw	r28, r24
     402:	84 2f       	mov	r24, r20
     404:	60 2f       	mov	r22, r16
	LCDWriteStringXY(x,y,chr);
     406:	0e 94 a3 01 	call	0x346	; 0x346 <LCDGotoXY>
     40a:	ce 01       	movw	r24, r28
     40c:	0e 94 0e 01 	call	0x21c	; 0x21c <LCDWriteString>
}
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	0f 91       	pop	r16
     416:	08 95       	ret

00000418 <sMCIfaceLCD_writeNumberXY>:
void sMCIfaceLCD_writeNumberXY(const sc_integer num, const sc_integer x, const sc_integer y, const sc_integer l) {
     418:	4f 92       	push	r4
     41a:	5f 92       	push	r5
     41c:	6f 92       	push	r6
     41e:	7f 92       	push	r7
     420:	af 92       	push	r10
     422:	bf 92       	push	r11
     424:	cf 92       	push	r12
     426:	df 92       	push	r13
     428:	ef 92       	push	r14
     42a:	ff 92       	push	r15
     42c:	2b 01       	movw	r4, r22
     42e:	3c 01       	movw	r6, r24
     430:	82 2f       	mov	r24, r18
     432:	6e 2d       	mov	r22, r14
     434:	76 01       	movw	r14, r12
     436:	65 01       	movw	r12, r10
	LCDWriteIntXY(x,y,num,l);
     438:	0e 94 a3 01 	call	0x346	; 0x346 <LCDGotoXY>
     43c:	c2 01       	movw	r24, r4
     43e:	b6 01       	movw	r22, r12
     440:	0e 94 3d 01 	call	0x27a	; 0x27a <LCDWriteInt>
}
     444:	ff 90       	pop	r15
     446:	ef 90       	pop	r14
     448:	df 90       	pop	r13
     44a:	cf 90       	pop	r12
     44c:	bf 90       	pop	r11
     44e:	af 90       	pop	r10
     450:	7f 90       	pop	r7
     452:	6f 90       	pop	r6
     454:	5f 90       	pop	r5
     456:	4f 90       	pop	r4
     458:	08 95       	ret

0000045a <sMCIfaceLCD_clear>:
void sMCIfaceLCD_clear() {
	LCDClear();
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	60 e0       	ldi	r22, 0x00	; 0
     45e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCDByte>
     462:	82 e0       	ldi	r24, 0x02	; 2
     464:	60 e0       	ldi	r22, 0x00	; 0
     466:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCDByte>
}
     46a:	08 95       	ret

0000046c <sMCIfaceLCD_init>:
void sMCIfaceLCD_init() {
	LCDInit(0);
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	0e 94 b5 01 	call	0x36a	; 0x36a <LCDInit>
}
     472:	08 95       	ret

00000474 <sMCIfaceRF_getData>:

sc_string sMCIfaceRF_getData() {
     474:	0f 93       	push	r16
     476:	1f 93       	push	r17
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	0f 92       	push	r0
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
	uint8_t pipe = 0;
     482:	19 82       	std	Y+1, r1	; 0x01
	if (nrf24l01_readready(&pipe)) {
     484:	ce 01       	movw	r24, r28
     486:	01 96       	adiw	r24, 0x01	; 1
     488:	0e 94 55 06 	call	0xcaa	; 0xcaa <nrf24l01_readready>
     48c:	88 23       	and	r24, r24
     48e:	e9 f0       	breq	.+58     	; 0x4ca <sMCIfaceRF_getData+0x56>
		LCDWriteIntXY(0,1,pipe,1);
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	61 e0       	ldi	r22, 0x01	; 1
     494:	0e 94 a3 01 	call	0x346	; 0x346 <LCDGotoXY>
     498:	89 81       	ldd	r24, Y+1	; 0x01
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	61 e0       	ldi	r22, 0x01	; 1
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	0e 94 3d 01 	call	0x27a	; 0x27a <LCDWriteInt>
		if (pipe==0) {
     4a4:	89 81       	ldd	r24, Y+1	; 0x01
     4a6:	88 23       	and	r24, r24
     4a8:	99 f4       	brne	.+38     	; 0x4d0 <sMCIfaceRF_getData+0x5c>
     4aa:	e0 e1       	ldi	r30, 0x10	; 16
     4ac:	f2 e0       	ldi	r31, 0x02	; 2
}
void sMCIfaceLCD_init() {
	LCDInit(0);
}

sc_string sMCIfaceRF_getData() {
     4ae:	cf 01       	movw	r24, r30
     4b0:	09 96       	adiw	r24, 0x09	; 9
	uint8_t pipe = 0;
	if (nrf24l01_readready(&pipe)) {
		LCDWriteIntXY(0,1,pipe,1);
		if (pipe==0) {
			//clear buffer
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
     4b2:	11 92       	st	Z+, r1
     4b4:	e8 17       	cp	r30, r24
     4b6:	f9 07       	cpc	r31, r25
     4b8:	e1 f7       	brne	.-8      	; 0x4b2 <sMCIfaceRF_getData+0x3e>
			
			//read buffer
			nrf24l01_read(pipe,bufferin);
     4ba:	00 e1       	ldi	r16, 0x10	; 16
     4bc:	12 e0       	ldi	r17, 0x02	; 2
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	b8 01       	movw	r22, r16
     4c2:	0e 94 67 06 	call	0xcce	; 0xcce <nrf24l01_read>
			return bufferin;
     4c6:	c8 01       	movw	r24, r16
     4c8:	05 c0       	rjmp	.+10     	; 0x4d4 <sMCIfaceRF_getData+0x60>
		}
	}
	return "";
     4ca:	84 e5       	ldi	r24, 0x54	; 84
     4cc:	91 e0       	ldi	r25, 0x01	; 1
     4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <sMCIfaceRF_getData+0x60>
     4d0:	84 e5       	ldi	r24, 0x54	; 84
     4d2:	91 e0       	ldi	r25, 0x01	; 1
}
     4d4:	0f 90       	pop	r0
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	1f 91       	pop	r17
     4dc:	0f 91       	pop	r16
     4de:	08 95       	ret

000004e0 <sMCIfaceRF_sendMsg>:

sc_boolean sMCIfaceRF_sendMsg(const sc_string msg) {
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	9c 01       	movw	r18, r24
     4e6:	cb e1       	ldi	r28, 0x1B	; 27
     4e8:	d2 e0       	ldi	r29, 0x02	; 2
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	90 e0       	ldi	r25, 0x00	; 0
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
		if (i<strlen(msg)) bufferout[i]=msg[i];
     4ee:	a2 2f       	mov	r26, r18
     4f0:	b3 2f       	mov	r27, r19
     4f2:	fd 01       	movw	r30, r26
     4f4:	01 90       	ld	r0, Z+
     4f6:	00 20       	and	r0, r0
     4f8:	e9 f7       	brne	.-6      	; 0x4f4 <sMCIfaceRF_sendMsg+0x14>
     4fa:	31 97       	sbiw	r30, 0x01	; 1
     4fc:	ea 1b       	sub	r30, r26
     4fe:	fb 0b       	sbc	r31, r27
     500:	8e 17       	cp	r24, r30
     502:	9f 07       	cpc	r25, r31
     504:	30 f4       	brcc	.+12     	; 0x512 <sMCIfaceRF_sendMsg+0x32>
		}
	}
	return "";
}

sc_boolean sMCIfaceRF_sendMsg(const sc_string msg) {
     506:	f9 01       	movw	r30, r18
     508:	e8 0f       	add	r30, r24
     50a:	f9 1f       	adc	r31, r25
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
		if (i<strlen(msg)) bufferout[i]=msg[i];
     50c:	40 81       	ld	r20, Z
     50e:	48 83       	st	Y, r20
     510:	01 c0       	rjmp	.+2      	; 0x514 <sMCIfaceRF_sendMsg+0x34>
		else bufferout[i] = 0;
     512:	18 82       	st	Y, r1
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	21 96       	adiw	r28, 0x01	; 1
	return "";
}

sc_boolean sMCIfaceRF_sendMsg(const sc_string msg) {
	//clear buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) {
     518:	89 30       	cpi	r24, 0x09	; 9
     51a:	91 05       	cpc	r25, r1
     51c:	41 f7       	brne	.-48     	; 0x4ee <sMCIfaceRF_sendMsg+0xe>
		if (i<strlen(msg)) bufferout[i]=msg[i];
		else bufferout[i] = 0;
	}
	
	//Set Address for Data
	nrf24l01_settxaddr(nrf24l01_addrtx);
     51e:	85 e5       	ldi	r24, 0x55	; 85
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	0e 94 c5 04 	call	0x98a	; 0x98a <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     526:	8b e1       	ldi	r24, 0x1B	; 27
     528:	92 e0       	ldi	r25, 0x02	; 2
     52a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <nrf24l01_write>
     52e:	98 2f       	mov	r25, r24
     530:	ef ec       	ldi	r30, 0xCF	; 207
     532:	f7 e0       	ldi	r31, 0x07	; 7
     534:	31 97       	sbiw	r30, 0x01	; 1
     536:	f1 f7       	brne	.-4      	; 0x534 <sMCIfaceRF_sendMsg+0x54>
     538:	00 c0       	rjmp	.+0      	; 0x53a <sMCIfaceRF_sendMsg+0x5a>
     53a:	00 00       	nop
		}
	}
	return "";
}

sc_boolean sMCIfaceRF_sendMsg(const sc_string msg) {
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	91 30       	cpi	r25, 0x01	; 1
     540:	09 f0       	breq	.+2      	; 0x544 <sMCIfaceRF_sendMsg+0x64>
     542:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	08 95       	ret

0000054a <sMCIfaceRF_sendCheck>:

sc_boolean sMCIfaceRF_sendCheck() {
     54a:	eb e1       	ldi	r30, 0x1B	; 27
     54c:	f2 e0       	ldi	r31, 0x02	; 2
     54e:	cf 01       	movw	r24, r30
     550:	09 96       	adiw	r24, 0x09	; 9
	//set all buffer
	for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferout[i] = 1;
     552:	21 e0       	ldi	r18, 0x01	; 1
     554:	21 93       	st	Z+, r18
     556:	e8 17       	cp	r30, r24
     558:	f9 07       	cpc	r31, r25
     55a:	e1 f7       	brne	.-8      	; 0x554 <sMCIfaceRF_sendCheck+0xa>
	//Set Address for check
	nrf24l01_settxaddr(nrf24l01_addr5);
     55c:	8a e5       	ldi	r24, 0x5A	; 90
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	0e 94 c5 04 	call	0x98a	; 0x98a <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     564:	8b e1       	ldi	r24, 0x1B	; 27
     566:	92 e0       	ldi	r25, 0x02	; 2
     568:	0e 94 8d 06 	call	0xd1a	; 0xd1a <nrf24l01_write>
     56c:	98 2f       	mov	r25, r24
     56e:	ef ec       	ldi	r30, 0xCF	; 207
     570:	f7 e0       	ldi	r31, 0x07	; 7
     572:	31 97       	sbiw	r30, 0x01	; 1
     574:	f1 f7       	brne	.-4      	; 0x572 <sMCIfaceRF_sendCheck+0x28>
     576:	00 c0       	rjmp	.+0      	; 0x578 <sMCIfaceRF_sendCheck+0x2e>
     578:	00 00       	nop
	} else {
		return false;
	}
}

sc_boolean sMCIfaceRF_sendCheck() {
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	91 30       	cpi	r25, 0x01	; 1
     57e:	09 f0       	breq	.+2      	; 0x582 <sMCIfaceRF_sendCheck+0x38>
     580:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     582:	08 95       	ret

00000584 <sMCIfaceRF_getCheck>:

sc_boolean sMCIfaceRF_getCheck() {
     584:	0f 93       	push	r16
     586:	1f 93       	push	r17
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
     58c:	0f 92       	push	r0
     58e:	cd b7       	in	r28, 0x3d	; 61
     590:	de b7       	in	r29, 0x3e	; 62
	uint8_t pipe = 0;
     592:	19 82       	std	Y+1, r1	; 0x01
	if (nrf24l01_readready(&pipe)) {
     594:	ce 01       	movw	r24, r28
     596:	01 96       	adiw	r24, 0x01	; 1
     598:	0e 94 55 06 	call	0xcaa	; 0xcaa <nrf24l01_readready>
     59c:	88 23       	and	r24, r24
     59e:	f1 f0       	breq	.+60     	; 0x5dc <sMCIfaceRF_getCheck+0x58>
		if (pipe==5) {
     5a0:	89 81       	ldd	r24, Y+1	; 0x01
     5a2:	85 30       	cpi	r24, 0x05	; 5
     5a4:	e9 f4       	brne	.+58     	; 0x5e0 <sMCIfaceRF_getCheck+0x5c>
     5a6:	e0 e1       	ldi	r30, 0x10	; 16
     5a8:	f2 e0       	ldi	r31, 0x02	; 2
	} else {
		return false;
	}
}

sc_boolean sMCIfaceRF_getCheck() {
     5aa:	8f 01       	movw	r16, r30
     5ac:	07 5f       	subi	r16, 0xF7	; 247
     5ae:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t pipe = 0;
	if (nrf24l01_readready(&pipe)) {
		if (pipe==5) {
			//clear buffer
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
     5b0:	11 92       	st	Z+, r1
     5b2:	e0 17       	cp	r30, r16
     5b4:	f1 07       	cpc	r31, r17
     5b6:	e1 f7       	brne	.-8      	; 0x5b0 <sMCIfaceRF_getCheck+0x2c>
			
			//read buffer
			nrf24l01_read(pipe,bufferin);
     5b8:	85 e0       	ldi	r24, 0x05	; 5
     5ba:	60 e1       	ldi	r22, 0x10	; 16
     5bc:	72 e0       	ldi	r23, 0x02	; 2
     5be:	0e 94 67 06 	call	0xcce	; 0xcce <nrf24l01_read>
			
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) if (bufferin[i]!=1) return false;
     5c2:	80 91 10 02 	lds	r24, 0x0210
     5c6:	81 30       	cpi	r24, 0x01	; 1
     5c8:	69 f4       	brne	.+26     	; 0x5e4 <sMCIfaceRF_getCheck+0x60>
     5ca:	e1 e1       	ldi	r30, 0x11	; 17
     5cc:	f2 e0       	ldi	r31, 0x02	; 2
     5ce:	81 91       	ld	r24, Z+
     5d0:	81 30       	cpi	r24, 0x01	; 1
     5d2:	51 f4       	brne	.+20     	; 0x5e8 <sMCIfaceRF_getCheck+0x64>
     5d4:	e0 17       	cp	r30, r16
     5d6:	f1 07       	cpc	r31, r17
     5d8:	d1 f7       	brne	.-12     	; 0x5ce <sMCIfaceRF_getCheck+0x4a>
     5da:	07 c0       	rjmp	.+14     	; 0x5ea <sMCIfaceRF_getCheck+0x66>
			return true;
		}
	}
	return false;
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	05 c0       	rjmp	.+10     	; 0x5ea <sMCIfaceRF_getCheck+0x66>
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	03 c0       	rjmp	.+6      	; 0x5ea <sMCIfaceRF_getCheck+0x66>
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) bufferin[i] = 0;
			
			//read buffer
			nrf24l01_read(pipe,bufferin);
			
			for(uint8_t i=0; i<NRF24L01_PAYLOAD; i++) if (bufferin[i]!=1) return false;
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	01 c0       	rjmp	.+2      	; 0x5ea <sMCIfaceRF_getCheck+0x66>
     5e8:	80 e0       	ldi	r24, 0x00	; 0
			return true;
		}
	}
	return false;
}
     5ea:	0f 90       	pop	r0
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	1f 91       	pop	r17
     5f2:	0f 91       	pop	r16
     5f4:	08 95       	ret

000005f6 <sMCIfaceRF_sendData>:

sc_boolean sMCIfaceRF_sendData(const sc_integer cmd, const sc_integer id, const sc_integer dish_id, const sc_integer amount) {
     5f6:	af 92       	push	r10
     5f8:	ef 92       	push	r14
     5fa:	82 2f       	mov	r24, r18
     5fc:	eb e1       	ldi	r30, 0x1B	; 27
     5fe:	f2 e0       	ldi	r31, 0x02	; 2
     600:	af 01       	movw	r20, r30
     602:	47 5f       	subi	r20, 0xF7	; 247
     604:	5f 4f       	sbci	r21, 0xFF	; 255
	
	unsigned char num;
	unsigned char mod;
	//clear buffer
	for(uint8_t i=0; i<sizeof(bufferout); i++) bufferout[i] = 0;
     606:	11 92       	st	Z+, r1
     608:	e4 17       	cp	r30, r20
     60a:	f5 07       	cpc	r31, r21
     60c:	e1 f7       	brne	.-8      	; 0x606 <sMCIfaceRF_sendData+0x10>
	
	//Lenh cho data: 1-goi mon, 2-huy mon, 3-thanh toan, 4-goi boi ban
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
     60e:	60 5d       	subi	r22, 0xD0	; 208
     610:	60 93 1b 02 	sts	0x021B, r22
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     614:	3a e0       	ldi	r19, 0x0A	; 10
     616:	63 2f       	mov	r22, r19
     618:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     61c:	90 5d       	subi	r25, 0xD0	; 208
     61e:	90 93 1d 02 	sts	0x021D, r25
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
	
	//Chuyen doi ma ban an hoac nha bep
	num=id;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     622:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__udivmodqi4>
		num/=10;
		bufferout[i+1]=mod+'0';
     626:	90 5d       	subi	r25, 0xD0	; 208
     628:	90 93 1c 02 	sts	0x021C, r25
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
		num/=10;
     62c:	8e 2d       	mov	r24, r14
     62e:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__udivmodqi4>
		bufferout[3+i]=mod+'0';
     632:	90 5d       	subi	r25, 0xD0	; 208
     634:	90 93 20 02 	sts	0x0220, r25
	}
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
     638:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__udivmodqi4>
		num/=10;
		bufferout[3+i]=mod+'0';
     63c:	90 5d       	subi	r25, 0xD0	; 208
     63e:	90 93 1f 02 	sts	0x021F, r25
	}
	
	//Chuyen doi ma mon an
	num=dish_id;
	for (int i=2;i>=0;i--) {
		mod=num % 10;
     642:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__udivmodqi4>
		num/=10;
		bufferout[3+i]=mod+'0';
     646:	90 5d       	subi	r25, 0xD0	; 208
     648:	90 93 1e 02 	sts	0x021E, r25
	}
	
	//Chuyen doi so luong mon an
	num=amount;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     64c:	8a 2d       	mov	r24, r10
     64e:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__udivmodqi4>
		num/=10;
		bufferout[6+i]=mod+'0';
     652:	90 5d       	subi	r25, 0xD0	; 208
     654:	90 93 22 02 	sts	0x0222, r25
	}
	
	//Chuyen doi so luong mon an
	num=amount;
	for (int i=1;i>=0;i--) {
		mod=num % 10;
     658:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__udivmodqi4>
		num/=10;
		bufferout[6+i]=mod+'0';
     65c:	90 5d       	subi	r25, 0xD0	; 208
     65e:	90 93 21 02 	sts	0x0221, r25
	}
	
	//Set Address for Data
	nrf24l01_settxaddr(nrf24l01_addrtx);
     662:	85 e5       	ldi	r24, 0x55	; 85
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	0e 94 c5 04 	call	0x98a	; 0x98a <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     66a:	8b e1       	ldi	r24, 0x1B	; 27
     66c:	92 e0       	ldi	r25, 0x02	; 2
     66e:	0e 94 8d 06 	call	0xd1a	; 0xd1a <nrf24l01_write>
     672:	98 2f       	mov	r25, r24
     674:	ef ec       	ldi	r30, 0xCF	; 207
     676:	f7 e0       	ldi	r31, 0x07	; 7
     678:	31 97       	sbiw	r30, 0x01	; 1
     67a:	f1 f7       	brne	.-4      	; 0x678 <sMCIfaceRF_sendData+0x82>
     67c:	00 c0       	rjmp	.+0      	; 0x67e <sMCIfaceRF_sendData+0x88>
     67e:	00 00       	nop
		}
	}
	return false;
}

sc_boolean sMCIfaceRF_sendData(const sc_integer cmd, const sc_integer id, const sc_integer dish_id, const sc_integer amount) {
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	91 30       	cpi	r25, 0x01	; 1
     684:	09 f0       	breq	.+2      	; 0x688 <sMCIfaceRF_sendData+0x92>
     686:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     688:	ef 90       	pop	r14
     68a:	af 90       	pop	r10
     68c:	08 95       	ret

0000068e <sMCIfaceRF_sendReq>:

sc_boolean sMCIfaceRF_sendReq(const sc_integer cmd, const sc_integer id) {
     68e:	eb e1       	ldi	r30, 0x1B	; 27
     690:	f2 e0       	ldi	r31, 0x02	; 2
     692:	cf 01       	movw	r24, r30
     694:	09 96       	adiw	r24, 0x09	; 9
	
	unsigned char num;
	unsigned char mod;
	//clear buffer
	for(uint8_t i=0; i<sizeof(bufferout); i++) bufferout[i] = 0;
     696:	11 92       	st	Z+, r1
     698:	e8 17       	cp	r30, r24
     69a:	f9 07       	cpc	r31, r25
     69c:	e1 f7       	brne	.-8      	; 0x696 <sMCIfaceRF_sendReq+0x8>
	
	//Lenh cho data: 1-xong mon an, 2-huy mon
	bufferout[0]=cmd+'0'; //Doi cmd tu so sang chu so
     69e:	60 5d       	subi	r22, 0xD0	; 208
     6a0:	60 93 1b 02 	sts	0x021B, r22
	
	//So thu tu mon an
	bufferout[1]=id+'0';
     6a4:	20 5d       	subi	r18, 0xD0	; 208
     6a6:	20 93 1c 02 	sts	0x021C, r18
	
	//Set Address for Data
	nrf24l01_settxaddr(nrf24l01_addrtx);
     6aa:	85 e5       	ldi	r24, 0x55	; 85
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	0e 94 c5 04 	call	0x98a	; 0x98a <nrf24l01_settxaddr>
	
	uint8_t writeret = nrf24l01_write(bufferout);
     6b2:	8b e1       	ldi	r24, 0x1B	; 27
     6b4:	92 e0       	ldi	r25, 0x02	; 2
     6b6:	0e 94 8d 06 	call	0xd1a	; 0xd1a <nrf24l01_write>
     6ba:	98 2f       	mov	r25, r24
     6bc:	ef ec       	ldi	r30, 0xCF	; 207
     6be:	f7 e0       	ldi	r31, 0x07	; 7
     6c0:	31 97       	sbiw	r30, 0x01	; 1
     6c2:	f1 f7       	brne	.-4      	; 0x6c0 <sMCIfaceRF_sendReq+0x32>
     6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <sMCIfaceRF_sendReq+0x38>
     6c6:	00 00       	nop
	} else {
		return false;
	}
}

sc_boolean sMCIfaceRF_sendReq(const sc_integer cmd, const sc_integer id) {
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	91 30       	cpi	r25, 0x01	; 1
     6cc:	09 f0       	breq	.+2      	; 0x6d0 <sMCIfaceRF_sendReq+0x42>
     6ce:	80 e0       	ldi	r24, 0x00	; 0
	if(writeret == 1) {
		return true;
	} else {
		return false;
	}
}
     6d0:	08 95       	ret

000006d2 <sMC_setTimer>:

void sMC_setTimer(const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic){
	TimerSet(evid,time_ms);
     6d2:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <TimerSet>
}
     6d6:	08 95       	ret

000006d8 <sMC_unsetTimer>:
void sMC_unsetTimer(const sc_eventid evid) {
	TimerUnSet(evid);
     6d8:	0e 94 b7 0c 	call	0x196e	; 0x196e <TimerUnSet>
}
     6dc:	08 95       	ret

000006de <sMCIfaceRF_init>:

void sMCIfaceRF_init() {
	nrf24l01_init();
     6de:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <nrf24l01_init>
}
     6e2:	08 95       	ret

000006e4 <main>:

int main(void)
{
	uint8_t i;
	DDRC=0x0F;
     6e4:	8f e0       	ldi	r24, 0x0F	; 15
     6e6:	84 bb       	out	0x14, r24	; 20
	PORTC=0x0F;
     6e8:	85 bb       	out	0x15, r24	; 21
	l=malloc(sizeof(SMC*)) ;
     6ea:	82 e0       	ldi	r24, 0x02	; 2
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <malloc>
     6f2:	80 93 19 02 	sts	0x0219, r24
     6f6:	90 93 1a 02 	sts	0x021A, r25
	TimerInit();
     6fa:	0e 94 5f 0c 	call	0x18be	; 0x18be <TimerInit>
	sMC_init(l);
     6fe:	80 91 19 02 	lds	r24, 0x0219
     702:	90 91 1a 02 	lds	r25, 0x021A
     706:	0e 94 a2 07 	call	0xf44	; 0xf44 <sMC_init>
	sMC_enter(l);
     70a:	80 91 19 02 	lds	r24, 0x0219
     70e:	90 91 1a 02 	lds	r25, 0x021A
     712:	0e 94 a9 07 	call	0xf52	; 0xf52 <sMC_enter>
	
	//setup buffer
	for(i=0; i<sizeof(bufferout); i++)
	bufferout[i] = i+'a';
     716:	81 e6       	ldi	r24, 0x61	; 97
     718:	80 93 1b 02 	sts	0x021B, r24
     71c:	82 e6       	ldi	r24, 0x62	; 98
     71e:	80 93 1c 02 	sts	0x021C, r24
     722:	83 e6       	ldi	r24, 0x63	; 99
     724:	80 93 1d 02 	sts	0x021D, r24
     728:	84 e6       	ldi	r24, 0x64	; 100
     72a:	80 93 1e 02 	sts	0x021E, r24
     72e:	85 e6       	ldi	r24, 0x65	; 101
     730:	80 93 1f 02 	sts	0x021F, r24
     734:	86 e6       	ldi	r24, 0x66	; 102
     736:	80 93 20 02 	sts	0x0220, r24
     73a:	87 e6       	ldi	r24, 0x67	; 103
     73c:	80 93 21 02 	sts	0x0221, r24
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	80 93 22 02 	sts	0x0222, r24
     746:	89 e6       	ldi	r24, 0x69	; 105
     748:	80 93 23 02 	sts	0x0223, r24
     74c:	e0 e1       	ldi	r30, 0x10	; 16
     74e:	f2 e0       	ldi	r31, 0x02	; 2

void sMCIfaceRF_init() {
	nrf24l01_init();
}

int main(void)
     750:	cf 01       	movw	r24, r30
     752:	09 96       	adiw	r24, 0x09	; 9
	
	//setup buffer
	for(i=0; i<sizeof(bufferout); i++)
	bufferout[i] = i+'a';
	for(i=0; i<sizeof(bufferin); i++)
	bufferin[i] = 0;
     754:	11 92       	st	Z+, r1
	sMC_enter(l);
	
	//setup buffer
	for(i=0; i<sizeof(bufferout); i++)
	bufferout[i] = i+'a';
	for(i=0; i<sizeof(bufferin); i++)
     756:	e8 17       	cp	r30, r24
     758:	f9 07       	cpc	r31, r25
     75a:	e1 f7       	brne	.-8      	; 0x754 <main+0x70>
	
	uint8_t down=0;
	
	while(1)
	{
		sMC_runCycle(l);
     75c:	80 91 19 02 	lds	r24, 0x0219
     760:	90 91 1a 02 	lds	r25, 0x021A
     764:	0e 94 56 08 	call	0x10ac	; 0x10ac <sMC_runCycle>
     768:	f9 cf       	rjmp	.-14     	; 0x75c <main+0x78>

0000076a <__vector_16>:
	}
}

ISR (TIMER0_OVF_vect) {
     76a:	1f 92       	push	r1
     76c:	0f 92       	push	r0
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	0f 92       	push	r0
     772:	0b b6       	in	r0, 0x3b	; 59
     774:	0f 92       	push	r0
     776:	11 24       	eor	r1, r1
     778:	2f 93       	push	r18
     77a:	3f 93       	push	r19
     77c:	4f 93       	push	r20
     77e:	5f 93       	push	r21
     780:	6f 93       	push	r22
     782:	7f 93       	push	r23
     784:	8f 93       	push	r24
     786:	9f 93       	push	r25
     788:	af 93       	push	r26
     78a:	bf 93       	push	r27
     78c:	ef 93       	push	r30
     78e:	ff 93       	push	r31
	TCNT0=131;
     790:	83 e8       	ldi	r24, 0x83	; 131
     792:	82 bf       	out	0x32, r24	; 50
	TimerCheck(l);
     794:	80 91 19 02 	lds	r24, 0x0219
     798:	90 91 1a 02 	lds	r25, 0x021A
     79c:	0e 94 ed 0c 	call	0x19da	; 0x19da <TimerCheck>
     7a0:	ff 91       	pop	r31
     7a2:	ef 91       	pop	r30
     7a4:	bf 91       	pop	r27
     7a6:	af 91       	pop	r26
     7a8:	9f 91       	pop	r25
     7aa:	8f 91       	pop	r24
     7ac:	7f 91       	pop	r23
     7ae:	6f 91       	pop	r22
     7b0:	5f 91       	pop	r21
     7b2:	4f 91       	pop	r20
     7b4:	3f 91       	pop	r19
     7b6:	2f 91       	pop	r18
     7b8:	0f 90       	pop	r0
     7ba:	0b be       	out	0x3b, r0	; 59
     7bc:	0f 90       	pop	r0
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	0f 90       	pop	r0
     7c2:	1f 90       	pop	r1
     7c4:	18 95       	reti

000007c6 <nrf24l01_readregister>:

/*
 * read one register
 */
uint8_t nrf24l01_readregister(uint8_t reg) {
	nrf24l01_CSNlo; //low CSN
     7c6:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     7c8:	8f 71       	andi	r24, 0x1F	; 31
     7ca:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <spi_writereadbyte>
    uint8_t result = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
     7ce:	8f ef       	ldi	r24, 0xFF	; 255
     7d0:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <spi_writereadbyte>
    nrf24l01_CSNhi; //high CSN
     7d4:	ae 9a       	sbi	0x15, 6	; 21
    return result;
}
     7d6:	08 95       	ret

000007d8 <nrf24l01_readregisters>:

/*
 * read many registers
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
     7d8:	ff 92       	push	r15
     7da:	0f 93       	push	r16
     7dc:	1f 93       	push	r17
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	06 2f       	mov	r16, r22
     7e4:	f7 2e       	mov	r15, r23
     7e6:	14 2f       	mov	r17, r20
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
     7e8:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     7ea:	8f 71       	andi	r24, 0x1F	; 31
     7ec:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <spi_writereadbyte>
	for(i=0; i<len; i++)
     7f0:	11 23       	and	r17, r17
     7f2:	51 f0       	breq	.+20     	; 0x808 <nrf24l01_readregisters+0x30>
     7f4:	c0 2f       	mov	r28, r16
     7f6:	df 2d       	mov	r29, r15
     7f8:	00 e0       	ldi	r16, 0x00	; 0
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
     7fa:	8f ef       	ldi	r24, 0xFF	; 255
     7fc:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <spi_writereadbyte>
     800:	89 93       	st	Y+, r24
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     802:	0f 5f       	subi	r16, 0xFF	; 255
     804:	01 17       	cp	r16, r17
     806:	c9 f7       	brne	.-14     	; 0x7fa <nrf24l01_readregisters+0x22>
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
	nrf24l01_CSNhi; //high CSN
     808:	ae 9a       	sbi	0x15, 6	; 21
}
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	1f 91       	pop	r17
     810:	0f 91       	pop	r16
     812:	ff 90       	pop	r15
     814:	08 95       	ret

00000816 <nrf24l01_writeregister>:

/*
 * write one register
 */
void nrf24l01_writeregister(uint8_t reg, uint8_t value) {
     816:	cf 93       	push	r28
     818:	c6 2f       	mov	r28, r22
	nrf24l01_CSNlo; //low CSN
     81a:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     81c:	8f 71       	andi	r24, 0x1F	; 31
     81e:	80 62       	ori	r24, 0x20	; 32
     820:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <spi_writereadbyte>
	spi_writereadbyte(value); //write register
     824:	8c 2f       	mov	r24, r28
     826:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     82a:	ae 9a       	sbi	0x15, 6	; 21
}
     82c:	cf 91       	pop	r28
     82e:	08 95       	ret

00000830 <nrf24l01_writeregisters>:

/*
 * write many registers
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
     830:	ff 92       	push	r15
     832:	0f 93       	push	r16
     834:	1f 93       	push	r17
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	06 2f       	mov	r16, r22
     83c:	f7 2e       	mov	r15, r23
     83e:	14 2f       	mov	r17, r20
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
     840:	ae 98       	cbi	0x15, 6	; 21
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     842:	8f 71       	andi	r24, 0x1F	; 31
     844:	80 62       	ori	r24, 0x20	; 32
     846:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <spi_writereadbyte>
	for(i=0; i<len; i++)
     84a:	11 23       	and	r17, r17
     84c:	49 f0       	breq	.+18     	; 0x860 <nrf24l01_writeregisters+0x30>
     84e:	c0 2f       	mov	r28, r16
     850:	df 2d       	mov	r29, r15
     852:	00 e0       	ldi	r16, 0x00	; 0
		 spi_writereadbyte(value[i]); //write register
     854:	89 91       	ld	r24, Y+
     856:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <spi_writereadbyte>
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     85a:	0f 5f       	subi	r16, 0xFF	; 255
     85c:	01 17       	cp	r16, r17
     85e:	d1 f7       	brne	.-12     	; 0x854 <nrf24l01_writeregisters+0x24>
		 spi_writereadbyte(value[i]); //write register
	nrf24l01_CSNhi; //high CSN
     860:	ae 9a       	sbi	0x15, 6	; 21
}
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	1f 91       	pop	r17
     868:	0f 91       	pop	r16
     86a:	ff 90       	pop	r15
     86c:	08 95       	ret

0000086e <nrf24l01_revaddress>:

/*
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	04 96       	adiw	r24, 0x04	; 4
     874:	db 01       	movw	r26, r22
     876:	a2 0f       	add	r26, r18
     878:	b3 1f       	adc	r27, r19
     87a:	fc 01       	movw	r30, r24
     87c:	e2 1b       	sub	r30, r18
     87e:	f3 0b       	sbc	r31, r19
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
     880:	40 81       	ld	r20, Z
     882:	4c 93       	st	X, r20
     884:	2f 5f       	subi	r18, 0xFF	; 255
     886:	3f 4f       	sbci	r19, 0xFF	; 255
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
     888:	25 30       	cpi	r18, 0x05	; 5
     88a:	31 05       	cpc	r19, r1
     88c:	99 f7       	brne	.-26     	; 0x874 <nrf24l01_revaddress+0x6>
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
}
     88e:	08 95       	ret

00000890 <nrf24l01_setrxaddr>:

/*
 * set rx address
 */
void nrf24l01_setrxaddr(uint8_t pipe, uint8_t *addr) {
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	00 d0       	rcall	.+0      	; 0x896 <nrf24l01_setrxaddr+0x6>
     896:	00 d0       	rcall	.+0      	; 0x898 <nrf24l01_setrxaddr+0x8>
     898:	0f 92       	push	r0
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62
	if(pipe == 0) {
     89e:	88 23       	and	r24, r24
     8a0:	b1 f4       	brne	.+44     	; 0x8ce <nrf24l01_setrxaddr+0x3e>
		memcpy(&nrf24l01_addr0, addr, NRF24L01_ADDRSIZE); //cache address
     8a2:	a9 ed       	ldi	r26, 0xD9	; 217
     8a4:	b1 e0       	ldi	r27, 0x01	; 1
     8a6:	fb 01       	movw	r30, r22
     8a8:	85 e0       	ldi	r24, 0x05	; 5
     8aa:	01 90       	ld	r0, Z+
     8ac:	0d 92       	st	X+, r0
     8ae:	81 50       	subi	r24, 0x01	; 1
     8b0:	e1 f7       	brne	.-8      	; 0x8aa <nrf24l01_setrxaddr+0x1a>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     8b2:	cb 01       	movw	r24, r22
     8b4:	be 01       	movw	r22, r28
     8b6:	6f 5f       	subi	r22, 0xFF	; 255
     8b8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ba:	0e 94 37 04 	call	0x86e	; 0x86e <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE);
     8be:	8a e0       	ldi	r24, 0x0A	; 10
     8c0:	be 01       	movw	r22, r28
     8c2:	6f 5f       	subi	r22, 0xFF	; 255
     8c4:	7f 4f       	sbci	r23, 0xFF	; 255
     8c6:	45 e0       	ldi	r20, 0x05	; 5
     8c8:	0e 94 18 04 	call	0x830	; 0x830 <nrf24l01_writeregisters>
     8cc:	56 c0       	rjmp	.+172    	; 0x97a <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 1) {
     8ce:	81 30       	cpi	r24, 0x01	; 1
     8d0:	b1 f4       	brne	.+44     	; 0x8fe <nrf24l01_setrxaddr+0x6e>
		memcpy(&nrf24l01_addr1, addr, NRF24L01_ADDRSIZE); //cache address
     8d2:	ae ed       	ldi	r26, 0xDE	; 222
     8d4:	b1 e0       	ldi	r27, 0x01	; 1
     8d6:	fb 01       	movw	r30, r22
     8d8:	85 e0       	ldi	r24, 0x05	; 5
     8da:	01 90       	ld	r0, Z+
     8dc:	0d 92       	st	X+, r0
     8de:	81 50       	subi	r24, 0x01	; 1
     8e0:	e1 f7       	brne	.-8      	; 0x8da <nrf24l01_setrxaddr+0x4a>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     8e2:	cb 01       	movw	r24, r22
     8e4:	be 01       	movw	r22, r28
     8e6:	6f 5f       	subi	r22, 0xFF	; 255
     8e8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ea:	0e 94 37 04 	call	0x86e	; 0x86e <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P1, addrrev, NRF24L01_ADDRSIZE);
     8ee:	8b e0       	ldi	r24, 0x0B	; 11
     8f0:	be 01       	movw	r22, r28
     8f2:	6f 5f       	subi	r22, 0xFF	; 255
     8f4:	7f 4f       	sbci	r23, 0xFF	; 255
     8f6:	45 e0       	ldi	r20, 0x05	; 5
     8f8:	0e 94 18 04 	call	0x830	; 0x830 <nrf24l01_writeregisters>
     8fc:	3e c0       	rjmp	.+124    	; 0x97a <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 2) {
     8fe:	82 30       	cpi	r24, 0x02	; 2
     900:	71 f4       	brne	.+28     	; 0x91e <nrf24l01_setrxaddr+0x8e>
		memcpy(&nrf24l01_addr2, addr, NRF24L01_ADDRSIZE); //cache address
     902:	a3 ee       	ldi	r26, 0xE3	; 227
     904:	b1 e0       	ldi	r27, 0x01	; 1
     906:	fb 01       	movw	r30, r22
     908:	85 e0       	ldi	r24, 0x05	; 5
     90a:	01 90       	ld	r0, Z+
     90c:	0d 92       	st	X+, r0
     90e:	81 50       	subi	r24, 0x01	; 1
     910:	e1 f7       	brne	.-8      	; 0x90a <nrf24l01_setrxaddr+0x7a>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P2, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     912:	8c e0       	ldi	r24, 0x0C	; 12
     914:	fb 01       	movw	r30, r22
     916:	64 81       	ldd	r22, Z+4	; 0x04
     918:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
     91c:	2e c0       	rjmp	.+92     	; 0x97a <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 3) {
     91e:	83 30       	cpi	r24, 0x03	; 3
     920:	71 f4       	brne	.+28     	; 0x93e <nrf24l01_setrxaddr+0xae>
		memcpy(&nrf24l01_addr3, addr, NRF24L01_ADDRSIZE); //cache address
     922:	a8 ee       	ldi	r26, 0xE8	; 232
     924:	b1 e0       	ldi	r27, 0x01	; 1
     926:	fb 01       	movw	r30, r22
     928:	85 e0       	ldi	r24, 0x05	; 5
     92a:	01 90       	ld	r0, Z+
     92c:	0d 92       	st	X+, r0
     92e:	81 50       	subi	r24, 0x01	; 1
     930:	e1 f7       	brne	.-8      	; 0x92a <nrf24l01_setrxaddr+0x9a>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P3, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     932:	8d e0       	ldi	r24, 0x0D	; 13
     934:	fb 01       	movw	r30, r22
     936:	64 81       	ldd	r22, Z+4	; 0x04
     938:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
     93c:	1e c0       	rjmp	.+60     	; 0x97a <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 4) {
     93e:	84 30       	cpi	r24, 0x04	; 4
     940:	71 f4       	brne	.+28     	; 0x95e <nrf24l01_setrxaddr+0xce>
		memcpy(&nrf24l01_addr4, addr, NRF24L01_ADDRSIZE); //cache address
     942:	ad ee       	ldi	r26, 0xED	; 237
     944:	b1 e0       	ldi	r27, 0x01	; 1
     946:	fb 01       	movw	r30, r22
     948:	85 e0       	ldi	r24, 0x05	; 5
     94a:	01 90       	ld	r0, Z+
     94c:	0d 92       	st	X+, r0
     94e:	81 50       	subi	r24, 0x01	; 1
     950:	e1 f7       	brne	.-8      	; 0x94a <nrf24l01_setrxaddr+0xba>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P4, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     952:	8e e0       	ldi	r24, 0x0E	; 14
     954:	fb 01       	movw	r30, r22
     956:	64 81       	ldd	r22, Z+4	; 0x04
     958:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
     95c:	0e c0       	rjmp	.+28     	; 0x97a <nrf24l01_setrxaddr+0xea>
	} else if(pipe == 5) {
     95e:	85 30       	cpi	r24, 0x05	; 5
     960:	61 f4       	brne	.+24     	; 0x97a <nrf24l01_setrxaddr+0xea>
		memcpy(&nrf24l01_addr5, addr, NRF24L01_ADDRSIZE); //cache address
     962:	a2 ef       	ldi	r26, 0xF2	; 242
     964:	b1 e0       	ldi	r27, 0x01	; 1
     966:	fb 01       	movw	r30, r22
     968:	01 90       	ld	r0, Z+
     96a:	0d 92       	st	X+, r0
     96c:	81 50       	subi	r24, 0x01	; 1
     96e:	e1 f7       	brne	.-8      	; 0x968 <nrf24l01_setrxaddr+0xd8>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P5, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     970:	8f e0       	ldi	r24, 0x0F	; 15
     972:	fb 01       	movw	r30, r22
     974:	64 81       	ldd	r22, Z+4	; 0x04
     976:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
	}
}
     97a:	0f 90       	pop	r0
     97c:	0f 90       	pop	r0
     97e:	0f 90       	pop	r0
     980:	0f 90       	pop	r0
     982:	0f 90       	pop	r0
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	08 95       	ret

0000098a <nrf24l01_settxaddr>:

/*
 * set tx address
 */
void nrf24l01_settxaddr(uint8_t *addr) {
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	00 d0       	rcall	.+0      	; 0x990 <nrf24l01_settxaddr+0x6>
     990:	00 d0       	rcall	.+0      	; 0x992 <nrf24l01_settxaddr+0x8>
     992:	0f 92       	push	r0
     994:	cd b7       	in	r28, 0x3d	; 61
     996:	de b7       	in	r29, 0x3e	; 62
	memcpy(&nrf24l01_addrtx, addr, NRF24L01_ADDRSIZE); //cache address
     998:	a7 ef       	ldi	r26, 0xF7	; 247
     99a:	b1 e0       	ldi	r27, 0x01	; 1
     99c:	e8 2f       	mov	r30, r24
     99e:	f9 2f       	mov	r31, r25
     9a0:	25 e0       	ldi	r18, 0x05	; 5
     9a2:	01 90       	ld	r0, Z+
     9a4:	0d 92       	st	X+, r0
     9a6:	21 50       	subi	r18, 0x01	; 1
     9a8:	e1 f7       	brne	.-8      	; 0x9a2 <nrf24l01_settxaddr+0x18>
	uint8_t addrrev[NRF24L01_ADDRSIZE];
	nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     9aa:	be 01       	movw	r22, r28
     9ac:	6f 5f       	subi	r22, 0xFF	; 255
     9ae:	7f 4f       	sbci	r23, 0xFF	; 255
     9b0:	0e 94 37 04 	call	0x86e	; 0x86e <nrf24l01_revaddress>
	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE); //set rx address for ack on pipe 0
     9b4:	8a e0       	ldi	r24, 0x0A	; 10
     9b6:	be 01       	movw	r22, r28
     9b8:	6f 5f       	subi	r22, 0xFF	; 255
     9ba:	7f 4f       	sbci	r23, 0xFF	; 255
     9bc:	45 e0       	ldi	r20, 0x05	; 5
     9be:	0e 94 18 04 	call	0x830	; 0x830 <nrf24l01_writeregisters>
	nrf24l01_writeregisters(NRF24L01_REG_TX_ADDR, addrrev, NRF24L01_ADDRSIZE); //set tx address
     9c2:	80 e1       	ldi	r24, 0x10	; 16
     9c4:	be 01       	movw	r22, r28
     9c6:	6f 5f       	subi	r22, 0xFF	; 255
     9c8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ca:	45 e0       	ldi	r20, 0x05	; 5
     9cc:	0e 94 18 04 	call	0x830	; 0x830 <nrf24l01_writeregisters>
}
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
     9d4:	0f 90       	pop	r0
     9d6:	0f 90       	pop	r0
     9d8:	0f 90       	pop	r0
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	08 95       	ret

000009e0 <nrf24l01_flushRXfifo>:

/*
 * flush RX fifo
 */
void nrf24l01_flushRXfifo() {
	nrf24l01_CSNlo; //low CSN
     9e0:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_FLUSH_RX);
     9e2:	82 ee       	ldi	r24, 0xE2	; 226
     9e4:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     9e8:	ae 9a       	sbi	0x15, 6	; 21
}
     9ea:	08 95       	ret

000009ec <nrf24l01_flushTXfifo>:

/*
 * flush TX fifo
 */
void nrf24l01_flushTXfifo() {
	nrf24l01_CSNlo; //low CSN
     9ec:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_FLUSH_TX);
     9ee:	81 ee       	ldi	r24, 0xE1	; 225
     9f0:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     9f4:	ae 9a       	sbi	0x15, 6	; 21
}
     9f6:	08 95       	ret

000009f8 <nrf24l01_setRX>:

/*
 * set chip as RX
 */
void nrf24l01_setRX() {
	nrf24l01_setrxaddr(0, nrf24l01_addr0); //restore pipe 0 address
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	69 ed       	ldi	r22, 0xD9	; 217
     9fc:	71 e0       	ldi	r23, 0x01	; 1
     9fe:	0e 94 48 04 	call	0x890	; 0x890 <nrf24l01_setrxaddr>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PRIM_RX)); //prx mode
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <nrf24l01_readregister>
     a08:	68 2f       	mov	r22, r24
     a0a:	61 60       	ori	r22, 0x01	; 1
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <nrf24l01_readregister>
     a18:	68 2f       	mov	r22, r24
     a1a:	62 60       	ori	r22, 0x02	; 2
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     a22:	87 e0       	ldi	r24, 0x07	; 7
     a24:	60 e7       	ldi	r22, 0x70	; 112
     a26:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
	nrf24l01_flushRXfifo(); //flush rx fifo
     a2a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <nrf24l01_flushRXfifo>
	nrf24l01_flushTXfifo(); //flush tx fifo
     a2e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <nrf24l01_flushTXfifo>
	nrf24l01_CEhi; //start listening
     a32:	af 9a       	sbi	0x15, 7	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a34:	82 e3       	ldi	r24, 0x32	; 50
     a36:	8a 95       	dec	r24
     a38:	f1 f7       	brne	.-4      	; 0xa36 <nrf24l01_setRX+0x3e>
	_delay_us(150); //wait for the radio to power up
}
     a3a:	08 95       	ret

00000a3c <nrf24l01_setTX>:

/*
 * set chip as TX
 */
void nrf24l01_setTX() {
	nrf24l01_CElo; //stop listening
     a3c:	af 98       	cbi	0x15, 7	; 21
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PRIM_RX)); //ptx mode
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <nrf24l01_readregister>
     a44:	68 2f       	mov	r22, r24
     a46:	6e 7f       	andi	r22, 0xFE	; 254
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <nrf24l01_readregister>
     a54:	68 2f       	mov	r22, r24
     a56:	62 60       	ori	r22, 0x02	; 2
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     a5e:	87 e0       	ldi	r24, 0x07	; 7
     a60:	60 e7       	ldi	r22, 0x70	; 112
     a62:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
	nrf24l01_flushTXfifo(); //flush tx fifo
     a66:	0e 94 f6 04 	call	0x9ec	; 0x9ec <nrf24l01_flushTXfifo>
     a6a:	82 e3       	ldi	r24, 0x32	; 50
     a6c:	8a 95       	dec	r24
     a6e:	f1 f7       	brne	.-4      	; 0xa6c <nrf24l01_setTX+0x30>
	_delay_us(150); //wait for the radio to power up
}
     a70:	08 95       	ret

00000a72 <nrf24l01_getstatus>:
/*
 * get status register
 */
uint8_t nrf24l01_getstatus() {
	uint8_t status = 0;
	nrf24l01_CSNlo; //low CSN
     a72:	ae 98       	cbi	0x15, 6	; 21
	status = spi_writereadbyte(NRF24L01_CMD_NOP); //get status, send NOP request
     a74:	8f ef       	ldi	r24, 0xFF	; 255
     a76:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     a7a:	ae 9a       	sbi	0x15, 6	; 21
	return status;
}
     a7c:	08 95       	ret

00000a7e <nrf24l01_printinfo>:

#if NRF24L01_PRINTENABLE == 1
/*
 * print info
 */
void nrf24l01_printinfo(void(*prints)(const char *), void(*printc)(unsigned char data)) {
     a7e:	ef 92       	push	r14
     a80:	ff 92       	push	r15
     a82:	0f 93       	push	r16
     a84:	1f 93       	push	r17
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
     a8e:	c4 56       	subi	r28, 0x64	; 100
     a90:	d0 40       	sbci	r29, 0x00	; 0
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	f8 94       	cli
     a96:	de bf       	out	0x3e, r29	; 62
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	cd bf       	out	0x3d, r28	; 61
     a9c:	7c 01       	movw	r14, r24
	char buff[100];
	prints("info\r\n");
     a9e:	8f e5       	ldi	r24, 0x5F	; 95
     aa0:	91 e0       	ldi	r25, 0x01	; 1
     aa2:	f7 01       	movw	r30, r14
     aa4:	09 95       	icall
	sprintf(buff,"STATUS: %02X\r\n", nrf24l01_getstatus()); prints(buff);
     aa6:	0e 94 39 05 	call	0xa72	; 0xa72 <nrf24l01_getstatus>
     aaa:	00 d0       	rcall	.+0      	; 0xaac <nrf24l01_printinfo+0x2e>
     aac:	00 d0       	rcall	.+0      	; 0xaae <nrf24l01_printinfo+0x30>
     aae:	00 d0       	rcall	.+0      	; 0xab0 <nrf24l01_printinfo+0x32>
     ab0:	ed b7       	in	r30, 0x3d	; 61
     ab2:	fe b7       	in	r31, 0x3e	; 62
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	8e 01       	movw	r16, r28
     ab8:	0f 5f       	subi	r16, 0xFF	; 255
     aba:	1f 4f       	sbci	r17, 0xFF	; 255
     abc:	ad b7       	in	r26, 0x3d	; 61
     abe:	be b7       	in	r27, 0x3e	; 62
     ac0:	12 96       	adiw	r26, 0x02	; 2
     ac2:	1c 93       	st	X, r17
     ac4:	0e 93       	st	-X, r16
     ac6:	11 97       	sbiw	r26, 0x01	; 1
     ac8:	26 e6       	ldi	r18, 0x66	; 102
     aca:	31 e0       	ldi	r19, 0x01	; 1
     acc:	33 83       	std	Z+3, r19	; 0x03
     ace:	22 83       	std	Z+2, r18	; 0x02
     ad0:	84 83       	std	Z+4, r24	; 0x04
     ad2:	15 82       	std	Z+5, r1	; 0x05
     ad4:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <sprintf>
     ad8:	8d b7       	in	r24, 0x3d	; 61
     ada:	9e b7       	in	r25, 0x3e	; 62
     adc:	06 96       	adiw	r24, 0x06	; 6
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	f8 94       	cli
     ae2:	9e bf       	out	0x3e, r25	; 62
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	8d bf       	out	0x3d, r24	; 61
     ae8:	c8 01       	movw	r24, r16
     aea:	f7 01       	movw	r30, r14
     aec:	09 95       	icall
	sprintf(buff,"CONFIG: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_CONFIG)); prints(buff);
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <nrf24l01_readregister>
     af4:	00 d0       	rcall	.+0      	; 0xaf6 <nrf24l01_printinfo+0x78>
     af6:	00 d0       	rcall	.+0      	; 0xaf8 <nrf24l01_printinfo+0x7a>
     af8:	00 d0       	rcall	.+0      	; 0xafa <nrf24l01_printinfo+0x7c>
     afa:	ed b7       	in	r30, 0x3d	; 61
     afc:	fe b7       	in	r31, 0x3e	; 62
     afe:	31 96       	adiw	r30, 0x01	; 1
     b00:	ad b7       	in	r26, 0x3d	; 61
     b02:	be b7       	in	r27, 0x3e	; 62
     b04:	12 96       	adiw	r26, 0x02	; 2
     b06:	1c 93       	st	X, r17
     b08:	0e 93       	st	-X, r16
     b0a:	11 97       	sbiw	r26, 0x01	; 1
     b0c:	25 e7       	ldi	r18, 0x75	; 117
     b0e:	31 e0       	ldi	r19, 0x01	; 1
     b10:	33 83       	std	Z+3, r19	; 0x03
     b12:	22 83       	std	Z+2, r18	; 0x02
     b14:	84 83       	std	Z+4, r24	; 0x04
     b16:	15 82       	std	Z+5, r1	; 0x05
     b18:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <sprintf>
     b1c:	8d b7       	in	r24, 0x3d	; 61
     b1e:	9e b7       	in	r25, 0x3e	; 62
     b20:	06 96       	adiw	r24, 0x06	; 6
     b22:	0f b6       	in	r0, 0x3f	; 63
     b24:	f8 94       	cli
     b26:	9e bf       	out	0x3e, r25	; 62
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	8d bf       	out	0x3d, r24	; 61
     b2c:	c8 01       	movw	r24, r16
     b2e:	f7 01       	movw	r30, r14
     b30:	09 95       	icall
	sprintf(buff,"RF_CH: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_CH)); prints(buff);
     b32:	85 e0       	ldi	r24, 0x05	; 5
     b34:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <nrf24l01_readregister>
     b38:	00 d0       	rcall	.+0      	; 0xb3a <nrf24l01_printinfo+0xbc>
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <nrf24l01_printinfo+0xbe>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <nrf24l01_printinfo+0xc0>
     b3e:	ed b7       	in	r30, 0x3d	; 61
     b40:	fe b7       	in	r31, 0x3e	; 62
     b42:	31 96       	adiw	r30, 0x01	; 1
     b44:	ad b7       	in	r26, 0x3d	; 61
     b46:	be b7       	in	r27, 0x3e	; 62
     b48:	12 96       	adiw	r26, 0x02	; 2
     b4a:	1c 93       	st	X, r17
     b4c:	0e 93       	st	-X, r16
     b4e:	11 97       	sbiw	r26, 0x01	; 1
     b50:	24 e8       	ldi	r18, 0x84	; 132
     b52:	31 e0       	ldi	r19, 0x01	; 1
     b54:	33 83       	std	Z+3, r19	; 0x03
     b56:	22 83       	std	Z+2, r18	; 0x02
     b58:	84 83       	std	Z+4, r24	; 0x04
     b5a:	15 82       	std	Z+5, r1	; 0x05
     b5c:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <sprintf>
     b60:	8d b7       	in	r24, 0x3d	; 61
     b62:	9e b7       	in	r25, 0x3e	; 62
     b64:	06 96       	adiw	r24, 0x06	; 6
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	f8 94       	cli
     b6a:	9e bf       	out	0x3e, r25	; 62
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	8d bf       	out	0x3d, r24	; 61
     b70:	c8 01       	movw	r24, r16
     b72:	f7 01       	movw	r30, r14
     b74:	09 95       	icall
	sprintf(buff,"RF_SETUP: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_SETUP)); prints(buff);
     b76:	86 e0       	ldi	r24, 0x06	; 6
     b78:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <nrf24l01_readregister>
     b7c:	00 d0       	rcall	.+0      	; 0xb7e <nrf24l01_printinfo+0x100>
     b7e:	00 d0       	rcall	.+0      	; 0xb80 <nrf24l01_printinfo+0x102>
     b80:	00 d0       	rcall	.+0      	; 0xb82 <nrf24l01_printinfo+0x104>
     b82:	ed b7       	in	r30, 0x3d	; 61
     b84:	fe b7       	in	r31, 0x3e	; 62
     b86:	31 96       	adiw	r30, 0x01	; 1
     b88:	ad b7       	in	r26, 0x3d	; 61
     b8a:	be b7       	in	r27, 0x3e	; 62
     b8c:	12 96       	adiw	r26, 0x02	; 2
     b8e:	1c 93       	st	X, r17
     b90:	0e 93       	st	-X, r16
     b92:	11 97       	sbiw	r26, 0x01	; 1
     b94:	22 e9       	ldi	r18, 0x92	; 146
     b96:	31 e0       	ldi	r19, 0x01	; 1
     b98:	33 83       	std	Z+3, r19	; 0x03
     b9a:	22 83       	std	Z+2, r18	; 0x02
     b9c:	84 83       	std	Z+4, r24	; 0x04
     b9e:	15 82       	std	Z+5, r1	; 0x05
     ba0:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <sprintf>
     ba4:	8d b7       	in	r24, 0x3d	; 61
     ba6:	9e b7       	in	r25, 0x3e	; 62
     ba8:	06 96       	adiw	r24, 0x06	; 6
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	f8 94       	cli
     bae:	9e bf       	out	0x3e, r25	; 62
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	8d bf       	out	0x3d, r24	; 61
     bb4:	c8 01       	movw	r24, r16
     bb6:	f7 01       	movw	r30, r14
     bb8:	09 95       	icall
	sprintf(buff,"EN_AA: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_AA)); prints(buff);
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <nrf24l01_readregister>
     bc0:	00 d0       	rcall	.+0      	; 0xbc2 <nrf24l01_printinfo+0x144>
     bc2:	00 d0       	rcall	.+0      	; 0xbc4 <nrf24l01_printinfo+0x146>
     bc4:	00 d0       	rcall	.+0      	; 0xbc6 <nrf24l01_printinfo+0x148>
     bc6:	ed b7       	in	r30, 0x3d	; 61
     bc8:	fe b7       	in	r31, 0x3e	; 62
     bca:	31 96       	adiw	r30, 0x01	; 1
     bcc:	ad b7       	in	r26, 0x3d	; 61
     bce:	be b7       	in	r27, 0x3e	; 62
     bd0:	12 96       	adiw	r26, 0x02	; 2
     bd2:	1c 93       	st	X, r17
     bd4:	0e 93       	st	-X, r16
     bd6:	11 97       	sbiw	r26, 0x01	; 1
     bd8:	23 ea       	ldi	r18, 0xA3	; 163
     bda:	31 e0       	ldi	r19, 0x01	; 1
     bdc:	33 83       	std	Z+3, r19	; 0x03
     bde:	22 83       	std	Z+2, r18	; 0x02
     be0:	84 83       	std	Z+4, r24	; 0x04
     be2:	15 82       	std	Z+5, r1	; 0x05
     be4:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <sprintf>
     be8:	8d b7       	in	r24, 0x3d	; 61
     bea:	9e b7       	in	r25, 0x3e	; 62
     bec:	06 96       	adiw	r24, 0x06	; 6
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	f8 94       	cli
     bf2:	9e bf       	out	0x3e, r25	; 62
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	8d bf       	out	0x3d, r24	; 61
     bf8:	c8 01       	movw	r24, r16
     bfa:	f7 01       	movw	r30, r14
     bfc:	09 95       	icall
	sprintf(buff,"EN_RXADDR: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_RXADDR)); prints(buff);
     bfe:	82 e0       	ldi	r24, 0x02	; 2
     c00:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <nrf24l01_readregister>
     c04:	00 d0       	rcall	.+0      	; 0xc06 <nrf24l01_printinfo+0x188>
     c06:	00 d0       	rcall	.+0      	; 0xc08 <nrf24l01_printinfo+0x18a>
     c08:	00 d0       	rcall	.+0      	; 0xc0a <nrf24l01_printinfo+0x18c>
     c0a:	ed b7       	in	r30, 0x3d	; 61
     c0c:	fe b7       	in	r31, 0x3e	; 62
     c0e:	31 96       	adiw	r30, 0x01	; 1
     c10:	ad b7       	in	r26, 0x3d	; 61
     c12:	be b7       	in	r27, 0x3e	; 62
     c14:	12 96       	adiw	r26, 0x02	; 2
     c16:	1c 93       	st	X, r17
     c18:	0e 93       	st	-X, r16
     c1a:	11 97       	sbiw	r26, 0x01	; 1
     c1c:	21 eb       	ldi	r18, 0xB1	; 177
     c1e:	31 e0       	ldi	r19, 0x01	; 1
     c20:	33 83       	std	Z+3, r19	; 0x03
     c22:	22 83       	std	Z+2, r18	; 0x02
     c24:	84 83       	std	Z+4, r24	; 0x04
     c26:	15 82       	std	Z+5, r1	; 0x05
     c28:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <sprintf>
     c2c:	8d b7       	in	r24, 0x3d	; 61
     c2e:	9e b7       	in	r25, 0x3e	; 62
     c30:	06 96       	adiw	r24, 0x06	; 6
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	9e bf       	out	0x3e, r25	; 62
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	8d bf       	out	0x3d, r24	; 61
     c3c:	c8 01       	movw	r24, r16
     c3e:	f7 01       	movw	r30, r14
     c40:	09 95       	icall
	sprintf(buff,"OBSERVE_TX: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_OBSERVE_TX)); prints(buff);
     c42:	88 e0       	ldi	r24, 0x08	; 8
     c44:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <nrf24l01_readregister>
     c48:	00 d0       	rcall	.+0      	; 0xc4a <nrf24l01_printinfo+0x1cc>
     c4a:	00 d0       	rcall	.+0      	; 0xc4c <nrf24l01_printinfo+0x1ce>
     c4c:	00 d0       	rcall	.+0      	; 0xc4e <nrf24l01_printinfo+0x1d0>
     c4e:	ed b7       	in	r30, 0x3d	; 61
     c50:	fe b7       	in	r31, 0x3e	; 62
     c52:	31 96       	adiw	r30, 0x01	; 1
     c54:	ad b7       	in	r26, 0x3d	; 61
     c56:	be b7       	in	r27, 0x3e	; 62
     c58:	12 96       	adiw	r26, 0x02	; 2
     c5a:	1c 93       	st	X, r17
     c5c:	0e 93       	st	-X, r16
     c5e:	11 97       	sbiw	r26, 0x01	; 1
     c60:	23 ec       	ldi	r18, 0xC3	; 195
     c62:	31 e0       	ldi	r19, 0x01	; 1
     c64:	33 83       	std	Z+3, r19	; 0x03
     c66:	22 83       	std	Z+2, r18	; 0x02
     c68:	84 83       	std	Z+4, r24	; 0x04
     c6a:	15 82       	std	Z+5, r1	; 0x05
     c6c:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <sprintf>
     c70:	8d b7       	in	r24, 0x3d	; 61
     c72:	9e b7       	in	r25, 0x3e	; 62
     c74:	06 96       	adiw	r24, 0x06	; 6
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	f8 94       	cli
     c7a:	9e bf       	out	0x3e, r25	; 62
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	8d bf       	out	0x3d, r24	; 61
     c80:	c8 01       	movw	r24, r16
     c82:	f7 01       	movw	r30, r14
     c84:	09 95       	icall
	prints("\r\n");
     c86:	86 ed       	ldi	r24, 0xD6	; 214
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	f7 01       	movw	r30, r14
     c8c:	09 95       	icall
}
     c8e:	cc 59       	subi	r28, 0x9C	; 156
     c90:	df 4f       	sbci	r29, 0xFF	; 255
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	f8 94       	cli
     c96:	de bf       	out	0x3e, r29	; 62
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	cd bf       	out	0x3d, r28	; 61
     c9c:	df 91       	pop	r29
     c9e:	cf 91       	pop	r28
     ca0:	1f 91       	pop	r17
     ca2:	0f 91       	pop	r16
     ca4:	ff 90       	pop	r15
     ca6:	ef 90       	pop	r14
     ca8:	08 95       	ret

00000caa <nrf24l01_readready>:
}

/*
 * check if there is data ready
 */
uint8_t nrf24l01_readready(uint8_t* pipe) {
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	ec 01       	movw	r28, r24
    uint8_t status = nrf24l01_getstatus();
     cb0:	0e 94 39 05 	call	0xa72	; 0xa72 <nrf24l01_getstatus>
    uint8_t ret = status & (1<<NRF24L01_REG_RX_DR);
    if(ret) {
     cb4:	98 2f       	mov	r25, r24
     cb6:	90 74       	andi	r25, 0x40	; 64
     cb8:	86 ff       	sbrs	r24, 6
     cba:	05 c0       	rjmp	.+10     	; 0xcc6 <nrf24l01_readready+0x1c>
		//get the pipe number
		if(pipe)
     cbc:	20 97       	sbiw	r28, 0x00	; 0
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <nrf24l01_readready+0x1c>
			*pipe = (status >> NRF24L01_REG_RX_P_NO) & 0b111;
     cc0:	86 95       	lsr	r24
     cc2:	87 70       	andi	r24, 0x07	; 7
     cc4:	88 83       	st	Y, r24
    }
    return ret;
}
     cc6:	89 2f       	mov	r24, r25
     cc8:	df 91       	pop	r29
     cca:	cf 91       	pop	r28
     ccc:	08 95       	ret

00000cce <nrf24l01_read>:

/*
 * get data
 */
void nrf24l01_read(uint8_t pipe,uint8_t *data) {
     cce:	0f 93       	push	r16
     cd0:	1f 93       	push	r17
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	06 2f       	mov	r16, r22
     cd8:	17 2f       	mov	r17, r23
	uint8_t i = 0;
	//read rx register
	nrf24l01_CSNlo; //low CSN
     cda:	ae 98       	cbi	0x15, 6	; 21
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
     cdc:	81 e6       	ldi	r24, 0x61	; 97
     cde:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <spi_writereadbyte>
     ce2:	c0 2f       	mov	r28, r16
     ce4:	d1 2f       	mov	r29, r17
	//Thay doi lai command, lay PAYLOAD va write ACK
	//spi_writereadbyte(NRF24L01_CMD_W_ACK_PAYLOAD | pipe);
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     ce6:	10 e0       	ldi	r17, 0x00	; 0
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
     ce8:	8f ef       	ldi	r24, 0xFF	; 255
     cea:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <spi_writereadbyte>
     cee:	89 93       	st	Y+, r24
	//read rx register
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
	//Thay doi lai command, lay PAYLOAD va write ACK
	//spi_writereadbyte(NRF24L01_CMD_W_ACK_PAYLOAD | pipe);
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     cf0:	1f 5f       	subi	r17, 0xFF	; 255
     cf2:	19 30       	cpi	r17, 0x09	; 9
     cf4:	c9 f7       	brne	.-14     	; 0xce8 <nrf24l01_read+0x1a>
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
    nrf24l01_CSNhi; //high CSN
     cf6:	ae 9a       	sbi	0x15, 6	; 21
    //reset register
    nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR));
     cf8:	87 e0       	ldi	r24, 0x07	; 7
     cfa:	60 e4       	ldi	r22, 0x40	; 64
     cfc:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
    //handle ack payload receipt
	if (nrf24l01_getstatus() & (1<<NRF24L01_REG_TX_DS))
     d00:	0e 94 39 05 	call	0xa72	; 0xa72 <nrf24l01_getstatus>
     d04:	85 ff       	sbrs	r24, 5
     d06:	04 c0       	rjmp	.+8      	; 0xd10 <nrf24l01_read+0x42>
		nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_TX_DS));
     d08:	87 e0       	ldi	r24, 0x07	; 7
     d0a:	60 e2       	ldi	r22, 0x20	; 32
     d0c:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
}
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	1f 91       	pop	r17
     d16:	0f 91       	pop	r16
     d18:	08 95       	ret

00000d1a <nrf24l01_write>:

/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
     d1a:	0f 93       	push	r16
     d1c:	1f 93       	push	r17
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	08 2f       	mov	r16, r24
     d24:	19 2f       	mov	r17, r25
	uint8_t i = 0;
	uint8_t ret = 0;

	//set tx mode
	nrf24l01_setTX();
     d26:	0e 94 1e 05 	call	0xa3c	; 0xa3c <nrf24l01_setTX>

	//write data
	nrf24l01_CSNlo; //low CSN
     d2a:	ae 98       	cbi	0x15, 6	; 21
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
     d2c:	80 ea       	ldi	r24, 0xA0	; 160
     d2e:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <spi_writereadbyte>
     d32:	c0 2f       	mov	r28, r16
     d34:	d1 2f       	mov	r29, r17
     d36:	19 e0       	ldi	r17, 0x09	; 9
	for (i=0; i<NRF24L01_PAYLOAD; i++)
		spi_writereadbyte(data[i]);
     d38:	89 91       	ld	r24, Y+
     d3a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <spi_writereadbyte>
     d3e:	11 50       	subi	r17, 0x01	; 1
	nrf24l01_setTX();

	//write data
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
	for (i=0; i<NRF24L01_PAYLOAD; i++)
     d40:	d9 f7       	brne	.-10     	; 0xd38 <nrf24l01_write+0x1e>
		spi_writereadbyte(data[i]);
	nrf24l01_CSNhi; //high CSN
     d42:	ae 9a       	sbi	0x15, 6	; 21

	//start transmission
	nrf24l01_CEhi; //high CE
     d44:	af 9a       	sbi	0x15, 7	; 21
     d46:	85 e0       	ldi	r24, 0x05	; 5
     d48:	8a 95       	dec	r24
     d4a:	f1 f7       	brne	.-4      	; 0xd48 <nrf24l01_write+0x2e>
	_delay_us(15);
	nrf24l01_CElo; //low CE
     d4c:	af 98       	cbi	0x15, 7	; 21
     d4e:	83 e0       	ldi	r24, 0x03	; 3
     d50:	8a 95       	dec	r24
     d52:	f1 f7       	brne	.-4      	; 0xd50 <nrf24l01_write+0x36>
     d54:	00 00       	nop

	//stop if max_retries reached or send is ok
	do {
		_delay_us(10);
	}
	while( !(nrf24l01_getstatus() & (1<<NRF24L01_REG_MAX_RT | 1<<NRF24L01_REG_TX_DS)) );
     d56:	0e 94 39 05 	call	0xa72	; 0xa72 <nrf24l01_getstatus>
     d5a:	80 73       	andi	r24, 0x30	; 48
     d5c:	c1 f3       	breq	.-16     	; 0xd4e <nrf24l01_write+0x34>

	if(nrf24l01_getstatus() & 1<<NRF24L01_REG_TX_DS)
     d5e:	0e 94 39 05 	call	0xa72	; 0xa72 <nrf24l01_getstatus>
     d62:	c8 2f       	mov	r28, r24
		ret = 1;

	//reset PLOS_CNT
	nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH);
     d64:	85 e0       	ldi	r24, 0x05	; 5
     d66:	6c e4       	ldi	r22, 0x4C	; 76
     d68:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>

	//power down
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PWR_UP));
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <nrf24l01_readregister>
     d72:	68 2f       	mov	r22, r24
     d74:	6d 7f       	andi	r22, 0xFD	; 253
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>

	//set rx mode
	nrf24l01_setRX();
     d7c:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <nrf24l01_setRX>
/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
	uint8_t i = 0;
	uint8_t ret = 0;
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	c5 ff       	sbrs	r28, 5
     d84:	80 e0       	ldi	r24, 0x00	; 0

	//set rx mode
	nrf24l01_setRX();

	return ret;
}
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
     d8a:	1f 91       	pop	r17
     d8c:	0f 91       	pop	r16
     d8e:	08 95       	ret

00000d90 <nrf24l01_setpalevel>:

/*
 * set power level
 */
void nrf24l01_setpalevel() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP);
     d90:	86 e0       	ldi	r24, 0x06	; 6
     d92:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <nrf24l01_readregister>
  setup &= ~((1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH));

  if (NRF24L01_RF24_PA == NRF24L01_RF24_PA_MAX) {
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
     d96:	68 2f       	mov	r22, r24
     d98:	66 60       	ori	r22, 0x06	; 6
  } else {
	  //default is max power
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     d9a:	86 e0       	ldi	r24, 0x06	; 6
     d9c:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
}
     da0:	08 95       	ret

00000da2 <nrf24l01_setdatarate>:

/*
 * set datarate
 */
void nrf24l01_setdatarate() {
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP) ;
     da2:	86 e0       	ldi	r24, 0x06	; 6
     da4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <nrf24l01_readregister>

  setup &= ~((1<<NRF24L01_REG_RF_DR_LOW) | (1<<NRF24L01_REG_RF_DR_HIGH));
     da8:	68 2f       	mov	r22, r24
     daa:	67 7d       	andi	r22, 0xD7	; 215
    } else {
    	//default is 1Mbps
    }
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
     dac:	86 e0       	ldi	r24, 0x06	; 6
     dae:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
}
     db2:	08 95       	ret

00000db4 <nrf24l01_setcrclength>:

/*
 * set crc length
 */
void nrf24l01_setcrclength() {
  uint8_t config = nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~((1<<NRF24L01_REG_CRCO) | (1<<NRF24L01_REG_EN_CRC));
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <nrf24l01_readregister>
	  //nothing
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_8) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_16) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
	  config |= (1<<NRF24L01_REG_CRCO);
     dba:	68 2f       	mov	r22, r24
     dbc:	6c 60       	ori	r22, 0x0C	; 12
  } else {
	  //default is disabled
  }

  nrf24l01_writeregister(NRF24L01_REG_CONFIG, config);
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
}
     dc4:	08 95       	ret

00000dc6 <nrf24l01_init>:
/*
 * init nrf24l01
 */
void nrf24l01_init() {
	//setup port
	NRF24L01_DDR |= (1<<NRF24L01_CSN); //output
     dc6:	a6 9a       	sbi	0x14, 6	; 20
	NRF24L01_DDR |= (1<<NRF24L01_CE); //output
     dc8:	a7 9a       	sbi	0x14, 7	; 20

    spi_init(); //init spi
     dca:	0e 94 4f 0c 	call	0x189e	; 0x189e <spi_init>

    nrf24l01_CElo; //low CE
     dce:	af 98       	cbi	0x15, 7	; 21
    nrf24l01_CSNhi; //high CSN
     dd0:	ae 9a       	sbi	0x15, 6	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     dd2:	81 ee       	ldi	r24, 0xE1	; 225
     dd4:	94 e0       	ldi	r25, 0x04	; 4
     dd6:	01 97       	sbiw	r24, 0x01	; 1
     dd8:	f1 f7       	brne	.-4      	; 0xdd6 <nrf24l01_init+0x10>
     dda:	00 c0       	rjmp	.+0      	; 0xddc <nrf24l01_init+0x16>
     ddc:	00 00       	nop

    _delay_ms(5); //wait for the radio to init

    nrf24l01_setpalevel(); //set power level
     dde:	0e 94 c8 06 	call	0xd90	; 0xd90 <nrf24l01_setpalevel>
    nrf24l01_setdatarate(); //set data rate
     de2:	0e 94 d1 06 	call	0xda2	; 0xda2 <nrf24l01_setdatarate>
    nrf24l01_setcrclength(); //set crc length
     de6:	0e 94 da 06 	call	0xdb4	; 0xdb4 <nrf24l01_setcrclength>
    nrf24l01_writeregister(NRF24L01_REG_SETUP_RETR, NRF24L01_RETR); // set retries
     dea:	84 e0       	ldi	r24, 0x04	; 4
     dec:	67 e4       	ldi	r22, 0x47	; 71
     dee:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_DYNPD, 0); //disable dynamic payloads
     df2:	8c e1       	ldi	r24, 0x1C	; 28
     df4:	60 e0       	ldi	r22, 0x00	; 0
     df6:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH); //set RF channel
     dfa:	85 e0       	ldi	r24, 0x05	; 5
     dfc:	6c e4       	ldi	r22, 0x4C	; 76
     dfe:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>

	//payload size
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P0, NRF24L01_PAYLOAD);
     e02:	81 e1       	ldi	r24, 0x11	; 17
     e04:	69 e0       	ldi	r22, 0x09	; 9
     e06:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P1, NRF24L01_PAYLOAD);
     e0a:	82 e1       	ldi	r24, 0x12	; 18
     e0c:	69 e0       	ldi	r22, 0x09	; 9
     e0e:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P2, NRF24L01_PAYLOAD);
     e12:	83 e1       	ldi	r24, 0x13	; 19
     e14:	69 e0       	ldi	r22, 0x09	; 9
     e16:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P3, NRF24L01_PAYLOAD);
     e1a:	84 e1       	ldi	r24, 0x14	; 20
     e1c:	69 e0       	ldi	r22, 0x09	; 9
     e1e:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P4, NRF24L01_PAYLOAD);
     e22:	85 e1       	ldi	r24, 0x15	; 21
     e24:	69 e0       	ldi	r22, 0x09	; 9
     e26:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P5, NRF24L01_PAYLOAD);
     e2a:	86 e1       	ldi	r24, 0x16	; 22
     e2c:	69 e0       	ldi	r22, 0x09	; 9
     e2e:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
	#endif

	//enable pipe
	nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, 0);
     e32:	82 e0       	ldi	r24, 0x02	; 2
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P0));
     e3a:	82 e0       	ldi	r24, 0x02	; 2
     e3c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <nrf24l01_readregister>
     e40:	68 2f       	mov	r22, r24
     e42:	61 60       	ori	r22, 0x01	; 1
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P1));
     e4a:	82 e0       	ldi	r24, 0x02	; 2
     e4c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <nrf24l01_readregister>
     e50:	68 2f       	mov	r22, r24
     e52:	62 60       	ori	r22, 0x02	; 2
     e54:	82 e0       	ldi	r24, 0x02	; 2
     e56:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P2));
     e5a:	82 e0       	ldi	r24, 0x02	; 2
     e5c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <nrf24l01_readregister>
     e60:	68 2f       	mov	r22, r24
     e62:	64 60       	ori	r22, 0x04	; 4
     e64:	82 e0       	ldi	r24, 0x02	; 2
     e66:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P3));
     e6a:	82 e0       	ldi	r24, 0x02	; 2
     e6c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <nrf24l01_readregister>
     e70:	68 2f       	mov	r22, r24
     e72:	68 60       	ori	r22, 0x08	; 8
     e74:	82 e0       	ldi	r24, 0x02	; 2
     e76:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P4));
     e7a:	82 e0       	ldi	r24, 0x02	; 2
     e7c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <nrf24l01_readregister>
     e80:	68 2f       	mov	r22, r24
     e82:	60 61       	ori	r22, 0x10	; 16
     e84:	82 e0       	ldi	r24, 0x02	; 2
     e86:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P5));
     e8a:	82 e0       	ldi	r24, 0x02	; 2
     e8c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <nrf24l01_readregister>
     e90:	68 2f       	mov	r22, r24
     e92:	60 62       	ori	r22, 0x20	; 32
     e94:	82 e0       	ldi	r24, 0x02	; 2
     e96:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
	#endif

	//auto ack
	#if NRF24L01_ACK == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P0));
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <nrf24l01_readregister>
     ea0:	68 2f       	mov	r22, r24
     ea2:	61 60       	ori	r22, 0x01	; 1
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P1));
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <nrf24l01_readregister>
     eb0:	68 2f       	mov	r22, r24
     eb2:	62 60       	ori	r22, 0x02	; 2
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P2));
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <nrf24l01_readregister>
     ec0:	68 2f       	mov	r22, r24
     ec2:	64 60       	ori	r22, 0x04	; 4
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P3));
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <nrf24l01_readregister>
     ed0:	68 2f       	mov	r22, r24
     ed2:	68 60       	ori	r22, 0x08	; 8
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P4));
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <nrf24l01_readregister>
     ee0:	68 2f       	mov	r22, r24
     ee2:	60 61       	ori	r22, 0x10	; 16
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P5));
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <nrf24l01_readregister>
     ef0:	68 2f       	mov	r22, r24
     ef2:	60 62       	ori	r22, 0x20	; 32
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	0e 94 0b 04 	call	0x816	; 0x816 <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P4));
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P5));
	#endif

	//rx address
	nrf24l01_setrxaddr(0, nrf24l01_addr0);
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	69 ed       	ldi	r22, 0xD9	; 217
     efe:	71 e0       	ldi	r23, 0x01	; 1
     f00:	0e 94 48 04 	call	0x890	; 0x890 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(1, nrf24l01_addr1);
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	6e ed       	ldi	r22, 0xDE	; 222
     f08:	71 e0       	ldi	r23, 0x01	; 1
     f0a:	0e 94 48 04 	call	0x890	; 0x890 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(2, nrf24l01_addr2);
     f0e:	82 e0       	ldi	r24, 0x02	; 2
     f10:	63 ee       	ldi	r22, 0xE3	; 227
     f12:	71 e0       	ldi	r23, 0x01	; 1
     f14:	0e 94 48 04 	call	0x890	; 0x890 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(3, nrf24l01_addr3);
     f18:	83 e0       	ldi	r24, 0x03	; 3
     f1a:	68 ee       	ldi	r22, 0xE8	; 232
     f1c:	71 e0       	ldi	r23, 0x01	; 1
     f1e:	0e 94 48 04 	call	0x890	; 0x890 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(4, nrf24l01_addr4);
     f22:	84 e0       	ldi	r24, 0x04	; 4
     f24:	6d ee       	ldi	r22, 0xED	; 237
     f26:	71 e0       	ldi	r23, 0x01	; 1
     f28:	0e 94 48 04 	call	0x890	; 0x890 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(5, nrf24l01_addr5);
     f2c:	85 e0       	ldi	r24, 0x05	; 5
     f2e:	62 ef       	ldi	r22, 0xF2	; 242
     f30:	71 e0       	ldi	r23, 0x01	; 1
     f32:	0e 94 48 04 	call	0x890	; 0x890 <nrf24l01_setrxaddr>

	//tx address
	nrf24l01_settxaddr(nrf24l01_addrtx);
     f36:	87 ef       	ldi	r24, 0xF7	; 247
     f38:	91 e0       	ldi	r25, 0x01	; 1
     f3a:	0e 94 c5 04 	call	0x98a	; 0x98a <nrf24l01_settxaddr>

	//set rx mode
	nrf24l01_setRX();
     f3e:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <nrf24l01_setRX>
}
     f42:	08 95       	ret

00000f44 <sMC_init>:
static void clearInEvents(SMC* handle);
static void clearOutEvents(SMC* handle);


void sMC_init(SMC* handle)
{
     f44:	fc 01       	movw	r30, r24
	int i;

	for (i = 0; i < SMC_MAX_ORTHOGONAL_STATES; ++i)
		handle->stateConfVector[i] = SMC_last_state;
     f46:	83 e1       	ldi	r24, 0x13	; 19
     f48:	80 83       	st	Z, r24
     f4a:	81 83       	std	Z+1, r24	; 0x01
	
	
	handle->stateConfVectorPosition = 0;
     f4c:	13 82       	std	Z+3, r1	; 0x03
     f4e:	12 82       	std	Z+2, r1	; 0x02

	// TODO: initialize all events ...
	// TODO: initialize all variables ... (set default values - here or inenter sequence ?!?)

}
     f50:	08 95       	ret

00000f52 <sMC_enter>:

void sMC_enter(SMC* handle)
{
     f52:	1f 93       	push	r17
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	ec 01       	movw	r28, r24
	sMC_entryaction(handle);
	/* Default enter sequence for region main region */
	/* Default react sequence for initial entry  */
	/* Default enter sequence for state On */
	/* Entry action for state 'On'. */
	handle->iface.lightOn = bool_true;
     f5a:	11 e0       	ldi	r17, 0x01	; 1
     f5c:	1d a7       	lds	r17, 0x7d
	/* Default enter sequence for region r1 */
	/* Default react sequence for initial entry  */
	/* Default enter sequence for state Init */
	/* Entry action for state 'Init'. */
	sMCIfaceLCD_init();
     f5e:	0e 94 36 02 	call	0x46c	; 0x46c <sMCIfaceLCD_init>
	sMCIfaceRF_init();
     f62:	0e 94 6f 03 	call	0x6de	; 0x6de <sMCIfaceRF_init>
	sMCIfaceKEYPAD_init();
     f66:	0e 94 f7 01 	call	0x3ee	; 0x3ee <sMCIfaceKEYPAD_init>
	handle->stateConfVector[0] = SMC_main_region_On_r1_Init;
     f6a:	18 83       	st	Y, r17
	handle->stateConfVectorPosition = 0;
     f6c:	1b 82       	std	Y+3, r1	; 0x03
     f6e:	1a 82       	std	Y+2, r1	; 0x02
}
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	1f 91       	pop	r17
     f76:	08 95       	ret

00000f78 <sMC_exit>:

void sMC_exit(SMC* handle)
{
     f78:	fc 01       	movw	r30, r24
	/* Default exit sequence for statechart SMC */
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of main region) at position 0... */
	switch(handle->stateConfVector[ 0 ]) {
     f7a:	80 81       	ld	r24, Z
     f7c:	83 30       	cpi	r24, 0x03	; 3
     f7e:	49 f0       	breq	.+18     	; 0xf92 <sMC_exit+0x1a>
     f80:	84 30       	cpi	r24, 0x04	; 4
     f82:	61 f0       	breq	.+24     	; 0xf9c <sMC_exit+0x24>
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	71 f4       	brne	.+28     	; 0xfa4 <sMC_exit+0x2c>
		case SMC_main_region_On_r1_Init : {
			/* Default exit sequence for state Init */
			handle->stateConfVector[0] = SMC_last_state;
     f88:	83 e1       	ldi	r24, 0x13	; 19
     f8a:	80 83       	st	Z, r24
			handle->stateConfVectorPosition = 0;
     f8c:	13 82       	std	Z+3, r1	; 0x03
     f8e:	12 82       	std	Z+2, r1	; 0x02
			break;
     f90:	09 c0       	rjmp	.+18     	; 0xfa4 <sMC_exit+0x2c>
		}
		case SMC_main_region_On_r1_Running_keypad_CheckKey : {
			/* Default exit sequence for state CheckKey */
			handle->stateConfVector[0] = SMC_last_state;
     f92:	83 e1       	ldi	r24, 0x13	; 19
     f94:	80 83       	st	Z, r24
			handle->stateConfVectorPosition = 0;
     f96:	13 82       	std	Z+3, r1	; 0x03
     f98:	12 82       	std	Z+2, r1	; 0x02
			break;
     f9a:	04 c0       	rjmp	.+8      	; 0xfa4 <sMC_exit+0x2c>
		}
		case SMC_main_region_On_r1_Running_keypad_CheckKeyDown : {
			/* Default exit sequence for state CheckKeyDown */
			handle->stateConfVector[0] = SMC_last_state;
     f9c:	83 e1       	ldi	r24, 0x13	; 19
     f9e:	80 83       	st	Z, r24
			handle->stateConfVectorPosition = 0;
     fa0:	13 82       	std	Z+3, r1	; 0x03
     fa2:	12 82       	std	Z+2, r1	; 0x02
			break;
		}
		default: break;
	}
	/* Handle exit of all possible states (of main region) at position 1... */
	switch(handle->stateConfVector[ 1 ]) {
     fa4:	81 81       	ldd	r24, Z+1	; 0x01
     fa6:	8b 30       	cpi	r24, 0x0B	; 11
     fa8:	09 f4       	brne	.+2      	; 0xfac <sMC_exit+0x34>
     faa:	4a c0       	rjmp	.+148    	; 0x1040 <sMC_exit+0xc8>
     fac:	8c 30       	cpi	r24, 0x0C	; 12
     fae:	80 f4       	brcc	.+32     	; 0xfd0 <sMC_exit+0x58>
     fb0:	87 30       	cpi	r24, 0x07	; 7
     fb2:	89 f1       	breq	.+98     	; 0x1016 <sMC_exit+0x9e>
     fb4:	88 30       	cpi	r24, 0x08	; 8
     fb6:	30 f4       	brcc	.+12     	; 0xfc4 <sMC_exit+0x4c>
     fb8:	85 30       	cpi	r24, 0x05	; 5
     fba:	f9 f0       	breq	.+62     	; 0xffa <sMC_exit+0x82>
     fbc:	86 30       	cpi	r24, 0x06	; 6
     fbe:	09 f0       	breq	.+2      	; 0xfc2 <sMC_exit+0x4a>
     fc0:	74 c0       	rjmp	.+232    	; 0x10aa <sMC_exit+0x132>
     fc2:	22 c0       	rjmp	.+68     	; 0x1008 <sMC_exit+0x90>
     fc4:	88 30       	cpi	r24, 0x08	; 8
     fc6:	71 f1       	breq	.+92     	; 0x1024 <sMC_exit+0xac>
     fc8:	8a 30       	cpi	r24, 0x0A	; 10
     fca:	09 f0       	breq	.+2      	; 0xfce <sMC_exit+0x56>
     fcc:	6e c0       	rjmp	.+220    	; 0x10aa <sMC_exit+0x132>
     fce:	31 c0       	rjmp	.+98     	; 0x1032 <sMC_exit+0xba>
     fd0:	8f 30       	cpi	r24, 0x0F	; 15
     fd2:	09 f4       	brne	.+2      	; 0xfd6 <sMC_exit+0x5e>
     fd4:	4a c0       	rjmp	.+148    	; 0x106a <sMC_exit+0xf2>
     fd6:	80 31       	cpi	r24, 0x10	; 16
     fd8:	30 f4       	brcc	.+12     	; 0xfe6 <sMC_exit+0x6e>
     fda:	8c 30       	cpi	r24, 0x0C	; 12
     fdc:	c1 f1       	breq	.+112    	; 0x104e <sMC_exit+0xd6>
     fde:	8e 30       	cpi	r24, 0x0E	; 14
     fe0:	09 f0       	breq	.+2      	; 0xfe4 <sMC_exit+0x6c>
     fe2:	63 c0       	rjmp	.+198    	; 0x10aa <sMC_exit+0x132>
     fe4:	3b c0       	rjmp	.+118    	; 0x105c <sMC_exit+0xe4>
     fe6:	81 31       	cpi	r24, 0x11	; 17
     fe8:	09 f4       	brne	.+2      	; 0xfec <sMC_exit+0x74>
     fea:	52 c0       	rjmp	.+164    	; 0x1090 <sMC_exit+0x118>
     fec:	81 31       	cpi	r24, 0x11	; 17
     fee:	08 f4       	brcc	.+2      	; 0xff2 <sMC_exit+0x7a>
     ff0:	43 c0       	rjmp	.+134    	; 0x1078 <sMC_exit+0x100>
     ff2:	82 31       	cpi	r24, 0x12	; 18
     ff4:	09 f0       	breq	.+2      	; 0xff8 <sMC_exit+0x80>
     ff6:	59 c0       	rjmp	.+178    	; 0x10aa <sMC_exit+0x132>
     ff8:	52 c0       	rjmp	.+164    	; 0x109e <sMC_exit+0x126>
		case SMC_main_region_On_r1_Running_running_main_WaitingForRequest : {
			/* Default exit sequence for state WaitingForRequest */
			handle->stateConfVector[1] = SMC_last_state;
     ffa:	83 e1       	ldi	r24, 0x13	; 19
     ffc:	81 83       	std	Z+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	93 83       	std	Z+3, r25	; 0x03
    1004:	82 83       	std	Z+2, r24	; 0x02
			break;
    1006:	08 95       	ret
		}
		case SMC_main_region_On_r1_Running_running_main_CheckKeyPress : {
			/* Default exit sequence for state CheckKeyPress */
			handle->stateConfVector[1] = SMC_last_state;
    1008:	83 e1       	ldi	r24, 0x13	; 19
    100a:	81 83       	std	Z+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	93 83       	std	Z+3, r25	; 0x03
    1012:	82 83       	std	Z+2, r24	; 0x02
			break;
    1014:	08 95       	ret
		}
		case SMC_main_region_On_r1_Running_running_main_FinishDish : {
			/* Default exit sequence for state FinishDish */
			handle->stateConfVector[1] = SMC_last_state;
    1016:	83 e1       	ldi	r24, 0x13	; 19
    1018:	81 83       	std	Z+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	93 83       	std	Z+3, r25	; 0x03
    1020:	82 83       	std	Z+2, r24	; 0x02
			break;
    1022:	08 95       	ret
		}
		case SMC_main_region_On_r1_Running_running_main_CancelDish : {
			/* Default exit sequence for state CancelDish */
			handle->stateConfVector[1] = SMC_last_state;
    1024:	83 e1       	ldi	r24, 0x13	; 19
    1026:	81 83       	std	Z+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	93 83       	std	Z+3, r25	; 0x03
    102e:	82 83       	std	Z+2, r24	; 0x02
			break;
    1030:	08 95       	ret
		}
		case SMC_main_region_On_r1_Running_running_main_EnterData_r1_ChooseDish : {
			/* Default exit sequence for state ChooseDish */
			handle->stateConfVector[1] = SMC_last_state;
    1032:	83 e1       	ldi	r24, 0x13	; 19
    1034:	81 83       	std	Z+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	93 83       	std	Z+3, r25	; 0x03
    103c:	82 83       	std	Z+2, r24	; 0x02
			break;
    103e:	08 95       	ret
		}
		case SMC_main_region_On_r1_Running_running_main_EnterData_r1__final_ : {
			/* Default exit sequence for final state. */
			handle->stateConfVector[1] = SMC_last_state;
    1040:	83 e1       	ldi	r24, 0x13	; 19
    1042:	81 83       	std	Z+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	93 83       	std	Z+3, r25	; 0x03
    104a:	82 83       	std	Z+2, r24	; 0x02
			break;
    104c:	08 95       	ret
		}
		case SMC_main_region_On_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : {
			/* Default exit sequence for state CheckKeyPress1 */
			handle->stateConfVector[1] = SMC_last_state;
    104e:	83 e1       	ldi	r24, 0x13	; 19
    1050:	81 83       	std	Z+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	93 83       	std	Z+3, r25	; 0x03
    1058:	82 83       	std	Z+2, r24	; 0x02
			break;
    105a:	08 95       	ret
		}
		case SMC_main_region_On_r1_Running_running_main_Send_Request_send_Send : {
			/* Default exit sequence for state Send */
			handle->stateConfVector[1] = SMC_last_state;
    105c:	83 e1       	ldi	r24, 0x13	; 19
    105e:	81 83       	std	Z+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	93 83       	std	Z+3, r25	; 0x03
    1066:	82 83       	std	Z+2, r24	; 0x02
			break;
    1068:	08 95       	ret
		}
		case SMC_main_region_On_r1_Running_running_main_Send_Request_send_Check : {
			/* Default exit sequence for state Check */
			handle->stateConfVector[1] = SMC_last_state;
    106a:	83 e1       	ldi	r24, 0x13	; 19
    106c:	81 83       	std	Z+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	93 83       	std	Z+3, r25	; 0x03
    1074:	82 83       	std	Z+2, r24	; 0x02
			break;
    1076:	08 95       	ret
		}
		case SMC_main_region_On_r1_Running_running_main_Send_Request_send_SendFail : {
			/* Default exit sequence for state SendFail */
			handle->stateConfVector[1] = SMC_last_state;
    1078:	83 e1       	ldi	r24, 0x13	; 19
    107a:	81 83       	std	Z+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	93 83       	std	Z+3, r25	; 0x03
    1082:	82 83       	std	Z+2, r24	; 0x02
			/* Exit action for state 'SendFail'. */
			sMC_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail_time_event_0_raised) );		
    1084:	cf 01       	movw	r24, r30
    1086:	80 5c       	subi	r24, 0xC0	; 192
    1088:	9f 4f       	sbci	r25, 0xFF	; 255
    108a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <sMC_unsetTimer>
			break;
    108e:	08 95       	ret
		}
		case SMC_main_region_On_r1_Running_running_main_Send_Request_send_ResetResult : {
			/* Default exit sequence for state ResetResult */
			handle->stateConfVector[1] = SMC_last_state;
    1090:	83 e1       	ldi	r24, 0x13	; 19
    1092:	81 83       	std	Z+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	93 83       	std	Z+3, r25	; 0x03
    109a:	82 83       	std	Z+2, r24	; 0x02
			break;
    109c:	08 95       	ret
		}
		case SMC_main_region_On_r1_Running_running_main_Send_Request_send__final_ : {
			/* Default exit sequence for final state. */
			handle->stateConfVector[1] = SMC_last_state;
    109e:	83 e1       	ldi	r24, 0x13	; 19
    10a0:	81 83       	std	Z+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	93 83       	std	Z+3, r25	; 0x03
    10a8:	82 83       	std	Z+2, r24	; 0x02
    10aa:	08 95       	ret

000010ac <sMC_runCycle>:
}

static void clearOutEvents(SMC* handle) {
}

void sMC_runCycle(SMC* handle) {
    10ac:	2f 92       	push	r2
    10ae:	3f 92       	push	r3
    10b0:	4f 92       	push	r4
    10b2:	5f 92       	push	r5
    10b4:	6f 92       	push	r6
    10b6:	7f 92       	push	r7
    10b8:	8f 92       	push	r8
    10ba:	9f 92       	push	r9
    10bc:	af 92       	push	r10
    10be:	bf 92       	push	r11
    10c0:	cf 92       	push	r12
    10c2:	df 92       	push	r13
    10c4:	ef 92       	push	r14
    10c6:	ff 92       	push	r15
    10c8:	0f 93       	push	r16
    10ca:	1f 93       	push	r17
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <sMC_runCycle+0x26>
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <sMC_runCycle+0x28>
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	9c 83       	std	Y+4, r25	; 0x04
    10da:	8b 83       	std	Y+3, r24	; 0x03
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
    10dc:	fc 01       	movw	r30, r24
    10de:	13 82       	std	Z+3, r1	; 0x03
    10e0:	12 82       	std	Z+2, r1	; 0x02
		handle->stateConfVectorPosition < SMC_MAX_ORTHOGONAL_STATES;
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	90 e0       	ldi	r25, 0x00	; 0
}

/* The reactions of state SendFail. */
static void sMC_react_main_region_On_r1_Running_running_main_Send_Request_send_SendFail(SMC* handle) {
	/* The reactions of state SendFail. */
	if (handle->timeEvents.SendFail_time_event_0_raised) { 
    10e6:	e0 5c       	subi	r30, 0xC0	; 192
    10e8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ea:	fa 83       	std	Y+2, r31	; 0x02
    10ec:	e9 83       	std	Y+1, r30	; 0x01
		handle->stateConfVectorPosition = 1;
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state Check */
			handle->stateConfVector[1] = SMC_last_state;
			handle->stateConfVectorPosition = 1;
    10ee:	01 e0       	ldi	r16, 0x01	; 1
    10f0:	10 e0       	ldi	r17, 0x00	; 0
			/* Default enter sequence for state ResetResult */
			/* Entry action for state 'ResetResult'. */
			handle->ifaceRF.result = bool_true;
    10f2:	ff 24       	eor	r15, r15
    10f4:	f3 94       	inc	r15
			handle->ifaceRF.retry = 0;
			handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_Send_Request_send_ResetResult;
    10f6:	0f 2e       	mov	r0, r31
    10f8:	f1 e1       	ldi	r31, 0x11	; 17
    10fa:	df 2e       	mov	r13, r31
    10fc:	f0 2d       	mov	r31, r0
	if (bool_true) { 
		/* Default exit sequence for state ResetResult */
		handle->stateConfVector[1] = SMC_last_state;
		handle->stateConfVectorPosition = 1;
		/* Default enter sequence for state null */
		handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_Send_Request_send__final_;
    10fe:	0f 2e       	mov	r0, r31
    1100:	f2 e1       	ldi	r31, 0x12	; 18
    1102:	ef 2e       	mov	r14, r31
    1104:	f0 2d       	mov	r31, r0
			/* Default exit sequence for state ChooseDish */
			handle->stateConfVector[1] = SMC_last_state;
			handle->stateConfVectorPosition = 1;
			handle->iface.requestId = 0;
			/* Default enter sequence for state null */
			handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_EnterData_r1__final_;
    1106:	0f 2e       	mov	r0, r31
    1108:	fb e0       	ldi	r31, 0x0B	; 11
    110a:	cf 2e       	mov	r12, r31
    110c:	f0 2d       	mov	r31, r0
		if (handle->ifaceKEYPAD.key != 0) { 
			/* Default enter sequence for state CheckKeyDown */
			/* Entry action for state 'CheckKeyDown'. */
			handle->ifaceKEYPAD.key = sMCIfaceKEYPAD_checkpress();
			handle->ifaceKEYPAD.key_down = bool_true;
			handle->stateConfVector[0] = SMC_main_region_On_r1_Running_keypad_CheckKeyDown;
    110e:	33 24       	eor	r3, r3
    1110:	68 94       	set
    1112:	32 f8       	bld	r3, 2
		handle->ifaceKEYPAD.key_pressed_raised = bool_true;
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.key = sMCIfaceKEYPAD_checkpress();
		handle->ifaceKEYPAD.key_down = bool_false;
		handle->stateConfVector[0] = SMC_main_region_On_r1_Running_keypad_CheckKey;
    1114:	0f 2e       	mov	r0, r31
    1116:	f3 e0       	ldi	r31, 0x03	; 3
    1118:	2f 2e       	mov	r2, r31
    111a:	f0 2d       	mov	r31, r0
			/* Default exit sequence for state CheckKeyPress */
			handle->stateConfVector[1] = SMC_last_state;
			handle->stateConfVectorPosition = 1;
			/* Default enter sequence for state CancelDish */
			/* Entry action for state 'CancelDish'. */
			handle->iface.requestId = 6;
    111c:	0f 2e       	mov	r0, r31
    111e:	f6 e0       	ldi	r31, 0x06	; 6
    1120:	8f 2e       	mov	r8, r31
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	9f 2e       	mov	r9, r31
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	af 2e       	mov	r10, r31
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	bf 2e       	mov	r11, r31
    112e:	f0 2d       	mov	r31, r0
		/* Default exit sequence for state CheckKeyPress */
		handle->stateConfVector[1] = SMC_last_state;
		handle->stateConfVectorPosition = 1;
		/* Default enter sequence for state FinishDish */
		/* Entry action for state 'FinishDish'. */
		handle->iface.requestId = 5;
    1130:	0f 2e       	mov	r0, r31
    1132:	f5 e0       	ldi	r31, 0x05	; 5
    1134:	4f 2e       	mov	r4, r31
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	5f 2e       	mov	r5, r31
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	6f 2e       	mov	r6, r31
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	7f 2e       	mov	r7, r31
    1142:	f0 2d       	mov	r31, r0
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMC_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
			
		switch (handle->stateConfVector[handle->stateConfVectorPosition]) {
    1144:	eb 81       	ldd	r30, Y+3	; 0x03
    1146:	fc 81       	ldd	r31, Y+4	; 0x04
    1148:	8e 0f       	add	r24, r30
    114a:	9f 1f       	adc	r25, r31
    114c:	fc 01       	movw	r30, r24
    114e:	80 81       	ld	r24, Z
    1150:	88 30       	cpi	r24, 0x08	; 8
    1152:	09 f4       	brne	.+2      	; 0x1156 <__stack+0x57>
    1154:	ef c0       	rjmp	.+478    	; 0x1334 <__stack+0x235>
    1156:	89 30       	cpi	r24, 0x09	; 9
    1158:	90 f4       	brcc	.+36     	; 0x117e <__stack+0x7f>
    115a:	84 30       	cpi	r24, 0x04	; 4
    115c:	09 f4       	brne	.+2      	; 0x1160 <__stack+0x61>
    115e:	77 c0       	rjmp	.+238    	; 0x124e <__stack+0x14f>
    1160:	85 30       	cpi	r24, 0x05	; 5
    1162:	30 f4       	brcc	.+12     	; 0x1170 <__stack+0x71>
    1164:	81 30       	cpi	r24, 0x01	; 1
    1166:	21 f1       	breq	.+72     	; 0x11b0 <__stack+0xb1>
    1168:	83 30       	cpi	r24, 0x03	; 3
    116a:	09 f0       	breq	.+2      	; 0x116e <__stack+0x6f>
    116c:	db c1       	rjmp	.+950    	; 0x1524 <__stack+0x425>
    116e:	3f c0       	rjmp	.+126    	; 0x11ee <__stack+0xef>
    1170:	86 30       	cpi	r24, 0x06	; 6
    1172:	09 f4       	brne	.+2      	; 0x1176 <__stack+0x77>
    1174:	a4 c0       	rjmp	.+328    	; 0x12be <__stack+0x1bf>
    1176:	87 30       	cpi	r24, 0x07	; 7
    1178:	08 f0       	brcs	.+2      	; 0x117c <__stack+0x7d>
    117a:	cd c0       	rjmp	.+410    	; 0x1316 <__stack+0x217>
    117c:	95 c0       	rjmp	.+298    	; 0x12a8 <__stack+0x1a9>
    117e:	8e 30       	cpi	r24, 0x0E	; 14
    1180:	09 f4       	brne	.+2      	; 0x1184 <__stack+0x85>
    1182:	43 c1       	rjmp	.+646    	; 0x140a <__stack+0x30b>
    1184:	8f 30       	cpi	r24, 0x0F	; 15
    1186:	50 f4       	brcc	.+20     	; 0x119c <__stack+0x9d>
    1188:	8b 30       	cpi	r24, 0x0B	; 11
    118a:	09 f4       	brne	.+2      	; 0x118e <__stack+0x8f>
    118c:	fd c0       	rjmp	.+506    	; 0x1388 <__stack+0x289>
    118e:	8c 30       	cpi	r24, 0x0C	; 12
    1190:	09 f4       	brne	.+2      	; 0x1194 <__stack+0x95>
    1192:	0c c1       	rjmp	.+536    	; 0x13ac <__stack+0x2ad>
    1194:	8a 30       	cpi	r24, 0x0A	; 10
    1196:	09 f0       	breq	.+2      	; 0x119a <__stack+0x9b>
    1198:	c5 c1       	rjmp	.+906    	; 0x1524 <__stack+0x425>
    119a:	db c0       	rjmp	.+438    	; 0x1352 <__stack+0x253>
    119c:	80 31       	cpi	r24, 0x10	; 16
    119e:	09 f4       	brne	.+2      	; 0x11a2 <__stack+0xa3>
    11a0:	9c c1       	rjmp	.+824    	; 0x14da <__stack+0x3db>
    11a2:	80 31       	cpi	r24, 0x10	; 16
    11a4:	08 f4       	brcc	.+2      	; 0x11a8 <__stack+0xa9>
    11a6:	66 c1       	rjmp	.+716    	; 0x1474 <__stack+0x375>
    11a8:	81 31       	cpi	r24, 0x11	; 17
    11aa:	09 f0       	breq	.+2      	; 0x11ae <__stack+0xaf>
    11ac:	bb c1       	rjmp	.+886    	; 0x1524 <__stack+0x425>
    11ae:	b5 c1       	rjmp	.+874    	; 0x151a <__stack+0x41b>
    11b0:	2b 81       	ldd	r18, Y+3	; 0x03
    11b2:	3c 81       	ldd	r19, Y+4	; 0x04
/* The reactions of state Init. */
static void sMC_react_main_region_On_r1_Init(SMC* handle) {
	/* The reactions of state Init. */
	if (bool_true) { 
		/* Default exit sequence for state Init */
		handle->stateConfVector[0] = SMC_last_state;
    11b4:	83 e1       	ldi	r24, 0x13	; 19
    11b6:	f9 01       	movw	r30, r18
    11b8:	80 83       	st	Z, r24
		handle->stateConfVectorPosition = 0;
    11ba:	13 82       	std	Z+3, r1	; 0x03
    11bc:	12 82       	std	Z+2, r1	; 0x02
		/* Default enter sequence for state Running */
		/* Default enter sequence for region keypad */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.key = sMCIfaceKEYPAD_checkpress();
    11be:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <sMCIfaceKEYPAD_checkpress>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	eb 81       	ldd	r30, Y+3	; 0x03
    11c8:	fc 81       	ldd	r31, Y+4	; 0x04
    11ca:	84 83       	std	Z+4, r24	; 0x04
    11cc:	95 83       	std	Z+5, r25	; 0x05
    11ce:	a6 83       	std	Z+6, r26	; 0x06
    11d0:	b7 83       	std	Z+7, r27	; 0x07
		handle->ifaceKEYPAD.key_down = bool_false;
    11d2:	14 86       	std	Z+12, r1	; 0x0c
		handle->stateConfVector[0] = SMC_main_region_On_r1_Running_keypad_CheckKey;
    11d4:	83 e0       	ldi	r24, 0x03	; 3
    11d6:	80 83       	st	Z, r24
		handle->stateConfVectorPosition = 0;
		/* Default enter sequence for region running main */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state WaitingForRequest */
		/* Entry action for state 'WaitingForRequest'. */
		handle->iface.requestId = 0;
    11d8:	16 aa       	sts	0x96, r17
    11da:	17 aa       	sts	0x97, r17
    11dc:	10 ae       	sts	0xb0, r17
    11de:	11 ae       	sts	0xb1, r17
		handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_WaitingForRequest;
    11e0:	85 e0       	ldi	r24, 0x05	; 5
    11e2:	81 83       	std	Z+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	93 83       	std	Z+3, r25	; 0x03
    11ea:	82 83       	std	Z+2, r24	; 0x02
    11ec:	c4 c1       	rjmp	.+904    	; 0x1576 <__stack+0x477>
}

/* The reactions of state CheckKey. */
static void sMC_react_main_region_On_r1_Running_keypad_CheckKey(SMC* handle) {
	/* The reactions of state CheckKey. */
	if (handle->ifaceKEYPAD.key != 0) { 
    11ee:	eb 81       	ldd	r30, Y+3	; 0x03
    11f0:	fc 81       	ldd	r31, Y+4	; 0x04
    11f2:	84 81       	ldd	r24, Z+4	; 0x04
    11f4:	95 81       	ldd	r25, Z+5	; 0x05
    11f6:	a6 81       	ldd	r26, Z+6	; 0x06
    11f8:	b7 81       	ldd	r27, Z+7	; 0x07
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	a1 05       	cpc	r26, r1
    11fe:	b1 05       	cpc	r27, r1
    1200:	b9 f0       	breq	.+46     	; 0x1230 <__stack+0x131>
		/* Default exit sequence for state CheckKey */
		handle->stateConfVector[0] = SMC_last_state;
    1202:	23 e1       	ldi	r18, 0x13	; 19
    1204:	20 83       	st	Z, r18
		handle->stateConfVectorPosition = 0;
    1206:	13 82       	std	Z+3, r1	; 0x03
    1208:	12 82       	std	Z+2, r1	; 0x02
		handle->ifaceKEYPAD.lastkey = handle->ifaceKEYPAD.key;
    120a:	80 87       	std	Z+8, r24	; 0x08
    120c:	91 87       	std	Z+9, r25	; 0x09
    120e:	a2 87       	std	Z+10, r26	; 0x0a
    1210:	b3 87       	std	Z+11, r27	; 0x0b
		/* Default enter sequence for state CheckKeyDown */
		/* Entry action for state 'CheckKeyDown'. */
		handle->ifaceKEYPAD.key = sMCIfaceKEYPAD_checkpress();
    1212:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <sMCIfaceKEYPAD_checkpress>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	eb 81       	ldd	r30, Y+3	; 0x03
    121c:	fc 81       	ldd	r31, Y+4	; 0x04
    121e:	84 83       	std	Z+4, r24	; 0x04
    1220:	95 83       	std	Z+5, r25	; 0x05
    1222:	a6 83       	std	Z+6, r26	; 0x06
    1224:	b7 83       	std	Z+7, r27	; 0x07
		handle->ifaceKEYPAD.key_down = bool_true;
    1226:	f4 86       	std	Z+12, r15	; 0x0c
		handle->stateConfVector[0] = SMC_main_region_On_r1_Running_keypad_CheckKeyDown;
    1228:	30 82       	st	Z, r3
		handle->stateConfVectorPosition = 0;
    122a:	13 82       	std	Z+3, r1	; 0x03
    122c:	12 82       	std	Z+2, r1	; 0x02
    122e:	ab c1       	rjmp	.+854    	; 0x1586 <__stack+0x487>
	}  else {
		if (handle->ifaceKEYPAD.key == 0) { 
			/* Default enter sequence for state CheckKey */
			/* Entry action for state 'CheckKey'. */
			handle->ifaceKEYPAD.key = sMCIfaceKEYPAD_checkpress();
    1230:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <sMCIfaceKEYPAD_checkpress>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	eb 81       	ldd	r30, Y+3	; 0x03
    123a:	fc 81       	ldd	r31, Y+4	; 0x04
    123c:	84 83       	std	Z+4, r24	; 0x04
    123e:	95 83       	std	Z+5, r25	; 0x05
    1240:	a6 83       	std	Z+6, r26	; 0x06
    1242:	b7 83       	std	Z+7, r27	; 0x07
			handle->ifaceKEYPAD.key_down = bool_false;
    1244:	14 86       	std	Z+12, r1	; 0x0c
			handle->stateConfVector[0] = SMC_main_region_On_r1_Running_keypad_CheckKey;
    1246:	20 82       	st	Z, r2
			handle->stateConfVectorPosition = 0;
    1248:	13 82       	std	Z+3, r1	; 0x03
    124a:	12 82       	std	Z+2, r1	; 0x02
    124c:	9c c1       	rjmp	.+824    	; 0x1586 <__stack+0x487>
}

/* The reactions of state CheckKeyDown. */
static void sMC_react_main_region_On_r1_Running_keypad_CheckKeyDown(SMC* handle) {
	/* The reactions of state CheckKeyDown. */
	if (handle->ifaceKEYPAD.key == 0) { 
    124e:	eb 81       	ldd	r30, Y+3	; 0x03
    1250:	fc 81       	ldd	r31, Y+4	; 0x04
    1252:	84 81       	ldd	r24, Z+4	; 0x04
    1254:	95 81       	ldd	r25, Z+5	; 0x05
    1256:	a6 81       	ldd	r26, Z+6	; 0x06
    1258:	b7 81       	ldd	r27, Z+7	; 0x07
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	a1 05       	cpc	r26, r1
    125e:	b1 05       	cpc	r27, r1
    1260:	a1 f4       	brne	.+40     	; 0x128a <__stack+0x18b>
		/* Default exit sequence for state CheckKeyDown */
		handle->stateConfVector[0] = SMC_last_state;
    1262:	23 e1       	ldi	r18, 0x13	; 19
    1264:	20 83       	st	Z, r18
		handle->stateConfVectorPosition = 0;
    1266:	13 82       	std	Z+3, r1	; 0x03
    1268:	12 82       	std	Z+2, r1	; 0x02
		handle->ifaceKEYPAD.key_pressed_raised = bool_true;
    126a:	f5 86       	std	Z+13, r15	; 0x0d
		/* Default enter sequence for state CheckKey */
		/* Entry action for state 'CheckKey'. */
		handle->ifaceKEYPAD.key = sMCIfaceKEYPAD_checkpress();
    126c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <sMCIfaceKEYPAD_checkpress>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	eb 81       	ldd	r30, Y+3	; 0x03
    1276:	fc 81       	ldd	r31, Y+4	; 0x04
    1278:	84 83       	std	Z+4, r24	; 0x04
    127a:	95 83       	std	Z+5, r25	; 0x05
    127c:	a6 83       	std	Z+6, r26	; 0x06
    127e:	b7 83       	std	Z+7, r27	; 0x07
		handle->ifaceKEYPAD.key_down = bool_false;
    1280:	14 86       	std	Z+12, r1	; 0x0c
		handle->stateConfVector[0] = SMC_main_region_On_r1_Running_keypad_CheckKey;
    1282:	20 82       	st	Z, r2
		handle->stateConfVectorPosition = 0;
    1284:	13 82       	std	Z+3, r1	; 0x03
    1286:	12 82       	std	Z+2, r1	; 0x02
    1288:	7e c1       	rjmp	.+764    	; 0x1586 <__stack+0x487>
	}  else {
		if (handle->ifaceKEYPAD.key != 0) { 
			/* Default enter sequence for state CheckKeyDown */
			/* Entry action for state 'CheckKeyDown'. */
			handle->ifaceKEYPAD.key = sMCIfaceKEYPAD_checkpress();
    128a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <sMCIfaceKEYPAD_checkpress>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	eb 81       	ldd	r30, Y+3	; 0x03
    1294:	fc 81       	ldd	r31, Y+4	; 0x04
    1296:	84 83       	std	Z+4, r24	; 0x04
    1298:	95 83       	std	Z+5, r25	; 0x05
    129a:	a6 83       	std	Z+6, r26	; 0x06
    129c:	b7 83       	std	Z+7, r27	; 0x07
			handle->ifaceKEYPAD.key_down = bool_true;
    129e:	f4 86       	std	Z+12, r15	; 0x0c
			handle->stateConfVector[0] = SMC_main_region_On_r1_Running_keypad_CheckKeyDown;
    12a0:	30 82       	st	Z, r3
			handle->stateConfVectorPosition = 0;
    12a2:	13 82       	std	Z+3, r1	; 0x03
    12a4:	12 82       	std	Z+2, r1	; 0x02
    12a6:	6f c1       	rjmp	.+734    	; 0x1586 <__stack+0x487>
static void sMC_react_main_region_On_r1_Running_running_main_WaitingForRequest(SMC* handle) {
	/* The reactions of state WaitingForRequest. */
	if (bool_true) { 
		/* Default exit sequence for state WaitingForRequest */
		handle->stateConfVector[1] = SMC_last_state;
		handle->stateConfVectorPosition = 1;
    12a8:	eb 81       	ldd	r30, Y+3	; 0x03
    12aa:	fc 81       	ldd	r31, Y+4	; 0x04
    12ac:	13 83       	std	Z+3, r17	; 0x03
    12ae:	02 83       	std	Z+2, r16	; 0x02
		/* Default enter sequence for state CheckKeyPress */
		/* Entry action for state 'CheckKeyPress'. */
		handle->ifaceKEYPAD.lastkey = 0;
    12b0:	10 86       	std	Z+8, r1	; 0x08
    12b2:	11 86       	std	Z+9, r1	; 0x09
    12b4:	12 86       	std	Z+10, r1	; 0x0a
    12b6:	13 86       	std	Z+11, r1	; 0x0b
		handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_CheckKeyPress;
    12b8:	86 e0       	ldi	r24, 0x06	; 6
    12ba:	81 83       	std	Z+1, r24	; 0x01
    12bc:	33 c1       	rjmp	.+614    	; 0x1524 <__stack+0x425>
}

/* The reactions of state CheckKeyPress. */
static void sMC_react_main_region_On_r1_Running_running_main_CheckKeyPress(SMC* handle) {
	/* The reactions of state CheckKeyPress. */
	if (handle->ifaceKEYPAD.lastkey == 13 && handle->ifaceKEYPAD.key_pressed_raised) { 
    12be:	eb 81       	ldd	r30, Y+3	; 0x03
    12c0:	fc 81       	ldd	r31, Y+4	; 0x04
    12c2:	80 85       	ldd	r24, Z+8	; 0x08
    12c4:	91 85       	ldd	r25, Z+9	; 0x09
    12c6:	a2 85       	ldd	r26, Z+10	; 0x0a
    12c8:	b3 85       	ldd	r27, Z+11	; 0x0b
    12ca:	8d 30       	cpi	r24, 0x0D	; 13
    12cc:	91 05       	cpc	r25, r1
    12ce:	a1 05       	cpc	r26, r1
    12d0:	b1 05       	cpc	r27, r1
    12d2:	61 f4       	brne	.+24     	; 0x12ec <__stack+0x1ed>
    12d4:	25 85       	ldd	r18, Z+13	; 0x0d
    12d6:	22 23       	and	r18, r18
    12d8:	49 f0       	breq	.+18     	; 0x12ec <__stack+0x1ed>
		/* Default exit sequence for state CheckKeyPress */
		handle->stateConfVector[1] = SMC_last_state;
		handle->stateConfVectorPosition = 1;
    12da:	13 83       	std	Z+3, r17	; 0x03
    12dc:	02 83       	std	Z+2, r16	; 0x02
		/* Default enter sequence for state FinishDish */
		/* Entry action for state 'FinishDish'. */
		handle->iface.requestId = 5;
    12de:	46 aa       	sts	0x96, r20
    12e0:	57 aa       	sts	0x97, r21
    12e2:	60 ae       	sts	0xb0, r22
    12e4:	71 ae       	sts	0xb1, r23
		handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_FinishDish;
    12e6:	87 e0       	ldi	r24, 0x07	; 7
    12e8:	81 83       	std	Z+1, r24	; 0x01
    12ea:	1c c1       	rjmp	.+568    	; 0x1524 <__stack+0x425>
		handle->stateConfVectorPosition = 1;
	}  else {
		if (handle->ifaceKEYPAD.lastkey == 14 && handle->ifaceKEYPAD.key_pressed_raised) { 
    12ec:	8e 30       	cpi	r24, 0x0E	; 14
    12ee:	91 05       	cpc	r25, r1
    12f0:	a1 05       	cpc	r26, r1
    12f2:	b1 05       	cpc	r27, r1
    12f4:	09 f0       	breq	.+2      	; 0x12f8 <__stack+0x1f9>
    12f6:	16 c1       	rjmp	.+556    	; 0x1524 <__stack+0x425>
    12f8:	eb 81       	ldd	r30, Y+3	; 0x03
    12fa:	fc 81       	ldd	r31, Y+4	; 0x04
    12fc:	85 85       	ldd	r24, Z+13	; 0x0d
    12fe:	88 23       	and	r24, r24
    1300:	09 f4       	brne	.+2      	; 0x1304 <__stack+0x205>
    1302:	10 c1       	rjmp	.+544    	; 0x1524 <__stack+0x425>
			/* Default exit sequence for state CheckKeyPress */
			handle->stateConfVector[1] = SMC_last_state;
			handle->stateConfVectorPosition = 1;
    1304:	13 83       	std	Z+3, r17	; 0x03
    1306:	02 83       	std	Z+2, r16	; 0x02
			/* Default enter sequence for state CancelDish */
			/* Entry action for state 'CancelDish'. */
			handle->iface.requestId = 6;
    1308:	86 aa       	sts	0x96, r24
    130a:	97 aa       	sts	0x97, r25
    130c:	a0 ae       	sts	0xb0, r26
    130e:	b1 ae       	sts	0xb1, r27
			handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_CancelDish;
    1310:	28 e0       	ldi	r18, 0x08	; 8
    1312:	21 83       	std	Z+1, r18	; 0x01
    1314:	07 c1       	rjmp	.+526    	; 0x1524 <__stack+0x425>
static void sMC_react_main_region_On_r1_Running_running_main_FinishDish(SMC* handle) {
	/* The reactions of state FinishDish. */
	if (bool_true) { 
		/* Default exit sequence for state FinishDish */
		handle->stateConfVector[1] = SMC_last_state;
		handle->stateConfVectorPosition = 1;
    1316:	eb 81       	ldd	r30, Y+3	; 0x03
    1318:	fc 81       	ldd	r31, Y+4	; 0x04
    131a:	13 83       	std	Z+3, r17	; 0x03
    131c:	02 83       	std	Z+2, r16	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state CheckKeyPress1 */
		/* Entry action for state 'CheckKeyPress1'. */
		handle->iface.listId = 0;
    131e:	12 ae       	sts	0xb2, r17
    1320:	13 ae       	sts	0xb3, r17
    1322:	14 ae       	sts	0xb4, r17
    1324:	15 ae       	sts	0xb5, r17
		handle->ifaceKEYPAD.lastkey = 0;
    1326:	10 86       	std	Z+8, r1	; 0x08
    1328:	11 86       	std	Z+9, r1	; 0x09
    132a:	12 86       	std	Z+10, r1	; 0x0a
    132c:	13 86       	std	Z+11, r1	; 0x0b
		handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_EnterData_r1_CheckKeyPress1;
    132e:	8c e0       	ldi	r24, 0x0C	; 12
    1330:	81 83       	std	Z+1, r24	; 0x01
    1332:	f8 c0       	rjmp	.+496    	; 0x1524 <__stack+0x425>
static void sMC_react_main_region_On_r1_Running_running_main_CancelDish(SMC* handle) {
	/* The reactions of state CancelDish. */
	if (bool_true) { 
		/* Default exit sequence for state CancelDish */
		handle->stateConfVector[1] = SMC_last_state;
		handle->stateConfVectorPosition = 1;
    1334:	eb 81       	ldd	r30, Y+3	; 0x03
    1336:	fc 81       	ldd	r31, Y+4	; 0x04
    1338:	13 83       	std	Z+3, r17	; 0x03
    133a:	02 83       	std	Z+2, r16	; 0x02
		/* Default enter sequence for state EnterData */
		/* Default enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* Default enter sequence for state CheckKeyPress1 */
		/* Entry action for state 'CheckKeyPress1'. */
		handle->iface.listId = 0;
    133c:	12 ae       	sts	0xb2, r17
    133e:	13 ae       	sts	0xb3, r17
    1340:	14 ae       	sts	0xb4, r17
    1342:	15 ae       	sts	0xb5, r17
		handle->ifaceKEYPAD.lastkey = 0;
    1344:	10 86       	std	Z+8, r1	; 0x08
    1346:	11 86       	std	Z+9, r1	; 0x09
    1348:	12 86       	std	Z+10, r1	; 0x0a
    134a:	13 86       	std	Z+11, r1	; 0x0b
		handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_EnterData_r1_CheckKeyPress1;
    134c:	8c e0       	ldi	r24, 0x0C	; 12
    134e:	81 83       	std	Z+1, r24	; 0x01
    1350:	e9 c0       	rjmp	.+466    	; 0x1524 <__stack+0x425>
}

/* The reactions of state ChooseDish. */
static void sMC_react_main_region_On_r1_Running_running_main_EnterData_r1_ChooseDish(SMC* handle) {
	/* The reactions of state ChooseDish. */
	if (handle->iface.requestId == 0) { 
    1352:	eb 81       	ldd	r30, Y+3	; 0x03
    1354:	fc 81       	ldd	r31, Y+4	; 0x04
    1356:	86 a9       	sts	0x46, r24
    1358:	97 a9       	sts	0x47, r25
    135a:	a0 ad       	sts	0x60, r26
    135c:	b1 ad       	sts	0x61, r27
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	a1 05       	cpc	r26, r1
    1362:	b1 05       	cpc	r27, r1
    1364:	39 f4       	brne	.+14     	; 0x1374 <__stack+0x275>
			default: break;
		}
		/* Default enter sequence for state WaitingForRequest */
		/* Entry action for state 'WaitingForRequest'. */
		handle->iface.requestId = 0;
		handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_WaitingForRequest;
    1366:	85 e0       	ldi	r24, 0x05	; 5
    1368:	81 83       	std	Z+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	93 83       	std	Z+3, r25	; 0x03
    1370:	82 83       	std	Z+2, r24	; 0x02
    1372:	01 c1       	rjmp	.+514    	; 0x1576 <__stack+0x477>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state ChooseDish */
			handle->stateConfVector[1] = SMC_last_state;
			handle->stateConfVectorPosition = 1;
    1374:	eb 81       	ldd	r30, Y+3	; 0x03
    1376:	fc 81       	ldd	r31, Y+4	; 0x04
    1378:	13 83       	std	Z+3, r17	; 0x03
    137a:	02 83       	std	Z+2, r16	; 0x02
			handle->iface.requestId = 0;
    137c:	16 aa       	sts	0x96, r17
    137e:	17 aa       	sts	0x97, r17
    1380:	10 ae       	sts	0xb0, r17
    1382:	11 ae       	sts	0xb1, r17
			/* Default enter sequence for state null */
			handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_EnterData_r1__final_;
    1384:	c1 82       	std	Z+1, r12	; 0x01
    1386:	ce c0       	rjmp	.+412    	; 0x1524 <__stack+0x425>
}

/* The reactions of state null. */
static void sMC_react_main_region_On_r1_Running_running_main_EnterData_r1__final_0(SMC* handle) {
	/* The reactions of state null. */
	if (handle->iface.requestId == 0) { 
    1388:	eb 81       	ldd	r30, Y+3	; 0x03
    138a:	fc 81       	ldd	r31, Y+4	; 0x04
    138c:	86 a9       	sts	0x46, r24
    138e:	97 a9       	sts	0x47, r25
    1390:	a0 ad       	sts	0x60, r26
    1392:	b1 ad       	sts	0x61, r27
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	a1 05       	cpc	r26, r1
    1398:	b1 05       	cpc	r27, r1
    139a:	09 f0       	breq	.+2      	; 0x139e <__stack+0x29f>
    139c:	c3 c0       	rjmp	.+390    	; 0x1524 <__stack+0x425>
			default: break;
		}
		/* Default enter sequence for state WaitingForRequest */
		/* Entry action for state 'WaitingForRequest'. */
		handle->iface.requestId = 0;
		handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_WaitingForRequest;
    139e:	85 e0       	ldi	r24, 0x05	; 5
    13a0:	81 83       	std	Z+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	93 83       	std	Z+3, r25	; 0x03
    13a8:	82 83       	std	Z+2, r24	; 0x02
    13aa:	e5 c0       	rjmp	.+458    	; 0x1576 <__stack+0x477>
}

/* The reactions of state CheckKeyPress1. */
static void sMC_react_main_region_On_r1_Running_running_main_EnterData_r1_CheckKeyPress1(SMC* handle) {
	/* The reactions of state CheckKeyPress1. */
	if (handle->iface.requestId == 0) { 
    13ac:	eb 81       	ldd	r30, Y+3	; 0x03
    13ae:	fc 81       	ldd	r31, Y+4	; 0x04
    13b0:	86 a9       	sts	0x46, r24
    13b2:	97 a9       	sts	0x47, r25
    13b4:	a0 ad       	sts	0x60, r26
    13b6:	b1 ad       	sts	0x61, r27
    13b8:	00 97       	sbiw	r24, 0x00	; 0
    13ba:	a1 05       	cpc	r26, r1
    13bc:	b1 05       	cpc	r27, r1
    13be:	39 f4       	brne	.+14     	; 0x13ce <__stack+0x2cf>
			default: break;
		}
		/* Default enter sequence for state WaitingForRequest */
		/* Entry action for state 'WaitingForRequest'. */
		handle->iface.requestId = 0;
		handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_WaitingForRequest;
    13c0:	85 e0       	ldi	r24, 0x05	; 5
    13c2:	81 83       	std	Z+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	93 83       	std	Z+3, r25	; 0x03
    13ca:	82 83       	std	Z+2, r24	; 0x02
    13cc:	d4 c0       	rjmp	.+424    	; 0x1576 <__stack+0x477>
	}  else {
		if (handle->ifaceKEYPAD.lastkey <= 10 && handle->ifaceKEYPAD.lastkey >= 1 && handle->ifaceKEYPAD.key_pressed_raised) { 
    13ce:	eb 81       	ldd	r30, Y+3	; 0x03
    13d0:	fc 81       	ldd	r31, Y+4	; 0x04
    13d2:	40 85       	ldd	r20, Z+8	; 0x08
    13d4:	51 85       	ldd	r21, Z+9	; 0x09
    13d6:	62 85       	ldd	r22, Z+10	; 0x0a
    13d8:	73 85       	ldd	r23, Z+11	; 0x0b
    13da:	db 01       	movw	r26, r22
    13dc:	ca 01       	movw	r24, r20
    13de:	01 97       	sbiw	r24, 0x01	; 1
    13e0:	a1 09       	sbc	r26, r1
    13e2:	b1 09       	sbc	r27, r1
    13e4:	8a 30       	cpi	r24, 0x0A	; 10
    13e6:	91 05       	cpc	r25, r1
    13e8:	a1 05       	cpc	r26, r1
    13ea:	b1 05       	cpc	r27, r1
    13ec:	08 f0       	brcs	.+2      	; 0x13f0 <__stack+0x2f1>
    13ee:	9a c0       	rjmp	.+308    	; 0x1524 <__stack+0x425>
    13f0:	85 85       	ldd	r24, Z+13	; 0x0d
    13f2:	88 23       	and	r24, r24
    13f4:	09 f4       	brne	.+2      	; 0x13f8 <__stack+0x2f9>
    13f6:	96 c0       	rjmp	.+300    	; 0x1524 <__stack+0x425>
			/* Default exit sequence for state CheckKeyPress1 */
			handle->stateConfVector[1] = SMC_last_state;
			handle->stateConfVectorPosition = 1;
    13f8:	13 83       	std	Z+3, r17	; 0x03
    13fa:	02 83       	std	Z+2, r16	; 0x02
			/* Default enter sequence for state ChooseDish */
			/* Entry action for state 'ChooseDish'. */
			handle->iface.listId = handle->ifaceKEYPAD.lastkey;
    13fc:	42 af       	sts	0x72, r20
    13fe:	53 af       	sts	0x73, r21
    1400:	64 af       	sts	0x74, r22
    1402:	75 af       	sts	0x75, r23
			handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_EnterData_r1_ChooseDish;
    1404:	2a e0       	ldi	r18, 0x0A	; 10
    1406:	21 83       	std	Z+1, r18	; 0x01
    1408:	8d c0       	rjmp	.+282    	; 0x1524 <__stack+0x425>
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	9c 81       	ldd	r25, Y+4	; 0x04
}

/* The reactions of state Send. */
static void sMC_react_main_region_On_r1_Running_running_main_Send_Request_send_Send(SMC* handle) {
	/* The reactions of state Send. */
	if (handle->ifaceRF.result == bool_true) { 
    140e:	fc 01       	movw	r30, r24
    1410:	87 89       	ldd	r24, Z+23	; 0x17
    1412:	88 23       	and	r24, r24
    1414:	81 f0       	breq	.+32     	; 0x1436 <__stack+0x337>
		/* Default exit sequence for state Send */
		handle->stateConfVector[1] = SMC_last_state;
    1416:	83 e1       	ldi	r24, 0x13	; 19
    1418:	81 83       	std	Z+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    141a:	01 e0       	ldi	r16, 0x01	; 1
    141c:	10 e0       	ldi	r17, 0x00	; 0
    141e:	13 83       	std	Z+3, r17	; 0x03
    1420:	02 83       	std	Z+2, r16	; 0x02
		/* Default enter sequence for state Check */
		/* Entry action for state 'Check'. */
		handle->ifaceRF.result = sMCIfaceRF_getCheck();
    1422:	0e 94 c2 02 	call	0x584	; 0x584 <sMCIfaceRF_getCheck>
    1426:	eb 81       	ldd	r30, Y+3	; 0x03
    1428:	fc 81       	ldd	r31, Y+4	; 0x04
    142a:	87 8b       	std	Z+23, r24	; 0x17
		handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_Send_Request_send_Check;
    142c:	8f e0       	ldi	r24, 0x0F	; 15
    142e:	81 83       	std	Z+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1430:	13 83       	std	Z+3, r17	; 0x03
    1432:	02 83       	std	Z+2, r16	; 0x02
    1434:	a0 c0       	rjmp	.+320    	; 0x1576 <__stack+0x477>
	}  else {
		if (handle->ifaceRF.result == bool_false) { 
			/* Default exit sequence for state Send */
			handle->stateConfVector[1] = SMC_last_state;
    1436:	83 e1       	ldi	r24, 0x13	; 19
    1438:	eb 81       	ldd	r30, Y+3	; 0x03
    143a:	fc 81       	ldd	r31, Y+4	; 0x04
    143c:	81 83       	std	Z+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    143e:	01 e0       	ldi	r16, 0x01	; 1
    1440:	10 e0       	ldi	r17, 0x00	; 0
    1442:	13 83       	std	Z+3, r17	; 0x03
    1444:	02 83       	std	Z+2, r16	; 0x02
			/* Default enter sequence for state SendFail */
			/* Entry action for state 'SendFail'. */
			sMC_setTimer( (sc_eventid) &(handle->timeEvents.SendFail_time_event_0_raised) , 2 * 1000, bool_false);
    1446:	cf 01       	movw	r24, r30
    1448:	80 5c       	subi	r24, 0xC0	; 192
    144a:	9f 4f       	sbci	r25, 0xFF	; 255
    144c:	40 ed       	ldi	r20, 0xD0	; 208
    144e:	57 e0       	ldi	r21, 0x07	; 7
    1450:	60 e0       	ldi	r22, 0x00	; 0
    1452:	70 e0       	ldi	r23, 0x00	; 0
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	0e 94 69 03 	call	0x6d2	; 0x6d2 <sMC_setTimer>
			sMCIfaceLCD_clear();
    145a:	0e 94 2d 02 	call	0x45a	; 0x45a <sMCIfaceLCD_clear>
			sMCIfaceLCD_writeString("Send fail");
    145e:	8c ef       	ldi	r24, 0xFC	; 252
    1460:	91 e0       	ldi	r25, 0x01	; 1
    1462:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sMCIfaceLCD_writeString>
			handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_Send_Request_send_SendFail;
    1466:	80 e1       	ldi	r24, 0x10	; 16
    1468:	eb 81       	ldd	r30, Y+3	; 0x03
    146a:	fc 81       	ldd	r31, Y+4	; 0x04
    146c:	81 83       	std	Z+1, r24	; 0x01
			handle->stateConfVectorPosition = 1;
    146e:	13 83       	std	Z+3, r17	; 0x03
    1470:	02 83       	std	Z+2, r16	; 0x02
    1472:	81 c0       	rjmp	.+258    	; 0x1576 <__stack+0x477>
}

/* The reactions of state Check. */
static void sMC_react_main_region_On_r1_Running_running_main_Send_Request_send_Check(SMC* handle) {
	/* The reactions of state Check. */
	if (handle->ifaceRF.result == bool_false) { 
    1474:	eb 81       	ldd	r30, Y+3	; 0x03
    1476:	fc 81       	ldd	r31, Y+4	; 0x04
    1478:	87 89       	ldd	r24, Z+23	; 0x17
    147a:	88 23       	and	r24, r24
    147c:	19 f5       	brne	.+70     	; 0x14c4 <__stack+0x3c5>
		/* Default exit sequence for state Check */
		handle->stateConfVector[1] = SMC_last_state;
    147e:	83 e1       	ldi	r24, 0x13	; 19
    1480:	81 83       	std	Z+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1482:	01 e0       	ldi	r16, 0x01	; 1
    1484:	10 e0       	ldi	r17, 0x00	; 0
    1486:	13 83       	std	Z+3, r17	; 0x03
    1488:	02 83       	std	Z+2, r16	; 0x02
		/* Default enter sequence for state Send */
		/* Entry action for state 'Send'. */
		handle->ifaceRF.retry += 1;
    148a:	80 8d       	ldd	r24, Z+24	; 0x18
    148c:	91 8d       	ldd	r25, Z+25	; 0x19
    148e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1490:	b3 8d       	ldd	r27, Z+27	; 0x1b
    1492:	01 96       	adiw	r24, 0x01	; 1
    1494:	a1 1d       	adc	r26, r1
    1496:	b1 1d       	adc	r27, r1
    1498:	80 8f       	std	Z+24, r24	; 0x18
    149a:	91 8f       	std	Z+25, r25	; 0x19
    149c:	a2 8f       	std	Z+26, r26	; 0x1a
    149e:	b3 8f       	std	Z+27, r27	; 0x1b
		handle->ifaceRF.result = sMCIfaceRF_sendReq(handle->iface.requestId, handle->iface.listId);
    14a0:	66 a9       	sts	0x46, r22
    14a2:	77 a9       	sts	0x47, r23
    14a4:	80 ad       	sts	0x60, r24
    14a6:	91 ad       	sts	0x61, r25
    14a8:	22 ad       	sts	0x62, r18
    14aa:	33 ad       	sts	0x63, r19
    14ac:	44 ad       	sts	0x64, r20
    14ae:	55 ad       	sts	0x65, r21
    14b0:	0e 94 47 03 	call	0x68e	; 0x68e <sMCIfaceRF_sendReq>
    14b4:	eb 81       	ldd	r30, Y+3	; 0x03
    14b6:	fc 81       	ldd	r31, Y+4	; 0x04
    14b8:	87 8b       	std	Z+23, r24	; 0x17
		handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_Send_Request_send_Send;
    14ba:	8e e0       	ldi	r24, 0x0E	; 14
    14bc:	81 83       	std	Z+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    14be:	13 83       	std	Z+3, r17	; 0x03
    14c0:	02 83       	std	Z+2, r16	; 0x02
    14c2:	59 c0       	rjmp	.+178    	; 0x1576 <__stack+0x477>
	}  else {
		if (bool_true) { 
			/* Default exit sequence for state Check */
			handle->stateConfVector[1] = SMC_last_state;
			handle->stateConfVectorPosition = 1;
    14c4:	eb 81       	ldd	r30, Y+3	; 0x03
    14c6:	fc 81       	ldd	r31, Y+4	; 0x04
    14c8:	13 83       	std	Z+3, r17	; 0x03
    14ca:	02 83       	std	Z+2, r16	; 0x02
			/* Default enter sequence for state ResetResult */
			/* Entry action for state 'ResetResult'. */
			handle->ifaceRF.result = bool_true;
    14cc:	f7 8a       	std	Z+23, r15	; 0x17
			handle->ifaceRF.retry = 0;
    14ce:	10 8e       	std	Z+24, r1	; 0x18
    14d0:	11 8e       	std	Z+25, r1	; 0x19
    14d2:	12 8e       	std	Z+26, r1	; 0x1a
    14d4:	13 8e       	std	Z+27, r1	; 0x1b
			handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_Send_Request_send_ResetResult;
    14d6:	d1 82       	std	Z+1, r13	; 0x01
    14d8:	25 c0       	rjmp	.+74     	; 0x1524 <__stack+0x425>
}

/* The reactions of state SendFail. */
static void sMC_react_main_region_On_r1_Running_running_main_Send_Request_send_SendFail(SMC* handle) {
	/* The reactions of state SendFail. */
	if (handle->timeEvents.SendFail_time_event_0_raised) { 
    14da:	e9 81       	ldd	r30, Y+1	; 0x01
    14dc:	fa 81       	ldd	r31, Y+2	; 0x02
    14de:	80 81       	ld	r24, Z
    14e0:	88 23       	and	r24, r24
    14e2:	01 f1       	breq	.+64     	; 0x1524 <__stack+0x425>
    14e4:	2b 81       	ldd	r18, Y+3	; 0x03
    14e6:	3c 81       	ldd	r19, Y+4	; 0x04
		/* Default exit sequence for state SendFail */
		handle->stateConfVector[1] = SMC_last_state;
    14e8:	83 e1       	ldi	r24, 0x13	; 19
    14ea:	f9 01       	movw	r30, r18
    14ec:	81 83       	std	Z+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    14ee:	01 e0       	ldi	r16, 0x01	; 1
    14f0:	10 e0       	ldi	r17, 0x00	; 0
    14f2:	13 83       	std	Z+3, r17	; 0x03
    14f4:	02 83       	std	Z+2, r16	; 0x02
		/* Exit action for state 'SendFail'. */
		sMC_unsetTimer( (sc_eventid) &(handle->timeEvents.SendFail_time_event_0_raised) );		
    14f6:	c9 01       	movw	r24, r18
    14f8:	80 5c       	subi	r24, 0xC0	; 192
    14fa:	9f 4f       	sbci	r25, 0xFF	; 255
    14fc:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <sMC_unsetTimer>
		/* Default enter sequence for state ResetResult */
		/* Entry action for state 'ResetResult'. */
		handle->ifaceRF.result = bool_true;
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	eb 81       	ldd	r30, Y+3	; 0x03
    1504:	fc 81       	ldd	r31, Y+4	; 0x04
    1506:	87 8b       	std	Z+23, r24	; 0x17
		handle->ifaceRF.retry = 0;
    1508:	10 8e       	std	Z+24, r1	; 0x18
    150a:	11 8e       	std	Z+25, r1	; 0x19
    150c:	12 8e       	std	Z+26, r1	; 0x1a
    150e:	13 8e       	std	Z+27, r1	; 0x1b
		handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_Send_Request_send_ResetResult;
    1510:	81 e1       	ldi	r24, 0x11	; 17
    1512:	81 83       	std	Z+1, r24	; 0x01
		handle->stateConfVectorPosition = 1;
    1514:	13 83       	std	Z+3, r17	; 0x03
    1516:	02 83       	std	Z+2, r16	; 0x02
    1518:	2e c0       	rjmp	.+92     	; 0x1576 <__stack+0x477>
static void sMC_react_main_region_On_r1_Running_running_main_Send_Request_send_ResetResult(SMC* handle) {
	/* The reactions of state ResetResult. */
	if (bool_true) { 
		/* Default exit sequence for state ResetResult */
		handle->stateConfVector[1] = SMC_last_state;
		handle->stateConfVectorPosition = 1;
    151a:	eb 81       	ldd	r30, Y+3	; 0x03
    151c:	fc 81       	ldd	r31, Y+4	; 0x04
    151e:	13 83       	std	Z+3, r17	; 0x03
    1520:	02 83       	std	Z+2, r16	; 0x02
		/* Default enter sequence for state null */
		handle->stateConfVector[1] = SMC_main_region_On_r1_Running_running_main_Send_Request_send__final_;
    1522:	e1 82       	std	Z+1, r14	; 0x01
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMC_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
    1524:	eb 81       	ldd	r30, Y+3	; 0x03
    1526:	fc 81       	ldd	r31, Y+4	; 0x04
    1528:	82 81       	ldd	r24, Z+2	; 0x02
    152a:	93 81       	ldd	r25, Z+3	; 0x03
    152c:	01 96       	adiw	r24, 0x01	; 1
    152e:	93 83       	std	Z+3, r25	; 0x03
    1530:	82 83       	std	Z+2, r24	; 0x02

void sMC_runCycle(SMC* handle) {
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
    1532:	82 30       	cpi	r24, 0x02	; 2
    1534:	91 05       	cpc	r25, r1
    1536:	08 f4       	brcc	.+2      	; 0x153a <__stack+0x43b>
    1538:	05 ce       	rjmp	.-1014   	; 0x1144 <__stack+0x45>
	}
	sMC_exitaction(handle);
}

static void clearInEvents(SMC* handle) {
	handle->ifaceKEYPAD.key_pressed_raised = bool_false;
    153a:	eb 81       	ldd	r30, Y+3	; 0x03
    153c:	fc 81       	ldd	r31, Y+4	; 0x04
    153e:	15 86       	std	Z+13, r1	; 0x0d
	handle->ifaceUART.DataRecieved_raised = bool_false;
    1540:	12 8a       	std	Z+18, r1	; 0x12
	handle->ifaceRF.DataRecieved_raised = bool_false;
    1542:	10 a2       	lds	r17, 0x90
	handle->iface.switchOff_raised = bool_false;
    1544:	16 ae       	sts	0xb6, r17
	handle->iface.switchOn_raised = bool_false;
    1546:	17 ae       	sts	0xb7, r17
			break;
		}
	}
	
	clearInEvents(handle);
}
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	1f 91       	pop	r17
    1556:	0f 91       	pop	r16
    1558:	ff 90       	pop	r15
    155a:	ef 90       	pop	r14
    155c:	df 90       	pop	r13
    155e:	cf 90       	pop	r12
    1560:	bf 90       	pop	r11
    1562:	af 90       	pop	r10
    1564:	9f 90       	pop	r9
    1566:	8f 90       	pop	r8
    1568:	7f 90       	pop	r7
    156a:	6f 90       	pop	r6
    156c:	5f 90       	pop	r5
    156e:	4f 90       	pop	r4
    1570:	3f 90       	pop	r3
    1572:	2f 90       	pop	r2
    1574:	08 95       	ret
	
	clearOutEvents(handle);
	
	for (handle->stateConfVectorPosition = 0;
		handle->stateConfVectorPosition < SMC_MAX_ORTHOGONAL_STATES;
		handle->stateConfVectorPosition++) {
    1576:	eb 81       	ldd	r30, Y+3	; 0x03
    1578:	fc 81       	ldd	r31, Y+4	; 0x04
    157a:	82 81       	ldd	r24, Z+2	; 0x02
    157c:	93 81       	ldd	r25, Z+3	; 0x03
    157e:	01 96       	adiw	r24, 0x01	; 1
    1580:	93 83       	std	Z+3, r25	; 0x03
    1582:	82 83       	std	Z+2, r24	; 0x02
    1584:	da cf       	rjmp	.-76     	; 0x153a <__stack+0x43b>
    1586:	eb 81       	ldd	r30, Y+3	; 0x03
    1588:	fc 81       	ldd	r31, Y+4	; 0x04
    158a:	82 81       	ldd	r24, Z+2	; 0x02
    158c:	93 81       	ldd	r25, Z+3	; 0x03
    158e:	01 96       	adiw	r24, 0x01	; 1
    1590:	93 83       	std	Z+3, r25	; 0x03
    1592:	82 83       	std	Z+2, r24	; 0x02
    1594:	d7 cd       	rjmp	.-1106   	; 0x1144 <__stack+0x45>

00001596 <sMC_raiseTimeEvent>:
	
	clearInEvents(handle);
}

void sMC_raiseTimeEvent(SMC* handle, sc_eventid evid) {
	if ( ((intptr_t)evid) >= ((intptr_t)&(handle->timeEvents))
    1596:	80 5c       	subi	r24, 0xC0	; 192
    1598:	9f 4f       	sbci	r25, 0xFF	; 255
    159a:	68 17       	cp	r22, r24
    159c:	79 07       	cpc	r23, r25
    159e:	3c f0       	brlt	.+14     	; 0x15ae <sMC_raiseTimeEvent+0x18>
		&&  ((intptr_t)evid) < ((intptr_t)&(handle->timeEvents)) + sizeof(SMCTimeEvents)) {
    15a0:	01 96       	adiw	r24, 0x01	; 1
    15a2:	68 17       	cp	r22, r24
    15a4:	79 07       	cpc	r23, r25
    15a6:	18 f4       	brcc	.+6      	; 0x15ae <sMC_raiseTimeEvent+0x18>
		*(sc_boolean*)evid = bool_true;
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	fb 01       	movw	r30, r22
    15ac:	80 83       	st	Z, r24
    15ae:	08 95       	ret

000015b0 <sMC_isActive>:
	}		
}

sc_boolean sMC_isActive(SMC* handle, SMCStates state) {
    15b0:	dc 01       	movw	r26, r24
	switch (state) {
    15b2:	e6 2f       	mov	r30, r22
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	e3 31       	cpi	r30, 0x13	; 19
    15b8:	f1 05       	cpc	r31, r1
    15ba:	08 f0       	brcs	.+2      	; 0x15be <sMC_isActive+0xe>
    15bc:	a4 c0       	rjmp	.+328    	; 0x1706 <sMC_isActive+0x156>
    15be:	ea 5b       	subi	r30, 0xBA	; 186
    15c0:	ff 4f       	sbci	r31, 0xFF	; 255
    15c2:	ee 0f       	add	r30, r30
    15c4:	ff 1f       	adc	r31, r31
    15c6:	05 90       	lpm	r0, Z+
    15c8:	f4 91       	lpm	r31, Z
    15ca:	e0 2d       	mov	r30, r0
    15cc:	09 94       	ijmp
		case SMC_main_region_On : 
			return (sc_boolean) (handle->stateConfVector[0] >= SMC_main_region_On
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	9c 91       	ld	r25, X
    15d2:	93 31       	cpi	r25, 0x13	; 19
    15d4:	08 f4       	brcc	.+2      	; 0x15d8 <sMC_isActive+0x28>
    15d6:	98 c0       	rjmp	.+304    	; 0x1708 <sMC_isActive+0x158>
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	08 95       	ret
				&& handle->stateConfVector[0] <= SMC_main_region_On_r1_Running_running_main_Send_Request_send__final_);
		case SMC_main_region_On_r1_Init : 
			return (sc_boolean) (handle->stateConfVector[0] == SMC_main_region_On_r1_Init
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	9c 91       	ld	r25, X
    15e0:	91 30       	cpi	r25, 0x01	; 1
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <sMC_isActive+0x36>
    15e4:	91 c0       	rjmp	.+290    	; 0x1708 <sMC_isActive+0x158>
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	08 95       	ret
			);
		case SMC_main_region_On_r1_Running : 
			return (sc_boolean) (handle->stateConfVector[0] >= SMC_main_region_On_r1_Running
    15ea:	9c 91       	ld	r25, X
    15ec:	92 50       	subi	r25, 0x02	; 2
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	91 31       	cpi	r25, 0x11	; 17
    15f2:	08 f4       	brcc	.+2      	; 0x15f6 <sMC_isActive+0x46>
    15f4:	89 c0       	rjmp	.+274    	; 0x1708 <sMC_isActive+0x158>
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	08 95       	ret
				&& handle->stateConfVector[0] <= SMC_main_region_On_r1_Running_running_main_Send_Request_send__final_);
		case SMC_main_region_On_r1_Running_keypad_CheckKey : 
			return (sc_boolean) (handle->stateConfVector[0] == SMC_main_region_On_r1_Running_keypad_CheckKey
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	9c 91       	ld	r25, X
    15fe:	93 30       	cpi	r25, 0x03	; 3
    1600:	09 f4       	brne	.+2      	; 0x1604 <sMC_isActive+0x54>
    1602:	82 c0       	rjmp	.+260    	; 0x1708 <sMC_isActive+0x158>
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	08 95       	ret
			);
		case SMC_main_region_On_r1_Running_keypad_CheckKeyDown : 
			return (sc_boolean) (handle->stateConfVector[0] == SMC_main_region_On_r1_Running_keypad_CheckKeyDown
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	9c 91       	ld	r25, X
    160c:	94 30       	cpi	r25, 0x04	; 4
    160e:	09 f4       	brne	.+2      	; 0x1612 <sMC_isActive+0x62>
    1610:	7b c0       	rjmp	.+246    	; 0x1708 <sMC_isActive+0x158>
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	08 95       	ret
			);
		case SMC_main_region_On_r1_Running_running_main_WaitingForRequest : 
			return (sc_boolean) (handle->stateConfVector[1] == SMC_main_region_On_r1_Running_running_main_WaitingForRequest
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	11 96       	adiw	r26, 0x01	; 1
    161a:	9c 91       	ld	r25, X
    161c:	11 97       	sbiw	r26, 0x01	; 1
    161e:	95 30       	cpi	r25, 0x05	; 5
    1620:	09 f4       	brne	.+2      	; 0x1624 <sMC_isActive+0x74>
    1622:	72 c0       	rjmp	.+228    	; 0x1708 <sMC_isActive+0x158>
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	08 95       	ret
			);
		case SMC_main_region_On_r1_Running_running_main_CheckKeyPress : 
			return (sc_boolean) (handle->stateConfVector[1] == SMC_main_region_On_r1_Running_running_main_CheckKeyPress
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	11 96       	adiw	r26, 0x01	; 1
    162c:	9c 91       	ld	r25, X
    162e:	11 97       	sbiw	r26, 0x01	; 1
    1630:	96 30       	cpi	r25, 0x06	; 6
    1632:	09 f4       	brne	.+2      	; 0x1636 <sMC_isActive+0x86>
    1634:	69 c0       	rjmp	.+210    	; 0x1708 <sMC_isActive+0x158>
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	08 95       	ret
			);
		case SMC_main_region_On_r1_Running_running_main_FinishDish : 
			return (sc_boolean) (handle->stateConfVector[1] == SMC_main_region_On_r1_Running_running_main_FinishDish
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	11 96       	adiw	r26, 0x01	; 1
    163e:	9c 91       	ld	r25, X
    1640:	11 97       	sbiw	r26, 0x01	; 1
    1642:	97 30       	cpi	r25, 0x07	; 7
    1644:	09 f4       	brne	.+2      	; 0x1648 <sMC_isActive+0x98>
    1646:	60 c0       	rjmp	.+192    	; 0x1708 <sMC_isActive+0x158>
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	08 95       	ret
			);
		case SMC_main_region_On_r1_Running_running_main_CancelDish : 
			return (sc_boolean) (handle->stateConfVector[1] == SMC_main_region_On_r1_Running_running_main_CancelDish
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	11 96       	adiw	r26, 0x01	; 1
    1650:	9c 91       	ld	r25, X
    1652:	11 97       	sbiw	r26, 0x01	; 1
    1654:	98 30       	cpi	r25, 0x08	; 8
    1656:	09 f4       	brne	.+2      	; 0x165a <sMC_isActive+0xaa>
    1658:	57 c0       	rjmp	.+174    	; 0x1708 <sMC_isActive+0x158>
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	08 95       	ret
			);
		case SMC_main_region_On_r1_Running_running_main_EnterData : 
			return (sc_boolean) (handle->stateConfVector[1] >= SMC_main_region_On_r1_Running_running_main_EnterData
    165e:	11 96       	adiw	r26, 0x01	; 1
    1660:	9c 91       	ld	r25, X
    1662:	11 97       	sbiw	r26, 0x01	; 1
    1664:	99 50       	subi	r25, 0x09	; 9
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	94 30       	cpi	r25, 0x04	; 4
    166a:	08 f4       	brcc	.+2      	; 0x166e <sMC_isActive+0xbe>
    166c:	4d c0       	rjmp	.+154    	; 0x1708 <sMC_isActive+0x158>
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	08 95       	ret
				&& handle->stateConfVector[1] <= SMC_main_region_On_r1_Running_running_main_EnterData_r1_CheckKeyPress1);
		case SMC_main_region_On_r1_Running_running_main_EnterData_r1_ChooseDish : 
			return (sc_boolean) (handle->stateConfVector[1] == SMC_main_region_On_r1_Running_running_main_EnterData_r1_ChooseDish
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	11 96       	adiw	r26, 0x01	; 1
    1676:	9c 91       	ld	r25, X
    1678:	11 97       	sbiw	r26, 0x01	; 1
    167a:	9a 30       	cpi	r25, 0x0A	; 10
    167c:	09 f4       	brne	.+2      	; 0x1680 <sMC_isActive+0xd0>
    167e:	44 c0       	rjmp	.+136    	; 0x1708 <sMC_isActive+0x158>
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	08 95       	ret
			);
		case SMC_main_region_On_r1_Running_running_main_EnterData_r1__final_ : 
			return (sc_boolean) (handle->stateConfVector[1] == SMC_main_region_On_r1_Running_running_main_EnterData_r1__final_
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	11 96       	adiw	r26, 0x01	; 1
    1688:	9c 91       	ld	r25, X
    168a:	11 97       	sbiw	r26, 0x01	; 1
    168c:	9b 30       	cpi	r25, 0x0B	; 11
    168e:	e1 f1       	breq	.+120    	; 0x1708 <sMC_isActive+0x158>
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	08 95       	ret
			);
		case SMC_main_region_On_r1_Running_running_main_EnterData_r1_CheckKeyPress1 : 
			return (sc_boolean) (handle->stateConfVector[1] == SMC_main_region_On_r1_Running_running_main_EnterData_r1_CheckKeyPress1
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	11 96       	adiw	r26, 0x01	; 1
    1698:	9c 91       	ld	r25, X
    169a:	11 97       	sbiw	r26, 0x01	; 1
    169c:	9c 30       	cpi	r25, 0x0C	; 12
    169e:	a1 f1       	breq	.+104    	; 0x1708 <sMC_isActive+0x158>
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	08 95       	ret
			);
		case SMC_main_region_On_r1_Running_running_main_Send_Request : 
			return (sc_boolean) (handle->stateConfVector[1] >= SMC_main_region_On_r1_Running_running_main_Send_Request
    16a4:	11 96       	adiw	r26, 0x01	; 1
    16a6:	9c 91       	ld	r25, X
    16a8:	11 97       	sbiw	r26, 0x01	; 1
    16aa:	9d 50       	subi	r25, 0x0D	; 13
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	96 30       	cpi	r25, 0x06	; 6
    16b0:	58 f1       	brcs	.+86     	; 0x1708 <sMC_isActive+0x158>
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	08 95       	ret
				&& handle->stateConfVector[1] <= SMC_main_region_On_r1_Running_running_main_Send_Request_send__final_);
		case SMC_main_region_On_r1_Running_running_main_Send_Request_send_Send : 
			return (sc_boolean) (handle->stateConfVector[1] == SMC_main_region_On_r1_Running_running_main_Send_Request_send_Send
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	11 96       	adiw	r26, 0x01	; 1
    16ba:	9c 91       	ld	r25, X
    16bc:	11 97       	sbiw	r26, 0x01	; 1
    16be:	9e 30       	cpi	r25, 0x0E	; 14
    16c0:	19 f1       	breq	.+70     	; 0x1708 <sMC_isActive+0x158>
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	08 95       	ret
			);
		case SMC_main_region_On_r1_Running_running_main_Send_Request_send_Check : 
			return (sc_boolean) (handle->stateConfVector[1] == SMC_main_region_On_r1_Running_running_main_Send_Request_send_Check
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	11 96       	adiw	r26, 0x01	; 1
    16ca:	9c 91       	ld	r25, X
    16cc:	11 97       	sbiw	r26, 0x01	; 1
    16ce:	9f 30       	cpi	r25, 0x0F	; 15
    16d0:	d9 f0       	breq	.+54     	; 0x1708 <sMC_isActive+0x158>
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	08 95       	ret
			);
		case SMC_main_region_On_r1_Running_running_main_Send_Request_send_SendFail : 
			return (sc_boolean) (handle->stateConfVector[1] == SMC_main_region_On_r1_Running_running_main_Send_Request_send_SendFail
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	11 96       	adiw	r26, 0x01	; 1
    16da:	9c 91       	ld	r25, X
    16dc:	11 97       	sbiw	r26, 0x01	; 1
    16de:	90 31       	cpi	r25, 0x10	; 16
    16e0:	99 f0       	breq	.+38     	; 0x1708 <sMC_isActive+0x158>
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	08 95       	ret
			);
		case SMC_main_region_On_r1_Running_running_main_Send_Request_send_ResetResult : 
			return (sc_boolean) (handle->stateConfVector[1] == SMC_main_region_On_r1_Running_running_main_Send_Request_send_ResetResult
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	11 96       	adiw	r26, 0x01	; 1
    16ea:	9c 91       	ld	r25, X
    16ec:	11 97       	sbiw	r26, 0x01	; 1
    16ee:	91 31       	cpi	r25, 0x11	; 17
    16f0:	59 f0       	breq	.+22     	; 0x1708 <sMC_isActive+0x158>
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	08 95       	ret
			);
		case SMC_main_region_On_r1_Running_running_main_Send_Request_send__final_ : 
			return (sc_boolean) (handle->stateConfVector[1] == SMC_main_region_On_r1_Running_running_main_Send_Request_send__final_
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	11 96       	adiw	r26, 0x01	; 1
    16fa:	9c 91       	ld	r25, X
    16fc:	11 97       	sbiw	r26, 0x01	; 1
    16fe:	92 31       	cpi	r25, 0x12	; 18
    1700:	19 f0       	breq	.+6      	; 0x1708 <sMC_isActive+0x158>
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	08 95       	ret
			);
		default: return bool_false;
    1706:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1708:	08 95       	ret

0000170a <sMCIfaceKEYPAD_raise_key_pressed>:



void sMCIfaceKEYPAD_raise_key_pressed(SMC* handle) {
	handle->ifaceKEYPAD.key_pressed_raised = bool_true;
    170a:	21 e0       	ldi	r18, 0x01	; 1
    170c:	fc 01       	movw	r30, r24
    170e:	25 87       	std	Z+13, r18	; 0x0d
}
    1710:	08 95       	ret

00001712 <sMCIfaceKEYPAD_get_key>:


sc_integer sMCIfaceKEYPAD_get_key(SMC* handle) {
    1712:	fc 01       	movw	r30, r24
	return handle->ifaceKEYPAD.key;
    1714:	64 81       	ldd	r22, Z+4	; 0x04
    1716:	75 81       	ldd	r23, Z+5	; 0x05
}
    1718:	86 81       	ldd	r24, Z+6	; 0x06
    171a:	97 81       	ldd	r25, Z+7	; 0x07
    171c:	08 95       	ret

0000171e <sMCIfaceKEYPAD_set_key>:
void sMCIfaceKEYPAD_set_key(SMC* handle, sc_integer value) {
	handle->ifaceKEYPAD.key = value;
    171e:	fc 01       	movw	r30, r24
    1720:	44 83       	std	Z+4, r20	; 0x04
    1722:	55 83       	std	Z+5, r21	; 0x05
    1724:	66 83       	std	Z+6, r22	; 0x06
    1726:	77 83       	std	Z+7, r23	; 0x07
}
    1728:	08 95       	ret

0000172a <sMCIfaceKEYPAD_get_lastkey>:
sc_integer sMCIfaceKEYPAD_get_lastkey(SMC* handle) {
    172a:	fc 01       	movw	r30, r24
	return handle->ifaceKEYPAD.lastkey;
    172c:	60 85       	ldd	r22, Z+8	; 0x08
    172e:	71 85       	ldd	r23, Z+9	; 0x09
}
    1730:	82 85       	ldd	r24, Z+10	; 0x0a
    1732:	93 85       	ldd	r25, Z+11	; 0x0b
    1734:	08 95       	ret

00001736 <sMCIfaceKEYPAD_set_lastkey>:
void sMCIfaceKEYPAD_set_lastkey(SMC* handle, sc_integer value) {
	handle->ifaceKEYPAD.lastkey = value;
    1736:	fc 01       	movw	r30, r24
    1738:	40 87       	std	Z+8, r20	; 0x08
    173a:	51 87       	std	Z+9, r21	; 0x09
    173c:	62 87       	std	Z+10, r22	; 0x0a
    173e:	73 87       	std	Z+11, r23	; 0x0b
}
    1740:	08 95       	ret

00001742 <sMCIfaceKEYPAD_get_key_down>:
sc_boolean sMCIfaceKEYPAD_get_key_down(SMC* handle) {
	return handle->ifaceKEYPAD.key_down;
}
    1742:	fc 01       	movw	r30, r24
    1744:	84 85       	ldd	r24, Z+12	; 0x0c
    1746:	08 95       	ret

00001748 <sMCIfaceKEYPAD_set_key_down>:
void sMCIfaceKEYPAD_set_key_down(SMC* handle, sc_boolean value) {
	handle->ifaceKEYPAD.key_down = value;
    1748:	fc 01       	movw	r30, r24
    174a:	64 87       	std	Z+12, r22	; 0x0c
}
    174c:	08 95       	ret

0000174e <sMCIfaceUART_raise_dataRecieved>:
void sMCIfaceUART_raise_dataRecieved(SMC* handle) {
	handle->ifaceUART.DataRecieved_raised = bool_true;
    174e:	21 e0       	ldi	r18, 0x01	; 1
    1750:	fc 01       	movw	r30, r24
    1752:	22 8b       	std	Z+18, r18	; 0x12
}
    1754:	08 95       	ret

00001756 <sMCIfaceUART_get_data>:


sc_string sMCIfaceUART_get_data(SMC* handle) {
    1756:	fc 01       	movw	r30, r24
	return handle->ifaceUART.data;
}
    1758:	86 85       	ldd	r24, Z+14	; 0x0e
    175a:	97 85       	ldd	r25, Z+15	; 0x0f
    175c:	08 95       	ret

0000175e <sMCIfaceUART_set_data>:
void sMCIfaceUART_set_data(SMC* handle, sc_string value) {
	handle->ifaceUART.data = value;
    175e:	fc 01       	movw	r30, r24
    1760:	77 87       	std	Z+15, r23	; 0x0f
    1762:	66 87       	std	Z+14, r22	; 0x0e
}
    1764:	08 95       	ret

00001766 <sMCIfaceUART_get_lastdata>:
sc_string sMCIfaceUART_get_lastdata(SMC* handle) {
    1766:	fc 01       	movw	r30, r24
	return handle->ifaceUART.lastdata;
}
    1768:	80 89       	ldd	r24, Z+16	; 0x10
    176a:	91 89       	ldd	r25, Z+17	; 0x11
    176c:	08 95       	ret

0000176e <sMCIfaceUART_set_lastdata>:
void sMCIfaceUART_set_lastdata(SMC* handle, sc_string value) {
	handle->ifaceUART.lastdata = value;
    176e:	fc 01       	movw	r30, r24
    1770:	71 8b       	std	Z+17, r23	; 0x11
    1772:	60 8b       	std	Z+16, r22	; 0x10
}
    1774:	08 95       	ret

00001776 <sMCIfaceRF_raise_dataRecieved>:
void sMCIfaceRF_raise_dataRecieved(SMC* handle) {
	handle->ifaceRF.DataRecieved_raised = bool_true;
    1776:	21 e0       	ldi	r18, 0x01	; 1
    1778:	fc 01       	movw	r30, r24
    177a:	20 a3       	lds	r18, 0x50
}
    177c:	08 95       	ret

0000177e <sMCIfaceRF_get_data>:


sc_string sMCIfaceRF_get_data(SMC* handle) {
    177e:	fc 01       	movw	r30, r24
	return handle->ifaceRF.data;
}
    1780:	83 89       	ldd	r24, Z+19	; 0x13
    1782:	94 89       	ldd	r25, Z+20	; 0x14
    1784:	08 95       	ret

00001786 <sMCIfaceRF_set_data>:
void sMCIfaceRF_set_data(SMC* handle, sc_string value) {
	handle->ifaceRF.data = value;
    1786:	fc 01       	movw	r30, r24
    1788:	74 8b       	std	Z+20, r23	; 0x14
    178a:	63 8b       	std	Z+19, r22	; 0x13
}
    178c:	08 95       	ret

0000178e <sMCIfaceRF_get_lastdata>:
sc_string sMCIfaceRF_get_lastdata(SMC* handle) {
    178e:	fc 01       	movw	r30, r24
	return handle->ifaceRF.lastdata;
}
    1790:	85 89       	ldd	r24, Z+21	; 0x15
    1792:	96 89       	ldd	r25, Z+22	; 0x16
    1794:	08 95       	ret

00001796 <sMCIfaceRF_set_lastdata>:
void sMCIfaceRF_set_lastdata(SMC* handle, sc_string value) {
	handle->ifaceRF.lastdata = value;
    1796:	fc 01       	movw	r30, r24
    1798:	76 8b       	std	Z+22, r23	; 0x16
    179a:	65 8b       	std	Z+21, r22	; 0x15
}
    179c:	08 95       	ret

0000179e <sMCIfaceRF_get_result>:
sc_boolean sMCIfaceRF_get_result(SMC* handle) {
	return handle->ifaceRF.result;
}
    179e:	fc 01       	movw	r30, r24
    17a0:	87 89       	ldd	r24, Z+23	; 0x17
    17a2:	08 95       	ret

000017a4 <sMCIfaceRF_set_result>:
void sMCIfaceRF_set_result(SMC* handle, sc_boolean value) {
	handle->ifaceRF.result = value;
    17a4:	fc 01       	movw	r30, r24
    17a6:	67 8b       	std	Z+23, r22	; 0x17
}
    17a8:	08 95       	ret

000017aa <sMCIfaceRF_get_retry>:
sc_integer sMCIfaceRF_get_retry(SMC* handle) {
    17aa:	fc 01       	movw	r30, r24
	return handle->ifaceRF.retry;
    17ac:	60 8d       	ldd	r22, Z+24	; 0x18
    17ae:	71 8d       	ldd	r23, Z+25	; 0x19
}
    17b0:	82 8d       	ldd	r24, Z+26	; 0x1a
    17b2:	93 8d       	ldd	r25, Z+27	; 0x1b
    17b4:	08 95       	ret

000017b6 <sMCIfaceRF_set_retry>:
void sMCIfaceRF_set_retry(SMC* handle, sc_integer value) {
	handle->ifaceRF.retry = value;
    17b6:	fc 01       	movw	r30, r24
    17b8:	40 8f       	std	Z+24, r20	; 0x18
    17ba:	51 8f       	std	Z+25, r21	; 0x19
    17bc:	62 8f       	std	Z+26, r22	; 0x1a
    17be:	73 8f       	std	Z+27, r23	; 0x1b
}
    17c0:	08 95       	ret

000017c2 <sMCIfaceRF_get_iD>:
sc_integer sMCIfaceRF_get_iD(SMC* handle) {
    17c2:	fc 01       	movw	r30, r24
	return handle->ifaceRF.ID;
    17c4:	64 8d       	ldd	r22, Z+28	; 0x1c
    17c6:	75 8d       	ldd	r23, Z+29	; 0x1d
}
    17c8:	86 8d       	ldd	r24, Z+30	; 0x1e
    17ca:	97 8d       	ldd	r25, Z+31	; 0x1f
    17cc:	08 95       	ret

000017ce <sMCIfaceRF_set_iD>:
void sMCIfaceRF_set_iD(SMC* handle, sc_integer value) {
	handle->ifaceRF.ID = value;
    17ce:	fc 01       	movw	r30, r24
    17d0:	44 8f       	std	Z+28, r20	; 0x1c
    17d2:	55 8f       	std	Z+29, r21	; 0x1d
    17d4:	66 8f       	std	Z+30, r22	; 0x1e
    17d6:	77 8f       	std	Z+31, r23	; 0x1f
}
    17d8:	08 95       	ret

000017da <sMCIfaceDISH_get_iD>:


sc_integer sMCIfaceDISH_get_iD(SMC* handle) {
    17da:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.ID;
    17dc:	61 a1       	lds	r22, 0x41
    17de:	72 a1       	lds	r23, 0x42
}
    17e0:	83 a1       	lds	r24, 0x43
    17e2:	94 a1       	lds	r25, 0x44
    17e4:	08 95       	ret

000017e6 <sMCIfaceDISH_set_iD>:
void sMCIfaceDISH_set_iD(SMC* handle, sc_integer value) {
	handle->ifaceDISH.ID = value;
    17e6:	fc 01       	movw	r30, r24
    17e8:	41 a3       	lds	r20, 0x51
    17ea:	52 a3       	lds	r21, 0x52
    17ec:	63 a3       	lds	r22, 0x53
    17ee:	74 a3       	lds	r23, 0x54
}
    17f0:	08 95       	ret

000017f2 <sMCIfaceDISH_get_amount>:
sc_integer sMCIfaceDISH_get_amount(SMC* handle) {
    17f2:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.amount;
    17f4:	65 a1       	lds	r22, 0x45
    17f6:	76 a1       	lds	r23, 0x46
}
    17f8:	87 a1       	lds	r24, 0x47
    17fa:	90 a5       	lds	r25, 0x60
    17fc:	08 95       	ret

000017fe <sMCIfaceDISH_set_amount>:
void sMCIfaceDISH_set_amount(SMC* handle, sc_integer value) {
	handle->ifaceDISH.amount = value;
    17fe:	fc 01       	movw	r30, r24
    1800:	45 a3       	lds	r20, 0x55
    1802:	56 a3       	lds	r21, 0x56
    1804:	67 a3       	lds	r22, 0x57
    1806:	70 a7       	lds	r23, 0x70
}
    1808:	08 95       	ret

0000180a <sMCIfaceDISH_get_pos>:
sc_integer sMCIfaceDISH_get_pos(SMC* handle) {
    180a:	fc 01       	movw	r30, r24
	return handle->ifaceDISH.pos;
    180c:	61 a5       	lds	r22, 0x61
    180e:	72 a5       	lds	r23, 0x62
}
    1810:	83 a5       	lds	r24, 0x63
    1812:	94 a5       	lds	r25, 0x64
    1814:	08 95       	ret

00001816 <sMCIfaceDISH_set_pos>:
void sMCIfaceDISH_set_pos(SMC* handle, sc_integer value) {
	handle->ifaceDISH.pos = value;
    1816:	fc 01       	movw	r30, r24
    1818:	41 a7       	lds	r20, 0x71
    181a:	52 a7       	lds	r21, 0x72
    181c:	63 a7       	lds	r22, 0x73
    181e:	74 a7       	lds	r23, 0x74
}
    1820:	08 95       	ret

00001822 <sMCIface_raise_switchOff>:
void sMCIface_raise_switchOff(SMC* handle) {
	handle->iface.switchOff_raised = bool_true;
    1822:	21 e0       	ldi	r18, 0x01	; 1
    1824:	fc 01       	movw	r30, r24
    1826:	26 af       	sts	0x76, r18
}
    1828:	08 95       	ret

0000182a <sMCIface_raise_switchOn>:
void sMCIface_raise_switchOn(SMC* handle) {
	handle->iface.switchOn_raised = bool_true;
    182a:	21 e0       	ldi	r18, 0x01	; 1
    182c:	fc 01       	movw	r30, r24
    182e:	27 af       	sts	0x77, r18
}
    1830:	08 95       	ret

00001832 <sMCIface_get_lightOn>:


sc_boolean sMCIface_get_lightOn(SMC* handle) {
	return handle->iface.lightOn;
}
    1832:	fc 01       	movw	r30, r24
    1834:	85 a5       	lds	r24, 0x65
    1836:	08 95       	ret

00001838 <sMCIface_set_lightOn>:
void sMCIface_set_lightOn(SMC* handle, sc_boolean value) {
	handle->iface.lightOn = value;
    1838:	fc 01       	movw	r30, r24
    183a:	65 a7       	lds	r22, 0x75
}
    183c:	08 95       	ret

0000183e <sMCIface_get_menuId>:
sc_integer sMCIface_get_menuId(SMC* handle) {
    183e:	fc 01       	movw	r30, r24
	return handle->iface.menuId;
    1840:	66 a5       	lds	r22, 0x66
    1842:	77 a5       	lds	r23, 0x67
}
    1844:	80 a9       	sts	0x40, r24
    1846:	91 a9       	sts	0x41, r25
    1848:	08 95       	ret

0000184a <sMCIface_set_menuId>:
void sMCIface_set_menuId(SMC* handle, sc_integer value) {
	handle->iface.menuId = value;
    184a:	fc 01       	movw	r30, r24
    184c:	46 a7       	lds	r20, 0x76
    184e:	57 a7       	lds	r21, 0x77
    1850:	60 ab       	sts	0x50, r22
    1852:	71 ab       	sts	0x51, r23
}
    1854:	08 95       	ret

00001856 <sMCIface_get_tableId>:
sc_integer sMCIface_get_tableId(SMC* handle) {
    1856:	fc 01       	movw	r30, r24
	return handle->iface.tableId;
    1858:	62 a9       	sts	0x42, r22
    185a:	73 a9       	sts	0x43, r23
}
    185c:	84 a9       	sts	0x44, r24
    185e:	95 a9       	sts	0x45, r25
    1860:	08 95       	ret

00001862 <sMCIface_set_tableId>:
void sMCIface_set_tableId(SMC* handle, sc_integer value) {
	handle->iface.tableId = value;
    1862:	fc 01       	movw	r30, r24
    1864:	42 ab       	sts	0x52, r20
    1866:	53 ab       	sts	0x53, r21
    1868:	64 ab       	sts	0x54, r22
    186a:	75 ab       	sts	0x55, r23
}
    186c:	08 95       	ret

0000186e <sMCIface_get_requestId>:
sc_integer sMCIface_get_requestId(SMC* handle) {
    186e:	fc 01       	movw	r30, r24
	return handle->iface.requestId;
    1870:	66 a9       	sts	0x46, r22
    1872:	77 a9       	sts	0x47, r23
}
    1874:	80 ad       	sts	0x60, r24
    1876:	91 ad       	sts	0x61, r25
    1878:	08 95       	ret

0000187a <sMCIface_set_requestId>:
void sMCIface_set_requestId(SMC* handle, sc_integer value) {
	handle->iface.requestId = value;
    187a:	fc 01       	movw	r30, r24
    187c:	46 ab       	sts	0x56, r20
    187e:	57 ab       	sts	0x57, r21
    1880:	60 af       	sts	0x70, r22
    1882:	71 af       	sts	0x71, r23
}
    1884:	08 95       	ret

00001886 <sMCIface_get_listId>:
sc_integer sMCIface_get_listId(SMC* handle) {
    1886:	fc 01       	movw	r30, r24
	return handle->iface.listId;
    1888:	62 ad       	sts	0x62, r22
    188a:	73 ad       	sts	0x63, r23
}
    188c:	84 ad       	sts	0x64, r24
    188e:	95 ad       	sts	0x65, r25
    1890:	08 95       	ret

00001892 <sMCIface_set_listId>:
void sMCIface_set_listId(SMC* handle, sc_integer value) {
	handle->iface.listId = value;
    1892:	fc 01       	movw	r30, r24
    1894:	42 af       	sts	0x72, r20
    1896:	53 af       	sts	0x73, r21
    1898:	64 af       	sts	0x74, r22
    189a:	75 af       	sts	0x75, r23
}
    189c:	08 95       	ret

0000189e <spi_init>:

/*
 * spi initialize
 */
void spi_init() {
    SPI_DDR &= ~((1<<SPI_MOSI) | (1<<SPI_MISO) | (1<<SPI_SS) | (1<<SPI_SCK)); //input
    189e:	87 b3       	in	r24, 0x17	; 23
    18a0:	80 7f       	andi	r24, 0xF0	; 240
    18a2:	87 bb       	out	0x17, r24	; 23
    SPI_DDR |= ((1<<SPI_MOSI) | (1<<SPI_SS) | (1<<SPI_SCK)); //output
    18a4:	87 b3       	in	r24, 0x17	; 23
    18a6:	87 60       	ori	r24, 0x07	; 7
    18a8:	87 bb       	out	0x17, r24	; 23

    SPCR = ((1<<SPE)|               // SPI Enable
    18aa:	81 e5       	ldi	r24, 0x51	; 81
    18ac:	8d b9       	out	0x0d, r24	; 13
            (1<<MSTR)|              // Master/Slave select
            (0<<SPR1)|(1<<SPR0)|    // SPI Clock Rate
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR = (1<<SPI2X); // Double SPI Speed Bit
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	8e b9       	out	0x0e, r24	; 14
}
    18b2:	08 95       	ret

000018b4 <spi_writereadbyte>:

/*
 * spi write one byte and read it back
 */
uint8_t spi_writereadbyte(uint8_t data) {
    SPDR = data;
    18b4:	8f b9       	out	0x0f, r24	; 15
    while((SPSR & (1<<SPIF)) == 0);
    18b6:	77 9b       	sbis	0x0e, 7	; 14
    18b8:	fe cf       	rjmp	.-4      	; 0x18b6 <spi_writereadbyte+0x2>
    return SPDR;
    18ba:	8f b1       	in	r24, 0x0f	; 15
}
    18bc:	08 95       	ret

000018be <TimerInit>:

TimeEvent tmrEvent[10];
int tmrCount=0;

void TimerInit() {
	TCCR0 = 0b011; //CS02=0, CS01=1, CS00=0, chon Prescaler=64
    18be:	83 e0       	ldi	r24, 0x03	; 3
    18c0:	83 bf       	out	0x33, r24	; 51
	//Xung chip la 8MHZ -> 1 xung mat 1us/8 = 0.125 us
	//Prescaler=64, kich 256 lan moi tang 1 lan trong bo dem Timer-> Ton 8us
	//Vay, de Timer ngat moi 1ms, ta can: 1000/8=125 lan dem.
	//Ma Timer ngat khi bo dem toi 255, ta can set gia tri ban dau cho bo dem la: 255-125+1=131
	TCNT0=131;
    18c2:	83 e8       	ldi	r24, 0x83	; 131
    18c4:	82 bf       	out	0x32, r24	; 50
	TIMSK=(1<<TOIE0); //Cho phep ngat khi cho tran o T/C0
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	87 bf       	out	0x37, r24	; 55
	tmrCount=0;
    18ca:	10 92 0d 02 	sts	0x020D, r1
    18ce:	10 92 0c 02 	sts	0x020C, r1
	sei();
    18d2:	78 94       	sei
}
    18d4:	08 95       	ret

000018d6 <TimerSet>:

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
    18d6:	cf 92       	push	r12
    18d8:	df 92       	push	r13
    18da:	ef 92       	push	r14
    18dc:	ff 92       	push	r15
    18de:	cf 93       	push	r28
    18e0:	df 93       	push	r29
    18e2:	ec 01       	movw	r28, r24
    18e4:	6a 01       	movw	r12, r20
    18e6:	7b 01       	movw	r14, r22
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
    18e8:	40 91 0c 02 	lds	r20, 0x020C
    18ec:	50 91 0d 02 	lds	r21, 0x020D
    18f0:	14 16       	cp	r1, r20
    18f2:	15 06       	cpc	r1, r21
    18f4:	e4 f4       	brge	.+56     	; 0x192e <TimerSet+0x58>
    18f6:	e4 e2       	ldi	r30, 0x24	; 36
    18f8:	f2 e0       	ldi	r31, 0x02	; 2
    18fa:	df 01       	movw	r26, r30
    18fc:	16 96       	adiw	r26, 0x06	; 6
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
	sei();
}

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
    1902:	70 e0       	ldi	r23, 0x00	; 0
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
			check=true;
			tmrEvent[i].count=0;
			tmrEvent[i].max=max;
			tmrEvent[i].enabled=true;
    1904:	61 e0       	ldi	r22, 0x01	; 1

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
    1906:	80 81       	ld	r24, Z
    1908:	91 81       	ldd	r25, Z+1	; 0x01
    190a:	8c 17       	cp	r24, r28
    190c:	9d 07       	cpc	r25, r29
    190e:	31 f4       	brne	.+12     	; 0x191c <TimerSet+0x46>
			check=true;
			tmrEvent[i].count=0;
    1910:	13 82       	std	Z+3, r1	; 0x03
    1912:	12 82       	std	Z+2, r1	; 0x02
			tmrEvent[i].max=max;
    1914:	d5 82       	std	Z+5, r13	; 0x05
    1916:	c4 82       	std	Z+4, r12	; 0x04
			tmrEvent[i].enabled=true;
    1918:	6c 93       	st	X, r22
//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
			check=true;
    191a:	76 2f       	mov	r23, r22
}

//Ham them Timer cho 1 su kien
void TimerSet(const sc_eventid evenId,const sc_integer max) {
	bool check=false;
	for (int i=0;i<tmrCount;i++) {
    191c:	2f 5f       	subi	r18, 0xFF	; 255
    191e:	3f 4f       	sbci	r19, 0xFF	; 255
    1920:	37 96       	adiw	r30, 0x07	; 7
    1922:	17 96       	adiw	r26, 0x07	; 7
    1924:	24 17       	cp	r18, r20
    1926:	35 07       	cpc	r19, r21
    1928:	74 f3       	brlt	.-36     	; 0x1906 <TimerSet+0x30>
			tmrEvent[i].count=0;
			tmrEvent[i].max=max;
			tmrEvent[i].enabled=true;
		}
	}
	if (!check) {
    192a:	77 23       	and	r23, r23
    192c:	c9 f4       	brne	.+50     	; 0x1960 <TimerSet+0x8a>
		tmrEvent[tmrCount].EventId=evenId;
    192e:	fa 01       	movw	r30, r20
    1930:	ee 0f       	add	r30, r30
    1932:	ff 1f       	adc	r31, r31
    1934:	ee 0f       	add	r30, r30
    1936:	ff 1f       	adc	r31, r31
    1938:	ee 0f       	add	r30, r30
    193a:	ff 1f       	adc	r31, r31
    193c:	e4 1b       	sub	r30, r20
    193e:	f5 0b       	sbc	r31, r21
    1940:	ec 5d       	subi	r30, 0xDC	; 220
    1942:	fd 4f       	sbci	r31, 0xFD	; 253
    1944:	d1 83       	std	Z+1, r29	; 0x01
    1946:	c0 83       	st	Z, r28
		tmrEvent[tmrCount].count=0;
    1948:	13 82       	std	Z+3, r1	; 0x03
    194a:	12 82       	std	Z+2, r1	; 0x02
		tmrEvent[tmrCount].max=max;
    194c:	d5 82       	std	Z+5, r13	; 0x05
    194e:	c4 82       	std	Z+4, r12	; 0x04
		tmrEvent[tmrCount].enabled=true;
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	86 83       	std	Z+6, r24	; 0x06
		tmrCount++;
    1954:	4f 5f       	subi	r20, 0xFF	; 255
    1956:	5f 4f       	sbci	r21, 0xFF	; 255
    1958:	50 93 0d 02 	sts	0x020D, r21
    195c:	40 93 0c 02 	sts	0x020C, r20
	}
}
    1960:	df 91       	pop	r29
    1962:	cf 91       	pop	r28
    1964:	ff 90       	pop	r15
    1966:	ef 90       	pop	r14
    1968:	df 90       	pop	r13
    196a:	cf 90       	pop	r12
    196c:	08 95       	ret

0000196e <TimerUnSet>:

void TimerUnSet(const sc_eventid evenId) {
    196e:	dc 01       	movw	r26, r24
	for (int i=0;i<tmrCount;i++) {
    1970:	60 91 0c 02 	lds	r22, 0x020C
    1974:	70 91 0d 02 	lds	r23, 0x020D
    1978:	16 16       	cp	r1, r22
    197a:	17 06       	cpc	r1, r23
    197c:	6c f5       	brge	.+90     	; 0x19d8 <TimerUnSet+0x6a>
		if (tmrEvent[i].EventId==evenId) {
    197e:	80 91 24 02 	lds	r24, 0x0224
    1982:	90 91 25 02 	lds	r25, 0x0225
    1986:	8a 17       	cp	r24, r26
    1988:	9b 07       	cpc	r25, r27
    198a:	e9 f4       	brne	.+58     	; 0x19c6 <TimerUnSet+0x58>
    198c:	0a c0       	rjmp	.+20     	; 0x19a2 <TimerUnSet+0x34>
    198e:	29 5f       	subi	r18, 0xF9	; 249
    1990:	3f 4f       	sbci	r19, 0xFF	; 255
		tmrEvent[tmrCount].enabled=true;
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
    1992:	f9 01       	movw	r30, r18
    1994:	37 97       	sbiw	r30, 0x07	; 7
	for (int i=0;i<tmrCount;i++) {
		if (tmrEvent[i].EventId==evenId) {
    1996:	80 81       	ld	r24, Z
    1998:	91 81       	ldd	r25, Z+1	; 0x01
    199a:	8a 17       	cp	r24, r26
    199c:	9b 07       	cpc	r25, r27
    199e:	b9 f4       	brne	.+46     	; 0x19ce <TimerUnSet+0x60>
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <TimerUnSet+0x38>
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
	for (int i=0;i<tmrCount;i++) {
    19a2:	40 e0       	ldi	r20, 0x00	; 0
    19a4:	50 e0       	ldi	r21, 0x00	; 0
		if (tmrEvent[i].EventId==evenId) {
			tmrEvent[i].count=0;
    19a6:	fa 01       	movw	r30, r20
    19a8:	ee 0f       	add	r30, r30
    19aa:	ff 1f       	adc	r31, r31
    19ac:	ee 0f       	add	r30, r30
    19ae:	ff 1f       	adc	r31, r31
    19b0:	ee 0f       	add	r30, r30
    19b2:	ff 1f       	adc	r31, r31
    19b4:	e4 1b       	sub	r30, r20
    19b6:	f5 0b       	sbc	r31, r21
    19b8:	ec 5d       	subi	r30, 0xDC	; 220
    19ba:	fd 4f       	sbci	r31, 0xFD	; 253
    19bc:	13 82       	std	Z+3, r1	; 0x03
    19be:	12 82       	std	Z+2, r1	; 0x02
			tmrEvent[i].enabled=false;
    19c0:	16 82       	std	Z+6, r1	; 0x06
			*(sc_boolean*)evenId=bool_false;
    19c2:	1c 92       	st	X, r1
			return;
    19c4:	08 95       	ret
    19c6:	2b e2       	ldi	r18, 0x2B	; 43
    19c8:	32 e0       	ldi	r19, 0x02	; 2
		tmrCount++;
	}
}

void TimerUnSet(const sc_eventid evenId) {
	for (int i=0;i<tmrCount;i++) {
    19ca:	40 e0       	ldi	r20, 0x00	; 0
    19cc:	50 e0       	ldi	r21, 0x00	; 0
    19ce:	4f 5f       	subi	r20, 0xFF	; 255
    19d0:	5f 4f       	sbci	r21, 0xFF	; 255
    19d2:	46 17       	cp	r20, r22
    19d4:	57 07       	cpc	r21, r23
    19d6:	d9 f6       	brne	.-74     	; 0x198e <TimerUnSet+0x20>
    19d8:	08 95       	ret

000019da <TimerCheck>:
			return;
		}
	}
}

void TimerCheck(SMC* handle) {
    19da:	cf 92       	push	r12
    19dc:	df 92       	push	r13
    19de:	ef 92       	push	r14
    19e0:	ff 92       	push	r15
    19e2:	0f 93       	push	r16
    19e4:	1f 93       	push	r17
    19e6:	cf 93       	push	r28
    19e8:	df 93       	push	r29
    19ea:	6c 01       	movw	r12, r24
	for (int i=0;i<tmrCount;i++) {
    19ec:	80 91 0c 02 	lds	r24, 0x020C
    19f0:	90 91 0d 02 	lds	r25, 0x020D
    19f4:	18 16       	cp	r1, r24
    19f6:	19 06       	cpc	r1, r25
    19f8:	94 f5       	brge	.+100    	; 0x1a5e <TimerCheck+0x84>
    19fa:	ca e2       	ldi	r28, 0x2A	; 42
    19fc:	d2 e0       	ldi	r29, 0x02	; 2
    19fe:	8e 01       	movw	r16, r28
    1a00:	06 50       	subi	r16, 0x06	; 6
    1a02:	10 40       	sbci	r17, 0x00	; 0
    1a04:	ee 24       	eor	r14, r14
    1a06:	ff 24       	eor	r15, r15
		if (tmrEvent[i].enabled) {
    1a08:	88 81       	ld	r24, Y
    1a0a:	88 23       	and	r24, r24
    1a0c:	d9 f0       	breq	.+54     	; 0x1a44 <TimerCheck+0x6a>
			tmrEvent[i].count++;
    1a0e:	d8 01       	movw	r26, r16
    1a10:	12 96       	adiw	r26, 0x02	; 2
    1a12:	8d 91       	ld	r24, X+
    1a14:	9c 91       	ld	r25, X
    1a16:	13 97       	sbiw	r26, 0x03	; 3
    1a18:	01 96       	adiw	r24, 0x01	; 1
    1a1a:	13 96       	adiw	r26, 0x03	; 3
    1a1c:	9c 93       	st	X, r25
    1a1e:	8e 93       	st	-X, r24
    1a20:	12 97       	sbiw	r26, 0x02	; 2
			if (tmrEvent[i].count==tmrEvent[i].max) {
    1a22:	14 96       	adiw	r26, 0x04	; 4
    1a24:	2d 91       	ld	r18, X+
    1a26:	3c 91       	ld	r19, X
    1a28:	15 97       	sbiw	r26, 0x05	; 5
    1a2a:	82 17       	cp	r24, r18
    1a2c:	93 07       	cpc	r25, r19
    1a2e:	51 f4       	brne	.+20     	; 0x1a44 <TimerCheck+0x6a>
				tmrEvent[i].count=0;
    1a30:	13 96       	adiw	r26, 0x03	; 3
    1a32:	1c 92       	st	X, r1
    1a34:	1e 92       	st	-X, r1
    1a36:	12 97       	sbiw	r26, 0x02	; 2
				tmrEvent[i].enabled=false;
    1a38:	18 82       	st	Y, r1
				sMC_raiseTimeEvent(handle,tmrEvent[i].EventId);
    1a3a:	6d 91       	ld	r22, X+
    1a3c:	7c 91       	ld	r23, X
    1a3e:	c6 01       	movw	r24, r12
    1a40:	0e 94 cb 0a 	call	0x1596	; 0x1596 <sMC_raiseTimeEvent>
		}
	}
}

void TimerCheck(SMC* handle) {
	for (int i=0;i<tmrCount;i++) {
    1a44:	08 94       	sec
    1a46:	e1 1c       	adc	r14, r1
    1a48:	f1 1c       	adc	r15, r1
    1a4a:	27 96       	adiw	r28, 0x07	; 7
    1a4c:	09 5f       	subi	r16, 0xF9	; 249
    1a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a50:	80 91 0c 02 	lds	r24, 0x020C
    1a54:	90 91 0d 02 	lds	r25, 0x020D
    1a58:	e8 16       	cp	r14, r24
    1a5a:	f9 06       	cpc	r15, r25
    1a5c:	ac f2       	brlt	.-86     	; 0x1a08 <TimerCheck+0x2e>
				tmrEvent[i].enabled=false;
				sMC_raiseTimeEvent(handle,tmrEvent[i].EventId);
			}
		}
	}
}
    1a5e:	df 91       	pop	r29
    1a60:	cf 91       	pop	r28
    1a62:	1f 91       	pop	r17
    1a64:	0f 91       	pop	r16
    1a66:	ff 90       	pop	r15
    1a68:	ef 90       	pop	r14
    1a6a:	df 90       	pop	r13
    1a6c:	cf 90       	pop	r12
    1a6e:	08 95       	ret

00001a70 <TimerClear>:

void TimerClear() {
	free(tmrEvent);
    1a70:	84 e2       	ldi	r24, 0x24	; 36
    1a72:	92 e0       	ldi	r25, 0x02	; 2
    1a74:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <free>
	tmrCount=0;
    1a78:	10 92 0d 02 	sts	0x020D, r1
    1a7c:	10 92 0c 02 	sts	0x020C, r1
    1a80:	08 95       	ret

00001a82 <UART_Init>:
unsigned char* u_Data;

void UART_Init( unsigned int ubrr )
{
	/* Set baud rate */
	UBRR1H = (unsigned char)(ubrr>>8);
    1a82:	90 93 98 00 	sts	0x0098, r25
	UBRR1L = (unsigned char)ubrr;
    1a86:	80 93 99 00 	sts	0x0099, r24
	/* Enable receiver, transmitter and interrup when receive finish */
	UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1);
    1a8a:	88 e9       	ldi	r24, 0x98	; 152
    1a8c:	80 93 9a 00 	sts	0x009A, r24
	/* Set frame format: 8data, 1stop bit */
	UCSR1C = (1<<UCSZ10)|(1<<UCSZ11);
    1a90:	86 e0       	ldi	r24, 0x06	; 6
    1a92:	80 93 9d 00 	sts	0x009D, r24
	sei();
    1a96:	78 94       	sei
}
    1a98:	08 95       	ret

00001a9a <uart_putc>:

void uart_putc(unsigned char chr) {
	/* Wait for empty transmit buffer */
	while ( !( UCSR1A & (1<<UDRE1)) );
    1a9a:	eb e9       	ldi	r30, 0x9B	; 155
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	90 81       	ld	r25, Z
    1aa0:	95 ff       	sbrs	r25, 5
    1aa2:	fd cf       	rjmp	.-6      	; 0x1a9e <uart_putc+0x4>
	/* Put data into buffer, sends the data */
	UDR1 = chr;
    1aa4:	80 93 9c 00 	sts	0x009C, r24
}
    1aa8:	08 95       	ret

00001aaa <uart_puts>:

void uart_puts(const char* s){
    1aaa:	cf 93       	push	r28
    1aac:	df 93       	push	r29
    1aae:	ec 01       	movw	r28, r24
	while(*s != '\0'){
    1ab0:	88 81       	ld	r24, Y
    1ab2:	88 23       	and	r24, r24
    1ab4:	31 f0       	breq	.+12     	; 0x1ac2 <uart_puts+0x18>
	while ( !( UCSR1A & (1<<UDRE1)) );
	/* Put data into buffer, sends the data */
	UDR1 = chr;
}

void uart_puts(const char* s){
    1ab6:	21 96       	adiw	r28, 0x01	; 1
	while(*s != '\0'){
		uart_putc(*s);
    1ab8:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <uart_putc>
	/* Put data into buffer, sends the data */
	UDR1 = chr;
}

void uart_puts(const char* s){
	while(*s != '\0'){
    1abc:	89 91       	ld	r24, Y+
    1abe:	88 23       	and	r24, r24
    1ac0:	d9 f7       	brne	.-10     	; 0x1ab8 <uart_puts+0xe>
		uart_putc(*s);
		s++;
	}
	uart_putc('\0');
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <uart_putc>
}
    1ac8:	df 91       	pop	r29
    1aca:	cf 91       	pop	r28
    1acc:	08 95       	ret

00001ace <uart_getc>:
unsigned char rc[32];
int rc_count=0;
void uart_getc(SMC* handle,unsigned char chr) {
	if (chr!='\0') {
    1ace:	66 23       	and	r22, r22
    1ad0:	71 f0       	breq	.+28     	; 0x1aee <uart_getc+0x20>
		rc[rc_count]=chr;
    1ad2:	80 91 0e 02 	lds	r24, 0x020E
    1ad6:	90 91 0f 02 	lds	r25, 0x020F
    1ada:	fc 01       	movw	r30, r24
    1adc:	e6 59       	subi	r30, 0x96	; 150
    1ade:	fd 4f       	sbci	r31, 0xFD	; 253
    1ae0:	60 83       	st	Z, r22
		rc_count++;
    1ae2:	01 96       	adiw	r24, 0x01	; 1
    1ae4:	90 93 0f 02 	sts	0x020F, r25
    1ae8:	80 93 0e 02 	sts	0x020E, r24
    1aec:	08 95       	ret
	} else {
		rc[rc_count]='\0';
    1aee:	6a e6       	ldi	r22, 0x6A	; 106
    1af0:	72 e0       	ldi	r23, 0x02	; 2
    1af2:	e0 91 0e 02 	lds	r30, 0x020E
    1af6:	f0 91 0f 02 	lds	r31, 0x020F
    1afa:	e6 0f       	add	r30, r22
    1afc:	f7 1f       	adc	r31, r23
    1afe:	10 82       	st	Z, r1
		sMCIfaceRF_set_data(handle,rc);
    1b00:	0e 94 c3 0b 	call	0x1786	; 0x1786 <sMCIfaceRF_set_data>
		rc_count=0;
    1b04:	10 92 0f 02 	sts	0x020F, r1
    1b08:	10 92 0e 02 	sts	0x020E, r1
    1b0c:	08 95       	ret

00001b0e <__udivmodqi4>:
    1b0e:	99 1b       	sub	r25, r25
    1b10:	79 e0       	ldi	r23, 0x09	; 9
    1b12:	04 c0       	rjmp	.+8      	; 0x1b1c <__udivmodqi4_ep>

00001b14 <__udivmodqi4_loop>:
    1b14:	99 1f       	adc	r25, r25
    1b16:	96 17       	cp	r25, r22
    1b18:	08 f0       	brcs	.+2      	; 0x1b1c <__udivmodqi4_ep>
    1b1a:	96 1b       	sub	r25, r22

00001b1c <__udivmodqi4_ep>:
    1b1c:	88 1f       	adc	r24, r24
    1b1e:	7a 95       	dec	r23
    1b20:	c9 f7       	brne	.-14     	; 0x1b14 <__udivmodqi4_loop>
    1b22:	80 95       	com	r24
    1b24:	08 95       	ret

00001b26 <__divmodhi4>:
    1b26:	97 fb       	bst	r25, 7
    1b28:	09 2e       	mov	r0, r25
    1b2a:	07 26       	eor	r0, r23
    1b2c:	0a d0       	rcall	.+20     	; 0x1b42 <__divmodhi4_neg1>
    1b2e:	77 fd       	sbrc	r23, 7
    1b30:	04 d0       	rcall	.+8      	; 0x1b3a <__divmodhi4_neg2>
    1b32:	0c d0       	rcall	.+24     	; 0x1b4c <__udivmodhi4>
    1b34:	06 d0       	rcall	.+12     	; 0x1b42 <__divmodhi4_neg1>
    1b36:	00 20       	and	r0, r0
    1b38:	1a f4       	brpl	.+6      	; 0x1b40 <__divmodhi4_exit>

00001b3a <__divmodhi4_neg2>:
    1b3a:	70 95       	com	r23
    1b3c:	61 95       	neg	r22
    1b3e:	7f 4f       	sbci	r23, 0xFF	; 255

00001b40 <__divmodhi4_exit>:
    1b40:	08 95       	ret

00001b42 <__divmodhi4_neg1>:
    1b42:	f6 f7       	brtc	.-4      	; 0x1b40 <__divmodhi4_exit>
    1b44:	90 95       	com	r25
    1b46:	81 95       	neg	r24
    1b48:	9f 4f       	sbci	r25, 0xFF	; 255
    1b4a:	08 95       	ret

00001b4c <__udivmodhi4>:
    1b4c:	aa 1b       	sub	r26, r26
    1b4e:	bb 1b       	sub	r27, r27
    1b50:	51 e1       	ldi	r21, 0x11	; 17
    1b52:	07 c0       	rjmp	.+14     	; 0x1b62 <__udivmodhi4_ep>

00001b54 <__udivmodhi4_loop>:
    1b54:	aa 1f       	adc	r26, r26
    1b56:	bb 1f       	adc	r27, r27
    1b58:	a6 17       	cp	r26, r22
    1b5a:	b7 07       	cpc	r27, r23
    1b5c:	10 f0       	brcs	.+4      	; 0x1b62 <__udivmodhi4_ep>
    1b5e:	a6 1b       	sub	r26, r22
    1b60:	b7 0b       	sbc	r27, r23

00001b62 <__udivmodhi4_ep>:
    1b62:	88 1f       	adc	r24, r24
    1b64:	99 1f       	adc	r25, r25
    1b66:	5a 95       	dec	r21
    1b68:	a9 f7       	brne	.-22     	; 0x1b54 <__udivmodhi4_loop>
    1b6a:	80 95       	com	r24
    1b6c:	90 95       	com	r25
    1b6e:	bc 01       	movw	r22, r24
    1b70:	cd 01       	movw	r24, r26
    1b72:	08 95       	ret

00001b74 <malloc>:
    1b74:	cf 93       	push	r28
    1b76:	df 93       	push	r29
    1b78:	ac 01       	movw	r20, r24
    1b7a:	82 30       	cpi	r24, 0x02	; 2
    1b7c:	91 05       	cpc	r25, r1
    1b7e:	10 f4       	brcc	.+4      	; 0x1b84 <malloc+0x10>
    1b80:	42 e0       	ldi	r20, 0x02	; 2
    1b82:	50 e0       	ldi	r21, 0x00	; 0
    1b84:	e0 91 8e 02 	lds	r30, 0x028E
    1b88:	f0 91 8f 02 	lds	r31, 0x028F
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	a0 e0       	ldi	r26, 0x00	; 0
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	24 c0       	rjmp	.+72     	; 0x1bde <malloc+0x6a>
    1b96:	80 81       	ld	r24, Z
    1b98:	91 81       	ldd	r25, Z+1	; 0x01
    1b9a:	84 17       	cp	r24, r20
    1b9c:	95 07       	cpc	r25, r21
    1b9e:	d0 f0       	brcs	.+52     	; 0x1bd4 <malloc+0x60>
    1ba0:	84 17       	cp	r24, r20
    1ba2:	95 07       	cpc	r25, r21
    1ba4:	71 f4       	brne	.+28     	; 0x1bc2 <malloc+0x4e>
    1ba6:	82 81       	ldd	r24, Z+2	; 0x02
    1ba8:	93 81       	ldd	r25, Z+3	; 0x03
    1baa:	10 97       	sbiw	r26, 0x00	; 0
    1bac:	29 f0       	breq	.+10     	; 0x1bb8 <malloc+0x44>
    1bae:	13 96       	adiw	r26, 0x03	; 3
    1bb0:	9c 93       	st	X, r25
    1bb2:	8e 93       	st	-X, r24
    1bb4:	12 97       	sbiw	r26, 0x02	; 2
    1bb6:	2c c0       	rjmp	.+88     	; 0x1c10 <malloc+0x9c>
    1bb8:	90 93 8f 02 	sts	0x028F, r25
    1bbc:	80 93 8e 02 	sts	0x028E, r24
    1bc0:	27 c0       	rjmp	.+78     	; 0x1c10 <malloc+0x9c>
    1bc2:	21 15       	cp	r18, r1
    1bc4:	31 05       	cpc	r19, r1
    1bc6:	19 f0       	breq	.+6      	; 0x1bce <malloc+0x5a>
    1bc8:	82 17       	cp	r24, r18
    1bca:	93 07       	cpc	r25, r19
    1bcc:	18 f4       	brcc	.+6      	; 0x1bd4 <malloc+0x60>
    1bce:	9c 01       	movw	r18, r24
    1bd0:	bd 01       	movw	r22, r26
    1bd2:	ef 01       	movw	r28, r30
    1bd4:	92 81       	ldd	r25, Z+2	; 0x02
    1bd6:	83 81       	ldd	r24, Z+3	; 0x03
    1bd8:	df 01       	movw	r26, r30
    1bda:	e9 2f       	mov	r30, r25
    1bdc:	f8 2f       	mov	r31, r24
    1bde:	30 97       	sbiw	r30, 0x00	; 0
    1be0:	d1 f6       	brne	.-76     	; 0x1b96 <malloc+0x22>
    1be2:	21 15       	cp	r18, r1
    1be4:	31 05       	cpc	r19, r1
    1be6:	f9 f0       	breq	.+62     	; 0x1c26 <malloc+0xb2>
    1be8:	c9 01       	movw	r24, r18
    1bea:	84 1b       	sub	r24, r20
    1bec:	95 0b       	sbc	r25, r21
    1bee:	84 30       	cpi	r24, 0x04	; 4
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	80 f4       	brcc	.+32     	; 0x1c14 <malloc+0xa0>
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bf8:	61 15       	cp	r22, r1
    1bfa:	71 05       	cpc	r23, r1
    1bfc:	21 f0       	breq	.+8      	; 0x1c06 <malloc+0x92>
    1bfe:	fb 01       	movw	r30, r22
    1c00:	93 83       	std	Z+3, r25	; 0x03
    1c02:	82 83       	std	Z+2, r24	; 0x02
    1c04:	04 c0       	rjmp	.+8      	; 0x1c0e <malloc+0x9a>
    1c06:	90 93 8f 02 	sts	0x028F, r25
    1c0a:	80 93 8e 02 	sts	0x028E, r24
    1c0e:	fe 01       	movw	r30, r28
    1c10:	32 96       	adiw	r30, 0x02	; 2
    1c12:	42 c0       	rjmp	.+132    	; 0x1c98 <malloc+0x124>
    1c14:	fe 01       	movw	r30, r28
    1c16:	e8 0f       	add	r30, r24
    1c18:	f9 1f       	adc	r31, r25
    1c1a:	41 93       	st	Z+, r20
    1c1c:	51 93       	st	Z+, r21
    1c1e:	02 97       	sbiw	r24, 0x02	; 2
    1c20:	99 83       	std	Y+1, r25	; 0x01
    1c22:	88 83       	st	Y, r24
    1c24:	39 c0       	rjmp	.+114    	; 0x1c98 <malloc+0x124>
    1c26:	80 91 8c 02 	lds	r24, 0x028C
    1c2a:	90 91 8d 02 	lds	r25, 0x028D
    1c2e:	00 97       	sbiw	r24, 0x00	; 0
    1c30:	41 f4       	brne	.+16     	; 0x1c42 <malloc+0xce>
    1c32:	80 91 08 02 	lds	r24, 0x0208
    1c36:	90 91 09 02 	lds	r25, 0x0209
    1c3a:	90 93 8d 02 	sts	0x028D, r25
    1c3e:	80 93 8c 02 	sts	0x028C, r24
    1c42:	20 91 06 02 	lds	r18, 0x0206
    1c46:	30 91 07 02 	lds	r19, 0x0207
    1c4a:	21 15       	cp	r18, r1
    1c4c:	31 05       	cpc	r19, r1
    1c4e:	41 f4       	brne	.+16     	; 0x1c60 <malloc+0xec>
    1c50:	2d b7       	in	r18, 0x3d	; 61
    1c52:	3e b7       	in	r19, 0x3e	; 62
    1c54:	80 91 0a 02 	lds	r24, 0x020A
    1c58:	90 91 0b 02 	lds	r25, 0x020B
    1c5c:	28 1b       	sub	r18, r24
    1c5e:	39 0b       	sbc	r19, r25
    1c60:	e0 91 8c 02 	lds	r30, 0x028C
    1c64:	f0 91 8d 02 	lds	r31, 0x028D
    1c68:	e2 17       	cp	r30, r18
    1c6a:	f3 07       	cpc	r31, r19
    1c6c:	98 f4       	brcc	.+38     	; 0x1c94 <malloc+0x120>
    1c6e:	2e 1b       	sub	r18, r30
    1c70:	3f 0b       	sbc	r19, r31
    1c72:	24 17       	cp	r18, r20
    1c74:	35 07       	cpc	r19, r21
    1c76:	70 f0       	brcs	.+28     	; 0x1c94 <malloc+0x120>
    1c78:	ca 01       	movw	r24, r20
    1c7a:	02 96       	adiw	r24, 0x02	; 2
    1c7c:	28 17       	cp	r18, r24
    1c7e:	39 07       	cpc	r19, r25
    1c80:	48 f0       	brcs	.+18     	; 0x1c94 <malloc+0x120>
    1c82:	8e 0f       	add	r24, r30
    1c84:	9f 1f       	adc	r25, r31
    1c86:	90 93 8d 02 	sts	0x028D, r25
    1c8a:	80 93 8c 02 	sts	0x028C, r24
    1c8e:	41 93       	st	Z+, r20
    1c90:	51 93       	st	Z+, r21
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <malloc+0x124>
    1c94:	e0 e0       	ldi	r30, 0x00	; 0
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	cf 01       	movw	r24, r30
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	08 95       	ret

00001ca0 <free>:
    1ca0:	0f 93       	push	r16
    1ca2:	1f 93       	push	r17
    1ca4:	cf 93       	push	r28
    1ca6:	df 93       	push	r29
    1ca8:	9c 01       	movw	r18, r24
    1caa:	00 97       	sbiw	r24, 0x00	; 0
    1cac:	09 f4       	brne	.+2      	; 0x1cb0 <free+0x10>
    1cae:	8c c0       	rjmp	.+280    	; 0x1dc8 <free+0x128>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	12 97       	sbiw	r26, 0x02	; 2
    1cb4:	13 96       	adiw	r26, 0x03	; 3
    1cb6:	1c 92       	st	X, r1
    1cb8:	1e 92       	st	-X, r1
    1cba:	12 97       	sbiw	r26, 0x02	; 2
    1cbc:	60 91 8e 02 	lds	r22, 0x028E
    1cc0:	70 91 8f 02 	lds	r23, 0x028F
    1cc4:	61 15       	cp	r22, r1
    1cc6:	71 05       	cpc	r23, r1
    1cc8:	89 f4       	brne	.+34     	; 0x1cec <free+0x4c>
    1cca:	8d 91       	ld	r24, X+
    1ccc:	9c 91       	ld	r25, X
    1cce:	11 97       	sbiw	r26, 0x01	; 1
    1cd0:	82 0f       	add	r24, r18
    1cd2:	93 1f       	adc	r25, r19
    1cd4:	20 91 8c 02 	lds	r18, 0x028C
    1cd8:	30 91 8d 02 	lds	r19, 0x028D
    1cdc:	28 17       	cp	r18, r24
    1cde:	39 07       	cpc	r19, r25
    1ce0:	69 f5       	brne	.+90     	; 0x1d3c <free+0x9c>
    1ce2:	b0 93 8d 02 	sts	0x028D, r27
    1ce6:	a0 93 8c 02 	sts	0x028C, r26
    1cea:	6e c0       	rjmp	.+220    	; 0x1dc8 <free+0x128>
    1cec:	fb 01       	movw	r30, r22
    1cee:	40 e0       	ldi	r20, 0x00	; 0
    1cf0:	50 e0       	ldi	r21, 0x00	; 0
    1cf2:	01 c0       	rjmp	.+2      	; 0x1cf6 <free+0x56>
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	ea 17       	cp	r30, r26
    1cf8:	fb 07       	cpc	r31, r27
    1cfa:	30 f4       	brcc	.+12     	; 0x1d08 <free+0x68>
    1cfc:	82 81       	ldd	r24, Z+2	; 0x02
    1cfe:	93 81       	ldd	r25, Z+3	; 0x03
    1d00:	af 01       	movw	r20, r30
    1d02:	00 97       	sbiw	r24, 0x00	; 0
    1d04:	b9 f7       	brne	.-18     	; 0x1cf4 <free+0x54>
    1d06:	1f c0       	rjmp	.+62     	; 0x1d46 <free+0xa6>
    1d08:	e9 01       	movw	r28, r18
    1d0a:	22 97       	sbiw	r28, 0x02	; 2
    1d0c:	fb 83       	std	Y+3, r31	; 0x03
    1d0e:	ea 83       	std	Y+2, r30	; 0x02
    1d10:	08 81       	ld	r16, Y
    1d12:	19 81       	ldd	r17, Y+1	; 0x01
    1d14:	c9 01       	movw	r24, r18
    1d16:	80 0f       	add	r24, r16
    1d18:	91 1f       	adc	r25, r17
    1d1a:	8e 17       	cp	r24, r30
    1d1c:	9f 07       	cpc	r25, r31
    1d1e:	59 f4       	brne	.+22     	; 0x1d36 <free+0x96>
    1d20:	80 81       	ld	r24, Z
    1d22:	91 81       	ldd	r25, Z+1	; 0x01
    1d24:	80 0f       	add	r24, r16
    1d26:	91 1f       	adc	r25, r17
    1d28:	02 96       	adiw	r24, 0x02	; 2
    1d2a:	99 83       	std	Y+1, r25	; 0x01
    1d2c:	88 83       	st	Y, r24
    1d2e:	82 81       	ldd	r24, Z+2	; 0x02
    1d30:	93 81       	ldd	r25, Z+3	; 0x03
    1d32:	9b 83       	std	Y+3, r25	; 0x03
    1d34:	8a 83       	std	Y+2, r24	; 0x02
    1d36:	41 15       	cp	r20, r1
    1d38:	51 05       	cpc	r21, r1
    1d3a:	29 f4       	brne	.+10     	; 0x1d46 <free+0xa6>
    1d3c:	b0 93 8f 02 	sts	0x028F, r27
    1d40:	a0 93 8e 02 	sts	0x028E, r26
    1d44:	41 c0       	rjmp	.+130    	; 0x1dc8 <free+0x128>
    1d46:	fa 01       	movw	r30, r20
    1d48:	b3 83       	std	Z+3, r27	; 0x03
    1d4a:	a2 83       	std	Z+2, r26	; 0x02
    1d4c:	c1 91       	ld	r28, Z+
    1d4e:	d1 91       	ld	r29, Z+
    1d50:	ec 0f       	add	r30, r28
    1d52:	fd 1f       	adc	r31, r29
    1d54:	ae 17       	cp	r26, r30
    1d56:	bf 07       	cpc	r27, r31
    1d58:	81 f4       	brne	.+32     	; 0x1d7a <free+0xda>
    1d5a:	f9 01       	movw	r30, r18
    1d5c:	92 91       	ld	r25, -Z
    1d5e:	82 91       	ld	r24, -Z
    1d60:	8c 0f       	add	r24, r28
    1d62:	9d 1f       	adc	r25, r29
    1d64:	02 96       	adiw	r24, 0x02	; 2
    1d66:	da 01       	movw	r26, r20
    1d68:	11 96       	adiw	r26, 0x01	; 1
    1d6a:	9c 93       	st	X, r25
    1d6c:	8e 93       	st	-X, r24
    1d6e:	82 81       	ldd	r24, Z+2	; 0x02
    1d70:	93 81       	ldd	r25, Z+3	; 0x03
    1d72:	13 96       	adiw	r26, 0x03	; 3
    1d74:	9c 93       	st	X, r25
    1d76:	8e 93       	st	-X, r24
    1d78:	12 97       	sbiw	r26, 0x02	; 2
    1d7a:	e0 e0       	ldi	r30, 0x00	; 0
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	02 c0       	rjmp	.+4      	; 0x1d84 <free+0xe4>
    1d80:	fb 01       	movw	r30, r22
    1d82:	bc 01       	movw	r22, r24
    1d84:	db 01       	movw	r26, r22
    1d86:	12 96       	adiw	r26, 0x02	; 2
    1d88:	8d 91       	ld	r24, X+
    1d8a:	9c 91       	ld	r25, X
    1d8c:	13 97       	sbiw	r26, 0x03	; 3
    1d8e:	00 97       	sbiw	r24, 0x00	; 0
    1d90:	b9 f7       	brne	.-18     	; 0x1d80 <free+0xe0>
    1d92:	cb 01       	movw	r24, r22
    1d94:	02 96       	adiw	r24, 0x02	; 2
    1d96:	2d 91       	ld	r18, X+
    1d98:	3c 91       	ld	r19, X
    1d9a:	11 97       	sbiw	r26, 0x01	; 1
    1d9c:	82 0f       	add	r24, r18
    1d9e:	93 1f       	adc	r25, r19
    1da0:	20 91 8c 02 	lds	r18, 0x028C
    1da4:	30 91 8d 02 	lds	r19, 0x028D
    1da8:	28 17       	cp	r18, r24
    1daa:	39 07       	cpc	r19, r25
    1dac:	69 f4       	brne	.+26     	; 0x1dc8 <free+0x128>
    1dae:	30 97       	sbiw	r30, 0x00	; 0
    1db0:	29 f4       	brne	.+10     	; 0x1dbc <free+0x11c>
    1db2:	10 92 8f 02 	sts	0x028F, r1
    1db6:	10 92 8e 02 	sts	0x028E, r1
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <free+0x120>
    1dbc:	13 82       	std	Z+3, r1	; 0x03
    1dbe:	12 82       	std	Z+2, r1	; 0x02
    1dc0:	70 93 8d 02 	sts	0x028D, r23
    1dc4:	60 93 8c 02 	sts	0x028C, r22
    1dc8:	df 91       	pop	r29
    1dca:	cf 91       	pop	r28
    1dcc:	1f 91       	pop	r17
    1dce:	0f 91       	pop	r16
    1dd0:	08 95       	ret

00001dd2 <sprintf>:
    1dd2:	0f 93       	push	r16
    1dd4:	1f 93       	push	r17
    1dd6:	cf 93       	push	r28
    1dd8:	df 93       	push	r29
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
    1dde:	2e 97       	sbiw	r28, 0x0e	; 14
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	f8 94       	cli
    1de4:	de bf       	out	0x3e, r29	; 62
    1de6:	0f be       	out	0x3f, r0	; 63
    1de8:	cd bf       	out	0x3d, r28	; 61
    1dea:	0d 89       	ldd	r16, Y+21	; 0x15
    1dec:	1e 89       	ldd	r17, Y+22	; 0x16
    1dee:	86 e0       	ldi	r24, 0x06	; 6
    1df0:	8c 83       	std	Y+4, r24	; 0x04
    1df2:	1a 83       	std	Y+2, r17	; 0x02
    1df4:	09 83       	std	Y+1, r16	; 0x01
    1df6:	8f ef       	ldi	r24, 0xFF	; 255
    1df8:	9f e7       	ldi	r25, 0x7F	; 127
    1dfa:	9e 83       	std	Y+6, r25	; 0x06
    1dfc:	8d 83       	std	Y+5, r24	; 0x05
    1dfe:	ae 01       	movw	r20, r28
    1e00:	47 5e       	subi	r20, 0xE7	; 231
    1e02:	5f 4f       	sbci	r21, 0xFF	; 255
    1e04:	ce 01       	movw	r24, r28
    1e06:	01 96       	adiw	r24, 0x01	; 1
    1e08:	6f 89       	ldd	r22, Y+23	; 0x17
    1e0a:	78 8d       	ldd	r23, Y+24	; 0x18
    1e0c:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <vfprintf>
    1e10:	ef 81       	ldd	r30, Y+7	; 0x07
    1e12:	f8 85       	ldd	r31, Y+8	; 0x08
    1e14:	e0 0f       	add	r30, r16
    1e16:	f1 1f       	adc	r31, r17
    1e18:	10 82       	st	Z, r1
    1e1a:	2e 96       	adiw	r28, 0x0e	; 14
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	f8 94       	cli
    1e20:	de bf       	out	0x3e, r29	; 62
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	df 91       	pop	r29
    1e28:	cf 91       	pop	r28
    1e2a:	1f 91       	pop	r17
    1e2c:	0f 91       	pop	r16
    1e2e:	08 95       	ret

00001e30 <vfprintf>:
    1e30:	2f 92       	push	r2
    1e32:	3f 92       	push	r3
    1e34:	4f 92       	push	r4
    1e36:	5f 92       	push	r5
    1e38:	6f 92       	push	r6
    1e3a:	7f 92       	push	r7
    1e3c:	8f 92       	push	r8
    1e3e:	9f 92       	push	r9
    1e40:	af 92       	push	r10
    1e42:	bf 92       	push	r11
    1e44:	cf 92       	push	r12
    1e46:	df 92       	push	r13
    1e48:	ef 92       	push	r14
    1e4a:	ff 92       	push	r15
    1e4c:	0f 93       	push	r16
    1e4e:	1f 93       	push	r17
    1e50:	cf 93       	push	r28
    1e52:	df 93       	push	r29
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
    1e58:	2d 97       	sbiw	r28, 0x0d	; 13
    1e5a:	0f b6       	in	r0, 0x3f	; 63
    1e5c:	f8 94       	cli
    1e5e:	de bf       	out	0x3e, r29	; 62
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	cd bf       	out	0x3d, r28	; 61
    1e64:	3c 01       	movw	r6, r24
    1e66:	7d 87       	std	Y+13, r23	; 0x0d
    1e68:	6c 87       	std	Y+12, r22	; 0x0c
    1e6a:	5a 01       	movw	r10, r20
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	17 82       	std	Z+7, r1	; 0x07
    1e70:	16 82       	std	Z+6, r1	; 0x06
    1e72:	83 81       	ldd	r24, Z+3	; 0x03
    1e74:	81 ff       	sbrs	r24, 1
    1e76:	c8 c1       	rjmp	.+912    	; 0x2208 <vfprintf+0x3d8>
    1e78:	2e 01       	movw	r4, r28
    1e7a:	08 94       	sec
    1e7c:	41 1c       	adc	r4, r1
    1e7e:	51 1c       	adc	r5, r1
    1e80:	f3 01       	movw	r30, r6
    1e82:	93 81       	ldd	r25, Z+3	; 0x03
    1e84:	ec 85       	ldd	r30, Y+12	; 0x0c
    1e86:	fd 85       	ldd	r31, Y+13	; 0x0d
    1e88:	93 fd       	sbrc	r25, 3
    1e8a:	85 91       	lpm	r24, Z+
    1e8c:	93 ff       	sbrs	r25, 3
    1e8e:	81 91       	ld	r24, Z+
    1e90:	fd 87       	std	Y+13, r31	; 0x0d
    1e92:	ec 87       	std	Y+12, r30	; 0x0c
    1e94:	88 23       	and	r24, r24
    1e96:	09 f4       	brne	.+2      	; 0x1e9a <vfprintf+0x6a>
    1e98:	b3 c1       	rjmp	.+870    	; 0x2200 <vfprintf+0x3d0>
    1e9a:	85 32       	cpi	r24, 0x25	; 37
    1e9c:	41 f4       	brne	.+16     	; 0x1eae <vfprintf+0x7e>
    1e9e:	93 fd       	sbrc	r25, 3
    1ea0:	85 91       	lpm	r24, Z+
    1ea2:	93 ff       	sbrs	r25, 3
    1ea4:	81 91       	ld	r24, Z+
    1ea6:	fd 87       	std	Y+13, r31	; 0x0d
    1ea8:	ec 87       	std	Y+12, r30	; 0x0c
    1eaa:	85 32       	cpi	r24, 0x25	; 37
    1eac:	29 f4       	brne	.+10     	; 0x1eb8 <vfprintf+0x88>
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	b3 01       	movw	r22, r6
    1eb2:	0e 94 35 11 	call	0x226a	; 0x226a <fputc>
    1eb6:	e4 cf       	rjmp	.-56     	; 0x1e80 <vfprintf+0x50>
    1eb8:	ff 24       	eor	r15, r15
    1eba:	ee 24       	eor	r14, r14
    1ebc:	10 e0       	ldi	r17, 0x00	; 0
    1ebe:	10 32       	cpi	r17, 0x20	; 32
    1ec0:	b0 f4       	brcc	.+44     	; 0x1eee <vfprintf+0xbe>
    1ec2:	8b 32       	cpi	r24, 0x2B	; 43
    1ec4:	69 f0       	breq	.+26     	; 0x1ee0 <vfprintf+0xb0>
    1ec6:	8c 32       	cpi	r24, 0x2C	; 44
    1ec8:	28 f4       	brcc	.+10     	; 0x1ed4 <vfprintf+0xa4>
    1eca:	80 32       	cpi	r24, 0x20	; 32
    1ecc:	51 f0       	breq	.+20     	; 0x1ee2 <vfprintf+0xb2>
    1ece:	83 32       	cpi	r24, 0x23	; 35
    1ed0:	71 f4       	brne	.+28     	; 0x1eee <vfprintf+0xbe>
    1ed2:	0b c0       	rjmp	.+22     	; 0x1eea <vfprintf+0xba>
    1ed4:	8d 32       	cpi	r24, 0x2D	; 45
    1ed6:	39 f0       	breq	.+14     	; 0x1ee6 <vfprintf+0xb6>
    1ed8:	80 33       	cpi	r24, 0x30	; 48
    1eda:	49 f4       	brne	.+18     	; 0x1eee <vfprintf+0xbe>
    1edc:	11 60       	ori	r17, 0x01	; 1
    1ede:	2c c0       	rjmp	.+88     	; 0x1f38 <vfprintf+0x108>
    1ee0:	12 60       	ori	r17, 0x02	; 2
    1ee2:	14 60       	ori	r17, 0x04	; 4
    1ee4:	29 c0       	rjmp	.+82     	; 0x1f38 <vfprintf+0x108>
    1ee6:	18 60       	ori	r17, 0x08	; 8
    1ee8:	27 c0       	rjmp	.+78     	; 0x1f38 <vfprintf+0x108>
    1eea:	10 61       	ori	r17, 0x10	; 16
    1eec:	25 c0       	rjmp	.+74     	; 0x1f38 <vfprintf+0x108>
    1eee:	17 fd       	sbrc	r17, 7
    1ef0:	2e c0       	rjmp	.+92     	; 0x1f4e <vfprintf+0x11e>
    1ef2:	28 2f       	mov	r18, r24
    1ef4:	20 53       	subi	r18, 0x30	; 48
    1ef6:	2a 30       	cpi	r18, 0x0A	; 10
    1ef8:	98 f4       	brcc	.+38     	; 0x1f20 <vfprintf+0xf0>
    1efa:	16 ff       	sbrs	r17, 6
    1efc:	08 c0       	rjmp	.+16     	; 0x1f0e <vfprintf+0xde>
    1efe:	8f 2d       	mov	r24, r15
    1f00:	88 0f       	add	r24, r24
    1f02:	f8 2e       	mov	r15, r24
    1f04:	ff 0c       	add	r15, r15
    1f06:	ff 0c       	add	r15, r15
    1f08:	f8 0e       	add	r15, r24
    1f0a:	f2 0e       	add	r15, r18
    1f0c:	15 c0       	rjmp	.+42     	; 0x1f38 <vfprintf+0x108>
    1f0e:	8e 2d       	mov	r24, r14
    1f10:	88 0f       	add	r24, r24
    1f12:	e8 2e       	mov	r14, r24
    1f14:	ee 0c       	add	r14, r14
    1f16:	ee 0c       	add	r14, r14
    1f18:	e8 0e       	add	r14, r24
    1f1a:	e2 0e       	add	r14, r18
    1f1c:	10 62       	ori	r17, 0x20	; 32
    1f1e:	0c c0       	rjmp	.+24     	; 0x1f38 <vfprintf+0x108>
    1f20:	8e 32       	cpi	r24, 0x2E	; 46
    1f22:	21 f4       	brne	.+8      	; 0x1f2c <vfprintf+0xfc>
    1f24:	16 fd       	sbrc	r17, 6
    1f26:	6c c1       	rjmp	.+728    	; 0x2200 <vfprintf+0x3d0>
    1f28:	10 64       	ori	r17, 0x40	; 64
    1f2a:	06 c0       	rjmp	.+12     	; 0x1f38 <vfprintf+0x108>
    1f2c:	8c 36       	cpi	r24, 0x6C	; 108
    1f2e:	11 f4       	brne	.+4      	; 0x1f34 <vfprintf+0x104>
    1f30:	10 68       	ori	r17, 0x80	; 128
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <vfprintf+0x108>
    1f34:	88 36       	cpi	r24, 0x68	; 104
    1f36:	59 f4       	brne	.+22     	; 0x1f4e <vfprintf+0x11e>
    1f38:	ec 85       	ldd	r30, Y+12	; 0x0c
    1f3a:	fd 85       	ldd	r31, Y+13	; 0x0d
    1f3c:	93 fd       	sbrc	r25, 3
    1f3e:	85 91       	lpm	r24, Z+
    1f40:	93 ff       	sbrs	r25, 3
    1f42:	81 91       	ld	r24, Z+
    1f44:	fd 87       	std	Y+13, r31	; 0x0d
    1f46:	ec 87       	std	Y+12, r30	; 0x0c
    1f48:	88 23       	and	r24, r24
    1f4a:	09 f0       	breq	.+2      	; 0x1f4e <vfprintf+0x11e>
    1f4c:	b8 cf       	rjmp	.-144    	; 0x1ebe <vfprintf+0x8e>
    1f4e:	98 2f       	mov	r25, r24
    1f50:	95 54       	subi	r25, 0x45	; 69
    1f52:	93 30       	cpi	r25, 0x03	; 3
    1f54:	18 f0       	brcs	.+6      	; 0x1f5c <vfprintf+0x12c>
    1f56:	90 52       	subi	r25, 0x20	; 32
    1f58:	93 30       	cpi	r25, 0x03	; 3
    1f5a:	38 f4       	brcc	.+14     	; 0x1f6a <vfprintf+0x13a>
    1f5c:	24 e0       	ldi	r18, 0x04	; 4
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	a2 0e       	add	r10, r18
    1f62:	b3 1e       	adc	r11, r19
    1f64:	3f e3       	ldi	r19, 0x3F	; 63
    1f66:	39 83       	std	Y+1, r19	; 0x01
    1f68:	0f c0       	rjmp	.+30     	; 0x1f88 <vfprintf+0x158>
    1f6a:	83 36       	cpi	r24, 0x63	; 99
    1f6c:	31 f0       	breq	.+12     	; 0x1f7a <vfprintf+0x14a>
    1f6e:	83 37       	cpi	r24, 0x73	; 115
    1f70:	81 f0       	breq	.+32     	; 0x1f92 <vfprintf+0x162>
    1f72:	83 35       	cpi	r24, 0x53	; 83
    1f74:	09 f0       	breq	.+2      	; 0x1f78 <vfprintf+0x148>
    1f76:	5a c0       	rjmp	.+180    	; 0x202c <vfprintf+0x1fc>
    1f78:	22 c0       	rjmp	.+68     	; 0x1fbe <vfprintf+0x18e>
    1f7a:	f5 01       	movw	r30, r10
    1f7c:	80 81       	ld	r24, Z
    1f7e:	89 83       	std	Y+1, r24	; 0x01
    1f80:	22 e0       	ldi	r18, 0x02	; 2
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	a2 0e       	add	r10, r18
    1f86:	b3 1e       	adc	r11, r19
    1f88:	21 e0       	ldi	r18, 0x01	; 1
    1f8a:	c2 2e       	mov	r12, r18
    1f8c:	d1 2c       	mov	r13, r1
    1f8e:	42 01       	movw	r8, r4
    1f90:	14 c0       	rjmp	.+40     	; 0x1fba <vfprintf+0x18a>
    1f92:	92 e0       	ldi	r25, 0x02	; 2
    1f94:	29 2e       	mov	r2, r25
    1f96:	31 2c       	mov	r3, r1
    1f98:	2a 0c       	add	r2, r10
    1f9a:	3b 1c       	adc	r3, r11
    1f9c:	f5 01       	movw	r30, r10
    1f9e:	80 80       	ld	r8, Z
    1fa0:	91 80       	ldd	r9, Z+1	; 0x01
    1fa2:	16 ff       	sbrs	r17, 6
    1fa4:	03 c0       	rjmp	.+6      	; 0x1fac <vfprintf+0x17c>
    1fa6:	6f 2d       	mov	r22, r15
    1fa8:	70 e0       	ldi	r23, 0x00	; 0
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <vfprintf+0x180>
    1fac:	6f ef       	ldi	r22, 0xFF	; 255
    1fae:	7f ef       	ldi	r23, 0xFF	; 255
    1fb0:	c4 01       	movw	r24, r8
    1fb2:	0e 94 2a 11 	call	0x2254	; 0x2254 <strnlen>
    1fb6:	6c 01       	movw	r12, r24
    1fb8:	51 01       	movw	r10, r2
    1fba:	1f 77       	andi	r17, 0x7F	; 127
    1fbc:	15 c0       	rjmp	.+42     	; 0x1fe8 <vfprintf+0x1b8>
    1fbe:	82 e0       	ldi	r24, 0x02	; 2
    1fc0:	28 2e       	mov	r2, r24
    1fc2:	31 2c       	mov	r3, r1
    1fc4:	2a 0c       	add	r2, r10
    1fc6:	3b 1c       	adc	r3, r11
    1fc8:	f5 01       	movw	r30, r10
    1fca:	80 80       	ld	r8, Z
    1fcc:	91 80       	ldd	r9, Z+1	; 0x01
    1fce:	16 ff       	sbrs	r17, 6
    1fd0:	03 c0       	rjmp	.+6      	; 0x1fd8 <vfprintf+0x1a8>
    1fd2:	6f 2d       	mov	r22, r15
    1fd4:	70 e0       	ldi	r23, 0x00	; 0
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <vfprintf+0x1ac>
    1fd8:	6f ef       	ldi	r22, 0xFF	; 255
    1fda:	7f ef       	ldi	r23, 0xFF	; 255
    1fdc:	c4 01       	movw	r24, r8
    1fde:	0e 94 1f 11 	call	0x223e	; 0x223e <strnlen_P>
    1fe2:	6c 01       	movw	r12, r24
    1fe4:	10 68       	ori	r17, 0x80	; 128
    1fe6:	51 01       	movw	r10, r2
    1fe8:	13 fd       	sbrc	r17, 3
    1fea:	1c c0       	rjmp	.+56     	; 0x2024 <vfprintf+0x1f4>
    1fec:	06 c0       	rjmp	.+12     	; 0x1ffa <vfprintf+0x1ca>
    1fee:	80 e2       	ldi	r24, 0x20	; 32
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	b3 01       	movw	r22, r6
    1ff4:	0e 94 35 11 	call	0x226a	; 0x226a <fputc>
    1ff8:	ea 94       	dec	r14
    1ffa:	8e 2d       	mov	r24, r14
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	c8 16       	cp	r12, r24
    2000:	d9 06       	cpc	r13, r25
    2002:	a8 f3       	brcs	.-22     	; 0x1fee <vfprintf+0x1be>
    2004:	0f c0       	rjmp	.+30     	; 0x2024 <vfprintf+0x1f4>
    2006:	f4 01       	movw	r30, r8
    2008:	17 fd       	sbrc	r17, 7
    200a:	85 91       	lpm	r24, Z+
    200c:	17 ff       	sbrs	r17, 7
    200e:	81 91       	ld	r24, Z+
    2010:	4f 01       	movw	r8, r30
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	b3 01       	movw	r22, r6
    2016:	0e 94 35 11 	call	0x226a	; 0x226a <fputc>
    201a:	e1 10       	cpse	r14, r1
    201c:	ea 94       	dec	r14
    201e:	08 94       	sec
    2020:	c1 08       	sbc	r12, r1
    2022:	d1 08       	sbc	r13, r1
    2024:	c1 14       	cp	r12, r1
    2026:	d1 04       	cpc	r13, r1
    2028:	71 f7       	brne	.-36     	; 0x2006 <vfprintf+0x1d6>
    202a:	e7 c0       	rjmp	.+462    	; 0x21fa <vfprintf+0x3ca>
    202c:	84 36       	cpi	r24, 0x64	; 100
    202e:	11 f0       	breq	.+4      	; 0x2034 <vfprintf+0x204>
    2030:	89 36       	cpi	r24, 0x69	; 105
    2032:	51 f5       	brne	.+84     	; 0x2088 <vfprintf+0x258>
    2034:	f5 01       	movw	r30, r10
    2036:	17 ff       	sbrs	r17, 7
    2038:	07 c0       	rjmp	.+14     	; 0x2048 <vfprintf+0x218>
    203a:	80 81       	ld	r24, Z
    203c:	91 81       	ldd	r25, Z+1	; 0x01
    203e:	a2 81       	ldd	r26, Z+2	; 0x02
    2040:	b3 81       	ldd	r27, Z+3	; 0x03
    2042:	24 e0       	ldi	r18, 0x04	; 4
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	08 c0       	rjmp	.+16     	; 0x2058 <vfprintf+0x228>
    2048:	80 81       	ld	r24, Z
    204a:	91 81       	ldd	r25, Z+1	; 0x01
    204c:	aa 27       	eor	r26, r26
    204e:	97 fd       	sbrc	r25, 7
    2050:	a0 95       	com	r26
    2052:	ba 2f       	mov	r27, r26
    2054:	22 e0       	ldi	r18, 0x02	; 2
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	a2 0e       	add	r10, r18
    205a:	b3 1e       	adc	r11, r19
    205c:	01 2f       	mov	r16, r17
    205e:	0f 76       	andi	r16, 0x6F	; 111
    2060:	b7 ff       	sbrs	r27, 7
    2062:	08 c0       	rjmp	.+16     	; 0x2074 <vfprintf+0x244>
    2064:	b0 95       	com	r27
    2066:	a0 95       	com	r26
    2068:	90 95       	com	r25
    206a:	81 95       	neg	r24
    206c:	9f 4f       	sbci	r25, 0xFF	; 255
    206e:	af 4f       	sbci	r26, 0xFF	; 255
    2070:	bf 4f       	sbci	r27, 0xFF	; 255
    2072:	00 68       	ori	r16, 0x80	; 128
    2074:	bc 01       	movw	r22, r24
    2076:	cd 01       	movw	r24, r26
    2078:	a2 01       	movw	r20, r4
    207a:	2a e0       	ldi	r18, 0x0A	; 10
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__ultoa_invert>
    2082:	d8 2e       	mov	r13, r24
    2084:	d4 18       	sub	r13, r4
    2086:	3f c0       	rjmp	.+126    	; 0x2106 <vfprintf+0x2d6>
    2088:	85 37       	cpi	r24, 0x75	; 117
    208a:	21 f4       	brne	.+8      	; 0x2094 <vfprintf+0x264>
    208c:	1f 7e       	andi	r17, 0xEF	; 239
    208e:	2a e0       	ldi	r18, 0x0A	; 10
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	20 c0       	rjmp	.+64     	; 0x20d4 <vfprintf+0x2a4>
    2094:	19 7f       	andi	r17, 0xF9	; 249
    2096:	8f 36       	cpi	r24, 0x6F	; 111
    2098:	a9 f0       	breq	.+42     	; 0x20c4 <vfprintf+0x294>
    209a:	80 37       	cpi	r24, 0x70	; 112
    209c:	20 f4       	brcc	.+8      	; 0x20a6 <vfprintf+0x276>
    209e:	88 35       	cpi	r24, 0x58	; 88
    20a0:	09 f0       	breq	.+2      	; 0x20a4 <vfprintf+0x274>
    20a2:	ae c0       	rjmp	.+348    	; 0x2200 <vfprintf+0x3d0>
    20a4:	0b c0       	rjmp	.+22     	; 0x20bc <vfprintf+0x28c>
    20a6:	80 37       	cpi	r24, 0x70	; 112
    20a8:	21 f0       	breq	.+8      	; 0x20b2 <vfprintf+0x282>
    20aa:	88 37       	cpi	r24, 0x78	; 120
    20ac:	09 f0       	breq	.+2      	; 0x20b0 <vfprintf+0x280>
    20ae:	a8 c0       	rjmp	.+336    	; 0x2200 <vfprintf+0x3d0>
    20b0:	01 c0       	rjmp	.+2      	; 0x20b4 <vfprintf+0x284>
    20b2:	10 61       	ori	r17, 0x10	; 16
    20b4:	14 ff       	sbrs	r17, 4
    20b6:	09 c0       	rjmp	.+18     	; 0x20ca <vfprintf+0x29a>
    20b8:	14 60       	ori	r17, 0x04	; 4
    20ba:	07 c0       	rjmp	.+14     	; 0x20ca <vfprintf+0x29a>
    20bc:	14 ff       	sbrs	r17, 4
    20be:	08 c0       	rjmp	.+16     	; 0x20d0 <vfprintf+0x2a0>
    20c0:	16 60       	ori	r17, 0x06	; 6
    20c2:	06 c0       	rjmp	.+12     	; 0x20d0 <vfprintf+0x2a0>
    20c4:	28 e0       	ldi	r18, 0x08	; 8
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	05 c0       	rjmp	.+10     	; 0x20d4 <vfprintf+0x2a4>
    20ca:	20 e1       	ldi	r18, 0x10	; 16
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	02 c0       	rjmp	.+4      	; 0x20d4 <vfprintf+0x2a4>
    20d0:	20 e1       	ldi	r18, 0x10	; 16
    20d2:	32 e0       	ldi	r19, 0x02	; 2
    20d4:	f5 01       	movw	r30, r10
    20d6:	17 ff       	sbrs	r17, 7
    20d8:	07 c0       	rjmp	.+14     	; 0x20e8 <vfprintf+0x2b8>
    20da:	60 81       	ld	r22, Z
    20dc:	71 81       	ldd	r23, Z+1	; 0x01
    20de:	82 81       	ldd	r24, Z+2	; 0x02
    20e0:	93 81       	ldd	r25, Z+3	; 0x03
    20e2:	44 e0       	ldi	r20, 0x04	; 4
    20e4:	50 e0       	ldi	r21, 0x00	; 0
    20e6:	06 c0       	rjmp	.+12     	; 0x20f4 <vfprintf+0x2c4>
    20e8:	60 81       	ld	r22, Z
    20ea:	71 81       	ldd	r23, Z+1	; 0x01
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	42 e0       	ldi	r20, 0x02	; 2
    20f2:	50 e0       	ldi	r21, 0x00	; 0
    20f4:	a4 0e       	add	r10, r20
    20f6:	b5 1e       	adc	r11, r21
    20f8:	a2 01       	movw	r20, r4
    20fa:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__ultoa_invert>
    20fe:	d8 2e       	mov	r13, r24
    2100:	d4 18       	sub	r13, r4
    2102:	01 2f       	mov	r16, r17
    2104:	0f 77       	andi	r16, 0x7F	; 127
    2106:	06 ff       	sbrs	r16, 6
    2108:	09 c0       	rjmp	.+18     	; 0x211c <vfprintf+0x2ec>
    210a:	0e 7f       	andi	r16, 0xFE	; 254
    210c:	df 14       	cp	r13, r15
    210e:	30 f4       	brcc	.+12     	; 0x211c <vfprintf+0x2ec>
    2110:	04 ff       	sbrs	r16, 4
    2112:	06 c0       	rjmp	.+12     	; 0x2120 <vfprintf+0x2f0>
    2114:	02 fd       	sbrc	r16, 2
    2116:	04 c0       	rjmp	.+8      	; 0x2120 <vfprintf+0x2f0>
    2118:	0f 7e       	andi	r16, 0xEF	; 239
    211a:	02 c0       	rjmp	.+4      	; 0x2120 <vfprintf+0x2f0>
    211c:	1d 2d       	mov	r17, r13
    211e:	01 c0       	rjmp	.+2      	; 0x2122 <vfprintf+0x2f2>
    2120:	1f 2d       	mov	r17, r15
    2122:	80 2f       	mov	r24, r16
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	04 ff       	sbrs	r16, 4
    2128:	0c c0       	rjmp	.+24     	; 0x2142 <vfprintf+0x312>
    212a:	fe 01       	movw	r30, r28
    212c:	ed 0d       	add	r30, r13
    212e:	f1 1d       	adc	r31, r1
    2130:	20 81       	ld	r18, Z
    2132:	20 33       	cpi	r18, 0x30	; 48
    2134:	11 f4       	brne	.+4      	; 0x213a <vfprintf+0x30a>
    2136:	09 7e       	andi	r16, 0xE9	; 233
    2138:	09 c0       	rjmp	.+18     	; 0x214c <vfprintf+0x31c>
    213a:	02 ff       	sbrs	r16, 2
    213c:	06 c0       	rjmp	.+12     	; 0x214a <vfprintf+0x31a>
    213e:	1e 5f       	subi	r17, 0xFE	; 254
    2140:	05 c0       	rjmp	.+10     	; 0x214c <vfprintf+0x31c>
    2142:	86 78       	andi	r24, 0x86	; 134
    2144:	90 70       	andi	r25, 0x00	; 0
    2146:	00 97       	sbiw	r24, 0x00	; 0
    2148:	09 f0       	breq	.+2      	; 0x214c <vfprintf+0x31c>
    214a:	1f 5f       	subi	r17, 0xFF	; 255
    214c:	80 2e       	mov	r8, r16
    214e:	99 24       	eor	r9, r9
    2150:	03 fd       	sbrc	r16, 3
    2152:	12 c0       	rjmp	.+36     	; 0x2178 <vfprintf+0x348>
    2154:	00 ff       	sbrs	r16, 0
    2156:	0d c0       	rjmp	.+26     	; 0x2172 <vfprintf+0x342>
    2158:	fd 2c       	mov	r15, r13
    215a:	1e 15       	cp	r17, r14
    215c:	50 f4       	brcc	.+20     	; 0x2172 <vfprintf+0x342>
    215e:	fe 0c       	add	r15, r14
    2160:	f1 1a       	sub	r15, r17
    2162:	1e 2d       	mov	r17, r14
    2164:	06 c0       	rjmp	.+12     	; 0x2172 <vfprintf+0x342>
    2166:	80 e2       	ldi	r24, 0x20	; 32
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	b3 01       	movw	r22, r6
    216c:	0e 94 35 11 	call	0x226a	; 0x226a <fputc>
    2170:	1f 5f       	subi	r17, 0xFF	; 255
    2172:	1e 15       	cp	r17, r14
    2174:	c0 f3       	brcs	.-16     	; 0x2166 <vfprintf+0x336>
    2176:	04 c0       	rjmp	.+8      	; 0x2180 <vfprintf+0x350>
    2178:	1e 15       	cp	r17, r14
    217a:	10 f4       	brcc	.+4      	; 0x2180 <vfprintf+0x350>
    217c:	e1 1a       	sub	r14, r17
    217e:	01 c0       	rjmp	.+2      	; 0x2182 <vfprintf+0x352>
    2180:	ee 24       	eor	r14, r14
    2182:	84 fe       	sbrs	r8, 4
    2184:	0f c0       	rjmp	.+30     	; 0x21a4 <vfprintf+0x374>
    2186:	80 e3       	ldi	r24, 0x30	; 48
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	b3 01       	movw	r22, r6
    218c:	0e 94 35 11 	call	0x226a	; 0x226a <fputc>
    2190:	82 fe       	sbrs	r8, 2
    2192:	1f c0       	rjmp	.+62     	; 0x21d2 <vfprintf+0x3a2>
    2194:	81 fe       	sbrs	r8, 1
    2196:	03 c0       	rjmp	.+6      	; 0x219e <vfprintf+0x36e>
    2198:	88 e5       	ldi	r24, 0x58	; 88
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	10 c0       	rjmp	.+32     	; 0x21be <vfprintf+0x38e>
    219e:	88 e7       	ldi	r24, 0x78	; 120
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	0d c0       	rjmp	.+26     	; 0x21be <vfprintf+0x38e>
    21a4:	c4 01       	movw	r24, r8
    21a6:	86 78       	andi	r24, 0x86	; 134
    21a8:	90 70       	andi	r25, 0x00	; 0
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	91 f0       	breq	.+36     	; 0x21d2 <vfprintf+0x3a2>
    21ae:	81 fc       	sbrc	r8, 1
    21b0:	02 c0       	rjmp	.+4      	; 0x21b6 <vfprintf+0x386>
    21b2:	80 e2       	ldi	r24, 0x20	; 32
    21b4:	01 c0       	rjmp	.+2      	; 0x21b8 <vfprintf+0x388>
    21b6:	8b e2       	ldi	r24, 0x2B	; 43
    21b8:	07 fd       	sbrc	r16, 7
    21ba:	8d e2       	ldi	r24, 0x2D	; 45
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	b3 01       	movw	r22, r6
    21c0:	0e 94 35 11 	call	0x226a	; 0x226a <fputc>
    21c4:	06 c0       	rjmp	.+12     	; 0x21d2 <vfprintf+0x3a2>
    21c6:	80 e3       	ldi	r24, 0x30	; 48
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	b3 01       	movw	r22, r6
    21cc:	0e 94 35 11 	call	0x226a	; 0x226a <fputc>
    21d0:	fa 94       	dec	r15
    21d2:	df 14       	cp	r13, r15
    21d4:	c0 f3       	brcs	.-16     	; 0x21c6 <vfprintf+0x396>
    21d6:	da 94       	dec	r13
    21d8:	f2 01       	movw	r30, r4
    21da:	ed 0d       	add	r30, r13
    21dc:	f1 1d       	adc	r31, r1
    21de:	80 81       	ld	r24, Z
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	b3 01       	movw	r22, r6
    21e4:	0e 94 35 11 	call	0x226a	; 0x226a <fputc>
    21e8:	dd 20       	and	r13, r13
    21ea:	a9 f7       	brne	.-22     	; 0x21d6 <vfprintf+0x3a6>
    21ec:	06 c0       	rjmp	.+12     	; 0x21fa <vfprintf+0x3ca>
    21ee:	80 e2       	ldi	r24, 0x20	; 32
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	b3 01       	movw	r22, r6
    21f4:	0e 94 35 11 	call	0x226a	; 0x226a <fputc>
    21f8:	ea 94       	dec	r14
    21fa:	ee 20       	and	r14, r14
    21fc:	c1 f7       	brne	.-16     	; 0x21ee <vfprintf+0x3be>
    21fe:	40 ce       	rjmp	.-896    	; 0x1e80 <vfprintf+0x50>
    2200:	f3 01       	movw	r30, r6
    2202:	86 81       	ldd	r24, Z+6	; 0x06
    2204:	97 81       	ldd	r25, Z+7	; 0x07
    2206:	02 c0       	rjmp	.+4      	; 0x220c <vfprintf+0x3dc>
    2208:	8f ef       	ldi	r24, 0xFF	; 255
    220a:	9f ef       	ldi	r25, 0xFF	; 255
    220c:	2d 96       	adiw	r28, 0x0d	; 13
    220e:	0f b6       	in	r0, 0x3f	; 63
    2210:	f8 94       	cli
    2212:	de bf       	out	0x3e, r29	; 62
    2214:	0f be       	out	0x3f, r0	; 63
    2216:	cd bf       	out	0x3d, r28	; 61
    2218:	df 91       	pop	r29
    221a:	cf 91       	pop	r28
    221c:	1f 91       	pop	r17
    221e:	0f 91       	pop	r16
    2220:	ff 90       	pop	r15
    2222:	ef 90       	pop	r14
    2224:	df 90       	pop	r13
    2226:	cf 90       	pop	r12
    2228:	bf 90       	pop	r11
    222a:	af 90       	pop	r10
    222c:	9f 90       	pop	r9
    222e:	8f 90       	pop	r8
    2230:	7f 90       	pop	r7
    2232:	6f 90       	pop	r6
    2234:	5f 90       	pop	r5
    2236:	4f 90       	pop	r4
    2238:	3f 90       	pop	r3
    223a:	2f 90       	pop	r2
    223c:	08 95       	ret

0000223e <strnlen_P>:
    223e:	fc 01       	movw	r30, r24
    2240:	05 90       	lpm	r0, Z+
    2242:	61 50       	subi	r22, 0x01	; 1
    2244:	70 40       	sbci	r23, 0x00	; 0
    2246:	01 10       	cpse	r0, r1
    2248:	d8 f7       	brcc	.-10     	; 0x2240 <strnlen_P+0x2>
    224a:	80 95       	com	r24
    224c:	90 95       	com	r25
    224e:	8e 0f       	add	r24, r30
    2250:	9f 1f       	adc	r25, r31
    2252:	08 95       	ret

00002254 <strnlen>:
    2254:	fc 01       	movw	r30, r24
    2256:	61 50       	subi	r22, 0x01	; 1
    2258:	70 40       	sbci	r23, 0x00	; 0
    225a:	01 90       	ld	r0, Z+
    225c:	01 10       	cpse	r0, r1
    225e:	d8 f7       	brcc	.-10     	; 0x2256 <strnlen+0x2>
    2260:	80 95       	com	r24
    2262:	90 95       	com	r25
    2264:	8e 0f       	add	r24, r30
    2266:	9f 1f       	adc	r25, r31
    2268:	08 95       	ret

0000226a <fputc>:
    226a:	0f 93       	push	r16
    226c:	1f 93       	push	r17
    226e:	cf 93       	push	r28
    2270:	df 93       	push	r29
    2272:	8c 01       	movw	r16, r24
    2274:	eb 01       	movw	r28, r22
    2276:	8b 81       	ldd	r24, Y+3	; 0x03
    2278:	81 ff       	sbrs	r24, 1
    227a:	1b c0       	rjmp	.+54     	; 0x22b2 <fputc+0x48>
    227c:	82 ff       	sbrs	r24, 2
    227e:	0d c0       	rjmp	.+26     	; 0x229a <fputc+0x30>
    2280:	2e 81       	ldd	r18, Y+6	; 0x06
    2282:	3f 81       	ldd	r19, Y+7	; 0x07
    2284:	8c 81       	ldd	r24, Y+4	; 0x04
    2286:	9d 81       	ldd	r25, Y+5	; 0x05
    2288:	28 17       	cp	r18, r24
    228a:	39 07       	cpc	r19, r25
    228c:	64 f4       	brge	.+24     	; 0x22a6 <fputc+0x3c>
    228e:	e8 81       	ld	r30, Y
    2290:	f9 81       	ldd	r31, Y+1	; 0x01
    2292:	01 93       	st	Z+, r16
    2294:	f9 83       	std	Y+1, r31	; 0x01
    2296:	e8 83       	st	Y, r30
    2298:	06 c0       	rjmp	.+12     	; 0x22a6 <fputc+0x3c>
    229a:	e8 85       	ldd	r30, Y+8	; 0x08
    229c:	f9 85       	ldd	r31, Y+9	; 0x09
    229e:	80 2f       	mov	r24, r16
    22a0:	09 95       	icall
    22a2:	00 97       	sbiw	r24, 0x00	; 0
    22a4:	31 f4       	brne	.+12     	; 0x22b2 <fputc+0x48>
    22a6:	8e 81       	ldd	r24, Y+6	; 0x06
    22a8:	9f 81       	ldd	r25, Y+7	; 0x07
    22aa:	01 96       	adiw	r24, 0x01	; 1
    22ac:	9f 83       	std	Y+7, r25	; 0x07
    22ae:	8e 83       	std	Y+6, r24	; 0x06
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <fputc+0x4c>
    22b2:	0f ef       	ldi	r16, 0xFF	; 255
    22b4:	1f ef       	ldi	r17, 0xFF	; 255
    22b6:	c8 01       	movw	r24, r16
    22b8:	df 91       	pop	r29
    22ba:	cf 91       	pop	r28
    22bc:	1f 91       	pop	r17
    22be:	0f 91       	pop	r16
    22c0:	08 95       	ret

000022c2 <__ultoa_invert>:
    22c2:	fa 01       	movw	r30, r20
    22c4:	aa 27       	eor	r26, r26
    22c6:	28 30       	cpi	r18, 0x08	; 8
    22c8:	51 f1       	breq	.+84     	; 0x231e <__ultoa_invert+0x5c>
    22ca:	20 31       	cpi	r18, 0x10	; 16
    22cc:	81 f1       	breq	.+96     	; 0x232e <__ultoa_invert+0x6c>
    22ce:	e8 94       	clt
    22d0:	6f 93       	push	r22
    22d2:	6e 7f       	andi	r22, 0xFE	; 254
    22d4:	6e 5f       	subi	r22, 0xFE	; 254
    22d6:	7f 4f       	sbci	r23, 0xFF	; 255
    22d8:	8f 4f       	sbci	r24, 0xFF	; 255
    22da:	9f 4f       	sbci	r25, 0xFF	; 255
    22dc:	af 4f       	sbci	r26, 0xFF	; 255
    22de:	b1 e0       	ldi	r27, 0x01	; 1
    22e0:	3e d0       	rcall	.+124    	; 0x235e <__ultoa_invert+0x9c>
    22e2:	b4 e0       	ldi	r27, 0x04	; 4
    22e4:	3c d0       	rcall	.+120    	; 0x235e <__ultoa_invert+0x9c>
    22e6:	67 0f       	add	r22, r23
    22e8:	78 1f       	adc	r23, r24
    22ea:	89 1f       	adc	r24, r25
    22ec:	9a 1f       	adc	r25, r26
    22ee:	a1 1d       	adc	r26, r1
    22f0:	68 0f       	add	r22, r24
    22f2:	79 1f       	adc	r23, r25
    22f4:	8a 1f       	adc	r24, r26
    22f6:	91 1d       	adc	r25, r1
    22f8:	a1 1d       	adc	r26, r1
    22fa:	6a 0f       	add	r22, r26
    22fc:	71 1d       	adc	r23, r1
    22fe:	81 1d       	adc	r24, r1
    2300:	91 1d       	adc	r25, r1
    2302:	a1 1d       	adc	r26, r1
    2304:	20 d0       	rcall	.+64     	; 0x2346 <__ultoa_invert+0x84>
    2306:	09 f4       	brne	.+2      	; 0x230a <__ultoa_invert+0x48>
    2308:	68 94       	set
    230a:	3f 91       	pop	r19
    230c:	2a e0       	ldi	r18, 0x0A	; 10
    230e:	26 9f       	mul	r18, r22
    2310:	11 24       	eor	r1, r1
    2312:	30 19       	sub	r19, r0
    2314:	30 5d       	subi	r19, 0xD0	; 208
    2316:	31 93       	st	Z+, r19
    2318:	de f6       	brtc	.-74     	; 0x22d0 <__ultoa_invert+0xe>
    231a:	cf 01       	movw	r24, r30
    231c:	08 95       	ret
    231e:	46 2f       	mov	r20, r22
    2320:	47 70       	andi	r20, 0x07	; 7
    2322:	40 5d       	subi	r20, 0xD0	; 208
    2324:	41 93       	st	Z+, r20
    2326:	b3 e0       	ldi	r27, 0x03	; 3
    2328:	0f d0       	rcall	.+30     	; 0x2348 <__ultoa_invert+0x86>
    232a:	c9 f7       	brne	.-14     	; 0x231e <__ultoa_invert+0x5c>
    232c:	f6 cf       	rjmp	.-20     	; 0x231a <__ultoa_invert+0x58>
    232e:	46 2f       	mov	r20, r22
    2330:	4f 70       	andi	r20, 0x0F	; 15
    2332:	40 5d       	subi	r20, 0xD0	; 208
    2334:	4a 33       	cpi	r20, 0x3A	; 58
    2336:	18 f0       	brcs	.+6      	; 0x233e <__ultoa_invert+0x7c>
    2338:	49 5d       	subi	r20, 0xD9	; 217
    233a:	31 fd       	sbrc	r19, 1
    233c:	40 52       	subi	r20, 0x20	; 32
    233e:	41 93       	st	Z+, r20
    2340:	02 d0       	rcall	.+4      	; 0x2346 <__ultoa_invert+0x84>
    2342:	a9 f7       	brne	.-22     	; 0x232e <__ultoa_invert+0x6c>
    2344:	ea cf       	rjmp	.-44     	; 0x231a <__ultoa_invert+0x58>
    2346:	b4 e0       	ldi	r27, 0x04	; 4
    2348:	a6 95       	lsr	r26
    234a:	97 95       	ror	r25
    234c:	87 95       	ror	r24
    234e:	77 95       	ror	r23
    2350:	67 95       	ror	r22
    2352:	ba 95       	dec	r27
    2354:	c9 f7       	brne	.-14     	; 0x2348 <__ultoa_invert+0x86>
    2356:	00 97       	sbiw	r24, 0x00	; 0
    2358:	61 05       	cpc	r22, r1
    235a:	71 05       	cpc	r23, r1
    235c:	08 95       	ret
    235e:	9b 01       	movw	r18, r22
    2360:	ac 01       	movw	r20, r24
    2362:	0a 2e       	mov	r0, r26
    2364:	06 94       	lsr	r0
    2366:	57 95       	ror	r21
    2368:	47 95       	ror	r20
    236a:	37 95       	ror	r19
    236c:	27 95       	ror	r18
    236e:	ba 95       	dec	r27
    2370:	c9 f7       	brne	.-14     	; 0x2364 <__ultoa_invert+0xa2>
    2372:	62 0f       	add	r22, r18
    2374:	73 1f       	adc	r23, r19
    2376:	84 1f       	adc	r24, r20
    2378:	95 1f       	adc	r25, r21
    237a:	a0 1d       	adc	r26, r0
    237c:	08 95       	ret

0000237e <_exit>:
    237e:	f8 94       	cli

00002380 <__stop_program>:
    2380:	ff cf       	rjmp	.-2      	; 0x2380 <__stop_program>
